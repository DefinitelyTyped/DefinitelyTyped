// Type definitions for non-npm package Titanium 8.0
// Project: https://github.com/appcelerator/titanium_mobile
// Definitions by: Axway Appcelerator <https://github.com/appcelerator>
//                 Jan Vennemann <https://github.com/janvennemann>
//                 Mathias Lorenzen <https://github.com/ffMathy>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.6
declare const Ti: typeof Titanium;

/**
 * The top-level Titanium module.
 */
declare namespace Titanium {
	/**
	 * Indicates if the proxy will bubble an event to its parent.
	 */
	let bubbleParent: boolean;

	/**
	 * The name of the API that this proxy corresponds to.
	 */
	const apiName: string;

	/**
	 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
	 */
	let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

	/**
	 * User-agent string used by Titanium.
	 */
	let userAgent: string;

	/**
	 * Version of Titanium that is executing.
	 */
	const version: string;

	/**
	 * Date of the Titanium build.
	 */
	const buildDate: string;

	/**
	 * Git hash of the Titanium build.
	 */
	const buildHash: string;

	/**
	 * Adds the specified callback as an event listener for the named event.
	 */
	function addEventListener(name: string, callback: (param0: any) => any): void;

	/**
	 * Removes the specified callback as an event listener for the named event.
	 */
	function removeEventListener(name: string, callback: (param0: any) => any): void;

	/**
	 * Fires a synthesized event to any registered listeners.
	 */
	function fireEvent(name: string, event: any): void;

	/**
	 * Applies the properties to the proxy.
	 */
	function applyProperties(props: any): void;

	/**
	 * Creates a new buffer based on the params.
	 */
	function createBuffer(params: CreateBufferArgs): Titanium.Buffer;

	/**
	 * Creates and returns an instance of <Titanium.Proxy>.
	 */
	function createProxy(parameters?: any): Titanium.Proxy;

	/**
	 * Gets the value of the <Titanium.bubbleParent> property.
	 */
	function getBubbleParent(): boolean;

	/**
	 * Sets the value of the <Titanium.bubbleParent> property.
	 */
	function setBubbleParent(bubbleParent: boolean): void;

	/**
	 * Gets the value of the <Titanium.apiName> property.
	 */
	function getApiName(): string;

	/**
	 * Gets the value of the <Titanium.lifecycleContainer> property.
	 */
	function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

	/**
	 * Sets the value of the <Titanium.lifecycleContainer> property.
	 */
	function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

	/**
	 * Sets the value of the <Titanium.lifecycleContainer> property.
	 */
	function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

	/**
	 * Gets the value of the <Titanium.userAgent> property.
	 */
	function getUserAgent(): string;

	/**
	 * Sets the value of the <Titanium.userAgent> property.
	 */
	function setUserAgent(userAgent: string): void;

	/**
	 * Gets the value of the <Titanium.version> property.
	 */
	function getVersion(): string;

	/**
	 * Gets the value of the <Titanium.buildDate> property.
	 */
	function getBuildDate(): string;

	/**
	 * Gets the value of the <Titanium.buildHash> property.
	 */
	function getBuildHash(): string;

	/**
	 * The base for all Titanium objects.
	 */
	interface Proxy {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		readonly apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		lifecycleContainer?: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		applyProperties(props: any): void;

		/**
		 * Gets the value of the <Titanium.Proxy.bubbleParent> property.
		 */
		getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Proxy.bubbleParent> property.
		 */
		setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Proxy.apiName> property.
		 */
		getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Proxy.lifecycleContainer> property.
		 */
		getLifecycleContainer?(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Proxy.lifecycleContainer> property.
		 */
		setLifecycleContainer?(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Proxy.lifecycleContainer> property.
		 */
		setLifecycleContainer?(lifecycleContainer: Titanium.UI.TabGroup): void;

	}
	/**
	 * A container for binary data.
	 */
	interface Blob extends Titanium.Proxy {
		/**
		 * File object represented by this blob, or `null` if this blob is not
		 * associated with a file.
		 */
		readonly file: Titanium.Filesystem.File;

		/**
		 * Length of this blob in bytes.
		 */
		readonly length: number;

		/**
		 * UTF-8 string representation of the data in this blob.
		 */
		readonly text: string;

		/**
		 * Mime type of the data in this blob.
		 */
		readonly mimeType: string;

		/**
		 * If this blob represents an image, this is the height of the image in pixels.
		 */
		readonly height: number;

		/**
		 * If this blob represents an image, this is the width of the image in pixels.
		 */
		readonly width: number;

		/**
		 * If this blob represents a [File](Titanium.Filesystem.File), this is the file URL
		 * that represents it.
		 */
		readonly nativePath: string;

		/**
		 * Size of the blob in pixels (for image blobs) or bytes (for all other blobs).
		 */
		readonly size: number;

		/**
		 * Returns a string representation of this blob.
		 */
		toString(): string;

		/**
		 * Appends the data from another blob to this blob.
		 */
		append(blob: Titanium.Blob): void;

		/**
		 * Creates a new blob by cropping the underlying image to the specified dimensions.
		 */
		imageAsCropped(options: any): Titanium.Blob;

		/**
		 * Creates a new blob by resizing and scaling the underlying image to the specified dimensions.
		 */
		imageAsResized(width: number, height: number): Titanium.Blob;

		/**
		 * Creates a new blob by compressing the underlying image to the specified quality.
		 */
		imageAsCompressed(quality: number): Titanium.Blob;

		/**
		 * Returns a thumbnail version of the underlying image, optionally with a border and rounded corners.
		 */
		imageAsThumbnail(size: number, borderSize?: number, cornerRadius?: number): Titanium.Blob;

		/**
		 * Returns a copy of the underlying image with an added alpha channel.
		 */
		imageWithAlpha(): Titanium.Blob;

		/**
		 * Returns a copy of the underlying image with rounded corners added.
		 */
		imageWithRoundedCorner(cornerSize: number, borderSize?: number): Titanium.Blob;

		/**
		 * Returns a copy of the underlying image with an added transparent border.
		 */
		imageWithTransparentBorder(size: number): Titanium.Blob;

		/**
		 * Gets the value of the <Titanium.Blob.file> property.
		 */
		getFile(): Titanium.Filesystem.File;

		/**
		 * Gets the value of the <Titanium.Blob.length> property.
		 */
		getLength(): number;

		/**
		 * Gets the value of the <Titanium.Blob.text> property.
		 */
		getText(): string;

		/**
		 * Gets the value of the <Titanium.Blob.mimeType> property.
		 */
		getMimeType(): string;

		/**
		 * Gets the value of the <Titanium.Blob.height> property.
		 */
		getHeight(): number;

		/**
		 * Gets the value of the <Titanium.Blob.width> property.
		 */
		getWidth(): number;

		/**
		 * Gets the value of the <Titanium.Blob.nativePath> property.
		 */
		getNativePath(): string;

		/**
		 * Gets the value of the <Titanium.Blob.size> property.
		 */
		getSize(): number;

	}
	/**
	 * Wrapper around <Titanium.Blob> that implements the <Titanium.IOStream> interface.
	 */
	interface BlobStream extends Titanium.Proxy {
		/**
		 * Reads data from this stream into a buffer.
		 */
		read(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: ReadCallbackArgs) => any): number;

		/**
		 * Writes data from a buffer to this stream.
		 */
		write(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: WriteCallbackArgs) => any): number;

		/**
		 * Indicates whether this stream is writable.
		 */
		isWritable(): boolean;

		/**
		 * Indicates whether this stream is readable.
		 */
		isReadable(): boolean;

		/**
		 * Closes this stream.
		 */
		close(): void;

	}
	/**
	 * Buffer is a mutable, resizable container for raw data.
	 */
	interface Buffer extends Titanium.Proxy {
		/**
		 * Length of the buffer in bytes.
		 */
		length: number;

		/**
		 * Data to be encoded.
		 */
		value: number | string;

		/**
		 * The type of data encoding to use with `value`.
		 */
		type: string;

		/**
		 * Byte order of this buffer.
		 */
		byteOrder: number;

		/**
		 * Appends `sourceBuffer` to the this buffer.
		 */
		append(sourceBuffer: Titanium.Buffer, sourceOffset?: number, sourceLength?: number): number;

		/**
		 * Inserts data from `sourceBuffer` into this buffer at `offset`.
		 */
		insert(sourceBuffer: Titanium.Buffer, offset: number, sourceOffset?: number, sourceLength?: number): number;

		/**
		 * Copies data from `sourceBuffer` into the current buffer at `offset`.
		 */
		copy(sourceBuffer: Titanium.Buffer, offset: number, sourceOffset?: number, sourceLength?: number): number;

		/**
		 * Creates a complete or partial copy of this buffer.
		 */
		clone(offset?: number, length?: number): Titanium.Buffer;

		/**
		 * Fills this buffer with the specified byte value.
		 */
		fill(fillByte: number, offset?: number, length?: number): void;

		/**
		 * Clears this buffer's contents but does not change the size of the buffer.
		 */
		clear(): void;

		/**
		 * Releases the space allocated to the buffer, and sets its length to 0.
		 */
		release(): void;

		/**
		 * Converts this buffer to a String.
		 */
		toString(): string;

		/**
		 * Converts this buffer to a <Titanium.Blob>.
		 */
		toBlob(): Titanium.Blob;

		/**
		 * Gets the value of the <Titanium.Buffer.length> property.
		 */
		getLength(): number;

		/**
		 * Sets the value of the <Titanium.Buffer.length> property.
		 */
		setLength(length: number): void;

		/**
		 * Gets the value of the <Titanium.Buffer.value> property.
		 */
		getValue(): number | string;

		/**
		 * Sets the value of the <Titanium.Buffer.value> property.
		 */
		setValue(value: number): void;

		/**
		 * Sets the value of the <Titanium.Buffer.value> property.
		 */
		setValue(value: string): void;

		/**
		 * Gets the value of the <Titanium.Buffer.type> property.
		 */
		getType(): string;

		/**
		 * Sets the value of the <Titanium.Buffer.type> property.
		 */
		setType(type: string): void;

		/**
		 * Gets the value of the <Titanium.Buffer.byteOrder> property.
		 */
		getByteOrder(): number;

		/**
		 * Sets the value of the <Titanium.Buffer.byteOrder> property.
		 */
		setByteOrder(byteOrder: number): void;

	}
	/**
	 * Wrapper around <Titanium.Buffer> that implements the <Titanium.IOStream> interface.
	 */
	interface BufferStream extends Titanium.Proxy {
		/**
		 * Reads data from this stream into a buffer.
		 */
		read(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: ReadCallbackArgs) => any): number;

		/**
		 * Writes data from a buffer to this stream.
		 */
		write(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: WriteCallbackArgs) => any): number;

		/**
		 * Indicates whether this stream is writable.
		 */
		isWritable(): boolean;

		/**
		 * Indicates whether this stream is readable.
		 */
		isReadable(): boolean;

		/**
		 * Closes this stream.
		 */
		close(): void;

	}
	/**
	 * The base type for all Titanium events.
	 */
	interface Event {
		/**
		 * Source object that fired the event.
		 */
		readonly source: any;

		/**
		 * Name of the event fired.
		 */
		readonly type: string;

		/**
		 * True if the event will try to bubble up if possible.
		 */
		readonly bubbles: boolean;

		/**
		 * Set to true to stop the event from bubbling.
		 */
		cancelBubble: boolean;

	}
	/**
	 * IOStream is the interface that all stream types implement.
	 */
	// tslint:disable-next-line:interface-name
	interface IOStream extends Titanium.Proxy {
		/**
		 * Reads data from this stream into a buffer.
		 */
		read(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: ReadCallbackArgs) => any): number;

		/**
		 * Writes data from a buffer to this stream.
		 */
		write(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: WriteCallbackArgs) => any): number;

		/**
		 * Indicates whether this stream is writable.
		 */
		isWritable(): boolean;

		/**
		 * Indicates whether this stream is readable.
		 */
		isReadable(): boolean;

		/**
		 * Closes this stream.
		 */
		close(): void;

	}

	/**
	 * The main <Titanium.UI> module.
	 */
	namespace UI {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
		 * slowly and speeds up.
		 */
		const ANIMATION_CURVE_EASE_IN: number;

		/**
		 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
		 * slowly, and speeds up, then slows down at the end of the animation.
		 */
		const ANIMATION_CURVE_EASE_IN_OUT: number;

		/**
		 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
		 * quickly, then slows down at the end of the animation.
		 */
		const ANIMATION_CURVE_EASE_OUT: number;

		/**
		 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that proceeds
		 * at a constant rate.
		 */
		const ANIMATION_CURVE_LINEAR: number;

		/**
		 * Use with <Attribute.type> to specify a font.
		 */
		const ATTRIBUTE_FONT: number;

		/**
		 * Use with <Attribute.type> to specify a font color.
		 */
		const ATTRIBUTE_FOREGROUND_COLOR: number;

		/**
		 * Use with <Attribute.type> to specify a background color.
		 */
		const ATTRIBUTE_BACKGROUND_COLOR: number;

		/**
		 * Use with <Attribute.type> to enable or disable ligatures.
		 */
		const ATTRIBUTE_LIGATURE: number;

		/**
		 * Use with <Attribute.value> to use a letterpress text effect.
		 */
		const ATTRIBUTE_LETTERPRESS_STYLE: number;

		/**
		 * Use with <Attribute.type> to specify kerning (space between characters).
		 */
		const ATTRIBUTE_KERN: number;

		/**
		 * Use with <Attribute.type> to place a horizontal line through the text.
		 */
		const ATTRIBUTE_STRIKETHROUGH_STYLE: number;

		/**
		 * Use with <Attribute.type> to place a horizontal line under the text.
		 */
		const ATTRIBUTE_UNDERLINES_STYLE: number;

		/**
		 * Use with <Attribute.type> to place the text in an upper position.
		 */
		const ATTRIBUTE_SUPERSCRIPT_STYLE: number;

		/**
		 * Use with <Attribute.type> to place the text in a lower position.
		 */
		const ATTRIBUTE_SUBSCRIPT_STYLE: number;

		/**
		 * Use with <Attribute.type> to specify a color for the stroke text.
		 */
		const ATTRIBUTE_STROKE_COLOR: number;

		/**
		 * Use with <Attribute.type> to manages the behaviour of string set.
		 */
		const ATTRIBUTE_PARAGRAPH_STYLE: number;

		/**
		 * Use with <Attribute.type> to specify the width of the stroke text.
		 */
		const ATTRIBUTE_STROKE_WIDTH: number;

		/**
		 * Use with <Attribute.type> to display a shadow behind the text.
		 */
		const ATTRIBUTE_SHADOW: number;

		/**
		 * Use with <Attribute.type> to control the direction of the text.
		 */
		const ATTRIBUTE_WRITING_DIRECTION: number;

		/**
		 * Use with <Attribute.type> to apply a text effect.
		 */
		const ATTRIBUTE_TEXT_EFFECT: number;

		/**
		 * Use with <Attribute.type> to create a link.
		 */
		const ATTRIBUTE_LINK: number;

		/**
		 * Use with <Attribute.type> to apply a different baseline to the text.
		 */
		const ATTRIBUTE_BASELINE_OFFSET: number;

		/**
		 * Use with <Attribute.type> to change the color of the horizontal line.
		 */
		const ATTRIBUTE_UNDERLINE_COLOR: number;

		/**
		 * Use with <Attribute.type> to change the color of the horizontal line.
		 */
		const ATTRIBUTE_STRIKETHROUGH_COLOR: number;

		/**
		 * Use with <Attribute.type> to skew the text.
		 */
		const ATTRIBUTE_OBLIQUENESS: number;

		/**
		 * Use with <Attribute.type> to stretch the text horizontally.
		 */
		const ATTRIBUTE_EXPANSION: number;

		/**
		 * Use with <Attribute.type> to wrap and truncate the text.
		 */
		const ATTRIBUTE_LINE_BREAK: number;

		/**
		 * Use with <Attribute.value> to not draw a line.
		 */
		const ATTRIBUTE_UNDERLINE_STYLE_NONE: number;

		/**
		 * Use with <Attribute.value> to draw a single line.
		 */
		const ATTRIBUTE_UNDERLINE_STYLE_SINGLE: number;

		/**
		 * Use with <Attribute.value> to draw a thick line.
		 */
		const ATTRIBUTE_UNDERLINE_STYLE_THICK: number;

		/**
		 * Use with <Attribute.value> to draw a double line.
		 */
		const ATTRIBUTE_UNDERLINE_STYLE_DOUBLE: number;

		/**
		 * Use with <Attribute.value> to draw a solid line.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_SOLID: number;

		/**
		 * Use with <Attribute.value> to draw a dotted line.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_DOT: number;

		/**
		 * Use with <Attribute.value> to draw a dashed line.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_DASH: number;

		/**
		 * Use with <Attribute.value> to draw an alternating line of dashes and dots.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT: number;

		/**
		 * Use with <Attribute.value> to draw an alternating line of dashes and two dots.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT: number;

		/**
		 * Use with <Attribute.value> to draw a line only underneath or through words.
		 */
		const ATTRIBUTE_UNDERLINE_BY_WORD: number;

		/**
		 * Use with <Attribute.value> to use the embedded text direction.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_EMBEDDING: number;

		/**
		 * Use with <Attribute.value> to override the text direction.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_OVERRIDE: number;

		/**
		 * Use with <Attribute.value> to use the
		 * [Unicode Bidirection Algorithm rules P2 and P3](http://www.unicode.org/reports/tr9/#The_Paragraph_Level)
		 * to determine which direction to use.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_NATURAL: number;

		/**
		 * Use with <Attribute.value> to write text left to right.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT: number;

		/**
		 * Use with <Attribute.value> to write text right to left.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT: number;

		/**
		 * Use with <Attribute.value> to wrap words at word boundaries.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_WORD_WRAPPING: number;

		/**
		 * Use with <Attribute.value> to wrap words at word boundaries.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_CHAR_WRAPPING: number;

		/**
		 * Use with <Attribute.value> to set lines to not draw past the edge of the text container.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_CLIPPING: number;

		/**
		 * Use with <Attribute.value> to use ellipsis glyph at the beginning of the line for missing text.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_HEAD: number;

		/**
		 * Use with <Attribute.value> to use ellipsis glyph at the middle of the line for missing text.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_MIDDLE: number;

		/**
		 * Use with <Attribute.value> to use ellipsis glyph at the end of the line for missing text.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_TAIL: number;

		/**
		 * Converts strings formatted as addresses into clickable links.
		 */
		const AUTODETECT_ADDRESS: number;

		/**
		 * Converts all detectable types of data into clickable links.
		 */
		const AUTODETECT_ALL: number;

		/**
		 * Converts strings formatted as calendar events into clickable links.
		 */
		const AUTODETECT_CALENDAR: number;

		/**
		 * Converts strings formatted as URLs into clickable links.
		 */
		const AUTODETECT_LINK: number;

		/**
		 * Disables converting strings into clickable links.
		 */
		const AUTODETECT_NONE: number;

		/**
		 * Converts strings formatted as phone numbers into clickable links.
		 */
		const AUTODETECT_PHONE: number;

		/**
		 * Specifies the expectation of an account or login name.
		 */
		const AUTOFILL_TYPE_USERNAME: string;

		/**
		 * Specifies the expectation of a password.
		 */
		const AUTOFILL_TYPE_PASSWORD: string;

		/**
		 * Specifies the expectation of a name.
		 */
		const AUTOFILL_TYPE_NAME: string;

		/**
		 * Specifies the expectation of a prefix or title, such as 'Dr.'
		 */
		const AUTOFILL_TYPE_NAME_PREFIX: string;

		/**
		 * Specifies the expectation of a given name.
		 */
		const AUTOFILL_TYPE_GIVEN_NAME: string;

		/**
		 * Specifies the expectation of a middle name.
		 */
		const AUTOFILL_TYPE_MIDDLE_NAME: string;

		/**
		 * Specifies the expectation of a family name.
		 */
		const AUTOFILL_TYPE_FAMILY_NAME: string;

		/**
		 * Specifies the expectation of a suffix, such as 'Jr.'
		 */
		const AUTOFILL_TYPE_NAME_SUFFIX: string;

		/**
		 * Specifies the expectation of a nickname.
		 */
		const AUTOFILL_TYPE_NICKNAME: string;

		/**
		 * Specifies the expectation of a job title.
		 */
		const AUTOFILL_TYPE_JOB_TITLE: string;

		/**
		 * Specifies the expectation of an organization name.
		 */
		const AUTOFILL_TYPE_ORGANIZATION_NAME: string;

		/**
		 * Specifies the expectation of a location, such as a point of interest, an address, or another way to identify a location.
		 */
		const AUTOFILL_TYPE_LOCATION: string;

		/**
		 * Specifies the expectation of an address.
		 */
		const AUTOFILL_TYPE_ADDRESS: string;

		/**
		 * Specifies the expectation of the first line of a street address.
		 */
		const AUTOFILL_TYPE_ADDRESS_LINE1: string;

		/**
		 * Specifies the expectation of the second line of a street address.
		 */
		const AUTOFILL_TYPE_ADDRESS_LINE2: string;

		/**
		 * Specifies the expectation of a city name.
		 */
		const AUTOFILL_TYPE_ADDRESS_CITY: string;

		/**
		 * Specifies the expectation of a state name.
		 */
		const AUTOFILL_TYPE_ADDRESS_STATE: string;

		/**
		 * Specifies the expectation of a city name combined with a state name.
		 */
		const AUTOFILL_TYPE_ADDRESS_CITY_STATE: string;

		/**
		 * Specifies the expectation of a sublocality.
		 */
		const AUTOFILL_TYPE_SUBLOCALITY: string;

		/**
		 * Specifies the expectation of a country name.
		 */
		const AUTOFILL_TYPE_COUNTRY_NAME: string;

		/**
		 * Specifies the expectation of a postal code.
		 */
		const AUTOFILL_TYPE_POSTAL_CODE: string;

		/**
		 * Specifies the expectation of a telephone number.
		 */
		const AUTOFILL_TYPE_PHONE: string;

		/**
		 * Specifies the expectation of an email address.
		 */
		const AUTOFILL_TYPE_EMAIL: string;

		/**
		 * Specifies the expectation of a URL.
		 */
		const AUTOFILL_TYPE_URL: string;

		/**
		 * Specifies the expectation of a card number.
		 */
		const AUTOFILL_TYPE_CARD_NUMBER: string;

		/**
		 * Specifies the expectation of a card security code.
		 */
		const AUTOFILL_TYPE_CARD_SECURITY_CODE: string;

		/**
		 * Specifies the expectation of a card expiration date.
		 */
		const AUTOFILL_TYPE_CARD_EXPIRATION_DATE: string;

		/**
		 * Specifies the expectation of a card expiration day.
		 */
		const AUTOFILL_TYPE_CARD_EXPIRATION_DAY: string;

		/**
		 * Specifies the expectation of a card expiration month.
		 */
		const AUTOFILL_TYPE_CARD_EXPIRATION_MONTH: string;

		/**
		 * Specifies the expectation of a card expiration year.
		 */
		const AUTOFILL_TYPE_CARD_EXPIRATION_YEAR: string;

		/**
		 * Specifies the expectation of a new password.
		 */
		const AUTOFILL_TYPE_NEW_PASSWORD: string;

		/**
		 * Specifies the expectation of a single-factor SMS login code.
		 */
		const AUTOFILL_TYPE_ONE_TIME_CODE: string;

		/**
		 * Converts strings formatted as addresses into clickable links.
		 */
		const AUTOLINK_MAP_ADDRESSES: number;

		/**
		 * Converts all detectable types of data into clickable links.
		 */
		const AUTOLINK_ALL: number;

		/**
		 * Converts strings formatted as calendar events into clickable links.
		 */
		const AUTOLINK_CALENDAR: number;

		/**
		 * Converts strings formatted as URLs into clickable links.
		 */
		const AUTOLINK_URLS: number;

		/**
		 * Disables converting strings into clickable links.
		 */
		const AUTOLINK_NONE: number;

		/**
		 * Converts strings formatted as phone numbers into clickable links.
		 */
		const AUTOLINK_PHONE_NUMBERS: number;

		/**
		 * Converts strings formatted as email addresses into clickable links.
		 */
		const AUTOLINK_EMAIL_ADDRESSES: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_CLEAR: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_COLOR: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_COLOR_BURN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_COLOR_DODGE: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_COPY: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DARKEN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DESTINATION_ATOP: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DESTINATION_IN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DESTINATION_OUT: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DESTINATION_OVER: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DIFFERENCE: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_EXCLUSION: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_HARD_LIGHT: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_HUE: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_LIGHTEN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_LUMINOSITY: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_MULTIPLY: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_NORMAL: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_OVERLAY: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_PLUS_DARKER: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_PLUS_LIGHTER: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SATURATION: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SCREEN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SOFT_LIGHT: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SOURCE_ATOP: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SOURCE_IN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SOURCE_OUT: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_XOR: number;

		/**
		 * Use when creating a TextField to specify the hintType as static.
		 */
		const HINT_TYPE_STATIC: number;

		/**
		 * Use when creating a TextField to specify the hintType as animated.
		 */
		const HINT_TYPE_ANIMATED: number;

		/**
		 * Add ellipses at word boundaries, unless the word itself doesn't fit on a single line.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_WORD_WRAP: number;

		/**
		 * Add ellipses before the first character that doesnt fit.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_CHAR_WRAP: number;

		/**
		 * Lines are simply not drawn past the edge of the text container.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_CLIP: number;

		/**
		 * Add ellipses at the beginning of the label if the text is too large to fit.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_START: number;

		/**
		 * Add ellipses in the middle of the label if the text is too large to fit.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_MIDDLE: number;

		/**
		 * Add ellipses at the end of the label if the text is too large to fit.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_END: number;

		/**
		 * Turns on a marquee effect of the label if the text is too large to fit. (This requires <Titanium.UI.Label.focusable> to be true)
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_MARQUEE: number;

		/**
		 * Disables ellipsizing of the label. The text will be cut off if it is too long.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_NONE: number;

		/**
		 * Specifies that the top edge of the window can extend.
		 */
		const EXTEND_EDGE_TOP: number;

		/**
		 * Specifies that the bottom edge of the window can extend.
		 */
		const EXTEND_EDGE_BOTTOM: number;

		/**
		 * Specifies that the left edge of the window can extend.
		 */
		const EXTEND_EDGE_LEFT: number;

		/**
		 * Specifies that the right edge of the window can extend.
		 */
		const EXTEND_EDGE_RIGHT: number;

		/**
		 * Specifies that none of the edges of the window can extend.
		 */
		const EXTEND_EDGE_NONE: number;

		/**
		 * Specifies that all the edges of the window can extend.
		 */
		const EXTEND_EDGE_ALL: number;

		/**
		 * Constant value for face-down orientation.
		 */
		const FACE_DOWN: number;

		/**
		 * Constant value for face-up orientation.
		 */
		const FACE_UP: number;

		/**
		 * FILL behavior for UI layout.
		 */
		const FILL: string;

		/**
		 * Release free space when hiding an object.
		 */
		const HIDDEN_BEHAVIOR_GONE: number;

		/**
		 * Keeps free space when hiding an object.
		 */
		const HIDDEN_BEHAVIOR_INVISIBLE: number;

		/**
		 * Use a bezel-style border on the input field.
		 */
		const INPUT_BORDERSTYLE_BEZEL: number;

		/**
		 * Use a simple line border on the input field.
		 */
		const INPUT_BORDERSTYLE_LINE: number;

		/**
		 * Use no border on the input field.
		 */
		const INPUT_BORDERSTYLE_NONE: number;

		/**
		 * Use a rounded-rectangle border on the input field.
		 */
		const INPUT_BORDERSTYLE_ROUNDED: number;

		/**
		 * Always show buttons on the input field.
		 */
		const INPUT_BUTTONMODE_ALWAYS: number;

		/**
		 * Never show buttons on the input field.
		 */
		const INPUT_BUTTONMODE_NEVER: number;

		/**
		 * Show buttons on the input field when it loses focus.
		 */
		const INPUT_BUTTONMODE_ONBLUR: number;

		/**
		 * Show buttons on the input field when it gains focus.
		 */
		const INPUT_BUTTONMODE_ONFOCUS: number;

		/**
		 * Use a keyboard with a number pad only, with the pad keyboard layout. Accepts only numbers.
		 */
		const INPUT_TYPE_CLASS_NUMBER: number;

		/**
		 * Use an ASCII keyboard, with the standard keyboard layout.
		 */
		const INPUT_TYPE_CLASS_TEXT: number;

		/**
		 * Use a keyboard appearance suitable for entering text on an alert.
		 */
		const KEYBOARD_APPEARANCE_ALERT: number;

		/**
		 * Use the platform-specific default keyboard appearance.
		 */
		const KEYBOARD_APPEARANCE_DEFAULT: number;

		/**
		 * Use the platform-specific dark keyboard appearance.
		 */
		const KEYBOARD_APPEARANCE_DARK: number;

		/**
		 * Use the platform-specific light keyboard appearance.
		 */
		const KEYBOARD_APPEARANCE_LIGHT: number;

		/**
		 * Use an ASCII keyboard, with the standard keyboard layout.
		 */
		const KEYBOARD_ASCII: number;

		/**
		 * Use a keyboard with decimal numbers only, with the pad keyboard layout.
		 */
		const KEYBOARD_DECIMAL_PAD: number;

		/**
		 * Use the default keyboard, depending on the platform.
		 */
		const KEYBOARD_DEFAULT: number;

		/**
		 * Use a keyboard suitable for composing email, with the standard keyboard layout.
		 */
		const KEYBOARD_EMAIL: number;

		/**
		 * Use a keyboard suitable for entering names and phone numbers, with the pad keyboard layout.
		 */
		const KEYBOARD_NAMEPHONE_PAD: number;

		/**
		 * Use a keyboard with numbers and punctuation only, with the standard keyboard layout.
		 */
		const KEYBOARD_NUMBERS_PUNCTUATION: number;

		/**
		 * Use a keyboard with a number pad only, with the pad keyboard layout.
		 */
		const KEYBOARD_NUMBER_PAD: number;

		/**
		 * Use a keyboard with a phone-style number pad, with the pad keyboard layout.
		 */
		const KEYBOARD_PHONE_PAD: number;

		/**
		 * Use a keyboard optimized for entering URLs, with the standard keyboard layout.
		 */
		const KEYBOARD_URL: number;

		/**
		 * Use a keyboard with decimal numbers only, with the pad keyboard layout.
		 */
		const KEYBOARD_TYPE_DECIMAL_PAD: number;

		/**
		 * Use an ASCII keyboard, with the standard keyboard layout.
		 */
		const KEYBOARD_TYPE_ASCII: number;

		/**
		 * Use the default keyboard, depending on the platform.
		 */
		const KEYBOARD_TYPE_DEFAULT: number;

		/**
		 * Use a keyboard suitable for composing email, with the standard keyboard layout.
		 */
		const KEYBOARD_TYPE_EMAIL: number;

		/**
		 * Use a keyboard suitable for entering names and phone numbers, with the pad keyboard layout.
		 */
		const KEYBOARD_TYPE_NAMEPHONE_PAD: number;

		/**
		 * Use a keyboard with numbers and punctuation only, with the standard keyboard layout.
		 */
		const KEYBOARD_TYPE_NUMBERS_PUNCTUATION: number;

		/**
		 * Use a keyboard with a number pad only, with the pad keyboard layout.
		 */
		const KEYBOARD_TYPE_NUMBER_PAD: number;

		/**
		 * Use a keyboard with a phone-style number pad, with the pad keyboard layout.
		 */
		const KEYBOARD_TYPE_PHONE_PAD: number;

		/**
		 * Use a keyboard optimized for web search terms and URL entry.
		 */
		const KEYBOARD_TYPE_WEBSEARCH: number;

		/**
		 * Use a keyboard optimized for twitter text entry, with easy access to the @ and
		 */
		const KEYBOARD_TYPE_TWITTER: number;

		/**
		 * Use a keyboard optimized for entering URLs, with the standard keyboard layout.
		 */
		const KEYBOARD_TYPE_URL: number;

		/**
		 * Standard landscape orientation (home button on left).
		 */
		const LANDSCAPE_LEFT: number;

		/**
		 * Reverse landscape orientation (home button on right).
		 */
		const LANDSCAPE_RIGHT: number;

		/**
		 * Do not display anything on the right side of an item in a list view.
		 */
		const LIST_ACCESSORY_TYPE_NONE: number;

		/**
		 * Displays a checkmark on the right side of an item in a list view.
		 */
		const LIST_ACCESSORY_TYPE_CHECKMARK: number;

		/**
		 * Displays a detail disclosure button on the right side of an item in a list view.
		 */
		const LIST_ACCESSORY_TYPE_DETAIL: number;

		/**
		 * Displays a disclosure indicator on the right side of an item in a list view.
		 */
		const LIST_ACCESSORY_TYPE_DISCLOSURE: number;

		/**
		 * A built-in style for an item with an image view and left-aligned title label.
		 */
		const LIST_ITEM_TEMPLATE_DEFAULT: number;

		/**
		 * A built-in style for a item with an image view; a left-aligned title label; and a
		 * right-aligned subtitle label.
		 */
		const LIST_ITEM_TEMPLATE_SETTINGS: number;

		/**
		 * A built-in style for an item with a right-aligned title label on the left side of the cell,
		 * which is next to a left-aligned subtitle label.
		 */
		const LIST_ITEM_TEMPLATE_CONTACTS: number;

		/**
		 * A built-in style for an item with an image view; a black, left-aligned title label across the
		 * top of the cell and a subtitle label below it.
		 */
		const LIST_ITEM_TEMPLATE_SUBTITLE: number;

		/**
		 * Specifies a long duration for an Android Toast notification (<Titanium.UI.Notification>).
		 */
		const NOTIFICATION_DURATION_LONG: number;

		/**
		 * Specifies a short duration for an Android Toast notification (<Titanium.UI.Notification>).
		 */
		const NOTIFICATION_DURATION_SHORT: number;

		/**
		 * Specifies that the clipboard items should not be available to other devices through Handoff.
		 */
		const CLIPBOARD_OPTION_LOCAL_ONLY: string;

		/**
		 * Specifies the time and date that you want the system to remove the clipboard items from the clipboard.
		 */
		const CLIPBOARD_OPTION_EXPIRATION_DATE: string;

		/**
		 * Use a picker with a countdown timer appearance, showing hours and minutes.
		 */
		const PICKER_TYPE_COUNT_DOWN_TIMER: number;

		/**
		 * Use a date picker.
		 */
		const PICKER_TYPE_DATE: number;

		/**
		 * Use a date and time picker.
		 */
		const PICKER_TYPE_DATE_AND_TIME: number;

		/**
		 * Use a plain picker (for values other than date or time).
		 */
		const PICKER_TYPE_PLAIN: number;

		/**
		 * Use a time picker.
		 */
		const PICKER_TYPE_TIME: number;

		/**
		 * Orientation constant for portrait mode orientation.
		 */
		const PORTRAIT: number;

		/**
		 * Set the return key text to "Continue".
		 */
		const RETURNKEY_CONTINUE: number;

		/**
		 * Use the default return key on the virtual keyboard.
		 */
		const RETURNKEY_DEFAULT: number;

		/**
		 * Set the return key text to "Done".
		 */
		const RETURNKEY_DONE: number;

		/**
		 * Set the return key text to "Emergency Call".
		 */
		const RETURNKEY_EMERGENCY_CALL: number;

		/**
		 * Set the return key text to "Go".
		 */
		const RETURNKEY_GO: number;

		/**
		 * Set the return key text to "Google".
		 */
		const RETURNKEY_GOOGLE: number;

		/**
		 * Set the return key text to "Join".
		 */
		const RETURNKEY_JOIN: number;

		/**
		 * Set the return key text to "Next".
		 */
		const RETURNKEY_NEXT: number;

		/**
		 * Set the return key text to "Route".
		 */
		const RETURNKEY_ROUTE: number;

		/**
		 * Set the return key text to "Search".
		 */
		const RETURNKEY_SEARCH: number;

		/**
		 * Set the return key text to "Send".
		 */
		const RETURNKEY_SEND: number;

		/**
		 * Set the return key text to "Yahoo".
		 */
		const RETURNKEY_YAHOO: number;

		/**
		 * SIZE behavior for UI layout.
		 */
		const SIZE: string;

		/**
		 * The row divider is hidden.
		 */
		const TABLE_VIEW_SEPARATOR_STYLE_NONE: number;

		/**
		 * The row divider is shown as a single line.
		 */
		const TABLE_VIEW_SEPARATOR_STYLE_SINGLE_LINE: number;

		/**
		 * Center align text.
		 */
		const TEXT_ALIGNMENT_CENTER: number | string;

		/**
		 * Justify align text.
		 */
		const TEXT_ALIGNMENT_JUSTIFY: number | string;

		/**
		 * Left align text.
		 */
		const TEXT_ALIGNMENT_LEFT: number | string;

		/**
		 * Right align text.
		 */
		const TEXT_ALIGNMENT_RIGHT: number | string;

		/**
		 * Auto-capitalize all text in the input field.
		 */
		const TEXT_AUTOCAPITALIZATION_ALL: number;

		/**
		 * Do not auto-capitalize.
		 */
		const TEXT_AUTOCAPITALIZATION_NONE: number;

		/**
		 * Use sentence-style auto-capitalization in the input field.
		 */
		const TEXT_AUTOCAPITALIZATION_SENTENCES: number;

		/**
		 * Auto-capitalize the first letter of each word in the input field.
		 */
		const TEXT_AUTOCAPITALIZATION_WORDS: number;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_HEADLINE: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_SUBHEADLINE: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_BODY: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_FOOTNOTE: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_CAPTION1: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_CAPTION2: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_CALLOUT: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_TITLE1: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_TITLE2: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_TITLE3: string;

		/**
		 * Align text to the bottom of the view.
		 */
		const TEXT_VERTICAL_ALIGNMENT_BOTTOM: number | string;

		/**
		 * Vertically align text to the center of the view.
		 */
		const TEXT_VERTICAL_ALIGNMENT_CENTER: number | string;

		/**
		 * Align text to the top of the view.
		 */
		const TEXT_VERTICAL_ALIGNMENT_TOP: number | string;

		/**
		 * Unit constant representing units in centimeters.
		 */
		const UNIT_CM: string;

		/**
		 * Unit constant representing units in density-independent pixels.
		 */
		const UNIT_DIP: string;

		/**
		 * Unit constant representing units in inches.
		 */
		const UNIT_IN: string;

		/**
		 * Unit constant representing units in millimeters.
		 */
		const UNIT_MM: string;

		/**
		 * Unit constant representing units in pixels.
		 */
		const UNIT_PX: string;

		/**
		 * Orientation constant representing an unknown orientation.
		 */
		const UNKNOWN: number;

		/**
		 * Orientation constant for inverted portait orientation.
		 */
		const UPSIDE_PORTRAIT: number;

		/**
		 * Authentication error code reported via <Titanium.UI.WebView.error>.
		 */
		const URL_ERROR_AUTHENTICATION: number;

		/**
		 * Bad url error code reported via <Titanium.UI.WebView.error>.
		 */
		const URL_ERROR_BAD_URL: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> for a failure to connect to host.
		 */
		const URL_ERROR_CONNECT: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> for an SSL failure.
		 */
		const URL_ERROR_SSL_FAILED: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> for a failure to access a file resource on a host, except "file not found", which has its own constant.
		 */
		const URL_ERROR_FILE: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a requested file does not exist on the host.
		 */
		const URL_ERROR_FILE_NOT_FOUND: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a host name cannot be resolved, such as via a DNS lookup error.
		 */
		const URL_ERROR_HOST_LOOKUP: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a redirect loop is detected.
		 */
		const URL_ERROR_REDIRECT_LOOP: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a timeout occurs.
		 */
		const URL_ERROR_TIMEOUT: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when an unknown error occurs.
		 */
		const URL_ERROR_UNKNOWN: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a url contains an unsupported scheme.
		 */
		const URL_ERROR_UNSUPPORTED_SCHEME: number;

		/**
		 * Sets the background color of the master view (when there are no windows or other top-level
		 * controls displayed).
		 */
		let backgroundColor: string;

		/**
		 * Local path or URL to an image file for setting a background for the master view (when there
		 * are no windows or other top-level controls displayed).
		 */
		let backgroundImage: string;

		/**
		 * The currently active tab, if a tab group is open.
		 */
		let currentTab: Titanium.UI.Tab;

		/**
		 * The active window associated with the executing JavaScript context.
		 */
		const currentWindow: Titanium.UI.Window;

		/**
		 * Updates the orientation of the current window to the specified orientation value.
		 */
		let orientation: number;

		/**
		 * Sets the global tint color of the application. It is inherited by the child views and can be
		 * overwritten by them using the `tintColor` property.
		 */
		let tintColor: string;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Creates and returns an instance of <Titanium.UI.2DMatrix>.
		 */
		function create2DMatrix(parameters?: Matrix2DCreationDict): Titanium.UI.Matrix2D;

		/**
		 * Creates and returns an instance of <Titanium.UI.Matrix2D>.
		 */
		function createMatrix2D(parameters?: Matrix2DCreationDict): Titanium.UI.Matrix2D;

		/**
		 * Converts one type of unit to another using the metrics of the main display.
		 */
		function convertUnits(convertFromValue: string, convertToUnits: number): number;

		/**
		 * Creates and returns an instance of <Titanium.UI.View>.
		 */
		function createView(parameters?: any): Titanium.UI.View;

		/**
		 * Creates and returns an instance of <Titanium.UI.3DMatrix>.
		 */
		function create3DMatrix(parameters?: any): Titanium.UI.Matrix3D;

		/**
		 * Creates and returns an instance of <Titanium.UI.ActivityIndicator>.
		 */
		function createActivityIndicator(parameters?: any): Titanium.UI.ActivityIndicator;

		/**
		 * Creates and returns an instance of <Titanium.UI.AlertDialog>.
		 */
		function createAlertDialog(parameters?: any): Titanium.UI.AlertDialog;

		/**
		 * Creates and returns an instance of <Titanium.UI.Animation>.
		 */
		function createAnimation(parameters?: any): Titanium.UI.Animation;

		/**
		 * Creates and returns an instance of <Titanium.UI.AttributedString>.
		 */
		function createAttributedString(parameters?: any): Titanium.UI.AttributedString;

		/**
		 * Creates and returns an instance of <Titanium.UI.Button>.
		 */
		function createButton(parameters?: any): Titanium.UI.Button;

		/**
		 * Creates and returns an instance of <Titanium.UI.ButtonBar>.
		 */
		function createButtonBar(parameters?: any): Titanium.UI.ButtonBar;

		/**
		 * Creates and returns an instance of <Titanium.UI.CoverFlowView>.
		 */
		function createCoverFlowView(parameters?: any): Titanium.UI.CoverFlowView;

		/**
		 * Creates and returns an instance of <Titanium.UI.DashboardItem>.
		 */
		function createDashboardItem(parameters?: any): Titanium.UI.DashboardItem;

		/**
		 * Creates and returns an instance of <Titanium.UI.DashboardView>.
		 */
		function createDashboardView(parameters?: any): Titanium.UI.DashboardView;

		/**
		 * Creates and returns an instance of <Titanium.UI.EmailDialog>.
		 */
		function createEmailDialog(parameters?: any): Titanium.UI.EmailDialog;

		/**
		 * Creates and returns an instance of <Titanium.UI.ImageView>.
		 */
		function createImageView(parameters?: any): Titanium.UI.ImageView;

		/**
		 * Creates and returns an instance of <Titanium.UI.Label>.
		 */
		function createLabel(parameters?: any): Titanium.UI.Label;

		/**
		 * Creates and returns an instance of <Titanium.UI.ListSection>.
		 */
		function createListSection(parameters?: any): Titanium.UI.ListSection;

		/**
		 * Creates and returns an instance of <Titanium.UI.ListView>.
		 */
		function createListView(parameters?: any): Titanium.UI.ListView;

		/**
		 * Creates and returns an instance of <Titanium.UI.MaskedImage>.
		 */
		function createMaskedImage(parameters?: any): Titanium.UI.MaskedImage;

		/**
		 * Creates and returns an instance of <Titanium.UI.Matrix3D>.
		 */
		function createMatrix3D(parameters?: any): Titanium.UI.Matrix3D;

		/**
		 * Creates and returns an instance of <Titanium.UI.NavigationWindow>.
		 */
		function createNavigationWindow(parameters?: any): Titanium.UI.NavigationWindow;

		/**
		 * Creates and returns an instance of <Titanium.UI.Notification>.
		 */
		function createNotification(parameters?: any): Titanium.UI.Notification;

		/**
		 * Creates and returns an instance of <Titanium.UI.OptionDialog>.
		 */
		function createOptionDialog(parameters?: any): Titanium.UI.OptionDialog;

		/**
		 * Creates and returns an instance of <Titanium.UI.Picker>.
		 */
		function createPicker(parameters?: any): Titanium.UI.Picker;

		/**
		 * Creates and returns an instance of <Titanium.UI.PickerColumn>.
		 */
		function createPickerColumn(parameters?: any): Titanium.UI.PickerColumn;

		/**
		 * Creates and returns an instance of <Titanium.UI.PickerRow>.
		 */
		function createPickerRow(parameters?: any): Titanium.UI.PickerRow;

		/**
		 * Creates and returns an instance of <Titanium.UI.ProgressBar>.
		 */
		function createProgressBar(parameters?: any): Titanium.UI.ProgressBar;

		/**
		 * Creates and returns an instance of <Titanium.UI.RefreshControl>.
		 */
		function createRefreshControl(parameters?: any): Titanium.UI.RefreshControl;

		/**
		 * Creates and returns an instance of <Titanium.UI.ScrollView>.
		 */
		function createScrollView(parameters?: any): Titanium.UI.ScrollView;

		/**
		 * Creates and returns an instance of <Titanium.UI.ScrollableView>.
		 */
		function createScrollableView(parameters?: any): Titanium.UI.ScrollableView;

		/**
		 * Creates and returns an instance of <Titanium.UI.SearchBar>.
		 */
		function createSearchBar(parameters?: any): Titanium.UI.SearchBar;

		/**
		 * Creates and returns an instance of <Titanium.UI.ShortcutItem>.
		 */
		function createShortcutItem(parameters?: any): Titanium.UI.ShortcutItem;

		/**
		 * Creates and returns an instance of <Titanium.UI.Slider>.
		 */
		function createSlider(parameters?: any): Titanium.UI.Slider;

		/**
		 * Creates and returns an instance of <Titanium.UI.Switch>.
		 */
		function createSwitch(parameters?: any): Titanium.UI.Switch;

		/**
		 * Creates and returns an instance of <Titanium.UI.Tab>.
		 */
		function createTab(parameters?: any): Titanium.UI.Tab;

		/**
		 * Creates and returns an instance of <Titanium.UI.TabGroup>.
		 */
		function createTabGroup(parameters?: any): Titanium.UI.TabGroup;

		/**
		 * Creates and returns an instance of <Titanium.UI.TabbedBar>.
		 */
		function createTabbedBar(parameters?: any): Titanium.UI.TabbedBar;

		/**
		 * Creates and returns an instance of <Titanium.UI.TableView>.
		 */
		function createTableView(parameters?: any): Titanium.UI.TableView;

		/**
		 * Creates and returns an instance of <Titanium.UI.TableViewRow>.
		 */
		function createTableViewRow(parameters?: any): Titanium.UI.TableViewRow;

		/**
		 * Creates and returns an instance of <Titanium.UI.TableViewSection>.
		 */
		function createTableViewSection(parameters?: any): Titanium.UI.TableViewSection;

		/**
		 * Creates and returns an instance of <Titanium.UI.TextArea>.
		 */
		function createTextArea(parameters?: any): Titanium.UI.TextArea;

		/**
		 * Creates and returns an instance of <Titanium.UI.TextField>.
		 */
		function createTextField(parameters?: any): Titanium.UI.TextField;

		/**
		 * Creates and returns an instance of <Titanium.UI.Toolbar>.
		 */
		function createToolbar(parameters?: any): Titanium.UI.Toolbar;

		/**
		 * Gets the value of the <Titanium.UI.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.UI.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.UI.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.UI.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.UI.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.UI.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.UI.backgroundColor> property.
		 */
		function getBackgroundColor(): string;

		/**
		 * Sets the value of the <Titanium.UI.backgroundColor> property.
		 */
		function setBackgroundColor(backgroundColor: string): void;

		/**
		 * Gets the value of the <Titanium.UI.backgroundImage> property.
		 */
		function getBackgroundImage(): string;

		/**
		 * Sets the value of the <Titanium.UI.backgroundImage> property.
		 */
		function setBackgroundImage(backgroundImage: string): void;

		/**
		 * Gets the value of the <Titanium.UI.currentTab> property.
		 */
		function getCurrentTab(): Titanium.UI.Tab;

		/**
		 * Sets the value of the <Titanium.UI.currentTab> property.
		 */
		function setCurrentTab(currentTab: Titanium.UI.Tab): void;

		/**
		 * Gets the value of the <Titanium.UI.currentWindow> property.
		 */
		function getCurrentWindow(): Titanium.UI.Window;

		/**
		 * Gets the value of the <Titanium.UI.orientation> property.
		 */
		function getOrientation(): number;

		/**
		 * Sets the value of the <Titanium.UI.orientation> property.
		 */
		function setOrientation(orientation: number): void;

		/**
		 * Gets the value of the <Titanium.UI.tintColor> property.
		 */
		function getTintColor(): string;

		/**
		 * Sets the value of the <Titanium.UI.tintColor> property.
		 */
		function setTintColor(tintColor: string): void;

		/**
		 * Creates and returns an instance of <Titanium.UI.WebView>.
		 */
		function createWebView(parameters?: any): Titanium.UI.WebView;

		/**
		 * Creates and returns an instance of <Titanium.UI.Window>.
		 */
		function createWindow(parameters?: any): Titanium.UI.Window;

		/**
		 * An empty drawing surface or container
		 */
		interface View extends Titanium.Proxy {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: boolean;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: string;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: string;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: string;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: Point;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: Point;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: string;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: string;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: string;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: string;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: string;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: Gradient;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: string;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: boolean;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: number;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: string;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: string;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: number;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: string;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: number;

			/**
			 * Border width of the view.
			 */
			borderWidth: number;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: number | string;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: Point;

			/**
			 * Array of this view's child views.
			 */
			readonly children: Titanium.UI.View[];

			/**
			 * View's clipping behavior.
			 */
			clipMode: number;

			/**
			 * Base elevation of the view relative to its parent in pixels.
			 */
			elevation: number;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: boolean;

			/**
			 * View height, in platform-specific units.
			 */
			height: number | string;

			/**
			 * Sets the behavior when hiding an object to release or keep the free space
			 */
			hiddenBehavior: number;

			/**
			 * Adds a horizontal parallax effect to the view
			 */
			horizontalMotionEffect: any;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: number | string;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: string;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: number;

			/**
			 * When on, animate call overrides current animation if applicable.
			 */
			overrideCurrentAnimation: boolean;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: string;

			/**
			 * The preview context used in the 3D-Touch feature "Peek and Pop".
			 */
			previewContext: Titanium.UI.iOS.PreviewContext;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: number | string;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: Dimension;

			/**
			 * Clockwise 2D rotation of the view in degrees.
			 */
			rotation: number;

			/**
			 * Clockwise rotation of the view in degrees (x-axis).
			 */
			rotationX: number;

			/**
			 * Clockwise rotation of the view in degrees (y-axis).
			 */
			rotationY: number;

			/**
			 * Scaling of the view in x-axis in pixels.
			 */
			scaleX: number;

			/**
			 * Scaling of the view in y-axis in pixels.
			 */
			scaleY: number;

			/**
			 * The size of the view in system units.
			 */
			readonly size: Dimension;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: number;

			/**
			 * The view's tintColor
			 */
			tintColor: string;

			/**
			 * The view's top position.
			 */
			top: number | string;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: boolean;

			/**
			 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
			 */
			touchFeedback: boolean;

			/**
			 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
			 */
			touchFeedbackColor: string;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Horizontal location of the view relative to its left position in pixels.
			 */
			translationX: number;

			/**
			 * Vertical location of the view relative to its top position in pixels.
			 */
			translationY: number;

			/**
			 * Depth of the view relative to its elevation in pixels.
			 */
			translationZ: number;

			/**
			 * A name to identify this view in activity transition.
			 */
			transitionName: string;

			/**
			 * Adds a vertical parallax effect to the view
			 */
			verticalMotionEffect: any;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: number;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: string;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: Point;

			/**
			 * Determines whether the view is visible.
			 */
			visible: boolean;

			/**
			 * View's width, in platform-specific units.
			 */
			width: number | string;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: boolean;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: number;

			/**
			 * Determines whether to keep the device screen on.
			 */
			keepScreenOn: boolean;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add(view: any): void;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add(view: any[]): void;

			/**
			 * Animates this view.
			 */
			animate(animation: any, callback?: (param0: any) => any): void;

			/**
			 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
			 * view tree.
			 */
			finishLayout(): void;

			/**
			 * Hides this view.
			 */
			hide(options?: AnimationOption): void;

			/**
			 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			insertAt(params: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove(view: any): void;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren(): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt(params: any): void;

			/**
			 * Makes this view visible.
			 */
			show(options?: AnimationOption): void;

			/**
			 * Starts a batch update of this view's layout properties.
			 */
			startLayout(): void;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

			/**
			 * Performs a batch update of all supplied layout properties and schedules a layout pass after
			 * they have been updated.
			 */
			updateLayout(params: any): void;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView(point: Point, destinationView: any): Point;

			/**
			 * Returns the matching view of a given view ID.
			 */
			getViewById(id: string): Titanium.UI.View;

			/**
			 * Gets the value of the <Titanium.UI.View.accessibilityHidden> property.
			 */
			getAccessibilityHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.accessibilityHidden> property.
			 */
			setAccessibilityHidden(accessibilityHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.accessibilityHint> property.
			 */
			getAccessibilityHint(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.accessibilityHint> property.
			 */
			setAccessibilityHint(accessibilityHint: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.accessibilityLabel> property.
			 */
			getAccessibilityLabel(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.accessibilityLabel> property.
			 */
			setAccessibilityLabel(accessibilityLabel: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.accessibilityValue> property.
			 */
			getAccessibilityValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.accessibilityValue> property.
			 */
			setAccessibilityValue(accessibilityValue: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.anchorPoint> property.
			 */
			getAnchorPoint(): Point;

			/**
			 * Sets the value of the <Titanium.UI.View.anchorPoint> property.
			 */
			setAnchorPoint(anchorPoint: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.View.animatedCenter> property.
			 */
			getAnimatedCenter(): Point;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundColor> property.
			 */
			getBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundColor> property.
			 */
			setBackgroundColor(backgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundDisabledColor> property.
			 */
			getBackgroundDisabledColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundDisabledColor> property.
			 */
			setBackgroundDisabledColor(backgroundDisabledColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundDisabledImage> property.
			 */
			getBackgroundDisabledImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundDisabledImage> property.
			 */
			setBackgroundDisabledImage(backgroundDisabledImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundFocusedColor> property.
			 */
			getBackgroundFocusedColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundFocusedColor> property.
			 */
			setBackgroundFocusedColor(backgroundFocusedColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundFocusedImage> property.
			 */
			getBackgroundFocusedImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundFocusedImage> property.
			 */
			setBackgroundFocusedImage(backgroundFocusedImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundGradient> property.
			 */
			getBackgroundGradient(): Gradient;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundGradient> property.
			 */
			setBackgroundGradient(backgroundGradient: Gradient): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundImage> property.
			 */
			getBackgroundImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundImage> property.
			 */
			setBackgroundImage(backgroundImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundRepeat> property.
			 */
			getBackgroundRepeat(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundRepeat> property.
			 */
			setBackgroundRepeat(backgroundRepeat: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundLeftCap> property.
			 */
			getBackgroundLeftCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundLeftCap> property.
			 */
			setBackgroundLeftCap(backgroundLeftCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundSelectedColor> property.
			 */
			getBackgroundSelectedColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundSelectedColor> property.
			 */
			setBackgroundSelectedColor(backgroundSelectedColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundSelectedImage> property.
			 */
			getBackgroundSelectedImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundSelectedImage> property.
			 */
			setBackgroundSelectedImage(backgroundSelectedImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundTopCap> property.
			 */
			getBackgroundTopCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundTopCap> property.
			 */
			setBackgroundTopCap(backgroundTopCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.borderColor> property.
			 */
			getBorderColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.borderColor> property.
			 */
			setBorderColor(borderColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.borderRadius> property.
			 */
			getBorderRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.borderRadius> property.
			 */
			setBorderRadius(borderRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.borderWidth> property.
			 */
			getBorderWidth(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.borderWidth> property.
			 */
			setBorderWidth(borderWidth: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.bottom> property.
			 */
			getBottom(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.bottom> property.
			 */
			setBottom(bottom: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.bottom> property.
			 */
			setBottom(bottom: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.center> property.
			 */
			getCenter(): Point;

			/**
			 * Sets the value of the <Titanium.UI.View.center> property.
			 */
			setCenter(center: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.View.children> property.
			 */
			getChildren(): Titanium.UI.View[];

			/**
			 * Gets the value of the <Titanium.UI.View.clipMode> property.
			 */
			getClipMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.clipMode> property.
			 */
			setClipMode(clipMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.elevation> property.
			 */
			getElevation(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.elevation> property.
			 */
			setElevation(elevation: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.focusable> property.
			 */
			getFocusable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.focusable> property.
			 */
			setFocusable(focusable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.height> property.
			 */
			getHeight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.height> property.
			 */
			setHeight(height: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.height> property.
			 */
			setHeight(height: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.hiddenBehavior> property.
			 */
			getHiddenBehavior(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.hiddenBehavior> property.
			 */
			setHiddenBehavior(hiddenBehavior: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.horizontalMotionEffect> property.
			 */
			getHorizontalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.View.horizontalMotionEffect> property.
			 */
			setHorizontalMotionEffect(horizontalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.View.left> property.
			 */
			getLeft(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.left> property.
			 */
			setLeft(left: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.left> property.
			 */
			setLeft(left: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.layout> property.
			 */
			getLayout(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.layout> property.
			 */
			setLayout(layout: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.opacity> property.
			 */
			getOpacity(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.opacity> property.
			 */
			setOpacity(opacity: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.overrideCurrentAnimation> property.
			 */
			getOverrideCurrentAnimation(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.overrideCurrentAnimation> property.
			 */
			setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.pullBackgroundColor> property.
			 */
			getPullBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.pullBackgroundColor> property.
			 */
			setPullBackgroundColor(pullBackgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.previewContext> property.
			 */
			getPreviewContext(): Titanium.UI.iOS.PreviewContext;

			/**
			 * Sets the value of the <Titanium.UI.View.previewContext> property.
			 */
			setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

			/**
			 * Gets the value of the <Titanium.UI.View.right> property.
			 */
			getRight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.right> property.
			 */
			setRight(right: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.right> property.
			 */
			setRight(right: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.rect> property.
			 */
			getRect(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.View.rotation> property.
			 */
			getRotation(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.rotation> property.
			 */
			setRotation(rotation: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.rotationX> property.
			 */
			getRotationX(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.rotationX> property.
			 */
			setRotationX(rotationX: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.rotationY> property.
			 */
			getRotationY(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.rotationY> property.
			 */
			setRotationY(rotationY: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.scaleX> property.
			 */
			getScaleX(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.scaleX> property.
			 */
			setScaleX(scaleX: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.scaleY> property.
			 */
			getScaleY(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.scaleY> property.
			 */
			setScaleY(scaleY: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.size> property.
			 */
			getSize(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.View.softKeyboardOnFocus> property.
			 */
			getSoftKeyboardOnFocus(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.softKeyboardOnFocus> property.
			 */
			setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.tintColor> property.
			 */
			getTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.tintColor> property.
			 */
			setTintColor(tintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.top> property.
			 */
			getTop(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.top> property.
			 */
			setTop(top: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.top> property.
			 */
			setTop(top: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.touchEnabled> property.
			 */
			getTouchEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.touchEnabled> property.
			 */
			setTouchEnabled(touchEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.touchFeedback> property.
			 */
			getTouchFeedback(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.touchFeedback> property.
			 */
			setTouchFeedback(touchFeedback: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.touchFeedbackColor> property.
			 */
			getTouchFeedbackColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.touchFeedbackColor> property.
			 */
			setTouchFeedbackColor(touchFeedbackColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.transform> property.
			 */
			getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Sets the value of the <Titanium.UI.View.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix2D): void;

			/**
			 * Sets the value of the <Titanium.UI.View.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix3D): void;

			/**
			 * Gets the value of the <Titanium.UI.View.translationX> property.
			 */
			getTranslationX(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.translationX> property.
			 */
			setTranslationX(translationX: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.translationY> property.
			 */
			getTranslationY(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.translationY> property.
			 */
			setTranslationY(translationY: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.translationZ> property.
			 */
			getTranslationZ(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.translationZ> property.
			 */
			setTranslationZ(translationZ: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.transitionName> property.
			 */
			getTransitionName(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.transitionName> property.
			 */
			setTransitionName(transitionName: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.verticalMotionEffect> property.
			 */
			getVerticalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.View.verticalMotionEffect> property.
			 */
			setVerticalMotionEffect(verticalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.View.viewShadowRadius> property.
			 */
			getViewShadowRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.viewShadowRadius> property.
			 */
			setViewShadowRadius(viewShadowRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.viewShadowColor> property.
			 */
			getViewShadowColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.viewShadowColor> property.
			 */
			setViewShadowColor(viewShadowColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.viewShadowOffset> property.
			 */
			getViewShadowOffset(): Point;

			/**
			 * Sets the value of the <Titanium.UI.View.viewShadowOffset> property.
			 */
			setViewShadowOffset(viewShadowOffset: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.View.visible> property.
			 */
			getVisible(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.visible> property.
			 */
			setVisible(visible: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.width> property.
			 */
			getWidth(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.width> property.
			 */
			setWidth(width: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.width> property.
			 */
			setWidth(width: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.horizontalWrap> property.
			 */
			getHorizontalWrap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.horizontalWrap> property.
			 */
			setHorizontalWrap(horizontalWrap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.zIndex> property.
			 */
			getZIndex(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.zIndex> property.
			 */
			setZIndex(zIndex: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.keepScreenOn> property.
			 */
			getKeepScreenOn(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.keepScreenOn> property.
			 */
			setKeepScreenOn(keepScreenOn: boolean): void;

		}
		/**
		 * An empty drawing surface or container
		 */
		interface View {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: boolean;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: string;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: string;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: string;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: Point;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: Point;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: string;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: string;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: string;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: string;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: string;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: Gradient;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: string;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: boolean;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: number;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: string;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: string;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: number;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: string;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: number;

			/**
			 * Border width of the view.
			 */
			borderWidth: number;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: number | string;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: Point;

			/**
			 * Array of this view's child views.
			 */
			readonly children: Titanium.UI.View[];

			/**
			 * View's clipping behavior.
			 */
			clipMode: number;

			/**
			 * Base elevation of the view relative to its parent in pixels.
			 */
			elevation: number;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: boolean;

			/**
			 * View height, in platform-specific units.
			 */
			height: number | string;

			/**
			 * Sets the behavior when hiding an object to release or keep the free space
			 */
			hiddenBehavior: number;

			/**
			 * Adds a horizontal parallax effect to the view
			 */
			horizontalMotionEffect: any;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: number | string;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: string;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: number;

			/**
			 * When on, animate call overrides current animation if applicable.
			 */
			overrideCurrentAnimation: boolean;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: string;

			/**
			 * The preview context used in the 3D-Touch feature "Peek and Pop".
			 */
			previewContext: Titanium.UI.iOS.PreviewContext;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: number | string;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: Dimension;

			/**
			 * Clockwise 2D rotation of the view in degrees.
			 */
			rotation: number;

			/**
			 * Clockwise rotation of the view in degrees (x-axis).
			 */
			rotationX: number;

			/**
			 * Clockwise rotation of the view in degrees (y-axis).
			 */
			rotationY: number;

			/**
			 * Scaling of the view in x-axis in pixels.
			 */
			scaleX: number;

			/**
			 * Scaling of the view in y-axis in pixels.
			 */
			scaleY: number;

			/**
			 * The size of the view in system units.
			 */
			readonly size: Dimension;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: number;

			/**
			 * The view's tintColor
			 */
			tintColor: string;

			/**
			 * The view's top position.
			 */
			top: number | string;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: boolean;

			/**
			 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
			 */
			touchFeedback: boolean;

			/**
			 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
			 */
			touchFeedbackColor: string;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Horizontal location of the view relative to its left position in pixels.
			 */
			translationX: number;

			/**
			 * Vertical location of the view relative to its top position in pixels.
			 */
			translationY: number;

			/**
			 * Depth of the view relative to its elevation in pixels.
			 */
			translationZ: number;

			/**
			 * A name to identify this view in activity transition.
			 */
			transitionName: string;

			/**
			 * Adds a vertical parallax effect to the view
			 */
			verticalMotionEffect: any;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: number;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: string;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: Point;

			/**
			 * Determines whether the view is visible.
			 */
			visible: boolean;

			/**
			 * View's width, in platform-specific units.
			 */
			width: number | string;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: boolean;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: number;

			/**
			 * Determines whether to keep the device screen on.
			 */
			keepScreenOn: boolean;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add(view: any): void;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add(view: any[]): void;

			/**
			 * Animates this view.
			 */
			animate(animation: any, callback?: (param0: any) => any): void;

			/**
			 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
			 * view tree.
			 */
			finishLayout(): void;

			/**
			 * Hides this view.
			 */
			hide(options?: AnimationOption): void;

			/**
			 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			insertAt(params: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove(view: any): void;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren(): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt(params: any): void;

			/**
			 * Makes this view visible.
			 */
			show(options?: AnimationOption): void;

			/**
			 * Starts a batch update of this view's layout properties.
			 */
			startLayout(): void;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

			/**
			 * Performs a batch update of all supplied layout properties and schedules a layout pass after
			 * they have been updated.
			 */
			updateLayout(params: any): void;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView(point: Point, destinationView: any): Point;

			/**
			 * Returns the matching view of a given view ID.
			 */
			getViewById(id: string): Titanium.UI.View;

			/**
			 * Gets the value of the <Titanium.UI.View.accessibilityHidden> property.
			 */
			getAccessibilityHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.accessibilityHidden> property.
			 */
			setAccessibilityHidden(accessibilityHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.accessibilityHint> property.
			 */
			getAccessibilityHint(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.accessibilityHint> property.
			 */
			setAccessibilityHint(accessibilityHint: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.accessibilityLabel> property.
			 */
			getAccessibilityLabel(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.accessibilityLabel> property.
			 */
			setAccessibilityLabel(accessibilityLabel: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.accessibilityValue> property.
			 */
			getAccessibilityValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.accessibilityValue> property.
			 */
			setAccessibilityValue(accessibilityValue: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.anchorPoint> property.
			 */
			getAnchorPoint(): Point;

			/**
			 * Sets the value of the <Titanium.UI.View.anchorPoint> property.
			 */
			setAnchorPoint(anchorPoint: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.View.animatedCenter> property.
			 */
			getAnimatedCenter(): Point;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundColor> property.
			 */
			getBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundColor> property.
			 */
			setBackgroundColor(backgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundDisabledColor> property.
			 */
			getBackgroundDisabledColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundDisabledColor> property.
			 */
			setBackgroundDisabledColor(backgroundDisabledColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundDisabledImage> property.
			 */
			getBackgroundDisabledImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundDisabledImage> property.
			 */
			setBackgroundDisabledImage(backgroundDisabledImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundFocusedColor> property.
			 */
			getBackgroundFocusedColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundFocusedColor> property.
			 */
			setBackgroundFocusedColor(backgroundFocusedColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundFocusedImage> property.
			 */
			getBackgroundFocusedImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundFocusedImage> property.
			 */
			setBackgroundFocusedImage(backgroundFocusedImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundGradient> property.
			 */
			getBackgroundGradient(): Gradient;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundGradient> property.
			 */
			setBackgroundGradient(backgroundGradient: Gradient): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundImage> property.
			 */
			getBackgroundImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundImage> property.
			 */
			setBackgroundImage(backgroundImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundRepeat> property.
			 */
			getBackgroundRepeat(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundRepeat> property.
			 */
			setBackgroundRepeat(backgroundRepeat: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundLeftCap> property.
			 */
			getBackgroundLeftCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundLeftCap> property.
			 */
			setBackgroundLeftCap(backgroundLeftCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundSelectedColor> property.
			 */
			getBackgroundSelectedColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundSelectedColor> property.
			 */
			setBackgroundSelectedColor(backgroundSelectedColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundSelectedImage> property.
			 */
			getBackgroundSelectedImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundSelectedImage> property.
			 */
			setBackgroundSelectedImage(backgroundSelectedImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.backgroundTopCap> property.
			 */
			getBackgroundTopCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.backgroundTopCap> property.
			 */
			setBackgroundTopCap(backgroundTopCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.borderColor> property.
			 */
			getBorderColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.borderColor> property.
			 */
			setBorderColor(borderColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.borderRadius> property.
			 */
			getBorderRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.borderRadius> property.
			 */
			setBorderRadius(borderRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.borderWidth> property.
			 */
			getBorderWidth(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.borderWidth> property.
			 */
			setBorderWidth(borderWidth: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.bottom> property.
			 */
			getBottom(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.bottom> property.
			 */
			setBottom(bottom: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.bottom> property.
			 */
			setBottom(bottom: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.center> property.
			 */
			getCenter(): Point;

			/**
			 * Sets the value of the <Titanium.UI.View.center> property.
			 */
			setCenter(center: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.View.children> property.
			 */
			getChildren(): Titanium.UI.View[];

			/**
			 * Gets the value of the <Titanium.UI.View.clipMode> property.
			 */
			getClipMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.clipMode> property.
			 */
			setClipMode(clipMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.elevation> property.
			 */
			getElevation(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.elevation> property.
			 */
			setElevation(elevation: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.focusable> property.
			 */
			getFocusable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.focusable> property.
			 */
			setFocusable(focusable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.height> property.
			 */
			getHeight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.height> property.
			 */
			setHeight(height: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.height> property.
			 */
			setHeight(height: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.hiddenBehavior> property.
			 */
			getHiddenBehavior(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.hiddenBehavior> property.
			 */
			setHiddenBehavior(hiddenBehavior: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.horizontalMotionEffect> property.
			 */
			getHorizontalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.View.horizontalMotionEffect> property.
			 */
			setHorizontalMotionEffect(horizontalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.View.left> property.
			 */
			getLeft(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.left> property.
			 */
			setLeft(left: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.left> property.
			 */
			setLeft(left: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.layout> property.
			 */
			getLayout(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.layout> property.
			 */
			setLayout(layout: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.opacity> property.
			 */
			getOpacity(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.opacity> property.
			 */
			setOpacity(opacity: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.overrideCurrentAnimation> property.
			 */
			getOverrideCurrentAnimation(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.overrideCurrentAnimation> property.
			 */
			setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.pullBackgroundColor> property.
			 */
			getPullBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.pullBackgroundColor> property.
			 */
			setPullBackgroundColor(pullBackgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.previewContext> property.
			 */
			getPreviewContext(): Titanium.UI.iOS.PreviewContext;

			/**
			 * Sets the value of the <Titanium.UI.View.previewContext> property.
			 */
			setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

			/**
			 * Gets the value of the <Titanium.UI.View.right> property.
			 */
			getRight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.right> property.
			 */
			setRight(right: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.right> property.
			 */
			setRight(right: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.rect> property.
			 */
			getRect(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.View.rotation> property.
			 */
			getRotation(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.rotation> property.
			 */
			setRotation(rotation: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.rotationX> property.
			 */
			getRotationX(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.rotationX> property.
			 */
			setRotationX(rotationX: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.rotationY> property.
			 */
			getRotationY(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.rotationY> property.
			 */
			setRotationY(rotationY: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.scaleX> property.
			 */
			getScaleX(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.scaleX> property.
			 */
			setScaleX(scaleX: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.scaleY> property.
			 */
			getScaleY(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.scaleY> property.
			 */
			setScaleY(scaleY: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.size> property.
			 */
			getSize(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.View.softKeyboardOnFocus> property.
			 */
			getSoftKeyboardOnFocus(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.softKeyboardOnFocus> property.
			 */
			setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.tintColor> property.
			 */
			getTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.tintColor> property.
			 */
			setTintColor(tintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.top> property.
			 */
			getTop(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.top> property.
			 */
			setTop(top: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.top> property.
			 */
			setTop(top: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.touchEnabled> property.
			 */
			getTouchEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.touchEnabled> property.
			 */
			setTouchEnabled(touchEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.touchFeedback> property.
			 */
			getTouchFeedback(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.touchFeedback> property.
			 */
			setTouchFeedback(touchFeedback: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.touchFeedbackColor> property.
			 */
			getTouchFeedbackColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.touchFeedbackColor> property.
			 */
			setTouchFeedbackColor(touchFeedbackColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.transform> property.
			 */
			getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Sets the value of the <Titanium.UI.View.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix2D): void;

			/**
			 * Sets the value of the <Titanium.UI.View.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix3D): void;

			/**
			 * Gets the value of the <Titanium.UI.View.translationX> property.
			 */
			getTranslationX(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.translationX> property.
			 */
			setTranslationX(translationX: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.translationY> property.
			 */
			getTranslationY(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.translationY> property.
			 */
			setTranslationY(translationY: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.translationZ> property.
			 */
			getTranslationZ(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.translationZ> property.
			 */
			setTranslationZ(translationZ: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.transitionName> property.
			 */
			getTransitionName(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.transitionName> property.
			 */
			setTransitionName(transitionName: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.verticalMotionEffect> property.
			 */
			getVerticalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.View.verticalMotionEffect> property.
			 */
			setVerticalMotionEffect(verticalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.View.viewShadowRadius> property.
			 */
			getViewShadowRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.viewShadowRadius> property.
			 */
			setViewShadowRadius(viewShadowRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.viewShadowColor> property.
			 */
			getViewShadowColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.View.viewShadowColor> property.
			 */
			setViewShadowColor(viewShadowColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.viewShadowOffset> property.
			 */
			getViewShadowOffset(): Point;

			/**
			 * Sets the value of the <Titanium.UI.View.viewShadowOffset> property.
			 */
			setViewShadowOffset(viewShadowOffset: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.View.visible> property.
			 */
			getVisible(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.visible> property.
			 */
			setVisible(visible: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.width> property.
			 */
			getWidth(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.View.width> property.
			 */
			setWidth(width: number): void;

			/**
			 * Sets the value of the <Titanium.UI.View.width> property.
			 */
			setWidth(width: string): void;

			/**
			 * Gets the value of the <Titanium.UI.View.horizontalWrap> property.
			 */
			getHorizontalWrap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.horizontalWrap> property.
			 */
			setHorizontalWrap(horizontalWrap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.View.zIndex> property.
			 */
			getZIndex(): number;

			/**
			 * Sets the value of the <Titanium.UI.View.zIndex> property.
			 */
			setZIndex(zIndex: number): void;

			/**
			 * Gets the value of the <Titanium.UI.View.keepScreenOn> property.
			 */
			getKeepScreenOn(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.View.keepScreenOn> property.
			 */
			setKeepScreenOn(keepScreenOn: boolean): void;

		}
		/**
		 * The 2D Matrix is an object for holding values for an affine transformation matrix.
		 */
		interface Matrix2D extends Titanium.Proxy {
			/**
			 * The entry at position [1,1] in the matrix.
			 */
			a: number;

			/**
			 * The entry at position [1,2] in the matrix.
			 */
			b: number;

			/**
			 * The entry at position [2,1] in the matrix.
			 */
			c: number;

			/**
			 * The entry at position [2,2] in the matrix.
			 */
			d: number;

			/**
			 * The entry at position [3,1] in the matrix.
			 */
			tx: number;

			/**
			 * The entry at position [3,2] in the matrix.
			 */
			ty: number;

			/**
			 * Returns a matrix constructed by inverting this matrix.
			 */
			invert(): Titanium.UI.Matrix2D;

			/**
			 * Returns a matrix constructed by combining two existing matrices.
			 */
			multiply(t2: Titanium.UI.Matrix2D): Titanium.UI.Matrix2D;

			/**
			 * Returns a matrix constructed by rotating this matrix.
			 */
			rotate(angle: number, toAngle?: number): Titanium.UI.Matrix2D;

			/**
			 * Returns a `2DMatrix` object that specifies a scaling animation from one scale to another.
			 */
			scale(sx: number, sy: number, toSx?: number, toSy?: number): Titanium.UI.Matrix2D;

			/**
			 * Returns a matrix constructed by applying a translation transform to this matrix.
			 */
			translate(tx: number, ty: number): Titanium.UI.Matrix2D;

			/**
			 * Gets the value of the <Titanium.UI.2DMatrix.a> property.
			 */
			getA(): number;

			/**
			 * Sets the value of the <Titanium.UI.2DMatrix.a> property.
			 */
			setA(a: number): void;

			/**
			 * Gets the value of the <Titanium.UI.2DMatrix.b> property.
			 */
			getB(): number;

			/**
			 * Sets the value of the <Titanium.UI.2DMatrix.b> property.
			 */
			setB(b: number): void;

			/**
			 * Gets the value of the <Titanium.UI.2DMatrix.c> property.
			 */
			getC(): number;

			/**
			 * Sets the value of the <Titanium.UI.2DMatrix.c> property.
			 */
			setC(c: number): void;

			/**
			 * Gets the value of the <Titanium.UI.2DMatrix.d> property.
			 */
			getD(): number;

			/**
			 * Sets the value of the <Titanium.UI.2DMatrix.d> property.
			 */
			setD(d: number): void;

			/**
			 * Gets the value of the <Titanium.UI.2DMatrix.tx> property.
			 */
			getTx(): number;

			/**
			 * Sets the value of the <Titanium.UI.2DMatrix.tx> property.
			 */
			setTx(tx: number): void;

			/**
			 * Gets the value of the <Titanium.UI.2DMatrix.ty> property.
			 */
			getTy(): number;

			/**
			 * Sets the value of the <Titanium.UI.2DMatrix.ty> property.
			 */
			setTy(ty: number): void;

		}
		/**
		 * The 3D Matrix is an object for holding values for a 3D affine transform.
		 */
		interface Matrix3D extends Titanium.Proxy {
			/**
			 * The entry at position [1,1] in the matrix.
			 */
			m11: number;

			/**
			 * The entry at position [1,2] in the matrix.
			 */
			m12: number;

			/**
			 * The entry at position [1,3] in the matrix.
			 */
			m13: number;

			/**
			 * The entry at position [1,4] in the matrix.
			 */
			m14: number;

			/**
			 * The entry at position [2,1] in the matrix.
			 */
			m21: number;

			/**
			 * The entry at position [2,2] in the matrix.
			 */
			m22: number;

			/**
			 * The entry at position [2,3] in the matrix.
			 */
			m23: number;

			/**
			 * The entry at position [2,4] in the matrix.
			 */
			m24: number;

			/**
			 * The entry at position [3,1] in the matrix.
			 */
			m31: number;

			/**
			 * The entry at position [3,2] in the matrix.
			 */
			m32: number;

			/**
			 * The entry at position [3,3] in the matrix.
			 */
			m33: number;

			/**
			 * The entry at position [3,4] in the matrix.
			 */
			m34: number;

			/**
			 * The entry at position [4,1] in the matrix.
			 */
			m41: number;

			/**
			 * The entry at position [4,2] in the matrix.
			 */
			m42: number;

			/**
			 * The entry at position [4,3] in the matrix.
			 */
			m43: number;

			/**
			 * The entry at position [4,4] in the matrix.
			 */
			m44: number;

			/**
			 * Returns a matrix constructed by inverting this matrix.
			 */
			invert(): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by combining two existing matrix.
			 */
			multiply(t2: Titanium.UI.Matrix3D): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by rotating this matrix.
			 */
			rotate(angle: number, x: number, y: number, z: number): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by scaling this matrix.
			 */
			scale(sx: number, sy: number, sz: number): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by translating an existing matrix.
			 */
			translate(tx: number, ty: number, tz: number): Titanium.UI.Matrix3D;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m11> property.
			 */
			getM11(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m11> property.
			 */
			setM11(m11: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m12> property.
			 */
			getM12(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m12> property.
			 */
			setM12(m12: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m13> property.
			 */
			getM13(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m13> property.
			 */
			setM13(m13: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m14> property.
			 */
			getM14(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m14> property.
			 */
			setM14(m14: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m21> property.
			 */
			getM21(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m21> property.
			 */
			setM21(m21: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m22> property.
			 */
			getM22(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m22> property.
			 */
			setM22(m22: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m23> property.
			 */
			getM23(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m23> property.
			 */
			setM23(m23: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m24> property.
			 */
			getM24(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m24> property.
			 */
			setM24(m24: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m31> property.
			 */
			getM31(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m31> property.
			 */
			setM31(m31: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m32> property.
			 */
			getM32(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m32> property.
			 */
			setM32(m32: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m33> property.
			 */
			getM33(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m33> property.
			 */
			setM33(m33: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m34> property.
			 */
			getM34(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m34> property.
			 */
			setM34(m34: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m41> property.
			 */
			getM41(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m41> property.
			 */
			setM41(m41: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m42> property.
			 */
			getM42(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m42> property.
			 */
			setM42(m42: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m43> property.
			 */
			getM43(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m43> property.
			 */
			setM43(m43: number): void;

			/**
			 * Gets the value of the <Titanium.UI.3DMatrix.m44> property.
			 */
			getM44(): number;

			/**
			 * Sets the value of the <Titanium.UI.3DMatrix.m44> property.
			 */
			setM44(m44: number): void;

		}
		/**
		 * An activity indicator that lets the user know an action is taking place.
		 */
		interface ActivityIndicator extends Titanium.UI.View {
			/**
			 * Color of the message text, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Font used for the message text.
			 */
			font: Font;

			/**
			 * Message text.
			 */
			message: string;

			/**
			 * Key identifying a string in the locale file to use for the message text.
			 */
			messageid: string;

			/**
			 * The style for the activity indicator.
			 */
			style: number;

			/**
			 * Color of the animated indicator.
			 */
			indicatorColor: string;

			/**
			 * Gets the value of the <Titanium.UI.ActivityIndicator.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ActivityIndicator.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ActivityIndicator.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.ActivityIndicator.font> property.
			 */
			setFont(font: Font): void;

			/**
			 * Gets the value of the <Titanium.UI.ActivityIndicator.message> property.
			 */
			getMessage(): string;

			/**
			 * Sets the value of the <Titanium.UI.ActivityIndicator.message> property.
			 */
			setMessage(message: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ActivityIndicator.messageid> property.
			 */
			getMessageid(): string;

			/**
			 * Sets the value of the <Titanium.UI.ActivityIndicator.messageid> property.
			 */
			setMessageid(messageid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ActivityIndicator.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.ActivityIndicator.style> property.
			 */
			setStyle(style: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ActivityIndicator.indicatorColor> property.
			 */
			getIndicatorColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ActivityIndicator.indicatorColor> property.
			 */
			setIndicatorColor(indicatorColor: string): void;

		}
		/**
		 * An alert dialog is a modal view that includes an optional title, a message and buttons,
		 * positioned in the middle of the display.
		 */
		interface AlertDialog extends Titanium.UI.View {
			/**
			 * View to load inside the message area, to create a custom layout.
			 */
			androidView: Titanium.UI.View;

			/**
			 * Name of each button to create.
			 */
			buttonNames: string[];

			/**
			 * Index to define the cancel button.
			 */
			cancel: number;

			/**
			 * Setting this to true requires the end-user to click a dialog button to close the dialog.
			 */
			buttonClickRequired: boolean;

			/**
			 * When this is set to `true`, the dialog is canceled when touched outside the window's bounds.
			 */
			canceledOnTouchOutside: boolean;

			/**
			 * Index to define the destructive button.
			 */
			destructive: number;

			/**
			 * Hint text of the text field inside the dialog.
			 */
			hintText: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [hintText](Titanium.UI.AlertDialog.hintText) property.
			 */
			hinttextid: string;

			/**
			 * Keyboard type to display when this text field inside the dialog is focused.
			 */
			keyboardType: number;

			/**
			 * Keyboard appearance to be displayed when the text field inside the dialog is focused.
			 */
			keyboardAppearance: number;

			/**
			 * Placeholder of the login text field inside the dialog.
			 */
			loginPlaceholder: string;

			/**
			 * Hint text of the login text field inside the dialog.
			 */
			loginHintText: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [loginHintText](Titanium.UI.AlertDialog.loginHintText) property.
			 */
			loginhinttextid: string;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this field is focused.
			 */
			loginReturnKeyType: number;

			/**
			 * Value of the login text field inside the dialog.
			 */
			loginValue: string;

			/**
			 * Keyboard type to display when this text field inside the dialog is focused.
			 */
			loginKeyboardType: number;

			/**
			 * Dialog message.
			 */
			message: string;

			/**
			 * Key identifying a string in the locale file to use for the message text.
			 */
			messageid: string;

			/**
			 * Text for the `OK` button.
			 */
			ok: string;

			/**
			 * Key identifying a string in the locale file to use for the `ok` text.
			 */
			okid: string;

			/**
			 * Placeholder of the password text field inside the dialog.
			 */
			passwordPlaceholder: string;

			/**
			 * Hint text of the password text field inside the dialog.
			 */
			passwordHintText: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [passwordHintText](Titanium.UI.AlertDialog.passwordHintText) property.
			 */
			passwordhinttextid: string;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this field is focused.
			 */
			passwordReturnKeyType: number;

			/**
			 * Value of the password text field inside the dialog.
			 */
			passwordValue: string;

			/**
			 * Keyboard type to display when this text field inside the dialog is focused.
			 */
			passwordKeyboardType: number;

			/**
			 * Placeholder of the text field inside the dialog.
			 */
			placeholder: string;

			/**
			 * Boolean value indicating if the alert dialog should only be cancelled by user gesture or by hide method.
			 */
			persistent: boolean;

			/**
			 * Index to define the preferred button.
			 */
			preferred: number;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this field is focused.
			 */
			returnKeyType: number;

			/**
			 * The style for the alert dialog.
			 */
			style: number;

			/**
			 * Title of the dialog.
			 */
			title: string;

			/**
			 * Key identifying a string in the locale file to use for the title text.
			 */
			titleid: string;

			/**
			 * Value of the text field inside the dialog.
			 */
			value: string;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.buttonNames> property.
			 */
			getButtonNames(): string[];

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.buttonNames> property.
			 */
			setButtonNames(buttonNames: ReadonlyArray<string>): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.cancel> property.
			 */
			getCancel(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.cancel> property.
			 */
			setCancel(cancel: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.buttonClickRequired> property.
			 */
			getButtonClickRequired(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.buttonClickRequired> property.
			 */
			setButtonClickRequired(buttonClickRequired: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.canceledOnTouchOutside> property.
			 */
			getCanceledOnTouchOutside(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.canceledOnTouchOutside> property.
			 */
			setCanceledOnTouchOutside(canceledOnTouchOutside: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.destructive> property.
			 */
			getDestructive(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.destructive> property.
			 */
			setDestructive(destructive: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.hintText> property.
			 */
			getHintText(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.hintText> property.
			 */
			setHintText(hintText: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.hinttextid> property.
			 */
			getHinttextid(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.hinttextid> property.
			 */
			setHinttextid(hinttextid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.keyboardType> property.
			 */
			getKeyboardType(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.keyboardType> property.
			 */
			setKeyboardType(keyboardType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.keyboardAppearance> property.
			 */
			getKeyboardAppearance(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.keyboardAppearance> property.
			 */
			setKeyboardAppearance(keyboardAppearance: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.loginPlaceholder> property.
			 */
			getLoginPlaceholder(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.loginPlaceholder> property.
			 */
			setLoginPlaceholder(loginPlaceholder: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.loginHintText> property.
			 */
			getLoginHintText(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.loginHintText> property.
			 */
			setLoginHintText(loginHintText: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.loginhinttextid> property.
			 */
			getLoginhinttextid(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.loginhinttextid> property.
			 */
			setLoginhinttextid(loginhinttextid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.loginReturnKeyType> property.
			 */
			getLoginReturnKeyType(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.loginReturnKeyType> property.
			 */
			setLoginReturnKeyType(loginReturnKeyType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.loginValue> property.
			 */
			getLoginValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.loginValue> property.
			 */
			setLoginValue(loginValue: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.loginKeyboardType> property.
			 */
			getLoginKeyboardType(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.loginKeyboardType> property.
			 */
			setLoginKeyboardType(loginKeyboardType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.message> property.
			 */
			getMessage(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.message> property.
			 */
			setMessage(message: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.messageid> property.
			 */
			getMessageid(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.messageid> property.
			 */
			setMessageid(messageid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.ok> property.
			 */
			getOk(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.ok> property.
			 */
			setOk(ok: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.okid> property.
			 */
			getOkid(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.okid> property.
			 */
			setOkid(okid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.passwordPlaceholder> property.
			 */
			getPasswordPlaceholder(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.passwordPlaceholder> property.
			 */
			setPasswordPlaceholder(passwordPlaceholder: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.passwordHintText> property.
			 */
			getPasswordHintText(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.passwordHintText> property.
			 */
			setPasswordHintText(passwordHintText: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.passwordhinttextid> property.
			 */
			getPasswordhinttextid(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.passwordhinttextid> property.
			 */
			setPasswordhinttextid(passwordhinttextid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.passwordReturnKeyType> property.
			 */
			getPasswordReturnKeyType(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.passwordReturnKeyType> property.
			 */
			setPasswordReturnKeyType(passwordReturnKeyType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.passwordValue> property.
			 */
			getPasswordValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.passwordValue> property.
			 */
			setPasswordValue(passwordValue: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.passwordKeyboardType> property.
			 */
			getPasswordKeyboardType(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.passwordKeyboardType> property.
			 */
			setPasswordKeyboardType(passwordKeyboardType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.placeholder> property.
			 */
			getPlaceholder(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.placeholder> property.
			 */
			setPlaceholder(placeholder: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.persistent> property.
			 */
			getPersistent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.persistent> property.
			 */
			setPersistent(persistent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.preferred> property.
			 */
			getPreferred(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.preferred> property.
			 */
			setPreferred(preferred: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.returnKeyType> property.
			 */
			getReturnKeyType(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.returnKeyType> property.
			 */
			setReturnKeyType(returnKeyType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.style> property.
			 */
			setStyle(style: number): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.titleid> property.
			 */
			getTitleid(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.titleid> property.
			 */
			setTitleid(titleid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AlertDialog.value> property.
			 */
			getValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.AlertDialog.value> property.
			 */
			setValue(value: string): void;

		}
		/**
		 * The `Animation` object defines an animation that can be applied to a view.
		 */
		interface Animation extends Titanium.Proxy {
			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: Point;

			/**
			 * Specifies if the animation should be replayed in reverse upon completion.
			 */
			autoreverse: boolean;

			/**
			 * Value of the `backgroundColor` property at the end of the animation, as a color name
			 * or hex triplet.
			 */
			backgroundColor: string;

			/**
			 * Value of the `bottom` property at the end of the animation.
			 */
			bottom: number;

			/**
			 * Value of the `center` property at the end of the animation.
			 */
			center: any;

			/**
			 * Value of the `color` property at the end of the animation, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Animation curve or easing function to apply to the animation.
			 */
			curve: number;

			/**
			 * Delay, in milliseconds before starting the animation.
			 */
			delay: number;

			/**
			 * Duration of the animation, in milliseconds.
			 */
			duration: number;

			/**
			 * Value of the `height` property at the end of the animation.
			 */
			height: number;

			/**
			 * Value of the `left` property at the end of the animation.
			 */
			left: number;

			/**
			 * Value of the `opacity` property at the end of the animation.
			 */
			opacity: number;

			/**
			 * Value of the `opaque` property at the end of the animation.
			 */
			opaque: boolean;

			/**
			 * Number of times the animation should be performed.
			 */
			repeat: number;

			/**
			 * Value of the `right` property at the end of the animation.
			 */
			right: number;

			/**
			 * Value of the `top` property at the end of the animation.
			 */
			top: number;

			/**
			 * Animate the view from its current tranform to the specified transform.
			 */
			transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Transition type to use during a transition animation.
			 */
			transition: number;

			/**
			 * New view to transition to.
			 */
			view: Titanium.UI.View;

			/**
			 * Value of the `visible` property at the end of the animation.
			 */
			visible: boolean;

			/**
			 * Value of the `width` property at the end of the animation.
			 */
			width: number;

			/**
			 * Value of the `zIndex` property at the end of the animation.
			 */
			zIndex: number;

			/**
			 * Gets the value of the <Titanium.UI.Animation.anchorPoint> property.
			 */
			getAnchorPoint(): Point;

			/**
			 * Sets the value of the <Titanium.UI.Animation.anchorPoint> property.
			 */
			setAnchorPoint(anchorPoint: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.autoreverse> property.
			 */
			getAutoreverse(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Animation.autoreverse> property.
			 */
			setAutoreverse(autoreverse: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.backgroundColor> property.
			 */
			getBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Animation.backgroundColor> property.
			 */
			setBackgroundColor(backgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.bottom> property.
			 */
			getBottom(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.bottom> property.
			 */
			setBottom(bottom: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.center> property.
			 */
			getCenter(): any;

			/**
			 * Sets the value of the <Titanium.UI.Animation.center> property.
			 */
			setCenter(center: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Animation.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.curve> property.
			 */
			getCurve(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.curve> property.
			 */
			setCurve(curve: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.delay> property.
			 */
			getDelay(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.delay> property.
			 */
			setDelay(delay: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.duration> property.
			 */
			getDuration(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.duration> property.
			 */
			setDuration(duration: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.height> property.
			 */
			getHeight(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.height> property.
			 */
			setHeight(height: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.left> property.
			 */
			getLeft(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.left> property.
			 */
			setLeft(left: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.opacity> property.
			 */
			getOpacity(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.opacity> property.
			 */
			setOpacity(opacity: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.opaque> property.
			 */
			getOpaque(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Animation.opaque> property.
			 */
			setOpaque(opaque: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.repeat> property.
			 */
			getRepeat(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.repeat> property.
			 */
			setRepeat(repeat: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.right> property.
			 */
			getRight(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.right> property.
			 */
			setRight(right: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.top> property.
			 */
			getTop(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.top> property.
			 */
			setTop(top: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.transform> property.
			 */
			getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Sets the value of the <Titanium.UI.Animation.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix2D): void;

			/**
			 * Sets the value of the <Titanium.UI.Animation.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix3D): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.transition> property.
			 */
			getTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.transition> property.
			 */
			setTransition(transition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.view> property.
			 */
			getView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.Animation.view> property.
			 */
			setView(view: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.visible> property.
			 */
			getVisible(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Animation.visible> property.
			 */
			setVisible(visible: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.width> property.
			 */
			getWidth(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.width> property.
			 */
			setWidth(width: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Animation.zIndex> property.
			 */
			getZIndex(): number;

			/**
			 * Sets the value of the <Titanium.UI.Animation.zIndex> property.
			 */
			setZIndex(zIndex: number): void;

		}
		/**
		 * An attributed string proxy manages character strings and associated sets of attributes (for example,
		 * font and foregroundcolor) that apply to individual characters or ranges of characters in the string.
		 */
		interface AttributedString extends Titanium.Proxy {
			/**
			 * The text applied to the attributed string.
			 */
			text: string;

			/**
			 * An array of attributes to add.
			 */
			attributes: Attribute[];

			/**
			 * Adds an [attribute](Attribute) with the given name and value to the characters in the specified range.
			 */
			addAttribute(attribute: Attribute): void;

			/**
			 * Gets the value of the <Titanium.UI.AttributedString.text> property.
			 */
			getText(): string;

			/**
			 * Sets the value of the <Titanium.UI.AttributedString.text> property.
			 */
			setText(text: string): void;

			/**
			 * Gets the value of the <Titanium.UI.AttributedString.attributes> property.
			 */
			getAttributes(): Attribute[];

			/**
			 * Sets the value of the <Titanium.UI.AttributedString.attributes> property.
			 */
			setAttributes(attributes: ReadonlyArray<Attribute>): void;

		}
		/**
		 * A button widget that has four states: normal, disabled, focused and selected.
		 */
		interface Button extends Titanium.UI.View {
			/**
			 * Specify an attributed string for the label.
			 */
			attributedString: Titanium.UI.AttributedString;

			/**
			 * Default button text color, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Text color of the button in its disabled state, as a color name or hex triplet.
			 */
			disabledColor: string;

			/**
			 * Set to `true` to enable the button, `false` to disable the button.
			 */
			enabled: boolean;

			/**
			 * Font to use for the button text.
			 */
			font: Font;

			/**
			 * Image to display on the button, specified as a local path, URL or a `Blob`.
			 */
			image: string | Titanium.Blob;

			/**
			 * Button text color used to indicate the selected state, as a color name or hex triplet.
			 */
			selectedColor: string;

			/**
			 * Shadow color of the [title](Titanium.UI.Button.title), as a color name or hex triplet.
			 */
			shadowColor: string;

			/**
			 * Shadow offset of the [title](Titanium.UI.Button.title), as a dictionary with the properties `x` and `y`.
			 */
			shadowOffset: any;

			/**
			 * Shadow radius of the [title](Titanium.UI.Button.title).
			 */
			shadowRadius: number;

			/**
			 * Style constant for the button, as defined in <Titanium.UI.iOS.SystemButtonStyle>.
			 */
			style: number;

			/**
			 * Specifies an iOS system button appearance, as defined in <Titanium.UI.iOS.SystemButton>.
			 */
			systemButton: number;

			/**
			 * Text alignment, specified using one of the <Titanium.UI> text alignment constants.
			 */
			textAlign: string | number;

			/**
			 * Button title.
			 */
			title: string;

			/**
			 * Key identifying a string from the locale file to use for the button title.
			 */
			titleid: string;

			/**
			 * Vertical alignment for the text field, specified using one of the
			 * vertical alignment constants from <Titanium.UI>.
			 */
			verticalAlign: number | string;

			/**
			 * Gets the value of the <Titanium.UI.Button.attributedString> property.
			 */
			getAttributedString(): Titanium.UI.AttributedString;

			/**
			 * Sets the value of the <Titanium.UI.Button.attributedString> property.
			 */
			setAttributedString(attributedString: Titanium.UI.AttributedString): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Button.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.disabledColor> property.
			 */
			getDisabledColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Button.disabledColor> property.
			 */
			setDisabledColor(disabledColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.enabled> property.
			 */
			getEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Button.enabled> property.
			 */
			setEnabled(enabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.Button.font> property.
			 */
			setFont(font: Font): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.image> property.
			 */
			getImage(): string | Titanium.Blob;

			/**
			 * Sets the value of the <Titanium.UI.Button.image> property.
			 */
			setImage(image: string): void;

			/**
			 * Sets the value of the <Titanium.UI.Button.image> property.
			 */
			setImage(image: Titanium.Blob): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.selectedColor> property.
			 */
			getSelectedColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Button.selectedColor> property.
			 */
			setSelectedColor(selectedColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.shadowColor> property.
			 */
			getShadowColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Button.shadowColor> property.
			 */
			setShadowColor(shadowColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.shadowOffset> property.
			 */
			getShadowOffset(): any;

			/**
			 * Sets the value of the <Titanium.UI.Button.shadowOffset> property.
			 */
			setShadowOffset(shadowOffset: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.shadowRadius> property.
			 */
			getShadowRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.Button.shadowRadius> property.
			 */
			setShadowRadius(shadowRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.Button.style> property.
			 */
			setStyle(style: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.systemButton> property.
			 */
			getSystemButton(): number;

			/**
			 * Sets the value of the <Titanium.UI.Button.systemButton> property.
			 */
			setSystemButton(systemButton: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.textAlign> property.
			 */
			getTextAlign(): string | number;

			/**
			 * Sets the value of the <Titanium.UI.Button.textAlign> property.
			 */
			setTextAlign(textAlign: string): void;

			/**
			 * Sets the value of the <Titanium.UI.Button.textAlign> property.
			 */
			setTextAlign(textAlign: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.Button.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.titleid> property.
			 */
			getTitleid(): string;

			/**
			 * Sets the value of the <Titanium.UI.Button.titleid> property.
			 */
			setTitleid(titleid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Button.verticalAlign> property.
			 */
			getVerticalAlign(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.Button.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: number): void;

			/**
			 * Sets the value of the <Titanium.UI.Button.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: string): void;

		}
		/**
		 * An iOS button bar component.
		 */
		interface ButtonBar extends Titanium.Proxy {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: boolean;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: string;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: string;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: string;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: Point;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: Point;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: string;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: Gradient;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: string;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: boolean;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: number;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: number;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: string;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: number;

			/**
			 * Border width of the view.
			 */
			borderWidth: number;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: number | string;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: Point;

			/**
			 * View's clipping behavior.
			 */
			clipMode: number;

			/**
			 * View height, in platform-specific units.
			 */
			height: number | string;

			/**
			 * Adds a horizontal parallax effect to the view
			 */
			horizontalMotionEffect: any;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: number | string;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: string;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: number;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: string;

			/**
			 * The preview context used in the 3D-Touch feature "Peek and Pop".
			 */
			previewContext: Titanium.UI.iOS.PreviewContext;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: number | string;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: Dimension;

			/**
			 * The size of the view in system units.
			 */
			readonly size: Dimension;

			/**
			 * The view's tintColor
			 */
			tintColor: string;

			/**
			 * The view's top position.
			 */
			top: number | string;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: boolean;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Adds a vertical parallax effect to the view
			 */
			verticalMotionEffect: any;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: number;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: string;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: Point;

			/**
			 * Determines whether the view is visible.
			 */
			visible: boolean;

			/**
			 * View's width, in platform-specific units.
			 */
			width: number | string;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: boolean;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: number;

			/**
			 * Index of the currently selected button.
			 */
			index: number;

			/**
			 * Array of labels for the button bar.
			 */
			labels: string[] | BarItemType[];

			/**
			 * Animates this view.
			 */
			animate(animation: any, callback?: (param0: any) => any): void;

			/**
			 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
			 * view tree.
			 */
			finishLayout(): void;

			/**
			 * Hides this view.
			 */
			hide(options?: AnimationOption): void;

			/**
			 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			insertAt(params: any): void;

			/**
			 * Makes this view visible.
			 */
			show(options?: AnimationOption): void;

			/**
			 * Starts a batch update of this view's layout properties.
			 */
			startLayout(): void;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

			/**
			 * Performs a batch update of all supplied layout properties and schedules a layout pass after
			 * they have been updated.
			 */
			updateLayout(params: any): void;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView(point: Point, destinationView: any): Point;

			/**
			 * Returns the matching view of a given view ID.
			 */
			getViewById(id: string): Titanium.UI.View;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.accessibilityHidden> property.
			 */
			getAccessibilityHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.accessibilityHidden> property.
			 */
			setAccessibilityHidden(accessibilityHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.accessibilityHint> property.
			 */
			getAccessibilityHint(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.accessibilityHint> property.
			 */
			setAccessibilityHint(accessibilityHint: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.accessibilityLabel> property.
			 */
			getAccessibilityLabel(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.accessibilityLabel> property.
			 */
			setAccessibilityLabel(accessibilityLabel: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.accessibilityValue> property.
			 */
			getAccessibilityValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.accessibilityValue> property.
			 */
			setAccessibilityValue(accessibilityValue: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.anchorPoint> property.
			 */
			getAnchorPoint(): Point;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.anchorPoint> property.
			 */
			setAnchorPoint(anchorPoint: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.animatedCenter> property.
			 */
			getAnimatedCenter(): Point;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.backgroundColor> property.
			 */
			getBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.backgroundColor> property.
			 */
			setBackgroundColor(backgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.backgroundGradient> property.
			 */
			getBackgroundGradient(): Gradient;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.backgroundGradient> property.
			 */
			setBackgroundGradient(backgroundGradient: Gradient): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.backgroundImage> property.
			 */
			getBackgroundImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.backgroundImage> property.
			 */
			setBackgroundImage(backgroundImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.backgroundRepeat> property.
			 */
			getBackgroundRepeat(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.backgroundRepeat> property.
			 */
			setBackgroundRepeat(backgroundRepeat: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.backgroundLeftCap> property.
			 */
			getBackgroundLeftCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.backgroundLeftCap> property.
			 */
			setBackgroundLeftCap(backgroundLeftCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.backgroundTopCap> property.
			 */
			getBackgroundTopCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.backgroundTopCap> property.
			 */
			setBackgroundTopCap(backgroundTopCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.borderColor> property.
			 */
			getBorderColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.borderColor> property.
			 */
			setBorderColor(borderColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.borderRadius> property.
			 */
			getBorderRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.borderRadius> property.
			 */
			setBorderRadius(borderRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.borderWidth> property.
			 */
			getBorderWidth(): number;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.borderWidth> property.
			 */
			setBorderWidth(borderWidth: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.bottom> property.
			 */
			getBottom(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.bottom> property.
			 */
			setBottom(bottom: number): void;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.bottom> property.
			 */
			setBottom(bottom: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.center> property.
			 */
			getCenter(): Point;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.center> property.
			 */
			setCenter(center: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.clipMode> property.
			 */
			getClipMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.clipMode> property.
			 */
			setClipMode(clipMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.height> property.
			 */
			getHeight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.height> property.
			 */
			setHeight(height: number): void;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.height> property.
			 */
			setHeight(height: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.horizontalMotionEffect> property.
			 */
			getHorizontalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.horizontalMotionEffect> property.
			 */
			setHorizontalMotionEffect(horizontalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.left> property.
			 */
			getLeft(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.left> property.
			 */
			setLeft(left: number): void;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.left> property.
			 */
			setLeft(left: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.layout> property.
			 */
			getLayout(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.layout> property.
			 */
			setLayout(layout: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.opacity> property.
			 */
			getOpacity(): number;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.opacity> property.
			 */
			setOpacity(opacity: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.pullBackgroundColor> property.
			 */
			getPullBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.pullBackgroundColor> property.
			 */
			setPullBackgroundColor(pullBackgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.previewContext> property.
			 */
			getPreviewContext(): Titanium.UI.iOS.PreviewContext;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.previewContext> property.
			 */
			setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.right> property.
			 */
			getRight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.right> property.
			 */
			setRight(right: number): void;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.right> property.
			 */
			setRight(right: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.rect> property.
			 */
			getRect(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.size> property.
			 */
			getSize(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.tintColor> property.
			 */
			getTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.tintColor> property.
			 */
			setTintColor(tintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.top> property.
			 */
			getTop(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.top> property.
			 */
			setTop(top: number): void;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.top> property.
			 */
			setTop(top: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.touchEnabled> property.
			 */
			getTouchEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.touchEnabled> property.
			 */
			setTouchEnabled(touchEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.transform> property.
			 */
			getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix2D): void;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix3D): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.verticalMotionEffect> property.
			 */
			getVerticalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.verticalMotionEffect> property.
			 */
			setVerticalMotionEffect(verticalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.viewShadowRadius> property.
			 */
			getViewShadowRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.viewShadowRadius> property.
			 */
			setViewShadowRadius(viewShadowRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.viewShadowColor> property.
			 */
			getViewShadowColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.viewShadowColor> property.
			 */
			setViewShadowColor(viewShadowColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.viewShadowOffset> property.
			 */
			getViewShadowOffset(): Point;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.viewShadowOffset> property.
			 */
			setViewShadowOffset(viewShadowOffset: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.visible> property.
			 */
			getVisible(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.visible> property.
			 */
			setVisible(visible: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.width> property.
			 */
			getWidth(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.width> property.
			 */
			setWidth(width: number): void;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.width> property.
			 */
			setWidth(width: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.horizontalWrap> property.
			 */
			getHorizontalWrap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.horizontalWrap> property.
			 */
			setHorizontalWrap(horizontalWrap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.zIndex> property.
			 */
			getZIndex(): number;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.zIndex> property.
			 */
			setZIndex(zIndex: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.index> property.
			 */
			getIndex(): number;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.index> property.
			 */
			setIndex(index: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ButtonBar.labels> property.
			 */
			getLabels(): string[] | BarItemType[];

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.labels> property.
			 */
			setLabels(labels: ReadonlyArray<string>): void;

			/**
			 * Sets the value of the <Titanium.UI.ButtonBar.labels> property.
			 */
			setLabels(labels: ReadonlyArray<BarItemType>): void;

		}
		/**
		 * The cover flow view is a container showing animated three-dimensional images in a style
		 * consistent with the cover flow presentation used for iPod, iTunes, and file browsing.
		 */
		interface CoverFlowView extends Titanium.Proxy {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: boolean;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: string;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: string;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: string;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: Point;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: Point;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: string;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: Gradient;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: string;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: boolean;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: number;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: number;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: string;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: number;

			/**
			 * Border width of the view.
			 */
			borderWidth: number;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: number | string;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: Point;

			/**
			 * View's clipping behavior.
			 */
			clipMode: number;

			/**
			 * View height, in platform-specific units.
			 */
			height: number | string;

			/**
			 * Adds a horizontal parallax effect to the view
			 */
			horizontalMotionEffect: any;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: number | string;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: string;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: number;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: string;

			/**
			 * The preview context used in the 3D-Touch feature "Peek and Pop".
			 */
			previewContext: Titanium.UI.iOS.PreviewContext;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: number | string;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: Dimension;

			/**
			 * The size of the view in system units.
			 */
			readonly size: Dimension;

			/**
			 * The view's tintColor
			 */
			tintColor: string;

			/**
			 * The view's top position.
			 */
			top: number | string;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: boolean;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Adds a vertical parallax effect to the view
			 */
			verticalMotionEffect: any;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: number;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: string;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: Point;

			/**
			 * Determines whether the view is visible.
			 */
			visible: boolean;

			/**
			 * View's width, in platform-specific units.
			 */
			width: number | string;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: boolean;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: number;

			/**
			 * Array of images to display in the view.
			 */
			images: string[] | Titanium.Blob[] | Titanium.Filesystem.File[] | CoverFlowImageType[];

			/**
			 * Index to make selected.
			 */
			selected: number;

			/**
			 * Animates this view.
			 */
			animate(animation: any, callback?: (param0: any) => any): void;

			/**
			 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
			 * view tree.
			 */
			finishLayout(): void;

			/**
			 * Hides this view.
			 */
			hide(options?: AnimationOption): void;

			/**
			 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			insertAt(params: any): void;

			/**
			 * Makes this view visible.
			 */
			show(options?: AnimationOption): void;

			/**
			 * Starts a batch update of this view's layout properties.
			 */
			startLayout(): void;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

			/**
			 * Performs a batch update of all supplied layout properties and schedules a layout pass after
			 * they have been updated.
			 */
			updateLayout(params: any): void;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView(point: Point, destinationView: any): Point;

			/**
			 * Returns the matching view of a given view ID.
			 */
			getViewById(id: string): Titanium.UI.View;

			/**
			 * Changes the image for a specified index.
			 */
			setImage(index: number, image: string): void;

			/**
			 * Changes the image for a specified index.
			 */
			setImage(index: number, image: Titanium.Blob): void;

			/**
			 * Changes the image for a specified index.
			 */
			setImage(index: number, image: Titanium.Filesystem.File): void;

			/**
			 * Changes the image for a specified index.
			 */
			setImage(index: number, image: CoverFlowImageType): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.accessibilityHidden> property.
			 */
			getAccessibilityHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.accessibilityHidden> property.
			 */
			setAccessibilityHidden(accessibilityHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.accessibilityHint> property.
			 */
			getAccessibilityHint(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.accessibilityHint> property.
			 */
			setAccessibilityHint(accessibilityHint: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.accessibilityLabel> property.
			 */
			getAccessibilityLabel(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.accessibilityLabel> property.
			 */
			setAccessibilityLabel(accessibilityLabel: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.accessibilityValue> property.
			 */
			getAccessibilityValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.accessibilityValue> property.
			 */
			setAccessibilityValue(accessibilityValue: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.anchorPoint> property.
			 */
			getAnchorPoint(): Point;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.anchorPoint> property.
			 */
			setAnchorPoint(anchorPoint: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.animatedCenter> property.
			 */
			getAnimatedCenter(): Point;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundColor> property.
			 */
			getBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundColor> property.
			 */
			setBackgroundColor(backgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundGradient> property.
			 */
			getBackgroundGradient(): Gradient;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundGradient> property.
			 */
			setBackgroundGradient(backgroundGradient: Gradient): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundImage> property.
			 */
			getBackgroundImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundImage> property.
			 */
			setBackgroundImage(backgroundImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundRepeat> property.
			 */
			getBackgroundRepeat(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundRepeat> property.
			 */
			setBackgroundRepeat(backgroundRepeat: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundLeftCap> property.
			 */
			getBackgroundLeftCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundLeftCap> property.
			 */
			setBackgroundLeftCap(backgroundLeftCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundTopCap> property.
			 */
			getBackgroundTopCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundTopCap> property.
			 */
			setBackgroundTopCap(backgroundTopCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.borderColor> property.
			 */
			getBorderColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.borderColor> property.
			 */
			setBorderColor(borderColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.borderRadius> property.
			 */
			getBorderRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.borderRadius> property.
			 */
			setBorderRadius(borderRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.borderWidth> property.
			 */
			getBorderWidth(): number;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.borderWidth> property.
			 */
			setBorderWidth(borderWidth: number): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.bottom> property.
			 */
			getBottom(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.bottom> property.
			 */
			setBottom(bottom: number): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.bottom> property.
			 */
			setBottom(bottom: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.center> property.
			 */
			getCenter(): Point;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.center> property.
			 */
			setCenter(center: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.clipMode> property.
			 */
			getClipMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.clipMode> property.
			 */
			setClipMode(clipMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.height> property.
			 */
			getHeight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.height> property.
			 */
			setHeight(height: number): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.height> property.
			 */
			setHeight(height: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.horizontalMotionEffect> property.
			 */
			getHorizontalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.horizontalMotionEffect> property.
			 */
			setHorizontalMotionEffect(horizontalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.left> property.
			 */
			getLeft(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.left> property.
			 */
			setLeft(left: number): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.left> property.
			 */
			setLeft(left: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.layout> property.
			 */
			getLayout(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.layout> property.
			 */
			setLayout(layout: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.opacity> property.
			 */
			getOpacity(): number;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.opacity> property.
			 */
			setOpacity(opacity: number): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.pullBackgroundColor> property.
			 */
			getPullBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.pullBackgroundColor> property.
			 */
			setPullBackgroundColor(pullBackgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.previewContext> property.
			 */
			getPreviewContext(): Titanium.UI.iOS.PreviewContext;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.previewContext> property.
			 */
			setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.right> property.
			 */
			getRight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.right> property.
			 */
			setRight(right: number): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.right> property.
			 */
			setRight(right: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.rect> property.
			 */
			getRect(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.size> property.
			 */
			getSize(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.tintColor> property.
			 */
			getTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.tintColor> property.
			 */
			setTintColor(tintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.top> property.
			 */
			getTop(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.top> property.
			 */
			setTop(top: number): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.top> property.
			 */
			setTop(top: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.touchEnabled> property.
			 */
			getTouchEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.touchEnabled> property.
			 */
			setTouchEnabled(touchEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.transform> property.
			 */
			getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix2D): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix3D): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.verticalMotionEffect> property.
			 */
			getVerticalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.verticalMotionEffect> property.
			 */
			setVerticalMotionEffect(verticalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.viewShadowRadius> property.
			 */
			getViewShadowRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.viewShadowRadius> property.
			 */
			setViewShadowRadius(viewShadowRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.viewShadowColor> property.
			 */
			getViewShadowColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.viewShadowColor> property.
			 */
			setViewShadowColor(viewShadowColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.viewShadowOffset> property.
			 */
			getViewShadowOffset(): Point;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.viewShadowOffset> property.
			 */
			setViewShadowOffset(viewShadowOffset: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.visible> property.
			 */
			getVisible(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.visible> property.
			 */
			setVisible(visible: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.width> property.
			 */
			getWidth(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.width> property.
			 */
			setWidth(width: number): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.width> property.
			 */
			setWidth(width: string): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.horizontalWrap> property.
			 */
			getHorizontalWrap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.horizontalWrap> property.
			 */
			setHorizontalWrap(horizontalWrap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.zIndex> property.
			 */
			getZIndex(): number;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.zIndex> property.
			 */
			setZIndex(zIndex: number): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.images> property.
			 */
			getImages(): string[] | Titanium.Blob[] | Titanium.Filesystem.File[] | CoverFlowImageType[];

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.images> property.
			 */
			setImages(images: ReadonlyArray<string>): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.images> property.
			 */
			setImages(images: ReadonlyArray<Titanium.Blob>): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.images> property.
			 */
			setImages(images: ReadonlyArray<Titanium.Filesystem.File>): void;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.images> property.
			 */
			setImages(images: ReadonlyArray<CoverFlowImageType>): void;

			/**
			 * Gets the value of the <Titanium.UI.CoverFlowView.selected> property.
			 */
			getSelected(): number;

			/**
			 * Sets the value of the <Titanium.UI.CoverFlowView.selected> property.
			 */
			setSelected(selected: number): void;

		}
		/**
		 * A dashboard item is a view that is displayed as an icon in a <Titanium.UI.DashboardView>.
		 */
		interface DashboardItem extends Titanium.Proxy {
			/**
			 * Integer value displayed in a badge.
			 */
			badge: number;

			/**
			 * Determines whether this item can be deleted when it edit mode.
			 */
			canDelete: boolean;

			/**
			 * Image or path to image to display in the item by default.
			 */
			image: string | Titanium.Blob;

			/**
			 * Image or path to image to display in the item as it is selected.
			 */
			selectedImage: string | Titanium.Blob;

			/**
			 * Gets the value of the <Titanium.UI.DashboardItem.badge> property.
			 */
			getBadge(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardItem.badge> property.
			 */
			setBadge(badge: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardItem.canDelete> property.
			 */
			getCanDelete(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.DashboardItem.canDelete> property.
			 */
			setCanDelete(canDelete: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardItem.image> property.
			 */
			getImage(): string | Titanium.Blob;

			/**
			 * Sets the value of the <Titanium.UI.DashboardItem.image> property.
			 */
			setImage(image: string): void;

			/**
			 * Sets the value of the <Titanium.UI.DashboardItem.image> property.
			 */
			setImage(image: Titanium.Blob): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardItem.selectedImage> property.
			 */
			getSelectedImage(): string | Titanium.Blob;

			/**
			 * Sets the value of the <Titanium.UI.DashboardItem.selectedImage> property.
			 */
			setSelectedImage(selectedImage: string): void;

			/**
			 * Sets the value of the <Titanium.UI.DashboardItem.selectedImage> property.
			 */
			setSelectedImage(selectedImage: Titanium.Blob): void;

		}
		/**
		 * A dashboard view is an iOS Springboard-like view of <Titanium.UI.DashboardItem> items that may
		 * be deleted and reordered by the user using its built-in edit mode.
		 */
		interface DashboardView extends Titanium.Proxy {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: boolean;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: string;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: string;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: string;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: Point;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: Point;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: string;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: Gradient;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: string;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: boolean;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: number;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: number;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: string;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: number;

			/**
			 * Border width of the view.
			 */
			borderWidth: number;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: number | string;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: Point;

			/**
			 * Array of this view's child views.
			 */
			readonly children: Titanium.UI.View[];

			/**
			 * View's clipping behavior.
			 */
			clipMode: number;

			/**
			 * View height, in platform-specific units.
			 */
			height: number | string;

			/**
			 * Adds a horizontal parallax effect to the view
			 */
			horizontalMotionEffect: any;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: number | string;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: string;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: number;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: string;

			/**
			 * The preview context used in the 3D-Touch feature "Peek and Pop".
			 */
			previewContext: Titanium.UI.iOS.PreviewContext;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: number | string;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: Dimension;

			/**
			 * The size of the view in system units.
			 */
			readonly size: Dimension;

			/**
			 * The view's tintColor
			 */
			tintColor: string;

			/**
			 * The view's top position.
			 */
			top: number | string;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: boolean;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Adds a vertical parallax effect to the view
			 */
			verticalMotionEffect: any;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: number;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: string;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: Point;

			/**
			 * Determines whether the view is visible.
			 */
			visible: boolean;

			/**
			 * View's width, in platform-specific units.
			 */
			width: number | string;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: boolean;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: number;

			/**
			 * The number of columns of items in the view.
			 */
			columnCount: number;

			/**
			 * The number of rows of items in the view.
			 */
			rowCount: number;

			/**
			 * Items to display in this view.
			 */
			data: Titanium.UI.DashboardItem[];

			/**
			 * Determines whether edit mode is activated by a longpress of an item.
			 */
			editable: boolean;

			/**
			 * Determines whether the wobble visual editing cue is enabled in edit mode.
			 */
			wobble: boolean;

			/**
			 * Animates this view.
			 */
			animate(animation: any, callback?: (param0: any) => any): void;

			/**
			 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
			 * view tree.
			 */
			finishLayout(): void;

			/**
			 * Hides this view.
			 */
			hide(options?: AnimationOption): void;

			/**
			 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			insertAt(params: any): void;

			/**
			 * Makes this view visible.
			 */
			show(options?: AnimationOption): void;

			/**
			 * Starts a batch update of this view's layout properties.
			 */
			startLayout(): void;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

			/**
			 * Performs a batch update of all supplied layout properties and schedules a layout pass after
			 * they have been updated.
			 */
			updateLayout(params: any): void;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView(point: Point, destinationView: any): Point;

			/**
			 * Returns the matching view of a given view ID.
			 */
			getViewById(id: string): Titanium.UI.View;

			/**
			 * Enable edit mode.
			 */
			startEditing(): void;

			/**
			 * Disable edit mode.
			 */
			stopEditing(): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.accessibilityHidden> property.
			 */
			getAccessibilityHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.accessibilityHidden> property.
			 */
			setAccessibilityHidden(accessibilityHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.accessibilityHint> property.
			 */
			getAccessibilityHint(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.accessibilityHint> property.
			 */
			setAccessibilityHint(accessibilityHint: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.accessibilityLabel> property.
			 */
			getAccessibilityLabel(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.accessibilityLabel> property.
			 */
			setAccessibilityLabel(accessibilityLabel: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.accessibilityValue> property.
			 */
			getAccessibilityValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.accessibilityValue> property.
			 */
			setAccessibilityValue(accessibilityValue: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.anchorPoint> property.
			 */
			getAnchorPoint(): Point;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.anchorPoint> property.
			 */
			setAnchorPoint(anchorPoint: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.animatedCenter> property.
			 */
			getAnimatedCenter(): Point;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.backgroundColor> property.
			 */
			getBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.backgroundColor> property.
			 */
			setBackgroundColor(backgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.backgroundGradient> property.
			 */
			getBackgroundGradient(): Gradient;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.backgroundGradient> property.
			 */
			setBackgroundGradient(backgroundGradient: Gradient): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.backgroundImage> property.
			 */
			getBackgroundImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.backgroundImage> property.
			 */
			setBackgroundImage(backgroundImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.backgroundRepeat> property.
			 */
			getBackgroundRepeat(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.backgroundRepeat> property.
			 */
			setBackgroundRepeat(backgroundRepeat: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.backgroundLeftCap> property.
			 */
			getBackgroundLeftCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.backgroundLeftCap> property.
			 */
			setBackgroundLeftCap(backgroundLeftCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.backgroundTopCap> property.
			 */
			getBackgroundTopCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.backgroundTopCap> property.
			 */
			setBackgroundTopCap(backgroundTopCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.borderColor> property.
			 */
			getBorderColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.borderColor> property.
			 */
			setBorderColor(borderColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.borderRadius> property.
			 */
			getBorderRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.borderRadius> property.
			 */
			setBorderRadius(borderRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.borderWidth> property.
			 */
			getBorderWidth(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.borderWidth> property.
			 */
			setBorderWidth(borderWidth: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.bottom> property.
			 */
			getBottom(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.bottom> property.
			 */
			setBottom(bottom: number): void;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.bottom> property.
			 */
			setBottom(bottom: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.center> property.
			 */
			getCenter(): Point;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.center> property.
			 */
			setCenter(center: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.children> property.
			 */
			getChildren(): Titanium.UI.View[];

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.clipMode> property.
			 */
			getClipMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.clipMode> property.
			 */
			setClipMode(clipMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.height> property.
			 */
			getHeight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.height> property.
			 */
			setHeight(height: number): void;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.height> property.
			 */
			setHeight(height: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.horizontalMotionEffect> property.
			 */
			getHorizontalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.horizontalMotionEffect> property.
			 */
			setHorizontalMotionEffect(horizontalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.left> property.
			 */
			getLeft(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.left> property.
			 */
			setLeft(left: number): void;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.left> property.
			 */
			setLeft(left: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.layout> property.
			 */
			getLayout(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.layout> property.
			 */
			setLayout(layout: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.opacity> property.
			 */
			getOpacity(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.opacity> property.
			 */
			setOpacity(opacity: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.pullBackgroundColor> property.
			 */
			getPullBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.pullBackgroundColor> property.
			 */
			setPullBackgroundColor(pullBackgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.previewContext> property.
			 */
			getPreviewContext(): Titanium.UI.iOS.PreviewContext;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.previewContext> property.
			 */
			setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.right> property.
			 */
			getRight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.right> property.
			 */
			setRight(right: number): void;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.right> property.
			 */
			setRight(right: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.rect> property.
			 */
			getRect(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.size> property.
			 */
			getSize(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.tintColor> property.
			 */
			getTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.tintColor> property.
			 */
			setTintColor(tintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.top> property.
			 */
			getTop(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.top> property.
			 */
			setTop(top: number): void;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.top> property.
			 */
			setTop(top: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.touchEnabled> property.
			 */
			getTouchEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.touchEnabled> property.
			 */
			setTouchEnabled(touchEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.transform> property.
			 */
			getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix2D): void;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.transform> property.
			 */
			setTransform(transform: Titanium.UI.Matrix3D): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.verticalMotionEffect> property.
			 */
			getVerticalMotionEffect(): any;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.verticalMotionEffect> property.
			 */
			setVerticalMotionEffect(verticalMotionEffect: any): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.viewShadowRadius> property.
			 */
			getViewShadowRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.viewShadowRadius> property.
			 */
			setViewShadowRadius(viewShadowRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.viewShadowColor> property.
			 */
			getViewShadowColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.viewShadowColor> property.
			 */
			setViewShadowColor(viewShadowColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.viewShadowOffset> property.
			 */
			getViewShadowOffset(): Point;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.viewShadowOffset> property.
			 */
			setViewShadowOffset(viewShadowOffset: Point): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.visible> property.
			 */
			getVisible(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.visible> property.
			 */
			setVisible(visible: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.width> property.
			 */
			getWidth(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.width> property.
			 */
			setWidth(width: number): void;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.width> property.
			 */
			setWidth(width: string): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.horizontalWrap> property.
			 */
			getHorizontalWrap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.horizontalWrap> property.
			 */
			setHorizontalWrap(horizontalWrap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.zIndex> property.
			 */
			getZIndex(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.zIndex> property.
			 */
			setZIndex(zIndex: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.columnCount> property.
			 */
			getColumnCount(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.columnCount> property.
			 */
			setColumnCount(columnCount: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.rowCount> property.
			 */
			getRowCount(): number;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.rowCount> property.
			 */
			setRowCount(rowCount: number): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.data> property.
			 */
			getData(): Titanium.UI.DashboardItem[];

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.data> property.
			 */
			setData(data: ReadonlyArray<Titanium.UI.DashboardItem>): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.editable> property.
			 */
			getEditable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.editable> property.
			 */
			setEditable(editable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.DashboardView.wobble> property.
			 */
			getWobble(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.DashboardView.wobble> property.
			 */
			setWobble(wobble: boolean): void;

		}
		/**
		 * An email dialog is a modal window that allows users to compose and send an email.
		 */
		interface EmailDialog extends Titanium.UI.View {
			/**
			 * Constant for the `CANCELLED` status result. On Android, this property exists but is not used.
			 */
			readonly CANCELLED: number;

			/**
			 * Constant for the `FAILED` status result.
			 */
			readonly FAILED: number;

			/**
			 * Constant for the `SAVED` status result. On Android, this property exists but is not used.
			 */
			readonly SAVED: number;

			/**
			 * Constant for the `SENT` status result.
			 */
			readonly SENT: number;

			/**
			 * Bar color of the email dialog window, as a color name or hex triplet.
			 */
			barColor: string;

			/**
			 * Recipients of the email included via the `BCC` (Blind Carbon Copy) field.
			 */
			bccRecipients: string[];

			/**
			 * Recipients of the email included via the `CC` (Carbon Copy) field.
			 */
			ccRecipients: string[];

			/**
			 * Determines whether the email message, specifically the contents of
			 * [messageBody](Titanium.UI.EmailDialog.messageBody), should be sent as HTML content type
			 * rather than plain text.
			 */
			html: boolean;

			/**
			 * Email message body.
			 */
			messageBody: string;

			/**
			 * Subject line for the email.
			 */
			subject: string;

			/**
			 * Recipients of the email included via the main `TO` field.
			 */
			toRecipients: string[];

			/**
			 * Adds an attachment.
			 */
			addAttachment(attachment: Titanium.Blob): void;

			/**
			 * Adds an attachment.
			 */
			addAttachment(attachment: Titanium.Filesystem.File): void;

			/**
			 * Indicates whether sending email is supported by the system.
			 */
			isSupported(): boolean;

			/**
			 * Opens this email dialog.
			 */
			open(properties: any): void;

			/**
			 * Gets the value of the <Titanium.UI.EmailDialog.barColor> property.
			 */
			getBarColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.EmailDialog.barColor> property.
			 */
			setBarColor(barColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.EmailDialog.bccRecipients> property.
			 */
			getBccRecipients(): string[];

			/**
			 * Sets the value of the <Titanium.UI.EmailDialog.bccRecipients> property.
			 */
			setBccRecipients(bccRecipients: ReadonlyArray<string>): void;

			/**
			 * Gets the value of the <Titanium.UI.EmailDialog.ccRecipients> property.
			 */
			getCcRecipients(): string[];

			/**
			 * Sets the value of the <Titanium.UI.EmailDialog.ccRecipients> property.
			 */
			setCcRecipients(ccRecipients: ReadonlyArray<string>): void;

			/**
			 * Gets the value of the <Titanium.UI.EmailDialog.html> property.
			 */
			getHtml(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.EmailDialog.html> property.
			 */
			setHtml(html: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.EmailDialog.messageBody> property.
			 */
			getMessageBody(): string;

			/**
			 * Sets the value of the <Titanium.UI.EmailDialog.messageBody> property.
			 */
			setMessageBody(messageBody: string): void;

			/**
			 * Gets the value of the <Titanium.UI.EmailDialog.subject> property.
			 */
			getSubject(): string;

			/**
			 * Sets the value of the <Titanium.UI.EmailDialog.subject> property.
			 */
			setSubject(subject: string): void;

			/**
			 * Gets the value of the <Titanium.UI.EmailDialog.toRecipients> property.
			 */
			getToRecipients(): string[];

			/**
			 * Sets the value of the <Titanium.UI.EmailDialog.toRecipients> property.
			 */
			setToRecipients(toRecipients: ReadonlyArray<string>): void;

		}
		/**
		 * A view to display a single image or series of animated images.
		 */
		interface ImageView extends Titanium.UI.View {
			/**
			 * Indicates whether animation is running.
			 */
			readonly animating: boolean;

			/**
			 * Indicates whether the image should be rotated based on exif orientation data.
			 * By default, this is false on android and true on iOS.
			 */
			autorotate: boolean;

			/**
			 * Number of times to retry decoding the bitmap at a URL.
			 */
			decodeRetries: number;

			/**
			 * Local path to the default image to display while loading a remote image.
			 */
			defaultImage: string;

			/**
			 * Amount of time in milliseconds to animate one cycle.
			 */
			duration: number;

			/**
			 * Show zoom controls when the user touches the image view.
			 */
			enableZoomControls: boolean;

			/**
			 * Set to `true` to prevent scaling of 2x/3x-resolution remote images for retina
			 * displays.
			 */
			hires: boolean;

			/**
			 * Image to display.
			 */
			image: string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Array of images to animate, defined using local filesystem paths, `File` objects,
			 * remote URLs (Android only), or `Blob` objects containing image data.
			 * When using this property, an initial `start()` needs to be called upon the ImageView before any image will show in this imageview.
			 * Related properties/methods to look at: `start`, `stop`, `pause`, `reverse`, `resume` and `repeatCount`
			 */
			images: string[] | Titanium.Blob[] | Titanium.Filesystem.File[];

			/**
			 * Indicates whether the animation is paused.
			 */
			readonly paused: boolean;

			/**
			 * Prevent the default image from being displayed while loading a remote image. This property
			 * is ignored when the `defaultImage` property is set.
			 */
			preventDefaultImage: boolean;

			/**
			 * Number of times to repeat the image animation.
			 */
			repeatCount: number;

			/**
			 * Run the animation in reverse.
			 */
			reverse: boolean;

			/**
			 * URL to the image to display.
			 */
			url: string;

			/**
			 * Pauses a running animation. Use `resume` method to continue.
			 */
			pause(): void;

			/**
			 * Resumes an animation from a `pause` state.
			 */
			resume(): void;

			/**
			 * Starts the image animation. On Android, also resets `index` to the first image.
			 */
			start(): void;

			/**
			 * Stops a running animation. On iOS, also resets `index` to the first image.
			 */
			stop(): void;

			/**
			 * Returns the image as a Blob object.
			 */
			toBlob(): Titanium.Blob;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.animating> property.
			 */
			getAnimating(): boolean;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.autorotate> property.
			 */
			getAutorotate(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.autorotate> property.
			 */
			setAutorotate(autorotate: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.decodeRetries> property.
			 */
			getDecodeRetries(): number;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.decodeRetries> property.
			 */
			setDecodeRetries(decodeRetries: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.defaultImage> property.
			 */
			getDefaultImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.defaultImage> property.
			 */
			setDefaultImage(defaultImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.duration> property.
			 */
			getDuration(): number;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.duration> property.
			 */
			setDuration(duration: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.enableZoomControls> property.
			 */
			getEnableZoomControls(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.enableZoomControls> property.
			 */
			setEnableZoomControls(enableZoomControls: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.hires> property.
			 */
			getHires(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.hires> property.
			 */
			setHires(hires: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.image> property.
			 */
			getImage(): string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.image> property.
			 */
			setImage(image: string): void;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.image> property.
			 */
			setImage(image: Titanium.Blob): void;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.image> property.
			 */
			setImage(image: Titanium.Filesystem.File): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.images> property.
			 */
			getImages(): string[] | Titanium.Blob[] | Titanium.Filesystem.File[];

			/**
			 * Sets the value of the <Titanium.UI.ImageView.images> property.
			 */
			setImages(images: ReadonlyArray<string>): void;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.images> property.
			 */
			setImages(images: ReadonlyArray<Titanium.Blob>): void;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.images> property.
			 */
			setImages(images: ReadonlyArray<Titanium.Filesystem.File>): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.paused> property.
			 */
			getPaused(): boolean;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.preventDefaultImage> property.
			 */
			getPreventDefaultImage(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.preventDefaultImage> property.
			 */
			setPreventDefaultImage(preventDefaultImage: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.repeatCount> property.
			 */
			getRepeatCount(): number;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.repeatCount> property.
			 */
			setRepeatCount(repeatCount: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.reverse> property.
			 */
			getReverse(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.reverse> property.
			 */
			setReverse(reverse: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ImageView.url> property.
			 */
			getUrl(): string;

			/**
			 * Sets the value of the <Titanium.UI.ImageView.url> property.
			 */
			setUrl(url: string): void;

		}
		/**
		 * A text label, with an optional background image.
		 */
		interface Label extends Titanium.UI.View {
			/**
			 * Specify an attributed string for the label.
			 */
			attributedString: Titanium.UI.AttributedString;

			/**
			 * Automatically convert certain text items in the label to clickable links.
			 */
			autoLink: number;

			/**
			 * Number of pixels to extend the background image past the label on the bottom.
			 */
			backgroundPaddingBottom: number;

			/**
			 * Number of pixels to extend the background image past the label on the left.
			 */
			backgroundPaddingLeft: number;

			/**
			 * Number of pixels to extend the background image past the label on the right.
			 */
			backgroundPaddingRight: number;

			/**
			 * Number of pixels to extend the background image past the label on the top.
			 */
			backgroundPaddingTop: number;

			/**
			 * Color of the label text, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Causes words in the text that are longer than the view is wide to be ellipsized instead of broken in the middle.
			 */
			ellipsize: number;

			/**
			 * Font to use for the label text.
			 */
			font: Font;

			/**
			 * Color of the label when in the highlighted state, as a color name or hex triplet.
			 */
			highlightedColor: string;

			/**
			 * Simple HTML formatting.
			 */
			html: string;

			/**
			 * Includes extra top and bottom padding to make room for accents that go above normal ascent and descent.
			 */
			includeFontPadding: boolean;

			/**
			 * Makes the label be exactly this many lines tall.
			 */
			lines: number;

			/**
			 * Line spacing of the [text](Titanium.UI.Label.text), as a dictionary with the properties `add` and `multiply`.
			 */
			lineSpacing: any;

			/**
			 * Makes the label at most this many lines tall.
			 */
			maxLines: number;

			/**
			 * Minimum font size when the font is sized based on the contents.
			 */
			minimumFontSize: number;

			/**
			 * Shadow color of the [text](Titanium.UI.Label.text), as a color name or hex triplet.
			 */
			shadowColor: string;

			/**
			 * Shadow offset of the [text](Titanium.UI.Label.text), as a dictionary with the properties `x` and `y`.
			 */
			shadowOffset: any;

			/**
			 * Shadow radius of the [text](Titanium.UI.Label.text).
			 */
			shadowRadius: number;

			/**
			 * Label text.
			 */
			text: string;

			/**
			 * Text alignment.
			 */
			textAlign: string | number;

			/**
			 * Key identifying a string from the locale file to use for the label text.
			 */
			textid: string;

			/**
			 * Enable or disable word wrapping in the label.
			 */
			wordWrap: boolean;

			/**
			 * Vertical text alignment, specified using one of the  vertical alignment constants
			 * from <Titanium.UI>.
			 */
			verticalAlign: number | string;

			/**
			 * Gets the value of the <Titanium.UI.Label.attributedString> property.
			 */
			getAttributedString(): Titanium.UI.AttributedString;

			/**
			 * Sets the value of the <Titanium.UI.Label.attributedString> property.
			 */
			setAttributedString(attributedString: Titanium.UI.AttributedString): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.autoLink> property.
			 */
			getAutoLink(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.autoLink> property.
			 */
			setAutoLink(autoLink: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.backgroundPaddingBottom> property.
			 */
			getBackgroundPaddingBottom(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.backgroundPaddingBottom> property.
			 */
			setBackgroundPaddingBottom(backgroundPaddingBottom: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.backgroundPaddingLeft> property.
			 */
			getBackgroundPaddingLeft(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.backgroundPaddingLeft> property.
			 */
			setBackgroundPaddingLeft(backgroundPaddingLeft: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.backgroundPaddingRight> property.
			 */
			getBackgroundPaddingRight(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.backgroundPaddingRight> property.
			 */
			setBackgroundPaddingRight(backgroundPaddingRight: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.backgroundPaddingTop> property.
			 */
			getBackgroundPaddingTop(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.backgroundPaddingTop> property.
			 */
			setBackgroundPaddingTop(backgroundPaddingTop: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Label.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.ellipsize> property.
			 */
			getEllipsize(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.ellipsize> property.
			 */
			setEllipsize(ellipsize: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.Label.font> property.
			 */
			setFont(font: Font): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.highlightedColor> property.
			 */
			getHighlightedColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Label.highlightedColor> property.
			 */
			setHighlightedColor(highlightedColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.html> property.
			 */
			getHtml(): string;

			/**
			 * Sets the value of the <Titanium.UI.Label.html> property.
			 */
			setHtml(html: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.includeFontPadding> property.
			 */
			getIncludeFontPadding(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Label.includeFontPadding> property.
			 */
			setIncludeFontPadding(includeFontPadding: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.lines> property.
			 */
			getLines(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.lines> property.
			 */
			setLines(lines: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.lineSpacing> property.
			 */
			getLineSpacing(): any;

			/**
			 * Sets the value of the <Titanium.UI.Label.lineSpacing> property.
			 */
			setLineSpacing(lineSpacing: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.maxLines> property.
			 */
			getMaxLines(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.maxLines> property.
			 */
			setMaxLines(maxLines: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.minimumFontSize> property.
			 */
			getMinimumFontSize(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.minimumFontSize> property.
			 */
			setMinimumFontSize(minimumFontSize: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.shadowColor> property.
			 */
			getShadowColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Label.shadowColor> property.
			 */
			setShadowColor(shadowColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.shadowOffset> property.
			 */
			getShadowOffset(): any;

			/**
			 * Sets the value of the <Titanium.UI.Label.shadowOffset> property.
			 */
			setShadowOffset(shadowOffset: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.shadowRadius> property.
			 */
			getShadowRadius(): number;

			/**
			 * Sets the value of the <Titanium.UI.Label.shadowRadius> property.
			 */
			setShadowRadius(shadowRadius: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.text> property.
			 */
			getText(): string;

			/**
			 * Sets the value of the <Titanium.UI.Label.text> property.
			 */
			setText(text: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.textAlign> property.
			 */
			getTextAlign(): string | number;

			/**
			 * Sets the value of the <Titanium.UI.Label.textAlign> property.
			 */
			setTextAlign(textAlign: string): void;

			/**
			 * Sets the value of the <Titanium.UI.Label.textAlign> property.
			 */
			setTextAlign(textAlign: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.textid> property.
			 */
			getTextid(): string;

			/**
			 * Sets the value of the <Titanium.UI.Label.textid> property.
			 */
			setTextid(textid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.wordWrap> property.
			 */
			getWordWrap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Label.wordWrap> property.
			 */
			setWordWrap(wordWrap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Label.verticalAlign> property.
			 */
			getVerticalAlign(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.Label.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: number): void;

			/**
			 * Sets the value of the <Titanium.UI.Label.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: string): void;

		}
		/**
		 * A list item is an individual item in a list section.
		 */
		interface ListItem extends Titanium.Proxy {
			/**
			 * A user defined string that gets passed to events.
			 */
			itemId: string;

			/**
			 * Sets an accessory on the right side of an item.
			 */
			accessoryType: number;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: string;

			/**
			 * Background image to render when the item is not selected.
			 */
			backgroundImage: string;

			/**
			 * Background gradient to render when the item is not selected.
			 */
			backgroundGradient: Gradient;

			/**
			 * Background color of the view, as a color name or hex triplet when item is selected.
			 */
			selectedBackgroundColor: string;

			/**
			 * Background image to render when the item is selected.
			 */
			selectedBackgroundImage: string;

			/**
			 * Background gradient to render when the item is selected.
			 */
			selectedBackgroundGradient: Gradient;

			/**
			 * Specifies if the item can be deleted by a user initiated action.
			 */
			canEdit: boolean;

			/**
			 * Specifies if the item can be inserted by a user initiated action.
			 */
			canInsert: boolean;

			/**
			 * Specifies if the item can be reordered within the list view by a user initiated action.
			 */
			canMove: boolean;

			/**
			 * Specifies custom action items to be shown when when a list item is edited.
			 */
			editActions: RowActionType[];

			/**
			 * The text to match against when the [ListView](Titanium.UI.ListView) is performing a search.
			 */
			searchableText: string;

			/**
			 * Default text color of the item when not selected, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Default text color of the subtitle, as a color name or hex triplet.
			 */
			subtitleColor: string;

			/**
			 * Color to use for the item title when the item is selected, as a color name or hex triplet.
			 */
			selectedColor: string;

			/**
			 * Color to use for the item subtitle when the item is selected, as a color name or hex triplet.
			 */
			selectedSubtitleColor: string;

			/**
			 * Font to use for the item title.
			 */
			font: Font;

			/**
			 * Row height in platform-specific units.
			 */
			height: number | string;

			/**
			 * Image to render in the image area of the item, specified as a local path or URL.
			 */
			image: string;

			/**
			 * Title to set in the text area of the item.
			 */
			title: string;

			/**
			 * Selection style constant to control the selection color.
			 */
			selectionStyle: number;

			/**
			 * Subtitle to set in the text area of the item.
			 */
			subtitle: string;

			/**
			 * Gets the value of the <Titanium.UI.ListItem.editActions> property.
			 */
			getEditActions(): RowActionType[];

			/**
			 * Sets the value of the <Titanium.UI.ListItem.editActions> property.
			 */
			setEditActions(editActions: ReadonlyArray<RowActionType>): void;

			/**
			 * Gets the value of the <Titanium.UI.ListItem.selectedColor> property.
			 */
			getSelectedColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListItem.selectedColor> property.
			 */
			setSelectedColor(selectedColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ListItem.selectedSubtitleColor> property.
			 */
			getSelectedSubtitleColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListItem.selectedSubtitleColor> property.
			 */
			setSelectedSubtitleColor(selectedSubtitleColor: string): void;

		}
		/**
		 * A list section is a container within a list view used to organize list items.
		 */
		interface ListSection extends Titanium.Proxy {
			/**
			 * Title of this section footer.
			 */
			footerTitle: string;

			/**
			 * View to use for this section footer.
			 */
			footerView: Titanium.UI.View;

			/**
			 * Title of this section header.
			 */
			headerTitle: string;

			/**
			 * View to use for this section header.
			 */
			headerView: Titanium.UI.View;

			/**
			 * Items of this list section.
			 */
			items: ListDataItem[];

			/**
			 * Sets the data entries in the list section.
			 */
			setItems(dataItems: ReadonlyArray<ListDataItem>, animation?: ListViewAnimationProperties): void;

			/**
			 * Appends the data entries to the end of the list section.
			 */
			appendItems(dataItems: ReadonlyArray<ListDataItem>, animation?: ListViewAnimationProperties): void;

			/**
			 * Inserts data entries to the list section at the specified index.
			 */
			insertItemsAt(itemIndex: number, dataItems: ReadonlyArray<ListDataItem>, animation?: ListViewAnimationProperties): void;

			/**
			 * Removes count entries from the list section at the specified index,
			 * then inserts data entries to the list section at the same index.
			 */
			replaceItemsAt(index: number, count: number, dataItems: ReadonlyArray<ListDataItem>, animation?: ListViewAnimationProperties): void;

			/**
			 * Removes count entries from the list section at the specified index.
			 */
			deleteItemsAt(itemIndex: number, count: number, animation?: ListViewAnimationProperties): void;

			/**
			 * Returns the item entry from the list view at the specified index.
			 */
			getItemAt(itemIndex: number): ListDataItem;

			/**
			 * Updates an item at the specified index.
			 */
			updateItemAt(index: number, dataItem: ListDataItem, animation?: ListViewAnimationProperties): void;

			/**
			 * Gets the value of the <Titanium.UI.ListSection.footerTitle> property.
			 */
			getFooterTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListSection.footerTitle> property.
			 */
			setFooterTitle(footerTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ListSection.footerView> property.
			 */
			getFooterView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.ListSection.footerView> property.
			 */
			setFooterView(footerView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListSection.headerTitle> property.
			 */
			getHeaderTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListSection.headerTitle> property.
			 */
			setHeaderTitle(headerTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ListSection.headerView> property.
			 */
			getHeaderView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.ListSection.headerView> property.
			 */
			setHeaderView(headerView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListSection.items> property.
			 */
			getItems(): ListDataItem[];

		}
		/**
		 * A list view is used to present information, organized in to sections and items,
		 * in a vertically-scrolling view.
		 */
		interface ListView extends Titanium.UI.View {
			/**
			 * Determines whether this item can be selected.
			 */
			allowsSelection: boolean;

			/**
			 * Determines if the list view can scroll in response to user actions.
			 */
			canScroll: boolean;

			/**
			 * Determines whether the scroll-bounce of the list view should be disabled.
			 */
			disableBounce: boolean;

			/**
			 * Determines if the list view is currently in editing mode.
			 */
			editing: boolean;

			/**
			 * Sets the fastScroll mode on Android ListViews.
			 */
			fastScroll: boolean;

			/**
			 * Determines whether this list view items can be selected while editing the table.
			 */
			allowsSelectionDuringEditing: boolean;

			/**
			 * Determines whether multiple items of this list view can be selected at the same time while editing the table.
			 */
			allowsMultipleSelectionDuringEditing: boolean;

			/**
			 * Determines if the list view should use lazy loading to load remote images.
			 */
			lazyLoadingEnabled: boolean;

			/**
			 * Determines if empty sections are retained when the user completes editing the list view.
			 */
			pruneSectionsOnEdit: boolean;

			/**
			 * Contain key-value pairs mapping a style name (key) to an <ItemTemplate> (value).
			 */
			templates: any;

			/**
			 * Sections of this list.
			 */
			sections: Titanium.UI.ListSection[];

			/**
			 * Sets the default template for list data items that do not specify the `template` property.
			 */
			defaultItemTemplate: string | number;

			/**
			 * height of the ListView separator.
			 */
			separatorHeight: string | number;

			/**
			 * When set to false, the ListView will not draw the divider before the footer view.
			 */
			footerDividersEnabled: boolean;

			/**
			 * List view footer title.
			 */
			footerTitle: string;

			/**
			 * List view footer as a view that will be rendered instead of a label.
			 */
			footerView: Titanium.UI.View;

			/**
			 * When set to false, the ListView will not draw the divider after the header view.
			 */
			headerDividersEnabled: boolean;

			/**
			 * List view header title.
			 */
			headerTitle: string;

			/**
			 * List view header as a view that will be rendered instead of a label.
			 */
			headerView: Titanium.UI.View;

			/**
			 * View positioned above the first row that is only revealed when the user drags the list view contents down.
			 */
			pullView: Titanium.UI.View;

			/**
			 * View positioned above the first row that is only revealed when the user drags the list view contents down.
			 */
			refreshControl: Titanium.UI.RefreshControl;

			/**
			 * Search field to use for the list view.
			 */
			searchView: Titanium.UI.SearchBar | Titanium.UI.Android.SearchView;

			/**
			 * The string to use as the search parameter.
			 */
			searchText: string;

			/**
			 * Determines if the search performed is case insensitive.
			 */
			caseInsensitiveSearch: boolean;

			/**
			 * Determines if the section information is displayed in the search results when using the `searchText` property.
			 */
			keepSectionsInSearch: boolean;

			/**
			 * The manner in which the keyboard is dismissed when a drag begins in the list view.
			 */
			keyboardDismissMode: number;

			/**
			 * Array of objects (with `title` and `index` properties) to control the list view index.
			 */
			sectionIndexTitles: ListViewIndexEntry[];

			/**
			 * Style of the scrollbar.
			 */
			scrollIndicatorStyle: number;

			/**
			 * Controls the scroll-to-top gesture.
			 */
			willScrollOnStatusTap: boolean;

			/**
			 * Number of sections in this list view.
			 */
			readonly sectionCount: number;

			/**
			 * Determines whether this list view displays a vertical scroll indicator.
			 */
			showVerticalScrollIndicator: boolean;

			/**
			 * Separator line color between items, as a color name or hex triplet.
			 */
			separatorColor: string;

			/**
			 * The insets for list view separators (applies to all cells).
			 */
			separatorInsets: any;

			/**
			 * Separator style constant.
			 */
			separatorStyle: number;

			/**
			 * Style of the list view.
			 */
			style: number;

			/**
			 * The insets for the table view header and footer.
			 */
			tableSeparatorInsets: any;

			/**
			 * The insets for the list view header and footer.
			 */
			listSeparatorInsets: any;

			/**
			 * The insets for list view cells (applies to all cells).
			 */
			rowSeparatorInsets: any;

			/**
			 * A Boolean indicating whether the underlying content is dimmed during a search.
			 */
			dimBackgroundForSearch: boolean;

			/**
			 * The background color of the search results (iOS-only).
			 */
			resultsBackgroundColor: string;

			/**
			 * Separator line color between rows inside search results,
			 * as a color name or hex triplet (iOS-only).
			 */
			resultsSeparatorColor: string;

			/**
			 * The separator style of the search results (iOS-only).
			 */
			resultsSeparatorStyle: number;

			/**
			 * The insets for search results separators (applies to all cells & iOS-only).
			 */
			resultsSeparatorInsets: any;

			/**
			 * Returns the selected list view items.
			 */
			selectedItems: ListItemEventType[];

			/**
			 * Scrolls to a specific item.
			 */
			scrollToItem(sectionIndex: number, itemIndex: number, animation?: ListViewAnimationProperties): void;

			/**
			 * Deselects a specific item.
			 */
			deselectItem(sectionIndex: number, itemIndex: number): void;

			/**
			 * Appends a single section or an array of sections to the end of the list.
			 */
			appendSection(section: Titanium.UI.ListSection, animation?: ListViewAnimationProperties): void;

			/**
			 * Appends a single section or an array of sections to the end of the list.
			 */
			appendSection(section: ReadonlyArray<Titanium.UI.ListSection>, animation?: ListViewAnimationProperties): void;

			/**
			 * Deletes an existing section.
			 */
			deleteSectionAt(sectionIndex: number, animation?: ListViewAnimationProperties): void;

			/**
			 * Inserts a section or an array of sections at a specific index.
			 */
			insertSectionAt(sectionIndex: number, section: Titanium.UI.ListSection, animation?: ListViewAnimationProperties): void;

			/**
			 * Inserts a section or an array of sections at a specific index.
			 */
			insertSectionAt(sectionIndex: number, section: ReadonlyArray<Titanium.UI.ListSection>, animation?: ListViewAnimationProperties): void;

			/**
			 * Replaces an existing section.
			 */
			replaceSectionAt(sectionIndex: number, section: Titanium.UI.ListSection, animation?: ListViewAnimationProperties): void;

			/**
			 * Selects an item in the list using the specified item and section indices.
			 */
			selectItem(sectionIndex: number, itemIndex: number): void;

			/**
			 * Sets this list view's content insets.
			 */
			setContentInsets(edgeInsets: ListViewEdgeInsets, animated?: ListViewContentInsetOption): void;

			/**
			 * Sets the value of the content offset of the list view without animation by default.
			 */
			setContentOffset(contentOffset: any): void;

			/**
			 * Sets a reference item in the list view.
			 */
			setMarker(markerProps: ListViewMarkerProps): void;

			/**
			 * Adds a reference item in the list view.
			 */
			addMarker(markerProps: ListViewMarkerProps): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.allowsSelection> property.
			 */
			getAllowsSelection(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.allowsSelection> property.
			 */
			setAllowsSelection(allowsSelection: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.canScroll> property.
			 */
			getCanScroll(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.canScroll> property.
			 */
			setCanScroll(canScroll: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.disableBounce> property.
			 */
			getDisableBounce(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.disableBounce> property.
			 */
			setDisableBounce(disableBounce: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.editing> property.
			 */
			getEditing(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.editing> property.
			 */
			setEditing(editing: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.fastScroll> property.
			 */
			getFastScroll(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.fastScroll> property.
			 */
			setFastScroll(fastScroll: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.allowsSelectionDuringEditing> property.
			 */
			getAllowsSelectionDuringEditing(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.allowsSelectionDuringEditing> property.
			 */
			setAllowsSelectionDuringEditing(allowsSelectionDuringEditing: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.allowsMultipleSelectionDuringEditing> property.
			 */
			getAllowsMultipleSelectionDuringEditing(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.allowsMultipleSelectionDuringEditing> property.
			 */
			setAllowsMultipleSelectionDuringEditing(allowsMultipleSelectionDuringEditing: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.lazyLoadingEnabled> property.
			 */
			getLazyLoadingEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.lazyLoadingEnabled> property.
			 */
			setLazyLoadingEnabled(lazyLoadingEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.pruneSectionsOnEdit> property.
			 */
			getPruneSectionsOnEdit(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.pruneSectionsOnEdit> property.
			 */
			setPruneSectionsOnEdit(pruneSectionsOnEdit: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.templates> property.
			 */
			getTemplates(): any;

			/**
			 * Sets the value of the <Titanium.UI.ListView.templates> property.
			 */
			setTemplates(templates: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.sections> property.
			 */
			getSections(): Titanium.UI.ListSection[];

			/**
			 * Sets the value of the <Titanium.UI.ListView.sections> property.
			 */
			setSections(sections: ReadonlyArray<Titanium.UI.ListSection>): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.defaultItemTemplate> property.
			 */
			getDefaultItemTemplate(): string | number;

			/**
			 * Sets the value of the <Titanium.UI.ListView.defaultItemTemplate> property.
			 */
			setDefaultItemTemplate(defaultItemTemplate: string): void;

			/**
			 * Sets the value of the <Titanium.UI.ListView.defaultItemTemplate> property.
			 */
			setDefaultItemTemplate(defaultItemTemplate: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.separatorHeight> property.
			 */
			getSeparatorHeight(): string | number;

			/**
			 * Sets the value of the <Titanium.UI.ListView.separatorHeight> property.
			 */
			setSeparatorHeight(separatorHeight: string): void;

			/**
			 * Sets the value of the <Titanium.UI.ListView.separatorHeight> property.
			 */
			setSeparatorHeight(separatorHeight: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.footerDividersEnabled> property.
			 */
			getFooterDividersEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.footerDividersEnabled> property.
			 */
			setFooterDividersEnabled(footerDividersEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.footerTitle> property.
			 */
			getFooterTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListView.footerTitle> property.
			 */
			setFooterTitle(footerTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.footerView> property.
			 */
			getFooterView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.ListView.footerView> property.
			 */
			setFooterView(footerView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.headerDividersEnabled> property.
			 */
			getHeaderDividersEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.headerDividersEnabled> property.
			 */
			setHeaderDividersEnabled(headerDividersEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.headerTitle> property.
			 */
			getHeaderTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListView.headerTitle> property.
			 */
			setHeaderTitle(headerTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.headerView> property.
			 */
			getHeaderView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.ListView.headerView> property.
			 */
			setHeaderView(headerView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.pullView> property.
			 */
			getPullView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.ListView.pullView> property.
			 */
			setPullView(pullView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.refreshControl> property.
			 */
			getRefreshControl(): Titanium.UI.RefreshControl;

			/**
			 * Sets the value of the <Titanium.UI.ListView.refreshControl> property.
			 */
			setRefreshControl(refreshControl: Titanium.UI.RefreshControl): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.searchView> property.
			 */
			getSearchView(): Titanium.UI.SearchBar | Titanium.UI.Android.SearchView;

			/**
			 * Sets the value of the <Titanium.UI.ListView.searchView> property.
			 */
			setSearchView(searchView: Titanium.UI.SearchBar): void;

			/**
			 * Sets the value of the <Titanium.UI.ListView.searchView> property.
			 */
			setSearchView(searchView: Titanium.UI.Android.SearchView): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.searchText> property.
			 */
			getSearchText(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListView.searchText> property.
			 */
			setSearchText(searchText: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.caseInsensitiveSearch> property.
			 */
			getCaseInsensitiveSearch(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.caseInsensitiveSearch> property.
			 */
			setCaseInsensitiveSearch(caseInsensitiveSearch: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.keepSectionsInSearch> property.
			 */
			getKeepSectionsInSearch(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.keepSectionsInSearch> property.
			 */
			setKeepSectionsInSearch(keepSectionsInSearch: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.keyboardDismissMode> property.
			 */
			getKeyboardDismissMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.ListView.keyboardDismissMode> property.
			 */
			setKeyboardDismissMode(keyboardDismissMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.sectionIndexTitles> property.
			 */
			getSectionIndexTitles(): ListViewIndexEntry[];

			/**
			 * Sets the value of the <Titanium.UI.ListView.sectionIndexTitles> property.
			 */
			setSectionIndexTitles(sectionIndexTitles: ReadonlyArray<ListViewIndexEntry>): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.scrollIndicatorStyle> property.
			 */
			getScrollIndicatorStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.ListView.scrollIndicatorStyle> property.
			 */
			setScrollIndicatorStyle(scrollIndicatorStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.willScrollOnStatusTap> property.
			 */
			getWillScrollOnStatusTap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.willScrollOnStatusTap> property.
			 */
			setWillScrollOnStatusTap(willScrollOnStatusTap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.sectionCount> property.
			 */
			getSectionCount(): number;

			/**
			 * Gets the value of the <Titanium.UI.ListView.showVerticalScrollIndicator> property.
			 */
			getShowVerticalScrollIndicator(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.showVerticalScrollIndicator> property.
			 */
			setShowVerticalScrollIndicator(showVerticalScrollIndicator: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.separatorColor> property.
			 */
			getSeparatorColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListView.separatorColor> property.
			 */
			setSeparatorColor(separatorColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.separatorInsets> property.
			 */
			getSeparatorInsets(): any;

			/**
			 * Sets the value of the <Titanium.UI.ListView.separatorInsets> property.
			 */
			setSeparatorInsets(separatorInsets: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.separatorStyle> property.
			 */
			getSeparatorStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.ListView.separatorStyle> property.
			 */
			setSeparatorStyle(separatorStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.ListView.style> property.
			 */
			setStyle(style: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.tableSeparatorInsets> property.
			 */
			getTableSeparatorInsets(): any;

			/**
			 * Sets the value of the <Titanium.UI.ListView.tableSeparatorInsets> property.
			 */
			setTableSeparatorInsets(tableSeparatorInsets: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.listSeparatorInsets> property.
			 */
			getListSeparatorInsets(): any;

			/**
			 * Sets the value of the <Titanium.UI.ListView.listSeparatorInsets> property.
			 */
			setListSeparatorInsets(listSeparatorInsets: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.rowSeparatorInsets> property.
			 */
			getRowSeparatorInsets(): any;

			/**
			 * Sets the value of the <Titanium.UI.ListView.rowSeparatorInsets> property.
			 */
			setRowSeparatorInsets(rowSeparatorInsets: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.dimBackgroundForSearch> property.
			 */
			getDimBackgroundForSearch(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ListView.dimBackgroundForSearch> property.
			 */
			setDimBackgroundForSearch(dimBackgroundForSearch: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.resultsBackgroundColor> property.
			 */
			getResultsBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListView.resultsBackgroundColor> property.
			 */
			setResultsBackgroundColor(resultsBackgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.resultsSeparatorColor> property.
			 */
			getResultsSeparatorColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ListView.resultsSeparatorColor> property.
			 */
			setResultsSeparatorColor(resultsSeparatorColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.resultsSeparatorStyle> property.
			 */
			getResultsSeparatorStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.ListView.resultsSeparatorStyle> property.
			 */
			setResultsSeparatorStyle(resultsSeparatorStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.resultsSeparatorInsets> property.
			 */
			getResultsSeparatorInsets(): any;

			/**
			 * Sets the value of the <Titanium.UI.ListView.resultsSeparatorInsets> property.
			 */
			setResultsSeparatorInsets(resultsSeparatorInsets: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ListView.selectedItems> property.
			 */
			getSelectedItems(): ListItemEventType[];

			/**
			 * Sets the value of the <Titanium.UI.ListView.selectedItems> property.
			 */
			setSelectedItems(selectedItems: ReadonlyArray<ListItemEventType>): void;

		}
		/**
		 * A control that displays an image composited with a background image or color.
		 */
		interface MaskedImage extends Titanium.UI.View {
			/**
			 * Image drawn as the background image.
			 */
			mask: string;

			/**
			 * Image drawn as the Foreground image.
			 */
			image: string;

			/**
			 * Blend mode to use to combine layers.
			 */
			mode: number;

			/**
			 * Color to combine with the image, as a color name or hex triplet.
			 */
			tint: string;

			/**
			 * Gets the value of the <Titanium.UI.MaskedImage.mask> property.
			 */
			getMask(): string;

			/**
			 * Sets the value of the <Titanium.UI.MaskedImage.mask> property.
			 */
			setMask(mask: string): void;

			/**
			 * Gets the value of the <Titanium.UI.MaskedImage.image> property.
			 */
			getImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.MaskedImage.image> property.
			 */
			setImage(image: string): void;

			/**
			 * Gets the value of the <Titanium.UI.MaskedImage.mode> property.
			 */
			getMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.MaskedImage.mode> property.
			 */
			setMode(mode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.MaskedImage.tint> property.
			 */
			getTint(): string;

			/**
			 * Sets the value of the <Titanium.UI.MaskedImage.tint> property.
			 */
			setTint(tint: string): void;

		}
		/**
		 * The 2D Matrix is an object for holding values for an affine transformation matrix.
		 */
		interface Matrix2D extends Titanium.Proxy {
			/**
			 * The entry at position [1,1] in the matrix.
			 */
			a: number;

			/**
			 * The entry at position [1,2] in the matrix.
			 */
			b: number;

			/**
			 * The entry at position [2,1] in the matrix.
			 */
			c: number;

			/**
			 * The entry at position [2,2] in the matrix.
			 */
			d: number;

			/**
			 * The entry at position [3,1] in the matrix.
			 */
			tx: number;

			/**
			 * The entry at position [3,2] in the matrix.
			 */
			ty: number;

			/**
			 * Returns a matrix constructed by inverting this matrix.
			 */
			invert(): Titanium.UI.Matrix2D;

			/**
			 * Returns a matrix constructed by combining two existing matrices.
			 */
			multiply(t2: Titanium.UI.Matrix2D): Titanium.UI.Matrix2D;

			/**
			 * Returns a matrix constructed by rotating this matrix.
			 */
			rotate(angle: number, toAngle?: number): Titanium.UI.Matrix2D;

			/**
			 * Returns a `Matrix2D` object that specifies a scaling animation from one scale to another.
			 */
			scale(sx: number, sy: number, toSx?: number, toSy?: number): Titanium.UI.Matrix2D;

			/**
			 * Returns a matrix constructed by applying a translation transform to this matrix.
			 */
			translate(tx: number, ty: number): Titanium.UI.Matrix2D;

			/**
			 * Gets the value of the <Titanium.UI.Matrix2D.a> property.
			 */
			getA(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix2D.a> property.
			 */
			setA(a: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix2D.b> property.
			 */
			getB(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix2D.b> property.
			 */
			setB(b: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix2D.c> property.
			 */
			getC(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix2D.c> property.
			 */
			setC(c: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix2D.d> property.
			 */
			getD(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix2D.d> property.
			 */
			setD(d: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix2D.tx> property.
			 */
			getTx(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix2D.tx> property.
			 */
			setTx(tx: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix2D.ty> property.
			 */
			getTy(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix2D.ty> property.
			 */
			setTy(ty: number): void;

		}
		/**
		 * The 3D Matrix is an object for holding values for a 3D affine transform.
		 */
		interface Matrix3D extends Titanium.Proxy {
			/**
			 * The entry at position [1,1] in the matrix.
			 */
			m11: number;

			/**
			 * The entry at position [1,2] in the matrix.
			 */
			m12: number;

			/**
			 * The entry at position [1,3] in the matrix.
			 */
			m13: number;

			/**
			 * The entry at position [1,4] in the matrix.
			 */
			m14: number;

			/**
			 * The entry at position [2,1] in the matrix.
			 */
			m21: number;

			/**
			 * The entry at position [2,2] in the matrix.
			 */
			m22: number;

			/**
			 * The entry at position [2,3] in the matrix.
			 */
			m23: number;

			/**
			 * The entry at position [2,4] in the matrix.
			 */
			m24: number;

			/**
			 * The entry at position [3,1] in the matrix.
			 */
			m31: number;

			/**
			 * The entry at position [3,2] in the matrix.
			 */
			m32: number;

			/**
			 * The entry at position [3,3] in the matrix.
			 */
			m33: number;

			/**
			 * The entry at position [3,4] in the matrix.
			 */
			m34: number;

			/**
			 * The entry at position [4,1] in the matrix.
			 */
			m41: number;

			/**
			 * The entry at position [4,2] in the matrix.
			 */
			m42: number;

			/**
			 * The entry at position [4,3] in the matrix.
			 */
			m43: number;

			/**
			 * The entry at position [4,4] in the matrix.
			 */
			m44: number;

			/**
			 * Returns a matrix constructed by inverting this matrix.
			 */
			invert(): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by combining two existing matrix.
			 */
			multiply(t2: Titanium.UI.Matrix3D): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by rotating this matrix.
			 */
			rotate(angle: number, x: number, y: number, z: number): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by scaling this matrix.
			 */
			scale(sx: number, sy: number, sz: number): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by translating an existing matrix.
			 */
			translate(tx: number, ty: number, tz: number): Titanium.UI.Matrix3D;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m11> property.
			 */
			getM11(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m11> property.
			 */
			setM11(m11: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m12> property.
			 */
			getM12(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m12> property.
			 */
			setM12(m12: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m13> property.
			 */
			getM13(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m13> property.
			 */
			setM13(m13: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m14> property.
			 */
			getM14(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m14> property.
			 */
			setM14(m14: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m21> property.
			 */
			getM21(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m21> property.
			 */
			setM21(m21: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m22> property.
			 */
			getM22(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m22> property.
			 */
			setM22(m22: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m23> property.
			 */
			getM23(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m23> property.
			 */
			setM23(m23: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m24> property.
			 */
			getM24(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m24> property.
			 */
			setM24(m24: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m31> property.
			 */
			getM31(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m31> property.
			 */
			setM31(m31: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m32> property.
			 */
			getM32(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m32> property.
			 */
			setM32(m32: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m33> property.
			 */
			getM33(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m33> property.
			 */
			setM33(m33: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m34> property.
			 */
			getM34(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m34> property.
			 */
			setM34(m34: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m41> property.
			 */
			getM41(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m41> property.
			 */
			setM41(m41: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m42> property.
			 */
			getM42(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m42> property.
			 */
			setM42(m42: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m43> property.
			 */
			getM43(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m43> property.
			 */
			setM43(m43: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Matrix3D.m44> property.
			 */
			getM44(): number;

			/**
			 * Sets the value of the <Titanium.UI.Matrix3D.m44> property.
			 */
			setM44(m44: number): void;

		}
		/**
		 * A `NavigationWindow` implements a specialized view that manages the navigation of hierarchical
		 * content.
		 */
		interface NavigationWindow extends Titanium.UI.View {
			/**
			 * For lightweight windows, this property returns undefined.
			 * For heavyweight windows, this property contains a reference to the
			 * Android Activity object associated with this window.
			 */
			readonly activity: Titanium.Android.Activity;

			/**
			 * Boolean value indicating if the application should exit when the Android
			 * Back button is pressed while the window is being shown or when the window
			 * is closed programmatically.
			 */
			exitOnClose: boolean;

			/**
			 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
			 */
			extendEdges: number[];

			/**
			 * Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.
			 */
			flagSecure: boolean;

			/**
			 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
			 */
			includeOpaqueBars: boolean;

			/**
			 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
			 */
			autoAdjustScrollViewInsets: boolean;

			/**
			 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
			 */
			extendSafeArea: boolean;

			/**
			 * Boolean value indicating if the window is fullscreen.
			 */
			fullscreen: boolean;

			/**
			 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
			 */
			homeIndicatorAutoHidden: boolean;

			/**
			 * Set this to true to hide the navigation bar on swipe.
			 */
			hidesBarsOnSwipe: boolean;

			/**
			 * Set this to true to hide the navigation bar on tap.
			 */
			hidesBarsOnTap: boolean;

			/**
			 * Set this to true to hide the navigation bar when the keyboard appears.
			 */
			hidesBarsWhenKeyboardAppears: boolean;

			/**
			 * Set this to true to hide the back button of navigation bar.
			 */
			hidesBackButton: boolean;

			/**
			 * A Boolean value indicating whether the title should be displayed in a large format.
			 */
			largeTitleEnabled: string;

			/**
			 * The mode to use when displaying the title of the navigation bar.
			 */
			largeTitleDisplayMode: number;

			/**
			 * An Array of views to show in the left nav bar area.
			 */
			leftNavButtons: Titanium.UI.View[];

			/**
			 * Indicates to open a modal window or not.
			 */
			modal: boolean;

			/**
			 * The <Titanium.UI.NavigationWindow> instance hosting this window.
			 */
			readonly navigationWindow: Titanium.UI.NavigationWindow;

			/**
			 * Callback function that overrides the default behavior when the user presses the **Back**
			 * button.
			 */
			onBack: (param0: any) => any;

			/**
			 * Array of supported orientation modes, specified using the orientation
			 * constants defined in <Titanium.UI>.
			 */
			orientationModes: number[];

			/**
			 * Current orientation of the window.
			 */
			readonly orientation: number;

			/**
			 * An Array of views to show in the right nav bar area.
			 */
			rightNavButtons: Titanium.UI.View[];

			/**
			 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
			 */
			readonly safeAreaPadding: Dimension;

			/**
			 * Boolean value to enable split action bar.
			 */
			splitActionBar: boolean;

			/**
			 * The status bar style associated with this window.
			 */
			statusBarStyle: number;

			/**
			 * Maintain a sustainable level of performance.
			 */
			sustainedPerformanceMode: boolean;

			/**
			 * Name of the theme to apply to the window.
			 */
			theme: string;

			/**
			 * Title text attributes of the window.
			 */
			titleAttributes: titleAttributesParams;

			/**
			 * Additional flags to set on the Activity Window.
			 */
			windowFlags: number;

			/**
			 * Determines whether a heavyweight window's soft input area (ie software keyboard) is visible
			 * as it receives focus and how the window behaves in order to accomodate it while keeping its
			 * contents in view.
			 */
			windowSoftInputMode: number;

			/**
			 * Set the pixel format for the Activity's Window.
			 */
			windowPixelFormat: number;

			/**
			 * The type of transition used when activity is exiting.
			 */
			activityExitTransition: number;

			/**
			 * The type of transition used when activity is entering.
			 */
			activityEnterTransition: number;

			/**
			 * The type of transition used when returning from a previously started activity.
			 */
			activityReturnTransition: number;

			/**
			 * The type of transition used when reentering to a previously started activity.
			 */
			activityReenterTransition: number;

			/**
			 * The type of exit transition used when animating shared elements between two activities.
			 */
			activitySharedElementExitTransition: number;

			/**
			 * The type of enter transition used when animating shared elements between two activities.
			 */
			activitySharedElementEnterTransition: number;

			/**
			 * The type of return transition used when animating shared elements between two activities.
			 */
			activitySharedElementReturnTransition: number;

			/**
			 * The type of reenter transition used when animating shared elements between two activities.
			 */
			activitySharedElementReenterTransition: number;

			/**
			 * Window to add to this navigation window.
			 */
			window: Titanium.UI.Window;

			/**
			 * Adds a common UI element to participate in window transition animation.
			 */
			addSharedElement(view: any, transitionName: string): void;

			/**
			 * Closes the window.
			 */
			close(params?: any): void;

			/**
			 * Hides the navigation bar.
			 */
			hideNavBar(options?: any): void;

			/**
			 * Opens the window.
			 */
			open(params?: openWindowParams): void;

			/**
			 * Clears all added shared elements.
			 */
			removeAllSharedElements(): void;

			/**
			 * Makes the navigation bar visible.
			 */
			showNavBar(options?: any): void;

			/**
			 * Makes the bottom toolbar visible.
			 */
			showToolbar(options?: any): void;

			/**
			 * Makes the bottom toolbar invisible.
			 */
			hideToolbar(options?: any): void;

			/**
			 * Closes a window and removes it from the navigation window.
			 */
			closeWindow(window: Titanium.UI.Window, options: any): void;

			/**
			 * Opens a window within the navigation window.
			 */
			openWindow(window: Titanium.UI.Window, options: any): void;

			/**
			 * Closes all windows that are currently opened inside the navigation window.
			 */
			popToRootWindow(options: any): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.activity> property.
			 */
			getActivity(): Titanium.Android.Activity;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.exitOnClose> property.
			 */
			getExitOnClose(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.exitOnClose> property.
			 */
			setExitOnClose(exitOnClose: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.extendEdges> property.
			 */
			getExtendEdges(): number[];

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.extendEdges> property.
			 */
			setExtendEdges(extendEdges: ReadonlyArray<number>): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.flagSecure> property.
			 */
			getFlagSecure(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.flagSecure> property.
			 */
			setFlagSecure(flagSecure: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.includeOpaqueBars> property.
			 */
			getIncludeOpaqueBars(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.includeOpaqueBars> property.
			 */
			setIncludeOpaqueBars(includeOpaqueBars: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.autoAdjustScrollViewInsets> property.
			 */
			getAutoAdjustScrollViewInsets(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.autoAdjustScrollViewInsets> property.
			 */
			setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.extendSafeArea> property.
			 */
			getExtendSafeArea(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.extendSafeArea> property.
			 */
			setExtendSafeArea(extendSafeArea: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.fullscreen> property.
			 */
			getFullscreen(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.fullscreen> property.
			 */
			setFullscreen(fullscreen: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.homeIndicatorAutoHidden> property.
			 */
			getHomeIndicatorAutoHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.homeIndicatorAutoHidden> property.
			 */
			setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.hidesBarsOnSwipe> property.
			 */
			getHidesBarsOnSwipe(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.hidesBarsOnSwipe> property.
			 */
			setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.hidesBarsOnTap> property.
			 */
			getHidesBarsOnTap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.hidesBarsOnTap> property.
			 */
			setHidesBarsOnTap(hidesBarsOnTap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.hidesBarsWhenKeyboardAppears> property.
			 */
			getHidesBarsWhenKeyboardAppears(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.hidesBarsWhenKeyboardAppears> property.
			 */
			setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.hidesBackButton> property.
			 */
			getHidesBackButton(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.hidesBackButton> property.
			 */
			setHidesBackButton(hidesBackButton: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.largeTitleEnabled> property.
			 */
			getLargeTitleEnabled(): string;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.largeTitleEnabled> property.
			 */
			setLargeTitleEnabled(largeTitleEnabled: string): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.largeTitleDisplayMode> property.
			 */
			getLargeTitleDisplayMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.largeTitleDisplayMode> property.
			 */
			setLargeTitleDisplayMode(largeTitleDisplayMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.leftNavButtons> property.
			 */
			getLeftNavButtons(): Titanium.UI.View[];

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.leftNavButtons> property.
			 */
			setLeftNavButtons(leftNavButtons: any[]): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.modal> property.
			 */
			getModal(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.modal> property.
			 */
			setModal(modal: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.navigationWindow> property.
			 */
			getNavigationWindow(): Titanium.UI.NavigationWindow;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.onBack> property.
			 */
			getOnBack(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.onBack> property.
			 */
			setOnBack(onBack: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.orientationModes> property.
			 */
			getOrientationModes(): number[];

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.orientationModes> property.
			 */
			setOrientationModes(orientationModes: ReadonlyArray<number>): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.orientation> property.
			 */
			getOrientation(): number;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.rightNavButtons> property.
			 */
			getRightNavButtons(): Titanium.UI.View[];

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.rightNavButtons> property.
			 */
			setRightNavButtons(rightNavButtons: any[]): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.safeAreaPadding> property.
			 */
			getSafeAreaPadding(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.splitActionBar> property.
			 */
			getSplitActionBar(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.splitActionBar> property.
			 */
			setSplitActionBar(splitActionBar: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.statusBarStyle> property.
			 */
			getStatusBarStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.statusBarStyle> property.
			 */
			setStatusBarStyle(statusBarStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.sustainedPerformanceMode> property.
			 */
			getSustainedPerformanceMode(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.sustainedPerformanceMode> property.
			 */
			setSustainedPerformanceMode(sustainedPerformanceMode: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.theme> property.
			 */
			getTheme(): string;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.theme> property.
			 */
			setTheme(theme: string): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.titleAttributes> property.
			 */
			getTitleAttributes(): titleAttributesParams;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.titleAttributes> property.
			 */
			setTitleAttributes(titleAttributes: titleAttributesParams): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.windowFlags> property.
			 */
			getWindowFlags(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.windowFlags> property.
			 */
			setWindowFlags(windowFlags: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.windowSoftInputMode> property.
			 */
			getWindowSoftInputMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.windowSoftInputMode> property.
			 */
			setWindowSoftInputMode(windowSoftInputMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.windowPixelFormat> property.
			 */
			getWindowPixelFormat(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.windowPixelFormat> property.
			 */
			setWindowPixelFormat(windowPixelFormat: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.activityExitTransition> property.
			 */
			getActivityExitTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.activityExitTransition> property.
			 */
			setActivityExitTransition(activityExitTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.activityEnterTransition> property.
			 */
			getActivityEnterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.activityEnterTransition> property.
			 */
			setActivityEnterTransition(activityEnterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.activityReturnTransition> property.
			 */
			getActivityReturnTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.activityReturnTransition> property.
			 */
			setActivityReturnTransition(activityReturnTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.activityReenterTransition> property.
			 */
			getActivityReenterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.activityReenterTransition> property.
			 */
			setActivityReenterTransition(activityReenterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.activitySharedElementExitTransition> property.
			 */
			getActivitySharedElementExitTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.activitySharedElementExitTransition> property.
			 */
			setActivitySharedElementExitTransition(activitySharedElementExitTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.activitySharedElementEnterTransition> property.
			 */
			getActivitySharedElementEnterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.activitySharedElementEnterTransition> property.
			 */
			setActivitySharedElementEnterTransition(activitySharedElementEnterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.activitySharedElementReturnTransition> property.
			 */
			getActivitySharedElementReturnTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.activitySharedElementReturnTransition> property.
			 */
			setActivitySharedElementReturnTransition(activitySharedElementReturnTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.activitySharedElementReenterTransition> property.
			 */
			getActivitySharedElementReenterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.activitySharedElementReenterTransition> property.
			 */
			setActivitySharedElementReenterTransition(activitySharedElementReenterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.NavigationWindow.window> property.
			 */
			getWindow(): Titanium.UI.Window;

			/**
			 * Sets the value of the <Titanium.UI.NavigationWindow.window> property.
			 */
			setWindow(window: Titanium.UI.Window): void;

		}
		/**
		 * A toast notification.
		 */
		interface Notification extends Titanium.Proxy {
			/**
			 * Notification text to display.
			 */
			message: string;

			/**
			 * Determines how long the notification stays on screen.
			 */
			duration: number;

			/**
			 * Determines the location at which the notification should appear on the screen.
			 */
			gravity: number;

			/**
			 * X offset from the default position, in pixels.
			 */
			xOffset: number;

			/**
			 * Y offset from the default position, in pixels.
			 */
			yOffset: number;

			/**
			 * Horizontal placement of the notification, *as a fraction of the screen width*.
			 */
			horizontalMargin: number;

			/**
			 * Vertical placement of the notifcation, *as a fraction of the screen height*.
			 */
			verticalMargin: number;

			/**
			 * Show the notification.
			 */
			show(): void;

			/**
			 * Gets the value of the <Titanium.UI.Notification.message> property.
			 */
			getMessage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Notification.message> property.
			 */
			setMessage(message: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Notification.duration> property.
			 */
			getDuration(): number;

			/**
			 * Sets the value of the <Titanium.UI.Notification.duration> property.
			 */
			setDuration(duration: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Notification.gravity> property.
			 */
			getGravity(): number;

			/**
			 * Sets the value of the <Titanium.UI.Notification.gravity> property.
			 */
			setGravity(gravity: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Notification.xOffset> property.
			 */
			getXOffset(): number;

			/**
			 * Sets the value of the <Titanium.UI.Notification.xOffset> property.
			 */
			setXOffset(xOffset: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Notification.yOffset> property.
			 */
			getYOffset(): number;

			/**
			 * Sets the value of the <Titanium.UI.Notification.yOffset> property.
			 */
			setYOffset(yOffset: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Notification.horizontalMargin> property.
			 */
			getHorizontalMargin(): number;

			/**
			 * Sets the value of the <Titanium.UI.Notification.horizontalMargin> property.
			 */
			setHorizontalMargin(horizontalMargin: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Notification.verticalMargin> property.
			 */
			getVerticalMargin(): number;

			/**
			 * Sets the value of the <Titanium.UI.Notification.verticalMargin> property.
			 */
			setVerticalMargin(verticalMargin: number): void;

		}
		/**
		 * An option dialog is a modal view that includes a message and one or more option items positioned
		 * in the middle of the display on Android and at the bottom edge on iOS. On Android, buttons may
		 * be added below the options.
		 */
		interface OptionDialog extends Titanium.UI.View {
			/**
			 * View to load inside the message area, to create a custom layout.
			 */
			androidView: Titanium.UI.View;

			/**
			 * List of button names.
			 */
			buttonNames: string[];

			/**
			 * Index to define the cancel option.
			 */
			cancel: number;

			/**
			 * Index to define the destructive option, indicated by a visual cue when rendered.
			 */
			destructive: number;

			/**
			 * List of option names to display in the dialog.
			 */
			options: string[];

			/**
			 * Boolean value indicating if the option dialog should have an opaque background.
			 */
			opaquebackground: boolean;

			/**
			 * Boolean value indicating if the option dialog should only be cancelled by user gesture or by hide method.
			 */
			persistent: boolean;

			/**
			 * Defines the default selected option.
			 */
			selectedIndex: number;

			/**
			 * Title of the dialog.
			 */
			title: string;

			/**
			 * Key identifying a string in the locale file to use for the title text.
			 */
			titleid: string;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.androidView> property.
			 */
			getAndroidView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.androidView> property.
			 */
			setAndroidView(androidView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.buttonNames> property.
			 */
			getButtonNames(): string[];

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.buttonNames> property.
			 */
			setButtonNames(buttonNames: ReadonlyArray<string>): void;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.cancel> property.
			 */
			getCancel(): number;

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.cancel> property.
			 */
			setCancel(cancel: number): void;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.destructive> property.
			 */
			getDestructive(): number;

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.destructive> property.
			 */
			setDestructive(destructive: number): void;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.options> property.
			 */
			getOptions(): string[];

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.options> property.
			 */
			setOptions(options: ReadonlyArray<string>): void;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.opaquebackground> property.
			 */
			getOpaquebackground(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.opaquebackground> property.
			 */
			setOpaquebackground(opaquebackground: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.persistent> property.
			 */
			getPersistent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.persistent> property.
			 */
			setPersistent(persistent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.selectedIndex> property.
			 */
			getSelectedIndex(): number;

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.selectedIndex> property.
			 */
			setSelectedIndex(selectedIndex: number): void;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.UI.OptionDialog.titleid> property.
			 */
			getTitleid(): string;

			/**
			 * Sets the value of the <Titanium.UI.OptionDialog.titleid> property.
			 */
			setTitleid(titleid: string): void;

		}
		/**
		 * A control used to select one or more fixed values.
		 */
		interface Picker extends Titanium.UI.View {
			/**
			 * Columns used for this picker, as an array of <Titanium.UI.PickerColumn> objects.
			 */
			columns: Titanium.UI.PickerColumn[];

			/**
			 * Duration in milliseconds used for a Countdown Timer picker.
			 */
			countDownDuration: number;

			/**
			 * Sets the text color of date- and time-pickers.
			 */
			dateTimeColor: string;

			/**
			 * Determines whether the Time pickers display in 24-hour or 12-hour clock format.
			 */
			format24: boolean;

			/**
			 * Locale used when displaying Date and Time picker values.
			 */
			locale: string;

			/**
			 * Maximum date displayed when a Date picker is in use.
			 */
			maxDate: Date;

			/**
			 * Minimum date displayed when a Date picker is in use.
			 */
			minDate: Date;

			/**
			 * Interval in minutes displayed when one of the Time types of pickers is in use.
			 */
			minuteInterval: number;

			/**
			 * Determines whether the visual selection indicator is shown.
			 */
			selectionIndicator: boolean;

			/**
			 * Determines whether calling the method `setSelectedRow` opens when called
			 */
			selectionOpens: boolean;

			/**
			 * Determines the type of picker displayed
			 */
			type: number;

			/**
			 * Determines whether the non-native Android control, with a spinning wheel that looks and
			 * behaves like the iOS picker, is invoked rather than the default native "dropdown" style.
			 */
			useSpinner: boolean;

			/**
			 * Creates a native Android control for creating a Time Spinner with Type `Ti.UI.PICKER_TYPE_TIME`.
			 * This is invoked rather than the default native "dropdown" style.
			 */
			nativeSpinner: boolean;

			/**
			 * Date and time value for Date and Time pickers.
			 */
			value: Date;

			/**
			 * Number of visible rows to display. This is only applicable to a plain picker and when the
			 * `useSpinner` is `true`.
			 */
			visibleItems: number;

			/**
			 * Determines whether the calenderView is visible.
			 */
			calendarViewShown: boolean;

			/**
			 * Font to use for text.
			 */
			font: Font;

			/**
			 * Gets the selected row for a column, or `null` if none exists.
			 */
			getSelectedRow(index: number): Titanium.UI.PickerRow;

			/**
			 * Repopulates values for a column.
			 */
			reloadColumn(column: Titanium.UI.PickerColumn): void;

			/**
			 * Selects a column's row.
			 */
			setSelectedRow(column: number, row: number, animated?: boolean): void;

			/**
			 * Sets the date and time value property for Date pickers.
			 */
			setValue(date: any, suppressEvent: boolean): Titanium.UI.PickerRow;

			/**
			 * Shows Date picker as a modal dialog.
			 */
			showDatePickerDialog(dictObj: any): void;

			/**
			 * Shows Time picker as a modal dialog.
			 */
			showTimePickerDialog(dictObj: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.columns> property.
			 */
			getColumns(): Titanium.UI.PickerColumn[];

			/**
			 * Sets the value of the <Titanium.UI.Picker.columns> property.
			 */
			setColumns(columns: ReadonlyArray<Titanium.UI.PickerColumn>): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.countDownDuration> property.
			 */
			getCountDownDuration(): number;

			/**
			 * Sets the value of the <Titanium.UI.Picker.countDownDuration> property.
			 */
			setCountDownDuration(countDownDuration: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.dateTimeColor> property.
			 */
			getDateTimeColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Picker.dateTimeColor> property.
			 */
			setDateTimeColor(dateTimeColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.format24> property.
			 */
			getFormat24(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Picker.format24> property.
			 */
			setFormat24(format24: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.locale> property.
			 */
			getLocale(): string;

			/**
			 * Sets the value of the <Titanium.UI.Picker.locale> property.
			 */
			setLocale(locale: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.maxDate> property.
			 */
			getMaxDate(): Date;

			/**
			 * Sets the value of the <Titanium.UI.Picker.maxDate> property.
			 */
			setMaxDate(maxDate: Date): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.minDate> property.
			 */
			getMinDate(): Date;

			/**
			 * Sets the value of the <Titanium.UI.Picker.minDate> property.
			 */
			setMinDate(minDate: Date): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.minuteInterval> property.
			 */
			getMinuteInterval(): number;

			/**
			 * Sets the value of the <Titanium.UI.Picker.minuteInterval> property.
			 */
			setMinuteInterval(minuteInterval: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.selectionIndicator> property.
			 */
			getSelectionIndicator(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Picker.selectionIndicator> property.
			 */
			setSelectionIndicator(selectionIndicator: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.selectionOpens> property.
			 */
			getSelectionOpens(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Picker.selectionOpens> property.
			 */
			setSelectionOpens(selectionOpens: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.type> property.
			 */
			getType(): number;

			/**
			 * Sets the value of the <Titanium.UI.Picker.type> property.
			 */
			setType(type: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.useSpinner> property.
			 */
			getUseSpinner(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Picker.useSpinner> property.
			 */
			setUseSpinner(useSpinner: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.nativeSpinner> property.
			 */
			getNativeSpinner(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Picker.nativeSpinner> property.
			 */
			setNativeSpinner(nativeSpinner: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.value> property.
			 */
			getValue(): Date;

			/**
			 * Gets the value of the <Titanium.UI.Picker.visibleItems> property.
			 */
			getVisibleItems(): number;

			/**
			 * Sets the value of the <Titanium.UI.Picker.visibleItems> property.
			 */
			setVisibleItems(visibleItems: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.calendarViewShown> property.
			 */
			getCalendarViewShown(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Picker.calendarViewShown> property.
			 */
			setCalendarViewShown(calendarViewShown: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Picker.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.Picker.font> property.
			 */
			setFont(font: Font): void;

		}
		/**
		 * A picker column, representing a selectable group of items in a <Titanium.UI.Picker>.
		 */
		interface PickerColumn extends Titanium.Proxy {
			/**
			 * Number of rows in this column.
			 */
			readonly rowCount: number;

			/**
			 * Rows of this column.
			 */
			readonly rows: Titanium.UI.PickerRow[];

			/**
			 * Font to use for text.
			 */
			font: Font;

			/**
			 * Adds a row to this column.
			 */
			addRow(row: Titanium.UI.PickerRow): void;

			/**
			 * Removes a row from this column.
			 */
			removeRow(row: Titanium.UI.PickerRow): void;

			/**
			 * Gets the value of the <Titanium.UI.PickerColumn.rowCount> property.
			 */
			getRowCount(): number;

			/**
			 * Gets the value of the <Titanium.UI.PickerColumn.rows> property.
			 */
			getRows(): Titanium.UI.PickerRow[];

			/**
			 * Gets the value of the <Titanium.UI.PickerColumn.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.PickerColumn.font> property.
			 */
			setFont(font: Font): void;

		}
		/**
		 * A picker row, representing a selectable item in a <Titanium.UI.Picker>.
		 */
		interface PickerRow extends Titanium.UI.View {
			/**
			 * Color of the item text, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Font to use for the item text.
			 */
			font: Font;

			/**
			 * Item text.
			 */
			title: string;

			/**
			 * Gets the value of the <Titanium.UI.PickerRow.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.PickerRow.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.PickerRow.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.PickerRow.font> property.
			 */
			setFont(font: Font): void;

			/**
			 * Gets the value of the <Titanium.UI.PickerRow.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.PickerRow.title> property.
			 */
			setTitle(title: string): void;

		}
		/**
		 * A progress bar.
		 */
		interface ProgressBar extends Titanium.UI.View {
			/**
			 * Color of the progress bar message, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Font for the progress bar text.
			 */
			font: Font;

			/**
			 * Maximum value of the progress bar.
			 */
			max: number;

			/**
			 * Progress bar text.
			 */
			message: string;

			/**
			 * The color shown for the portion of the progress bar that is not filled.
			 */
			trackTintColor: string;

			/**
			 * Minimum value of the progress bar.
			 */
			min: number;

			/**
			 * Style of the progress bar.
			 */
			style: number;

			/**
			 * Current value of the progress bar.
			 */
			value: number;

			/**
			 * Gets the value of the <Titanium.UI.ProgressBar.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ProgressBar.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ProgressBar.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.ProgressBar.font> property.
			 */
			setFont(font: Font): void;

			/**
			 * Gets the value of the <Titanium.UI.ProgressBar.max> property.
			 */
			getMax(): number;

			/**
			 * Sets the value of the <Titanium.UI.ProgressBar.max> property.
			 */
			setMax(max: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ProgressBar.message> property.
			 */
			getMessage(): string;

			/**
			 * Sets the value of the <Titanium.UI.ProgressBar.message> property.
			 */
			setMessage(message: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ProgressBar.trackTintColor> property.
			 */
			getTrackTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ProgressBar.trackTintColor> property.
			 */
			setTrackTintColor(trackTintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ProgressBar.min> property.
			 */
			getMin(): number;

			/**
			 * Sets the value of the <Titanium.UI.ProgressBar.min> property.
			 */
			setMin(min: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ProgressBar.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.ProgressBar.style> property.
			 */
			setStyle(style: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ProgressBar.value> property.
			 */
			getValue(): number;

			/**
			 * Sets the value of the <Titanium.UI.ProgressBar.value> property.
			 */
			setValue(value: number): void;

		}
		/**
		 * The RefreshControl is a representation of the native iOS
		 * [UIRefreshControl](https://developer.apple.com/documentation/uikit/uirefreshcontrol)
		 * and Android [SwipeRefreshLayout](https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html).
		 */
		interface RefreshControl extends Titanium.Proxy {
			/**
			 * The attributed title of the control.
			 */
			title: Titanium.UI.AttributedString;

			/**
			 * The tint color for the refresh control, as a color name or hex triplet.
			 */
			tintColor: string;

			/**
			 * Tells the control that a refresh operation was started programmatically.
			 */
			beginRefreshing(): void;

			/**
			 * Tells the control that a refresh operation has ended.
			 */
			endRefreshing(): void;

			/**
			 * Gets the value of the <Titanium.UI.RefreshControl.title> property.
			 */
			getTitle(): Titanium.UI.AttributedString;

			/**
			 * Sets the value of the <Titanium.UI.RefreshControl.title> property.
			 */
			setTitle(title: Titanium.UI.AttributedString): void;

			/**
			 * Gets the value of the <Titanium.UI.RefreshControl.tintColor> property.
			 */
			getTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.RefreshControl.tintColor> property.
			 */
			setTintColor(tintColor: string): void;

		}
		/**
		 * A view that contains a horizontally and/or vertically-scrollable region of content.
		 */
		interface ScrollView extends Titanium.UI.View {
			/**
			 * Determines whether this scroll view can cancel subview touches in order to scroll instead.
			 */
			canCancelEvents: boolean;

			/**
			 * Height of the scrollable region.
			 */
			contentHeight: number | string;

			/**
			 * X and Y coordinates to which to reposition the top-left point of the scrollable region.
			 */
			contentOffset: any;

			/**
			 * Width of the scrollable region.
			 */
			contentWidth: number | string;

			/**
			 * The deceleration rate of the ScrollView.
			 */
			decelerationRate: number;

			/**
			 * Determines whether scroll bounce of the scrollable region is enabled.
			 */
			disableBounce: boolean;

			/**
			 * Determines whether horizontal scroll bounce of the scrollable region is enabled.
			 */
			horizontalBounce: boolean;

			/**
			 * The manner in which the keyboard is dismissed when a drag begins in the scroll view.
			 */
			keyboardDismissMode: number;

			/**
			 * Maximum scaling factor of the scrollable region and its content.
			 */
			maxZoomScale: number;

			/**
			 * Minimum scaling factor of the scrollable region and its content.
			 */
			minZoomScale: number;

			/**
			 * Determines the behavior when the user overscolls the view.
			 */
			overScrollMode: number;

			/**
			 * View positioned above the first row that is only revealed when the user drags the scroll view contents down.
			 */
			refreshControl: Titanium.UI.RefreshControl;

			/**
			 * Controls whether the scroll-to-top gesture is effective.
			 */
			scrollsToTop: boolean;

			/**
			 * Style of the scrollbar.
			 */
			scrollIndicatorStyle: number;

			/**
			 * Limits the direction of the scrollable region, overriding the deduced setting. Set to
			 * `horizontal` or `vertical`.
			 */
			scrollType: string;

			/**
			 * Determines whether scrolling is enabled for the view.
			 */
			scrollingEnabled: boolean;

			/**
			 * Determines whether the horizontal scroll indicator is visible.
			 */
			showHorizontalScrollIndicator: boolean;

			/**
			 * Determines whether the vertical scroll indicator is visible.
			 */
			showVerticalScrollIndicator: boolean;

			/**
			 * Determines whether vertical scroll bounce of the scrollable region is enabled.
			 */
			verticalBounce: boolean;

			/**
			 * Scaling factor of the scroll view's content.
			 */
			zoomScale: number;

			/**
			 * Moves the specified coordinate of the scrollable region into the viewable area.
			 */
			scrollTo(x: number, y: number, animation?: ScrollViewAnimationProperties): void;

			/**
			 * Sets the value of the [contentOffset](Titanium.UI.ScrollView.contentOffset) property.
			 */
			setContentOffset(contentOffsetXY: any, animated?: contentOffsetOption): void;

			/**
			 * Sets the value of the [zoomScale](Titanium.UI.ScrollView.zoomScale) property.
			 */
			setZoomScale(zoomScale: number, animated?: zoomScaleOption): void;

			/**
			 * Moves the end of the scrollable region into the viewable area.
			 */
			scrollToBottom(): void;

			/**
			 * Moves the top of the scrollable region into the viewable area.
			 */
			scrollToTop(): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.canCancelEvents> property.
			 */
			getCanCancelEvents(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.canCancelEvents> property.
			 */
			setCanCancelEvents(canCancelEvents: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.contentHeight> property.
			 */
			getContentHeight(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.contentHeight> property.
			 */
			setContentHeight(contentHeight: number): void;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.contentHeight> property.
			 */
			setContentHeight(contentHeight: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.contentOffset> property.
			 */
			getContentOffset(): any;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.contentWidth> property.
			 */
			getContentWidth(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.contentWidth> property.
			 */
			setContentWidth(contentWidth: number): void;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.contentWidth> property.
			 */
			setContentWidth(contentWidth: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.decelerationRate> property.
			 */
			getDecelerationRate(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.decelerationRate> property.
			 */
			setDecelerationRate(decelerationRate: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.disableBounce> property.
			 */
			getDisableBounce(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.disableBounce> property.
			 */
			setDisableBounce(disableBounce: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.horizontalBounce> property.
			 */
			getHorizontalBounce(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.horizontalBounce> property.
			 */
			setHorizontalBounce(horizontalBounce: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.keyboardDismissMode> property.
			 */
			getKeyboardDismissMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.keyboardDismissMode> property.
			 */
			setKeyboardDismissMode(keyboardDismissMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.maxZoomScale> property.
			 */
			getMaxZoomScale(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.maxZoomScale> property.
			 */
			setMaxZoomScale(maxZoomScale: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.minZoomScale> property.
			 */
			getMinZoomScale(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.minZoomScale> property.
			 */
			setMinZoomScale(minZoomScale: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.overScrollMode> property.
			 */
			getOverScrollMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.overScrollMode> property.
			 */
			setOverScrollMode(overScrollMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.refreshControl> property.
			 */
			getRefreshControl(): Titanium.UI.RefreshControl;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.refreshControl> property.
			 */
			setRefreshControl(refreshControl: Titanium.UI.RefreshControl): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.scrollsToTop> property.
			 */
			getScrollsToTop(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.scrollsToTop> property.
			 */
			setScrollsToTop(scrollsToTop: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.scrollIndicatorStyle> property.
			 */
			getScrollIndicatorStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.scrollIndicatorStyle> property.
			 */
			setScrollIndicatorStyle(scrollIndicatorStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.scrollType> property.
			 */
			getScrollType(): string;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.scrollType> property.
			 */
			setScrollType(scrollType: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.scrollingEnabled> property.
			 */
			getScrollingEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.scrollingEnabled> property.
			 */
			setScrollingEnabled(scrollingEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.showHorizontalScrollIndicator> property.
			 */
			getShowHorizontalScrollIndicator(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.showHorizontalScrollIndicator> property.
			 */
			setShowHorizontalScrollIndicator(showHorizontalScrollIndicator: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.showVerticalScrollIndicator> property.
			 */
			getShowVerticalScrollIndicator(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.showVerticalScrollIndicator> property.
			 */
			setShowVerticalScrollIndicator(showVerticalScrollIndicator: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.verticalBounce> property.
			 */
			getVerticalBounce(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollView.verticalBounce> property.
			 */
			setVerticalBounce(verticalBounce: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollView.zoomScale> property.
			 */
			getZoomScale(): number;

		}
		/**
		 * A view that encapsulates a horizontally-scrolling set of child views, known as pages, navigable
		 * using its built-in horizontal swipe gestures.
		 */
		interface ScrollableView extends Titanium.UI.View {
			/**
			 * Number of pages to cache (pre-render).
			 */
			cacheSize: number;

			/**
			 * Index of the active page.
			 */
			currentPage: number;

			/**
			 * Color for the current page of the paging control, as a color name or hex triplet.
			 */
			currentPageIndicatorColor: string;

			/**
			 * Determines whether page bouncing effect is disabled.
			 */
			disableBounce: boolean;

			/**
			 * Determines the behavior when the user overscolls the view.
			 */
			overScrollMode: number;

			/**
			 * Color of the paging control, as a color name or hex triplet.
			 */
			pagingControlColor: string;

			/**
			 * Height of the paging control, in pixels.
			 */
			pagingControlHeight: number;

			/**
			 * Color of the paging control, as a color name or hex triplet.
			 */
			pageIndicatorColor: string;

			/**
			 * Determines whether the paging control is visible.
			 */
			showPagingControl: boolean;

			/**
			 * Number of milliseconds to wait before hiding the paging control.
			 */
			pagingControlTimeout: number;

			/**
			 * Alpha value of the paging control.
			 */
			pagingControlAlpha: number;

			/**
			 * Determines whether the paging control is displayed at the top or bottom of the view.
			 */
			pagingControlOnTop: boolean;

			/**
			 * Determines whether the paging control is added as an overlay to the view.
			 */
			overlayEnabled: boolean;

			/**
			 * Determines whether scrolling is enabled for the view.
			 */
			scrollingEnabled: boolean;

			/**
			 * Sets the pages within this Scrollable View.
			 */
			views: Titanium.UI.View[];

			/**
			 * Determines whether the previous and next pages are clipped, so that they are not visible
			 * adjacent to the current page.
			 */
			clipViews: boolean;

			/**
			 * Sets the region where this view responds to gestures.
			 */
			hitRect: Dimension;

			/**
			 * The padding applied to the scrollable view.
			 */
			padding: ViewPadding;

			/**
			 * Inserts views at the specified position in the [views](Titanium.UI.ScrollableView.views) array.
			 */
			insertViewsAt(position: number, views: any[]): void;

			/**
			 * Adds a new page to this Scrollable View.
			 */
			addView(view: any): void;

			/**
			 * Sets the current page to the next consecutive page in <Titanium.UI.ScrollableView.views>.
			 */
			moveNext(): void;

			/**
			 * Sets the current page to the previous consecutive page in <Titanium.UI.ScrollableView.views>.
			 */
			movePrevious(): void;

			/**
			 * Removes an existing page from this Scrollable View.
			 */
			removeView(view: number): void;

			/**
			 * Removes an existing page from this Scrollable View.
			 */
			removeView(view: any): void;

			/**
			 * Scrolls to the specified page in <Titanium.UI.ScrollableView.views>.
			 */
			scrollToView(view: number): void;

			/**
			 * Scrolls to the specified page in <Titanium.UI.ScrollableView.views>.
			 */
			scrollToView(view: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.cacheSize> property.
			 */
			getCacheSize(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.cacheSize> property.
			 */
			setCacheSize(cacheSize: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.currentPage> property.
			 */
			getCurrentPage(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.currentPage> property.
			 */
			setCurrentPage(currentPage: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.currentPageIndicatorColor> property.
			 */
			getCurrentPageIndicatorColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.currentPageIndicatorColor> property.
			 */
			setCurrentPageIndicatorColor(currentPageIndicatorColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.disableBounce> property.
			 */
			getDisableBounce(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.disableBounce> property.
			 */
			setDisableBounce(disableBounce: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.overScrollMode> property.
			 */
			getOverScrollMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.overScrollMode> property.
			 */
			setOverScrollMode(overScrollMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlColor> property.
			 */
			getPagingControlColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlColor> property.
			 */
			setPagingControlColor(pagingControlColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlHeight> property.
			 */
			getPagingControlHeight(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlHeight> property.
			 */
			setPagingControlHeight(pagingControlHeight: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.pageIndicatorColor> property.
			 */
			getPageIndicatorColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.pageIndicatorColor> property.
			 */
			setPageIndicatorColor(pageIndicatorColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.showPagingControl> property.
			 */
			getShowPagingControl(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.showPagingControl> property.
			 */
			setShowPagingControl(showPagingControl: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlTimeout> property.
			 */
			getPagingControlTimeout(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlTimeout> property.
			 */
			setPagingControlTimeout(pagingControlTimeout: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlAlpha> property.
			 */
			getPagingControlAlpha(): number;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlAlpha> property.
			 */
			setPagingControlAlpha(pagingControlAlpha: number): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlOnTop> property.
			 */
			getPagingControlOnTop(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlOnTop> property.
			 */
			setPagingControlOnTop(pagingControlOnTop: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.overlayEnabled> property.
			 */
			getOverlayEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.overlayEnabled> property.
			 */
			setOverlayEnabled(overlayEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.scrollingEnabled> property.
			 */
			getScrollingEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.scrollingEnabled> property.
			 */
			setScrollingEnabled(scrollingEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.views> property.
			 */
			getViews(): Titanium.UI.View[];

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.views> property.
			 */
			setViews(views: any[]): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.clipViews> property.
			 */
			getClipViews(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.clipViews> property.
			 */
			setClipViews(clipViews: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.hitRect> property.
			 */
			getHitRect(): Dimension;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.hitRect> property.
			 */
			setHitRect(hitRect: Dimension): void;

			/**
			 * Gets the value of the <Titanium.UI.ScrollableView.padding> property.
			 */
			getPadding(): ViewPadding;

			/**
			 * Sets the value of the <Titanium.UI.ScrollableView.padding> property.
			 */
			setPadding(padding: ViewPadding): void;

		}
		/**
		 * A specialized text field for entering search text.
		 */
		interface SearchBar extends Titanium.UI.View {
			/**
			 * Determines how text is capitalized during typing.
			 */
			autocapitalization: number;

			/**
			 * Determines whether the text in the search bar is autocorrected during typing.
			 */
			autocorrect: boolean;

			/**
			 * Bar color of the search bar view, as a color name or hex triplet.
			 */
			barColor: string;

			/**
			 * The title of the cancel button when the search bar field is focused.
			 */
			cancelButtonTitle: string;

			/**
			 * Color of the text in this text field, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Background image of the text field, specified as a local file path or URL.
			 */
			fieldBackgroundImage: string;

			/**
			 * Background image of the text field in disabled state, specified as a local file path or URL.
			 */
			fieldBackgroundDisabledImage: string;

			/**
			 * Text to show when the search bar field is not focused.
			 */
			hintText: string;

			/**
			 * Hint text color to display when the field is empty.
			 */
			hintTextColor: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [hintText](Titanium.UI.SearchBar.hintText) property.
			 */
			hinttextid: string;

			/**
			 * Keyboard type constant to use when the field is focused.
			 */
			keyboardType: number;

			/**
			 * Determines the appearance of the keyboard to be displayed the field is focused.
			 */
			keyboardAppearance: number;

			/**
			 * Single line of text displayed at the top of the search bar.
			 */
			prompt: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [prompt](Titanium.UI.SearchBar.prompt) property.
			 */
			promptid: string;

			/**
			 * Determines whether the bookmark button is displayed.
			 */
			showBookmark: boolean;

			/**
			 * Determines whether the cancel button is displayed.
			 */
			showCancel: boolean;

			/**
			 * Determines the style of the search bar.
			 */
			style: number;

			/**
			 * Value of the search bar.
			 */
			value: string;

			/**
			 * Causes the search bar to lose focus.
			 */
			blur(): void;

			/**
			 * Causes the search bar to gain focus.
			 */
			focus(): void;

			/**
			 * Shows or hides the cancel button.
			 */
			setShowCancel(showCancel: boolean, animated?: any): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.autocapitalization> property.
			 */
			getAutocapitalization(): number;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.autocapitalization> property.
			 */
			setAutocapitalization(autocapitalization: number): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.autocorrect> property.
			 */
			getAutocorrect(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.autocorrect> property.
			 */
			setAutocorrect(autocorrect: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.barColor> property.
			 */
			getBarColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.barColor> property.
			 */
			setBarColor(barColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.cancelButtonTitle> property.
			 */
			getCancelButtonTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.cancelButtonTitle> property.
			 */
			setCancelButtonTitle(cancelButtonTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.fieldBackgroundImage> property.
			 */
			getFieldBackgroundImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.fieldBackgroundImage> property.
			 */
			setFieldBackgroundImage(fieldBackgroundImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.fieldBackgroundDisabledImage> property.
			 */
			getFieldBackgroundDisabledImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.fieldBackgroundDisabledImage> property.
			 */
			setFieldBackgroundDisabledImage(fieldBackgroundDisabledImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.hintText> property.
			 */
			getHintText(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.hintText> property.
			 */
			setHintText(hintText: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.hintTextColor> property.
			 */
			getHintTextColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.hintTextColor> property.
			 */
			setHintTextColor(hintTextColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.hinttextid> property.
			 */
			getHinttextid(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.hinttextid> property.
			 */
			setHinttextid(hinttextid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.keyboardType> property.
			 */
			getKeyboardType(): number;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.keyboardType> property.
			 */
			setKeyboardType(keyboardType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.keyboardAppearance> property.
			 */
			getKeyboardAppearance(): number;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.keyboardAppearance> property.
			 */
			setKeyboardAppearance(keyboardAppearance: number): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.prompt> property.
			 */
			getPrompt(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.prompt> property.
			 */
			setPrompt(prompt: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.promptid> property.
			 */
			getPromptid(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.promptid> property.
			 */
			setPromptid(promptid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.showBookmark> property.
			 */
			getShowBookmark(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.showBookmark> property.
			 */
			setShowBookmark(showBookmark: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.showCancel> property.
			 */
			getShowCancel(): boolean;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.style> property.
			 */
			setStyle(style: number): void;

			/**
			 * Gets the value of the <Titanium.UI.SearchBar.value> property.
			 */
			getValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.SearchBar.value> property.
			 */
			setValue(value: string): void;

		}
		/**
		 * An application shortcut.
		 */
		interface ShortcutItem extends Titanium.Proxy {
			/**
			 * Determines shortcut id.
			 */
			id: string;

			/**
			 * Title of the shortcut.
			 */
			title: string;

			/**
			 * Description of the shortcut.
			 */
			description: string;

			/**
			 * Shortcut icon.
			 */
			icon: string | number;

			/**
			 * Allow the shortcut to show.
			 */
			show(): void;

			/**
			 * Hide the shortcut.
			 */
			hide(): void;

			/**
			 * Pin shortcut to launcher.
			 */
			pin(): void;

			/**
			 * Gets the value of the <Titanium.UI.ShortcutItem.id> property.
			 */
			getId(): string;

			/**
			 * Sets the value of the <Titanium.UI.ShortcutItem.id> property.
			 */
			setId(id: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ShortcutItem.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.ShortcutItem.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ShortcutItem.description> property.
			 */
			getDescription(): string;

			/**
			 * Sets the value of the <Titanium.UI.ShortcutItem.description> property.
			 */
			setDescription(description: string): void;

			/**
			 * Gets the value of the <Titanium.UI.ShortcutItem.icon> property.
			 */
			getIcon(): string | number;

			/**
			 * Sets the value of the <Titanium.UI.ShortcutItem.icon> property.
			 */
			setIcon(icon: string): void;

			/**
			 * Sets the value of the <Titanium.UI.ShortcutItem.icon> property.
			 */
			setIcon(icon: number): void;

		}
		/**
		 * A slider component with a draggable thumb.
		 */
		interface Slider extends Titanium.UI.View {
			/**
			 * Image URL of the slider left track when in the disabled state.
			 */
			disabledLeftTrackImage: string;

			/**
			 * Image URL of the slider right track when in the disabled state.
			 */
			disabledRightTrackImage: string;

			/**
			 * Image URL of the slider thumb when in the disabled state.
			 */
			disabledThumbImage: string;

			/**
			 * Boolean to indicate the enabled state of the slider.
			 */
			enabled: boolean;

			/**
			 * Image URL of the slider left track when in the highlighted state.
			 */
			highlightedLeftTrackImage: string;

			/**
			 * Image URL of the slider right track when in the highlighted state.
			 */
			highlightedRightTrackImage: string;

			/**
			 * Image URL of the slider thumb when in the highlighted state.
			 */
			highlightedThumbImage: string;

			/**
			 * Image URL of the slider left track.
			 */
			leftTrackImage: string;

			/**
			 * Size of the left end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.
			 */
			leftTrackLeftCap: number;

			/**
			 * Size of the top end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.
			 */
			leftTrackTopCap: number;

			/**
			 * Maximum value of the slider.
			 */
			max: number;

			/**
			 * Upper limit on the slider value that can be selected.
			 */
			maxRange: number;

			/**
			 * Minimum value of the slider.
			 */
			min: number;

			/**
			 * Lower limit on the slider value that can be selected.
			 */
			minRange: number;

			/**
			 * Image URL of the slider right track.
			 */
			rightTrackImage: string;

			/**
			 * Size of the left end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.
			 */
			rightTrackLeftCap: number;

			/**
			 * Size of the top end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.
			 */
			rightTrackTopCap: number;

			/**
			 * Image URL of the slider left track when in the selected state.
			 */
			selectedLeftTrackImage: string;

			/**
			 * Image URL of the slider right track when in the selected state.
			 */
			selectedRightTrackImage: string;

			/**
			 * Image URL of the slider thumb when in the selected state.
			 */
			selectedThumbImage: string;

			/**
			 * Separates the thumbImage from the slider track.
			 */
			splitTrack: boolean;

			/**
			 * Image for the slider thumb.
			 */
			thumbImage: string | Titanium.Blob;

			/**
			 * Current value of the slider.
			 */
			value: string;

			/**
			 * Sets the [value](Titanium.UI.Slider.value) property.
			 */
			setValue(value: number, options?: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.disabledLeftTrackImage> property.
			 */
			getDisabledLeftTrackImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.disabledLeftTrackImage> property.
			 */
			setDisabledLeftTrackImage(disabledLeftTrackImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.disabledRightTrackImage> property.
			 */
			getDisabledRightTrackImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.disabledRightTrackImage> property.
			 */
			setDisabledRightTrackImage(disabledRightTrackImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.disabledThumbImage> property.
			 */
			getDisabledThumbImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.disabledThumbImage> property.
			 */
			setDisabledThumbImage(disabledThumbImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.enabled> property.
			 */
			getEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Slider.enabled> property.
			 */
			setEnabled(enabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.highlightedLeftTrackImage> property.
			 */
			getHighlightedLeftTrackImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.highlightedLeftTrackImage> property.
			 */
			setHighlightedLeftTrackImage(highlightedLeftTrackImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.highlightedRightTrackImage> property.
			 */
			getHighlightedRightTrackImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.highlightedRightTrackImage> property.
			 */
			setHighlightedRightTrackImage(highlightedRightTrackImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.highlightedThumbImage> property.
			 */
			getHighlightedThumbImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.highlightedThumbImage> property.
			 */
			setHighlightedThumbImage(highlightedThumbImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.leftTrackImage> property.
			 */
			getLeftTrackImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.leftTrackImage> property.
			 */
			setLeftTrackImage(leftTrackImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.leftTrackLeftCap> property.
			 */
			getLeftTrackLeftCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.Slider.leftTrackLeftCap> property.
			 */
			setLeftTrackLeftCap(leftTrackLeftCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.leftTrackTopCap> property.
			 */
			getLeftTrackTopCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.Slider.leftTrackTopCap> property.
			 */
			setLeftTrackTopCap(leftTrackTopCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.max> property.
			 */
			getMax(): number;

			/**
			 * Sets the value of the <Titanium.UI.Slider.max> property.
			 */
			setMax(max: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.maxRange> property.
			 */
			getMaxRange(): number;

			/**
			 * Sets the value of the <Titanium.UI.Slider.maxRange> property.
			 */
			setMaxRange(maxRange: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.min> property.
			 */
			getMin(): number;

			/**
			 * Sets the value of the <Titanium.UI.Slider.min> property.
			 */
			setMin(min: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.minRange> property.
			 */
			getMinRange(): number;

			/**
			 * Sets the value of the <Titanium.UI.Slider.minRange> property.
			 */
			setMinRange(minRange: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.rightTrackImage> property.
			 */
			getRightTrackImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.rightTrackImage> property.
			 */
			setRightTrackImage(rightTrackImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.rightTrackLeftCap> property.
			 */
			getRightTrackLeftCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.Slider.rightTrackLeftCap> property.
			 */
			setRightTrackLeftCap(rightTrackLeftCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.rightTrackTopCap> property.
			 */
			getRightTrackTopCap(): number;

			/**
			 * Sets the value of the <Titanium.UI.Slider.rightTrackTopCap> property.
			 */
			setRightTrackTopCap(rightTrackTopCap: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.selectedLeftTrackImage> property.
			 */
			getSelectedLeftTrackImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.selectedLeftTrackImage> property.
			 */
			setSelectedLeftTrackImage(selectedLeftTrackImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.selectedRightTrackImage> property.
			 */
			getSelectedRightTrackImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.selectedRightTrackImage> property.
			 */
			setSelectedRightTrackImage(selectedRightTrackImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.selectedThumbImage> property.
			 */
			getSelectedThumbImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Slider.selectedThumbImage> property.
			 */
			setSelectedThumbImage(selectedThumbImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.splitTrack> property.
			 */
			getSplitTrack(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Slider.splitTrack> property.
			 */
			setSplitTrack(splitTrack: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.thumbImage> property.
			 */
			getThumbImage(): string | Titanium.Blob;

			/**
			 * Sets the value of the <Titanium.UI.Slider.thumbImage> property.
			 */
			setThumbImage(thumbImage: string): void;

			/**
			 * Sets the value of the <Titanium.UI.Slider.thumbImage> property.
			 */
			setThumbImage(thumbImage: Titanium.Blob): void;

			/**
			 * Gets the value of the <Titanium.UI.Slider.value> property.
			 */
			getValue(): string;

		}
		/**
		 * An on/off switch control.
		 */
		interface Switch extends Titanium.UI.View {
			/**
			 * Determines if there is animation when the switch value changes.
			 */
			animated: boolean;

			/**
			 * Color to use for switch text, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Determines whether the switch is enabled.
			 */
			enabled: boolean;

			/**
			 * Font to use for the switch text.
			 */
			font: Font;

			/**
			 * Style of the switch.
			 */
			style: number;

			/**
			 * Horizontal text alignment of the switch title.
			 */
			textAlign: string | number;

			/**
			 * Text to display next to the switch, when the checkbox style is in use.
			 */
			title: string;

			/**
			 * Text to display on the switch in its "off" state, when the toggle button style is in use.
			 */
			titleOff: string;

			/**
			 * Text to display on the switch in its "on" state, when the toggle button style is in use.
			 */
			titleOn: string;

			/**
			 * The color used to tint the appearance of the switch when it is turned on.
			 */
			onTintColor: string;

			/**
			 * The color used to tint the appearance of the thumb.
			 */
			thumbTintColor: string;

			/**
			 * Indicates whether the switch has been turned on or off by the user. May also be set
			 * programmatically.
			 */
			value: boolean;

			/**
			 * Vertical alignment for the text field.
			 */
			verticalAlign: number | string;

			/**
			 * Gets the value of the <Titanium.UI.Switch.animated> property.
			 */
			getAnimated(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Switch.animated> property.
			 */
			setAnimated(animated: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Switch.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.enabled> property.
			 */
			getEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Switch.enabled> property.
			 */
			setEnabled(enabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.Switch.font> property.
			 */
			setFont(font: Font): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.Switch.style> property.
			 */
			setStyle(style: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.textAlign> property.
			 */
			getTextAlign(): string | number;

			/**
			 * Sets the value of the <Titanium.UI.Switch.textAlign> property.
			 */
			setTextAlign(textAlign: string): void;

			/**
			 * Sets the value of the <Titanium.UI.Switch.textAlign> property.
			 */
			setTextAlign(textAlign: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.Switch.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.titleOff> property.
			 */
			getTitleOff(): string;

			/**
			 * Sets the value of the <Titanium.UI.Switch.titleOff> property.
			 */
			setTitleOff(titleOff: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.titleOn> property.
			 */
			getTitleOn(): string;

			/**
			 * Sets the value of the <Titanium.UI.Switch.titleOn> property.
			 */
			setTitleOn(titleOn: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.onTintColor> property.
			 */
			getOnTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Switch.onTintColor> property.
			 */
			setOnTintColor(onTintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.thumbTintColor> property.
			 */
			getThumbTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Switch.thumbTintColor> property.
			 */
			setThumbTintColor(thumbTintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.value> property.
			 */
			getValue(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Switch.value> property.
			 */
			setValue(value: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Switch.verticalAlign> property.
			 */
			getVerticalAlign(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.Switch.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: number): void;

			/**
			 * Sets the value of the <Titanium.UI.Switch.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: string): void;

		}
		/**
		 * A tab instance for a [TabGroup](Titanium.UI.TabGroup).
		 */
		interface Tab extends Titanium.UI.View {
			/**
			 * `true` if this tab is active, `false` if it is not.
			 */
			active: boolean;

			/**
			 * Icon URL for this tab when active.
			 */
			activeIcon: string;

			/**
			 * Badge value for this tab. `null` indicates no badge.
			 */
			badge: string;

			/**
			 * If this item displays a badge, this color will be used for the badge's background.
			 * If set to null, the default background color will be used instead.
			 */
			badgeColor: string;

			/**
			 * Icon URL for this tab.
			 */
			icon: string;

			/**
			 * The icon inset or outset for each edge.
			 */
			iconInsets: TabIconInsets;

			/**
			 * Defines if the icon property of the tab must be used as a mask.
			 */
			iconIsMask: boolean;

			/**
			 * Defines if the active icon property of the tab must be used as a mask.
			 */
			activeIconIsMask: boolean;

			/**
			 * Title for this tab.
			 */
			title: string;

			/**
			 * Key identifying a string from the locale file to use for the tab title. Only one of `title` or `titleid` should be specified.
			 */
			titleid: string;

			/**
			 * Defines the color of the title of tab when it's inactive.
			 */
			titleColor: string;

			/**
			 * Defines the color of the title of tab when it's active.
			 */
			activeTitleColor: string;

			/**
			 * Root-level tab window.  All tabs must have at least one root-level tab window.
			 */
			window: Titanium.UI.Window;

			/**
			 * Opens a new window.
			 */
			open(window: Titanium.UI.Window, options?: any): void;

			/**
			 * Closes the top-level window for this tab.
			 */
			close(window: Titanium.UI.Window, options?: any): void;

			/**
			 * Sets the root window that appears in the tab.
			 */
			setWindow(window: Titanium.UI.Window): void;

			/**
			 * Closes all windows that are currently opened inside the tab.
			 */
			popToRootWindow(options: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.active> property.
			 */
			getActive(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Tab.active> property.
			 */
			setActive(active: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.activeIcon> property.
			 */
			getActiveIcon(): string;

			/**
			 * Sets the value of the <Titanium.UI.Tab.activeIcon> property.
			 */
			setActiveIcon(activeIcon: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.badge> property.
			 */
			getBadge(): string;

			/**
			 * Sets the value of the <Titanium.UI.Tab.badge> property.
			 */
			setBadge(badge: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.badgeColor> property.
			 */
			getBadgeColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Tab.badgeColor> property.
			 */
			setBadgeColor(badgeColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.icon> property.
			 */
			getIcon(): string;

			/**
			 * Sets the value of the <Titanium.UI.Tab.icon> property.
			 */
			setIcon(icon: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.iconInsets> property.
			 */
			getIconInsets(): TabIconInsets;

			/**
			 * Sets the value of the <Titanium.UI.Tab.iconInsets> property.
			 */
			setIconInsets(iconInsets: TabIconInsets): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.iconIsMask> property.
			 */
			getIconIsMask(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Tab.iconIsMask> property.
			 */
			setIconIsMask(iconIsMask: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.activeIconIsMask> property.
			 */
			getActiveIconIsMask(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Tab.activeIconIsMask> property.
			 */
			setActiveIconIsMask(activeIconIsMask: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.Tab.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.titleid> property.
			 */
			getTitleid(): string;

			/**
			 * Sets the value of the <Titanium.UI.Tab.titleid> property.
			 */
			setTitleid(titleid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.titleColor> property.
			 */
			getTitleColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Tab.titleColor> property.
			 */
			setTitleColor(titleColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.activeTitleColor> property.
			 */
			getActiveTitleColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Tab.activeTitleColor> property.
			 */
			setActiveTitleColor(activeTitleColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Tab.window> property.
			 */
			getWindow(): Titanium.UI.Window;

		}
		/**
		 * A tabbed group of windows.
		 */
		interface TabGroup extends Titanium.UI.View {
			/**
			 * Reference to the Android Activity object associated with this tab group.
			 */
			readonly activity: Titanium.Android.Activity;

			/**
			 * Title for the back button. This is only valid when the window is a child of a tab.
			 */
			backButtonTitle: string;

			/**
			 * The image to show as the back button. This is only valid when the window is a child of a tab.
			 */
			backButtonTitleImage: string | Titanium.Blob;

			/**
			 * Default navigation bar color (typically for the **More** tab), as a color name or hex triplet.
			 */
			barColor: string;

			/**
			 * Background image for the nav bar, specified as a URL to a local image.
			 */
			barImage: string;

			/**
			 * Boolean value indicating if the application should exit when closing the tab group, whether via Android
			 * back button or the [close](Titanium.UI.TabGroup.close) method.
			 */
			exitOnClose: boolean;

			/**
			 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
			 */
			extendEdges: number[];

			/**
			 * Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.
			 */
			flagSecure: boolean;

			/**
			 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
			 */
			includeOpaqueBars: boolean;

			/**
			 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
			 */
			autoAdjustScrollViewInsets: boolean;

			/**
			 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
			 */
			extendSafeArea: boolean;

			/**
			 * Boolean value indicating if the window is fullscreen.
			 */
			fullscreen: boolean;

			/**
			 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
			 */
			homeIndicatorAutoHidden: boolean;

			/**
			 * Set this to true to hide the shadow image of the navigation bar.
			 */
			hideShadow: boolean;

			/**
			 * Set this to true to hide the navigation bar on swipe.
			 */
			hidesBarsOnSwipe: boolean;

			/**
			 * Set this to true to hide the navigation bar on tap.
			 */
			hidesBarsOnTap: boolean;

			/**
			 * Set this to true to hide the navigation bar when the keyboard appears.
			 */
			hidesBarsWhenKeyboardAppears: boolean;

			/**
			 * Set this to true to hide the back button of navigation bar.
			 */
			hidesBackButton: boolean;

			/**
			 * A Boolean value indicating whether the title should be displayed in a large format.
			 */
			largeTitleEnabled: string;

			/**
			 * The mode to use when displaying the title of the navigation bar.
			 */
			largeTitleDisplayMode: number;

			/**
			 * View to show in the left nav bar area.
			 */
			leftNavButton: Titanium.UI.View;

			/**
			 * An Array of views to show in the left nav bar area.
			 */
			leftNavButtons: Titanium.UI.View[];

			/**
			 * Indicates to open a modal window or not.
			 */
			modal: boolean;

			/**
			 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
			 */
			navBarHidden: boolean;

			/**
			 * The tintColor to apply to the navigation bar (typically for the **More** tab).
			 */
			navTintColor: string;

			/**
			 * The <Titanium.UI.NavigationWindow> instance hosting this window.
			 */
			readonly navigationWindow: Titanium.UI.NavigationWindow;

			/**
			 * Callback function that overrides the default behavior when the user presses the **Back**
			 * button.
			 */
			onBack: (param0: any) => any;

			/**
			 * Array of supported orientation modes, specified using the orientation
			 * constants defined in <Titanium.UI>.
			 */
			orientationModes: number[];

			/**
			 * Current orientation of the window.
			 */
			readonly orientation: number;

			/**
			 * View to show in the right nav bar area.
			 */
			rightNavButton: Titanium.UI.View;

			/**
			 * An Array of views to show in the right nav bar area.
			 */
			rightNavButtons: Titanium.UI.View[];

			/**
			 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
			 */
			readonly safeAreaPadding: Dimension;

			/**
			 * Image of the shadow placed between the tab bar and the content area.
			 */
			shadowImage: string;

			/**
			 * Boolean value to enable split action bar.
			 */
			splitActionBar: boolean;

			/**
			 * The status bar style associated with this window.
			 */
			statusBarStyle: number;

			/**
			 * Maintain a sustainable level of performance.
			 */
			sustainedPerformanceMode: boolean;

			/**
			 * Boolean value indicating if the user should be able to close a window using a swipe gesture.
			 */
			swipeToClose: boolean;

			/**
			 * Boolean value indicating if the tab bar should be hidden.
			 */
			tabBarHidden: boolean;

			/**
			 * Name of the theme to apply to the window.
			 */
			theme: string;

			/**
			 * Title for this tabGroup.
			 */
			title: string;

			/**
			 * Title text attributes of the window to be applied on the **More** tab.
			 */
			titleAttributes: titleAttributesParams;

			/**
			 * View to show in the title area of the nav bar.
			 */
			titleControl: Titanium.UI.View;

			/**
			 * Image to show in the title area of the nav bar, specified as a local file path or URL.
			 */
			titleImage: string;

			/**
			 * Title prompt for the window.
			 */
			titlePrompt: string;

			/**
			 * Key identifying a string from the locale file to use for the window title.
			 */
			titleid: string;

			/**
			 * Key identifying a string from the locale file to use for the window title prompt.
			 */
			titlepromptid: string;

			/**
			 * Array of button objects to show in the window's toolbar.
			 */
			toolbar: any[];

			/**
			 * Use a transition animation when opening or closing windows in a
			 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
			 */
			transitionAnimation: Titanium.Proxy;

			/**
			 * Boolean value indicating if the nav bar (typically for the **More** tab), is translucent.
			 */
			translucent: boolean;

			/**
			 * Loads a JavaScript file from a local URL.
			 */
			url: string;

			/**
			 * Additional flags to set on the Activity Window.
			 */
			windowFlags: number;

			/**
			 * Determines how the tab group is treated when a soft input method (such as a virtual keyboard)
			 * is displayed.
			 */
			windowSoftInputMode: number;

			/**
			 * Set the pixel format for the Activity's Window.
			 */
			windowPixelFormat: number;

			/**
			 * The type of transition used when activity is exiting.
			 */
			activityExitTransition: number;

			/**
			 * The type of transition used when activity is entering.
			 */
			activityEnterTransition: number;

			/**
			 * The type of transition used when returning from a previously started activity.
			 */
			activityReturnTransition: number;

			/**
			 * The type of transition used when reentering to a previously started activity.
			 */
			activityReenterTransition: number;

			/**
			 * The type of exit transition used when animating shared elements between two activities.
			 */
			activitySharedElementExitTransition: number;

			/**
			 * The type of enter transition used when animating shared elements between two activities.
			 */
			activitySharedElementEnterTransition: number;

			/**
			 * The type of return transition used when animating shared elements between two activities.
			 */
			activitySharedElementReturnTransition: number;

			/**
			 * The type of reenter transition used when animating shared elements between two activities.
			 */
			activitySharedElementReenterTransition: number;

			/**
			 * Active tab.
			 */
			activeTab: number | Titanium.UI.Tab;

			/**
			 * Allow the user to reorder tabs in the tab group using the **Edit** button on the **More**
			 * tab.
			 */
			allowUserCustomization: boolean;

			/**
			 * Title for the edit button on the **More** tab.
			 */
			editButtonTitle: string;

			/**
			 * Boolean value indicating if tab navigation can be done by swipes, in addition to tab clicks.
			 */
			swipeable: boolean;

			/**
			 * Boolean value indicating if changing pages by tab clicks is animated.
			 */
			smoothScrollOnTabClick: boolean;

			/**
			 * Tabs managed by the tab group.
			 */
			tabs: Titanium.UI.Tab[];

			/**
			 * Determines whether the BOTTOM_NAVIGATION_VIEW_STYLE uses shiftMode.
			 */
			shiftMode: boolean;

			/**
			 * Property defining which style for the TabGroup to be used.
			 */
			style: number;

			/**
			 * Default background color for inactive tabs, as a color name or hex triplet.
			 */
			tabsBackgroundColor: string;

			/**
			 * The tintColor to apply to the tabs.
			 */
			tabsTintColor: string;

			/**
			 * A Boolean value that indicates whether the tab bar is translucent.
			 */
			tabsTranslucent: boolean;

			/**
			 * Default background image for tabs.
			 */
			tabsBackgroundImage: string;

			/**
			 * Unselected items in this tab group will be tinted with this color. Setting this value to null
			 * indicates that the tab group should use its default value instead.
			 */
			unselectedItemTintColor: string;

			/**
			 * Color applied to active tabs icons, as a color name or hex triplet, where the tab's activeIcon was not defined.
			 */
			activeTabIconTint: string;

			/**
			 * Default background selected color for tabs, as a color name or hex triplet.
			 */
			tabsBackgroundSelectedColor: string;

			/**
			 * Default background image for the active tab.
			 */
			activeTabBackgroundImage: string;

			/**
			 * Adds a common UI element to participate in window transition animation.
			 */
			addSharedElement(view: any, transitionName: string): void;

			/**
			 * Closes the tab group and removes it from the UI.
			 */
			close(params?: any): void;

			/**
			 * Hides the navigation bar.
			 */
			hideNavBar(options?: any): void;

			/**
			 * Hides the tab bar. Must be called before opening the window.
			 */
			hideTabBar(): void;

			/**
			 * Opens the tab group and makes it visible.
			 */
			open(params?: openWindowParams): void;

			/**
			 * Clears all added shared elements.
			 */
			removeAllSharedElements(): void;

			/**
			 * Sets the array of items to show in the window's toolbar.
			 */
			setToolbar(items: ReadonlyArray<any>, params?: windowToolbarParam): void;

			/**
			 * Makes the navigation bar visible.
			 */
			showNavBar(options?: any): void;

			/**
			 * Makes the bottom toolbar visible.
			 */
			showToolbar(options?: any): void;

			/**
			 * Makes the bottom toolbar invisible.
			 */
			hideToolbar(options?: any): void;

			/**
			 * Adds a tab to the tab group.
			 */
			addTab(tab: Titanium.UI.Tab): void;

			/**
			 * Disable (or re-enable) tab navigation. If tab navigation is disabled, the tabs are hidden and
			 * the last selected tab window is shown.
			 */
			disableTabNavigation(disable: boolean): void;

			/**
			 * Gets the currently-active tab.
			 */
			getActiveTab(): Titanium.UI.Tab;

			/**
			 * Removes a tab from the tab group.
			 */
			removeTab(tab: Titanium.UI.Tab): void;

			/**
			 * Selects the currently active tab in a tab group.
			 */
			setActiveTab(indexOrObject: number): void;

			/**
			 * Selects the currently active tab in a tab group.
			 */
			setActiveTab(indexOrObject: Titanium.UI.Tab): void;

			/**
			 * Gets all tabs that are managed by the tab group.
			 */
			getTabs(): Titanium.UI.Tab[];

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activity> property.
			 */
			getActivity(): Titanium.Android.Activity;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.backButtonTitle> property.
			 */
			getBackButtonTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.backButtonTitle> property.
			 */
			setBackButtonTitle(backButtonTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.backButtonTitleImage> property.
			 */
			getBackButtonTitleImage(): string | Titanium.Blob;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.backButtonTitleImage> property.
			 */
			setBackButtonTitleImage(backButtonTitleImage: string): void;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.backButtonTitleImage> property.
			 */
			setBackButtonTitleImage(backButtonTitleImage: Titanium.Blob): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.barColor> property.
			 */
			getBarColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.barColor> property.
			 */
			setBarColor(barColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.barImage> property.
			 */
			getBarImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.barImage> property.
			 */
			setBarImage(barImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.exitOnClose> property.
			 */
			getExitOnClose(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.exitOnClose> property.
			 */
			setExitOnClose(exitOnClose: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.extendEdges> property.
			 */
			getExtendEdges(): number[];

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.extendEdges> property.
			 */
			setExtendEdges(extendEdges: ReadonlyArray<number>): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.flagSecure> property.
			 */
			getFlagSecure(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.flagSecure> property.
			 */
			setFlagSecure(flagSecure: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.includeOpaqueBars> property.
			 */
			getIncludeOpaqueBars(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.includeOpaqueBars> property.
			 */
			setIncludeOpaqueBars(includeOpaqueBars: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.autoAdjustScrollViewInsets> property.
			 */
			getAutoAdjustScrollViewInsets(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.autoAdjustScrollViewInsets> property.
			 */
			setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.extendSafeArea> property.
			 */
			getExtendSafeArea(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.extendSafeArea> property.
			 */
			setExtendSafeArea(extendSafeArea: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.fullscreen> property.
			 */
			getFullscreen(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.fullscreen> property.
			 */
			setFullscreen(fullscreen: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.homeIndicatorAutoHidden> property.
			 */
			getHomeIndicatorAutoHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.homeIndicatorAutoHidden> property.
			 */
			setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.hideShadow> property.
			 */
			getHideShadow(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.hideShadow> property.
			 */
			setHideShadow(hideShadow: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.hidesBarsOnSwipe> property.
			 */
			getHidesBarsOnSwipe(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.hidesBarsOnSwipe> property.
			 */
			setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.hidesBarsOnTap> property.
			 */
			getHidesBarsOnTap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.hidesBarsOnTap> property.
			 */
			setHidesBarsOnTap(hidesBarsOnTap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.hidesBarsWhenKeyboardAppears> property.
			 */
			getHidesBarsWhenKeyboardAppears(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.hidesBarsWhenKeyboardAppears> property.
			 */
			setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.hidesBackButton> property.
			 */
			getHidesBackButton(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.hidesBackButton> property.
			 */
			setHidesBackButton(hidesBackButton: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.largeTitleEnabled> property.
			 */
			getLargeTitleEnabled(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.largeTitleEnabled> property.
			 */
			setLargeTitleEnabled(largeTitleEnabled: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.largeTitleDisplayMode> property.
			 */
			getLargeTitleDisplayMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.largeTitleDisplayMode> property.
			 */
			setLargeTitleDisplayMode(largeTitleDisplayMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.leftNavButton> property.
			 */
			getLeftNavButton(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.leftNavButton> property.
			 */
			setLeftNavButton(leftNavButton: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.leftNavButtons> property.
			 */
			getLeftNavButtons(): Titanium.UI.View[];

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.leftNavButtons> property.
			 */
			setLeftNavButtons(leftNavButtons: any[]): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.modal> property.
			 */
			getModal(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.modal> property.
			 */
			setModal(modal: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.navBarHidden> property.
			 */
			getNavBarHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.navBarHidden> property.
			 */
			setNavBarHidden(navBarHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.navTintColor> property.
			 */
			getNavTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.navTintColor> property.
			 */
			setNavTintColor(navTintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.navigationWindow> property.
			 */
			getNavigationWindow(): Titanium.UI.NavigationWindow;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.onBack> property.
			 */
			getOnBack(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.onBack> property.
			 */
			setOnBack(onBack: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.orientationModes> property.
			 */
			getOrientationModes(): number[];

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.orientationModes> property.
			 */
			setOrientationModes(orientationModes: ReadonlyArray<number>): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.orientation> property.
			 */
			getOrientation(): number;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.rightNavButton> property.
			 */
			getRightNavButton(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.rightNavButton> property.
			 */
			setRightNavButton(rightNavButton: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.rightNavButtons> property.
			 */
			getRightNavButtons(): Titanium.UI.View[];

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.rightNavButtons> property.
			 */
			setRightNavButtons(rightNavButtons: any[]): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.safeAreaPadding> property.
			 */
			getSafeAreaPadding(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.shadowImage> property.
			 */
			getShadowImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.shadowImage> property.
			 */
			setShadowImage(shadowImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.splitActionBar> property.
			 */
			getSplitActionBar(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.splitActionBar> property.
			 */
			setSplitActionBar(splitActionBar: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.statusBarStyle> property.
			 */
			getStatusBarStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.statusBarStyle> property.
			 */
			setStatusBarStyle(statusBarStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.sustainedPerformanceMode> property.
			 */
			getSustainedPerformanceMode(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.sustainedPerformanceMode> property.
			 */
			setSustainedPerformanceMode(sustainedPerformanceMode: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.swipeToClose> property.
			 */
			getSwipeToClose(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.swipeToClose> property.
			 */
			setSwipeToClose(swipeToClose: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.tabBarHidden> property.
			 */
			getTabBarHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.tabBarHidden> property.
			 */
			setTabBarHidden(tabBarHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.theme> property.
			 */
			getTheme(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.theme> property.
			 */
			setTheme(theme: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.titleAttributes> property.
			 */
			getTitleAttributes(): titleAttributesParams;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.titleAttributes> property.
			 */
			setTitleAttributes(titleAttributes: titleAttributesParams): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.titleControl> property.
			 */
			getTitleControl(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.titleControl> property.
			 */
			setTitleControl(titleControl: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.titleImage> property.
			 */
			getTitleImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.titleImage> property.
			 */
			setTitleImage(titleImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.titlePrompt> property.
			 */
			getTitlePrompt(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.titlePrompt> property.
			 */
			setTitlePrompt(titlePrompt: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.titleid> property.
			 */
			getTitleid(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.titleid> property.
			 */
			setTitleid(titleid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.titlepromptid> property.
			 */
			getTitlepromptid(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.titlepromptid> property.
			 */
			setTitlepromptid(titlepromptid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.toolbar> property.
			 */
			getToolbar(): any[];

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.transitionAnimation> property.
			 */
			getTransitionAnimation(): Titanium.Proxy;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.transitionAnimation> property.
			 */
			setTransitionAnimation(transitionAnimation: Titanium.Proxy): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.translucent> property.
			 */
			getTranslucent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.translucent> property.
			 */
			setTranslucent(translucent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.url> property.
			 */
			getUrl(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.url> property.
			 */
			setUrl(url: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.windowFlags> property.
			 */
			getWindowFlags(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.windowFlags> property.
			 */
			setWindowFlags(windowFlags: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.windowSoftInputMode> property.
			 */
			getWindowSoftInputMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.windowSoftInputMode> property.
			 */
			setWindowSoftInputMode(windowSoftInputMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.windowPixelFormat> property.
			 */
			getWindowPixelFormat(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.windowPixelFormat> property.
			 */
			setWindowPixelFormat(windowPixelFormat: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activityExitTransition> property.
			 */
			getActivityExitTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activityExitTransition> property.
			 */
			setActivityExitTransition(activityExitTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activityEnterTransition> property.
			 */
			getActivityEnterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activityEnterTransition> property.
			 */
			setActivityEnterTransition(activityEnterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activityReturnTransition> property.
			 */
			getActivityReturnTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activityReturnTransition> property.
			 */
			setActivityReturnTransition(activityReturnTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activityReenterTransition> property.
			 */
			getActivityReenterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activityReenterTransition> property.
			 */
			setActivityReenterTransition(activityReenterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activitySharedElementExitTransition> property.
			 */
			getActivitySharedElementExitTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activitySharedElementExitTransition> property.
			 */
			setActivitySharedElementExitTransition(activitySharedElementExitTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activitySharedElementEnterTransition> property.
			 */
			getActivitySharedElementEnterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activitySharedElementEnterTransition> property.
			 */
			setActivitySharedElementEnterTransition(activitySharedElementEnterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activitySharedElementReturnTransition> property.
			 */
			getActivitySharedElementReturnTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activitySharedElementReturnTransition> property.
			 */
			setActivitySharedElementReturnTransition(activitySharedElementReturnTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activitySharedElementReenterTransition> property.
			 */
			getActivitySharedElementReenterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activitySharedElementReenterTransition> property.
			 */
			setActivitySharedElementReenterTransition(activitySharedElementReenterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.allowUserCustomization> property.
			 */
			getAllowUserCustomization(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.allowUserCustomization> property.
			 */
			setAllowUserCustomization(allowUserCustomization: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.editButtonTitle> property.
			 */
			getEditButtonTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.editButtonTitle> property.
			 */
			setEditButtonTitle(editButtonTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.swipeable> property.
			 */
			getSwipeable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.swipeable> property.
			 */
			setSwipeable(swipeable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.smoothScrollOnTabClick> property.
			 */
			getSmoothScrollOnTabClick(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.smoothScrollOnTabClick> property.
			 */
			setSmoothScrollOnTabClick(smoothScrollOnTabClick: boolean): void;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.tabs> property.
			 */
			setTabs(tabs: ReadonlyArray<Titanium.UI.Tab>): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.shiftMode> property.
			 */
			getShiftMode(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.shiftMode> property.
			 */
			setShiftMode(shiftMode: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.style> property.
			 */
			setStyle(style: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.tabsBackgroundColor> property.
			 */
			getTabsBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.tabsBackgroundColor> property.
			 */
			setTabsBackgroundColor(tabsBackgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.tabsTintColor> property.
			 */
			getTabsTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.tabsTintColor> property.
			 */
			setTabsTintColor(tabsTintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.tabsTranslucent> property.
			 */
			getTabsTranslucent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.tabsTranslucent> property.
			 */
			setTabsTranslucent(tabsTranslucent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.tabsBackgroundImage> property.
			 */
			getTabsBackgroundImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.tabsBackgroundImage> property.
			 */
			setTabsBackgroundImage(tabsBackgroundImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.unselectedItemTintColor> property.
			 */
			getUnselectedItemTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.unselectedItemTintColor> property.
			 */
			setUnselectedItemTintColor(unselectedItemTintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activeTabIconTint> property.
			 */
			getActiveTabIconTint(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activeTabIconTint> property.
			 */
			setActiveTabIconTint(activeTabIconTint: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.tabsBackgroundSelectedColor> property.
			 */
			getTabsBackgroundSelectedColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.tabsBackgroundSelectedColor> property.
			 */
			setTabsBackgroundSelectedColor(tabsBackgroundSelectedColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TabGroup.activeTabBackgroundImage> property.
			 */
			getActiveTabBackgroundImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.TabGroup.activeTabBackgroundImage> property.
			 */
			setActiveTabBackgroundImage(activeTabBackgroundImage: string): void;

		}
		/**
		 * A button bar that maintains a selected state.
		 */
		interface TabbedBar extends Titanium.UI.View {
			/**
			 * Index of the currently selected button.
			 */
			index: number;

			/**
			 * Array of labels for the tabbed bar.
			 */
			labels: string[] | BarItemType[];

			/**
			 * Style of the tabbed bar.
			 */
			style: number;

			/**
			 * Gets the value of the <Titanium.UI.TabbedBar.index> property.
			 */
			getIndex(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabbedBar.index> property.
			 */
			setIndex(index: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TabbedBar.labels> property.
			 */
			getLabels(): string[] | BarItemType[];

			/**
			 * Sets the value of the <Titanium.UI.TabbedBar.labels> property.
			 */
			setLabels(labels: ReadonlyArray<string>): void;

			/**
			 * Sets the value of the <Titanium.UI.TabbedBar.labels> property.
			 */
			setLabels(labels: ReadonlyArray<BarItemType>): void;

			/**
			 * Gets the value of the <Titanium.UI.TabbedBar.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.TabbedBar.style> property.
			 */
			setStyle(style: number): void;

		}
		/**
		 * A table view is used to present information, organized in sections and rows, in a
		 * vertically-scrolling view.
		 */
		interface TableView extends Titanium.UI.View {
			/**
			 * Determines whether this table's rows can be selected.
			 */
			allowsSelection: boolean;

			/**
			 * Determines whether this table's rows can be selected while editing the table.
			 */
			allowsSelectionDuringEditing: boolean;

			/**
			 * Rows of the table view.
			 */
			data: Titanium.UI.TableViewRow[] | Titanium.UI.TableViewSection[];

			/**
			 * Determines the rows' default editable behavior, which allows them to be deleted by the user
			 * when the table is in `editing` or `moving` mode.
			 */
			editable: boolean;

			/**
			 * Determines whether row editing mode is active.
			 */
			editing: boolean;

			/**
			 * Filter attribute to be used when searching.
			 */
			filterAttribute: string;

			/**
			 * Determines whether the search is limited to the start of the string
			 */
			filterAnchored: boolean;

			/**
			 * Determines whether the search is case insensitive.
			 */
			filterCaseInsensitive: boolean;

			/**
			 * When set to false, the ListView will not draw the divider before the footer view.
			 */
			footerDividersEnabled: boolean;

			/**
			 * Table view footer title.
			 */
			footerTitle: string;

			/**
			 * Max number of row class names.
			 */
			maxClassname: number;

			/**
			 * View positioned above the first row that is only revealed when the user drags the table
			 * contents down.
			 */
			headerPullView: Titanium.UI.View;

			/**
			 * View positioned above the first row that is only revealed when the user drags the list view contents down.
			 */
			refreshControl: Titanium.UI.RefreshControl;

			/**
			 * Determines whether the search field should hide on completion.
			 */
			hideSearchOnSelection: boolean;

			/**
			 * Table view footer as a view that will be rendered instead of a label.
			 */
			footerView: Titanium.UI.View;

			/**
			 * When set to false, the ListView will not draw the divider after the header view.
			 */
			headerDividersEnabled: boolean;

			/**
			 * Table view header title.
			 */
			headerTitle: string;

			/**
			 * Table view header as a view that will be rendered instead of a label.
			 */
			headerView: Titanium.UI.View;

			/**
			 * Array of objects (with `title` and `index` properties) to control the table view index.
			 */
			index: TableViewIndexEntry[];

			/**
			 * Maximum row height for table view rows.
			 */
			maxRowHeight: number;

			/**
			 * Minimum row height for table view rows.
			 */
			minRowHeight: number;

			/**
			 * Determines the rows' default moveable behavior, which allows them to be re-ordered by the
			 * user when the table is in `editing` or `moving` mode.
			 */
			moveable: boolean;

			/**
			 * Determines whether row moving mode is active.
			 */
			moving: boolean;

			/**
			 * Determines the behavior when the user overscrolls the view.
			 */
			overScrollMode: number;

			/**
			 * Default row height for table view rows.
			 */
			rowHeight: number;

			/**
			 * If `true`, the tableview can be scrolled.
			 */
			scrollable: boolean;

			/**
			 * Style of the scrollbar.
			 */
			scrollIndicatorStyle: number;

			/**
			 * Controls whether the scroll-to-top gesture is effective.
			 */
			scrollsToTop: boolean;

			/**
			 * Search field to use for the table view.
			 */
			search: Titanium.UI.SearchBar | Titanium.UI.Android.SearchView;

			/**
			 * A Boolean indicating whether the underlying content is dimmed during a search.
			 */
			dimBackgroundForSearch: boolean;

			/**
			 * Determines whether the [SearchBar](Titanium.UI.SearchBar) or [SearchView](Titanium.UI.Android.SearchView) appears as part of the TableView.
			 */
			searchAsChild: boolean;

			/**
			 * Determines whether the search field is visible.
			 */
			searchHidden: boolean;

			/**
			 * Number of sections in this table view.
			 */
			readonly sectionCount: number;

			/**
			 * Sections of this table.
			 */
			sections: Titanium.UI.TableViewSection[];

			/**
			 * Separator line color between rows, as a color name or hex triplet.
			 */
			separatorColor: string;

			/**
			 * The insets for table view separators (applies to all cells).
			 */
			separatorInsets: any;

			/**
			 * The insets for the table view header and footer.
			 */
			tableSeparatorInsets: any;

			/**
			 * The insets for table view cells (applies to all cells).
			 */
			rowSeparatorInsets: any;

			/**
			 * Separator style constant.
			 */
			separatorStyle: number;

			/**
			 * Determines whether this table view displays a vertical scroll indicator.
			 */
			showVerticalScrollIndicator: boolean;

			/**
			 * Style of the table view, specified using one of the constants from
			 * <Titanium.UI.iOS.TableViewStyle>.
			 */
			style: number;

			/**
			 * The background color of the search results (iOS-only).
			 */
			resultsBackgroundColor: string;

			/**
			 * Separator line color between rows inside search results,
			 * as a color name or hex triplet (iOS-only).
			 */
			resultsSeparatorColor: string;

			/**
			 * The separator style of the search results (iOS-only).
			 */
			resultsSeparatorStyle: number;

			/**
			 * The insets for search results separators (applies to all cells & iOS-only).
			 */
			resultsSeparatorInsets: any;

			/**
			 * Appends a single row or an array of rows to the end of the table.
			 */
			appendRow(row: any, animation?: TableViewAnimationProperties): void;

			/**
			 * Appends a single section or an array of sections to the end of the table.
			 */
			appendSection(section: any, animation?: TableViewAnimationProperties): void;

			/**
			 * Deletes an existing row.
			 */
			deleteRow(row: number, animation?: TableViewAnimationProperties): void;

			/**
			 * Deletes an existing row.
			 */
			deleteRow(row: Titanium.UI.TableViewRow, animation?: TableViewAnimationProperties): void;

			/**
			 * Deletes an existing section.
			 */
			deleteSection(section: number, animation?: TableViewAnimationProperties): void;

			/**
			 * Programmatically deselects a row.
			 */
			deselectRow(row: number): void;

			/**
			 * Inserts a row after another row.
			 */
			insertRowAfter(index: number, row: any, animation?: TableViewAnimationProperties): void;

			/**
			 * Inserts a section after another section.
			 */
			insertSectionAfter(index: number, section: any, animation?: TableViewAnimationProperties): void;

			/**
			 * Inserts a row before another row.
			 */
			insertRowBefore(index: number, row: any, animation?: TableViewAnimationProperties): void;

			/**
			 * Inserts a section before another section.
			 */
			insertSectionBefore(index: number, section: any, animation?: TableViewAnimationProperties): void;

			/**
			 * Scrolls the table view to ensure that the specified row is on screen.
			 */
			scrollToIndex(index: number, animation?: TableViewAnimationProperties): void;

			/**
			 * Scrolls the table to a specific top position where 0 is the topmost y position in the
			 * table view.
			 */
			scrollToTop(top: number, animation?: TableViewAnimationProperties): void;

			/**
			 * Sets this tableview's content insets.
			 */
			setContentInsets(edgeInsets: TableViewEdgeInsets, animated?: TableViewContentInsetOption): void;

			/**
			 * Sets the value of the content offset of the table view without animation by default.
			 */
			setContentOffset(contentOffset: any): void;

			/**
			 * Programmatically selects a row. In Android, it sets the currently selected item. If in touch mode,
			 * the item will not be selected but it will still be positioned appropriately. If the specified
			 * selection position is less than 0, then the item at position 0 will be selected.
			 */
			selectRow(row: number): void;

			/**
			 * Sets the data in the table.
			 */
			setData(data: any, animation: TableViewAnimationProperties): void;

			/**
			 * Sets the value of the [Titanium.UI.TableView.headerPullView] property.
			 */
			setHeaderPullView(view: any): void;

			/**
			 * Updates an existing row, optionally with animation.
			 */
			updateRow(index: number, row: Titanium.UI.TableViewRow, animation: TableViewAnimationProperties): void;

			/**
			 * Updates an existing section, optionally with animation.
			 */
			updateSection(index: number, section: Titanium.UI.TableViewSection, animation: TableViewAnimationProperties): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.allowsSelection> property.
			 */
			getAllowsSelection(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.allowsSelection> property.
			 */
			setAllowsSelection(allowsSelection: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.allowsSelectionDuringEditing> property.
			 */
			getAllowsSelectionDuringEditing(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.allowsSelectionDuringEditing> property.
			 */
			setAllowsSelectionDuringEditing(allowsSelectionDuringEditing: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.data> property.
			 */
			getData(): Titanium.UI.TableViewRow[] | Titanium.UI.TableViewSection[];

			/**
			 * Gets the value of the <Titanium.UI.TableView.editable> property.
			 */
			getEditable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.editable> property.
			 */
			setEditable(editable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.editing> property.
			 */
			getEditing(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.editing> property.
			 */
			setEditing(editing: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.filterAttribute> property.
			 */
			getFilterAttribute(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableView.filterAttribute> property.
			 */
			setFilterAttribute(filterAttribute: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.filterAnchored> property.
			 */
			getFilterAnchored(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.filterAnchored> property.
			 */
			setFilterAnchored(filterAnchored: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.filterCaseInsensitive> property.
			 */
			getFilterCaseInsensitive(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.filterCaseInsensitive> property.
			 */
			setFilterCaseInsensitive(filterCaseInsensitive: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.footerDividersEnabled> property.
			 */
			getFooterDividersEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.footerDividersEnabled> property.
			 */
			setFooterDividersEnabled(footerDividersEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.footerTitle> property.
			 */
			getFooterTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableView.footerTitle> property.
			 */
			setFooterTitle(footerTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.maxClassname> property.
			 */
			getMaxClassname(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableView.maxClassname> property.
			 */
			setMaxClassname(maxClassname: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.headerPullView> property.
			 */
			getHeaderPullView(): Titanium.UI.View;

			/**
			 * Gets the value of the <Titanium.UI.TableView.refreshControl> property.
			 */
			getRefreshControl(): Titanium.UI.RefreshControl;

			/**
			 * Sets the value of the <Titanium.UI.TableView.refreshControl> property.
			 */
			setRefreshControl(refreshControl: Titanium.UI.RefreshControl): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.hideSearchOnSelection> property.
			 */
			getHideSearchOnSelection(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.hideSearchOnSelection> property.
			 */
			setHideSearchOnSelection(hideSearchOnSelection: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.footerView> property.
			 */
			getFooterView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.TableView.footerView> property.
			 */
			setFooterView(footerView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.headerDividersEnabled> property.
			 */
			getHeaderDividersEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.headerDividersEnabled> property.
			 */
			setHeaderDividersEnabled(headerDividersEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.headerTitle> property.
			 */
			getHeaderTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableView.headerTitle> property.
			 */
			setHeaderTitle(headerTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.headerView> property.
			 */
			getHeaderView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.TableView.headerView> property.
			 */
			setHeaderView(headerView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.index> property.
			 */
			getIndex(): TableViewIndexEntry[];

			/**
			 * Sets the value of the <Titanium.UI.TableView.index> property.
			 */
			setIndex(index: ReadonlyArray<TableViewIndexEntry>): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.maxRowHeight> property.
			 */
			getMaxRowHeight(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableView.maxRowHeight> property.
			 */
			setMaxRowHeight(maxRowHeight: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.minRowHeight> property.
			 */
			getMinRowHeight(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableView.minRowHeight> property.
			 */
			setMinRowHeight(minRowHeight: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.moveable> property.
			 */
			getMoveable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.moveable> property.
			 */
			setMoveable(moveable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.moving> property.
			 */
			getMoving(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.moving> property.
			 */
			setMoving(moving: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.overScrollMode> property.
			 */
			getOverScrollMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableView.overScrollMode> property.
			 */
			setOverScrollMode(overScrollMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.rowHeight> property.
			 */
			getRowHeight(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableView.rowHeight> property.
			 */
			setRowHeight(rowHeight: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.scrollable> property.
			 */
			getScrollable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.scrollable> property.
			 */
			setScrollable(scrollable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.scrollIndicatorStyle> property.
			 */
			getScrollIndicatorStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableView.scrollIndicatorStyle> property.
			 */
			setScrollIndicatorStyle(scrollIndicatorStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.scrollsToTop> property.
			 */
			getScrollsToTop(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.scrollsToTop> property.
			 */
			setScrollsToTop(scrollsToTop: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.search> property.
			 */
			getSearch(): Titanium.UI.SearchBar | Titanium.UI.Android.SearchView;

			/**
			 * Sets the value of the <Titanium.UI.TableView.search> property.
			 */
			setSearch(search: Titanium.UI.SearchBar): void;

			/**
			 * Sets the value of the <Titanium.UI.TableView.search> property.
			 */
			setSearch(search: Titanium.UI.Android.SearchView): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.dimBackgroundForSearch> property.
			 */
			getDimBackgroundForSearch(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.dimBackgroundForSearch> property.
			 */
			setDimBackgroundForSearch(dimBackgroundForSearch: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.searchAsChild> property.
			 */
			getSearchAsChild(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.searchAsChild> property.
			 */
			setSearchAsChild(searchAsChild: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.searchHidden> property.
			 */
			getSearchHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.searchHidden> property.
			 */
			setSearchHidden(searchHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.sectionCount> property.
			 */
			getSectionCount(): number;

			/**
			 * Gets the value of the <Titanium.UI.TableView.sections> property.
			 */
			getSections(): Titanium.UI.TableViewSection[];

			/**
			 * Sets the value of the <Titanium.UI.TableView.sections> property.
			 */
			setSections(sections: ReadonlyArray<Titanium.UI.TableViewSection>): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.separatorColor> property.
			 */
			getSeparatorColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableView.separatorColor> property.
			 */
			setSeparatorColor(separatorColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.separatorInsets> property.
			 */
			getSeparatorInsets(): any;

			/**
			 * Sets the value of the <Titanium.UI.TableView.separatorInsets> property.
			 */
			setSeparatorInsets(separatorInsets: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.tableSeparatorInsets> property.
			 */
			getTableSeparatorInsets(): any;

			/**
			 * Sets the value of the <Titanium.UI.TableView.tableSeparatorInsets> property.
			 */
			setTableSeparatorInsets(tableSeparatorInsets: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.rowSeparatorInsets> property.
			 */
			getRowSeparatorInsets(): any;

			/**
			 * Sets the value of the <Titanium.UI.TableView.rowSeparatorInsets> property.
			 */
			setRowSeparatorInsets(rowSeparatorInsets: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.separatorStyle> property.
			 */
			getSeparatorStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableView.separatorStyle> property.
			 */
			setSeparatorStyle(separatorStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.showVerticalScrollIndicator> property.
			 */
			getShowVerticalScrollIndicator(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableView.showVerticalScrollIndicator> property.
			 */
			setShowVerticalScrollIndicator(showVerticalScrollIndicator: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.style> property.
			 */
			getStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableView.style> property.
			 */
			setStyle(style: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.resultsBackgroundColor> property.
			 */
			getResultsBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableView.resultsBackgroundColor> property.
			 */
			setResultsBackgroundColor(resultsBackgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.resultsSeparatorColor> property.
			 */
			getResultsSeparatorColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableView.resultsSeparatorColor> property.
			 */
			setResultsSeparatorColor(resultsSeparatorColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.resultsSeparatorStyle> property.
			 */
			getResultsSeparatorStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableView.resultsSeparatorStyle> property.
			 */
			setResultsSeparatorStyle(resultsSeparatorStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableView.resultsSeparatorInsets> property.
			 */
			getResultsSeparatorInsets(): any;

			/**
			 * Sets the value of the <Titanium.UI.TableView.resultsSeparatorInsets> property.
			 */
			setResultsSeparatorInsets(resultsSeparatorInsets: any): void;

		}
		/**
		 * A table view row is an individual item in a table, organized into table view sections.
		 */
		interface TableViewRow extends Titanium.UI.View {
			/**
			 * Class name for the row.
			 */
			className: string;

			/**
			 * Default text color of the row when not selected, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Text to display on the delete button when editable is enabled
			 */
			deleteButtonTitle: string;

			/**
			 * Determines the rows' editable behavior, which allows them to be deleted by the user when the
			 * table is in `editing` or `moving` mode.
			 */
			editable: boolean;

			/**
			 * Font to use for the row title.
			 */
			font: Font;

			/**
			 * The footer title of the row.
			 */
			footer: string;

			/**
			 * Determines whether a system-provided checkmark is displayed on the right-hand side of
			 * the row.
			 */
			hasCheck: boolean;

			/**
			 * Determines whether a system-provided arrow is displayed on the right-hand side of the row.
			 */
			hasChild: boolean;

			/**
			 * Determines whether a system-provided detail disclosure button is displayed on the right-hand
			 * side of the row.
			 */
			hasDetail: boolean;

			/**
			 * The header title of the row.
			 */
			header: string;

			/**
			 * Indention level for the row.
			 */
			indentionLevel: number;

			/**
			 * Image to render in the left image area of the row, specified as a local path or URL.
			 */
			leftImage: string;

			/**
			 * Determines the rows' moveable behavior, which allows them to be re-ordered by the user when
			 * the table is in `editing` or `moving` mode.
			 */
			moveable: boolean;

			/**
			 * Image to render in the right image area of the row, specified as a local path or URL.
			 */
			rightImage: string;

			/**
			 * Background color to render when the row is selected, as a color name or hex triplet.
			 */
			selectedBackgroundColor: string;

			/**
			 * Background image to render when the row is selected.
			 */
			selectedBackgroundImage: string;

			/**
			 * Color of the row text when the row is selected, as a color name or hex triplet.
			 */
			selectedColor: string;

			/**
			 * Selection style constant to control the selection color.
			 */
			selectionStyle: number;

			/**
			 * Text to display on the row.
			 */
			title: string;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.className> property.
			 */
			getClassName(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.className> property.
			 */
			setClassName(className: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.deleteButtonTitle> property.
			 */
			getDeleteButtonTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.deleteButtonTitle> property.
			 */
			setDeleteButtonTitle(deleteButtonTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.editable> property.
			 */
			getEditable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.editable> property.
			 */
			setEditable(editable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.font> property.
			 */
			setFont(font: Font): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.footer> property.
			 */
			getFooter(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.footer> property.
			 */
			setFooter(footer: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.hasCheck> property.
			 */
			getHasCheck(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.hasCheck> property.
			 */
			setHasCheck(hasCheck: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.hasChild> property.
			 */
			getHasChild(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.hasChild> property.
			 */
			setHasChild(hasChild: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.hasDetail> property.
			 */
			getHasDetail(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.hasDetail> property.
			 */
			setHasDetail(hasDetail: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.header> property.
			 */
			getHeader(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.header> property.
			 */
			setHeader(header: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.indentionLevel> property.
			 */
			getIndentionLevel(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.indentionLevel> property.
			 */
			setIndentionLevel(indentionLevel: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.leftImage> property.
			 */
			getLeftImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.leftImage> property.
			 */
			setLeftImage(leftImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.moveable> property.
			 */
			getMoveable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.moveable> property.
			 */
			setMoveable(moveable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.rightImage> property.
			 */
			getRightImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.rightImage> property.
			 */
			setRightImage(rightImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.selectedBackgroundColor> property.
			 */
			getSelectedBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.selectedBackgroundColor> property.
			 */
			setSelectedBackgroundColor(selectedBackgroundColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.selectedBackgroundImage> property.
			 */
			getSelectedBackgroundImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.selectedBackgroundImage> property.
			 */
			setSelectedBackgroundImage(selectedBackgroundImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.selectedColor> property.
			 */
			getSelectedColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.selectedColor> property.
			 */
			setSelectedColor(selectedColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.selectionStyle> property.
			 */
			getSelectionStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.selectionStyle> property.
			 */
			setSelectionStyle(selectionStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewRow.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewRow.title> property.
			 */
			setTitle(title: string): void;

		}
		/**
		 * A table view section is a container within a table used to organize table view rows.
		 */
		interface TableViewSection extends Titanium.Proxy {
			/**
			 * Title of this section footer.
			 */
			footerTitle: string;

			/**
			 * View to use for this section footer.
			 */
			footerView: Titanium.UI.View;

			/**
			 * Title of this section header.
			 */
			headerTitle: string;

			/**
			 * View to use for this section header.
			 */
			headerView: Titanium.UI.View;

			/**
			 * Number of rows in this section.
			 */
			readonly rowCount: number;

			/**
			 * Rows in this section.
			 */
			readonly rows: Titanium.UI.TableViewRow[];

			/**
			 * Adds a table view row to this section.
			 */
			add(row: Titanium.UI.TableViewRow): void;

			/**
			 * Removes a table view row from this section.
			 */
			remove(row: Titanium.UI.TableViewRow): void;

			/**
			 * Returns a row in this section.
			 */
			rowAtIndex(index: number): Titanium.UI.TableViewRow;

			/**
			 * Gets the value of the <Titanium.UI.TableViewSection.footerTitle> property.
			 */
			getFooterTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewSection.footerTitle> property.
			 */
			setFooterTitle(footerTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewSection.footerView> property.
			 */
			getFooterView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.TableViewSection.footerView> property.
			 */
			setFooterView(footerView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewSection.headerTitle> property.
			 */
			getHeaderTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.TableViewSection.headerTitle> property.
			 */
			setHeaderTitle(headerTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewSection.headerView> property.
			 */
			getHeaderView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.TableViewSection.headerView> property.
			 */
			setHeaderView(headerView: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TableViewSection.rowCount> property.
			 */
			getRowCount(): number;

			/**
			 * Gets the value of the <Titanium.UI.TableViewSection.rows> property.
			 */
			getRows(): Titanium.UI.TableViewRow[];

		}
		/**
		 * A multiline text field that supports editing and scrolling.
		 */
		interface TextArea extends Titanium.UI.View {
			/**
			 * Determines the appearance of the keyboard displayed when this text area is focused.
			 */
			appearance: number;

			/**
			 * Determines the appearance of the keyboard displayed when this text area is focused.
			 */
			keyboardAppearance: number;

			/**
			 * Hint text attributed string.
			 */
			attributedHintText: Titanium.UI.AttributedString;

			/**
			 * TextArea attributed string.
			 */
			attributedString: Titanium.UI.AttributedString;

			/**
			 * Determines how text is capitalized during typing.
			 */
			autocapitalization: number;

			/**
			 * Determines whether to automatically correct text entered into this text area.
			 */
			autocorrect: boolean;

			/**
			 * Sets the autofill type for the text area.
			 */
			autofillType: string;

			/**
			 * Automatically convert text to clickable links.
			 */
			autoLink: number;

			/**
			 * Determines whether the value of this text area should be cleared when it is focused.
			 */
			clearOnEdit: boolean;

			/**
			 * Color of the text in this text area, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Determines whether this field can be edited.
			 */
			editable: boolean;

			/**
			 * Determines whether an ellipsis (`...`) should be used to indicate truncated text.
			 */
			ellipsize: boolean;

			/**
			 * Determines whether the return key is enabled automatically when there is text in this text
			 * area.
			 */
			enableReturnKey: boolean;

			/**
			 * Font to use for text.
			 */
			font: Font;

			/**
			 * Leave some space above the keyboard in landscape mode or not.
			 */
			fullscreen: boolean;

			/**
			 * Hint text to display when the field is empty.
			 */
			hintText: string;

			/**
			 * Color of hint text that displays when field is empty.
			 */
			hintTextColor: string;

			/**
			 * Hint type to display on the text field.
			 */
			hintType: number;

			/**
			 * Specifies if the text area should allow user interaction with the given URL in the given range of text.
			 */
			handleLinks: boolean;

			/**
			 * Array of toolbar button objects or a [toolbar](Titanium.UI.iOS.Toolbar) to be used when the
			 * keyboard is displayed.
			 */
			keyboardToolbar: Titanium.UI.View[] | Titanium.UI.iOS.Toolbar;

			/**
			 * Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet.
			 */
			keyboardToolbarColor: string;

			/**
			 * Height of the keyboard toolbar if keyboardToolbar is an array.
			 */
			keyboardToolbarHeight: number;

			/**
			 * Keyboard type to display when this text area is focused.
			 */
			keyboardType: number;

			/**
			 * Number of lines tall the text area height will be, if set.
			 */
			lines: number;

			/**
			 * Maximum length of text field input.
			 */
			maxLength: number;

			/**
			 * Maximum line count of text field input.
			 */
			maxLines: number;

			/**
			 * Sets the left and right padding of this TextArea. The text will always be vertically centered.
			 */
			padding: ViewPadding;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this text area is focused.
			 */
			returnKeyType: number;

			/**
			 * Controls whether the scroll-to-top gesture is effective.
			 */
			scrollsToTop: boolean;

			/**
			 * Determinates if the undo and redo buttons on the left side of the keyboard should be displayed or not. Only valid on iOS9 and above. This property can only be set upon creation.
			 */
			showUndoRedoActions: boolean;

			/**
			 * Determines if the return key should be suppressed during text entry.
			 */
			suppressReturn: boolean;

			/**
			 * Text alignment within this text area.
			 * This has no effect on `hintText` when `hintType` is Ti.UI.HINT_TYPE_ANIMATED.
			 */
			textAlign: string | number;

			/**
			 * Value of this text area, which may be set programmatically and modified by the user.
			 */
			value: string;

			/**
			 * Determines whether this text area can be scrolled.
			 */
			scrollable: boolean;

			/**
			 * Returns the currently selected text of the text area.
			 */
			readonly selection: textAreaSelectedParams;

			/**
			 * Vertical alignment within this text area.
			 */
			verticalAlign: number | string;

			/**
			 * Forces this text area to lose focus.
			 */
			blur(): void;

			/**
			 * Forces this text area to gain focus.
			 */
			focus(): void;

			/**
			 * Returns `true` if this text area contains text.
			 */
			hasText(): boolean;

			/**
			 * Selects the text in range (start, end).
			 */
			setSelection(start: number, end: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.appearance> property.
			 */
			getAppearance(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.appearance> property.
			 */
			setAppearance(appearance: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.keyboardAppearance> property.
			 */
			getKeyboardAppearance(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.keyboardAppearance> property.
			 */
			setKeyboardAppearance(keyboardAppearance: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.attributedHintText> property.
			 */
			getAttributedHintText(): Titanium.UI.AttributedString;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.attributedHintText> property.
			 */
			setAttributedHintText(attributedHintText: Titanium.UI.AttributedString): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.attributedString> property.
			 */
			getAttributedString(): Titanium.UI.AttributedString;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.attributedString> property.
			 */
			setAttributedString(attributedString: Titanium.UI.AttributedString): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.autocapitalization> property.
			 */
			getAutocapitalization(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.autocapitalization> property.
			 */
			setAutocapitalization(autocapitalization: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.autocorrect> property.
			 */
			getAutocorrect(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.autocorrect> property.
			 */
			setAutocorrect(autocorrect: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.autofillType> property.
			 */
			getAutofillType(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.autofillType> property.
			 */
			setAutofillType(autofillType: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.autoLink> property.
			 */
			getAutoLink(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.autoLink> property.
			 */
			setAutoLink(autoLink: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.clearOnEdit> property.
			 */
			getClearOnEdit(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.clearOnEdit> property.
			 */
			setClearOnEdit(clearOnEdit: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.editable> property.
			 */
			getEditable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.editable> property.
			 */
			setEditable(editable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.ellipsize> property.
			 */
			getEllipsize(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.ellipsize> property.
			 */
			setEllipsize(ellipsize: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.enableReturnKey> property.
			 */
			getEnableReturnKey(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.enableReturnKey> property.
			 */
			setEnableReturnKey(enableReturnKey: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.font> property.
			 */
			setFont(font: Font): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.fullscreen> property.
			 */
			getFullscreen(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.fullscreen> property.
			 */
			setFullscreen(fullscreen: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.hintText> property.
			 */
			getHintText(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.hintText> property.
			 */
			setHintText(hintText: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.hintTextColor> property.
			 */
			getHintTextColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.hintTextColor> property.
			 */
			setHintTextColor(hintTextColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.hintType> property.
			 */
			getHintType(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.hintType> property.
			 */
			setHintType(hintType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.handleLinks> property.
			 */
			getHandleLinks(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.handleLinks> property.
			 */
			setHandleLinks(handleLinks: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.keyboardToolbar> property.
			 */
			getKeyboardToolbar(): Titanium.UI.View[] | Titanium.UI.iOS.Toolbar;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.keyboardToolbar> property.
			 */
			setKeyboardToolbar(keyboardToolbar: any[]): void;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.keyboardToolbar> property.
			 */
			setKeyboardToolbar(keyboardToolbar: Titanium.UI.iOS.Toolbar): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.keyboardToolbarColor> property.
			 */
			getKeyboardToolbarColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.keyboardToolbarColor> property.
			 */
			setKeyboardToolbarColor(keyboardToolbarColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.keyboardToolbarHeight> property.
			 */
			getKeyboardToolbarHeight(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.keyboardToolbarHeight> property.
			 */
			setKeyboardToolbarHeight(keyboardToolbarHeight: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.keyboardType> property.
			 */
			getKeyboardType(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.keyboardType> property.
			 */
			setKeyboardType(keyboardType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.lines> property.
			 */
			getLines(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.lines> property.
			 */
			setLines(lines: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.maxLength> property.
			 */
			getMaxLength(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.maxLength> property.
			 */
			setMaxLength(maxLength: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.maxLines> property.
			 */
			getMaxLines(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.maxLines> property.
			 */
			setMaxLines(maxLines: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.padding> property.
			 */
			getPadding(): ViewPadding;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.padding> property.
			 */
			setPadding(padding: ViewPadding): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.returnKeyType> property.
			 */
			getReturnKeyType(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.returnKeyType> property.
			 */
			setReturnKeyType(returnKeyType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.scrollsToTop> property.
			 */
			getScrollsToTop(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.scrollsToTop> property.
			 */
			setScrollsToTop(scrollsToTop: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.showUndoRedoActions> property.
			 */
			getShowUndoRedoActions(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.showUndoRedoActions> property.
			 */
			setShowUndoRedoActions(showUndoRedoActions: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.suppressReturn> property.
			 */
			getSuppressReturn(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.suppressReturn> property.
			 */
			setSuppressReturn(suppressReturn: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.textAlign> property.
			 */
			getTextAlign(): string | number;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.textAlign> property.
			 */
			setTextAlign(textAlign: string): void;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.textAlign> property.
			 */
			setTextAlign(textAlign: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.value> property.
			 */
			getValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.value> property.
			 */
			setValue(value: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.scrollable> property.
			 */
			getScrollable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.scrollable> property.
			 */
			setScrollable(scrollable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.selection> property.
			 */
			getSelection(): textAreaSelectedParams;

			/**
			 * Gets the value of the <Titanium.UI.TextArea.verticalAlign> property.
			 */
			getVerticalAlign(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: number): void;

			/**
			 * Sets the value of the <Titanium.UI.TextArea.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: string): void;

		}
		/**
		 * A single line text field.
		 */
		interface TextField extends Titanium.UI.View {
			/**
			 * Determines the appearance of the keyboard displayed when this field is focused.
			 */
			appearance: number;

			/**
			 * Determines the appearance of the keyboard displayed when this field is focused.
			 */
			keyboardAppearance: number;

			/**
			 * TextField attributed string.
			 */
			attributedString: Titanium.UI.AttributedString;

			/**
			 * Hint text attributed string.
			 */
			attributedHintText: Titanium.UI.AttributedString;

			/**
			 * Determines how text is capitalized during typing.
			 */
			autocapitalization: number;

			/**
			 * Determines whether to automatically correct text entered into this text field.
			 */
			autocorrect: boolean;

			/**
			 * Sets the autofill type for the text field.
			 */
			autofillType: string;

			/**
			 * Automatically convert text to clickable links.
			 */
			autoLink: number;

			/**
			 * Border style for the field.
			 */
			borderStyle: number;

			/**
			 * Determines when the clear button is displayed.
			 */
			clearButtonMode: number;

			/**
			 * Determines whether the value of this text field should be cleared when it is focused.
			 */
			clearOnEdit: boolean;

			/**
			 * Color of the text in this text field, as a color name or hex triplet.
			 */
			color: string;

			/**
			 * Determines whether this field can be edited.
			 */
			editable: boolean;

			/**
			 * Determines whether an ellipsis (`...`) should be used to indicate truncated text.
			 */
			ellipsize: boolean;

			/**
			 * Determines whether the return key is enabled automatically when there is text in this text
			 * field.
			 */
			enableReturnKey: boolean;

			/**
			 * Font to use for text.
			 */
			font: Font;

			/**
			 * Leave some space above the keyboard in landscape mode or not.
			 */
			fullscreen: boolean;

			/**
			 * Hint text to display when the field is empty.
			 */
			hintText: string;

			/**
			 * Hint text color to display when the field is empty.
			 */
			hintTextColor: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [hintText](Titanium.UI.TextField.hintText) property.
			 */
			hinttextid: string;

			/**
			 * Hint type to display on the text field.
			 */
			hintType: number;

			/**
			 * Input type to accept in the text field. Also influences the Keyboard type to display.
			 */
			inputType: number[];

			/**
			 * Array of toolbar button objects or a [toolbar](Titanium.UI.iOS.Toolbar) to be used when the
			 * keyboard is displayed.
			 */
			keyboardToolbar: Titanium.UI.View[] | Titanium.UI.iOS.Toolbar;

			/**
			 * Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet.
			 */
			keyboardToolbarColor: string;

			/**
			 * Height of the keyboard toolbar if keyboardToolbar is an array.
			 */
			keyboardToolbarHeight: number;

			/**
			 * Keyboard type to display when this text field is focused.
			 */
			keyboardType: number;

			/**
			 * Left button view to display in the `TextField`.
			 */
			leftButton: any;

			/**
			 * Determines when to display the left button view.
			 */
			leftButtonMode: number;

			/**
			 * Padding between the left button and the edge of the field.
			 */
			leftButtonPadding: number;

			/**
			 * Minimum size of the font when the font is sized based on the contents.  Enables font
			 * scaling to fit.
			 */
			minimumFontSize: number;

			/**
			 * Sets the padding of this text field.
			 */
			padding: ViewPadding;

			/**
			 * Left padding of this text field.
			 */
			paddingLeft: number;

			/**
			 * Right padding of this text field.
			 */
			paddingRight: number;

			/**
			 * Obscure the input text from the user.
			 */
			passwordMask: boolean;

			/**
			 * Set password rules that should be used for this text field.
			 */
			passwordRules: string;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this field is focused.
			 */
			returnKeyType: number;

			/**
			 * Right button view.
			 */
			rightButton: any;

			/**
			 * Determines when to display the right button view.
			 */
			rightButtonMode: number;

			/**
			 * Padding between the right button and the edge of the field.
			 */
			rightButtonPadding: number;

			/**
			 * Determines whether the return key should be suppressed during entry.
			 */
			suppressReturn: boolean;

			/**
			 * Returns the currently selected text of the text field.
			 */
			readonly selection: textFieldSelectedParams;

			/**
			 * Determinates if the undo and redo buttons on the left side of the keyboard should be displayed or not. Only valid on iOS9 and above.
			 */
			showUndoRedoActions: boolean;

			/**
			 * Text alignment within this text field.
			 * This has no effect on `hintText` when `hintType` is Ti.UI.HINT_TYPE_ANIMATED.
			 */
			textAlign: string | number;

			/**
			 * Value of this text field, which may be set programmatically and modified by the user.
			 */
			value: string;

			/**
			 * Vertical alignment within this text field.
			 */
			verticalAlign: number | string;

			/**
			 * Maximum length of text field input.
			 */
			maxLength: number;

			/**
			 * Forces the field to lose focus.
			 */
			blur(): void;

			/**
			 * Forces the field to gain focus.
			 */
			focus(): void;

			/**
			 * Returns `true` if this text field contains text.
			 */
			hasText(): boolean;

			/**
			 * Selects the text in range (start, end).
			 */
			setSelection(start: number, end: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.appearance> property.
			 */
			getAppearance(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.appearance> property.
			 */
			setAppearance(appearance: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.keyboardAppearance> property.
			 */
			getKeyboardAppearance(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.keyboardAppearance> property.
			 */
			setKeyboardAppearance(keyboardAppearance: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.attributedString> property.
			 */
			getAttributedString(): Titanium.UI.AttributedString;

			/**
			 * Sets the value of the <Titanium.UI.TextField.attributedString> property.
			 */
			setAttributedString(attributedString: Titanium.UI.AttributedString): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.attributedHintText> property.
			 */
			getAttributedHintText(): Titanium.UI.AttributedString;

			/**
			 * Sets the value of the <Titanium.UI.TextField.attributedHintText> property.
			 */
			setAttributedHintText(attributedHintText: Titanium.UI.AttributedString): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.autocapitalization> property.
			 */
			getAutocapitalization(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.autocapitalization> property.
			 */
			setAutocapitalization(autocapitalization: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.autocorrect> property.
			 */
			getAutocorrect(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextField.autocorrect> property.
			 */
			setAutocorrect(autocorrect: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.autofillType> property.
			 */
			getAutofillType(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextField.autofillType> property.
			 */
			setAutofillType(autofillType: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.autoLink> property.
			 */
			getAutoLink(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.autoLink> property.
			 */
			setAutoLink(autoLink: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.borderStyle> property.
			 */
			getBorderStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.borderStyle> property.
			 */
			setBorderStyle(borderStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.clearButtonMode> property.
			 */
			getClearButtonMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.clearButtonMode> property.
			 */
			setClearButtonMode(clearButtonMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.clearOnEdit> property.
			 */
			getClearOnEdit(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextField.clearOnEdit> property.
			 */
			setClearOnEdit(clearOnEdit: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextField.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.editable> property.
			 */
			getEditable(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextField.editable> property.
			 */
			setEditable(editable: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.ellipsize> property.
			 */
			getEllipsize(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextField.ellipsize> property.
			 */
			setEllipsize(ellipsize: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.enableReturnKey> property.
			 */
			getEnableReturnKey(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextField.enableReturnKey> property.
			 */
			setEnableReturnKey(enableReturnKey: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.font> property.
			 */
			getFont(): Font;

			/**
			 * Sets the value of the <Titanium.UI.TextField.font> property.
			 */
			setFont(font: Font): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.fullscreen> property.
			 */
			getFullscreen(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextField.fullscreen> property.
			 */
			setFullscreen(fullscreen: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.hintText> property.
			 */
			getHintText(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextField.hintText> property.
			 */
			setHintText(hintText: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.hintTextColor> property.
			 */
			getHintTextColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextField.hintTextColor> property.
			 */
			setHintTextColor(hintTextColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.hinttextid> property.
			 */
			getHinttextid(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextField.hinttextid> property.
			 */
			setHinttextid(hinttextid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.hintType> property.
			 */
			getHintType(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.hintType> property.
			 */
			setHintType(hintType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.inputType> property.
			 */
			getInputType(): number[];

			/**
			 * Sets the value of the <Titanium.UI.TextField.inputType> property.
			 */
			setInputType(inputType: ReadonlyArray<number>): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.keyboardToolbar> property.
			 */
			getKeyboardToolbar(): Titanium.UI.View[] | Titanium.UI.iOS.Toolbar;

			/**
			 * Sets the value of the <Titanium.UI.TextField.keyboardToolbar> property.
			 */
			setKeyboardToolbar(keyboardToolbar: any[]): void;

			/**
			 * Sets the value of the <Titanium.UI.TextField.keyboardToolbar> property.
			 */
			setKeyboardToolbar(keyboardToolbar: Titanium.UI.iOS.Toolbar): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.keyboardToolbarColor> property.
			 */
			getKeyboardToolbarColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextField.keyboardToolbarColor> property.
			 */
			setKeyboardToolbarColor(keyboardToolbarColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.keyboardToolbarHeight> property.
			 */
			getKeyboardToolbarHeight(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.keyboardToolbarHeight> property.
			 */
			setKeyboardToolbarHeight(keyboardToolbarHeight: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.keyboardType> property.
			 */
			getKeyboardType(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.keyboardType> property.
			 */
			setKeyboardType(keyboardType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.leftButton> property.
			 */
			getLeftButton(): any;

			/**
			 * Sets the value of the <Titanium.UI.TextField.leftButton> property.
			 */
			setLeftButton(leftButton: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.leftButtonMode> property.
			 */
			getLeftButtonMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.leftButtonMode> property.
			 */
			setLeftButtonMode(leftButtonMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.leftButtonPadding> property.
			 */
			getLeftButtonPadding(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.leftButtonPadding> property.
			 */
			setLeftButtonPadding(leftButtonPadding: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.minimumFontSize> property.
			 */
			getMinimumFontSize(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.minimumFontSize> property.
			 */
			setMinimumFontSize(minimumFontSize: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.padding> property.
			 */
			getPadding(): ViewPadding;

			/**
			 * Sets the value of the <Titanium.UI.TextField.padding> property.
			 */
			setPadding(padding: ViewPadding): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.paddingLeft> property.
			 */
			getPaddingLeft(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.paddingLeft> property.
			 */
			setPaddingLeft(paddingLeft: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.paddingRight> property.
			 */
			getPaddingRight(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.paddingRight> property.
			 */
			setPaddingRight(paddingRight: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.passwordMask> property.
			 */
			getPasswordMask(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextField.passwordMask> property.
			 */
			setPasswordMask(passwordMask: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.passwordRules> property.
			 */
			getPasswordRules(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextField.passwordRules> property.
			 */
			setPasswordRules(passwordRules: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.returnKeyType> property.
			 */
			getReturnKeyType(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.returnKeyType> property.
			 */
			setReturnKeyType(returnKeyType: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.rightButton> property.
			 */
			getRightButton(): any;

			/**
			 * Sets the value of the <Titanium.UI.TextField.rightButton> property.
			 */
			setRightButton(rightButton: any): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.rightButtonMode> property.
			 */
			getRightButtonMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.rightButtonMode> property.
			 */
			setRightButtonMode(rightButtonMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.rightButtonPadding> property.
			 */
			getRightButtonPadding(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.rightButtonPadding> property.
			 */
			setRightButtonPadding(rightButtonPadding: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.suppressReturn> property.
			 */
			getSuppressReturn(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextField.suppressReturn> property.
			 */
			setSuppressReturn(suppressReturn: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.selection> property.
			 */
			getSelection(): textFieldSelectedParams;

			/**
			 * Gets the value of the <Titanium.UI.TextField.showUndoRedoActions> property.
			 */
			getShowUndoRedoActions(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.TextField.showUndoRedoActions> property.
			 */
			setShowUndoRedoActions(showUndoRedoActions: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.textAlign> property.
			 */
			getTextAlign(): string | number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.textAlign> property.
			 */
			setTextAlign(textAlign: string): void;

			/**
			 * Sets the value of the <Titanium.UI.TextField.textAlign> property.
			 */
			setTextAlign(textAlign: number): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.value> property.
			 */
			getValue(): string;

			/**
			 * Sets the value of the <Titanium.UI.TextField.value> property.
			 */
			setValue(value: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.verticalAlign> property.
			 */
			getVerticalAlign(): number | string;

			/**
			 * Sets the value of the <Titanium.UI.TextField.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: number): void;

			/**
			 * Sets the value of the <Titanium.UI.TextField.verticalAlign> property.
			 */
			setVerticalAlign(verticalAlign: string): void;

			/**
			 * Gets the value of the <Titanium.UI.TextField.maxLength> property.
			 */
			getMaxLength(): number;

			/**
			 * Sets the value of the <Titanium.UI.TextField.maxLength> property.
			 */
			setMaxLength(maxLength: number): void;

		}
		/**
		 * A toolbar, which can contain buttons and certain other controls.
		 */
		interface Toolbar extends Titanium.UI.View {
			/**
			 * Background color for the toolbar, as a color name or hex triplet.
			 */
			barColor: string;

			/**
			 * An array of buttons (or other widgets) contained in the toolbar.
			 */
			items: Titanium.UI.View[];

			/**
			 * If `true`, the background of the toolbar extends upwards.
			 */
			extendBackground: boolean;

			/**
			 * If `true`, a translucent background color is used for the toolbar.
			 */
			translucent: boolean;

			/**
			 * Returns the margin after the toolbar's content when there are action buttons.
			 */
			contentInsetEndWithActions: number;

			/**
			 * Returns the margin at the toolbar's content start when there is a navigation button.
			 */
			contentInsetStartWithNavigation: number;

			/**
			 * Image to be used as a logo in the Toolbar.
			 */
			logo: string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Image to be used for a navigation icon.
			 */
			navigationIcon: string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Image to be used for the overflow menu.
			 */
			overflowIcon: string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Text of the subtitle.
			 */
			subtitle: string;

			/**
			 * Color for toolbar's subtitle
			 */
			subtitleTextColor: string;

			/**
			 * Text of the title.
			 */
			title: string;

			/**
			 * Color string with any Titanium supported format
			 */
			titleTextColor: string;

			/**
			 * Collapses expanded ActionViews if there is any
			 */
			collapseActionViews(): void;

			/**
			 * Collapses expandend ActionViews and hides overflow menu
			 */
			dismissPopupMenus(): void;

			/**
			 * Returns the margin at the toolbar's content end.
			 */
			getContentInsetEnd(): number;

			/**
			 * Returns the margin on the left of the toolbar's content.
			 */
			getContentInsetLeft(): number;

			/**
			 * Returns the margin on the right of the toolbar's content.
			 */
			getContentInsetRight(): number;

			/**
			 * Returns the margin at the toolbar's content start.
			 */
			getContentInsetStart(): number;

			/**
			 * Returns the margin at the toolbar's content end that will be used with the current configuration of the toolbar.
			 */
			getCurrentContentInsetEnd(): number;

			/**
			 * Returns the margin on the left of the toolbar's content that will be used with the current configuration of the toolbar.
			 */
			getCurrentContentInsetLeft(): number;

			/**
			 * Returns the margin on the right of the toolbar's content that will be used with the current configuration of the toolbar.
			 */
			getCurrentContentInsetRight(): number;

			/**
			 * Returns the margin at the toolbar's content start that will be used with the current configuration of the toolbar.
			 */
			getCurrentContentInsetStart(): number;

			/**
			 * Checks if the toolbar is currently hosting an expanded action view.
			 */
			hasExpandedActionView(): boolean;

			/**
			 * Hides the overflow menu if there is one.
			 */
			hideOverflowMenu(): void;

			/**
			 * Checks if the toolbar is currently hosting an expanded action view.
			 */
			isOverflowMenuShowing(): boolean;

			/**
			 * Sets the content margins of the toolbar
			 */
			setContentInsetsAbsolute(insetLeft: number, insetRight: number): void;

			/**
			 * Sets the content margins relative to the layout direction
			 */
			setContentInsetsRelative(insetStart: number, insetEnd: number): void;

			/**
			 * Shows the overflow menu if there is one
			 */
			showOverflowMenu(): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.barColor> property.
			 */
			getBarColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.barColor> property.
			 */
			setBarColor(barColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.items> property.
			 */
			getItems(): Titanium.UI.View[];

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.items> property.
			 */
			setItems(items: any[]): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.translucent> property.
			 */
			getTranslucent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.translucent> property.
			 */
			setTranslucent(translucent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.contentInsetEndWithActions> property.
			 */
			getContentInsetEndWithActions(): number;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.contentInsetEndWithActions> property.
			 */
			setContentInsetEndWithActions(contentInsetEndWithActions: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.contentInsetStartWithNavigation> property.
			 */
			getContentInsetStartWithNavigation(): number;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.contentInsetStartWithNavigation> property.
			 */
			setContentInsetStartWithNavigation(contentInsetStartWithNavigation: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.logo> property.
			 */
			getLogo(): string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.logo> property.
			 */
			setLogo(logo: string): void;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.logo> property.
			 */
			setLogo(logo: Titanium.Blob): void;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.logo> property.
			 */
			setLogo(logo: Titanium.Filesystem.File): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.navigationIcon> property.
			 */
			getNavigationIcon(): string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.navigationIcon> property.
			 */
			setNavigationIcon(navigationIcon: string): void;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.navigationIcon> property.
			 */
			setNavigationIcon(navigationIcon: Titanium.Blob): void;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.navigationIcon> property.
			 */
			setNavigationIcon(navigationIcon: Titanium.Filesystem.File): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.overflowIcon> property.
			 */
			getOverflowIcon(): string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.overflowIcon> property.
			 */
			setOverflowIcon(overflowIcon: string): void;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.overflowIcon> property.
			 */
			setOverflowIcon(overflowIcon: Titanium.Blob): void;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.overflowIcon> property.
			 */
			setOverflowIcon(overflowIcon: Titanium.Filesystem.File): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.subtitle> property.
			 */
			getSubtitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.subtitle> property.
			 */
			setSubtitle(subtitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.subtitleTextColor> property.
			 */
			getSubtitleTextColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.subtitleTextColor> property.
			 */
			setSubtitleTextColor(subtitleTextColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Toolbar.titleTextColor> property.
			 */
			getTitleTextColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Toolbar.titleTextColor> property.
			 */
			setTitleTextColor(titleTextColor: string): void;

		}
		/**
		 * The web view allows you to open an HTML5 based view which can load either local or remote content.
		 */
		interface WebView extends Titanium.UI.View {
			/**
			 * A Boolean value that determines whether pressing on a link displays a preview of the
			 * destination for the link.
			 */
			allowsLinkPreview: boolean;

			/**
			 * An array of url strings to blacklist.
			 */
			blacklistedURLs: string[];

			/**
			 * Web content to load.
			 */
			data: Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Determines whether the view will bounce when scrolling to the edge of the scrollable region.
			 */
			disableBounce: boolean;

			/**
			 * Determines whether or not the webview should not be able to display the context menu.
			 */
			disableContextMenu: boolean;

			/**
			 * Enable adding javascript interfaces internally to webview prior to JELLY_BEAN_MR1 (Android 4.2)
			 */
			enableJavascriptInterface: boolean;

			/**
			 * Lets the webview handle platform supported urls
			 */
			handlePlatformUrl: boolean;

			/**
			 * The configuration for the new web view.
			 */
			configuration: Titanium.UI.iOS.WebViewConfiguration;

			/**
			 * List of allowed URL schemes for the web view.
			 */
			allowedURLSchemes: string[];

			/**
			 * Hides activity indicator when loading remote URL.
			 */
			hideLoadIndicator: boolean;

			/**
			 * HTML content of this web view.
			 */
			html: string;

			/**
			 * A Boolean value indicating whether web content can programmatically display the keyboard.
			 */
			keyboardDisplayRequiresUserAction: boolean;

			/**
			 * Controls whether to ignore invalid SSL certificates or not.
			 */
			ignoreSslError: boolean;

			/**
			 * Indicates if the webview is loading content.
			 */
			loading: boolean;

			/**
			 * Callback function called when there is a request for the application to create a new window
			 * to host new content.
			 */
			onCreateWindow: (param0: any) => any;

			/**
			 * Fired before navigating to a link.
			 */
			onlink: (param0: OnLinkURLResponse) => any;

			/**
			 * Determines the behavior when the user overscrolls the view.
			 */
			overScrollMode: number;

			/**
			 * Determines how a cache is used in this web view.
			 */
			cacheMode: number;

			/**
			 * Determines how to treat content that requires plugins in this web view.
			 */
			pluginState: number;

			/**
			 * Controls whether the scroll-to-top gesture is effective.
			 */
			scrollsToTop: boolean;

			/**
			 * If `true`, zoom controls are enabled.
			 */
			enableZoomControls: boolean;

			/**
			 * If `true`, allows the loading of insecure resources from a secure origin.
			 */
			mixedContentMode: boolean;

			/**
			 * If `true`, scale contents to fit the web view.
			 */
			scalesPageToFit: boolean;

			/**
			 * URL to the web document.
			 */
			url: string;

			/**
			 * The User-Agent header used by the web view when requesting content.
			 */
			userAgent: string;

			/**
			 * Explicitly specifies if this web view handles touches.
			 */
			willHandleTouches: boolean;

			/**
			 * Enables using light touches to make a selection and activate mouseovers.
			 */
			lightTouchEnabled: boolean;

			/**
			 * Sets extra request headers for this web view to use on subsequent URL requests.
			 */
			requestHeaders: any;

			/**
			 * Manage the zoom-level of the current page.
			 */
			zoomLevel: number;

			/**
			 * A Boolean value indicating whether horizontal swipe gestures will trigger back-forward list navigations.
			 */
			allowsBackForwardNavigationGestures: boolean;

			/**
			 * Returns page title of webpage.
			 */
			readonly title: string;

			/**
			 * An estimate of what fraction of the current navigation has been loaded.
			 */
			readonly progress: number;

			/**
			 * The cache policy for the request.
			 */
			cachePolicy: number;

			/**
			 * The timeout interval for the request, in seconds.
			 */
			timeout: number;

			/**
			 * The level of granularity with which the user can interactively select content in the web view.
			 */
			readonly selectionGranularity: number;

			/**
			 * A Boolean value indicating whether all resources on the page have been loaded through
			 * securely encrypted connections.
			 */
			readonly secure: boolean;

			/**
			 * Sets the value of [html](Titanium.UI.WebView.html) property.
			 */
			setHtml(html: any, options?: any): void;

			/**
			 * Returns `true` if the web view can go back in its history list.
			 */
			canGoBack(): boolean;

			/**
			 * Returns `true` if the web view can go forward in its history list.
			 */
			canGoForward(): boolean;

			/**
			 * Evaluates a JavaScript expression inside the context of the web view and
			 * optionally, returns a result. If a callback function is passed in as second argument,
			 * the evaluation will take place asynchronously and the the callback function will be called with the result.
			 */
			evalJS(code: string, callback?: (param0: string) => any): string;

			/**
			 * Goes back one entry in the web view's history list, to the previous page.
			 */
			goBack(): void;

			/**
			 * Goes forward one entry in this web view's history list, if possible.
			 */
			goForward(): void;

			/**
			 * Pauses native webview plugins.
			 */
			pause(): void;

			/**
			 * Reloads the current webpage.
			 */
			reload(): void;

			/**
			 * Forces the web view to repaint its contents.
			 */
			repaint(): void;

			/**
			 * Releases memory when the web view is no longer needed.
			 */
			release(): void;

			/**
			 * Resume native webview plugins.
			 */
			resume(): void;

			/**
			 * Sets the basic authentication for this web view to use on subsequent URL requests.
			 */
			setBasicAuthentication(username: string, password: string, persistence: number): void;

			/**
			 * Stops loading a currently loading page.
			 */
			stopLoading(): void;

			/**
			 * Add native properties for observing for change.
			 */
			startListeningToProperties(propertyList: ReadonlyArray<string>): void;

			/**
			 * Remove native properties from observing.
			 */
			stopListeningToProperties(propertyList: ReadonlyArray<string>): void;

			/**
			 * Takes a snapshot of the view's visible viewport.
			 */
			takeSnapshot(callback: (param0: SnapshotResult) => any): void;

			/**
			 * Adds a user script.
			 */
			addUserScript(source: string, injectionTime: number, mainFrameOnly: boolean): void;

			/**
			 * Removes all associated user scripts.
			 */
			removeAllUserScripts(): void;

			/**
			 * Adds a script message handler.
			 */
			addScriptMessageHandler(handlerName: string): void;

			/**
			 * Removes a script message handler.
			 */
			removeScriptMessageHandler(name: string): void;

			/**
			 * An object which maintains a list of visited pages used to go back and forward to the most recent page.
			 */
			backForwardList(): BackForwardList;

			/**
			 * Gets the value of the <Titanium.UI.WebView.allowsLinkPreview> property.
			 */
			getAllowsLinkPreview(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.allowsLinkPreview> property.
			 */
			setAllowsLinkPreview(allowsLinkPreview: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.blacklistedURLs> property.
			 */
			getBlacklistedURLs(): string[];

			/**
			 * Sets the value of the <Titanium.UI.WebView.blacklistedURLs> property.
			 */
			setBlacklistedURLs(blacklistedURLs: ReadonlyArray<string>): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.data> property.
			 */
			getData(): Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Sets the value of the <Titanium.UI.WebView.data> property.
			 */
			setData(data: Titanium.Blob): void;

			/**
			 * Sets the value of the <Titanium.UI.WebView.data> property.
			 */
			setData(data: Titanium.Filesystem.File): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.disableBounce> property.
			 */
			getDisableBounce(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.disableBounce> property.
			 */
			setDisableBounce(disableBounce: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.disableContextMenu> property.
			 */
			getDisableContextMenu(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.disableContextMenu> property.
			 */
			setDisableContextMenu(disableContextMenu: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.enableJavascriptInterface> property.
			 */
			getEnableJavascriptInterface(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.enableJavascriptInterface> property.
			 */
			setEnableJavascriptInterface(enableJavascriptInterface: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.handlePlatformUrl> property.
			 */
			getHandlePlatformUrl(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.handlePlatformUrl> property.
			 */
			setHandlePlatformUrl(handlePlatformUrl: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.configuration> property.
			 */
			getConfiguration(): Titanium.UI.iOS.WebViewConfiguration;

			/**
			 * Sets the value of the <Titanium.UI.WebView.configuration> property.
			 */
			setConfiguration(configuration: Titanium.UI.iOS.WebViewConfiguration): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.allowedURLSchemes> property.
			 */
			getAllowedURLSchemes(): string[];

			/**
			 * Sets the value of the <Titanium.UI.WebView.allowedURLSchemes> property.
			 */
			setAllowedURLSchemes(allowedURLSchemes: ReadonlyArray<string>): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.hideLoadIndicator> property.
			 */
			getHideLoadIndicator(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.hideLoadIndicator> property.
			 */
			setHideLoadIndicator(hideLoadIndicator: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.html> property.
			 */
			getHtml(): string;

			/**
			 * Gets the value of the <Titanium.UI.WebView.keyboardDisplayRequiresUserAction> property.
			 */
			getKeyboardDisplayRequiresUserAction(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.keyboardDisplayRequiresUserAction> property.
			 */
			setKeyboardDisplayRequiresUserAction(keyboardDisplayRequiresUserAction: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.ignoreSslError> property.
			 */
			getIgnoreSslError(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.ignoreSslError> property.
			 */
			setIgnoreSslError(ignoreSslError: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.loading> property.
			 */
			getLoading(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.loading> property.
			 */
			setLoading(loading: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.onCreateWindow> property.
			 */
			getOnCreateWindow(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.UI.WebView.onCreateWindow> property.
			 */
			setOnCreateWindow(onCreateWindow: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.onlink> property.
			 */
			getOnlink(): (param0: OnLinkURLResponse) => any;

			/**
			 * Sets the value of the <Titanium.UI.WebView.onlink> property.
			 */
			setOnlink(onlink: (param0: OnLinkURLResponse) => any): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.overScrollMode> property.
			 */
			getOverScrollMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.WebView.overScrollMode> property.
			 */
			setOverScrollMode(overScrollMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.cacheMode> property.
			 */
			getCacheMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.WebView.cacheMode> property.
			 */
			setCacheMode(cacheMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.pluginState> property.
			 */
			getPluginState(): number;

			/**
			 * Sets the value of the <Titanium.UI.WebView.pluginState> property.
			 */
			setPluginState(pluginState: number): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.scrollsToTop> property.
			 */
			getScrollsToTop(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.scrollsToTop> property.
			 */
			setScrollsToTop(scrollsToTop: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.enableZoomControls> property.
			 */
			getEnableZoomControls(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.enableZoomControls> property.
			 */
			setEnableZoomControls(enableZoomControls: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.mixedContentMode> property.
			 */
			getMixedContentMode(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.mixedContentMode> property.
			 */
			setMixedContentMode(mixedContentMode: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.scalesPageToFit> property.
			 */
			getScalesPageToFit(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.scalesPageToFit> property.
			 */
			setScalesPageToFit(scalesPageToFit: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.url> property.
			 */
			getUrl(): string;

			/**
			 * Sets the value of the <Titanium.UI.WebView.url> property.
			 */
			setUrl(url: string): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.userAgent> property.
			 */
			getUserAgent(): string;

			/**
			 * Sets the value of the <Titanium.UI.WebView.userAgent> property.
			 */
			setUserAgent(userAgent: string): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.willHandleTouches> property.
			 */
			getWillHandleTouches(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.willHandleTouches> property.
			 */
			setWillHandleTouches(willHandleTouches: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.lightTouchEnabled> property.
			 */
			getLightTouchEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.lightTouchEnabled> property.
			 */
			setLightTouchEnabled(lightTouchEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.requestHeaders> property.
			 */
			getRequestHeaders(): any;

			/**
			 * Sets the value of the <Titanium.UI.WebView.requestHeaders> property.
			 */
			setRequestHeaders(requestHeaders: any): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.zoomLevel> property.
			 */
			getZoomLevel(): number;

			/**
			 * Sets the value of the <Titanium.UI.WebView.zoomLevel> property.
			 */
			setZoomLevel(zoomLevel: number): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.allowsBackForwardNavigationGestures> property.
			 */
			getAllowsBackForwardNavigationGestures(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.WebView.allowsBackForwardNavigationGestures> property.
			 */
			setAllowsBackForwardNavigationGestures(allowsBackForwardNavigationGestures: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.title> property.
			 */
			getTitle(): string;

			/**
			 * Gets the value of the <Titanium.UI.WebView.progress> property.
			 */
			getProgress(): number;

			/**
			 * Gets the value of the <Titanium.UI.WebView.cachePolicy> property.
			 */
			getCachePolicy(): number;

			/**
			 * Sets the value of the <Titanium.UI.WebView.cachePolicy> property.
			 */
			setCachePolicy(cachePolicy: number): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.timeout> property.
			 */
			getTimeout(): number;

			/**
			 * Sets the value of the <Titanium.UI.WebView.timeout> property.
			 */
			setTimeout(timeout: number): void;

			/**
			 * Gets the value of the <Titanium.UI.WebView.selectionGranularity> property.
			 */
			getSelectionGranularity(): number;

			/**
			 * Gets the value of the <Titanium.UI.WebView.secure> property.
			 */
			getSecure(): boolean;

		}
		/**
		 * The Window is an empty drawing surface or container.
		 */
		interface Window extends Titanium.UI.View {
			/**
			 * For lightweight windows, this property returns undefined.
			 * For heavyweight windows, this property contains a reference to the
			 * Android Activity object associated with this window.
			 */
			readonly activity: Titanium.Android.Activity;

			/**
			 * Title for the back button. This is only valid when the window is a child of a tab.
			 */
			backButtonTitle: string;

			/**
			 * The image to show as the back button. This is only valid when the window is a child of a tab.
			 */
			backButtonTitleImage: string | Titanium.Blob;

			/**
			 * Background color for the nav bar, as a color name or hex triplet.
			 */
			barColor: string;

			/**
			 * Background image for the nav bar, specified as a URL to a local image.
			 */
			barImage: string;

			/**
			 * Boolean value indicating if the application should exit when the Android
			 * Back button is pressed while the window is being shown or when the window
			 * is closed programmatically.
			 */
			exitOnClose: boolean;

			/**
			 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
			 */
			extendEdges: number[];

			/**
			 * Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.
			 */
			flagSecure: boolean;

			/**
			 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
			 */
			includeOpaqueBars: boolean;

			/**
			 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
			 */
			autoAdjustScrollViewInsets: boolean;

			/**
			 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
			 */
			extendSafeArea: boolean;

			/**
			 * Boolean value indicating if the window is fullscreen.
			 */
			fullscreen: boolean;

			/**
			 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
			 */
			homeIndicatorAutoHidden: boolean;

			/**
			 * Set this to true to hide the shadow image of the navigation bar.
			 */
			hideShadow: boolean;

			/**
			 * Set this to true to hide the navigation bar on swipe.
			 */
			hidesBarsOnSwipe: boolean;

			/**
			 * Set this to true to hide the navigation bar on tap.
			 */
			hidesBarsOnTap: boolean;

			/**
			 * Set this to true to hide the navigation bar when the keyboard appears.
			 */
			hidesBarsWhenKeyboardAppears: boolean;

			/**
			 * Set this to true to hide the back button of navigation bar.
			 */
			hidesBackButton: boolean;

			/**
			 * A Boolean value indicating whether the title should be displayed in a large format.
			 */
			largeTitleEnabled: string;

			/**
			 * The mode to use when displaying the title of the navigation bar.
			 */
			largeTitleDisplayMode: number;

			/**
			 * View to show in the left nav bar area.
			 */
			leftNavButton: Titanium.UI.View;

			/**
			 * An Array of views to show in the left nav bar area.
			 */
			leftNavButtons: Titanium.UI.View[];

			/**
			 * Indicates to open a modal window or not.
			 */
			modal: boolean;

			/**
			 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
			 */
			navBarHidden: boolean;

			/**
			 * The tintColor to apply to the navigation bar.
			 */
			navTintColor: string;

			/**
			 * The <Titanium.UI.NavigationWindow> instance hosting this window.
			 */
			readonly navigationWindow: Titanium.UI.NavigationWindow;

			/**
			 * Callback function that overrides the default behavior when the user presses the **Back**
			 * button.
			 */
			onBack: (param0: any) => any;

			/**
			 * Array of supported orientation modes, specified using the orientation
			 * constants defined in <Titanium.UI>.
			 */
			orientationModes: number[];

			/**
			 * Current orientation of the window.
			 */
			readonly orientation: number;

			/**
			 * View to show in the right nav bar area.
			 */
			rightNavButton: Titanium.UI.View;

			/**
			 * An Array of views to show in the right nav bar area.
			 */
			rightNavButtons: Titanium.UI.View[];

			/**
			 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
			 */
			readonly safeAreaPadding: Dimension;

			/**
			 * Shadow image for the navigation bar, specified as a URL to a local image..
			 */
			shadowImage: string;

			/**
			 * Boolean value to enable split action bar.
			 */
			splitActionBar: boolean;

			/**
			 * The status bar style associated with this window.
			 */
			statusBarStyle: number;

			/**
			 * Maintain a sustainable level of performance.
			 */
			sustainedPerformanceMode: boolean;

			/**
			 * Boolean value indicating if the user should be able to close a window using a swipe gesture.
			 */
			swipeToClose: boolean;

			/**
			 * Boolean value indicating if the tab bar should be hidden.
			 */
			tabBarHidden: boolean;

			/**
			 * Name of the theme to apply to the window.
			 */
			theme: string;

			/**
			 * Title of the window.
			 */
			title: string;

			/**
			 * Title text attributes of the window.
			 */
			titleAttributes: titleAttributesParams;

			/**
			 * View to show in the title area of the nav bar.
			 */
			titleControl: Titanium.UI.View;

			/**
			 * Image to show in the title area of the nav bar, specified as a local file path or URL.
			 */
			titleImage: string;

			/**
			 * Title prompt for the window.
			 */
			titlePrompt: string;

			/**
			 * Key identifying a string from the locale file to use for the window title.
			 */
			titleid: string;

			/**
			 * Key identifying a string from the locale file to use for the window title prompt.
			 */
			titlepromptid: string;

			/**
			 * Array of button objects to show in the window's toolbar.
			 */
			toolbar: any[];

			/**
			 * Use a transition animation when opening or closing windows in a
			 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
			 */
			transitionAnimation: Titanium.Proxy;

			/**
			 * Boolean value indicating if the nav bar is translucent.
			 */
			translucent: boolean;

			/**
			 * Loads a JavaScript file from a local URL.
			 */
			url: string;

			/**
			 * Additional flags to set on the Activity Window.
			 */
			windowFlags: number;

			/**
			 * Determines whether a heavyweight window's soft input area (ie software keyboard) is visible
			 * as it receives focus and how the window behaves in order to accomodate it while keeping its
			 * contents in view.
			 */
			windowSoftInputMode: number;

			/**
			 * Set the pixel format for the Activity's Window.
			 */
			windowPixelFormat: number;

			/**
			 * The type of transition used when activity is exiting.
			 */
			activityExitTransition: number;

			/**
			 * The type of transition used when activity is entering.
			 */
			activityEnterTransition: number;

			/**
			 * The type of transition used when returning from a previously started activity.
			 */
			activityReturnTransition: number;

			/**
			 * The type of transition used when reentering to a previously started activity.
			 */
			activityReenterTransition: number;

			/**
			 * The type of exit transition used when animating shared elements between two activities.
			 */
			activitySharedElementExitTransition: number;

			/**
			 * The type of enter transition used when animating shared elements between two activities.
			 */
			activitySharedElementEnterTransition: number;

			/**
			 * The type of return transition used when animating shared elements between two activities.
			 */
			activitySharedElementReturnTransition: number;

			/**
			 * The type of reenter transition used when animating shared elements between two activities.
			 */
			activitySharedElementReenterTransition: number;

			/**
			 * Adds a common UI element to participate in window transition animation.
			 */
			addSharedElement(view: any, transitionName: string): void;

			/**
			 * Closes the window.
			 */
			close(params?: any): void;

			/**
			 * Hides the navigation bar.
			 */
			hideNavBar(options?: any): void;

			/**
			 * Hides the tab bar. Must be called before opening the window.
			 */
			hideTabBar(): void;

			/**
			 * Opens the window.
			 */
			open(params?: openWindowParams): void;

			/**
			 * Clears all added shared elements.
			 */
			removeAllSharedElements(): void;

			/**
			 * Sets the array of items to show in the window's toolbar.
			 */
			setToolbar(items: ReadonlyArray<any>, params?: windowToolbarParam): void;

			/**
			 * Makes the navigation bar visible.
			 */
			showNavBar(options?: any): void;

			/**
			 * Makes the bottom toolbar visible.
			 */
			showToolbar(options?: any): void;

			/**
			 * Makes the bottom toolbar invisible.
			 */
			hideToolbar(options?: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.activity> property.
			 */
			getActivity(): Titanium.Android.Activity;

			/**
			 * Gets the value of the <Titanium.UI.Window.backButtonTitle> property.
			 */
			getBackButtonTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.backButtonTitle> property.
			 */
			setBackButtonTitle(backButtonTitle: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.backButtonTitleImage> property.
			 */
			getBackButtonTitleImage(): string | Titanium.Blob;

			/**
			 * Sets the value of the <Titanium.UI.Window.backButtonTitleImage> property.
			 */
			setBackButtonTitleImage(backButtonTitleImage: string): void;

			/**
			 * Sets the value of the <Titanium.UI.Window.backButtonTitleImage> property.
			 */
			setBackButtonTitleImage(backButtonTitleImage: Titanium.Blob): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.barColor> property.
			 */
			getBarColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.barColor> property.
			 */
			setBarColor(barColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.barImage> property.
			 */
			getBarImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.barImage> property.
			 */
			setBarImage(barImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.exitOnClose> property.
			 */
			getExitOnClose(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.exitOnClose> property.
			 */
			setExitOnClose(exitOnClose: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.extendEdges> property.
			 */
			getExtendEdges(): number[];

			/**
			 * Sets the value of the <Titanium.UI.Window.extendEdges> property.
			 */
			setExtendEdges(extendEdges: ReadonlyArray<number>): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.flagSecure> property.
			 */
			getFlagSecure(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.flagSecure> property.
			 */
			setFlagSecure(flagSecure: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.includeOpaqueBars> property.
			 */
			getIncludeOpaqueBars(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.includeOpaqueBars> property.
			 */
			setIncludeOpaqueBars(includeOpaqueBars: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.autoAdjustScrollViewInsets> property.
			 */
			getAutoAdjustScrollViewInsets(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.autoAdjustScrollViewInsets> property.
			 */
			setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.extendSafeArea> property.
			 */
			getExtendSafeArea(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.extendSafeArea> property.
			 */
			setExtendSafeArea(extendSafeArea: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.fullscreen> property.
			 */
			getFullscreen(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.fullscreen> property.
			 */
			setFullscreen(fullscreen: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.homeIndicatorAutoHidden> property.
			 */
			getHomeIndicatorAutoHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.homeIndicatorAutoHidden> property.
			 */
			setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.hideShadow> property.
			 */
			getHideShadow(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.hideShadow> property.
			 */
			setHideShadow(hideShadow: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.hidesBarsOnSwipe> property.
			 */
			getHidesBarsOnSwipe(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.hidesBarsOnSwipe> property.
			 */
			setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.hidesBarsOnTap> property.
			 */
			getHidesBarsOnTap(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.hidesBarsOnTap> property.
			 */
			setHidesBarsOnTap(hidesBarsOnTap: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.hidesBarsWhenKeyboardAppears> property.
			 */
			getHidesBarsWhenKeyboardAppears(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.hidesBarsWhenKeyboardAppears> property.
			 */
			setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.hidesBackButton> property.
			 */
			getHidesBackButton(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.hidesBackButton> property.
			 */
			setHidesBackButton(hidesBackButton: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.largeTitleEnabled> property.
			 */
			getLargeTitleEnabled(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.largeTitleEnabled> property.
			 */
			setLargeTitleEnabled(largeTitleEnabled: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.largeTitleDisplayMode> property.
			 */
			getLargeTitleDisplayMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.largeTitleDisplayMode> property.
			 */
			setLargeTitleDisplayMode(largeTitleDisplayMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.leftNavButton> property.
			 */
			getLeftNavButton(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.Window.leftNavButton> property.
			 */
			setLeftNavButton(leftNavButton: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.leftNavButtons> property.
			 */
			getLeftNavButtons(): Titanium.UI.View[];

			/**
			 * Sets the value of the <Titanium.UI.Window.leftNavButtons> property.
			 */
			setLeftNavButtons(leftNavButtons: any[]): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.modal> property.
			 */
			getModal(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.modal> property.
			 */
			setModal(modal: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.navBarHidden> property.
			 */
			getNavBarHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.navBarHidden> property.
			 */
			setNavBarHidden(navBarHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.navTintColor> property.
			 */
			getNavTintColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.navTintColor> property.
			 */
			setNavTintColor(navTintColor: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.navigationWindow> property.
			 */
			getNavigationWindow(): Titanium.UI.NavigationWindow;

			/**
			 * Gets the value of the <Titanium.UI.Window.onBack> property.
			 */
			getOnBack(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.UI.Window.onBack> property.
			 */
			setOnBack(onBack: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.orientationModes> property.
			 */
			getOrientationModes(): number[];

			/**
			 * Sets the value of the <Titanium.UI.Window.orientationModes> property.
			 */
			setOrientationModes(orientationModes: ReadonlyArray<number>): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.orientation> property.
			 */
			getOrientation(): number;

			/**
			 * Gets the value of the <Titanium.UI.Window.rightNavButton> property.
			 */
			getRightNavButton(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.Window.rightNavButton> property.
			 */
			setRightNavButton(rightNavButton: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.rightNavButtons> property.
			 */
			getRightNavButtons(): Titanium.UI.View[];

			/**
			 * Sets the value of the <Titanium.UI.Window.rightNavButtons> property.
			 */
			setRightNavButtons(rightNavButtons: any[]): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.safeAreaPadding> property.
			 */
			getSafeAreaPadding(): Dimension;

			/**
			 * Gets the value of the <Titanium.UI.Window.shadowImage> property.
			 */
			getShadowImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.shadowImage> property.
			 */
			setShadowImage(shadowImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.splitActionBar> property.
			 */
			getSplitActionBar(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.splitActionBar> property.
			 */
			setSplitActionBar(splitActionBar: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.statusBarStyle> property.
			 */
			getStatusBarStyle(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.statusBarStyle> property.
			 */
			setStatusBarStyle(statusBarStyle: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.sustainedPerformanceMode> property.
			 */
			getSustainedPerformanceMode(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.sustainedPerformanceMode> property.
			 */
			setSustainedPerformanceMode(sustainedPerformanceMode: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.swipeToClose> property.
			 */
			getSwipeToClose(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.swipeToClose> property.
			 */
			setSwipeToClose(swipeToClose: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.tabBarHidden> property.
			 */
			getTabBarHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.tabBarHidden> property.
			 */
			setTabBarHidden(tabBarHidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.theme> property.
			 */
			getTheme(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.theme> property.
			 */
			setTheme(theme: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.titleAttributes> property.
			 */
			getTitleAttributes(): titleAttributesParams;

			/**
			 * Sets the value of the <Titanium.UI.Window.titleAttributes> property.
			 */
			setTitleAttributes(titleAttributes: titleAttributesParams): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.titleControl> property.
			 */
			getTitleControl(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.UI.Window.titleControl> property.
			 */
			setTitleControl(titleControl: any): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.titleImage> property.
			 */
			getTitleImage(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.titleImage> property.
			 */
			setTitleImage(titleImage: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.titlePrompt> property.
			 */
			getTitlePrompt(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.titlePrompt> property.
			 */
			setTitlePrompt(titlePrompt: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.titleid> property.
			 */
			getTitleid(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.titleid> property.
			 */
			setTitleid(titleid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.titlepromptid> property.
			 */
			getTitlepromptid(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.titlepromptid> property.
			 */
			setTitlepromptid(titlepromptid: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.toolbar> property.
			 */
			getToolbar(): any[];

			/**
			 * Gets the value of the <Titanium.UI.Window.transitionAnimation> property.
			 */
			getTransitionAnimation(): Titanium.Proxy;

			/**
			 * Sets the value of the <Titanium.UI.Window.transitionAnimation> property.
			 */
			setTransitionAnimation(transitionAnimation: Titanium.Proxy): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.translucent> property.
			 */
			getTranslucent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Window.translucent> property.
			 */
			setTranslucent(translucent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.url> property.
			 */
			getUrl(): string;

			/**
			 * Sets the value of the <Titanium.UI.Window.url> property.
			 */
			setUrl(url: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.windowFlags> property.
			 */
			getWindowFlags(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.windowFlags> property.
			 */
			setWindowFlags(windowFlags: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.windowSoftInputMode> property.
			 */
			getWindowSoftInputMode(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.windowSoftInputMode> property.
			 */
			setWindowSoftInputMode(windowSoftInputMode: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.windowPixelFormat> property.
			 */
			getWindowPixelFormat(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.windowPixelFormat> property.
			 */
			setWindowPixelFormat(windowPixelFormat: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.activityExitTransition> property.
			 */
			getActivityExitTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.activityExitTransition> property.
			 */
			setActivityExitTransition(activityExitTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.activityEnterTransition> property.
			 */
			getActivityEnterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.activityEnterTransition> property.
			 */
			setActivityEnterTransition(activityEnterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.activityReturnTransition> property.
			 */
			getActivityReturnTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.activityReturnTransition> property.
			 */
			setActivityReturnTransition(activityReturnTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.activityReenterTransition> property.
			 */
			getActivityReenterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.activityReenterTransition> property.
			 */
			setActivityReenterTransition(activityReenterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.activitySharedElementExitTransition> property.
			 */
			getActivitySharedElementExitTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.activitySharedElementExitTransition> property.
			 */
			setActivitySharedElementExitTransition(activitySharedElementExitTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.activitySharedElementEnterTransition> property.
			 */
			getActivitySharedElementEnterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.activitySharedElementEnterTransition> property.
			 */
			setActivitySharedElementEnterTransition(activitySharedElementEnterTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.activitySharedElementReturnTransition> property.
			 */
			getActivitySharedElementReturnTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.activitySharedElementReturnTransition> property.
			 */
			setActivitySharedElementReturnTransition(activitySharedElementReturnTransition: number): void;

			/**
			 * Gets the value of the <Titanium.UI.Window.activitySharedElementReenterTransition> property.
			 */
			getActivitySharedElementReenterTransition(): number;

			/**
			 * Sets the value of the <Titanium.UI.Window.activitySharedElementReenterTransition> property.
			 */
			setActivitySharedElementReenterTransition(activitySharedElementReenterTransition: number): void;

		}

		/**
		 * A set of constants for the styles available for <Titanium.UI.ActivityIndicator> objects.
		 */
		namespace ActivityIndicatorStyle {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Large white spinning indicator.
			 */
			const BIG: number;

			/**
			 * Small gray spinning indicator.
			 */
			const DARK: number;

			/**
			 * Large gray spinning indicator.
			 */
			const BIG_DARK: number;

			/**
			 * Small white spinning indicator (default).
			 */
			const PLAIN: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event?: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Gets the value of the <Titanium.UI.ActivityIndicatorStyle.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.ActivityIndicatorStyle.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.ActivityIndicatorStyle.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.UI.ActivityIndicatorStyle.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.UI.ActivityIndicatorStyle.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.UI.ActivityIndicatorStyle.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		}

		/**
		 * The Android-specific UI capabilities. All properties, methods and events in this namespace will
		 * only work on Android systems.
		 */
		namespace Android {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Window flag which makes the Android system's navigation bar semi-transparent.
			 */
			const FLAG_TRANSLUCENT_NAVIGATION: number;

			/**
			 * Window flag which makes the Android system's top status bar semi-transparent.
			 */
			const FLAG_TRANSLUCENT_STATUS: number;

			/**
			 * Raw bit controlling whether the right/bottom edge is clipped to its container, based on the gravity direction being applied.
			 */
			const GRAVITY_AXIS_CLIP: number;

			/**
			 * Raw bit controlling how the right/bottom edge is placed.
			 */
			const GRAVITY_AXIS_PULL_AFTER: number;

			/**
			 * Raw bit controlling how the left/top edge is placed.
			 */
			const GRAVITY_AXIS_PULL_BEFORE: number;

			/**
			 * Raw bit indicating the gravity for an axis has been specified.
			 */
			const GRAVITY_AXIS_SPECIFIED: number;

			/**
			 * Bits defining the horizontal axis.
			 */
			const GRAVITY_AXIS_X_SHIFT: number;

			/**
			 * Bits defining the vertical axis.
			 */
			const GRAVITY_AXIS_Y_SHIFT: number;

			/**
			 * Push object to the bottom of its container, not changing its size.
			 */
			const GRAVITY_BOTTOM: number;

			/**
			 * Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.
			 */
			const GRAVITY_CENTER: number;

			/**
			 * Place object in the horizontal center of its container, not changing its size.
			 */
			const GRAVITY_CENTER_HORIZONTAL: number;

			/**
			 * Place object in the vertical center of its container, not changing its size.
			 */
			const GRAVITY_CENTER_VERTICAL: number;

			/**
			 * Flag to clip the edges of the object to its container along the horizontal axis.
			 */
			const GRAVITY_CLIP_HORIZONTAL: number;

			/**
			 * Flag to clip the edges of the object to its container along the vertical axis.
			 */
			const GRAVITY_CLIP_VERTICAL: number;

			/**
			 * Special constant to enable clipping to an overall display along the horizontal dimension.
			 */
			const GRAVITY_DISPLAY_CLIP_HORIZONTAL: number;

			/**
			 * Special constant to enable clipping to an overall display along the vertical dimension.
			 */
			const GRAVITY_DISPLAY_CLIP_VERTICAL: number;

			/**
			 * Push object to x-axis position at the end of its container, not changing its size.
			 */
			const GRAVITY_END: number;

			/**
			 * Grow the horizontal and vertical size of the object if needed so it completely fills its container.
			 */
			const GRAVITY_FILL: number;

			/**
			 * Grow the horizontal size of the object if needed so it completely fills its container.
			 */
			const GRAVITY_FILL_HORIZONTAL: number;

			/**
			 * Grow the vertical size of the object if needed so it completely fills its container.
			 */
			const GRAVITY_FILL_VERTICAL: number;

			/**
			 * Binary mask to get the absolute horizontal gravity of a gravity.
			 */
			const GRAVITY_HORIZONTAL_GRAVITY_MASK: number;

			/**
			 * Push object to the left of its container, not changing its size.
			 */
			const GRAVITY_LEFT: number;

			/**
			 * Constant indicating that no gravity has been set
			 */
			const GRAVITY_NO_GRAVITY: number;

			/**
			 * Binary mask for the horizontal gravity and script specific direction bit.
			 */
			const GRAVITY_RELATIVE_HORIZONTAL_GRAVITY_MASK: number;

			/**
			 * Raw bit controlling whether the layout direction is relative or not (GRAVITY_START/GRAVITY_END instead of absolute GRAVITY_LEFT/GRAVITY_RIGHT).
			 */
			const GRAVITY_RELATIVE_LAYOUT_DIRECTION: number;

			/**
			 * Push object to the right of its container, not changing its size.
			 */
			const GRAVITY_RIGHT: number;

			/**
			 * Push object to x-axis position at the start of its container, not changing its size.
			 */
			const GRAVITY_START: number;

			/**
			 * Push object to the top of its container, not changing its size.
			 */
			const GRAVITY_TOP: number;

			/**
			 * Binary mask to get the vertical gravity of a gravity.
			 */
			const GRAVITY_VERTICAL_GRAVITY_MASK: number;

			/**
			 * Converts all detectable types of data into clickable links.
			 */
			const LINKIFY_ALL: number;

			/**
			 * Converts strings formatted as email addresses into clickable links.
			 */
			const LINKIFY_EMAIL_ADDRESSES: number;

			/**
			 * Converts strings formatted as addresses into clickable links.
			 */
			const LINKIFY_MAP_ADDRESSES: number;

			/**
			 * Converts strings formatted as phone numbers into clickable links.
			 */
			const LINKIFY_PHONE_NUMBERS: number;

			/**
			 * Converts strings formatted as URLs into clickable links.
			 */
			const LINKIFY_WEB_URLS: number;

			/**
			 * Always allow a user to over-scroll this view, provided it is a view that can scroll.
			 */
			const OVER_SCROLL_ALWAYS: number;

			/**
			 * Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll.
			 */
			const OVER_SCROLL_IF_CONTENT_SCROLLS: number;

			/**
			 * Never allow a user to over-scroll this view.
			 */
			const OVER_SCROLL_NEVER: number;

			/**
			 * Android A_8 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_A_8: number;

			/**
			 * Android LA_88 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_LA_88: number;

			/**
			 * Android L_8 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_L_8: number;

			/**
			 * Android OPAQUE pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_OPAQUE: number;

			/**
			 * Android RGBA_4444 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGBA_4444: number;

			/**
			 * Android RGBA_5551 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGBA_5551: number;

			/**
			 * Android RGBA_8888 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGBA_8888: number;

			/**
			 * Android RGBX_8888 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGBX_8888: number;

			/**
			 * Android RGB_332 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGB_332: number;

			/**
			 * Android RGB_565 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGB_565: number;

			/**
			 * Android RGB_888 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGB_888: number;

			/**
			 * Android TRANSLUCENT pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_TRANSLUCENT: number;

			/**
			 * Android A_8 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format can
			 * improve image clarity and performance.
			 */
			const PIXEL_FORMAT_TRANSPARENT: number;

			/**
			 * Android UNKNOWN pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_UNKNOWN: number;

			/**
			 * Display <Titanium.UI.Android.ProgressIndicator> as a modal dialog. (default)
			 */
			const PROGRESS_INDICATOR_DIALOG: number;

			/**
			 * Display <Titanium.UI.Android.ProgressIndicator> as a horizontal progress bar in the title of
			 * the window.
			 */
			const PROGRESS_INDICATOR_STATUS_BAR: number;

			/**
			 * Used with the <Titanium.UI.Android.ProgressIndicator.type> property to indicate an ongoing
			 * activity of indeterminate length. (default)
			 */
			const PROGRESS_INDICATOR_INDETERMINANT: number;

			/**
			 * Used with the <Titanium.UI.Android.ProgressIndicator.type> property to indicate an ongoing
			 * activity of determinate length.
			 */
			const PROGRESS_INDICATOR_DETERMINANT: number;

			/**
			 * Pan the current heavyweight window when the input method (ie software keyboard) is shown, to
			 * ensure that its contents are not obscured.
			 */
			const SOFT_INPUT_ADJUST_PAN: number;

			/**
			 * Resize the current heavyweight window when the input method (ie software keyboard) is shown,
			 * to ensure that its contents are not obscured.
			 */
			const SOFT_INPUT_ADJUST_RESIZE: number;

			/**
			 * Use the system-default behavior to determine how the soft input area (ie software keyboard)
			 * is accomodated by the current heavyweight window when it receives focus (default.)
			 */
			const SOFT_INPUT_ADJUST_UNSPECIFIED: number;

			/**
			 * Always hide the soft input area (ie software keyboard) when the current heavyweight window
			 * receives focus.
			 */
			const SOFT_INPUT_STATE_ALWAYS_HIDDEN: number;

			/**
			 * Always show the soft input area (ie software keyboard) when the current heavyweight window
			 * receives focus.
			 */
			const SOFT_INPUT_STATE_ALWAYS_VISIBLE: number;

			/**
			 * Attempt to hide the soft input area (ie software keyboard) when the current heavyweight
			 * window receives focus.
			 */
			const SOFT_INPUT_STATE_HIDDEN: number;

			/**
			 * Use the system-default behavior to determine whether to show the soft input area
			 * (ie software keyboard) when the current heavyweight window receives focus.
			 */
			const SOFT_INPUT_STATE_UNSPECIFIED: number;

			/**
			 * Attempt to show the soft input area (ie software keyboard) when the current heavyweight
			 * window receives focus.
			 */
			const SOFT_INPUT_STATE_VISIBLE: number;

			/**
			 * Use Android default behavior to handle keyboard visibility when a view receives focus.
			 * (default)
			 */
			const SOFT_KEYBOARD_DEFAULT_ON_FOCUS: number;

			/**
			 * Attempt to hide the soft keyboard when a view receives focus. Note: system can override
			 * request.
			 */
			const SOFT_KEYBOARD_HIDE_ON_FOCUS: number;

			/**
			 * Attempt to show the soft keyboard when a view receives focus. Note: system can override
			 * request.
			 */
			const SOFT_KEYBOARD_SHOW_ON_FOCUS: number;

			/**
			 * Display a checkbox.
			 */
			const SWITCH_STYLE_CHECKBOX: number;

			/**
			 * Display a toggle button.
			 */
			const SWITCH_STYLE_TOGGLEBUTTON: number;

			/**
			 * Display a switch.
			 */
			const SWITCH_STYLE_SWITCH: number;

			/**
			 * Use with [WebView.pluginState](Titanium.UI.WebView.pluginState) to disable plugins in a web view.
			 */
			const WEBVIEW_PLUGINS_OFF: number;

			/**
			 * Use with [WebView.pluginState](Titanium.UI.WebView.pluginState) to enable plugins in a web view.
			 */
			const WEBVIEW_PLUGINS_ON: number;

			/**
			 * Display a placeholder and only load plugins when user selects it.
			 */
			const WEBVIEW_PLUGINS_ON_DEMAND: number;

			/**
			 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
			 */
			const WEBVIEW_LOAD_DEFAULT: number;

			/**
			 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
			 */
			const WEBVIEW_LOAD_NO_CACHE: number;

			/**
			 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
			 */
			const WEBVIEW_LOAD_CACHE_ONLY: number;

			/**
			 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
			 */
			const WEBVIEW_LOAD_CACHE_ELSE_NETWORK: number;

			/**
			 * Moves views in or out from the edges of the scene.
			 */
			const TRANSITION_EXPLODE: number;

			/**
			 * Fades in the views.
			 */
			const TRANSITION_FADE_IN: number;

			/**
			 * Fades out the views.
			 */
			const TRANSITION_FADE_OUT: number;

			/**
			 * Moves views to top.
			 */
			const TRANSITION_SLIDE_TOP: number;

			/**
			 * Moves views to right.
			 */
			const TRANSITION_SLIDE_RIGHT: number;

			/**
			 * Moves views to bottom.
			 */
			const TRANSITION_SLIDE_BOTTOM: number;

			/**
			 * Moves views to left.
			 */
			const TRANSITION_SLIDE_LEFT: number;

			/**
			 * Captures layout bounds of target views before and after the scene change and animates those changes during the transition.
			 */
			const TRANSITION_CHANGE_BOUNDS: number;

			/**
			 * Captures the clip bounds before and after the scene change and animates those changes during the transition.
			 */
			const TRANSITION_CHANGE_CLIP_BOUNDS: number;

			/**
			 * Captures scale and rotation for Views before and after the scene change and animates those changes during the transition.
			 */
			const TRANSITION_CHANGE_TRANSFORM: number;

			/**
			 * Captures an ImageView's matrix before and after the scene change and animates it during the transition.
			 */
			const TRANSITION_CHANGE_IMAGE_TRANSFORM: number;

			/**
			 * Resets transition to platform default.
			 */
			const TRANSITION_NONE: number;

			/**
			 * The default TabGroup style that places the Tabs bellow the ActionBar and above the Window content.
			 */
			const TABS_STYLE_DEFAULT: number;

			/**
			 * TabGroup style taking advantage of a bottom navigation controller for switching between tabs.
			 */
			const TABS_STYLE_BOTTOM_NAVIGATION: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Hides the soft keyboard.
			 */
			function hideSoftKeyboard(): void;

			/**
			 * Opens an application preferences dialog, using the native Android system settings interface,
			 * defined by the platform-specific `preferences.xml` and `array.xml` files.
			 */
			function openPreferences(): void;

			/**
			 * Gets the value of the <Titanium.UI.Android.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Android.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Android.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.UI.Android.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.UI.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.UI.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

			/**
			 * Creates and returns an instance of <Titanium.UI.Android.CardView>.
			 */
			function createCardView(parameters?: any): Titanium.UI.Android.CardView;

			/**
			 * Creates and returns an instance of <Titanium.UI.Android.DrawerLayout>.
			 */
			function createDrawerLayout(parameters?: any): Titanium.UI.Android.DrawerLayout;

			/**
			 * Creates and returns an instance of <Titanium.UI.Android.ProgressIndicator>.
			 */
			function createProgressIndicator(parameters?: any): Titanium.UI.Android.ProgressIndicator;

			/**
			 * Creates and returns an instance of <Titanium.UI.Android.SearchView>.
			 */
			function createSearchView(parameters?: any): Titanium.UI.Android.SearchView;

			/**
			 * CardView provides a layout container with rounded corners and a shadow indicating the view is elevated.
			 */
			interface CardView extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Background color for CardView as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * Disabled background color of the view, as a color name or hex triplet.
				 */
				backgroundDisabledColor: string;

				/**
				 * Disabled background image for the view, specified as a local file path or URL.
				 */
				backgroundDisabledImage: string;

				/**
				 * Focused background color of the view, as a color name or hex triplet.
				 */
				backgroundFocusedColor: string;

				/**
				 * Focused background image for the view, specified as a local file path or URL.
				 */
				backgroundFocusedImage: string;

				/**
				 * Selected background color of the view, as a color name or hex triplet.
				 */
				backgroundSelectedColor: string;

				/**
				 * Selected background image url for the view, specified as a local file path or URL.
				 */
				backgroundSelectedImage: string;

				/**
				 * Corner radius for CardView.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * Array of this view's child views.
				 */
				readonly children: Titanium.UI.View[];

				/**
				 * Elevation for CardView.
				 */
				elevation: number;

				/**
				 * Whether view should be focusable while navigating with the trackball.
				 */
				focusable: boolean;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Sets the behavior when hiding an object to release or keep the free space
				 */
				hiddenBehavior: number;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * When on, animate call overrides current animation if applicable.
				 */
				overrideCurrentAnimation: boolean;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * Clockwise 2D rotation of the view in degrees.
				 */
				rotation: number;

				/**
				 * Clockwise rotation of the view in degrees (x-axis).
				 */
				rotationX: number;

				/**
				 * Clockwise rotation of the view in degrees (y-axis).
				 */
				rotationY: number;

				/**
				 * Scaling of the view in x-axis in pixels.
				 */
				scaleX: number;

				/**
				 * Scaling of the view in y-axis in pixels.
				 */
				scaleY: number;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
				 */
				softKeyboardOnFocus: number;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
				 */
				touchFeedback: boolean;

				/**
				 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
				 */
				touchFeedbackColor: string;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Horizontal location of the view relative to its left position in pixels.
				 */
				translationX: number;

				/**
				 * Vertical location of the view relative to its top position in pixels.
				 */
				translationY: number;

				/**
				 * Depth of the view relative to its elevation in pixels.
				 */
				translationZ: number;

				/**
				 * A name to identify this view in activity transition.
				 */
				transitionName: string;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Determines whether to keep the device screen on.
				 */
				keepScreenOn: boolean;

				/**
				 * Background color for CardView as a color name or hex triplet.
				 */
				cardBackgroundColor: string;

				/**
				 * Corner radius for CardView.
				 */
				cardCornerRadius: number;

				/**
				 * Elevation for CardView.
				 */
				cardElevation: number;

				/**
				 * Maximum Elevation for CardView.
				 */
				cardMaxElevation: number;

				/**
				 * Maximum Elevation for CardView.
				 */
				maxElevation: number;

				/**
				 * Add padding to CardView on API level 20 and before to prevent intersections between
				 * the Card content and rounded corners.
				 */
				cardPreventCornerOverlap: boolean;

				/**
				 * Add padding to CardView on API level 20 and before to prevent intersections between
				 * the Card content and rounded corners.
				 */
				preventCornerOverlap: boolean;

				/**
				 * Add padding on API level 21 and above to have the same measurements with previous versions.
				 */
				cardUseCompatPadding: boolean;

				/**
				 * Add padding on API level 21 and above to have the same measurements with previous versions.
				 */
				useCompatPadding: boolean;

				/**
				 * Inner padding between the edges of the Card and children of the CardView.
				 */
				contentPadding: number;

				/**
				 * Inner padding between the edges of the Card and children of the CardView.
				 */
				padding: number;

				/**
				 * Inner padding between the bottom edge of the Card and children of the CardView.
				 */
				contentPaddingBottom: number;

				/**
				 * Inner padding between the bottom edge of the Card and children of the CardView.
				 */
				paddingBottom: number;

				/**
				 * Inner padding between the left edge of the Card and children of the CardView.
				 */
				contentPaddingLeft: number;

				/**
				 * Inner padding between the left edge of the Card and children of the CardView.
				 */
				paddingLeft: number;

				/**
				 * Inner padding between the right edge of the Card and children of the CardView.
				 */
				contentPaddingRight: number;

				/**
				 * Inner padding between the right edge of the Card and children of the CardView.
				 */
				paddingRight: number;

				/**
				 * Inner padding between the top edge of the Card and children of the CardView.
				 */
				contentPaddingTop: number;

				/**
				 * Inner padding between the top edge of the Card and children of the CardView.
				 */
				paddingTop: number;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any): void;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any[]): void;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove(view: any): void;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren(): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.backgroundDisabledColor> property.
				 */
				getBackgroundDisabledColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.backgroundDisabledColor> property.
				 */
				setBackgroundDisabledColor(backgroundDisabledColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.backgroundDisabledImage> property.
				 */
				getBackgroundDisabledImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.backgroundDisabledImage> property.
				 */
				setBackgroundDisabledImage(backgroundDisabledImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.backgroundFocusedColor> property.
				 */
				getBackgroundFocusedColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.backgroundFocusedColor> property.
				 */
				setBackgroundFocusedColor(backgroundFocusedColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.backgroundFocusedImage> property.
				 */
				getBackgroundFocusedImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.backgroundFocusedImage> property.
				 */
				setBackgroundFocusedImage(backgroundFocusedImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.backgroundSelectedColor> property.
				 */
				getBackgroundSelectedColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.backgroundSelectedColor> property.
				 */
				setBackgroundSelectedColor(backgroundSelectedColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.backgroundSelectedImage> property.
				 */
				getBackgroundSelectedImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.backgroundSelectedImage> property.
				 */
				setBackgroundSelectedImage(backgroundSelectedImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.children> property.
				 */
				getChildren(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.elevation> property.
				 */
				getElevation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.elevation> property.
				 */
				setElevation(elevation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.focusable> property.
				 */
				getFocusable(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.focusable> property.
				 */
				setFocusable(focusable: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.hiddenBehavior> property.
				 */
				getHiddenBehavior(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.hiddenBehavior> property.
				 */
				setHiddenBehavior(hiddenBehavior: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.overrideCurrentAnimation> property.
				 */
				getOverrideCurrentAnimation(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.overrideCurrentAnimation> property.
				 */
				setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.rotation> property.
				 */
				getRotation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.rotation> property.
				 */
				setRotation(rotation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.rotationX> property.
				 */
				getRotationX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.rotationX> property.
				 */
				setRotationX(rotationX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.rotationY> property.
				 */
				getRotationY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.rotationY> property.
				 */
				setRotationY(rotationY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.scaleX> property.
				 */
				getScaleX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.scaleX> property.
				 */
				setScaleX(scaleX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.scaleY> property.
				 */
				getScaleY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.scaleY> property.
				 */
				setScaleY(scaleY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.softKeyboardOnFocus> property.
				 */
				getSoftKeyboardOnFocus(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.softKeyboardOnFocus> property.
				 */
				setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.touchFeedback> property.
				 */
				getTouchFeedback(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.touchFeedback> property.
				 */
				setTouchFeedback(touchFeedback: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.touchFeedbackColor> property.
				 */
				getTouchFeedbackColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.touchFeedbackColor> property.
				 */
				setTouchFeedbackColor(touchFeedbackColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.translationX> property.
				 */
				getTranslationX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.translationX> property.
				 */
				setTranslationX(translationX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.translationY> property.
				 */
				getTranslationY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.translationY> property.
				 */
				setTranslationY(translationY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.translationZ> property.
				 */
				getTranslationZ(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.translationZ> property.
				 */
				setTranslationZ(translationZ: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.transitionName> property.
				 */
				getTransitionName(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.transitionName> property.
				 */
				setTransitionName(transitionName: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.keepScreenOn> property.
				 */
				getKeepScreenOn(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.keepScreenOn> property.
				 */
				setKeepScreenOn(keepScreenOn: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.cardBackgroundColor> property.
				 */
				getCardBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.cardBackgroundColor> property.
				 */
				setCardBackgroundColor(cardBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.cardCornerRadius> property.
				 */
				getCardCornerRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.cardCornerRadius> property.
				 */
				setCardCornerRadius(cardCornerRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.cardElevation> property.
				 */
				getCardElevation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.cardElevation> property.
				 */
				setCardElevation(cardElevation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.cardMaxElevation> property.
				 */
				getCardMaxElevation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.cardMaxElevation> property.
				 */
				setCardMaxElevation(cardMaxElevation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.maxElevation> property.
				 */
				getMaxElevation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.maxElevation> property.
				 */
				setMaxElevation(maxElevation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.cardPreventCornerOverlap> property.
				 */
				getCardPreventCornerOverlap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.cardPreventCornerOverlap> property.
				 */
				setCardPreventCornerOverlap(cardPreventCornerOverlap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.preventCornerOverlap> property.
				 */
				getPreventCornerOverlap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.preventCornerOverlap> property.
				 */
				setPreventCornerOverlap(preventCornerOverlap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.cardUseCompatPadding> property.
				 */
				getCardUseCompatPadding(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.cardUseCompatPadding> property.
				 */
				setCardUseCompatPadding(cardUseCompatPadding: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.useCompatPadding> property.
				 */
				getUseCompatPadding(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.useCompatPadding> property.
				 */
				setUseCompatPadding(useCompatPadding: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.contentPadding> property.
				 */
				getContentPadding(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.contentPadding> property.
				 */
				setContentPadding(contentPadding: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.padding> property.
				 */
				getPadding(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.padding> property.
				 */
				setPadding(padding: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.contentPaddingBottom> property.
				 */
				getContentPaddingBottom(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.contentPaddingBottom> property.
				 */
				setContentPaddingBottom(contentPaddingBottom: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.paddingBottom> property.
				 */
				getPaddingBottom(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.paddingBottom> property.
				 */
				setPaddingBottom(paddingBottom: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.contentPaddingLeft> property.
				 */
				getContentPaddingLeft(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.contentPaddingLeft> property.
				 */
				setContentPaddingLeft(contentPaddingLeft: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.paddingLeft> property.
				 */
				getPaddingLeft(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.paddingLeft> property.
				 */
				setPaddingLeft(paddingLeft: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.contentPaddingRight> property.
				 */
				getContentPaddingRight(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.contentPaddingRight> property.
				 */
				setContentPaddingRight(contentPaddingRight: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.paddingRight> property.
				 */
				getPaddingRight(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.paddingRight> property.
				 */
				setPaddingRight(paddingRight: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.contentPaddingTop> property.
				 */
				getContentPaddingTop(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.contentPaddingTop> property.
				 */
				setContentPaddingTop(contentPaddingTop: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.CardView.paddingTop> property.
				 */
				getPaddingTop(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.CardView.paddingTop> property.
				 */
				setPaddingTop(paddingTop: number): void;

			}
			/**
			 * A panel that displays the app's main navigation options on the left edge of the screen.
			 */
			interface DrawerLayout extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * Disabled background color of the view, as a color name or hex triplet.
				 */
				backgroundDisabledColor: string;

				/**
				 * Disabled background image for the view, specified as a local file path or URL.
				 */
				backgroundDisabledImage: string;

				/**
				 * Focused background color of the view, as a color name or hex triplet.
				 */
				backgroundFocusedColor: string;

				/**
				 * Focused background image for the view, specified as a local file path or URL.
				 */
				backgroundFocusedImage: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Selected background color of the view, as a color name or hex triplet.
				 */
				backgroundSelectedColor: string;

				/**
				 * Selected background image url for the view, specified as a local file path or URL.
				 */
				backgroundSelectedImage: string;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * Array of this view's child views.
				 */
				readonly children: Titanium.UI.View[];

				/**
				 * Base elevation of the view relative to its parent in pixels.
				 */
				elevation: number;

				/**
				 * Whether view should be focusable while navigating with the trackball.
				 */
				focusable: boolean;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Sets the behavior when hiding an object to release or keep the free space
				 */
				hiddenBehavior: number;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * When on, animate call overrides current animation if applicable.
				 */
				overrideCurrentAnimation: boolean;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * Clockwise 2D rotation of the view in degrees.
				 */
				rotation: number;

				/**
				 * Clockwise rotation of the view in degrees (x-axis).
				 */
				rotationX: number;

				/**
				 * Clockwise rotation of the view in degrees (y-axis).
				 */
				rotationY: number;

				/**
				 * Scaling of the view in x-axis in pixels.
				 */
				scaleX: number;

				/**
				 * Scaling of the view in y-axis in pixels.
				 */
				scaleY: number;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
				 */
				softKeyboardOnFocus: number;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
				 */
				touchFeedback: boolean;

				/**
				 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
				 */
				touchFeedbackColor: string;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Horizontal location of the view relative to its left position in pixels.
				 */
				translationX: number;

				/**
				 * Vertical location of the view relative to its top position in pixels.
				 */
				translationY: number;

				/**
				 * Depth of the view relative to its elevation in pixels.
				 */
				translationZ: number;

				/**
				 * A name to identify this view in activity transition.
				 */
				transitionName: string;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Determines whether to keep the device screen on.
				 */
				keepScreenOn: boolean;

				/**
				 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is locked closed.
				 */
				readonly LOCK_MODE_LOCKED_CLOSED: number;

				/**
				 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is locked opened.
				 */
				readonly LOCK_MODE_LOCKED_OPEN: number;

				/**
				 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is reset to default lock state.
				 */
				readonly LOCK_MODE_UNDEFINED: number;

				/**
				 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is unlocked.
				 */
				readonly LOCK_MODE_UNLOCKED: number;

				/**
				 * Determine whether the left drawer is open
				 */
				isLeftOpen: boolean;

				/**
				 * Determine whether the right drawer is open
				 */
				isRightOpen: boolean;

				/**
				 * Determine whether the left drawer is visible
				 */
				isLeftVisible: boolean;

				/**
				 * Determine whether the right drawer is visible
				 */
				isRightVisible: boolean;

				/**
				 * Get or set the width of the left drawer
				 */
				leftWidth: number;

				/**
				 * Get or set the width of the right drawer
				 */
				rightWidth: number;

				/**
				 * Get or set the view of the left drawer
				 */
				leftView: Titanium.UI.View;

				/**
				 * Get or set the view of the right drawer
				 */
				rightView: Titanium.UI.View;

				/**
				 * Get or set the center view
				 */
				centerView: Titanium.UI.View;

				/**
				 * Determine the drawer indicator status
				 */
				drawerIndicatorEnabled: boolean;

				/**
				 * Get or set the drawerLockMode
				 */
				drawerLockMode: number;

				/**
				 * Determine whether to enable the toolbar.
				 */
				toolbarEnabled: boolean;

				/**
				 * A Toolbar instance to use as a toolbar.
				 */
				toolbar: Titanium.UI.Toolbar;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any): void;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any[]): void;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove(view: any): void;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren(): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Toggle the visibility of the left view.
				 */
				toggleLeft(): void;

				/**
				 * Open the left view.
				 */
				openLeft(): void;

				/**
				 * Close the left view.
				 */
				closeLeft(): void;

				/**
				 * Toggle the visibility of the right view.
				 */
				toggleRight(): void;

				/**
				 * Open the right view.
				 */
				openRight(): void;

				/**
				 * Close the right view.
				 */
				closeRight(): void;

				/**
				 * Disallow touch events on a specific view.
				 */
				interceptTouchEvent(view: any, disallowIntercept: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundDisabledColor> property.
				 */
				getBackgroundDisabledColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundDisabledColor> property.
				 */
				setBackgroundDisabledColor(backgroundDisabledColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundDisabledImage> property.
				 */
				getBackgroundDisabledImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundDisabledImage> property.
				 */
				setBackgroundDisabledImage(backgroundDisabledImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundFocusedColor> property.
				 */
				getBackgroundFocusedColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundFocusedColor> property.
				 */
				setBackgroundFocusedColor(backgroundFocusedColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundFocusedImage> property.
				 */
				getBackgroundFocusedImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundFocusedImage> property.
				 */
				setBackgroundFocusedImage(backgroundFocusedImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundSelectedColor> property.
				 */
				getBackgroundSelectedColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundSelectedColor> property.
				 */
				setBackgroundSelectedColor(backgroundSelectedColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundSelectedImage> property.
				 */
				getBackgroundSelectedImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundSelectedImage> property.
				 */
				setBackgroundSelectedImage(backgroundSelectedImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.children> property.
				 */
				getChildren(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.elevation> property.
				 */
				getElevation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.elevation> property.
				 */
				setElevation(elevation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.focusable> property.
				 */
				getFocusable(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.focusable> property.
				 */
				setFocusable(focusable: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.hiddenBehavior> property.
				 */
				getHiddenBehavior(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.hiddenBehavior> property.
				 */
				setHiddenBehavior(hiddenBehavior: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.overrideCurrentAnimation> property.
				 */
				getOverrideCurrentAnimation(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.overrideCurrentAnimation> property.
				 */
				setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rotation> property.
				 */
				getRotation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rotation> property.
				 */
				setRotation(rotation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rotationX> property.
				 */
				getRotationX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rotationX> property.
				 */
				setRotationX(rotationX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rotationY> property.
				 */
				getRotationY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rotationY> property.
				 */
				setRotationY(rotationY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.scaleX> property.
				 */
				getScaleX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.scaleX> property.
				 */
				setScaleX(scaleX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.scaleY> property.
				 */
				getScaleY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.scaleY> property.
				 */
				setScaleY(scaleY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.softKeyboardOnFocus> property.
				 */
				getSoftKeyboardOnFocus(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.softKeyboardOnFocus> property.
				 */
				setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.touchFeedback> property.
				 */
				getTouchFeedback(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.touchFeedback> property.
				 */
				setTouchFeedback(touchFeedback: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.touchFeedbackColor> property.
				 */
				getTouchFeedbackColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.touchFeedbackColor> property.
				 */
				setTouchFeedbackColor(touchFeedbackColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.translationX> property.
				 */
				getTranslationX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.translationX> property.
				 */
				setTranslationX(translationX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.translationY> property.
				 */
				getTranslationY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.translationY> property.
				 */
				setTranslationY(translationY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.translationZ> property.
				 */
				getTranslationZ(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.translationZ> property.
				 */
				setTranslationZ(translationZ: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.transitionName> property.
				 */
				getTransitionName(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.transitionName> property.
				 */
				setTransitionName(transitionName: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.keepScreenOn> property.
				 */
				getKeepScreenOn(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.keepScreenOn> property.
				 */
				setKeepScreenOn(keepScreenOn: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.isLeftOpen> property.
				 */
				getIsLeftOpen(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.isLeftOpen> property.
				 */
				setIsLeftOpen(isLeftOpen: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.isRightOpen> property.
				 */
				getIsRightOpen(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.isRightOpen> property.
				 */
				setIsRightOpen(isRightOpen: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.isLeftVisible> property.
				 */
				getIsLeftVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.isLeftVisible> property.
				 */
				setIsLeftVisible(isLeftVisible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.isRightVisible> property.
				 */
				getIsRightVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.isRightVisible> property.
				 */
				setIsRightVisible(isRightVisible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.leftWidth> property.
				 */
				getLeftWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.leftWidth> property.
				 */
				setLeftWidth(leftWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rightWidth> property.
				 */
				getRightWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rightWidth> property.
				 */
				setRightWidth(rightWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.leftView> property.
				 */
				getLeftView(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.leftView> property.
				 */
				setLeftView(leftView: any): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rightView> property.
				 */
				getRightView(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rightView> property.
				 */
				setRightView(rightView: any): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.centerView> property.
				 */
				getCenterView(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.centerView> property.
				 */
				setCenterView(centerView: any): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.drawerIndicatorEnabled> property.
				 */
				getDrawerIndicatorEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.drawerIndicatorEnabled> property.
				 */
				setDrawerIndicatorEnabled(drawerIndicatorEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.drawerLockMode> property.
				 */
				getDrawerLockMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.drawerLockMode> property.
				 */
				setDrawerLockMode(drawerLockMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.toolbarEnabled> property.
				 */
				getToolbarEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.toolbarEnabled> property.
				 */
				setToolbarEnabled(toolbarEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.DrawerLayout.toolbar> property.
				 */
				getToolbar(): Titanium.UI.Toolbar;

				/**
				 * Sets the value of the <Titanium.UI.Android.DrawerLayout.toolbar> property.
				 */
				setToolbar(toolbar: Titanium.UI.Toolbar): void;

			}
			/**
			 * A progress dialog or a horizontal progress bar in the title of the window.
			 */
			interface ProgressIndicator extends Titanium.Proxy {
				/**
				 * Base elevation of the view relative to its parent in pixels.
				 */
				elevation: number;

				/**
				 * Sets the behavior when hiding an object to release or keep the free space
				 */
				hiddenBehavior: number;

				/**
				 * Clockwise 2D rotation of the view in degrees.
				 */
				rotation: number;

				/**
				 * Clockwise rotation of the view in degrees (x-axis).
				 */
				rotationX: number;

				/**
				 * Clockwise rotation of the view in degrees (y-axis).
				 */
				rotationY: number;

				/**
				 * Scaling of the view in x-axis in pixels.
				 */
				scaleX: number;

				/**
				 * Scaling of the view in y-axis in pixels.
				 */
				scaleY: number;

				/**
				 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
				 */
				touchFeedback: boolean;

				/**
				 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
				 */
				touchFeedbackColor: string;

				/**
				 * Horizontal location of the view relative to its left position in pixels.
				 */
				translationX: number;

				/**
				 * Vertical location of the view relative to its top position in pixels.
				 */
				translationY: number;

				/**
				 * Depth of the view relative to its elevation in pixels.
				 */
				translationZ: number;

				/**
				 * A name to identify this view in activity transition.
				 */
				transitionName: string;

				/**
				 * When `true` allows the user to cancel the progress dialog by pressing the BACK button.
				 */
				cancelable: boolean;

				/**
				 * When `cancelable` is set to `true` and this is set to `true`, the dialog is canceled when touched outside the window's bounds.
				 */
				canceledOnTouchOutside: boolean;

				/**
				 * Message text.
				 */
				message: string;

				/**
				 * Key identifying a string in the locale file to use for the message text.
				 */
				messageid: string;

				/**
				 * Minimum value of the progress bar.
				 */
				min: number;

				/**
				 * Maximum value of the progress bar.
				 */
				max: number;

				/**
				 * Location for the progress indicator.
				 */
				location: number;

				/**
				 * Type for the progress indicator.
				 */
				type: number;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides the progress indicator and stops the animation.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Shows the progress indicator and starts the animation.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.elevation> property.
				 */
				getElevation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.elevation> property.
				 */
				setElevation(elevation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.hiddenBehavior> property.
				 */
				getHiddenBehavior(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.hiddenBehavior> property.
				 */
				setHiddenBehavior(hiddenBehavior: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.rotation> property.
				 */
				getRotation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.rotation> property.
				 */
				setRotation(rotation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.rotationX> property.
				 */
				getRotationX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.rotationX> property.
				 */
				setRotationX(rotationX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.rotationY> property.
				 */
				getRotationY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.rotationY> property.
				 */
				setRotationY(rotationY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.scaleX> property.
				 */
				getScaleX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.scaleX> property.
				 */
				setScaleX(scaleX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.scaleY> property.
				 */
				getScaleY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.scaleY> property.
				 */
				setScaleY(scaleY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.touchFeedback> property.
				 */
				getTouchFeedback(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.touchFeedback> property.
				 */
				setTouchFeedback(touchFeedback: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.touchFeedbackColor> property.
				 */
				getTouchFeedbackColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.touchFeedbackColor> property.
				 */
				setTouchFeedbackColor(touchFeedbackColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.translationX> property.
				 */
				getTranslationX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.translationX> property.
				 */
				setTranslationX(translationX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.translationY> property.
				 */
				getTranslationY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.translationY> property.
				 */
				setTranslationY(translationY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.translationZ> property.
				 */
				getTranslationZ(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.translationZ> property.
				 */
				setTranslationZ(translationZ: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.transitionName> property.
				 */
				getTransitionName(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.transitionName> property.
				 */
				setTransitionName(transitionName: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.cancelable> property.
				 */
				getCancelable(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.cancelable> property.
				 */
				setCancelable(cancelable: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.canceledOnTouchOutside> property.
				 */
				getCanceledOnTouchOutside(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.canceledOnTouchOutside> property.
				 */
				setCanceledOnTouchOutside(canceledOnTouchOutside: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.message> property.
				 */
				getMessage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.message> property.
				 */
				setMessage(message: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.messageid> property.
				 */
				getMessageid(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.messageid> property.
				 */
				setMessageid(messageid: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.min> property.
				 */
				getMin(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.min> property.
				 */
				setMin(min: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.max> property.
				 */
				getMax(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.max> property.
				 */
				setMax(max: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.location> property.
				 */
				getLocation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.location> property.
				 */
				setLocation(location: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.type> property.
				 */
				getType(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.type> property.
				 */
				setType(type: number): void;

			}
			/**
			 * A specialized text field for entering search text.
			 */
			interface SearchView extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * Disabled background color of the view, as a color name or hex triplet.
				 */
				backgroundDisabledColor: string;

				/**
				 * Disabled background image for the view, specified as a local file path or URL.
				 */
				backgroundDisabledImage: string;

				/**
				 * Focused background color of the view, as a color name or hex triplet.
				 */
				backgroundFocusedColor: string;

				/**
				 * Focused background image for the view, specified as a local file path or URL.
				 */
				backgroundFocusedImage: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Selected background color of the view, as a color name or hex triplet.
				 */
				backgroundSelectedColor: string;

				/**
				 * Selected background image url for the view, specified as a local file path or URL.
				 */
				backgroundSelectedImage: string;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * Array of this view's child views.
				 */
				readonly children: Titanium.UI.View[];

				/**
				 * Base elevation of the view relative to its parent in pixels.
				 */
				elevation: number;

				/**
				 * Whether view should be focusable while navigating with the trackball.
				 */
				focusable: boolean;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Sets the behavior when hiding an object to release or keep the free space
				 */
				hiddenBehavior: number;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * When on, animate call overrides current animation if applicable.
				 */
				overrideCurrentAnimation: boolean;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * Clockwise 2D rotation of the view in degrees.
				 */
				rotation: number;

				/**
				 * Clockwise rotation of the view in degrees (x-axis).
				 */
				rotationX: number;

				/**
				 * Clockwise rotation of the view in degrees (y-axis).
				 */
				rotationY: number;

				/**
				 * Scaling of the view in x-axis in pixels.
				 */
				scaleX: number;

				/**
				 * Scaling of the view in y-axis in pixels.
				 */
				scaleY: number;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
				 */
				softKeyboardOnFocus: number;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
				 */
				touchFeedback: boolean;

				/**
				 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
				 */
				touchFeedbackColor: string;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Horizontal location of the view relative to its left position in pixels.
				 */
				translationX: number;

				/**
				 * Vertical location of the view relative to its top position in pixels.
				 */
				translationY: number;

				/**
				 * Depth of the view relative to its elevation in pixels.
				 */
				translationZ: number;

				/**
				 * A name to identify this view in activity transition.
				 */
				transitionName: string;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Determines whether to keep the device screen on.
				 */
				keepScreenOn: boolean;

				/**
				 * Color of the text in this SearchView, as a color name or hex triplet.
				 */
				color: string;

				/**
				 * Text to show when the search view field is not focused.
				 */
				hintText: string;

				/**
				 * Color of hint text that displays when field is empty.
				 */
				hintTextColor: string;

				/**
				 * Value of the search view.
				 */
				value: string;

				/**
				 * Iconifies or expands the search view
				 */
				iconified: boolean;

				/**
				 * Sets the default or resting state of the search view
				 */
				iconifiedByDefault: boolean;

				/**
				 * Whether to display the submit button when necessary or never display.
				 */
				submitEnabled: boolean;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove(view: any): void;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren(): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Causes the search view to lose focus.
				 */
				blur(): void;

				/**
				 * Causes the search view to gain focus.
				 */
				focus(): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundDisabledColor> property.
				 */
				getBackgroundDisabledColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundDisabledColor> property.
				 */
				setBackgroundDisabledColor(backgroundDisabledColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundDisabledImage> property.
				 */
				getBackgroundDisabledImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundDisabledImage> property.
				 */
				setBackgroundDisabledImage(backgroundDisabledImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundFocusedColor> property.
				 */
				getBackgroundFocusedColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundFocusedColor> property.
				 */
				setBackgroundFocusedColor(backgroundFocusedColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundFocusedImage> property.
				 */
				getBackgroundFocusedImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundFocusedImage> property.
				 */
				setBackgroundFocusedImage(backgroundFocusedImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundSelectedColor> property.
				 */
				getBackgroundSelectedColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundSelectedColor> property.
				 */
				setBackgroundSelectedColor(backgroundSelectedColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundSelectedImage> property.
				 */
				getBackgroundSelectedImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundSelectedImage> property.
				 */
				setBackgroundSelectedImage(backgroundSelectedImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.children> property.
				 */
				getChildren(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.elevation> property.
				 */
				getElevation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.elevation> property.
				 */
				setElevation(elevation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.focusable> property.
				 */
				getFocusable(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.focusable> property.
				 */
				setFocusable(focusable: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.hiddenBehavior> property.
				 */
				getHiddenBehavior(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.hiddenBehavior> property.
				 */
				setHiddenBehavior(hiddenBehavior: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.overrideCurrentAnimation> property.
				 */
				getOverrideCurrentAnimation(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.overrideCurrentAnimation> property.
				 */
				setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.rotation> property.
				 */
				getRotation(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.rotation> property.
				 */
				setRotation(rotation: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.rotationX> property.
				 */
				getRotationX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.rotationX> property.
				 */
				setRotationX(rotationX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.rotationY> property.
				 */
				getRotationY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.rotationY> property.
				 */
				setRotationY(rotationY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.scaleX> property.
				 */
				getScaleX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.scaleX> property.
				 */
				setScaleX(scaleX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.scaleY> property.
				 */
				getScaleY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.scaleY> property.
				 */
				setScaleY(scaleY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.softKeyboardOnFocus> property.
				 */
				getSoftKeyboardOnFocus(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.softKeyboardOnFocus> property.
				 */
				setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.touchFeedback> property.
				 */
				getTouchFeedback(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.touchFeedback> property.
				 */
				setTouchFeedback(touchFeedback: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.touchFeedbackColor> property.
				 */
				getTouchFeedbackColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.touchFeedbackColor> property.
				 */
				setTouchFeedbackColor(touchFeedbackColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.translationX> property.
				 */
				getTranslationX(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.translationX> property.
				 */
				setTranslationX(translationX: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.translationY> property.
				 */
				getTranslationY(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.translationY> property.
				 */
				setTranslationY(translationY: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.translationZ> property.
				 */
				getTranslationZ(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.translationZ> property.
				 */
				setTranslationZ(translationZ: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.transitionName> property.
				 */
				getTransitionName(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.transitionName> property.
				 */
				setTransitionName(transitionName: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.keepScreenOn> property.
				 */
				getKeepScreenOn(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.keepScreenOn> property.
				 */
				setKeepScreenOn(keepScreenOn: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.color> property.
				 */
				getColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.color> property.
				 */
				setColor(color: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.hintText> property.
				 */
				getHintText(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.hintText> property.
				 */
				setHintText(hintText: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.hintTextColor> property.
				 */
				getHintTextColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.hintTextColor> property.
				 */
				setHintTextColor(hintTextColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.value> property.
				 */
				getValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.value> property.
				 */
				setValue(value: string): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.iconified> property.
				 */
				getIconified(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.iconified> property.
				 */
				setIconified(iconified: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.iconifiedByDefault> property.
				 */
				getIconifiedByDefault(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.iconifiedByDefault> property.
				 */
				setIconifiedByDefault(iconifiedByDefault: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.Android.SearchView.submitEnabled> property.
				 */
				getSubmitEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.Android.SearchView.submitEnabled> property.
				 */
				setSubmitEnabled(submitEnabled: boolean): void;

			}
		}

		/**
		 * A module used for accessing clipboard data.
		 */
		namespace Clipboard {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Create a new named clipboard.
			 */
			let name: string;

			/**
			 * Create a new clipboard identified by a unique system-generated name.
			 */
			let unique: boolean;

			/**
			 * Create a clipboard identified by name if it doesn't exist.
			 */
			let allowCreation: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Deletes data of the specified MIME type stored in the clipboard. If MIME type omitted, all
			 * data is deleted.
			 */
			function clearData(type?: string): void;

			/**
			 * Deletes all text data stored in the clipboard.
			 */
			function clearText(): void;

			/**
			 * Gets data of the specified MIME type stored in the clipboard.
			 */
			function getData(type: string): string | Titanium.Blob;

			/**
			 * Gets text data stored in the clipboard.
			 */
			function getText(): string;

			/**
			 * Indicates whether any data of the specified MIME type is stored in the clipboard.
			 */
			function hasData(type: string): boolean;

			/**
			 * Indicates whether any text data is stored in the clipboard.
			 */
			function hasText(): boolean;

			/**
			 * Indicates whether any URLs are stored in the clipboard.
			 */
			function hasURLs(): boolean;

			/**
			 * Indicates whether any images are stored in the clipboard.
			 */
			function hasImages(): boolean;

			/**
			 * Indicates whether any colors are stored in the clipboard.
			 */
			function hasColors(): boolean;

			/**
			 * Stores data of the specified MIME type in the clipboard.
			 */
			function setData(type: string, data: any): void;

			/**
			 * Stores text data in the clipboard.
			 */
			function setText(text: string): void;

			/**
			 * Adds an array of items to a clipboard, and sets privacy options for all included items.
			 */
			function setItems(items: ClipboardItemsType): void;

			/**
			 * Gets the items that have been specified earlier using <Titanium.UI.Clipboard.setItems>.
			 */
			function getItems(): any[];

			/**
			 * Removes the clipboard.
			 */
			function remove(): void;

			/**
			 * Gets the value of the <Titanium.UI.Clipboard.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Clipboard.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Clipboard.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.UI.Clipboard.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.UI.Clipboard.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.UI.Clipboard.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

			/**
			 * Gets the value of the <Titanium.UI.Clipboard.name> property.
			 */
			function getName(): string;

			/**
			 * Sets the value of the <Titanium.UI.Clipboard.name> property.
			 */
			function setName(name: string): void;

			/**
			 * Gets the value of the <Titanium.UI.Clipboard.unique> property.
			 */
			function getUnique(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Clipboard.unique> property.
			 */
			function setUnique(unique: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.Clipboard.allowCreation> property.
			 */
			function getAllowCreation(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.Clipboard.allowCreation> property.
			 */
			function setAllowCreation(allowCreation: boolean): void;

		}

		/**
		 * Apple iOS specific UI capabilities.  All properties, methods and events in this namespace will
		 * only work on Apple iOS devices.
		 */
		namespace iOS {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * Automatically use the large out-of-line title based on the state of the p
			 * revious item in the navigation bar.
			 */
			const LARGE_TITLE_DISPLAY_MODE_AUTOMATIC: number;

			/**
			 * Always use a larger title when this item is top most.
			 */
			const LARGE_TITLE_DISPLAY_MODE_ALWAYS: number;

			/**
			 * Never use a larger title when this item is top most.
			 */
			const LARGE_TITLE_DISPLAY_MODE_NEVER: number;

			/**
			 * Include treatments so this image can be shown directly over the content
			 * of the Live Photo.
			 */
			const LIVEPHOTO_BADGE_OPTIONS_OVER_CONTENT: number;

			/**
			 * To indicate that the Live Photo aspect is turned off and it will
			 * be treated as a still (e.g. for sharing).
			 */
			const LIVEPHOTO_BADGE_OPTIONS_LIVE_OFF: number;

			/**
			 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
			 * slowly and speeds up.
			 */
			const ANIMATION_CURVE_EASE_IN: number;

			/**
			 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
			 * slowly, and speeds up, then slows down at the end of the animation.
			 */
			const ANIMATION_CURVE_EASE_IN_OUT: number;

			/**
			 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
			 * quickly, then slows down at the end of the animation.
			 */
			const ANIMATION_CURVE_EASE_OUT: number;

			/**
			 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that proceeds
			 * at a constant rate.
			 */
			const ANIMATION_CURVE_LINEAR: number;

			/**
			 * Use with <Attribute.type> to specify a font.
			 */
			const ATTRIBUTE_FONT: number;

			/**
			 * Use with <Attribute.type> to specify a font color.
			 */
			const ATTRIBUTE_FOREGROUND_COLOR: number;

			/**
			 * Use with <Attribute.type> to specify a background color.
			 */
			const ATTRIBUTE_BACKGROUND_COLOR: number;

			/**
			 * Use with <Attribute.type> to enable or disable ligatures.
			 */
			const ATTRIBUTE_LIGATURE: number;

			/**
			 * Use with <Attribute.value> to use a letterpress text effect.
			 */
			const ATTRIBUTE_LETTERPRESS_STYLE: number;

			/**
			 * Use with <Attribute.type> to specify kerning (space between characters).
			 */
			const ATTRIBUTE_KERN: number;

			/**
			 * Use with <Attribute.type> to place a horizontal line through the text.
			 */
			const ATTRIBUTE_STRIKETHROUGH_STYLE: number;

			/**
			 * Use with <Attribute.type> to place a horizontal line under the text.
			 */
			const ATTRIBUTE_UNDERLINES_STYLE: number;

			/**
			 * Use with <Attribute.type> to specify a color for the stroke text.
			 */
			const ATTRIBUTE_STROKE_COLOR: number;

			/**
			 * Use with <Attribute.type> to specify the width of the stroke text.
			 */
			const ATTRIBUTE_STROKE_WIDTH: number;

			/**
			 * Use with <Attribute.type> to display a shadow behind the text.
			 */
			const ATTRIBUTE_SHADOW: number;

			/**
			 * Use with <Attribute.type> to control the direction of the text.
			 */
			const ATTRIBUTE_WRITING_DIRECTION: number;

			/**
			 * Use with <Attribute.type> to apply a text effect.
			 */
			const ATTRIBUTE_TEXT_EFFECT: number;

			/**
			 * Use with <Attribute.type> to create a link.
			 */
			const ATTRIBUTE_LINK: number;

			/**
			 * Use with <Attribute.type> to apply a different baseline to the text.
			 */
			const ATTRIBUTE_BASELINE_OFFSET: number;

			/**
			 * Use with <Attribute.type> to change the color of the horizontal line.
			 */
			const ATTRIBUTE_UNDERLINE_COLOR: number;

			/**
			 * Use with <Attribute.type> to change the color of the horizontal line.
			 */
			const ATTRIBUTE_STRIKETHROUGH_COLOR: number;

			/**
			 * Use with <Attribute.type> to skew the text.
			 */
			const ATTRIBUTE_OBLIQUENESS: number;

			/**
			 * Use with <Attribute.type> to stretch the text horizontally.
			 */
			const ATTRIBUTE_EXPANSION: number;

			/**
			 * Use with <Attribute.value> to not draw a line.
			 */
			const ATTRIBUTE_UNDERLINE_STYLE_NONE: number;

			/**
			 * Use with <Attribute.value> to draw a single line.
			 */
			const ATTRIBUTE_UNDERLINE_STYLE_SINGLE: number;

			/**
			 * Use with <Attribute.value> to draw a thick line.
			 */
			const ATTRIBUTE_UNDERLINE_STYLE_THICK: number;

			/**
			 * Use with <Attribute.value> to draw a double line.
			 */
			const ATTRIBUTE_UNDERLINE_STYLE_DOUBLE: number;

			/**
			 * Use with <Attribute.value> to draw a solid line.
			 */
			const ATTRIBUTE_UNDERLINE_PATTERN_SOLID: number;

			/**
			 * Use with <Attribute.value> to draw a dotted line.
			 */
			const ATTRIBUTE_UNDERLINE_PATTERN_DOT: number;

			/**
			 * Use with <Attribute.value> to draw a dashed line.
			 */
			const ATTRIBUTE_UNDERLINE_PATTERN_DASH: number;

			/**
			 * Use with <Attribute.value> to draw an alternating line of dashes and dots.
			 */
			const ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT: number;

			/**
			 * Use with <Attribute.value> to draw an alternating line of dashes and two dots.
			 */
			const ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT: number;

			/**
			 * Use with <Attribute.value> to draw a line only underneath or through words.
			 */
			const ATTRIBUTE_UNDERLINE_BY_WORD: number;

			/**
			 * Use with <Attribute.value> to use the embedded text direction.
			 */
			const ATTRIBUTE_WRITING_DIRECTION_EMBEDDING: number;

			/**
			 * Use with <Attribute.value> to override the text direction.
			 */
			const ATTRIBUTE_WRITING_DIRECTION_OVERRIDE: number;

			/**
			 * Use with <Attribute.value> to use the
			 * [Unicode Bidirection Algorithm rules P2 and P3](http://www.unicode.org/reports/tr9/#The_Paragraph_Level)
			 * to determine which direction to use.
			 */
			const ATTRIBUTE_WRITING_DIRECTION_NATURAL: number;

			/**
			 * Use with <Attribute.value> to write text left to right.
			 */
			const ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT: number;

			/**
			 * Use with <Attribute.value> to write text right to left.
			 */
			const ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT: number;

			/**
			 * Converts strings formatted as addresses into clickable links.
			 */
			const AUTODETECT_ADDRESS: number;

			/**
			 * Converts all detectable types of data into clickable links.
			 */
			const AUTODETECT_ALL: number;

			/**
			 * Converts strings formatted as calendar events into clickable links.
			 */
			const AUTODETECT_CALENDAR: number;

			/**
			 * Converts strings formatted as URLs into clickable links.
			 */
			const AUTODETECT_LINK: number;

			/**
			 * Disables converting strings into clickable links.
			 */
			const AUTODETECT_NONE: number;

			/**
			 * Converts strings formatted as phone numbers into clickable links.
			 */
			const AUTODETECT_PHONE: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_CLEAR: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_COLOR: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_COLOR_BURN: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_COLOR_DODGE: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_COPY: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_DARKEN: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_DESTINATION_ATOP: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_DESTINATION_IN: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_DESTINATION_OUT: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_DESTINATION_OVER: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_DIFFERENCE: number;

			/**
			 * Image mode constant. Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_EXCLUSION: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_HARD_LIGHT: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_HUE: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_LIGHTEN: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_LUMINOSITY: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_MULTIPLY: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_NORMAL: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_OVERLAY: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_PLUS_DARKER: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_PLUS_LIGHTER: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_SATURATION: number;

			/**
			 * Image mode constant. Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_SCREEN: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_SOFT_LIGHT: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_SOURCE_ATOP: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_SOURCE_IN: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_SOURCE_OUT: number;

			/**
			 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
			 */
			const BLEND_MODE_XOR: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_EXTRA_LIGHT: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_LIGHT: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_DARK: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_REGULAR: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_PROMINENT: number;

			/**
			 * Use with [AdView.adSize](Titanium.UI.iOS.AdView.adSize) to specify a banner ad size
			 * appropriate for portrait orientations.
			 */
			const AD_SIZE_PORTRAIT: string;

			/**
			 * Use with [AdView.adSize](Titanium.UI.iOS.AdView.adSize) to specify a banner ad size
			 * appropriate for landscape orientations.
			 */
			const AD_SIZE_LANDSCAPE: string;

			/**
			 * Use with <Titanium.UI.View.clipMode> to specify clipping behavior.
			 */
			const CLIP_MODE_DEFAULT: number;

			/**
			 * Use with <Titanium.UI.View.clipMode> to specify clipping behavior.
			 */
			const CLIP_MODE_DISABLED: number;

			/**
			 * Use with <Titanium.UI.View.clipMode> to specify clipping behavior.
			 */
			const CLIP_MODE_ENABLED: number;

			/**
			 * Use with <Titanium.UI.iOS.CollisionBehavior.collisionMode> to specify collisions with both items and
			 * boundaries.
			 */
			const COLLISION_MODE_ALL: number;

			/**
			 * Use with <Titanium.UI.iOS.CollisionBehavior.collisionMode> to specify collisions with
			 * boundaries only.
			 */
			const COLLISION_MODE_BOUNDARY: number;

			/**
			 * Use with <Titanium.UI.iOS.CollisionBehavior.collisionMode> to specify collisions with items only.
			 */
			const COLLISION_MODE_ITEM: number;

			/**
			 * Determines if the 3D-Touch capability "Force Touch" is supported (`true`) or not (`false`) by the device.
			 */
			const forceTouchSupported: boolean;

			/**
			 * The feedback type to be used when specifying a selection in <Titanium.UI.iOS.FeedbackGenerator>.
			 */
			const FEEDBACK_GENERATOR_TYPE_SELECTION: number;

			/**
			 * The feedback type to be used when specifying an impact in <Titanium.UI.iOS.FeedbackGenerator>.
			 */
			const FEEDBACK_GENERATOR_TYPE_IMPACT: number;

			/**
			 * The feedback type to be used when specifying a received notification in <Titanium.UI.iOS.FeedbackGenerator>.
			 */
			const FEEDBACK_GENERATOR_TYPE_NOTIFICATION: number;

			/**
			 * The success notification type used as the argument in <Titanium.UI.iOS.FeedbackGenerator.notificationOccurred>.
			 */
			const FEEDBACK_GENERATOR_NOTIFICATION_TYPE_SUCCESS: number;

			/**
			 * The warning notification type used as the argument in <Titanium.UI.iOS.FeedbackGenerator.notificationOccurred>.
			 */
			const FEEDBACK_GENERATOR_NOTIFICATION_TYPE_WARNING: number;

			/**
			 * The error notification type used as the argument in <Titanium.UI.iOS.FeedbackGenerator.notificationOccurred>.
			 */
			const FEEDBACK_GENERATOR_NOTIFICATION_TYPE_ERROR: number;

			/**
			 * The light impact style used as the `style` argument when creating a <Titanium.UI.iOS.FeedbackGenerator> with the
			 * type <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
			 */
			const FEEDBACK_GENERATOR_IMPACT_STYLE_LIGHT: number;

			/**
			 * The medium impact style used as the `style` argument when creating a <Titanium.UI.iOS.FeedbackGenerator> with the
			 * type <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
			 */
			const FEEDBACK_GENERATOR_IMPACT_STYLE_MEDIUM: number;

			/**
			 * The heavy impact style used as the `style` argument when creating a <Titanium.UI.iOS.FeedbackGenerator> with the
			 * type <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
			 */
			const FEEDBACK_GENERATOR_IMPACT_STYLE_HEAVY: number;

			/**
			 * Plays back the entire motion and sound content of the Live Photo, including transition
			 * effects at the start and end.
			 */
			const LIVEPHOTO_PLAYBACK_STYLE_FULL: number;

			/**
			 * Plays back only a brief section of the motion content of the Live Photo, without sound.
			 */
			const LIVEPHOTO_PLAYBACK_STYLE_HINT: number;

			/**
			 * An arrow that points upward.
			 */
			const MENU_POPUP_ARROW_DIRECTION_UP: number;

			/**
			 * An arrow that points downward.
			 */
			const MENU_POPUP_ARROW_DIRECTION_DOWN: number;

			/**
			 * An arrow that points toward the left.
			 */
			const MENU_POPUP_ARROW_DIRECTION_LEFT: number;

			/**
			 * An arrow that points toward the right.
			 */
			const MENU_POPUP_ARROW_DIRECTION_RIGHT: number;

			/**
			 * An arrow that is automatically aligned.
			 */
			const MENU_POPUP_ARROW_DIRECTION_DEFAULT: number;

			/**
			 * View presented with the same style as its parent window.
			 */
			let MODAL_PRESENTATION_CURRENT_CONTEXT: number;

			/**
			 * View presented over its parent window.
			 */
			let MODAL_PRESENTATION_OVER_CURRENT_CONTEXT: number;

			/**
			 * Presented view covers the screen.
			 */
			let MODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN: number;

			/**
			 * Window width and height are smaller than those of the screen and the view is centered on
			 * the screen.
			 */
			const MODAL_PRESENTATION_FORMSHEET: number;

			/**
			 * Window covers the screen.
			 */
			const MODAL_PRESENTATION_FULLSCREEN: number;

			/**
			 * Window height is the height of the screen and width is equal to screen width in a portrait
			 * orientation.
			 */
			const MODAL_PRESENTATION_PAGESHEET: number;

			/**
			 * When the window is presented, its view slides up from the bottom of the screen. On dismissal,
			 * the view slides back down (default.)
			 */
			const MODAL_TRANSITION_STYLE_COVER_VERTICAL: number;

			/**
			 * When the window is presented, the current view fades out while the new view fades in at the
			 * same time. On dismissal, a similar type of cross-fade is used to return to the original view.
			 */
			const MODAL_TRANSITION_STYLE_CROSS_DISSOLVE: number;

			/**
			 * When the window is presented, the current view initiates a horizontal 3D flip from
			 * right-to-left, resulting in the revealing of the new view as if it were on the back of the
			 * previous view. On dismissal, the flip occurs from left-to-right, returning to the original
			 * view.
			 */
			const MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL: number;

			/**
			 * When the window is presented, one corner of the current view curls up to reveal the modal
			 * view underneath. On dismissal, the curled up page unfurls itself back on top of the modal
			 * view.
			 */
			const MODAL_TRANSITION_STYLE_PARTIAL_CURL: number;

			/**
			 * Use with <Titanium.UI.iOS.PushBehavior.pushMode> to specifiy a continuous force.
			 */
			const PUSH_MODE_CONTINUOUS: number;

			/**
			 * Use with <Titanium.UI.iOS.PushBehavior.pushMode> to specifiy an instantaneous force.
			 */
			const PUSH_MODE_INSTANTANEOUS: number;

			/**
			 * The normal style for preview actions.
			 */
			const PREVIEW_ACTION_STYLE_DEFAULT: number;

			/**
			 * The selected style for preview actions.
			 */
			const PREVIEW_ACTION_STYLE_SELECTED: number;

			/**
			 * The destructive style for preview actions.
			 */
			const PREVIEW_ACTION_STYLE_DESTRUCTIVE: number;

			/**
			 * The default style for <RowActionType>.
			 */
			const ROW_ACTION_STYLE_DEFAULT: number;

			/**
			 * The destructive style for <RowActionType>.
			 */
			const ROW_ACTION_STYLE_DESTRUCTIVE: number;

			/**
			 * The normal style for <RowActionType>.
			 */
			const ROW_ACTION_STYLE_NORMAL: number;

			/**
			 * Use with <Titanium.UI.ScrollView.decelerationRate> to control deceleration rate.
			 */
			const SCROLL_DECELERATION_RATE_FAST: number;

			/**
			 * Use with <Titanium.UI.ScrollView.decelerationRate> to control deceleration rate.
			 */
			const SCROLL_DECELERATION_RATE_NORMAL: number;

			/**
			 * Use with <Titanium.UI.ScrollView.keyboardDismissMode> to control keyboard dismiss mode.
			 */
			const KEYBOARD_DISMISS_MODE_NONE: number;

			/**
			 * Use with <Titanium.UI.ScrollView.keyboardDismissMode> to control keyboard dismiss mode.
			 */
			const KEYBOARD_DISMISS_MODE_ON_DRAG: number;

			/**
			 * Use with <Titanium.UI.ScrollView.keyboardDismissMode> to control keyboard dismiss mode.
			 */
			const KEYBOARD_DISMISS_MODE_INTERACTIVE: number;

			/**
			 * Use with <Titanium.UI.SearchBar.style> to change the search bar style.
			 */
			const SEARCH_BAR_STYLE_PROMINENT: number;

			/**
			 * Use with <Titanium.UI.SearchBar.style> to change the search bar style.
			 */
			const SEARCH_BAR_STYLE_MINIMAL: number;

			/**
			 * User tapped a link.
			 */
			const WEBVIEW_NAVIGATIONTYPE_LINK_CLICKED: number;

			/**
			 * User submitted a form.
			 */
			const WEBVIEW_NAVIGATIONTYPE_FORM_SUBMITTED: number;

			/**
			 * User tapped the back or forward button.
			 */
			const WEBVIEW_NAVIGATIONTYPE_BACK_FORWARD: number;

			/**
			 * User tapped the reload button.
			 */
			const WEBVIEW_NAVIGATIONTYPE_RELOAD: number;

			/**
			 * User resubmitted a form.
			 */
			const WEBVIEW_NAVIGATIONTYPE_FORM_RESUBMITTED: number;

			/**
			 * Some other action occurred.
			 */
			const WEBVIEW_NAVIGATIONTYPE_OTHER: number;

			/**
			 * String that represents the magnifying glass on the table view index bar
			 */
			const TABLEVIEW_INDEX_SEARCH: string;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_COMPOSE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_PLAY: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_PAUSE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_ADD: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_LOCATION: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_SEARCH: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_SHARE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_PROHIBIT: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CONTACT: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_HOME: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_MARK_LOCATION: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_FAVORITE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_LOVE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CLOUD: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_INVITATION: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CONFIRMATION: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_MAIL: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_MESSAGE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_DATE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_TIME: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CAPTURE_PHOTO: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CAPTURE_VIDEO: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_TASK: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_TASK_COMPLETED: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_ALARM: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_BOOKMARK: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_SHUFFLE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_AUDIO: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_UPDATE: number;

			/**
			 * Value of the badge for the application's springboard icon.
			 */
			let appBadge: number;

			/**
			 * Determines whether the shake to edit system-wide capability is enabled.
			 */
			let appSupportsShakeToEdit: boolean;

			/**
			 * Sets the global status bar background color for the application.
			 */
			let statusBarBackgroundColor: string;

			/**
			 * Credential should not be stored.
			 */
			const CREDENTIAL_PERSISTENCE_NONE: number;

			/**
			 * Credential should be stored only for this session.
			 */
			const CREDENTIAL_PERSISTENCE_FOR_SESSION: number;

			/**
			 * Credential should be stored in the keychain.
			 */
			const CREDENTIAL_PERSISTENCE_PERMANENT: number;

			/**
			 * Credential should be stored permanently in the keychain, and in addition should be
			 * distributed to other devices based on the owning AppleID.
			 */
			const CREDENTIAL_PERSISTENCE_SYNCHRONIZABLE: number;

			/**
			 * No media types require a user gesture to begin playing.
			 */
			const AUDIOVISUAL_MEDIA_TYPE_NONE: number;

			/**
			 * Media types containing audio require a user gesture to begin playing.
			 */
			const AUDIOVISUAL_MEDIA_TYPE_AUDIO: number;

			/**
			 * Media types containing video require a user gesture to begin playing.
			 */
			const AUDIOVISUAL_MEDIA_TYPE_VIDEO: number;

			/**
			 * All media types require a user gesture to begin playing.
			 */
			const AUDIOVISUAL_MEDIA_TYPE_ALL: number;

			/**
			 * Specifies that the caching logic defined in the protocol implementation, if any,
			 * is used for a particular URL load request.
			 */
			const CACHE_POLICY_USE_PROTOCOL_CACHE_POLICY: number;

			/**
			 * Specifies that the data for the URL load should be loaded from the originating source.
			 * No existing cache data should be used to satisfy a URL load request.
			 */
			const CACHE_POLICY_RELOAD_IGNORING_LOCAL_CACHE_DATA: number;

			/**
			 * Specifies that the existing cached data should be used to satisfy the request,
			 * regardless of its age or expiration date.
			 */
			const CACHE_POLICY_RETURN_CACHE_DATA_ELSE_LOAD: number;

			/**
			 * Specifies that the existing cache data should be used to satisfy a request,
			 * regardless of its age or expiration date.
			 */
			const CACHE_POLICY_RETURN_CACHE_DATA_DONT_LOAD: number;

			/**
			 * Selection granularity varies automatically depending on the selection.
			 */
			const SELECTION_GRANULARITY_DYNAMIC: number;

			/**
			 * Selection endpoints can be placed at any character boundary.
			 */
			const SELECTION_GRANULARITY_CHARACTER: number;

			/**
			 * Cancel the navigation.
			 */
			const ACTION_POLICY_CANCEL: number;

			/**
			 * Allow the navigation to continue.
			 */
			const ACTION_POLICY_ALLOW: number;

			/**
			 * Inject the script after the document element is created, but before any other content is loaded.
			 */
			const INJECTION_TIME_DOCUMENT_START: number;

			/**
			 * Inject the script after the document finishes loading, but before other subresources finish loading.
			 */
			const INJECTION_TIME_DOCUMENT_END: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Creates a transition animation when opening or closing windows in a
			 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
			 */
			function createTransitionAnimation(transition: transitionAnimationParam): Titanium.Proxy;

			/**
			 * Creates a live photo badge to be used together with the
			 * <Titanium.UI.iOS.LivePhotoView> API.
			 */
			function createLivePhotoBadge(type: number): Titanium.Blob;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.AdView>.
			 */
			function createAdView(parameters?: any): Titanium.UI.iOS.AdView;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.AnchorAttachmentBehavior>.
			 */
			function createAnchorAttachmentBehavior(parameters?: any): Titanium.UI.iOS.AnchorAttachmentBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.Animator>.
			 */
			function createAnimator(parameters?: any): Titanium.UI.iOS.Animator;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.ApplicationShortcuts>.
			 */
			function createApplicationShortcuts(parameters?: any): Titanium.UI.iOS.ApplicationShortcuts;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.Attribute>.
			 */
			function createAttribute(parameters?: any): Titanium.UI.iOS.Attribute;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.AttributedString>.
			 */
			function createAttributedString(parameters?: any): Titanium.UI.iOS.AttributedString;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.BlurView>.
			 */
			function createBlurView(parameters?: any): Titanium.UI.iOS.BlurView;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.CollisionBehavior>.
			 */
			function createCollisionBehavior(parameters?: any): Titanium.UI.iOS.CollisionBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.CoverFlowView>.
			 */
			function createCoverFlowView(parameters?: any): Titanium.UI.iOS.CoverFlowView;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.DocumentViewer>.
			 */
			function createDocumentViewer(parameters?: any): Titanium.UI.iOS.DocumentViewer;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.DynamicItemBehavior>.
			 */
			function createDynamicItemBehavior(parameters?: any): Titanium.UI.iOS.DynamicItemBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.FeedbackGenerator>.
			 */
			function createFeedbackGenerator(parameters?: any): Titanium.UI.iOS.FeedbackGenerator;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.GravityBehavior>.
			 */
			function createGravityBehavior(parameters?: any): Titanium.UI.iOS.GravityBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.LivePhotoView>.
			 */
			function createLivePhotoView(parameters?: any): Titanium.UI.iOS.LivePhotoView;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.MenuPopup>.
			 */
			function createMenuPopup(parameters?: any): Titanium.UI.iOS.MenuPopup;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.NavigationWindow>.
			 */
			function createNavigationWindow(parameters?: any): Titanium.UI.iOS.NavigationWindow;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.PreviewAction>.
			 */
			function createPreviewAction(parameters?: any): Titanium.UI.iOS.PreviewAction;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.PreviewActionGroup>.
			 */
			function createPreviewActionGroup(parameters?: any): Titanium.UI.iOS.PreviewActionGroup;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.PreviewContext>.
			 */
			function createPreviewContext(parameters?: any): Titanium.UI.iOS.PreviewContext;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.PushBehavior>.
			 */
			function createPushBehavior(parameters?: any): Titanium.UI.iOS.PushBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.SnapBehavior>.
			 */
			function createSnapBehavior(parameters?: any): Titanium.UI.iOS.SnapBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.SplitWindow>.
			 */
			function createSplitWindow(parameters?: any): Titanium.UI.iOS.SplitWindow;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.Stepper>.
			 */
			function createStepper(parameters?: any): Titanium.UI.iOS.Stepper;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.TabbedBar>.
			 */
			function createTabbedBar(parameters?: any): Titanium.UI.iOS.TabbedBar;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.Toolbar>.
			 */
			function createToolbar(parameters?: any): Titanium.UI.iOS.Toolbar;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.ViewAttachmentBehavior>.
			 */
			function createViewAttachmentBehavior(parameters?: any): Titanium.UI.iOS.ViewAttachmentBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.WebViewConfiguration>.
			 */
			function createWebViewConfiguration(parameters?: any): Titanium.UI.iOS.WebViewConfiguration;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.WebViewDecisionHandler>.
			 */
			function createWebViewDecisionHandler(parameters?: any): Titanium.UI.iOS.WebViewDecisionHandler;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.WebViewProcessPool>.
			 */
			function createWebViewProcessPool(parameters?: any): Titanium.UI.iOS.WebViewProcessPool;

			/**
			 * Gets the value of the <Titanium.UI.iOS.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.iOS.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.iOS.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.UI.iOS.forceTouchSupported> property.
			 */
			function getForceTouchSupported(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.iOS.MODAL_PRESENTATION_CURRENT_CONTEXT> property.
			 */
			function setMODAL_PRESENTATION_CURRENT_CONTEXT(MODAL_PRESENTATION_CURRENT_CONTEXT: number): void;

			/**
			 * Sets the value of the <Titanium.UI.iOS.MODAL_PRESENTATION_OVER_CURRENT_CONTEXT> property.
			 */
			function setMODAL_PRESENTATION_OVER_CURRENT_CONTEXT(MODAL_PRESENTATION_OVER_CURRENT_CONTEXT: number): void;

			/**
			 * Sets the value of the <Titanium.UI.iOS.MODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN> property.
			 */
			function setMODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN(MODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN: number): void;

			/**
			 * Gets the value of the <Titanium.UI.iOS.appBadge> property.
			 */
			function getAppBadge(): number;

			/**
			 * Sets the value of the <Titanium.UI.iOS.appBadge> property.
			 */
			function setAppBadge(appBadge: number): void;

			/**
			 * Gets the value of the <Titanium.UI.iOS.appSupportsShakeToEdit> property.
			 */
			function getAppSupportsShakeToEdit(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.iOS.appSupportsShakeToEdit> property.
			 */
			function setAppSupportsShakeToEdit(appSupportsShakeToEdit: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.iOS.statusBarBackgroundColor> property.
			 */
			function getStatusBarBackgroundColor(): string;

			/**
			 * Sets the value of the <Titanium.UI.iOS.statusBarBackgroundColor> property.
			 */
			function setStatusBarBackgroundColor(statusBarBackgroundColor: string): void;

			/**
			 * The AdView is a view for display Apple iAds.
			 */
			interface AdView extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: number;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: number;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * Array of this view's child views.
				 */
				readonly children: Titanium.UI.View[];

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * The preview context used in the 3D-Touch feature "Peek and Pop".
				 */
				previewContext: Titanium.UI.iOS.PreviewContext;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * The view's tintColor
				 */
				tintColor: string;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Size of the advertisement when minimized.
				 */
				adSize: string;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any): void;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any[]): void;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove(view: any): void;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren(): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Cancel a banner to uncover the user interface.
				 */
				cancelAction(): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundLeftCap> property.
				 */
				getBackgroundLeftCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundLeftCap> property.
				 */
				setBackgroundLeftCap(backgroundLeftCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundTopCap> property.
				 */
				getBackgroundTopCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundTopCap> property.
				 */
				setBackgroundTopCap(backgroundTopCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.children> property.
				 */
				getChildren(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.previewContext> property.
				 */
				getPreviewContext(): Titanium.UI.iOS.PreviewContext;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.previewContext> property.
				 */
				setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AdView.adSize> property.
				 */
				getAdSize(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AdView.adSize> property.
				 */
				setAdSize(adSize: string): void;

			}
			/**
			 * Dynamic behavior to support connections between an anchor point and an item.
			 */
			interface AnchorAttachmentBehavior extends Titanium.Proxy {
				/**
				 * Anchor point for the attachment behavior relative to the animator's coordinate system.
				 */
				anchor: Point;

				/**
				 * Amount of damping to apply to the attachment behavior.
				 */
				damping: number;

				/**
				 * Distance, in points, between the two attachment points.
				 */
				distance: number;

				/**
				 * Frequency of oscillation for the behavior.
				 */
				frequency: number;

				/**
				 * Item to connect to use the attachment behavior.
				 */
				item: Titanium.UI.View;

				/**
				 * Offset from the center point of the item for the attachment.
				 */
				offset: Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.anchor> property.
				 */
				getAnchor(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.anchor> property.
				 */
				setAnchor(anchor: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.damping> property.
				 */
				getDamping(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.damping> property.
				 */
				setDamping(damping: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.distance> property.
				 */
				getDistance(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.distance> property.
				 */
				setDistance(distance: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.frequency> property.
				 */
				getFrequency(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.frequency> property.
				 */
				setFrequency(frequency: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.item> property.
				 */
				getItem(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.item> property.
				 */
				setItem(item: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.offset> property.
				 */
				getOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.offset> property.
				 */
				setOffset(offset: Point): void;

			}
			/**
			 * Provides support for the built-in iOS dynamic animations
			 */
			interface Animator extends Titanium.Proxy {
				/**
				 * Behaviors associated with this animator.
				 */
				behaviors: Titanium.Proxy[];

				/**
				 * Titanium View object to initialize as the reference view for the animator.
				 */
				referenceView: Titanium.UI.View;

				/**
				 * Returns `true` if the animator is running else `false`.
				 */
				readonly running: boolean;

				/**
				 * Adds a dynamic behavior to the animator.
				 */
				addBehavior(behavior: Titanium.Proxy): void;

				/**
				 * Removes all behaviors from this animator.
				 */
				removeAllBehaviors(): void;

				/**
				 * Removes the specified behavior from the animator.
				 */
				removeBehavior(behavior: Titanium.Proxy): void;

				/**
				 * Starts the animation behaviors.
				 */
				startAnimator(): void;

				/**
				 * Stops the animation behaviors.
				 */
				stopAnimator(): void;

				/**
				 * Updates the animator's state information with the current state of the specified item.
				 */
				updateItemUsingCurrentState(item: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Animator.behaviors> property.
				 */
				getBehaviors(): Titanium.Proxy[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.Animator.behaviors> property.
				 */
				setBehaviors(behaviors: ReadonlyArray<Titanium.Proxy>): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Animator.referenceView> property.
				 */
				getReferenceView(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Animator.referenceView> property.
				 */
				setReferenceView(referenceView: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Animator.running> property.
				 */
				getRunning(): boolean;

			}
			/**
			 * The Home screen quick actions API is for adding shortcuts to your app icon that anticipate and accelerate a
			 * user's interaction with your app.
			 */
			interface ApplicationShortcuts extends Titanium.Proxy {
				/**
				 * Returns an array of the application shortcuts created dynamically.
				 */
				listDynamicShortcuts(): ShortcutParams[];

				/**
				 * Returns an array of the application shortcuts listed in your tiapp.xml file.
				 */
				listStaticShortcuts(): ShortcutParams[];

				/**
				 * Removes all dynamically created application shortcuts.
				 */
				removeAllDynamicShortcuts(): void;

				/**
				 * Returns true or false depending if the provided shortcut object already exists.
				 */
				dynamicShortcutExists(itemtype: string): boolean;

				/**
				 * Creates a new dynamic application shortcut item.
				 */
				addDynamicShortcut(params: ShortcutParams): void;

				/**
				 * Removes the dynamic application shortcut item identified by the `itemtype`.
				 */
				removeDynamicShortcut(itemtype: string): void;

				/**
				 * Gets the dynamic application shortcut item identified by the `itemtype`.
				 */
				getDynamicShortcut(itemtype: string): void;

			}
			/**
			 * An abstract datatype for specifying an attributed string attribute.
			 */
			interface Attribute extends Titanium.Proxy {
				/**
				 * Attribute to apply to the text.
				 */
				type: number;

				/**
				 * Attribute value.
				 */
				value: number;

				/**
				 * Attribute range.
				 */
				range: number[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.Attribute.type> property.
				 */
				getType(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Attribute.type> property.
				 */
				setType(type: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Attribute.value> property.
				 */
				getValue(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Attribute.value> property.
				 */
				setValue(value: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Attribute.range> property.
				 */
				getRange(): number[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.Attribute.range> property.
				 */
				setRange(range: ReadonlyArray<number>): void;

			}
			/**
			 * An attributed string proxy manages character strings and associated sets of attributes (for example,
			 * font and kerning) that apply to individual characters or ranges of characters in the string.
			 */
			interface AttributedString extends Titanium.Proxy {
				/**
				 * The text applied to the attributed string.
				 */
				text: string;

				/**
				 * An array of attributes to add.
				 */
				attributes: Attribute[];

				/**
				 * Adds an [attribute](Attribute) with the given name and value to the characters in the specified range.
				 */
				addAttribute(attribute: Attribute): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AttributedString.text> property.
				 */
				getText(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AttributedString.text> property.
				 */
				setText(text: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AttributedString.attributes> property.
				 */
				getAttributes(): Attribute[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.AttributedString.attributes> property.
				 */
				setAttributes(attributes: ReadonlyArray<Attribute>): void;

			}
			/**
			 * A <Titanium.UI.iOS.BlurView> object gives you an easy way implement some complex visual effects.
			 * The blur effect is applied to every view the blur view is added to by default. You can also place the
			 * blur view above other views and all visible views layered under the blur view are blurred as well.
			 * For more information on BlurView, please refer to the official [Apple documentation](https://developer.apple.com/documentation/uikit/uivisualeffectview).
			 * Note: Apple introduced two new constants <Titanium.UI.iOS.BLUR_EFFECT_STYLE_REGULAR> and <Titanium.UI.iOS.BLUR_EFFECT_STYLE_PROMINENT> in
			 * iOS 10. These are internally mapped to <Titanium.UI.iOS.BLUR_EFFECT_STYLE_LIGHT> and <Titanium.UI.iOS.BLUR_EFFECT_STYLE_EXTRA_LIGHT>.
			 */
			interface BlurView extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: number;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: number;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * Array of this view's child views.
				 */
				readonly children: Titanium.UI.View[];

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * The preview context used in the 3D-Touch feature "Peek and Pop".
				 */
				previewContext: Titanium.UI.iOS.PreviewContext;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * The view's tintColor
				 */
				tintColor: string;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * The effect you provide for the view.
				 */
				effect: number;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any): void;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any[]): void;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove(view: any): void;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren(): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundLeftCap> property.
				 */
				getBackgroundLeftCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundLeftCap> property.
				 */
				setBackgroundLeftCap(backgroundLeftCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundTopCap> property.
				 */
				getBackgroundTopCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundTopCap> property.
				 */
				setBackgroundTopCap(backgroundTopCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.children> property.
				 */
				getChildren(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.previewContext> property.
				 */
				getPreviewContext(): Titanium.UI.iOS.PreviewContext;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.previewContext> property.
				 */
				setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.BlurView.effect> property.
				 */
				getEffect(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.BlurView.effect> property.
				 */
				setEffect(effect: number): void;

			}
			/**
			 * Dynamic behavior to support collisions between items and boundaries.
			 */
			interface CollisionBehavior extends Titanium.Proxy {
				/**
				 * Boundary identfiers added to this behavior.
				 */
				readonly boundaryIdentifiers: BoundaryIdentifier[];

				/**
				 * Specifies the collision behavior.
				 */
				collisionMode: number;

				/**
				 * Items added to this behavior.
				 */
				readonly items: Titanium.UI.View[];

				/**
				 * Insets to apply when using the animator's reference view as the boundary.
				 */
				referenceInsets: ReferenceInsets;

				/**
				 * Use the animator's reference view as the boundary.
				 */
				treatReferenceAsBoundary: boolean;

				/**
				 * Adds a boundary to this behavior.
				 */
				addBoundary(boundary: BoundaryIdentifier): void;

				/**
				 * Adds an item to this behavior.
				 */
				addItem(item: any): void;

				/**
				 * Removes all boundaries from this behavior.
				 */
				removeAllBoundaries(): void;

				/**
				 * Removes the specified boundary from this behavior.
				 */
				removeBoundary(boundary: BoundaryIdentifier): void;

				/**
				 * Removes the specified item from this behavior.
				 */
				removeItem(item: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.boundaryIdentifiers> property.
				 */
				getBoundaryIdentifiers(): BoundaryIdentifier[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.collisionMode> property.
				 */
				getCollisionMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CollisionBehavior.collisionMode> property.
				 */
				setCollisionMode(collisionMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.items> property.
				 */
				getItems(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.referenceInsets> property.
				 */
				getReferenceInsets(): ReferenceInsets;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CollisionBehavior.referenceInsets> property.
				 */
				setReferenceInsets(referenceInsets: ReferenceInsets): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.treatReferenceAsBoundary> property.
				 */
				getTreatReferenceAsBoundary(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CollisionBehavior.treatReferenceAsBoundary> property.
				 */
				setTreatReferenceAsBoundary(treatReferenceAsBoundary: boolean): void;

			}
			/**
			 * The cover flow view is a container showing animated three-dimensional images in a style
			 * consistent with the cover flow presentation style used for iPod, iTunes, and file browsing.
			 */
			interface CoverFlowView extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: number;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: number;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * The preview context used in the 3D-Touch feature "Peek and Pop".
				 */
				previewContext: Titanium.UI.iOS.PreviewContext;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * The view's tintColor
				 */
				tintColor: string;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Images to display in the view.
				 */
				images: string[] | Titanium.Blob[] | Titanium.Filesystem.File[] | CoverFlowImageType[];

				/**
				 * Index to make selected.
				 */
				selected: number;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Changes the image for a specified index.
				 */
				setImage(index: number, image: string): void;

				/**
				 * Changes the image for a specified index.
				 */
				setImage(index: number, image: Titanium.Blob): void;

				/**
				 * Changes the image for a specified index.
				 */
				setImage(index: number, image: Titanium.Filesystem.File): void;

				/**
				 * Changes the image for a specified index.
				 */
				setImage(index: number, image: CoverFlowImageType): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundLeftCap> property.
				 */
				getBackgroundLeftCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundLeftCap> property.
				 */
				setBackgroundLeftCap(backgroundLeftCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundTopCap> property.
				 */
				getBackgroundTopCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundTopCap> property.
				 */
				setBackgroundTopCap(backgroundTopCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.previewContext> property.
				 */
				getPreviewContext(): Titanium.UI.iOS.PreviewContext;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.previewContext> property.
				 */
				setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
				 */
				getImages(): string[] | Titanium.Blob[] | Titanium.Filesystem.File[] | CoverFlowImageType[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
				 */
				setImages(images: ReadonlyArray<string>): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
				 */
				setImages(images: ReadonlyArray<Titanium.Blob>): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
				 */
				setImages(images: ReadonlyArray<Titanium.Filesystem.File>): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
				 */
				setImages(images: ReadonlyArray<CoverFlowImageType>): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.selected> property.
				 */
				getSelected(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.selected> property.
				 */
				setSelected(selected: number): void;

			}
			/**
			 * A DocumentViewer provides in-app support for managing user interactions with files on the
			 * local system.
			 */
			interface DocumentViewer extends Titanium.Proxy {
				/**
				 * Name of the file (without the path).
				 */
				readonly name: string;

				/**
				 * URL of the document being previewed.
				 */
				url: string;

				/**
				 * Dismisses the document viewer.
				 */
				hide(options?: DocumentViewerOptions): void;

				/**
				 * Displays the document viewer over the current view.
				 */
				show(options?: DocumentViewerOptions): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.DocumentViewer.name> property.
				 */
				getName(): string;

				/**
				 * Gets the value of the <Titanium.UI.iOS.DocumentViewer.url> property.
				 */
				getUrl(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.DocumentViewer.url> property.
				 */
				setUrl(url: string): void;

			}
			/**
			 * Base dynamic configuration for an item.
			 */
			interface DynamicItemBehavior extends Titanium.Proxy {
				/**
				 * Specifies if this item can rotate.
				 */
				allowsRotation: boolean;

				/**
				 * Specifies the angular resistance of this item.
				 */
				angularResistance: number;

				/**
				 * Specifies the relative mass density of this item.
				 */
				density: number;

				/**
				 * Specifies the elasticity applied to collisions for this item.
				 */
				elasticity: number;

				/**
				 * Specifies the linear resistance of the item when it slides against another item.
				 */
				friction: number;

				/**
				 * Items added to this behavior.
				 */
				readonly items: Titanium.UI.View[];

				/**
				 * Specifies the linear resistance of this item which reduces linear velocity over time.
				 */
				resistance: number;

				/**
				 * Adds a specified angular velocity for the item.
				 */
				addAngularVelocityForItem(item: any, velocity: number): void;

				/**
				 * Adds an item to this behavior.
				 */
				addItem(item: any): void;

				/**
				 * Adds a specified linear velocity for the item.
				 */
				addLinearVelocityForItem(item: any, velocity: Point): void;

				/**
				 * Returns the angular velocity of the item.
				 */
				angularVelocityForItem(item: any): number;

				/**
				 * Returns the linear velocity of the item.
				 */
				linearVelocityForItem(item: any): Point;

				/**
				 * Removes the specified item from this behavior.
				 */
				removeItem(item: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.allowsRotation> property.
				 */
				getAllowsRotation(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.allowsRotation> property.
				 */
				setAllowsRotation(allowsRotation: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.angularResistance> property.
				 */
				getAngularResistance(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.angularResistance> property.
				 */
				setAngularResistance(angularResistance: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.density> property.
				 */
				getDensity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.density> property.
				 */
				setDensity(density: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.elasticity> property.
				 */
				getElasticity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.elasticity> property.
				 */
				setElasticity(elasticity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.friction> property.
				 */
				getFriction(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.friction> property.
				 */
				setFriction(friction: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.items> property.
				 */
				getItems(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.resistance> property.
				 */
				getResistance(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.resistance> property.
				 */
				setResistance(resistance: number): void;

			}
			/**
			 * The feedback generator API is introduced in iOS 10 to handle the haptic feedback when using an iPhone 7 or
			 * later devices.
			 */
			interface FeedbackGenerator extends Titanium.Proxy {
				/**
				 * The type of feedback generator you want to create.
				 */
				type: number;

				/**
				 * The style of the feedback generator you want to create. This property is only required when using <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
				 */
				style?: number;

				/**
				 * Used to prepare the haptic sensor for the upcoming interaction with it.
				 */
				prepare(): void;

				/**
				 * Used to trigger a haptic feedback after a selection has been made.
				 */
				selectionChanged(): void;

				/**
				 * Used to trigger a haptic feedback after an impact occurred.
				 */
				impactOccurred(): void;

				/**
				 * Used to trigger a haptic feedback after a notification has been received.
				 */
				notificationOccurred(notificationType: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.FeedbackGenerator.type> property.
				 */
				getType(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.FeedbackGenerator.type> property.
				 */
				setType(type: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.FeedbackGenerator.style> property.
				 */
				getStyle(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.FeedbackGenerator.style> property.
				 */
				setStyle(style: number): void;

			}
			/**
			 * Gravitational force to apply to an item.
			 */
			interface GravityBehavior extends Titanium.Proxy {
				/**
				 * Specifies the angle of the gravity vector in radians.
				 */
				angle: number;

				/**
				 * Specifies the direction of the gravity vector as an x, y pair.
				 */
				gravityDirection: Point;

				/**
				 * Items added to this behavior.
				 */
				readonly items: Titanium.UI.View[];

				/**
				 * Specifies the magnitude of the gravity vector.
				 */
				magnitude: number;

				/**
				 * Adds an item to this behavior.
				 */
				addItem(item: any): void;

				/**
				 * Removes the specified item from this behavior.
				 */
				removeItem(item: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.GravityBehavior.angle> property.
				 */
				getAngle(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.GravityBehavior.angle> property.
				 */
				setAngle(angle: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.GravityBehavior.gravityDirection> property.
				 */
				getGravityDirection(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.GravityBehavior.gravityDirection> property.
				 */
				setGravityDirection(gravityDirection: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.GravityBehavior.items> property.
				 */
				getItems(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.GravityBehavior.magnitude> property.
				 */
				getMagnitude(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.GravityBehavior.magnitude> property.
				 */
				setMagnitude(magnitude: number): void;

			}
			/**
			 * A set of constants for the style that can be used for the `selectionStyle` property of a
			 * ListItem, which is set in the `properties` dictionary of either the <ListDataItem> or
			 * <ItemTemplate>.
			 */
			interface ListViewCellSelectionStyle extends Titanium.Proxy {
				/**
				 * The cell when selected has a blue background. This is the default value.
				 */
				readonly BLUE: number;

				/**
				 * The cell when selected has a gray background.
				 */
				readonly GRAY: number;

				/**
				 * The cell has no distinct style for when it is selected.
				 */
				readonly NONE: number;

			}
			/**
			 * A set of constants for the position value that can be used for the `position` property of
			 * <ListViewAnimationProperties> when invoking the ListView's `scrollToItem`, `appendSection`,
			 * `deleteSectionAt`, `insertSectionAt` and `replaceSectionAt` methods.
			 */
			interface ListViewScrollPosition extends Titanium.Proxy {
				/**
				 * The list view scrolls the row of interest to the bottom of the visible list view.
				 */
				readonly BOTTOM: number;

				/**
				 * The list view scrolls the row of interest to the middle of the list table view.
				 */
				readonly MIDDLE: number;

				/**
				 * The table view scrolls the row of interest to be fully visible with a minimal movement.
				 * If the row is already fully visible, no scrolling occurs. For example, if the row is above the
				 * visible area, the behavior is identical to that specified by `TOP`. This is the default.
				 */
				readonly NONE: number;

				/**
				 * The list view scrolls the row of interest to the top of the visible list view.
				 */
				readonly TOP: number;

			}
			/**
			 * A set of constants for the style that can be used for the `style` property of
			 * <Titanium.UI.ListView>.
			 */
			interface ListViewStyle extends Titanium.Proxy {
				/**
				 * A list view whose sections present distinct groups of rows. The section headers and footers
				 * do not float.
				 */
				readonly GROUPED: number;

				/**
				 * A plain list view. Any section headers or footers are displayed as inline separators and
				 * float when the list view is scrolled.
				 */
				readonly PLAIN: number;

			}
			/**
			 * Abstract object representing a live photo used in <Titanium.UI.iOS.LivePhotoView>.
			 */
			interface LivePhoto extends Titanium.Proxy {
			}
			/**
			 * A view to display a <Titanium.UI.iOS.LivePhoto> object introduced in iOS 9.1.
			 */
			interface LivePhotoView extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: number;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: number;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * Array of this view's child views.
				 */
				readonly children: Titanium.UI.View[];

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * The preview context used in the 3D-Touch feature "Peek and Pop".
				 */
				previewContext: Titanium.UI.iOS.PreviewContext;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * The view's tintColor
				 */
				tintColor: string;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * The Live Photo displayed in the view.
				 */
				livePhoto: Titanium.UI.iOS.LivePhoto;

				/**
				 * A Boolean value that determines whether the view plays the audio content of its Live Photo.
				 */
				muted: boolean;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any): void;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any[]): void;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove(view: any): void;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren(): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Begins playback of Live Photo content in the view.
				 */
				startPlaybackWithStyle(playbackStyle: number): void;

				/**
				 * Ends playback of Live Photo content in the view.
				 */
				stopPlayback(): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundLeftCap> property.
				 */
				getBackgroundLeftCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundLeftCap> property.
				 */
				setBackgroundLeftCap(backgroundLeftCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundTopCap> property.
				 */
				getBackgroundTopCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundTopCap> property.
				 */
				setBackgroundTopCap(backgroundTopCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.children> property.
				 */
				getChildren(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.previewContext> property.
				 */
				getPreviewContext(): Titanium.UI.iOS.PreviewContext;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.previewContext> property.
				 */
				setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.livePhoto> property.
				 */
				getLivePhoto(): Titanium.UI.iOS.LivePhoto;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.livePhoto> property.
				 */
				setLivePhoto(livePhoto: Titanium.UI.iOS.LivePhoto): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.muted> property.
				 */
				getMuted(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.muted> property.
				 */
				setMuted(muted: boolean): void;

			}
			/**
			 * A menu popup provides the ability to create custom tooltip options using the `items` property
			 * covering the native `UIMenuController` class.
			 * See also:
			 * * [iOS Developer Library: UIMenuController](https://developer.apple.com/documentation/uikit/uimenucontroller)
			 */
			interface MenuPopup extends Titanium.Proxy {
				/**
				 * The items of the menu popup.
				 */
				items: string;

				/**
				 * Shows the menu popup.
				 */
				show(params: MenuPopupShowParams): void;

				/**
				 * Hides the menu popup.
				 */
				hide(params?: MenuPopupHideParams): void;

				/**
				 * Indicates whether the menu popup is currently visible.
				 */
				isVisible(): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.MenuPopup.items> property.
				 */
				getItems(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.MenuPopup.items> property.
				 */
				setItems(items: string): void;

			}
			/**
			 * A `NavigationWindow` implements a specialized view that manages the navigation of hierarchical
			 * content.
			 */
			interface NavigationWindow extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * Background color of the window, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: number;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: number;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * Window's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * Array of this view's child views.
				 */
				readonly children: Titanium.UI.View[];

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * Window's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * The opacity from 0.0-1.0.
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * The preview context used in the 3D-Touch feature "Peek and Pop".
				 */
				previewContext: Titanium.UI.iOS.PreviewContext;

				/**
				 * Window's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * The view's tintColor
				 */
				tintColor: string;

				/**
				 * Window's top position, in platform-specific units.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
				 */
				extendEdges: number[];

				/**
				 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
				 */
				includeOpaqueBars: boolean;

				/**
				 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
				 */
				autoAdjustScrollViewInsets: boolean;

				/**
				 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
				 */
				extendSafeArea: boolean;

				/**
				 * Boolean value indicating if the window is fullscreen.
				 */
				fullscreen: boolean;

				/**
				 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
				 */
				homeIndicatorAutoHidden: boolean;

				/**
				 * Set this to true to hide the navigation bar on swipe.
				 */
				hidesBarsOnSwipe: boolean;

				/**
				 * Set this to true to hide the navigation bar on tap.
				 */
				hidesBarsOnTap: boolean;

				/**
				 * Set this to true to hide the navigation bar when the keyboard appears.
				 */
				hidesBarsWhenKeyboardAppears: boolean;

				/**
				 * Set this to true to hide the back button of navigation bar.
				 */
				hidesBackButton: boolean;

				/**
				 * A Boolean value indicating whether the title should be displayed in a large format.
				 */
				largeTitleEnabled: string;

				/**
				 * The mode to use when displaying the title of the navigation bar.
				 */
				largeTitleDisplayMode: number;

				/**
				 * An Array of views to show in the left nav bar area.
				 */
				leftNavButtons: Titanium.UI.View[];

				/**
				 * Indicates to open a modal window or not.
				 */
				modal: boolean;

				/**
				 * The <Titanium.UI.NavigationWindow> instance hosting this window.
				 */
				readonly navigationWindow: Titanium.UI.NavigationWindow;

				/**
				 * Array of supported orientation modes, specified using the orientation
				 * constants defined in <Titanium.UI>.
				 */
				orientationModes: number[];

				/**
				 * Current orientation of the window.
				 */
				readonly orientation: number;

				/**
				 * An Array of views to show in the right nav bar area.
				 */
				rightNavButtons: Titanium.UI.View[];

				/**
				 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
				 */
				readonly safeAreaPadding: Dimension;

				/**
				 * The status bar style associated with this window.
				 */
				statusBarStyle: number;

				/**
				 * Title text attributes of the window.
				 */
				titleAttributes: titleAttributesParams;

				/**
				 * Window to add to this navigation window.
				 */
				window: Titanium.UI.Window;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any): void;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any[]): void;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove(view: any): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Closes the window.
				 */
				close(params?: any): void;

				/**
				 * Hides the navigation bar.
				 */
				hideNavBar(options?: any): void;

				/**
				 * Opens the window.
				 */
				open(params?: openWindowParams): void;

				/**
				 * Makes the navigation bar visible.
				 */
				showNavBar(options?: any): void;

				/**
				 * Makes the bottom toolbar visible.
				 */
				showToolbar(options?: any): void;

				/**
				 * Makes the bottom toolbar invisible.
				 */
				hideToolbar(options?: any): void;

				/**
				 * Closes a window and removes it from the navigation window.
				 */
				closeWindow(window: Titanium.UI.Window, options: any): void;

				/**
				 * Opens a window within the navigation window.
				 */
				openWindow(window: Titanium.UI.Window, options: any): void;

				/**
				 * Closes all windows that are currently opened inside the navigation window.
				 */
				popToRootWindow(options: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundLeftCap> property.
				 */
				getBackgroundLeftCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundLeftCap> property.
				 */
				setBackgroundLeftCap(backgroundLeftCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundTopCap> property.
				 */
				getBackgroundTopCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundTopCap> property.
				 */
				setBackgroundTopCap(backgroundTopCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.children> property.
				 */
				getChildren(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.previewContext> property.
				 */
				getPreviewContext(): Titanium.UI.iOS.PreviewContext;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.previewContext> property.
				 */
				setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.extendEdges> property.
				 */
				getExtendEdges(): number[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.extendEdges> property.
				 */
				setExtendEdges(extendEdges: ReadonlyArray<number>): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.includeOpaqueBars> property.
				 */
				getIncludeOpaqueBars(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.includeOpaqueBars> property.
				 */
				setIncludeOpaqueBars(includeOpaqueBars: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.autoAdjustScrollViewInsets> property.
				 */
				getAutoAdjustScrollViewInsets(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.autoAdjustScrollViewInsets> property.
				 */
				setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.extendSafeArea> property.
				 */
				getExtendSafeArea(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.extendSafeArea> property.
				 */
				setExtendSafeArea(extendSafeArea: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.fullscreen> property.
				 */
				getFullscreen(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.fullscreen> property.
				 */
				setFullscreen(fullscreen: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.homeIndicatorAutoHidden> property.
				 */
				getHomeIndicatorAutoHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.homeIndicatorAutoHidden> property.
				 */
				setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsOnSwipe> property.
				 */
				getHidesBarsOnSwipe(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsOnSwipe> property.
				 */
				setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsOnTap> property.
				 */
				getHidesBarsOnTap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsOnTap> property.
				 */
				setHidesBarsOnTap(hidesBarsOnTap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsWhenKeyboardAppears> property.
				 */
				getHidesBarsWhenKeyboardAppears(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsWhenKeyboardAppears> property.
				 */
				setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBackButton> property.
				 */
				getHidesBackButton(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBackButton> property.
				 */
				setHidesBackButton(hidesBackButton: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.largeTitleEnabled> property.
				 */
				getLargeTitleEnabled(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.largeTitleEnabled> property.
				 */
				setLargeTitleEnabled(largeTitleEnabled: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.largeTitleDisplayMode> property.
				 */
				getLargeTitleDisplayMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.largeTitleDisplayMode> property.
				 */
				setLargeTitleDisplayMode(largeTitleDisplayMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.leftNavButtons> property.
				 */
				getLeftNavButtons(): Titanium.UI.View[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.leftNavButtons> property.
				 */
				setLeftNavButtons(leftNavButtons: any[]): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.modal> property.
				 */
				getModal(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.modal> property.
				 */
				setModal(modal: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.navigationWindow> property.
				 */
				getNavigationWindow(): Titanium.UI.NavigationWindow;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.orientationModes> property.
				 */
				getOrientationModes(): number[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.orientationModes> property.
				 */
				setOrientationModes(orientationModes: ReadonlyArray<number>): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.orientation> property.
				 */
				getOrientation(): number;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.rightNavButtons> property.
				 */
				getRightNavButtons(): Titanium.UI.View[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.rightNavButtons> property.
				 */
				setRightNavButtons(rightNavButtons: any[]): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.safeAreaPadding> property.
				 */
				getSafeAreaPadding(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.statusBarStyle> property.
				 */
				getStatusBarStyle(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.statusBarStyle> property.
				 */
				setStatusBarStyle(statusBarStyle: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.titleAttributes> property.
				 */
				getTitleAttributes(): titleAttributesParams;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.titleAttributes> property.
				 */
				setTitleAttributes(titleAttributes: titleAttributesParams): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.window> property.
				 */
				getWindow(): Titanium.UI.Window;

				/**
				 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.window> property.
				 */
				setWindow(window: Titanium.UI.Window): void;

			}
			/**
			 * A PreviewAction provides options to configure actions used by the iOS 9 3D-Touch "Peek and Pop"
			 * feature.
			 */
			interface PreviewAction extends Titanium.Proxy {
				/**
				 * The title of the action.
				 */
				title: string;

				/**
				 * The style of the action.
				 */
				style: number;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PreviewAction.title> property.
				 */
				getTitle(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PreviewAction.title> property.
				 */
				setTitle(title: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PreviewAction.style> property.
				 */
				getStyle(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PreviewAction.style> property.
				 */
				setStyle(style: number): void;

			}
			/**
			 * A PreviewActionGroup provides options to configure a group of actions used by the iOS9 3D-Touch
			 * feature "Peek and Pop".
			 */
			interface PreviewActionGroup extends Titanium.Proxy {
				/**
				 * The title of the action group.
				 */
				title: string;

				/**
				 * The style of the action group.
				 */
				style: number;

				/**
				 * The preview actions assigned to this preview action group.
				 */
				actions: Titanium.UI.iOS.PreviewAction[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.PreviewActionGroup.title> property.
				 */
				getTitle(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PreviewActionGroup.title> property.
				 */
				setTitle(title: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PreviewActionGroup.style> property.
				 */
				getStyle(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PreviewActionGroup.style> property.
				 */
				setStyle(style: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PreviewActionGroup.actions> property.
				 */
				getActions(): Titanium.UI.iOS.PreviewAction[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.PreviewActionGroup.actions> property.
				 */
				setActions(actions: ReadonlyArray<Titanium.UI.iOS.PreviewAction>): void;

			}
			/**
			 * A PreviewContext provides options to configure the iOS 9 3D-Touch "Peek and Pop" feature.
			 */
			interface PreviewContext extends Titanium.Proxy {
				/**
				 * The preview actions and preview action groups.
				 */
				actions: Titanium.UI.iOS.PreviewAction[];

				/**
				 * The height of the preview.
				 */
				contentHeight: number;

				/**
				 * The preview view.
				 */
				preview: Titanium.UI.View;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PreviewContext.actions> property.
				 */
				getActions(): Titanium.UI.iOS.PreviewAction[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.PreviewContext.actions> property.
				 */
				setActions(actions: ReadonlyArray<Titanium.UI.iOS.PreviewAction>): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PreviewContext.contentHeight> property.
				 */
				getContentHeight(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PreviewContext.contentHeight> property.
				 */
				setContentHeight(contentHeight: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PreviewContext.preview> property.
				 */
				getPreview(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PreviewContext.preview> property.
				 */
				setPreview(preview: any): void;

			}
			/**
			 * Continuous or instantaneous force to apply to an item.
			 */
			interface PushBehavior extends Titanium.Proxy {
				/**
				 * State of the push behavior's force.
				 */
				active: boolean;

				/**
				 * Specifies the angle of the force vector in radians.
				 */
				angle: number;

				/**
				 * Items added to this behavior.
				 */
				readonly items: Titanium.UI.View[];

				/**
				 * Specifies the magnitude of the force vector.
				 */
				magnitude: number;

				/**
				 * Specifies the direction of the force vector as an x, y pair.
				 */
				pushDirection: Point;

				/**
				 * Specifies the push mode.
				 */
				pushMode: number;

				/**
				 * Adds an item to this behavior.
				 */
				addItem(item: any): void;

				/**
				 * Removes the specified item from this behavior.
				 */
				removeItem(item: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PushBehavior.active> property.
				 */
				getActive(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PushBehavior.active> property.
				 */
				setActive(active: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PushBehavior.angle> property.
				 */
				getAngle(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PushBehavior.angle> property.
				 */
				setAngle(angle: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PushBehavior.items> property.
				 */
				getItems(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.PushBehavior.magnitude> property.
				 */
				getMagnitude(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PushBehavior.magnitude> property.
				 */
				setMagnitude(magnitude: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PushBehavior.pushDirection> property.
				 */
				getPushDirection(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PushBehavior.pushDirection> property.
				 */
				setPushDirection(pushDirection: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.PushBehavior.pushMode> property.
				 */
				getPushMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.PushBehavior.pushMode> property.
				 */
				setPushMode(pushMode: number): void;

			}
			/**
			 * Dynamic behavior defining an item's movement to a specific point.
			 */
			interface SnapBehavior extends Titanium.Proxy {
				/**
				 * Specifies the amount of oscillation during the conclusion of the snap.
				 */
				damping: number;

				/**
				 * Item to add to this behavior.
				 */
				item: Titanium.UI.View;

				/**
				 * Specifies the point to snap to.
				 */
				snapPoint: Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SnapBehavior.damping> property.
				 */
				getDamping(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SnapBehavior.damping> property.
				 */
				setDamping(damping: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SnapBehavior.item> property.
				 */
				getItem(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SnapBehavior.item> property.
				 */
				setItem(item: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SnapBehavior.snapPoint> property.
				 */
				getSnapPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SnapBehavior.snapPoint> property.
				 */
				setSnapPoint(snapPoint: Point): void;

			}
			/**
			 * A SplitWindow is a window that manages the presentation of two side-by-side view
			 * controllers.
			 */
			interface SplitWindow extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * Background color of the window, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: number;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: number;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * Window's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * Array of this view's child views.
				 */
				readonly children: Titanium.UI.View[];

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * Window's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * The opacity from 0.0-1.0.
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * The preview context used in the 3D-Touch feature "Peek and Pop".
				 */
				previewContext: Titanium.UI.iOS.PreviewContext;

				/**
				 * Window's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * The view's tintColor
				 */
				tintColor: string;

				/**
				 * Window's top position, in platform-specific units.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Title for the back button. This is only valid when the window is a child of a tab.
				 */
				backButtonTitle: string;

				/**
				 * The image to show as the back button. This is only valid when the window is a child of a tab.
				 */
				backButtonTitleImage: string | Titanium.Blob;

				/**
				 * Background color for the nav bar, as a color name or hex triplet.
				 */
				barColor: string;

				/**
				 * Background image for the nav bar, specified as a URL to a local image.
				 */
				barImage: string;

				/**
				 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
				 */
				extendEdges: number[];

				/**
				 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
				 */
				includeOpaqueBars: boolean;

				/**
				 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
				 */
				autoAdjustScrollViewInsets: boolean;

				/**
				 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
				 */
				extendSafeArea: boolean;

				/**
				 * Boolean value indicating if the window is fullscreen.
				 */
				fullscreen: boolean;

				/**
				 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
				 */
				homeIndicatorAutoHidden: boolean;

				/**
				 * Set this to true to hide the shadow image of the navigation bar.
				 */
				hideShadow: boolean;

				/**
				 * Set this to true to hide the navigation bar on swipe.
				 */
				hidesBarsOnSwipe: boolean;

				/**
				 * Set this to true to hide the navigation bar on tap.
				 */
				hidesBarsOnTap: boolean;

				/**
				 * Set this to true to hide the navigation bar when the keyboard appears.
				 */
				hidesBarsWhenKeyboardAppears: boolean;

				/**
				 * Set this to true to hide the back button of navigation bar.
				 */
				hidesBackButton: boolean;

				/**
				 * A Boolean value indicating whether the title should be displayed in a large format.
				 */
				largeTitleEnabled: string;

				/**
				 * The mode to use when displaying the title of the navigation bar.
				 */
				largeTitleDisplayMode: number;

				/**
				 * View to show in the left nav bar area.
				 */
				leftNavButton: Titanium.UI.View;

				/**
				 * An Array of views to show in the left nav bar area.
				 */
				leftNavButtons: Titanium.UI.View[];

				/**
				 * Indicates to open a modal window or not.
				 */
				modal: boolean;

				/**
				 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
				 */
				navBarHidden: boolean;

				/**
				 * The tintColor to apply to the navigation bar.
				 */
				navTintColor: string;

				/**
				 * The <Titanium.UI.NavigationWindow> instance hosting this window.
				 */
				readonly navigationWindow: Titanium.UI.NavigationWindow;

				/**
				 * Array of supported orientation modes, specified using the orientation
				 * constants defined in <Titanium.UI>.
				 */
				orientationModes: number[];

				/**
				 * Current orientation of the window.
				 */
				readonly orientation: number;

				/**
				 * View to show in the right nav bar area.
				 */
				rightNavButton: Titanium.UI.View;

				/**
				 * An Array of views to show in the right nav bar area.
				 */
				rightNavButtons: Titanium.UI.View[];

				/**
				 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
				 */
				readonly safeAreaPadding: Dimension;

				/**
				 * Shadow image for the navigation bar, specified as a URL to a local image..
				 */
				shadowImage: string;

				/**
				 * The status bar style associated with this window.
				 */
				statusBarStyle: number;

				/**
				 * Boolean value indicating if the tab bar should be hidden.
				 */
				tabBarHidden: boolean;

				/**
				 * Title of the window.
				 */
				title: string;

				/**
				 * Title text attributes of the window.
				 */
				titleAttributes: titleAttributesParams;

				/**
				 * View to show in the title area of the nav bar.
				 */
				titleControl: Titanium.UI.View;

				/**
				 * Image to show in the title area of the nav bar, specified as a local file path or URL.
				 */
				titleImage: string;

				/**
				 * Title prompt for the window.
				 */
				titlePrompt: string;

				/**
				 * Key identifying a string from the locale file to use for the window title.
				 */
				titleid: string;

				/**
				 * Key identifying a string from the locale file to use for the window title prompt.
				 */
				titlepromptid: string;

				/**
				 * Array of button objects to show in the window's toolbar.
				 */
				toolbar: any[];

				/**
				 * Boolean value indicating if the nav bar is translucent.
				 */
				translucent: boolean;

				/**
				 * Loads a JavaScript file from a local URL.
				 */
				url: string;

				/**
				 * Window for the detail view section of the SplitWindow.
				 */
				detailView: Titanium.UI.Window;

				/**
				 * Window for the master view section of the SplitWindow.
				 */
				masterView: Titanium.UI.Window;

				/**
				 * Determines whether to show the master view in portrait orientation.
				 */
				showMasterInPortrait: boolean;

				/**
				 * Determines whether to show the master view is overlayed in portrait orientation.
				 */
				masterIsOverlayed: boolean;

				/**
				 * Determines whether to show the master view or hide.
				 */
				masterViewVisible: boolean;

				/**
				 * Determines the width of the `masterView` in portrait mode.
				 */
				portraitSplit: number;

				/**
				 * Determines the width of the `masterView` in landscape mode.
				 */
				landscapeSplit: number;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any): void;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any[]): void;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove(view: any): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Closes the window.
				 */
				close(params?: any): void;

				/**
				 * Hides the navigation bar.
				 */
				hideNavBar(options?: any): void;

				/**
				 * Hides the tab bar. Must be called before opening the window.
				 */
				hideTabBar(): void;

				/**
				 * Opens the window.
				 */
				open(params?: openWindowParams): void;

				/**
				 * Sets the array of items to show in the window's toolbar.
				 */
				setToolbar(items: ReadonlyArray<any>, params?: windowToolbarParam): void;

				/**
				 * Makes the navigation bar visible.
				 */
				showNavBar(options?: any): void;

				/**
				 * Makes the bottom toolbar visible.
				 */
				showToolbar(options?: any): void;

				/**
				 * Makes the bottom toolbar invisible.
				 */
				hideToolbar(options?: any): void;

				/**
				 * Sets the value of the [showMasterInPortrait](Titanium.UI.iOS.SplitWindow.showMasterInPortrait) property.
				 */
				setShowMasterInPortrait(showMasterInPortrait: boolean, animated?: animationOption): void;

				/**
				 * Sets the value of the [masterIsOverlayed](Titanium.UI.iOS.SplitWindow.masterIsOverlayed) property.
				 */
				setMasterIsOverlayed(masterIsOverlayed: boolean, animated?: animationOption): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundLeftCap> property.
				 */
				getBackgroundLeftCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundLeftCap> property.
				 */
				setBackgroundLeftCap(backgroundLeftCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundTopCap> property.
				 */
				getBackgroundTopCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundTopCap> property.
				 */
				setBackgroundTopCap(backgroundTopCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.children> property.
				 */
				getChildren(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.previewContext> property.
				 */
				getPreviewContext(): Titanium.UI.iOS.PreviewContext;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.previewContext> property.
				 */
				setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitle> property.
				 */
				getBackButtonTitle(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitle> property.
				 */
				setBackButtonTitle(backButtonTitle: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitleImage> property.
				 */
				getBackButtonTitleImage(): string | Titanium.Blob;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitleImage> property.
				 */
				setBackButtonTitleImage(backButtonTitleImage: string): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitleImage> property.
				 */
				setBackButtonTitleImage(backButtonTitleImage: Titanium.Blob): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.barColor> property.
				 */
				getBarColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.barColor> property.
				 */
				setBarColor(barColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.barImage> property.
				 */
				getBarImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.barImage> property.
				 */
				setBarImage(barImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.extendEdges> property.
				 */
				getExtendEdges(): number[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.extendEdges> property.
				 */
				setExtendEdges(extendEdges: ReadonlyArray<number>): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.includeOpaqueBars> property.
				 */
				getIncludeOpaqueBars(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.includeOpaqueBars> property.
				 */
				setIncludeOpaqueBars(includeOpaqueBars: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.autoAdjustScrollViewInsets> property.
				 */
				getAutoAdjustScrollViewInsets(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.autoAdjustScrollViewInsets> property.
				 */
				setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.extendSafeArea> property.
				 */
				getExtendSafeArea(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.extendSafeArea> property.
				 */
				setExtendSafeArea(extendSafeArea: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.fullscreen> property.
				 */
				getFullscreen(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.fullscreen> property.
				 */
				setFullscreen(fullscreen: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.homeIndicatorAutoHidden> property.
				 */
				getHomeIndicatorAutoHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.homeIndicatorAutoHidden> property.
				 */
				setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hideShadow> property.
				 */
				getHideShadow(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hideShadow> property.
				 */
				setHideShadow(hideShadow: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsOnSwipe> property.
				 */
				getHidesBarsOnSwipe(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsOnSwipe> property.
				 */
				setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsOnTap> property.
				 */
				getHidesBarsOnTap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsOnTap> property.
				 */
				setHidesBarsOnTap(hidesBarsOnTap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsWhenKeyboardAppears> property.
				 */
				getHidesBarsWhenKeyboardAppears(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsWhenKeyboardAppears> property.
				 */
				setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hidesBackButton> property.
				 */
				getHidesBackButton(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hidesBackButton> property.
				 */
				setHidesBackButton(hidesBackButton: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.largeTitleEnabled> property.
				 */
				getLargeTitleEnabled(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.largeTitleEnabled> property.
				 */
				setLargeTitleEnabled(largeTitleEnabled: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.largeTitleDisplayMode> property.
				 */
				getLargeTitleDisplayMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.largeTitleDisplayMode> property.
				 */
				setLargeTitleDisplayMode(largeTitleDisplayMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.leftNavButton> property.
				 */
				getLeftNavButton(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.leftNavButton> property.
				 */
				setLeftNavButton(leftNavButton: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.leftNavButtons> property.
				 */
				getLeftNavButtons(): Titanium.UI.View[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.leftNavButtons> property.
				 */
				setLeftNavButtons(leftNavButtons: any[]): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.modal> property.
				 */
				getModal(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.modal> property.
				 */
				setModal(modal: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.navBarHidden> property.
				 */
				getNavBarHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.navBarHidden> property.
				 */
				setNavBarHidden(navBarHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.navTintColor> property.
				 */
				getNavTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.navTintColor> property.
				 */
				setNavTintColor(navTintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.navigationWindow> property.
				 */
				getNavigationWindow(): Titanium.UI.NavigationWindow;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.orientationModes> property.
				 */
				getOrientationModes(): number[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.orientationModes> property.
				 */
				setOrientationModes(orientationModes: ReadonlyArray<number>): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.orientation> property.
				 */
				getOrientation(): number;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.rightNavButton> property.
				 */
				getRightNavButton(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.rightNavButton> property.
				 */
				setRightNavButton(rightNavButton: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.rightNavButtons> property.
				 */
				getRightNavButtons(): Titanium.UI.View[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.rightNavButtons> property.
				 */
				setRightNavButtons(rightNavButtons: any[]): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.safeAreaPadding> property.
				 */
				getSafeAreaPadding(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.shadowImage> property.
				 */
				getShadowImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.shadowImage> property.
				 */
				setShadowImage(shadowImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.statusBarStyle> property.
				 */
				getStatusBarStyle(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.statusBarStyle> property.
				 */
				setStatusBarStyle(statusBarStyle: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.tabBarHidden> property.
				 */
				getTabBarHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.tabBarHidden> property.
				 */
				setTabBarHidden(tabBarHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.title> property.
				 */
				getTitle(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.title> property.
				 */
				setTitle(title: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titleAttributes> property.
				 */
				getTitleAttributes(): titleAttributesParams;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titleAttributes> property.
				 */
				setTitleAttributes(titleAttributes: titleAttributesParams): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titleControl> property.
				 */
				getTitleControl(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titleControl> property.
				 */
				setTitleControl(titleControl: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titleImage> property.
				 */
				getTitleImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titleImage> property.
				 */
				setTitleImage(titleImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titlePrompt> property.
				 */
				getTitlePrompt(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titlePrompt> property.
				 */
				setTitlePrompt(titlePrompt: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titleid> property.
				 */
				getTitleid(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titleid> property.
				 */
				setTitleid(titleid: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titlepromptid> property.
				 */
				getTitlepromptid(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titlepromptid> property.
				 */
				setTitlepromptid(titlepromptid: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.toolbar> property.
				 */
				getToolbar(): any[];

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.translucent> property.
				 */
				getTranslucent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.translucent> property.
				 */
				setTranslucent(translucent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.url> property.
				 */
				getUrl(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.url> property.
				 */
				setUrl(url: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.detailView> property.
				 */
				getDetailView(): Titanium.UI.Window;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.detailView> property.
				 */
				setDetailView(detailView: Titanium.UI.Window): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.masterView> property.
				 */
				getMasterView(): Titanium.UI.Window;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.masterView> property.
				 */
				setMasterView(masterView: Titanium.UI.Window): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.showMasterInPortrait> property.
				 */
				getShowMasterInPortrait(): boolean;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.masterIsOverlayed> property.
				 */
				getMasterIsOverlayed(): boolean;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.masterViewVisible> property.
				 */
				getMasterViewVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.masterViewVisible> property.
				 */
				setMasterViewVisible(masterViewVisible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.portraitSplit> property.
				 */
				getPortraitSplit(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.portraitSplit> property.
				 */
				setPortraitSplit(portraitSplit: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SplitWindow.landscapeSplit> property.
				 */
				getLandscapeSplit(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SplitWindow.landscapeSplit> property.
				 */
				setLandscapeSplit(landscapeSplit: number): void;

			}
			/**
			 * A widget used to increment and decrement a value.
			 */
			interface Stepper extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the stepper in its normal state, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: number;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: number;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * The preview context used in the 3D-Touch feature "Peek and Pop".
				 */
				previewContext: Titanium.UI.iOS.PreviewContext;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * Sets the color for the widget, any backgroundImages added will be set to the same color.
				 */
				tintColor: string;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Determines if the stepper is enabled or disabled.
				 */
				enabled: boolean;

				/**
				 * The current value of the stepper.
				 */
				value: number;

				/**
				 * If YES, value change events are sent immediately when the value changes during user interaction.
				 * If NO, a value change event is sent when user interaction ends.
				 * The default value is YES.
				 */
				continuous: boolean;

				/**
				 * If YES, the user pressing and holding on the stepper repeatedly alters value.
				 * The default value is YES.
				 */
				autorepeat: boolean;

				/**
				 * If YES, incrementing beyond <Titanium.UI.iOS.Stepper.maximum> sets value to <Titanium.UI.iOS.Stepper.minimum>. likewise, decrementing below
				 * <Titanium.UI.iOS.Stepper.minimum> sets value to <Titanium.UI.iOS.Stepper.maximum>. If NO, the stepper does not increment beyond <Titanium.UI.iOS.Stepper.maximum> nor
				 * does it decrement below <Titanium.UI.iOS.Stepper.minimum> but rather holds at those values.
				 * The default value is NO.
				 */
				wraps: boolean;

				/**
				 * The minimum value the stepper will be set to, the value must be smaller than the maximum value.
				 * If you attempt to set a value equal to or greater than maximum, the system will default the
				 * value to 0.
				 */
				minimum: number;

				/**
				 * The maximum value the stepper will be set to, the value must be greater than the minimum value.
				 * If you attempt to set a value equal to or lower than minimum, the system will default the
				 * value to 100.
				 */
				maximum: number;

				/**
				 * The value the stepper will increment and decrement by, default value for this property is 1. When setting
				 * a new value, it must be greater than 1.
				 */
				steps: number;

				/**
				 * Background image for the stepper decrement button in its normal state, specified as a local
				 * file path or URL.
				 */
				decrementImage: string;

				/**
				 * Background image for the stepper decrement button in its disabled state, specified as a local
				 * file path or URL. The decrement button enters a disabled state ones the value is equal to the
				 * minimumValue , setting the enabled property to false will have no effect to decrement button state.
				 */
				decrementDisabledImage: string;

				/**
				 * Background image for the stepper increment button in its normal state, specified as a local
				 * file path or URL.
				 */
				incrementImage: string;

				/**
				 * Background image for the stepper increment button in its disabled state, specified as a local
				 * file path or URL.The increment button enters a disabled state ones the value is equal to the
				 * maximumValue , setting the enabled property to false will have no effect to increment button state.
				 */
				incrementDisabledImage: string;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundLeftCap> property.
				 */
				getBackgroundLeftCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundLeftCap> property.
				 */
				setBackgroundLeftCap(backgroundLeftCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundTopCap> property.
				 */
				getBackgroundTopCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundTopCap> property.
				 */
				setBackgroundTopCap(backgroundTopCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.previewContext> property.
				 */
				getPreviewContext(): Titanium.UI.iOS.PreviewContext;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.previewContext> property.
				 */
				setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.enabled> property.
				 */
				getEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.enabled> property.
				 */
				setEnabled(enabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.value> property.
				 */
				getValue(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.value> property.
				 */
				setValue(value: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.continuous> property.
				 */
				getContinuous(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.continuous> property.
				 */
				setContinuous(continuous: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.autorepeat> property.
				 */
				getAutorepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.autorepeat> property.
				 */
				setAutorepeat(autorepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.wraps> property.
				 */
				getWraps(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.wraps> property.
				 */
				setWraps(wraps: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.minimum> property.
				 */
				getMinimum(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.minimum> property.
				 */
				setMinimum(minimum: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.maximum> property.
				 */
				getMaximum(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.maximum> property.
				 */
				setMaximum(maximum: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.steps> property.
				 */
				getSteps(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.steps> property.
				 */
				setSteps(steps: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.decrementImage> property.
				 */
				getDecrementImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.decrementImage> property.
				 */
				setDecrementImage(decrementImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.decrementDisabledImage> property.
				 */
				getDecrementDisabledImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.decrementDisabledImage> property.
				 */
				setDecrementDisabledImage(decrementDisabledImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.incrementImage> property.
				 */
				getIncrementImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.incrementImage> property.
				 */
				setIncrementImage(incrementImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Stepper.incrementDisabledImage> property.
				 */
				getIncrementDisabledImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Stepper.incrementDisabledImage> property.
				 */
				setIncrementDisabledImage(incrementDisabledImage: string): void;

			}
			/**
			 * A button bar that maintains a selected state.
			 */
			interface TabbedBar extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: number;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: number;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * The preview context used in the 3D-Touch feature "Peek and Pop".
				 */
				previewContext: Titanium.UI.iOS.PreviewContext;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * The view's tintColor
				 */
				tintColor: string;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Index of the currently selected button.
				 */
				index: number;

				/**
				 * Array of labels for the tabbed bar.
				 */
				labels: string[] | BarItemType[];

				/**
				 * Style of the tabbed bar.
				 */
				style: number;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundLeftCap> property.
				 */
				getBackgroundLeftCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundLeftCap> property.
				 */
				setBackgroundLeftCap(backgroundLeftCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundTopCap> property.
				 */
				getBackgroundTopCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundTopCap> property.
				 */
				setBackgroundTopCap(backgroundTopCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.previewContext> property.
				 */
				getPreviewContext(): Titanium.UI.iOS.PreviewContext;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.previewContext> property.
				 */
				setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.index> property.
				 */
				getIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.index> property.
				 */
				setIndex(index: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.labels> property.
				 */
				getLabels(): string[] | BarItemType[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.labels> property.
				 */
				setLabels(labels: ReadonlyArray<string>): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.labels> property.
				 */
				setLabels(labels: ReadonlyArray<BarItemType>): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TabbedBar.style> property.
				 */
				getStyle(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TabbedBar.style> property.
				 */
				setStyle(style: number): void;

			}
			/**
			 * An iOS toolbar, which can contain buttons and certain other controls.
			 */
			interface Toolbar extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * The preview context used in the 3D-Touch feature "Peek and Pop".
				 */
				previewContext: Titanium.UI.iOS.PreviewContext;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * The view's tintColor
				 */
				tintColor: string;

				/**
				 * The view's top position.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Background color for the toolbar, as a color name or hex triplet.
				 */
				barColor: string;

				/**
				 * An array of buttons (or other widgets) contained in the toolbar.
				 */
				items: Titanium.UI.View[];

				/**
				 * If `true`, the background of the toolbar extends upwards.
				 */
				extendBackground: boolean;

				/**
				 * If `true`, a translucent background color is used for the toolbar.
				 */
				translucent: boolean;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.previewContext> property.
				 */
				getPreviewContext(): Titanium.UI.iOS.PreviewContext;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.previewContext> property.
				 */
				setPreviewContext(previewContext: Titanium.UI.iOS.PreviewContext): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.barColor> property.
				 */
				getBarColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.barColor> property.
				 */
				setBarColor(barColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.items> property.
				 */
				getItems(): Titanium.UI.View[];

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.items> property.
				 */
				setItems(items: any[]): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.extendBackground> property.
				 */
				getExtendBackground(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.extendBackground> property.
				 */
				setExtendBackground(extendBackground: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.Toolbar.translucent> property.
				 */
				getTranslucent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.Toolbar.translucent> property.
				 */
				setTranslucent(translucent: boolean): void;

			}
			/**
			 * Dynamic behavior to support connections between two items.
			 */
			interface ViewAttachmentBehavior extends Titanium.Proxy {
				/**
				 * Item to use as the anchor in this behavior.
				 */
				anchorItem: Titanium.UI.View;

				/**
				 * Offset from the center point of the anchor item for the attachment.
				 */
				anchorOffset: Point;

				/**
				 * Amount of damping to apply to the attachment behavior.
				 */
				damping: number;

				/**
				 * Distance, in points, between the two attachment points.
				 */
				distance: number;

				/**
				 * Frequency of oscillation for the behavior.
				 */
				frequency: number;

				/**
				 * Item to connect to use the attachment behavior.
				 */
				item: Titanium.UI.View;

				/**
				 * Offset from the center point of the item for the attachment.
				 */
				itemOffset: Point;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.anchorItem> property.
				 */
				getAnchorItem(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.anchorItem> property.
				 */
				setAnchorItem(anchorItem: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.anchorOffset> property.
				 */
				getAnchorOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.anchorOffset> property.
				 */
				setAnchorOffset(anchorOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.damping> property.
				 */
				getDamping(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.damping> property.
				 */
				setDamping(damping: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.distance> property.
				 */
				getDistance(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.distance> property.
				 */
				setDistance(distance: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.frequency> property.
				 */
				getFrequency(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.frequency> property.
				 */
				setFrequency(frequency: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.item> property.
				 */
				getItem(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.item> property.
				 */
				setItem(item: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.itemOffset> property.
				 */
				getItemOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.itemOffset> property.
				 */
				setItemOffset(itemOffset: Point): void;

			}
			/**
			 * A collection of properties used to initialize a web view.
			 */
			interface WebViewConfiguration extends Titanium.Proxy {
				/**
				 * The preference settings to be used by the web view.
				 */
				preferences: WebViewPreferencesObject;

				/**
				 * The level of granularity with which the user can interactively select content in the web view.
				 */
				selectionGranularity: number;

				/**
				 * Determines which media types require a user gesture to begin playing.
				 */
				mediaTypesRequiringUserActionForPlayback: number;

				/**
				 * A Boolean value indicating whether the web view suppresses content rendering until it is fully
				 * loaded into memory.
				 */
				suppressesIncrementalRendering: boolean;

				/**
				 * A Boolean value indicating whether HTML5 videos play inline or use the native full-screen controller.
				 */
				allowsInlineMediaPlayback: boolean;

				/**
				 * A Boolean value indicating whether AirPlay is allowed.
				 */
				allowsAirPlayMediaPlayback: boolean;

				/**
				 * A Boolean value indicating whether HTML5 videos can play picture-in-picture.
				 */
				allowsPictureInPictureMediaPlayback: boolean;

				/**
				 * The process pool from which to obtain the  Web Content process of view.
				 */
				processPool: Titanium.UI.iOS.WebViewProcessPool;

				/**
				 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.preferences> property.
				 */
				getPreferences(): WebViewPreferencesObject;

				/**
				 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.preferences> property.
				 */
				setPreferences(preferences: WebViewPreferencesObject): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.selectionGranularity> property.
				 */
				getSelectionGranularity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.selectionGranularity> property.
				 */
				setSelectionGranularity(selectionGranularity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.mediaTypesRequiringUserActionForPlayback> property.
				 */
				getMediaTypesRequiringUserActionForPlayback(): number;

				/**
				 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.mediaTypesRequiringUserActionForPlayback> property.
				 */
				setMediaTypesRequiringUserActionForPlayback(mediaTypesRequiringUserActionForPlayback: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.suppressesIncrementalRendering> property.
				 */
				getSuppressesIncrementalRendering(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.suppressesIncrementalRendering> property.
				 */
				setSuppressesIncrementalRendering(suppressesIncrementalRendering: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsInlineMediaPlayback> property.
				 */
				getAllowsInlineMediaPlayback(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsInlineMediaPlayback> property.
				 */
				setAllowsInlineMediaPlayback(allowsInlineMediaPlayback: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsAirPlayMediaPlayback> property.
				 */
				getAllowsAirPlayMediaPlayback(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsAirPlayMediaPlayback> property.
				 */
				setAllowsAirPlayMediaPlayback(allowsAirPlayMediaPlayback: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsPictureInPictureMediaPlayback> property.
				 */
				getAllowsPictureInPictureMediaPlayback(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsPictureInPictureMediaPlayback> property.
				 */
				setAllowsPictureInPictureMediaPlayback(allowsPictureInPictureMediaPlayback: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.processPool> property.
				 */
				getProcessPool(): Titanium.UI.iOS.WebViewProcessPool;

				/**
				 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.processPool> property.
				 */
				setProcessPool(processPool: Titanium.UI.iOS.WebViewProcessPool): void;

			}
			/**
			 * It represents the decision handler to tell to webview, whether allow or cancel the navigation.
			 */
			interface WebViewDecisionHandler extends Titanium.Proxy {
				/**
				 * It calls the decision handler with given action policy.
				 */
				invoke(value: number): void;

			}
			/**
			 * It represents a pool of Web Content processes.
			 */
			interface WebViewProcessPool extends Titanium.Proxy {
			}

			/**
			 * A set of constants for the style that can be used for the `style` property of
			 * <Titanium.UI.AlertDialog>.
			 */
			namespace AlertDialogStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * A standard alert dialog. This is the default value.
				 */
				const DEFAULT: number;

				/**
				 * An alert dialog that allows the user to enter text.
				 */
				const PLAIN_TEXT_INPUT: number;

				/**
				 * An alert dialog that allows the user to enter text. The text field is obscured.
				 */
				const SECURE_TEXT_INPUT: number;

				/**
				 * An alert dialog that allows the user to enter login identifier and password.
				 */
				const LOGIN_AND_PASSWORD_INPUT: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AlertDialogStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AlertDialogStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AlertDialogStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the animation styles used for view transitions.
			 * One of the group of animation style constants
			 *   * [CURL_DOWN](Titanium.UI.iOS.AnimationStyle.CURL_DOWN)
			 *   * [CURL_UP](Titanium.UI.iOS.AnimationStyle.CURL_UP)
			 *   * [FLIP_FROM_LEFT](Titanium.UI.iOS.AnimationStyle.FLIP_FROM_LEFT)
			 *   * [FLIP_FROM_RIGHT](Titanium.UI.iOS.AnimationStyle.FLIP_FROM_RIGHT)
			 *   * [FLIP_FROM_TOP](Titanium.UI.iOS.AnimationStyle.FLIP_FROM_TOP)
			 *   * [FLIP_FROM_BOTTOM](Titanium.UI.iOS.AnimationStyle.FLIP_FROM_BOTTOM)
			 *   * [CROSS_DISSOLVE](Titanium.UI.iOS.AnimationStyle.CROSS_DISSOLVE)
			 *   * [NONE](Titanium.UI.iOS.AnimationStyle.NONE)
			 */
			namespace AnimationStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * Curl downwards during a transition animation.
				 */
				const CURL_DOWN: number;

				/**
				 * Curl upwards during a transition animation.
				 */
				const CURL_UP: number;

				/**
				 * Flip from left to right during a transition animation.
				 */
				const FLIP_FROM_LEFT: number;

				/**
				 * Flip from right to left during a transition animation.
				 */
				const FLIP_FROM_RIGHT: number;

				/**
				 * Flip from top to bottom during a transition animation.
				 */
				const FLIP_FROM_TOP: number;

				/**
				 * Flip from bottom to top during a transition animation.
				 */
				const FLIP_FROM_BOTTOM: number;

				/**
				 * A transition that dissolves from one view to the next.
				 */
				const CROSS_DISSOLVE: number;

				/**
				 * No animation.
				 */
				const NONE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AnimationStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.AnimationStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.AnimationStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the bar styles used on the `style` property of <Titanium.UI.ProgressBar>.
			 */
			namespace ProgressBarStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The style of progress view that is used in a toolbar.
				 */
				const BAR: number;

				/**
				 * The standard progress-view style. This is the default.
				 */
				const DEFAULT: number;

				/**
				 * The standard progress-view style. Same as `DEFAULT`.
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ProgressBarStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.ProgressBarStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ProgressBarStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the Animation Styles used for transition on table view rows.
			 */
			namespace RowAnimationStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The inserted row or rows slides in from the bottom; the deleted row or rows slides out
				 * toward the bottom.
				 */
				const BOTTOM: number;

				/**
				 * The inserted or deleted row or rows fades into or out of the table view.
				 */
				const FADE: number;

				/**
				 * The inserted row or rows slides in from the left; the deleted row or rows slides out to the
				 * left.
				 */
				const LEFT: number;

				/**
				 * No animation is performed. The new cell value appears as if the cell had just been reloaded.
				 */
				const NONE: number;

				/**
				 * The inserted row or rows slides in from the right; the deleted row or rows slides out to
				 * the right.
				 */
				const RIGHT: number;

				/**
				 * The inserted row or rows slides in from the top; the deleted row or rows slides out toward
				 * the top.
				 */
				const TOP: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.RowAnimationStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.RowAnimationStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.RowAnimationStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the styles available for scrollbars used with <Titanium.UI.ScrollView.scrollIndicatorStyle> and <Titanium.UI.TableView.scrollIndicatorStyle> properties.
			 */
			namespace ScrollIndicatorStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * A style of indicator which is black smaller than the default style. This style is good
				 * against a white content background.
				 */
				const BLACK: number;

				/**
				 * The default style of scroll indicator, which is black with a white border. This style is
				 * good against any content background.
				 */
				const DEFAULT: number;

				/**
				 * A style of indicator is white and smaller than the default style. This style is good against
				 * a black content background.
				 */
				const WHITE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ScrollIndicatorStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.ScrollIndicatorStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.ScrollIndicatorStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the status bar style.
			 */
			namespace StatusBar {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * No animation style, when the status bar is hidden or shown.
				 */
				const ANIMATION_STYLE_NONE: number;

				/**
				 * Slide animation style, when the status bar is hidden or shown.
				 */
				const ANIMATION_STYLE_SLIDE: number;

				/**
				 * Fade animation style, when the status bar is hidden or shown.
				 */
				const ANIMATION_STYLE_FADE: number;

				/**
				 * Default status bar style.
				 */
				const DEFAULT: number;

				/**
				 * Gray-colored status bar style.
				 */
				const GRAY: number;

				/**
				 * Gray-colored status bar style.
				 */
				const GREY: number;

				/**
				 * Status bar style to use with dark backgrounds.
				 */
				const LIGHT_CONTENT: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.StatusBar.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.StatusBar.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.StatusBar.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for creating standard iOS system buttons.
			 */
			namespace SystemButton {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Action** button.
				 */
				const ACTION: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create an activity indicator that
				 * can be used in navigation bars and toolbars.
				 */
				const ACTIVITY: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Add** button.
				 */
				const ADD: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Bookmarks** button.
				 */
				const BOOKMARKS: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Camera** button.
				 */
				const CAMERA: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Cancel** button.
				 */
				const CANCEL: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Compose** button.
				 */
				const COMPOSE: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a **ContactAdd** button.
				 */
				const CONTACT_ADD: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a **Disclosure** button.
				 */
				const DISCLOSURE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Done** button.
				 */
				const DONE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Edit** button.
				 */
				const EDIT: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Fast Forward** button.
				 */
				const FAST_FORWARD: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a fixed-width blank space
				 * for spacing items in toolbars.
				 */
				const FIXED_SPACE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a flexible blank space
				 * for spacing items in toolbars.
				 */
				const FLEXIBLE_SPACE: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a dark-colored **Info** button.
				 */
				const INFO_DARK: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a light-colored **Info** button.
				 */
				const INFO_LIGHT: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Organize** button.
				 */
				const ORGANIZE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Pause** button.
				 */
				const PAUSE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Play** button.
				 */
				const PLAY: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Refresh** button.
				 */
				const REFRESH: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Reply** button.
				 */
				const REPLY: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Rewind** button.
				 */
				const REWIND: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Save** button.
				 */
				const SAVE: number;

				/**
				 * Identical to [ACTIVITY](Titanium.UI.iOS.SystemButton.ACTIVITY).
				 */
				const SPINNER: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Stop** button.
				 */
				const STOP: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Trash** button.
				 */
				const TRASH: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SystemButton.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SystemButton.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SystemButton.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the system button styles that can be used for the button `style` property.
			 */
			namespace SystemButtonStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * A simple button style with a border.
				 */
				const BORDERED: number;

				/**
				 * The style for a **Done** button--for example, a button that completes some task and returns
				 * to the previous view.
				 */
				const DONE: number;

				/**
				 * Specifies a borderless button, the default style for toolbars, button bars, and tabbed bars.
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SystemButtonStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SystemButtonStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SystemButtonStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the system icon styles that can be used on a tab group tab.
			 */
			namespace SystemIcon {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * Bookmark style icon
				 */
				const BOOKMARKS: number;

				/**
				 * Contacts style icon
				 */
				const CONTACTS: number;

				/**
				 * Downloads style icon
				 */
				const DOWNLOADS: number;

				/**
				 * Favorites style icon
				 */
				const FAVORITES: number;

				/**
				 * Featured style icon
				 */
				const FEATURED: number;

				/**
				 * History style icon
				 */
				const HISTORY: number;

				/**
				 * More style icon
				 */
				const MORE: number;

				/**
				 * Most recent style icon
				 */
				const MOST_RECENT: number;

				/**
				 * Most viewed style icon
				 */
				const MOST_VIEWED: number;

				/**
				 * Recents style icon
				 */
				const RECENTS: number;

				/**
				 * Search style icon
				 */
				const SEARCH: number;

				/**
				 * Top rated style icon
				 */
				const TOP_RATED: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SystemIcon.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.SystemIcon.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.SystemIcon.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the style that can be used for the `selectionStyle` property of
			 * <Titanium.UI.TableViewRow>.
			 */
			namespace TableViewCellSelectionStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The cell when selected has a blue background. This is the default value.
				 */
				const BLUE: number;

				/**
				 * Then cell when selected has a gray background.
				 */
				const GRAY: number;

				/**
				 * The cell has no distinct style for when it is selected.
				 */
				const NONE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TableViewCellSelectionStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TableViewCellSelectionStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TableViewCellSelectionStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the position value that can be used for the `position` property of
			 * <Titanium.UI.TableView> when invoking `scrollToIndex`.
			 */
			namespace TableViewScrollPosition {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The table view scrolls the row of interest to the bottom of the visible table view.
				 */
				const BOTTOM: number;

				/**
				 * The table view scrolls the row of interest to the middle of the visible table view.
				 */
				const MIDDLE: number;

				/**
				 * The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by `TOP`. This is the default.
				 */
				const NONE: number;

				/**
				 * The table view scrolls the row of interest to the top of the visible table view.
				 */
				const TOP: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TableViewScrollPosition.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TableViewScrollPosition.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TableViewScrollPosition.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the style that can be used for the button `style` property of
			 * <Titanium.UI.TableView>.
			 */
			namespace TableViewStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * A table view whose sections present distinct groups of rows. The section headers and footers
				 * do not float.
				 */
				const GROUPED: number;

				/**
				 * A plain table view. Any section headers or footers are displayed as inline separators and
				 * float when the table view is scrolled.
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TableViewStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iOS.TableViewStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iOS.TableViewStyle.apiName> property.
				 */
				function getApiName(): string;

			}
		}

		/**
		 * iPad specific UI capabilities.
		 */
		namespace iPad {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * An arrow that points in any direction.
			 */
			const POPOVER_ARROW_DIRECTION_ANY: number;

			/**
			 * An arrow that points downward.
			 */
			const POPOVER_ARROW_DIRECTION_DOWN: number;

			/**
			 * An arrow that points toward the left.
			 */
			const POPOVER_ARROW_DIRECTION_LEFT: number;

			/**
			 * An arrow that points toward the right.
			 */
			const POPOVER_ARROW_DIRECTION_RIGHT: number;

			/**
			 * The status of the arrow is currently unknown.
			 */
			const POPOVER_ARROW_DIRECTION_UNKNOWN: number;

			/**
			 * An arrow that points upward.
			 */
			const POPOVER_ARROW_DIRECTION_UP: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Creates and returns an instance of <Titanium.UI.iPad.DocumentViewer>.
			 */
			function createDocumentViewer(parameters?: any): Titanium.UI.iPad.DocumentViewer;

			/**
			 * Creates and returns an instance of <Titanium.UI.iPad.Popover>.
			 */
			function createPopover(parameters?: any): Titanium.UI.iPad.Popover;

			/**
			 * Creates and returns an instance of <Titanium.UI.iPad.SplitWindow>.
			 */
			function createSplitWindow(parameters?: any): Titanium.UI.iPad.SplitWindow;

			/**
			 * Gets the value of the <Titanium.UI.iPad.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.iPad.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.iPad.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * A DocumentViewer provides in-app support for managing user interactions with files on the
			 * local system.
			 */
			interface DocumentViewer extends Titanium.Proxy {
				/**
				 * Displays the document viewer over the current view.
				 */
				show(animated: boolean, view: any): void;

				/**
				 * Sets the url of the document viewer.
				 */
				setUrl(url: string): void;

			}
			/**
			 * A Popover is used to manage the presentation of content in a popover.
			 */
			interface Popover extends Titanium.Proxy {
				/**
				 * Sets the background color of the popover.
				 */
				backgroundColor: string;

				/**
				 * Height of the popover.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Width of the popover.
				 */
				width: number | string;

				/**
				 * Indicates the arrow direction of the popover.
				 */
				arrowDirection: number;

				/**
				 * View to use for the popover content. Must be set before calling the `show()` method.
				 */
				contentView: Titanium.UI.View;

				/**
				 * Left button in the navigation area of the popover.
				 */
				leftNavButton: any;

				/**
				 * Passthrough views to use when the popover is shown.
				 */
				passthroughViews: Titanium.UI.View[];

				/**
				 * Right button in the navigation area of the popover.
				 */
				rightNavButton: any;

				/**
				 * Title of the navigation area of the popover.
				 */
				title: string;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides the popover.
				 */
				hide(options: PopoverParams): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Displays the popover.
				 */
				show(params: PopoverParams): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.arrowDirection> property.
				 */
				getArrowDirection(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.arrowDirection> property.
				 */
				setArrowDirection(arrowDirection: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.contentView> property.
				 */
				getContentView(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.contentView> property.
				 */
				setContentView(contentView: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.leftNavButton> property.
				 */
				getLeftNavButton(): any;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.leftNavButton> property.
				 */
				setLeftNavButton(leftNavButton: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.passthroughViews> property.
				 */
				getPassthroughViews(): Titanium.UI.View[];

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.passthroughViews> property.
				 */
				setPassthroughViews(passthroughViews: any[]): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.rightNavButton> property.
				 */
				getRightNavButton(): any;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.rightNavButton> property.
				 */
				setRightNavButton(rightNavButton: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.Popover.title> property.
				 */
				getTitle(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.Popover.title> property.
				 */
				setTitle(title: string): void;

			}
			/**
			 * A SplitWindow is a window that manages the presentation of two side-by-side view
			 * controllers.
			 */
			interface SplitWindow extends Titanium.Proxy {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: boolean;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: string;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: string;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: Point;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: Point;

				/**
				 * Background color of the window, as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: Gradient;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: boolean;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: number;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: number;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: string;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: number;

				/**
				 * Border width of the view.
				 */
				borderWidth: number;

				/**
				 * Window's bottom position, in platform-specific units.
				 */
				bottom: number | string;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: Point;

				/**
				 * Array of this view's child views.
				 */
				readonly children: Titanium.UI.View[];

				/**
				 * View's clipping behavior.
				 */
				clipMode: number;

				/**
				 * View height, in platform-specific units.
				 */
				height: number | string;

				/**
				 * Adds a horizontal parallax effect to the view
				 */
				horizontalMotionEffect: any;

				/**
				 * Window's left position, in platform-specific units.
				 */
				left: number | string;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: string;

				/**
				 * The opacity from 0.0-1.0.
				 */
				opacity: number;

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: string;

				/**
				 * Window's right position, in platform-specific units.
				 */
				right: number | string;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: Dimension;

				/**
				 * The size of the view in system units.
				 */
				readonly size: Dimension;

				/**
				 * The view's tintColor
				 */
				tintColor: string;

				/**
				 * Window's top position, in platform-specific units.
				 */
				top: number | string;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: boolean;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Adds a vertical parallax effect to the view
				 */
				verticalMotionEffect: any;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: string;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: Point;

				/**
				 * Determines whether the view is visible.
				 */
				visible: boolean;

				/**
				 * View's width, in platform-specific units.
				 */
				width: number | string;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: boolean;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: number;

				/**
				 * Title for the back button. This is only valid when the window is a child of a tab.
				 */
				backButtonTitle: string;

				/**
				 * The image to show as the back button. This is only valid when the window is a child of a tab.
				 */
				backButtonTitleImage: string | Titanium.Blob;

				/**
				 * Background color for the nav bar, as a color name or hex triplet.
				 */
				barColor: string;

				/**
				 * Background image for the nav bar, specified as a URL to a local image.
				 */
				barImage: string;

				/**
				 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
				 */
				extendEdges: number[];

				/**
				 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
				 */
				includeOpaqueBars: boolean;

				/**
				 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
				 */
				autoAdjustScrollViewInsets: boolean;

				/**
				 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
				 */
				extendSafeArea: boolean;

				/**
				 * Boolean value indicating if the window is fullscreen.
				 */
				fullscreen: boolean;

				/**
				 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
				 */
				homeIndicatorAutoHidden: boolean;

				/**
				 * Set this to true to hide the shadow image of the navigation bar.
				 */
				hideShadow: boolean;

				/**
				 * Set this to true to hide the navigation bar on swipe.
				 */
				hidesBarsOnSwipe: boolean;

				/**
				 * Set this to true to hide the navigation bar on tap.
				 */
				hidesBarsOnTap: boolean;

				/**
				 * Set this to true to hide the navigation bar when the keyboard appears.
				 */
				hidesBarsWhenKeyboardAppears: boolean;

				/**
				 * Set this to true to hide the back button of navigation bar.
				 */
				hidesBackButton: boolean;

				/**
				 * A Boolean value indicating whether the title should be displayed in a large format.
				 */
				largeTitleEnabled: string;

				/**
				 * The mode to use when displaying the title of the navigation bar.
				 */
				largeTitleDisplayMode: number;

				/**
				 * View to show in the left nav bar area.
				 */
				leftNavButton: Titanium.UI.View;

				/**
				 * An Array of views to show in the left nav bar area.
				 */
				leftNavButtons: Titanium.UI.View[];

				/**
				 * Indicates to open a modal window or not.
				 */
				modal: boolean;

				/**
				 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
				 */
				navBarHidden: boolean;

				/**
				 * The tintColor to apply to the navigation bar.
				 */
				navTintColor: string;

				/**
				 * The <Titanium.UI.NavigationWindow> instance hosting this window.
				 */
				readonly navigationWindow: Titanium.UI.NavigationWindow;

				/**
				 * Array of supported orientation modes, specified using the orientation
				 * constants defined in <Titanium.UI>.
				 */
				orientationModes: number[];

				/**
				 * Current orientation of the window.
				 */
				readonly orientation: number;

				/**
				 * View to show in the right nav bar area.
				 */
				rightNavButton: Titanium.UI.View;

				/**
				 * An Array of views to show in the right nav bar area.
				 */
				rightNavButtons: Titanium.UI.View[];

				/**
				 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
				 */
				readonly safeAreaPadding: Dimension;

				/**
				 * Shadow image for the navigation bar, specified as a URL to a local image..
				 */
				shadowImage: string;

				/**
				 * The status bar style associated with this window.
				 */
				statusBarStyle: number;

				/**
				 * Boolean value indicating if the tab bar should be hidden.
				 */
				tabBarHidden: boolean;

				/**
				 * Title of the window.
				 */
				title: string;

				/**
				 * Title text attributes of the window.
				 */
				titleAttributes: titleAttributesParams;

				/**
				 * View to show in the title area of the nav bar.
				 */
				titleControl: Titanium.UI.View;

				/**
				 * Image to show in the title area of the nav bar, specified as a local file path or URL.
				 */
				titleImage: string;

				/**
				 * Title prompt for the window.
				 */
				titlePrompt: string;

				/**
				 * Key identifying a string from the locale file to use for the window title.
				 */
				titleid: string;

				/**
				 * Key identifying a string from the locale file to use for the window title prompt.
				 */
				titlepromptid: string;

				/**
				 * Array of button objects to show in the window's toolbar.
				 */
				toolbar: any[];

				/**
				 * Boolean value indicating if the nav bar is translucent.
				 */
				translucent: boolean;

				/**
				 * Loads a JavaScript file from a local URL.
				 */
				url: string;

				/**
				 * View for the detail view section of the SplitWindow.
				 */
				detailView: Titanium.UI.View;

				/**
				 * View for the master view section of the SplitWindow.
				 */
				masterView: Titanium.UI.View;

				/**
				 * Determines whether to show the master view in portrait orientation.
				 */
				showMasterInPortrait: boolean;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any): void;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add(view: any[]): void;

				/**
				 * Animates this view.
				 */
				animate(animation: any, callback?: (param0: any) => any): void;

				/**
				 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
				 * view tree.
				 */
				finishLayout(): void;

				/**
				 * Hides this view.
				 */
				hide(options?: AnimationOption): void;

				/**
				 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				insertAt(params: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove(view: any): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt(params: any): void;

				/**
				 * Makes this view visible.
				 */
				show(options?: AnimationOption): void;

				/**
				 * Starts a batch update of this view's layout properties.
				 */
				startLayout(): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage(callback?: (param0: Titanium.Blob) => any, honorScaleFactor?: boolean): Titanium.Blob;

				/**
				 * Performs a batch update of all supplied layout properties and schedules a layout pass after
				 * they have been updated.
				 */
				updateLayout(params: any): void;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView(point: Point, destinationView: any): Point;

				/**
				 * Returns the matching view of a given view ID.
				 */
				getViewById(id: string): Titanium.UI.View;

				/**
				 * Closes the window.
				 */
				close(params?: any): void;

				/**
				 * Hides the navigation bar.
				 */
				hideNavBar(options?: any): void;

				/**
				 * Hides the tab bar. Must be called before opening the window.
				 */
				hideTabBar(): void;

				/**
				 * Opens the window.
				 */
				open(params?: openWindowParams): void;

				/**
				 * Sets the array of items to show in the window's toolbar.
				 */
				setToolbar(items: ReadonlyArray<any>, params?: windowToolbarParam): void;

				/**
				 * Makes the navigation bar visible.
				 */
				showNavBar(options?: any): void;

				/**
				 * Makes the bottom toolbar visible.
				 */
				showToolbar(options?: any): void;

				/**
				 * Makes the bottom toolbar invisible.
				 */
				hideToolbar(options?: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityHidden> property.
				 */
				getAccessibilityHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityHidden> property.
				 */
				setAccessibilityHidden(accessibilityHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityHint> property.
				 */
				getAccessibilityHint(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityHint> property.
				 */
				setAccessibilityHint(accessibilityHint: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityLabel> property.
				 */
				getAccessibilityLabel(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityLabel> property.
				 */
				setAccessibilityLabel(accessibilityLabel: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityValue> property.
				 */
				getAccessibilityValue(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityValue> property.
				 */
				setAccessibilityValue(accessibilityValue: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.anchorPoint> property.
				 */
				getAnchorPoint(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.anchorPoint> property.
				 */
				setAnchorPoint(anchorPoint: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.animatedCenter> property.
				 */
				getAnimatedCenter(): Point;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundColor> property.
				 */
				getBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundColor> property.
				 */
				setBackgroundColor(backgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundGradient> property.
				 */
				getBackgroundGradient(): Gradient;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundGradient> property.
				 */
				setBackgroundGradient(backgroundGradient: Gradient): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundImage> property.
				 */
				getBackgroundImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundImage> property.
				 */
				setBackgroundImage(backgroundImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundRepeat> property.
				 */
				getBackgroundRepeat(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundRepeat> property.
				 */
				setBackgroundRepeat(backgroundRepeat: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundLeftCap> property.
				 */
				getBackgroundLeftCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundLeftCap> property.
				 */
				setBackgroundLeftCap(backgroundLeftCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundTopCap> property.
				 */
				getBackgroundTopCap(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundTopCap> property.
				 */
				setBackgroundTopCap(backgroundTopCap: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.borderColor> property.
				 */
				getBorderColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.borderColor> property.
				 */
				setBorderColor(borderColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.borderRadius> property.
				 */
				getBorderRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.borderRadius> property.
				 */
				setBorderRadius(borderRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.borderWidth> property.
				 */
				getBorderWidth(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.borderWidth> property.
				 */
				setBorderWidth(borderWidth: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.bottom> property.
				 */
				getBottom(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.bottom> property.
				 */
				setBottom(bottom: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.bottom> property.
				 */
				setBottom(bottom: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.center> property.
				 */
				getCenter(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.center> property.
				 */
				setCenter(center: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.children> property.
				 */
				getChildren(): Titanium.UI.View[];

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.clipMode> property.
				 */
				getClipMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.clipMode> property.
				 */
				setClipMode(clipMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.height> property.
				 */
				getHeight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.height> property.
				 */
				setHeight(height: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.height> property.
				 */
				setHeight(height: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.horizontalMotionEffect> property.
				 */
				getHorizontalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.horizontalMotionEffect> property.
				 */
				setHorizontalMotionEffect(horizontalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.left> property.
				 */
				getLeft(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.left> property.
				 */
				setLeft(left: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.left> property.
				 */
				setLeft(left: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.layout> property.
				 */
				getLayout(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.layout> property.
				 */
				setLayout(layout: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.opacity> property.
				 */
				getOpacity(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.opacity> property.
				 */
				setOpacity(opacity: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.pullBackgroundColor> property.
				 */
				getPullBackgroundColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.pullBackgroundColor> property.
				 */
				setPullBackgroundColor(pullBackgroundColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.right> property.
				 */
				getRight(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.right> property.
				 */
				setRight(right: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.right> property.
				 */
				setRight(right: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.rect> property.
				 */
				getRect(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.size> property.
				 */
				getSize(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.tintColor> property.
				 */
				getTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.tintColor> property.
				 */
				setTintColor(tintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.top> property.
				 */
				getTop(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.top> property.
				 */
				setTop(top: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.top> property.
				 */
				setTop(top: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.touchEnabled> property.
				 */
				getTouchEnabled(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.touchEnabled> property.
				 */
				setTouchEnabled(touchEnabled: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.transform> property.
				 */
				getTransform(): Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix2D): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.transform> property.
				 */
				setTransform(transform: Titanium.UI.Matrix3D): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.verticalMotionEffect> property.
				 */
				getVerticalMotionEffect(): any;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.verticalMotionEffect> property.
				 */
				setVerticalMotionEffect(verticalMotionEffect: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowRadius> property.
				 */
				getViewShadowRadius(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowRadius> property.
				 */
				setViewShadowRadius(viewShadowRadius: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowColor> property.
				 */
				getViewShadowColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowColor> property.
				 */
				setViewShadowColor(viewShadowColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowOffset> property.
				 */
				getViewShadowOffset(): Point;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowOffset> property.
				 */
				setViewShadowOffset(viewShadowOffset: Point): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.visible> property.
				 */
				getVisible(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.visible> property.
				 */
				setVisible(visible: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.width> property.
				 */
				getWidth(): number | string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.width> property.
				 */
				setWidth(width: number): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.width> property.
				 */
				setWidth(width: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.horizontalWrap> property.
				 */
				getHorizontalWrap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.horizontalWrap> property.
				 */
				setHorizontalWrap(horizontalWrap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.zIndex> property.
				 */
				getZIndex(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.zIndex> property.
				 */
				setZIndex(zIndex: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitle> property.
				 */
				getBackButtonTitle(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitle> property.
				 */
				setBackButtonTitle(backButtonTitle: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitleImage> property.
				 */
				getBackButtonTitleImage(): string | Titanium.Blob;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitleImage> property.
				 */
				setBackButtonTitleImage(backButtonTitleImage: string): void;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitleImage> property.
				 */
				setBackButtonTitleImage(backButtonTitleImage: Titanium.Blob): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.barColor> property.
				 */
				getBarColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.barColor> property.
				 */
				setBarColor(barColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.barImage> property.
				 */
				getBarImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.barImage> property.
				 */
				setBarImage(barImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.extendEdges> property.
				 */
				getExtendEdges(): number[];

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.extendEdges> property.
				 */
				setExtendEdges(extendEdges: ReadonlyArray<number>): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.includeOpaqueBars> property.
				 */
				getIncludeOpaqueBars(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.includeOpaqueBars> property.
				 */
				setIncludeOpaqueBars(includeOpaqueBars: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.autoAdjustScrollViewInsets> property.
				 */
				getAutoAdjustScrollViewInsets(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.autoAdjustScrollViewInsets> property.
				 */
				setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.extendSafeArea> property.
				 */
				getExtendSafeArea(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.extendSafeArea> property.
				 */
				setExtendSafeArea(extendSafeArea: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.fullscreen> property.
				 */
				getFullscreen(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.fullscreen> property.
				 */
				setFullscreen(fullscreen: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.homeIndicatorAutoHidden> property.
				 */
				getHomeIndicatorAutoHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.homeIndicatorAutoHidden> property.
				 */
				setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hideShadow> property.
				 */
				getHideShadow(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hideShadow> property.
				 */
				setHideShadow(hideShadow: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsOnSwipe> property.
				 */
				getHidesBarsOnSwipe(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsOnSwipe> property.
				 */
				setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsOnTap> property.
				 */
				getHidesBarsOnTap(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsOnTap> property.
				 */
				setHidesBarsOnTap(hidesBarsOnTap: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsWhenKeyboardAppears> property.
				 */
				getHidesBarsWhenKeyboardAppears(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsWhenKeyboardAppears> property.
				 */
				setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hidesBackButton> property.
				 */
				getHidesBackButton(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hidesBackButton> property.
				 */
				setHidesBackButton(hidesBackButton: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.largeTitleEnabled> property.
				 */
				getLargeTitleEnabled(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.largeTitleEnabled> property.
				 */
				setLargeTitleEnabled(largeTitleEnabled: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.largeTitleDisplayMode> property.
				 */
				getLargeTitleDisplayMode(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.largeTitleDisplayMode> property.
				 */
				setLargeTitleDisplayMode(largeTitleDisplayMode: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.leftNavButton> property.
				 */
				getLeftNavButton(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.leftNavButton> property.
				 */
				setLeftNavButton(leftNavButton: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.leftNavButtons> property.
				 */
				getLeftNavButtons(): Titanium.UI.View[];

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.leftNavButtons> property.
				 */
				setLeftNavButtons(leftNavButtons: any[]): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.modal> property.
				 */
				getModal(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.modal> property.
				 */
				setModal(modal: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.navBarHidden> property.
				 */
				getNavBarHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.navBarHidden> property.
				 */
				setNavBarHidden(navBarHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.navTintColor> property.
				 */
				getNavTintColor(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.navTintColor> property.
				 */
				setNavTintColor(navTintColor: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.navigationWindow> property.
				 */
				getNavigationWindow(): Titanium.UI.NavigationWindow;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.orientationModes> property.
				 */
				getOrientationModes(): number[];

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.orientationModes> property.
				 */
				setOrientationModes(orientationModes: ReadonlyArray<number>): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.orientation> property.
				 */
				getOrientation(): number;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.rightNavButton> property.
				 */
				getRightNavButton(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.rightNavButton> property.
				 */
				setRightNavButton(rightNavButton: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.rightNavButtons> property.
				 */
				getRightNavButtons(): Titanium.UI.View[];

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.rightNavButtons> property.
				 */
				setRightNavButtons(rightNavButtons: any[]): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.safeAreaPadding> property.
				 */
				getSafeAreaPadding(): Dimension;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.shadowImage> property.
				 */
				getShadowImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.shadowImage> property.
				 */
				setShadowImage(shadowImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.statusBarStyle> property.
				 */
				getStatusBarStyle(): number;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.statusBarStyle> property.
				 */
				setStatusBarStyle(statusBarStyle: number): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.tabBarHidden> property.
				 */
				getTabBarHidden(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.tabBarHidden> property.
				 */
				setTabBarHidden(tabBarHidden: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.title> property.
				 */
				getTitle(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.title> property.
				 */
				setTitle(title: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titleAttributes> property.
				 */
				getTitleAttributes(): titleAttributesParams;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titleAttributes> property.
				 */
				setTitleAttributes(titleAttributes: titleAttributesParams): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titleControl> property.
				 */
				getTitleControl(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titleControl> property.
				 */
				setTitleControl(titleControl: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titleImage> property.
				 */
				getTitleImage(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titleImage> property.
				 */
				setTitleImage(titleImage: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titlePrompt> property.
				 */
				getTitlePrompt(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titlePrompt> property.
				 */
				setTitlePrompt(titlePrompt: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titleid> property.
				 */
				getTitleid(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titleid> property.
				 */
				setTitleid(titleid: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titlepromptid> property.
				 */
				getTitlepromptid(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titlepromptid> property.
				 */
				setTitlepromptid(titlepromptid: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.toolbar> property.
				 */
				getToolbar(): any[];

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.translucent> property.
				 */
				getTranslucent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.translucent> property.
				 */
				setTranslucent(translucent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.url> property.
				 */
				getUrl(): string;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.url> property.
				 */
				setUrl(url: string): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.detailView> property.
				 */
				getDetailView(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.detailView> property.
				 */
				setDetailView(detailView: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.masterView> property.
				 */
				getMasterView(): Titanium.UI.View;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.masterView> property.
				 */
				setMasterView(masterView: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPad.SplitWindow.showMasterInPortrait> property.
				 */
				getShowMasterInPortrait(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPad.SplitWindow.showMasterInPortrait> property.
				 */
				setShowMasterInPortrait(showMasterInPortrait: boolean): void;

			}
		}

		/**
		 * The iPhone/iPad-specific UI capabilities.  All properties, methods and events in this namespace
		 * will only work on Apple iOS systems.
		 */
		namespace iPhone {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * View presented with the same style as its parent window.
			 */
			const MODAL_PRESENTATION_CURRENT_CONTEXT: number;

			/**
			 * Window width and height are smaller than those of the screen and the view is centered on
			 * the screen.
			 */
			const MODAL_PRESENTATION_FORMSHEET: number;

			/**
			 * Window covers the screen.
			 */
			const MODAL_PRESENTATION_FULLSCREEN: number;

			/**
			 * Window height is the height of the screen and width is equal to screen width in a portrait
			 * orientation.
			 */
			const MODAL_PRESENTATION_PAGESHEET: number;

			/**
			 * When the window is presented, its view slides up from the bottom of the screen. On dismissal,
			 * the view slides back down (default.)
			 */
			const MODAL_TRANSITION_STYLE_COVER_VERTICAL: number;

			/**
			 * When the window is presented, the current view fades out while the new view fades in at the
			 * same time. On dismissal, a similar type of cross-fade is used to return to the original view.
			 */
			const MODAL_TRANSITION_STYLE_CROSS_DISSOLVE: number;

			/**
			 * When the window is presented, the current view initiates a horizontal 3D flip from
			 * right-to-left, resulting in the revealing of the new view as if it were on the back of the
			 * previous view. On dismissal, the flip occurs from left-to-right, returning to the original
			 * view.
			 */
			const MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL: number;

			/**
			 * When the window is presented, one corner of the current view curls up to reveal the modal
			 * view underneath. On dismissal, the curled up page unfurls itself back on top of the modal
			 * view.
			 */
			const MODAL_TRANSITION_STYLE_PARTIAL_CURL: number;

			/**
			 * Value of the badge for the application's springboard icon.
			 */
			let appBadge: number;

			/**
			 * Determines whether the shake to edit system-wide capability is enabled.
			 */
			let appSupportsShakeToEdit: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Gets the value of the <Titanium.UI.iPhone.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.iPhone.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.UI.iPhone.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.UI.iPhone.appBadge> property.
			 */
			function getAppBadge(): number;

			/**
			 * Sets the value of the <Titanium.UI.iPhone.appBadge> property.
			 */
			function setAppBadge(appBadge: number): void;

			/**
			 * Gets the value of the <Titanium.UI.iPhone.appSupportsShakeToEdit> property.
			 */
			function getAppSupportsShakeToEdit(): boolean;

			/**
			 * Sets the value of the <Titanium.UI.iPhone.appSupportsShakeToEdit> property.
			 */
			function setAppSupportsShakeToEdit(appSupportsShakeToEdit: boolean): void;

			/**
			 * A set of constants for the style that can be used for the `selectionStyle` property of a
			 * ListItem, which is set in the `properties` dictionary of either the <ListDataItem> or
			 * <ItemTemplate>.
			 */
			interface ListViewCellSelectionStyle extends Titanium.Proxy {
				/**
				 * The cell when selected has a blue background. This is the default value.
				 */
				readonly BLUE: number;

				/**
				 * The cell when selected has a gray background.
				 */
				readonly GRAY: number;

				/**
				 * The cell has no distinct style for when it is selected.
				 */
				readonly NONE: number;

			}
			/**
			 * A set of constants for the position value that can be used for the `position` property of
			 * <ListViewAnimationProperties> when invoking the ListView's `scrollToItem`, `appendSection`,
			 * `deleteSectionAt`, `insertSectionAt` and `replaceSectionAt` methods.
			 */
			interface ListViewScrollPosition extends Titanium.Proxy {
				/**
				 * The list view scrolls the row of interest to the bottom of the visible list view.
				 */
				readonly BOTTOM: number;

				/**
				 * The list view scrolls the row of interest to the middle of the list table view.
				 */
				readonly MIDDLE: number;

				/**
				 * The table view scrolls the row of interest to be fully visible with a minimal movement.
				 * If the row is already fully visible, no scrolling occurs. For example, if the row is above the
				 * visible area, the behavior is identical to that specified by `TOP`. This is the default.
				 */
				readonly NONE: number;

				/**
				 * The list view scrolls the row of interest to the top of the visible list view.
				 */
				readonly TOP: number;

			}
			/**
			 * A set of constants for the style that can be used for the `style` property of
			 * <Titanium.UI.ListView>.
			 */
			interface ListViewStyle extends Titanium.Proxy {
				/**
				 * A list view whose sections present distinct groups of rows. The section headers and footers
				 * do not float.
				 */
				readonly GROUPED: number;

				/**
				 * A plain list view. Any section headers or footers are displayed as inline separators and
				 * float when the list view is scrolled.
				 */
				readonly PLAIN: number;

			}

			/**
			 * A set of constants for the styles available for <Titanium.UI.ActivityIndicator> objects.
			 */
			namespace ActivityIndicatorStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * Large white spinning indicator.
				 */
				const BIG: number;

				/**
				 * Small gray spinning indicator.
				 */
				const DARK: number;

				/**
				 * Small white spinning indicator (default.)
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.ActivityIndicatorStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.ActivityIndicatorStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.ActivityIndicatorStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the style that can be used for the `style` property of
			 * <Titanium.UI.AlertDialog>.
			 */
			namespace AlertDialogStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * A standard alert dialog. This is the default value.
				 */
				const DEFAULT: number;

				/**
				 * An alert dialog that allows the user to enter text.
				 */
				const PLAIN_TEXT_INPUT: number;

				/**
				 * An alert dialog that allows the user to enter text. The text field is obscured.
				 */
				const SECURE_TEXT_INPUT: number;

				/**
				 * An alert dialog that allows the user to enter login identifier and password.
				 */
				const LOGIN_AND_PASSWORD_INPUT: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.AlertDialogStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.AlertDialogStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.AlertDialogStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the animation styles used for view transitions.
			 */
			namespace AnimationStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * Curl downwards during a transition animation.
				 */
				const CURL_DOWN: number;

				/**
				 * Curl upwards during a transition animation.
				 */
				const CURL_UP: number;

				/**
				 * Flip from left to right during a transition animation.
				 */
				const FLIP_FROM_LEFT: number;

				/**
				 * Flip from right to left during a transition animation.
				 */
				const FLIP_FROM_RIGHT: number;

				/**
				 * No animation.
				 */
				const NONE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.AnimationStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.AnimationStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.AnimationStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the style that can be used for the `separatorStyle` property of
			 * <Titanium.UI.ListView>.
			 */
			namespace ListViewSeparatorStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The separator cell has no distinct style.
				 */
				const NONE: number;

				/**
				 * The separator cell has a single line running across its width. This is the default value.
				 */
				const SINGLE_LINE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.ListViewSeparatorStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.ListViewSeparatorStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.ListViewSeparatorStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the bar styles used on the `style` property of <Titanium.UI.ProgressBar>.
			 */
			namespace ProgressBarStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The style of progress view that is used in a toolbar.
				 */
				const BAR: number;

				/**
				 * The standard progress-view style. This is the default.
				 */
				const DEFAULT: number;

				/**
				 * The standard progress-view style. Same as `DEFAULT`.
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.ProgressBarStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.ProgressBarStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.ProgressBarStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the Animation Styles used for transition on table view rows.
			 */
			namespace RowAnimationStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The inserted row or rows slides in from the bottom; the deleted row or rows slides out
				 * toward the bottom.
				 */
				const BOTTOM: number;

				/**
				 * The inserted or deleted row or rows fades into or out of the table view.
				 */
				const FADE: number;

				/**
				 * The inserted row or rows slides in from the left; the deleted row or rows slides out to the
				 * left.
				 */
				const LEFT: number;

				/**
				 * No animation is performed. The new cell value appears as if the cell had just been reloaded.
				 */
				const NONE: number;

				/**
				 * The inserted row or rows slides in from the right; the deleted row or rows slides out to
				 * the right.
				 */
				const RIGHT: number;

				/**
				 * The inserted row or rows slides in from the top; the deleted row or rows slides out toward
				 * the top.
				 */
				const TOP: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.RowAnimationStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.RowAnimationStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.RowAnimationStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the styles available for scrollbars used with <Titanium.UI.ScrollView.scrollIndicatorStyle> and <Titanium.UI.TableView.scrollIndicatorStyle> properties.
			 */
			namespace ScrollIndicatorStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * A style of indicator which is black smaller than the default style. This style is good
				 * against a white content background.
				 */
				const BLACK: number;

				/**
				 * The default style of scroll indicator, which is black with a white border. This style is
				 * good against any content background.
				 */
				const DEFAULT: number;

				/**
				 * A style of indicator is white and smaller than the default style. This style is good against
				 * a black content background.
				 */
				const WHITE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.ScrollIndicatorStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.ScrollIndicatorStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.ScrollIndicatorStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for creating standard iOS system buttons.
			 */
			namespace SystemButton {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Action** button.
				 */
				const ACTION: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create an activity indicator that
				 * can be used in navigation bars and toolbars.
				 */
				const ACTIVITY: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Add** button.
				 */
				const ADD: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Bookmarks** button.
				 */
				const BOOKMARKS: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Camera** button.
				 */
				const CAMERA: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Cancel** button.
				 */
				const CANCEL: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Compose** button.
				 */
				const COMPOSE: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a **ContactAdd** button.
				 */
				const CONTACT_ADD: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a **Disclosure** button.
				 */
				const DISCLOSURE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Done** button.
				 */
				const DONE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Edit** button.
				 */
				const EDIT: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Fast Forward** button.
				 */
				const FAST_FORWARD: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a fixed-width blank space
				 * for spacing items in toolbars.
				 */
				const FIXED_SPACE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a flexible blank space
				 * for spacing items in toolbars.
				 */
				const FLEXIBLE_SPACE: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a dark-colored **Info** button.
				 */
				const INFO_DARK: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a light-colored **Info** button.
				 */
				const INFO_LIGHT: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Organize** button.
				 */
				const ORGANIZE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Pause** button.
				 */
				const PAUSE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Play** button.
				 */
				const PLAY: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Refresh** button.
				 */
				const REFRESH: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Reply** button.
				 */
				const REPLY: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Rewind** button.
				 */
				const REWIND: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Save** button.
				 */
				const SAVE: number;

				/**
				 * Identical to [ACTIVITY](Titanium.UI.iPhone.SystemButton.ACTIVITY).
				 */
				const SPINNER: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Stop** button.
				 */
				const STOP: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Trash** button.
				 */
				const TRASH: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.SystemButton.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.SystemButton.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.SystemButton.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the system button styles that can be used for the button `style` property.
			 */
			namespace SystemButtonStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * Used with [ButtonBar](Titanium.UI.ButtonBar) or [TabbedBar](Titanium.UI.iOS.TabbedBar) only,
				 * to use the more condensed style used in nav bars and tool bars.
				 */
				const BAR: number;

				/**
				 * A simple button style with a border.
				 */
				const BORDERED: number;

				/**
				 * The style for a **Done** button--for example, a button that completes some task and returns
				 * to the previous view.
				 */
				const DONE: number;

				/**
				 * Specifies a borderless button, the default style for toolbars, button bars, and tabbed bars.
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.SystemButtonStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.SystemButtonStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.SystemButtonStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the system icon styles that can be used on a tab group tab.
			 */
			namespace SystemIcon {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * Bookmark style icon
				 */
				const BOOKMARKS: number;

				/**
				 * Contacts style icon
				 */
				const CONTACTS: number;

				/**
				 * Downloads style icon
				 */
				const DOWNLOADS: number;

				/**
				 * Favorites style icon
				 */
				const FAVORITES: number;

				/**
				 * Featured style icon
				 */
				const FEATURED: number;

				/**
				 * History style icon
				 */
				const HISTORY: number;

				/**
				 * More style icon
				 */
				const MORE: number;

				/**
				 * Most recent style icon
				 */
				const MOST_RECENT: number;

				/**
				 * Most viewed style icon
				 */
				const MOST_VIEWED: number;

				/**
				 * Recents style icon
				 */
				const RECENTS: number;

				/**
				 * Search style icon
				 */
				const SEARCH: number;

				/**
				 * Top rated style icon
				 */
				const TOP_RATED: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.SystemIcon.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.SystemIcon.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.SystemIcon.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the style that can be used for the `selectionStyle` property of
			 * <Titanium.UI.TableViewRow>.
			 */
			namespace TableViewCellSelectionStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The cell when selected has a blue background. This is the default value.
				 */
				const BLUE: number;

				/**
				 * Then cell when selected has a gray background.
				 */
				const GRAY: number;

				/**
				 * The cell has no distinct style for when it is selected.
				 */
				const NONE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.TableViewCellSelectionStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.TableViewCellSelectionStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.TableViewCellSelectionStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the position value that can be used for the `position` property of
			 * <Titanium.UI.TableView> when invoking `scrollToIndex`.
			 */
			namespace TableViewScrollPosition {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The table view scrolls the row of interest to the bottom of the visible table view.
				 */
				const BOTTOM: number;

				/**
				 * The table view scrolls the row of interest to the middle of the visible table view.
				 */
				const MIDDLE: number;

				/**
				 * The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by `TOP`. This is the default.
				 */
				const NONE: number;

				/**
				 * The table view scrolls the row of interest to the top of the visible table view.
				 */
				const TOP: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.TableViewScrollPosition.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.TableViewScrollPosition.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.TableViewScrollPosition.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the style that can be used for the `separatorStyle` property of
			 * <Titanium.UI.TableView>.
			 */
			namespace TableViewSeparatorStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * The separator cell has no distinct style.
				 */
				const NONE: number;

				/**
				 * The separator cell has a single line running across its width. This is the default value.
				 */
				const SINGLE_LINE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.TableViewSeparatorStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.TableViewSeparatorStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.TableViewSeparatorStyle.apiName> property.
				 */
				function getApiName(): string;

			}

			/**
			 * A set of constants for the style that can be used for the button `style` property of
			 * <Titanium.UI.TableView>.
			 */
			namespace TableViewStyle {
				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				let bubbleParent: boolean;

				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * A table view whose sections present distinct groups of rows. The section headers and footers
				 * do not float.
				 */
				const GROUPED: number;

				/**
				 * A plain table view. Any section headers or footers are displayed as inline separators and
				 * float when the table view is scrolled.
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: any) => any): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event: any): void;

				/**
				 * Applies the properties to the proxy.
				 */
				function applyProperties(props: any): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.TableViewStyle.bubbleParent> property.
				 */
				function getBubbleParent(): boolean;

				/**
				 * Sets the value of the <Titanium.UI.iPhone.TableViewStyle.bubbleParent> property.
				 */
				function setBubbleParent(bubbleParent: boolean): void;

				/**
				 * Gets the value of the <Titanium.UI.iPhone.TableViewStyle.apiName> property.
				 */
				function getApiName(): string;

			}
		}
	}

	/**
	 * Base type for all Titanium modules.
	 */
	namespace Module {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Gets the value of the <Titanium.Module.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Module.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Module.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Module.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Module.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Module.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

	}

	/**
	 * The top-level API module, containing methods to output messages to the system log.
	 */
	namespace API {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Logs messages with a `debug` severity-level.
		 */
		function debug(...message: string[]): void;

		/**
		 * Logs messages with an `error` severity-level.
		 */
		function error(...message: string[]): void;

		/**
		 * Logs messages with an `info` severity-level.
		 */
		function info(...message: string[]): void;

		/**
		 * Logs messages with the specified severity-level.
		 */
		function log(level: string, message: ReadonlyArray<string>): void;

		/**
		 * Logs messages with the specified severity-level.
		 */
		function log(level: string, message: string): void;

		/**
		 * Logs messages with a `timestamp` severity-level, prefixed with a timestamp float number
		 * representing the number of seconds since January 1st, 2001.
		 */
		function timestamp(message: ReadonlyArray<string>): void;

		/**
		 * Logs messages with a `timestamp` severity-level, prefixed with a timestamp float number
		 * representing the number of seconds since January 1st, 2001.
		 */
		function timestamp(message: string): void;

		/**
		 * Logs messages with a `trace` severity-level.
		 */
		function trace(message: ReadonlyArray<string>): void;

		/**
		 * Logs messages with a `trace` severity-level.
		 */
		function trace(message: string): void;

		/**
		 * Logs messages with a `warn` severity-level.
		 */
		function warn(message: ReadonlyArray<string>): void;

		/**
		 * Logs messages with a `warn` severity-level.
		 */
		function warn(message: string): void;

		/**
		 * Gets the value of the <Titanium.API.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.API.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.API.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.API.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.API.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.API.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

	}

	/**
	 * The top-level Accelerometer module, used to determine the device's physical position.
	 */
	namespace Accelerometer {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Gets the value of the <Titanium.Accelerometer.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Accelerometer.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Accelerometer.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Accelerometer.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Accelerometer.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Accelerometer.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

	}

	/**
	 * Used for transmitting developer-defined Analytics events to the Appcelerator Analytics product.
	 */
	namespace Analytics {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * JSON representation of the last Analytics event generated.
		 */
		const lastEvent: string;

		/**
		 * Allows the user to opt out from Analytics during runtime to comply to GPDR.
		 */
		let optedOut: boolean;

		/**
		 * Sends a generic event for this application session.
		 * **Not displayed in Analytics UI**.
		 */
		function addEvent(type: string, name: string, data?: any): void;

		/**
		 * Sends a feature event for this application session.
		 */
		function featureEvent(name: string, data?: any): number;

		/**
		 * Sets a list of events that will not be sent to the Analytics server.
		 */
		function filterEvents(events: ReadonlyArray<string>): void;

		/**
		 * Sends a navigation event for this application session.
		 * **Not displayed in Analytics UI**.
		 */
		function navEvent(from: string, to: string, name?: string, data?: any): void;

		/**
		 * Sends a settings event for this application session.
		 * **Not displayed in Analytics UI**.
		 */
		function settingsEvent(name: string, data?: any): void;

		/**
		 * Send a timed event for this application session.
		 * **Not displayed in Analytics UI**.
		 */
		function timedEvent(name: string, start: Date, stop: Date, duration: number, data?: any): void;

		/**
		 * Sends a user event for this application session. **Not displayed in Analytics UI**.
		 */
		function userEvent(name: string, data?: any): void;

		/**
		 * Gets the value of the <Titanium.Analytics.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Analytics.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Analytics.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Analytics.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Analytics.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Analytics.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Analytics.lastEvent> property.
		 */
		function getLastEvent(): string;

		/**
		 * Gets the value of the <Titanium.Analytics.optedOut> property.
		 */
		function getOptedOut(): boolean;

		/**
		 * Sets the value of the <Titanium.Analytics.optedOut> property.
		 */
		function setOptedOut(optedOut: boolean): void;

	}

	/**
	 * The top-level Android module.
	 */
	namespace Android {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * User switched airplane mode on or off.
		 */
		const ACTION_AIRPLANE_MODE_CHANGED: string;

		/**
		 * List all applications.
		 */
		const ACTION_ALL_APPS: string;

		/**
		 * Handle an incoming phone call.
		 */
		const ACTION_ANSWER: string;

		/**
		 * Used to indicate that the data is an attachment.
		 */
		const ACTION_ATTACH_DATA: string;

		/**
		 * Listen to battery state change status.
		 */
		const ACTION_BATTERY_CHANGED: string;

		/**
		 * Indicates low battery condition on the device.
		 */
		const ACTION_BATTERY_LOW: string;

		/**
		 * Inidicates the battery is now okay after being low.
		 */
		const ACTION_BATTERY_OKAY: string;

		/**
		 * Indicates the system has finished booting.
		 */
		const ACTION_BOOT_COMPLETED: string;

		/**
		 * Show activity for reporting a bug.
		 */
		const ACTION_BUG_REPORT: string;

		/**
		 * Perform a call to someone specified by the `data` property.
		 */
		const ACTION_CALL: string;

		/**
		 * User pressed the call button.
		 */
		const ACTION_CALL_BUTTON: string;

		/**
		 * The camera button was pressed.
		 */
		const ACTION_CAMERA_BUTTON: string;

		/**
		 * Display an activity chooser.
		 */
		const ACTION_CHOOSER: string;

		/**
		 * User dismissed a temporary system dialog, such as the notification drawer or recent-app drawer.
		 */
		const ACTION_CLOSE_SYSTEM_DIALOGS: string;

		/**
		 * The device's configuration changed.
		 */
		const ACTION_CONFIGURATION_CHANGED: string;

		/**
		 * Create a shortcut.
		 */
		const ACTION_CREATE_SHORTCUT: string;

		/**
		 * Date changed.
		 */
		const ACTION_DATE_CHANGED: string;

		/**
		 * Default action, which is `Titanium.Android.ACTION_VIEW`
		 */
		const ACTION_DEFAULT: string;

		/**
		 * Delete the data specified by the Intent's `data` property.
		 */
		const ACTION_DELETE: string;

		/**
		 * Indicates a low memory condition on the device.
		 */
		const ACTION_DEVICE_STORAGE_LOW: string;

		/**
		 * Dial a number specified by the Intent's `data` property.
		 */
		const ACTION_DIAL: string;

		/**
		 * Provide editable access to the data specified by the Intent's `data` property.
		 */
		const ACTION_EDIT: string;

		/**
		 * Allow the user to select a particular kind of data specified by the Intent's `type` property.
		 */
		const ACTION_GET_CONTENT: string;

		/**
		 * GTalk connection has been established.
		 */
		const ACTION_GTALK_SERVICE_CONNECTED: string;

		/**
		 * GTalk connection has been disconnected.
		 */
		const ACTION_GTALK_SERVICE_DISCONNECTED: string;

		/**
		 * A wired headset has been plugged in or unplugged.
		 */
		const ACTION_HEADSET_PLUG: string;

		/**
		 * An input method has been changed.
		 */
		const ACTION_INPUT_METHOD_CHANGED: string;

		/**
		 * Insert an empty item into the given container.
		 */
		const ACTION_INSERT: string;

		/**
		 * Pick an existing item or insert an empty item, then edit it.
		 */
		const ACTION_INSERT_OR_EDIT: string;

		/**
		 * Start as the main entry point.
		 */
		const ACTION_MAIN: string;

		/**
		 * Indicates low memory condition notification acknowledged by user and package management should be started.
		 */
		const ACTION_MANAGE_PACKAGE_STORAGE: string;

		/**
		 * External media was removed from SD card slot, but mount point was not unmounted.
		 */
		const ACTION_MEDIA_BAD_REMOVAL: string;

		/**
		 * The media button was pressed.
		 */
		const ACTION_MEDIA_BUTTON: string;

		/**
		 * External media is present and being disk-checked.
		 */
		const ACTION_MEDIA_CHECKING: string;

		/**
		 * User has expressed the desire to remove the external storage media.
		 */
		const ACTION_MEDIA_EJECT: string;

		/**
		 * External media is present and mounted at its mount point.
		 */
		const ACTION_MEDIA_MOUNTED: string;

		/**
		 * External media is present, but is using an incompatible filesystem or is blank.
		 */
		const ACTION_MEDIA_NOFS: string;

		/**
		 * External media has been removed.
		 */
		const ACTION_MEDIA_REMOVED: string;

		/**
		 * The media scanner has finished scanning a directory.
		 */
		const ACTION_MEDIA_SCANNER_FINISHED: string;

		/**
		 * Request the media scanner to scan a file and add it to the media database.
		 */
		const ACTION_MEDIA_SCANNER_SCAN_FILE: string;

		/**
		 * The media scanner has started scanning a directory.
		 */
		const ACTION_MEDIA_SCANNER_STARTED: string;

		/**
		 * External media is unmounted because it is being shared via USB mass storage.
		 */
		const ACTION_MEDIA_SHARED: string;

		/**
		 * Corresponds to the Android `Intent.ACTION_MEDIA_UNMOUNTABLE` constant.
		 */
		const ACTION_MEDIA_UNMOUNTABLE: string;

		/**
		 * External media is present, but not mounted at its mount point.
		 */
		const ACTION_MEDIA_UNMOUNTED: string;

		/**
		 * An outgoing call is about to be placed.
		 */
		const ACTION_NEW_OUTGOING_CALL: string;

		/**
		 * A new application package has been installed on the device.
		 */
		const ACTION_PACKAGE_ADDED: string;

		/**
		 * An existing application package has been changed.
		 */
		const ACTION_PACKAGE_CHANGED: string;

		/**
		 * The user has cleared the data of a package.
		 */
		const ACTION_PACKAGE_DATA_CLEARED: string;

		/**
		 * An existing application package has been removed from the device.
		 */
		const ACTION_PACKAGE_REMOVED: string;

		/**
		 * A new version of an application package has been installed, replacing an existing version that was previously installed.
		 */
		const ACTION_PACKAGE_REPLACED: string;

		/**
		 * The user has restarted a package, and all of its processes have been killed.
		 */
		const ACTION_PACKAGE_RESTARTED: string;

		/**
		 * Pick an item from the directory indicated by the Intent's `data` property.
		 */
		const ACTION_PICK: string;

		/**
		 * Pick an activity given an intent.
		 */
		const ACTION_PICK_ACTIVITY: string;

		/**
		 * External power has been connected to the device.
		 */
		const ACTION_POWER_CONNECTED: string;

		/**
		 * External power has been disconnected from the device.
		 */
		const ACTION_POWER_DISCONNECTED: string;

		/**
		 * Show power usage information to the user.
		 */
		const ACTION_POWER_USAGE_SUMMARY: string;

		/**
		 * Content provider published new events or items.
		 */
		const ACTION_PROVIDER_CHANGED: string;

		/**
		 * Device rebooted.
		 */
		const ACTION_REBOOT: string;

		/**
		 * Run the data.
		 */
		const ACTION_RUN: string;

		/**
		 * Sent when the device goes to sleep and becomes non-interactive.
		 */
		const ACTION_SCREEN_OFF: string;

		/**
		 * Sent when the device wakes up and becomes interactive.
		 */
		const ACTION_SCREEN_ON: string;

		/**
		 * Perform a search.
		 */
		const ACTION_SEARCH: string;

		/**
		 * Start action associated with long pressing on the search key.
		 */
		const ACTION_SEARCH_LONG_PRESS: string;

		/**
		 * Deliver data to another activity.
		 */
		const ACTION_SEND: string;

		/**
		 * Deliver data to the recipient specified by the Intent's `data` property.
		 */
		const ACTION_SENDTO: string;

		/**
		 * Deliver multiple data to another activity.
		 */
		const ACTION_SEND_MULTIPLE: string;

		/**
		 * Show settings for choosing the system wallpaper.
		 */
		const ACTION_SET_WALLPAPER: string;

		/**
		 * Device is shutting down.
		 */
		const ACTION_SHUTDOWN: string;

		/**
		 * Perform data synchronization.
		 */
		const ACTION_SYNC: string;

		/**
		 * Start the platform-defined tutorial.
		 */
		const ACTION_SYSTEM_TUTORIAL: string;

		/**
		 * The time was set.
		 */
		const ACTION_TIME_CHANGED: string;

		/**
		 * The current time changed.  Sent every minute.
		 */
		const ACTION_TIME_TICK: string;

		/**
		 * A user ID was removed from the system.
		 */
		const ACTION_UID_REMOVED: string;

		/**
		 * Sent when the user is present after device wakes up.
		 */
		const ACTION_USER_PRESENT: string;

		/**
		 * Display data to the user.
		 */
		const ACTION_VIEW: string;

		/**
		 * Start voice command.
		 */
		const ACTION_VOICE_COMMAND: string;

		/**
		 * The current system wallpaper has changed.
		 */
		const ACTION_WALLPAPER_CHANGED: string;

		/**
		 * Perform a web search.
		 */
		const ACTION_WEB_SEARCH: string;

		/**
		 * Set if the activity should be considered as an alternative action to the data the user is currently viewing.
		 */
		const CATEGORY_ALTERNATIVE: string;

		/**
		 * Activity can browse the Internet.
		 */
		const CATEGORY_BROWSABLE: string;

		/**
		 * Activity should be used as the default action to perform on a piece of data.
		 */
		const CATEGORY_DEFAULT: string;

		/**
		 * Activity is in the development preference panel.
		 */
		const CATEGORY_DEVELOPMENT_PREFERENCE: string;

		/**
		 * Activity can run inside a parent activity.
		 */
		const CATEGORY_EMBED: string;

		/**
		 * To be used as test code for framework instrumentation tests.
		 */
		const CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: string;

		/**
		 * Home activity, the first activity that is displayed when the device boots.
		 */
		const CATEGORY_HOME: string;

		/**
		 * Provides information about the package it is in.
		 */
		const CATEGORY_INFO: string;

		/**
		 * Activity is in the device's launcher.
		 */
		const CATEGORY_LAUNCHER: string;

		/**
		 * This activity may be exercised by the monkey or other automated test tools.
		 */
		const CATEGORY_MONKEY: string;

		/**
		 * Activity can open raw `file://` or `scheme://` URIs.
		 */
		const CATEGORY_OPENABLE: string;

		/**
		 * This activity is a preference panel.
		 */
		const CATEGORY_PREFERENCE: string;

		/**
		 * To be used as a sample code example (not part of the normal user experience).
		 */
		const CATEGORY_SAMPLE_CODE: string;

		/**
		 * Activity should be considered as an alternative selection action to the data the user
		 * has currently selected.
		 */
		const CATEGORY_SELECTED_ALTERNATIVE: string;

		/**
		 * Activity to be used in a tab activity.
		 */
		const CATEGORY_TAB: string;

		/**
		 * To be used as a test (not part of the normal user experience).
		 */
		const CATEGORY_TEST: string;

		/**
		 * To be used as a unit test (run through the Test Harness).
		 */
		const CATEGORY_UNIT_TEST: string;

		/**
		 * Integer indicating how many pending alarms are being delivered with the intent.
		 */
		const EXTRA_ALARM_COUNT: string;

		/**
		 * String array containing e-mail addresses for blind carbon copying.
		 */
		const EXTRA_BCC: string;

		/**
		 * String array containing e-mail addresses for carbon copying.
		 */
		const EXTRA_CC: string;

		/**
		 * Boolean indicating full uninstall (true) or partial uninstall (false).
		 */
		const EXTRA_DATA_REMOVED: string;

		/**
		 * Boolean indicating to restart the application or not.
		 */
		const EXTRA_DONT_KILL_APP: string;

		/**
		 * String array containing e-mail addresses.
		 */
		const EXTRA_EMAIL: string;

		/**
		 * An Intent describing the choices you would like shown.
		 */
		const EXTRA_INTENT: string;

		/**
		 * A KeyEvent object containing the event that triggered the creation of the Intent it is in.
		 */
		const EXTRA_KEY_EVENT: string;

		/**
		 * String holding the phone number to call or number that was called.
		 */
		const EXTRA_PHONE_NUMBER: string;

		/**
		 * Boolean indicating if the package is being replaced.
		 */
		const EXTRA_REPLACING: string;

		/**
		 * Bitmap icon.
		 */
		const EXTRA_SHORTCUT_ICON: string;

		/**
		 * Resource of the shortcut.
		 */
		const EXTRA_SHORTCUT_ICON_RESOURCE: string;

		/**
		 * Intent of a shortcut.
		 */
		const EXTRA_SHORTCUT_INTENT: string;

		/**
		 * Name of the shortcut.
		 */
		const EXTRA_SHORTCUT_NAME: string;

		/**
		 * URI containing the stream data.
		 */
		const EXTRA_STREAM: string;

		/**
		 * Subject line of a message.
		 */
		const EXTRA_SUBJECT: string;

		/**
		 * Initial data to place in a newly created record.
		 */
		const EXTRA_TEMPLATE: string;

		/**
		 * Corresponds to the Android `Intent.EXTRA_TEXT` constant.
		 */
		const EXTRA_TEXT: string;

		/**
		 * Corresponds to the Android `Intent.EXTRA_TITLE` constant.
		 */
		const EXTRA_TITLE: string;

		/**
		 * UID of the assigned packaged.
		 */
		const EXTRA_UID: string;

		/**
		 * Not used.
		 */
		const FILL_IN_ACTION: number;

		/**
		 * Not used.
		 */
		const FILL_IN_CATEGORIES: number;

		/**
		 * Not used.
		 */
		const FILL_IN_COMPONENT: number;

		/**
		 * Not used.
		 */
		const FILL_IN_DATA: number;

		/**
		 * Not used.
		 */
		const FILL_IN_PACKAGE: number;

		/**
		 * If activity is already running, bring it to the foreground.
		 */
		const FLAG_ACTIVITY_BROUGHT_TO_FRONT: number;

		/**
		 * If the activity is present, removes any activities on top of it to make it the foreground activity.
		 */
		const FLAG_ACTIVITY_CLEAR_TOP: number;

		/**
		 * Corresponds to the Android `Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET` constant.
		 */
		const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: number;

		/**
		 * Exclude the activity from recently launched activities.
		 */
		const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: number;

		/**
		 * Return result to the original calling activity.
		 */
		const FLAG_ACTIVITY_FORWARD_RESULT: number;

		/**
		 * Activity was launched from history.
		 */
		const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: number;

		/**
		 * Start the activity as a new task even if it exists.
		 */
		const FLAG_ACTIVITY_MULTIPLE_TASK: number;

		/**
		 * Activity will be the start of a new task (collection of activities).
		 */
		const FLAG_ACTIVITY_NEW_TASK: number;

		/**
		 * Prevent transition animation.
		 */
		const FLAG_ACTIVITY_NO_ANIMATION: number;

		/**
		 * Do not keep the activity in the history stack.
		 */
		const FLAG_ACTIVITY_NO_HISTORY: number;

		/**
		 * Disables the [onUserLeaveHint()](https://developer.android.com/reference/android/app/Activity.html#onUserLeaveHint()) callback.
		 */
		const FLAG_ACTIVITY_NO_USER_ACTION: number;

		/**
		 * Corresponds to the Android `Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP` constant.
		 */
		const FLAG_ACTIVITY_PREVIOUS_IS_TOP: number;

		/**
		 * If the activity already exists, place it at the top of the history stack.
		 */
		const FLAG_ACTIVITY_REORDER_TO_FRONT: number;

		/**
		 * If the task already exists, resets the task to its initial state.
		 */
		const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: number;

		/**
		 * Do not launch the activity if it is already running.
		 */
		const FLAG_ACTIVITY_SINGLE_TOP: number;

		/**
		 * Enable a log message to print out the resolution of the intent.
		 */
		const FLAG_DEBUG_LOG_RESOLUTION: number;

		/**
		 * Indicates the intent is coming from a background operation.
		 */
		const FLAG_FROM_BACKGROUND: number;

		/**
		 * Grant read permission on the URI in the Intent's data or clipboard.
		 */
		const FLAG_GRANT_READ_URI_PERMISSION: number;

		/**
		 * Grants write permission on the URI in the Intent's data or clipboard.
		 */
		const FLAG_GRANT_WRITE_URI_PERMISSION: number;

		/**
		 * When sending a broadcast, only registered receivers will be called.
		 */
		const FLAG_RECEIVER_REGISTERED_ONLY: number;

		/**
		 * Cancel the current pending intent before creating a new one.
		 */
		const FLAG_CANCEL_CURRENT: number;

		/**
		 * If the current intent does not exist, do not create it.
		 */
		const FLAG_NO_CREATE: number;

		/**
		 * The pending intent can only be used once.
		 */
		const FLAG_ONE_SHOT: number;

		/**
		 * If the current pending intent already exists, only update the current intent's extra data.
		 */
		const FLAG_UPDATE_CURRENT: number;

		/**
		 * Notification category indicating an alarm or timer.
		 */
		const CATEGORY_ALARM: string;

		/**
		 * Notification category indicating an incoming call (voice or video) or similar synchronous
		 * communication request.
		 */
		const CATEGORY_CALL: string;

		/**
		 * Notification category indicating an asynchronous bulk message (email).
		 */
		const CATEGORY_EMAIL: string;

		/**
		 * Notification category indicating an error in background operation or authentication status.
		 */
		const CATEGORY_ERROR: string;

		/**
		 * Notification category indicating a calendar event.
		 */
		const CATEGORY_EVENT: string;

		/**
		 * Notification category indicating an incoming direct message (SMS, instant message, etc.).
		 */
		const CATEGORY_MESSAGE: string;

		/**
		 * Notification category indicating the progress of a long-running background operation.
		 */
		const CATEGORY_PROGRESS: string;

		/**
		 * Notification category indicating a promotion or advertisement.
		 */
		const CATEGORY_PROMO: string;

		/**
		 * Notification category indicating a specific, timely recommendation for a single thing.
		 */
		const CATEGORY_RECOMMENDATION: string;

		/**
		 * Notification category for a running background service.
		 */
		const CATEGORY_SERVICE: string;

		/**
		 * Notification category for a social network or sharing update.
		 */
		const CATEGORY_SOCIAL: string;

		/**
		 * Notification category indicating ongoing information about device or contextual status.
		 */
		const CATEGORY_STATUS: string;

		/**
		 * Notification category indicating media transport control for playback.
		 */
		const CATEGORY_TRANSPORT: string;

		/**
		 * Use all default settings for a notification; see
		 * [Notification.defaults](Titanium.Android.Notification.defaults).
		 */
		const DEFAULT_ALL: number;

		/**
		 * Use the default light settings for a notification; see
		 * [Notification.defaults](Titanium.Android.Notification.defaults).
		 */
		const DEFAULT_LIGHTS: number;

		/**
		 * Use the default sound settings for a notification; see
		 * [Notification.defaults](Titanium.Android.Notification.defaults).
		 */
		const DEFAULT_SOUND: number;

		/**
		 * Use the default vibration settings for a notification; see
		 * [Notification.defaults](Titanium.Android.Notification.defaults).
		 */
		const DEFAULT_VIBRATE: number;

		/**
		 * Cancel the notification when it is clicked by the user.
		 */
		const FLAG_AUTO_CANCEL: number;

		/**
		 * Repeat audio until the notification is cancelled or the notification window
		 * is opened.
		 */
		const FLAG_INSISTENT: number;

		/**
		 * Do not cancel the notification when the user clicks the Clear All button.
		 */
		const FLAG_NO_CLEAR: number;

		/**
		 * Specifies that a notification is in reference to something that is ongoing, like a phone call.
		 */
		const FLAG_ONGOING_EVENT: number;

		/**
		 * Play an alert (sound, lights, and/or vibration) once each time the notification is sent, even if it has not been canceled before that.
		 */
		const FLAG_ONLY_ALERT_ONCE: number;

		/**
		 * Use LED lights to alert the user to the notification.
		 */
		const FLAG_SHOW_LIGHTS: number;

		/**
		 * Use for urgent or time-critical notifications, for example, turn-by-turn directions or
		 * emergency alerts.
		 */
		const PRIORITY_MAX: number;

		/**
		 * Use for high priority notifications like real-time chat messages.
		 */
		const PRIORITY_HIGH: number;

		/**
		 * Default priority if it does not fit into another priority category.
		 */
		const PRIORITY_DEFAULT: number;

		/**
		 * Use for low priority notifications like software updates.
		 */
		const PRIORITY_LOW: number;

		/**
		 * Use for expired events.
		 */
		const PRIORITY_MIN: number;

		/**
		 * Shows basic information about the notification.
		 */
		const VISIBILITY_PRIVATE: number;

		/**
		 * Shows the notification's full content on the lockscreen. This is the system default if visibility is left unspecified.
		 */
		const VISIBILITY_PUBLIC: number;

		/**
		 * Shows the most minimal information of the notification on the lockscreen.
		 */
		const VISIBILITY_SECRET: number;

		/**
		 * QuickSettings tile is unavailble.
		 */
		const TILE_STATE_UNAVAILABLE: number;

		/**
		 * QuickSettings tile is inactive.
		 */
		const TILE_STATE_INACTIVE: number;

		/**
		 * QuickSettings tile is active.
		 */
		const TILE_STATE_ACTIVE: number;

		/**
		 * Ensures that the CPU is running; the screen and keyboard backlight will be allowed to go off.
		 */
		const WAKE_LOCK_PARTIAL: number;

		/**
		 * Ensures that the screen and keyboard backlight are on at full brightness.
		 */
		const WAKE_LOCK_FULL: number;

		/**
		 * Ensures that the screen is on (but may be dimmed); the keyboard backlight will be allowed to go off.
		 */
		const WAKE_LOCK_SCREEN_DIM: number;

		/**
		 * Ensures that the screen is on at full brightness; the keyboard backlight will be allowed to go off.
		 */
		const WAKE_LOCK_SCREEN_BRIGHT: number;

		/**
		 * Turn the screen on when the wake lock is acquired.
		 */
		const WAKE_LOCK_ACQUIRE_CAUSES_WAKEUP: number;

		/**
		 * When this wake lock is released, poke the user activity timer so the screen stays on for a little longer.
		 */
		const WAKE_LOCK_ON_AFTER_RELEASE: number;

		/**
		 * Not used.
		 */
		const PENDING_INTENT_FOR_ACTIVITY: number;

		/**
		 * Not used.
		 */
		const PENDING_INTENT_FOR_BROADCAST: number;

		/**
		 * Not used.
		 */
		const PENDING_INTENT_FOR_SERVICE: number;

		/**
		 * Not used.
		 */
		const PENDING_INTENT_MAX_VALUE: number;

		/**
		 * Used with [setResult](Titanium.Android.Activity.setResult) to specify that
		 * an activity was canceled.
		 */
		const RESULT_CANCELED: number;

		/**
		 * Used with [setResult](Titanium.Android.Activity.setResult) to specify a
		 * user-defined result.
		 */
		const RESULT_FIRST_USER: number;

		/**
		 * Used with [setResult](Titanium.Android.Activity.setResult) to specify that
		 * an activity succeeded.
		 */
		const RESULT_OK: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify the activity should run in the same orientation as the activity behind it
		 * in the activity stack.
		 */
		const SCREEN_ORIENTATION_BEHIND: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify a landscape screen orientation.
		 */
		const SCREEN_ORIENTATION_LANDSCAPE: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify that the sensor should be ignored and the display should not rotate.
		 */
		const SCREEN_ORIENTATION_NOSENSOR: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify a portrait screen orientation.
		 */
		const SCREEN_ORIENTATION_PORTRAIT: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify that orientation should be determined by the orientation sensor.
		 */
		const SCREEN_ORIENTATION_SENSOR: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify that the system should use its default rules for determining the best
		 * orientation.
		 */
		const SCREEN_ORIENTATION_UNSPECIFIED: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify that the system should use the user's preferred orientation.
		 */
		const SCREEN_ORIENTATION_USER: number;

		/**
		 * Always show this item as an action button in the action bar.
		 */
		const SHOW_AS_ACTION_ALWAYS: number;

		/**
		 * The action view can collapse to a normal menu item.
		 */
		const SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;

		/**
		 * Show this item as an action button if the system decides there is room for it.
		 */
		const SHOW_AS_ACTION_IF_ROOM: number;

		/**
		 * Never display this item as an action button in the action bar.
		 */
		const SHOW_AS_ACTION_NEVER: number;

		/**
		 * When this item is in the action bar, always show it with a text label.
		 */
		const SHOW_AS_ACTION_WITH_TEXT: number;

		/**
		 * Standard Action Bar navigation mode.
		 */
		const NAVIGATION_MODE_STANDARD: number;

		/**
		 * Action Bar tab navigation mode.
		 */
		const NAVIGATION_MODE_TABS: number;

		/**
		 * A Service start mode indicating that if the host application is stopped by Android, the service should not be restarted automatically.
		 */
		const START_NOT_STICKY: number;

		/**
		 * A Service start mode indicating that if the host application is stopped by Android, the service should be restarted automatically and the original Intent re-sent.
		 */
		const START_REDELIVER_INTENT: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to
		 * request that the alarm stream type for notifications be used.
		 */
		const STREAM_ALARM: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * default stream type for notifications be used.
		 */
		const STREAM_DEFAULT: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to
		 * request that the music stream type for notifications be used.
		 */
		const STREAM_MUSIC: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * notification stream type for notifications be used.
		 */
		const STREAM_NOTIFICATION: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * ring stream type for notifications be used.
		 */
		const STREAM_RING: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * system stream type for notifications be used.
		 */
		const STREAM_SYSTEM: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * voice call stream type for notifications be used.
		 */
		const STREAM_VOICE_CALL: number;

		/**
		 * The URI scheme used for intent URIs.
		 */
		const URI_INTENT_SCHEME: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_DEFAULT: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_HIGH: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_LOW: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_MAX: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_MIN: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_NONE: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_UNSPECIFIED: number;

		/**
		 * References the top-most window's activity.
		 */
		const currentActivity: Titanium.Android.Activity;

		/**
		 * Service in the active context.
		 */
		const currentService: Titanium.Android.Service;

		/**
		 * The first activity launched by the application.
		 */
		const rootActivity: Titanium.Android.Activity;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Creates an activity chooser intent, used to allow the user to select a target activity
		 * for an intent.
		 */
		function createIntentChooser(intent: Titanium.Android.Intent, title: string): Titanium.Android.Intent;

		/**
		 * Creates a [PendingIntent](Titanium.Android.PendingIntent) to be used inside a
		 * [Notification](Titanium.Android.Notification).
		 */
		function createPendingIntent(parameters?: any): Titanium.Android.PendingIntent;

		/**
		 * Create a <Titanium.Android.Service> so you can start/stop it and listen for events from it.
		 */
		function createService(intent: Titanium.Android.Intent): Titanium.Android.Service;

		/**
		 * Create an `Intent` to be used to start a service.
		 */
		function createServiceIntent(options: ServiceIntentOptions): Titanium.Android.Intent;

		/**
		 * Creates a [DrawerLayout](Titanium.UI.Android.DrawerLayout).
		 */
		function createDrawerLayout(parameters?: any): Titanium.UI.Android.DrawerLayout;

		/**
		 * Returns `true` if the app has permission access.
		 */
		function hasPermission(permission: string): boolean;

		/**
		 * Returns `true` if the app has permission access.
		 */
		function hasPermission(permission: ReadonlyArray<string>): boolean;

		/**
		 * Request for permission access.
		 */
		function requestPermissions(permissions: string, callback?: (param0: RequestPermissionAccessResult) => any): void;

		/**
		 * Request for permission access.
		 */
		function requestPermissions(permissions: ReadonlyArray<string>, callback?: (param0: RequestPermissionAccessResult) => any): void;

		/**
		 * Check on state of Service.
		 */
		function isServiceRunning(intent: Titanium.Android.Intent): boolean;

		/**
		 * Registers broadcast receiver for the given actions.
		 */
		function registerBroadcastReceiver(broadcastReceiver: Titanium.Android.BroadcastReceiver, actions: ReadonlyArray<string>): void;

		/**
		 * Unregisters a broadcast receiver.
		 */
		function unregisterBroadcastReceiver(broadcastReceiver: Titanium.Android.BroadcastReceiver): void;

		/**
		 * Starts a simple service.
		 */
		function startService(intent: Titanium.Android.Intent): void;

		/**
		 * Stop a simple service that was started with `startService`.
		 */
		function stopService(intent: Titanium.Android.Intent): void;

		/**
		 * Create an `Intent` to be used in a broadcast.
		 */
		function createBroadcastIntent(parameters?: any): Titanium.Android.Intent;

		/**
		 * Gets the value of the <Titanium.Android.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Android.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Android.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Android.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Android.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Android.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Creates and returns an instance of <Titanium.Android.BigPictureStyle>.
		 */
		function createBigPictureStyle(parameters?: any): Titanium.Android.BigPictureStyle;

		/**
		 * Creates and returns an instance of <Titanium.Android.BigTextStyle>.
		 */
		function createBigTextStyle(parameters?: any): Titanium.Android.BigTextStyle;

		/**
		 * Creates and returns an instance of <Titanium.Android.BroadcastReceiver>.
		 */
		function createBroadcastReceiver(parameters?: any): Titanium.Android.BroadcastReceiver;

		/**
		 * Creates and returns an instance of <Titanium.Android.Intent>.
		 */
		function createIntent(parameters?: any): Titanium.Android.Intent;

		/**
		 * Creates and returns an instance of <Titanium.Android.Notification>.
		 */
		function createNotification(parameters?: any): Titanium.Android.Notification;

		/**
		 * Creates and returns an instance of <Titanium.Android.NotificationChannel>.
		 */
		function createNotificationChannel(parameters?: any): Titanium.Android.NotificationChannel;

		/**
		 * Creates and returns an instance of <Titanium.Android.QuickSettingsService>.
		 */
		function createQuickSettingsService(parameters?: any): Titanium.Android.QuickSettingsService;

		/**
		 * Creates and returns an instance of <Titanium.Android.RemoteViews>.
		 */
		function createRemoteViews(parameters?: any): Titanium.Android.RemoteViews;

		/**
		 * An action bar is a window feature that identifies the application and user location,
		 * and provides user actions and navigation modes.
		 */
		interface ActionBar extends Titanium.Proxy {
			/**
			 * The background image for the action bar, specified as a local file path or URL.
			 */
			backgroundImage: string;

			/**
			 * Displays an "up" affordance on the "home" area of the action bar.
			 */
			displayHomeAsUp: boolean;

			/**
			 * Enable or disable the "home" button in the corner of the action bar.
			 */
			homeButtonEnabled: boolean;

			/**
			 * Sets the application icon displayed in the "home" area of the action bar, specified as a local file path or URL.
			 */
			icon: string;

			/**
			 * Sets the application logo displayed in the "home" area of the action bar, specified as a local file path or URL.
			 */
			logo: string;

			/**
			 * Controls the navigation mode.
			 */
			navigationMode: number;

			/**
			 * Callback function called when the home icon is clicked.
			 */
			onHomeIconItemSelected: () => any;

			/**
			 * Sets the subtitle of the action bar.
			 */
			subtitle: string;

			/**
			 * Sets the title of the action bar.
			 */
			title: string;

			/**
			 * Sets a view to be used for a custom navigation mode.
			 */
			customView: Titanium.UI.View;

			/**
			 * Hides the action bar if it is currently showing.
			 */
			hide(): void;

			/**
			 * Shows or hides the action bar home icon
			 */
			setDisplayShowHomeEnabled(show: boolean): void;

			/**
			 * Shows or hides the action bar title/subtitle
			 */
			setDisplayShowTitleEnabled(show: boolean): void;

			/**
			 * Shows the action bar if it is currently hidden.
			 */
			show(): void;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.backgroundImage> property.
			 */
			setBackgroundImage(backgroundImage: string): void;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.displayHomeAsUp> property.
			 */
			setDisplayHomeAsUp(displayHomeAsUp: boolean): void;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.homeButtonEnabled> property.
			 */
			setHomeButtonEnabled(homeButtonEnabled: boolean): void;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.icon> property.
			 */
			setIcon(icon: string): void;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.logo> property.
			 */
			setLogo(logo: string): void;

			/**
			 * Gets the value of the <Titanium.Android.ActionBar.navigationMode> property.
			 */
			getNavigationMode(): number;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.navigationMode> property.
			 */
			setNavigationMode(navigationMode: number): void;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.onHomeIconItemSelected> property.
			 */
			setOnHomeIconItemSelected(onHomeIconItemSelected: () => any): void;

			/**
			 * Gets the value of the <Titanium.Android.ActionBar.subtitle> property.
			 */
			getSubtitle(): string;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.subtitle> property.
			 */
			setSubtitle(subtitle: string): void;

			/**
			 * Gets the value of the <Titanium.Android.ActionBar.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.Android.ActionBar.customView> property.
			 */
			getCustomView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.Android.ActionBar.customView> property.
			 */
			setCustomView(customView: any): void;

		}
		/**
		 * The Titanium binding of an Android Activity.
		 */
		interface Activity extends Titanium.Proxy {
			/**
			 * The action bar for this activity.
			 */
			readonly actionBar: Titanium.Android.ActionBar;

			/**
			 * The last `Intent` received by this activity.
			 */
			readonly intent: Titanium.Android.Intent;

			/**
			 * Callback function called when the Android activity is created.
			 */
			onCreate: (param0: any) => any;

			/**
			 * Callback function called to initially create an Android options menu
			 * for this Activity when the user presses the **Menu** button.
			 */
			onCreateOptionsMenu: (param0: any) => any;

			/**
			 * Callback function called when the Android activity is destroyed.
			 */
			onDestroy: (param0: any) => any;

			/**
			 * Callback function called when the Android activity is paused.
			 */
			onPause: (param0: any) => any;

			/**
			 * Callback function called to prepare an options menu for display when the user presses
			 * the **Menu** button.
			 */
			onPrepareOptionsMenu: (param0: any) => any;

			/**
			 * Callback function called when the Android activity is restarted.
			 */
			onRestart: (param0: any) => any;

			/**
			 * Callback function called when the Android activity is resumed.
			 */
			onResume: (param0: any) => any;

			/**
			 * Callback function called when the Android activity is started.
			 */
			onStart: (param0: any) => any;

			/**
			 * Callback function called when the Android activity is stopped.
			 */
			onStop: (param0: any) => any;

			/**
			 * Specifies a specific orientation for this activity.
			 */
			requestedOrientation: number;

			/**
			 * Toolbar instance that serves as ActionBar
			 */
			supportToolbar: Titanium.UI.Toolbar;

			/**
			 * Closes this activity.
			 */
			finish(): void;

			/**
			 * Gets an Android or Application string using the specified Resource ID and optional format arguments.
			 */
			getString(resourceId: number, format: any): string;

			/**
			 * Declares that the option menu has changed and should be recreated.
			 */
			invalidateOptionsMenu(): void;

			/**
			 * Sets the requested Activity orientation.
			 */
			setRequestedOrientation(orientation: number): void;

			/**
			 * Sets the result of this activity using an `Intent`.
			 */
			setResult(resultCode: number, intent?: Titanium.Android.Intent): void;

			/**
			 * Sets a toolbar instance to be used as an ActionBar.
			 */
			setSupportActionBar(toolbar: Titanium.UI.Toolbar): void;

			/**
			 * Starts a new activity, using the passed in `Intent` as the description.
			 */
			startActivity(intent: Titanium.Android.Intent): void;

			/**
			 * The same as `startActivity`, but also accepts a callback function for handling the result of the started Activity.
			 */
			startActivityForResult(intent: Titanium.Android.Intent, callback: (param0: ActivityResult) => any): void;

			/**
			 * Programmatically opens the options menu.
			 */
			openOptionsMenu(): void;

			/**
			 * Broadcast the passed in `Intent` to all `BroadcastReceiver`s.
			 */
			sendBroadcast(intent: Titanium.Android.Intent): void;

			/**
			 * Broadcast the passed in `Intent` to all `BroadcastReceiver`s with an optional permission.
			 */
			sendBroadcastWithPermission(intent: Titanium.Android.Intent, receiverPermission?: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.actionBar> property.
			 */
			getActionBar(): Titanium.Android.ActionBar;

			/**
			 * Gets the value of the <Titanium.Android.Activity.intent> property.
			 */
			getIntent(): Titanium.Android.Intent;

			/**
			 * Gets the value of the <Titanium.Android.Activity.onCreate> property.
			 */
			getOnCreate(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.Activity.onCreate> property.
			 */
			setOnCreate(onCreate: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.onCreateOptionsMenu> property.
			 */
			getOnCreateOptionsMenu(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.Activity.onCreateOptionsMenu> property.
			 */
			setOnCreateOptionsMenu(onCreateOptionsMenu: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.onDestroy> property.
			 */
			getOnDestroy(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.Activity.onDestroy> property.
			 */
			setOnDestroy(onDestroy: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.onPause> property.
			 */
			getOnPause(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.Activity.onPause> property.
			 */
			setOnPause(onPause: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.onPrepareOptionsMenu> property.
			 */
			getOnPrepareOptionsMenu(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.Activity.onPrepareOptionsMenu> property.
			 */
			setOnPrepareOptionsMenu(onPrepareOptionsMenu: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.onRestart> property.
			 */
			getOnRestart(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.Activity.onRestart> property.
			 */
			setOnRestart(onRestart: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.onResume> property.
			 */
			getOnResume(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.Activity.onResume> property.
			 */
			setOnResume(onResume: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.onStart> property.
			 */
			getOnStart(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.Activity.onStart> property.
			 */
			setOnStart(onStart: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.onStop> property.
			 */
			getOnStop(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.Activity.onStop> property.
			 */
			setOnStop(onStop: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.Activity.supportToolbar> property.
			 */
			getSupportToolbar(): Titanium.UI.Toolbar;

			/**
			 * Sets the value of the <Titanium.Android.Activity.supportToolbar> property.
			 */
			setSupportToolbar(supportToolbar: Titanium.UI.Toolbar): void;

		}
		/**
		 * Helper object for generating large-format notifications that include a large image attachment.
		 */
		interface BigPictureStyle extends Titanium.Proxy {
			/**
			 * Override the <Titanium.Android.Notification.largeIcon> when the big notification is shown.
			 */
			bigLargeIcon: number | string;

			/**
			 * Provide the bitmap to be used as the payload for the BigPicture notification.
			 */
			bigPicture: number | string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Overrides <Titanium.Android.Notification.contentTitle> in the big form of the notification. This defaults to the value passed to <Titanium.Android.Notification.contentTitle>.
			 */
			bigContentTitle: string;

			/**
			 * Number of times to retry decoding the bitmap at bigPicture URL.
			 */
			decodeRetries: number;

			/**
			 * Set the first line of text after the detail section in the big form of the notification.
			 */
			summaryText: string;

			/**
			 * Gets the value of the <Titanium.Android.BigPictureStyle.bigLargeIcon> property.
			 */
			getBigLargeIcon(): number | string;

			/**
			 * Sets the value of the <Titanium.Android.BigPictureStyle.bigLargeIcon> property.
			 */
			setBigLargeIcon(bigLargeIcon: number): void;

			/**
			 * Sets the value of the <Titanium.Android.BigPictureStyle.bigLargeIcon> property.
			 */
			setBigLargeIcon(bigLargeIcon: string): void;

			/**
			 * Gets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
			 */
			getBigPicture(): number | string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Sets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
			 */
			setBigPicture(bigPicture: number): void;

			/**
			 * Sets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
			 */
			setBigPicture(bigPicture: string): void;

			/**
			 * Sets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
			 */
			setBigPicture(bigPicture: Titanium.Blob): void;

			/**
			 * Sets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
			 */
			setBigPicture(bigPicture: Titanium.Filesystem.File): void;

			/**
			 * Gets the value of the <Titanium.Android.BigPictureStyle.bigContentTitle> property.
			 */
			getBigContentTitle(): string;

			/**
			 * Sets the value of the <Titanium.Android.BigPictureStyle.bigContentTitle> property.
			 */
			setBigContentTitle(bigContentTitle: string): void;

			/**
			 * Gets the value of the <Titanium.Android.BigPictureStyle.decodeRetries> property.
			 */
			getDecodeRetries(): number;

			/**
			 * Sets the value of the <Titanium.Android.BigPictureStyle.decodeRetries> property.
			 */
			setDecodeRetries(decodeRetries: number): void;

			/**
			 * Gets the value of the <Titanium.Android.BigPictureStyle.summaryText> property.
			 */
			getSummaryText(): string;

			/**
			 * Sets the value of the <Titanium.Android.BigPictureStyle.summaryText> property.
			 */
			setSummaryText(summaryText: string): void;

		}
		/**
		 * Helper object for generating large-format notifications that include a lot of text.
		 */
		interface BigTextStyle extends Titanium.Proxy {
			/**
			 * Sets the longer text to be displayed in the big form of the notification in place of the content text.
			 */
			bigText: string;

			/**
			 * Overrides <Titanium.Android.Notification.contentTitle> in the big form of the notification. This defaults to the value passed to <Titanium.Android.Notification.contentTitle>.
			 */
			bigContentTitle: string;

			/**
			 * Set the first line of text after the detail section in the big form of the notification.
			 */
			summaryText: string;

			/**
			 * Gets the value of the <Titanium.Android.BigTextStyle.bigText> property.
			 */
			getBigText(): string;

			/**
			 * Sets the value of the <Titanium.Android.BigTextStyle.bigText> property.
			 */
			setBigText(bigText: string): void;

			/**
			 * Gets the value of the <Titanium.Android.BigTextStyle.bigContentTitle> property.
			 */
			getBigContentTitle(): string;

			/**
			 * Sets the value of the <Titanium.Android.BigTextStyle.bigContentTitle> property.
			 */
			setBigContentTitle(bigContentTitle: string): void;

			/**
			 * Gets the value of the <Titanium.Android.BigTextStyle.summaryText> property.
			 */
			getSummaryText(): string;

			/**
			 * Sets the value of the <Titanium.Android.BigTextStyle.summaryText> property.
			 */
			setSummaryText(summaryText: string): void;

		}
		/**
		 * Monitor and handle Android system broadcasts.
		 */
		interface BroadcastReceiver extends Titanium.Proxy {
			/**
			 * The function called when a broadcast is received.
			 */
			onReceived: (param0: any) => any;

			/**
			 * URL of the JavaScript file to handle the broadcast.
			 */
			url: string;

			/**
			 * Gets the value of the <Titanium.Android.BroadcastReceiver.onReceived> property.
			 */
			getOnReceived(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Android.BroadcastReceiver.onReceived> property.
			 */
			setOnReceived(onReceived: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Android.BroadcastReceiver.url> property.
			 */
			getUrl(): string;

			/**
			 * Sets the value of the <Titanium.Android.BroadcastReceiver.url> property.
			 */
			setUrl(url: string): void;

		}
		/**
		 * Message objects passed between Android application components.
		 */
		interface Intent extends Titanium.Proxy {
			/**
			 * The action associated with this intent.
			 */
			action: string;

			/**
			 * The Java class name of the activity associated with this intent
			 * ([packageName](Titanium.Android.Intent.packageName) must also be set).
			 */
			className: string;

			/**
			 * The Intent's Data URI.
			 */
			readonly data: string;

			/**
			 * Intent flags.
			 */
			flags: number;

			/**
			 * The fully-qualified Java package name of the activity.
			 */
			packageName: string;

			/**
			 * The MIME type for this Intent.
			 */
			readonly type: string;

			/**
			 * The URL to a Titanium JavaScript Activity.
			 */
			url: string;

			/**
			 * Adds a category to this Intent.
			 */
			addCategory(name: string): void;

			/**
			 * Adds to the existing flags on the `Intent`.
			 */
			addFlags(flags: number): void;

			/**
			 * Get a <Titanium.Blob> property from this `Intent`.
			 */
			getBlobExtra(name: string): Titanium.Blob;

			/**
			 * Get a boolean property from this Intent.
			 */
			getBooleanExtra(name: string, defaultValue: boolean): boolean;

			/**
			 * Get the Data URI from this `Intent`.
			 */
			getData(): string;

			/**
			 * Get a double property from this `Intent`.
			 */
			getDoubleExtra(name: string, defaultValue: number): number;

			/**
			 * Get an integer property from this `Intent`.
			 */
			getIntExtra(name: string, defaultValue: number): number;

			/**
			 * Get a long property from this `Intent`.
			 */
			getLongExtra(name: string, defaultValue: number): number;

			/**
			 * Get a string property from this `Intent`.
			 */
			getStringExtra(name: string): string;

			/**
			 * Returns `true` if this `Intent` has the specified property.
			 */
			hasExtra(name: string): boolean;

			/**
			 * Puts an extra property on this `Intent`.
			 */
			putExtra(name: string, value: any): void;

			/**
			 * Put a URI property on this `Intent` (useful for <Titanium.Android.EXTRA_STREAM>).
			 */
			putExtraUri(name: string, value: any): void;

			/**
			 * Gets the value of the <Titanium.Android.Intent.action> property.
			 */
			getAction(): string;

			/**
			 * Sets the value of the <Titanium.Android.Intent.action> property.
			 */
			setAction(action: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Intent.className> property.
			 */
			getClassName(): string;

			/**
			 * Sets the value of the <Titanium.Android.Intent.className> property.
			 */
			setClassName(className: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Intent.flags> property.
			 */
			getFlags(): number;

			/**
			 * Sets the value of the <Titanium.Android.Intent.flags> property.
			 */
			setFlags(flags: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Intent.packageName> property.
			 */
			getPackageName(): string;

			/**
			 * Sets the value of the <Titanium.Android.Intent.packageName> property.
			 */
			setPackageName(packageName: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Intent.type> property.
			 */
			getType(): string;

			/**
			 * Gets the value of the <Titanium.Android.Intent.url> property.
			 */
			getUrl(): string;

			/**
			 * Sets the value of the <Titanium.Android.Intent.url> property.
			 */
			setUrl(url: string): void;

		}
		/**
		 * The Titanium binding of an Android Options Menu.
		 */
		interface Menu extends Titanium.Proxy {
			/**
			 * Array of menu items in this menu.
			 */
			readonly items: Titanium.Android.MenuItem[];

			/**
			 * Creates a <Titanium.Android.MenuItem> from the passed creation options.
			 */
			add(options: any): Titanium.Android.MenuItem;

			/**
			 * Clears all items from this menu.
			 */
			clear(): void;

			/**
			 * Closes the menu, if visible.
			 */
			close(): void;

			/**
			 * Locates a [MenuItem](Titanium.Android.MenuItem) in this menu, by item ID or reference.
			 */
			findItem(item: number): Titanium.Android.MenuItem;

			/**
			 * Locates a [MenuItem](Titanium.Android.MenuItem) in this menu, by item ID or reference.
			 */
			findItem(item: Titanium.Android.MenuItem): Titanium.Android.MenuItem;

			/**
			 * Returns the [MenuItem](Titanium.Android.MenuItem) at a specific index.
			 */
			getItem(index: number): Titanium.Android.MenuItem;

			/**
			 * Returns `true` if this menu has visible items.
			 */
			hasVisibleItems(): boolean;

			/**
			 * Removes all menu items with the specified
			 * [groupId](Titanium.Android.MenuItem.groupId).
			 */
			removeGroup(groupId: number): void;

			/**
			 * Removes a specific [MenuItem](Titanium.Android.MenuItem) identified by its
			 * [itemId](Titanium.Android.MenuItem.itemId).
			 */
			removeItem(itemId: number): void;

			/**
			 * Enables or disables a group of menu items identified by a
			 * [groupId](Titanium.Android.MenuItem.groupId).
			 */
			setGroupEnabled(groupId: number, enabled: boolean): void;

			/**
			 * Shows or hides a group of menu items identified by a
			 * [groupId](Titanium.Android.MenuItem.groupId).
			 */
			setGroupVisible(groupId: number, visible: boolean): void;

			/**
			 * Number of items in this menu.
			 */
			size(): number;

			/**
			 * Gets the value of the <Titanium.Android.Menu.items> property.
			 */
			getItems(): Titanium.Android.MenuItem[];

		}
		/**
		 * The Titanium binding of an Android menu item.
		 */
		interface MenuItem extends Titanium.Proxy {
			/**
			 * Custom view that replaces the default menu item button.
			 */
			actionView: Titanium.UI.View;

			/**
			 * True if this menu item's action view has been expanded.
			 */
			readonly actionViewExpanded: boolean;

			/**
			 * Determines if the item can be checked.
			 */
			checkable: boolean;

			/**
			 * Determines if the item is checked.
			 */
			checked: boolean;

			/**
			 * Determines if the item is enabled.
			 */
			enabled: boolean;

			/**
			 * Group ID for this item.
			 */
			readonly groupId: number;

			/**
			 * Icon to display for the this menu item.
			 */
			icon: number | string;

			/**
			 * Item ID for this item.
			 */
			readonly itemId: number;

			/**
			 * Integer used for controlling the category and sort order for menu items.
			 */
			readonly order: number;

			/**
			 * A set of flags that controls how this item appears in the action bar.
			 */
			showAsAction: number;

			/**
			 * Title of the item.
			 */
			title: string;

			/**
			 * Shortened version of the item's title.
			 */
			titleCondensed: string;

			/**
			 * Determines whether the menu item is visible.
			 */
			visible: boolean;

			/**
			 * Collapse the action view associated with this menu item.
			 */
			collapseActionView(): void;

			/**
			 * Expand the action view associated with this menu item.
			 */
			expandActionView(): void;

			/**
			 * Returns the [actionViewExpanded](Titanium.Android.MenuItem.actionViewExpanded) state of the menu item.
			 */
			isActionViewExpanded(): boolean;

			/**
			 * Returns the [checkable](Titanium.Android.MenuItem.checkable) state of the menu item.
			 */
			isCheckable(): boolean;

			/**
			 * Returns the [checked](Titanium.Android.MenuItem.checked) state of the menu item.
			 */
			isChecked(): boolean;

			/**
			 * Returns the [enabled](Titanium.Android.MenuItem.enabled) state of the menu item.
			 */
			isEnabled(): boolean;

			/**
			 * Returns the [visible](Titanium.Android.MenuItem.visible) state of the menu item.
			 */
			isVisible(): boolean;

			/**
			 * Sets the [checkable](Titanium.Android.MenuItem.checkable) state of the menu item.
			 */
			setCheckable(checkable: boolean): void;

			/**
			 * Sets the [checked](Titanium.Android.MenuItem.checked) state of the menu item.
			 */
			setChecked(enabled: boolean): void;

			/**
			 * Sets the [enabled](Titanium.Android.MenuItem.enabled) state of the menu item.
			 */
			setEnabled(enabled: boolean): void;

			/**
			 * Sets the [visible](Titanium.Android.MenuItem.visible) state of the menu item.
			 */
			setVisible(visible: boolean): void;

			/**
			 * Gets the value of the <Titanium.Android.MenuItem.actionView> property.
			 */
			getActionView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.Android.MenuItem.actionView> property.
			 */
			setActionView(actionView: any): void;

			/**
			 * Gets the value of the <Titanium.Android.MenuItem.groupId> property.
			 */
			getGroupId(): number;

			/**
			 * Sets the value of the <Titanium.Android.MenuItem.icon> property.
			 */
			setIcon(icon: number): void;

			/**
			 * Sets the value of the <Titanium.Android.MenuItem.icon> property.
			 */
			setIcon(icon: string): void;

			/**
			 * Gets the value of the <Titanium.Android.MenuItem.itemId> property.
			 */
			getItemId(): number;

			/**
			 * Gets the value of the <Titanium.Android.MenuItem.order> property.
			 */
			getOrder(): number;

			/**
			 * Sets the value of the <Titanium.Android.MenuItem.showAsAction> property.
			 */
			setShowAsAction(showAsAction: number): void;

			/**
			 * Gets the value of the <Titanium.Android.MenuItem.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.Android.MenuItem.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.Android.MenuItem.titleCondensed> property.
			 */
			getTitleCondensed(): string;

			/**
			 * Sets the value of the <Titanium.Android.MenuItem.titleCondensed> property.
			 */
			setTitleCondensed(titleCondensed: string): void;

		}
		/**
		 * UI notifications that can be sent while the application is in the background.
		 */
		interface Notification extends Titanium.Proxy {
			/**
			 * The audio stream type to use when playing the sound.
			 */
			audioStreamType: number;

			/**
			 * Sets the notification's category.
			 */
			category: string;

			/**
			 * The `PendingIntent` to execute when the expanded status entry is clicked.
			 */
			contentIntent: Titanium.Android.PendingIntent;

			/**
			 * Description text of the notification.
			 */
			contentText: string;

			/**
			 * Title of the notification.
			 */
			contentTitle: string;

			/**
			 * Custom layout to display in the notification.
			 */
			contentView: Titanium.Android.RemoteViews;

			/**
			 * Specifies which values should be taken from the defaults.
			 */
			defaults: number;

			/**
			 * The `PendingIntent` to execute when the status entry is deleted by the user with the "Clear All Notifications" button.
			 */
			deleteIntent: Titanium.Android.PendingIntent;

			/**
			 * Set of flags for the notification.
			 */
			flags: number;

			/**
			 * The group key that the notification will belong to.
			 */
			groupKey: string;

			/**
			 * Specifies if this is a group summary notification.
			 */
			groupSummary: boolean;

			/**
			 * Notification icon, specified as an Android resource ID, or a local URL to a density-specific image.
			 */
			icon: number | string;

			/**
			 * Add a large icon to the notification (and the ticker on some devices) specified as an Android resource ID, or a local URL to a density-specific image.
			 */
			largeIcon: number | string;

			/**
			 * Accent color used behind icon.
			 */
			color: string;

			/**
			 * The color for the LED to blink.
			 */
			ledARGB: number;

			/**
			 * The number of milliseconds for the LED to be off while it's flashing.
			 */
			ledOffMS: number;

			/**
			 * The number of milliseconds for the LED to be on while it's flashing.
			 */
			ledOnMS: number;

			/**
			 * The number of events that this notification represents.
			 */
			number: number;

			/**
			 * Sets the priority of the notification.
			 */
			priority: number;

			/**
			 * A URL to the sound to play.
			 */
			sound: string;

			/**
			 * Style object that can apply a rich notification style.
			 */
			style: Titanium.Android.BigTextStyle | Titanium.Android.BigPictureStyle;

			/**
			 * Text to scroll across the screen when this item is added to the status bar.
			 */
			tickerText: string;

			/**
			 * Allows user to conceal private information of the notification on the lockscreen.
			 */
			visibility: number;

			/**
			 * Will wake up the device for the given time (in milliseconds) when the notification is shown.
			 * The application needs to also set the `android.permission.WAKE_LOCK` permission
			 * in the Android manifest section of the `tiapp.xml` file.
			 * <ti:app>
			 *     <android>
			 *         <manifest>
			 *             <uses-permission android:name="android.permission.WAKE_LOCK" />
			 *         </manifest>
			 *     </android>
			 * </ti:app>
			 */
			wakeLock: wakeLockOptions;

			/**
			 * The timestamp for the notification (defaults to the current time).
			 */
			when: Date | number;

			/**
			 * Sets the latest event info using the built-in notification view for this notification.
			 */
			setLatestEventInfo(contentTitle: string, contentText: string, contentIntent: Titanium.Android.PendingIntent): void;

			/**
			 * Set the progress this notification represents.
			 */
			setProgress(max: number, progress: number, indeterminate: boolean): void;

			/**
			 * Add an action button to the notification
			 */
			addAction(icon: number, title: string, intent: Titanium.Android.PendingIntent): void;

			/**
			 * Add an action button to the notification
			 */
			addAction(icon: string, title: string, intent: Titanium.Android.PendingIntent): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.audioStreamType> property.
			 */
			getAudioStreamType(): number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.audioStreamType> property.
			 */
			setAudioStreamType(audioStreamType: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.category> property.
			 */
			getCategory(): string;

			/**
			 * Sets the value of the <Titanium.Android.Notification.category> property.
			 */
			setCategory(category: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.contentIntent> property.
			 */
			getContentIntent(): Titanium.Android.PendingIntent;

			/**
			 * Sets the value of the <Titanium.Android.Notification.contentIntent> property.
			 */
			setContentIntent(contentIntent: Titanium.Android.PendingIntent): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.contentText> property.
			 */
			getContentText(): string;

			/**
			 * Sets the value of the <Titanium.Android.Notification.contentText> property.
			 */
			setContentText(contentText: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.contentTitle> property.
			 */
			getContentTitle(): string;

			/**
			 * Sets the value of the <Titanium.Android.Notification.contentTitle> property.
			 */
			setContentTitle(contentTitle: string): void;

			/**
			 * Sets the value of the <Titanium.Android.Notification.contentView> property.
			 */
			setContentView(contentView: Titanium.Android.RemoteViews): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.defaults> property.
			 */
			getDefaults(): number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.defaults> property.
			 */
			setDefaults(defaults: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.deleteIntent> property.
			 */
			getDeleteIntent(): Titanium.Android.PendingIntent;

			/**
			 * Sets the value of the <Titanium.Android.Notification.deleteIntent> property.
			 */
			setDeleteIntent(deleteIntent: Titanium.Android.PendingIntent): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.flags> property.
			 */
			getFlags(): number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.flags> property.
			 */
			setFlags(flags: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.groupKey> property.
			 */
			getGroupKey(): string;

			/**
			 * Sets the value of the <Titanium.Android.Notification.groupKey> property.
			 */
			setGroupKey(groupKey: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.groupSummary> property.
			 */
			getGroupSummary(): boolean;

			/**
			 * Sets the value of the <Titanium.Android.Notification.groupSummary> property.
			 */
			setGroupSummary(groupSummary: boolean): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.icon> property.
			 */
			getIcon(): number | string;

			/**
			 * Sets the value of the <Titanium.Android.Notification.icon> property.
			 */
			setIcon(icon: number): void;

			/**
			 * Sets the value of the <Titanium.Android.Notification.icon> property.
			 */
			setIcon(icon: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.largeIcon> property.
			 */
			getLargeIcon(): number | string;

			/**
			 * Sets the value of the <Titanium.Android.Notification.largeIcon> property.
			 */
			setLargeIcon(largeIcon: number): void;

			/**
			 * Sets the value of the <Titanium.Android.Notification.largeIcon> property.
			 */
			setLargeIcon(largeIcon: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.color> property.
			 */
			getColor(): string;

			/**
			 * Sets the value of the <Titanium.Android.Notification.color> property.
			 */
			setColor(color: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.ledARGB> property.
			 */
			getLedARGB(): number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.ledARGB> property.
			 */
			setLedARGB(ledARGB: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.ledOffMS> property.
			 */
			getLedOffMS(): number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.ledOffMS> property.
			 */
			setLedOffMS(ledOffMS: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.ledOnMS> property.
			 */
			getLedOnMS(): number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.ledOnMS> property.
			 */
			setLedOnMS(ledOnMS: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.number> property.
			 */
			getNumber(): number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.number> property.
			 */
			setNumber(number: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.priority> property.
			 */
			getPriority(): number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.priority> property.
			 */
			setPriority(priority: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.sound> property.
			 */
			getSound(): string;

			/**
			 * Sets the value of the <Titanium.Android.Notification.sound> property.
			 */
			setSound(sound: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.style> property.
			 */
			getStyle(): Titanium.Android.BigTextStyle | Titanium.Android.BigPictureStyle;

			/**
			 * Sets the value of the <Titanium.Android.Notification.style> property.
			 */
			setStyle(style: Titanium.Android.BigTextStyle): void;

			/**
			 * Sets the value of the <Titanium.Android.Notification.style> property.
			 */
			setStyle(style: Titanium.Android.BigPictureStyle): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.tickerText> property.
			 */
			getTickerText(): string;

			/**
			 * Sets the value of the <Titanium.Android.Notification.tickerText> property.
			 */
			setTickerText(tickerText: string): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.visibility> property.
			 */
			getVisibility(): number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.visibility> property.
			 */
			setVisibility(visibility: number): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.wakeLock> property.
			 */
			getWakeLock(): wakeLockOptions;

			/**
			 * Sets the value of the <Titanium.Android.Notification.wakeLock> property.
			 */
			setWakeLock(wakeLock: wakeLockOptions): void;

			/**
			 * Gets the value of the <Titanium.Android.Notification.when> property.
			 */
			getWhen(): Date | number;

			/**
			 * Sets the value of the <Titanium.Android.Notification.when> property.
			 */
			setWhen(when: Date): void;

			/**
			 * Sets the value of the <Titanium.Android.Notification.when> property.
			 */
			setWhen(when: number): void;

		}
		/**
		 * Module for notification channels.
		 */
		interface NotificationChannel extends Titanium.Proxy {
			/**
			 * Whether or not notifications posted to this channel can interrupt the user.
			 */
			bypassDnd: boolean;

			/**
			 * User visible description of this channel.
			 */
			description: string;

			/**
			 * Whether notifications posted to this channel should display notification lights
			 */
			enableLights: boolean;

			/**
			 * Whether notification posted to this channel should vibrate.
			 */
			enableVibration: boolean;

			/**
			 * Group id this channel belongs to.
			 */
			groupId: string;

			/**
			 * The audio stream type to use when playing the sound.
			 */
			importance: number;

			/**
			 * The channel id specified for the notification channel.
			 */
			id: string;

			/**
			 * The notification light color for notifications posted to this channel.
			 */
			lightColor: number;

			/**
			 * Whether or not notifications posted to this channel are shown on the lockscreen in full or redacted form.
			 */
			lockscreenVisibility: number;

			/**
			 * Whether notifications posted to this channel can appear as application icon badges in a Launcher.
			 */
			showBadge: boolean;

			/**
			 * A URL to the sound to play.
			 */
			sound: string;

			/**
			 * The vibration pattern for notifications posted to this channel.
			 */
			vibratePattern: number[];

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.bypassDnd> property.
			 */
			getBypassDnd(): boolean;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.bypassDnd> property.
			 */
			setBypassDnd(bypassDnd: boolean): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.description> property.
			 */
			getDescription(): string;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.description> property.
			 */
			setDescription(description: string): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.enableLights> property.
			 */
			getEnableLights(): boolean;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.enableLights> property.
			 */
			setEnableLights(enableLights: boolean): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.enableVibration> property.
			 */
			getEnableVibration(): boolean;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.enableVibration> property.
			 */
			setEnableVibration(enableVibration: boolean): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.groupId> property.
			 */
			getGroupId(): string;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.groupId> property.
			 */
			setGroupId(groupId: string): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.importance> property.
			 */
			getImportance(): number;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.importance> property.
			 */
			setImportance(importance: number): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.id> property.
			 */
			getId(): string;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.id> property.
			 */
			setId(id: string): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.lightColor> property.
			 */
			getLightColor(): number;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.lightColor> property.
			 */
			setLightColor(lightColor: number): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.lockscreenVisibility> property.
			 */
			getLockscreenVisibility(): number;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.lockscreenVisibility> property.
			 */
			setLockscreenVisibility(lockscreenVisibility: number): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.showBadge> property.
			 */
			getShowBadge(): boolean;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.showBadge> property.
			 */
			setShowBadge(showBadge: boolean): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.sound> property.
			 */
			getSound(): string;

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.sound> property.
			 */
			setSound(sound: string): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationChannel.vibratePattern> property.
			 */
			getVibratePattern(): number[];

			/**
			 * Sets the value of the <Titanium.Android.NotificationChannel.vibratePattern> property.
			 */
			setVibratePattern(vibratePattern: ReadonlyArray<number>): void;

		}
		/**
		 * The Titanium binding of an Android `PendingIntent`.
		 */
		interface PendingIntent extends Titanium.Proxy {
			/**
			 * Flags used for creating the Pending Intent.
			 */
			flags: number;

			/**
			 * The intent data to pass to the [Activity](Titanium.Android.Activity) launched by this `PendingIntent`.
			 */
			intent: Titanium.Android.Intent;

			/**
			 * If this property is true, flag <Titanium.Android.FLAG_UPDATE_CURRENT> will be
			 * appended to `flags` automatically. Default value is true.
			 */
			updateCurrentIntent: boolean;

			/**
			 * Gets the value of the <Titanium.Android.PendingIntent.flags> property.
			 */
			getFlags(): number;

			/**
			 * Sets the value of the <Titanium.Android.PendingIntent.flags> property.
			 */
			setFlags(flags: number): void;

			/**
			 * Gets the value of the <Titanium.Android.PendingIntent.intent> property.
			 */
			getIntent(): Titanium.Android.Intent;

			/**
			 * Sets the value of the <Titanium.Android.PendingIntent.intent> property.
			 */
			setIntent(intent: Titanium.Android.Intent): void;

			/**
			 * Gets the value of the <Titanium.Android.PendingIntent.updateCurrentIntent> property.
			 */
			getUpdateCurrentIntent(): boolean;

			/**
			 * Sets the value of the <Titanium.Android.PendingIntent.updateCurrentIntent> property.
			 */
			setUpdateCurrentIntent(updateCurrentIntent: boolean): void;

		}
		/**
		 * Android service for creating custom quick settings tiles and handling user's interaction with them.
		 */
		interface QuickSettingsService extends Titanium.Proxy {
			/**
			 * The intent used to start or bind to the Service.
			 */
			readonly intent: Titanium.Android.Intent;

			/**
			 * A service can be started more than once -- this number (based on an incrementing integer)
			 * indicates which "start number" in the sequence the current service instance is.
			 */
			readonly serviceInstanceId: number;

			/**
			 * Puts the service into the "background" state and removes its foreground notification.
			 */
			foregroundCancel(): void;

			/**
			 * Puts the service into the "foreground" state and displays a notification.
			 */
			foregroundNotify(id: number, notification: Titanium.Android.Notification): void;

			/**
			 * Starts the Service.
			 */
			start(): void;

			/**
			 * Stops this running instance of the Service.
			 */
			stop(): void;

			/**
			 * Applies current tile's properties.
			 */
			updateTile(): void;

			/**
			 * Changes the Tile's icon.
			 */
			setIcon(icon: string): void;

			/**
			 * Changes the Tile's icon.
			 */
			setIcon(icon: Titanium.Blob): void;

			/**
			 * Changes the Tile's icon.
			 */
			setIcon(icon: Titanium.Filesystem.File): void;

			/**
			 * Sets the state of the Tile.
			 */
			setState(state: number): void;

			/**
			 * Changes the Tile's label.
			 */
			setLabel(label: string): void;

			/**
			 * Returns the Tile's current icon.
			 */
			getIcon(): string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Returns the Tile's current state.
			 */
			getState(): number;

			/**
			 * Returns the Tile's current label.
			 */
			getLabel(): string;

			/**
			 * Returns 'true' if the device is currently locked, 'false' otherwise.
			 */
			isLocked(): boolean;

			/**
			 * Returns 'true' if the device is in secure state, 'false' otherwise.
			 */
			isSecure(): boolean;

			/**
			 * Opens an Alert dialog.
			 */
			showDialog(options: showParams): void;

			/**
			 * Colapses the quick settings menu and starts an activity for the passed Intent.
			 */
			startActivityAndCollapse(intent: Titanium.Android.Intent): void;

			/**
			 * Prompts the user to unlock the device and runs the JS code.
			 */
			unlockAndRun(jsCode: string): void;

			/**
			 * Gets the value of the <Titanium.Android.QuickSettingsService.intent> property.
			 */
			getIntent(): Titanium.Android.Intent;

			/**
			 * Gets the value of the <Titanium.Android.QuickSettingsService.serviceInstanceId> property.
			 */
			getServiceInstanceId(): number;

		}
		/**
		 * The Titanium binding of [Android RemoteViews](https://developer.android.com/reference/android/widget/RemoteViews.html).
		 */
		interface RemoteViews extends Titanium.Proxy {
			/**
			 * Android layout resource ID for the view to display. Required.
			 */
			layoutId: number;

			/**
			 * Package name that the resource ID lives in. Optional.
			 */
			packageName: string;

			/**
			 * Calls a method taking a single `boolean` argument on a view in the remote view
			 * hierarchy.  See Android's documentation for
			 * [setBoolean](https://developer.android.com/reference/android/widget/RemoteViews.html#setBoolean(int, java.lang.String, boolean)).
			 */
			setBoolean(viewId: number, methodName: string, value: boolean): void;

			/**
			 * Sets the base time, format string, and started flag for a chronometer
			 * in the remote view hierarchy.
			 */
			setChronometer(viewId: number, base: Date, format: string, started: boolean): void;

			/**
			 * Calls a method taking a single `double` argument on a view in the remote view
			 * hierarchy.
			 */
			setDouble(viewId: number, methodName: string, value: number): void;

			/**
			 * Sets the image for an image view in the remote view hierarchy using an Android drawable resource.
			 */
			setImageViewResource(viewId: number, srcId: number): void;

			/**
			 * Sets the image for an image view in the remote view hierarchy using a URI.
			 */
			setImageViewUri(viewId: number, uri: string): void;

			/**
			 * Calls a method taking a single `int` argument on a view in the remote view hierarchy.
			 */
			setInt(viewId: number, methodName: string, value: number): void;

			/**
			 * Launches a <Titanium.Android.PendingIntent> when the specified view is clicked.
			 */
			setOnClickPendingIntent(viewId: number, pendingIntent: Titanium.Android.PendingIntent): void;

			/**
			 * Sets the progress, max value, and indeterminate flag of a progress bar in the
			 * remote view hierarchy.
			 */
			setProgressBar(viewId: number, max: number, progress: number, indeterminate: boolean): void;

			/**
			 * Calls a method taking a single String argument on a view in the remote view
			 * hierarchy.
			 */
			setString(viewId: number, methodName: string, value: string): void;

			/**
			 * Sets the text color of a view in the remote view hierarchy.
			 */
			setTextColor(viewId: number, color: number): void;

			/**
			 * Sets the text of a text view in the remote view hierarchy.
			 */
			setTextViewText(viewId: number, text: string): void;

			/**
			 * Calls a method taking one URI on a view in the remote view hierarchy.
			 */
			setUri(viewId: number, methodName: string, value: string): void;

			/**
			 * Sets the visibility of a view in the remote view hierarchy.
			 */
			setViewVisibility(viewId: number, visibility: number): void;

			/**
			 * Gets the value of the <Titanium.Android.RemoteViews.layoutId> property.
			 */
			getLayoutId(): number;

			/**
			 * Sets the value of the <Titanium.Android.RemoteViews.layoutId> property.
			 */
			setLayoutId(layoutId: number): void;

			/**
			 * Gets the value of the <Titanium.Android.RemoteViews.packageName> property.
			 */
			getPackageName(): string;

			/**
			 * Sets the value of the <Titanium.Android.RemoteViews.packageName> property.
			 */
			setPackageName(packageName: string): void;

		}
		/**
		 * Android application component that executes in the background.
		 */
		interface Service extends Titanium.Proxy {
			/**
			 * The intent used to start or bind to the Service.
			 */
			readonly intent: Titanium.Android.Intent;

			/**
			 * A service can be started more than once -- this number (based on an incrementing integer)
			 * indicates which "start number" in the sequence the current service instance is.
			 */
			readonly serviceInstanceId: number;

			/**
			 * Puts the service into the "background" state and removes its foreground notification.
			 */
			foregroundCancel(): void;

			/**
			 * Puts the service into the "foreground" state and displays a notification.
			 */
			foregroundNotify(id: number, notification: Titanium.Android.Notification): void;

			/**
			 * Starts the Service.
			 */
			start(): void;

			/**
			 * Stops this running instance of the Service.
			 */
			stop(): void;

			/**
			 * Gets the value of the <Titanium.Android.Service.intent> property.
			 */
			getIntent(): Titanium.Android.Intent;

			/**
			 * Gets the value of the <Titanium.Android.Service.serviceInstanceId> property.
			 */
			getServiceInstanceId(): number;

		}

		/**
		 * The Android.Calendar module provides proxies and methods for accessing the native Android
		 * calendar functionality.
		 */
		namespace Calendar {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Reminder alert delivery method.
			 */
			const METHOD_ALERT: number;

			/**
			 * Reminder default delivery method.
			 */
			const METHOD_DEFAULT: number;

			/**
			 * Reminder email delivery method.
			 */
			const METHOD_EMAIL: number;

			/**
			 * Reminder SMS delivery method.
			 */
			const METHOD_SMS: number;

			/**
			 * Alert dismissed state.
			 */
			const STATE_DISMISSED: number;

			/**
			 * Alert fired state.
			 */
			const STATE_FIRED: number;

			/**
			 * Alert scheduled status.
			 */
			const STATE_SCHEDULED: number;

			/**
			 * Event canceled status.
			 */
			const STATUS_CANCELED: number;

			/**
			 * Event confirmed status.
			 */
			const STATUS_CONFIRMED: number;

			/**
			 * Event tentative status.
			 */
			const STATUS_TENTATIVE: number;

			/**
			 * Event confidential visibility.
			 */
			const VISIBILITY_CONFIDENTIAL: number;

			/**
			 * Event default visibility.
			 */
			const VISIBILITY_DEFAULT: number;

			/**
			 * Event private visibility.
			 */
			const VISIBILITY_PRIVATE: number;

			/**
			 * Event public visibility.
			 */
			const VISIBILITY_PUBLIC: number;

			/**
			 * All alerts in selected calendars.
			 */
			const allAlerts: Titanium.Android.Calendar.Alert[];

			/**
			 * All calendars known to the native calendar app.
			 */
			const allCalendars: Titanium.Android.Calendar.Calendar[];

			/**
			 * All calendars selected within the native calendar app, which may be a subset of `allCalendars`.
			 */
			const selectableCalendars: Titanium.Android.Calendar.Calendar[];

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Gets the calendar with the specified identifier.
			 */
			function getCalendarById(id: number): Titanium.Android.Calendar.Calendar;

			/**
			 * Gets the value of the <Titanium.Android.Calendar.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.Android.Calendar.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.Android.Calendar.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.Android.Calendar.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.Android.Calendar.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.Android.Calendar.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

			/**
			 * Gets the value of the <Titanium.Android.Calendar.allAlerts> property.
			 */
			function getAllAlerts(): Titanium.Android.Calendar.Alert[];

			/**
			 * Gets the value of the <Titanium.Android.Calendar.allCalendars> property.
			 */
			function getAllCalendars(): Titanium.Android.Calendar.Calendar[];

			/**
			 * Gets the value of the <Titanium.Android.Calendar.selectableCalendars> property.
			 */
			function getSelectableCalendars(): Titanium.Android.Calendar.Calendar[];

			/**
			 * An object that represents a single alert for an event in an Android calendar.
			 */
			interface Alert extends Titanium.Proxy {
				/**
				 * Date/time at which this alert alarm is set to trigger.
				 */
				readonly alarmTime: Date;

				/**
				 * Start date/time for the corresponding event.
				 */
				readonly begin: Date;

				/**
				 * End date/time for the corresponding event.
				 */
				readonly end: Date;

				/**
				 * Identifier of the event for which this alert is set.
				 */
				readonly eventId: number;

				/**
				 * Identifier of this alert.
				 */
				readonly id: string;

				/**
				 * Reminder notice period in minutes, that determines how long prior to the event this alert
				 * should trigger.
				 */
				readonly minutes: number;

				/**
				 * The current state of the alert.
				 */
				readonly state: number;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Alert.alarmTime> property.
				 */
				getAlarmTime(): Date;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Alert.begin> property.
				 */
				getBegin(): Date;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Alert.end> property.
				 */
				getEnd(): Date;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Alert.eventId> property.
				 */
				getEventId(): number;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Alert.id> property.
				 */
				getId(): string;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Alert.minutes> property.
				 */
				getMinutes(): number;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Alert.state> property.
				 */
				getState(): number;

			}
			/**
			 * An object that represents a single calendar on Android.
			 */
			interface Calendar extends Titanium.Proxy {
				/**
				 * Indicates whether this calendar is hidden.
				 */
				readonly hidden: boolean;

				/**
				 * Identifier of this calendar.
				 */
				readonly id: string;

				/**
				 * Display name of this calendar.
				 */
				readonly name: string;

				/**
				 * Indicates whether the calendar is selected.
				 */
				readonly selected: boolean;

				/**
				 * Creates an event in this calendar.
				 */
				createEvent(properties: any): Titanium.Android.Calendar.Event;

				/**
				 * Gets the event with the specified identifier.
				 */
				getEventById(id: number): Titanium.Android.Calendar.Event;

				/**
				 * Gets events that occur between two dates.
				 */
				getEventsBetweenDates(date1: Date, date2: Date): Titanium.Android.Calendar.Event[];

				/**
				 * Gets events that occur on a specified date.
				 */
				getEventsInDate(year: number, month: number, day: number): Titanium.Android.Calendar.Event[];

				/**
				 * Gets events that occur during a specified month.
				 */
				getEventsInMonth(year: number, month: number): Titanium.Android.Calendar.Event[];

				/**
				 * Gets all events that occur during a specified year.
				 */
				getEventsInYear(year: number): Titanium.Android.Calendar.Event[];

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Calendar.hidden> property.
				 */
				getHidden(): boolean;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Calendar.id> property.
				 */
				getId(): string;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Calendar.name> property.
				 */
				getName(): string;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Calendar.selected> property.
				 */
				getSelected(): boolean;

			}
			/**
			 * An object that represents a single event in an Android calendar.
			 */
			interface Event extends Titanium.Proxy {
				/**
				 * Existing alerts for this event.
				 */
				readonly alerts: Titanium.Android.Calendar.Alert[];

				/**
				 * Indicates whether this event is all day.
				 */
				readonly allDay: boolean;

				/**
				 * Start date/time of this event.
				 */
				readonly begin: Date;

				/**
				 * Description of this event.
				 */
				readonly description: string;

				/**
				 * End date/time of this event.
				 */
				readonly end: Date;

				/**
				 * Extended properties of this event.
				 */
				readonly extendedProperties: any;

				/**
				 * Indicates whether an alarm is scheduled for this event.
				 */
				readonly hasAlarm: boolean;

				/**
				 * Indicates whether [extendedProperties](Titanium.Android.Calendar.Event.extendedProperties)
				 * exists for this event.
				 */
				readonly hasExtendedProperties: boolean;

				/**
				 * Identifier of this event.
				 */
				readonly id: string;

				/**
				 * Location of this event.
				 */
				readonly location: string;

				/**
				 * Existing reminders for this event.
				 */
				readonly reminders: Titanium.Android.Calendar.Reminder[];

				/**
				 * Status of this event.
				 */
				readonly status: number;

				/**
				 * Title of this event.
				 */
				readonly title: string;

				/**
				 * Visibility of this event.
				 */
				readonly visibility: number;

				/**
				 * Creates an alert for this event.
				 */
				createAlert(data: any): Titanium.Android.Calendar.Alert;

				/**
				 * Creates a reminder for this event.
				 */
				createReminder(data: any): Titanium.Android.Calendar.Reminder;

				/**
				 * Gets the value of the specified extended property.
				 */
				getExtendedProperty(name: string): string;

				/**
				 * Sets the value of the specified extended property.
				 */
				setExtendedProperty(name: string, value: string): void;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.alerts> property.
				 */
				getAlerts(): Titanium.Android.Calendar.Alert[];

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.allDay> property.
				 */
				getAllDay(): boolean;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.begin> property.
				 */
				getBegin(): Date;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.description> property.
				 */
				getDescription(): string;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.end> property.
				 */
				getEnd(): Date;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.extendedProperties> property.
				 */
				getExtendedProperties(): any;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.hasAlarm> property.
				 */
				getHasAlarm(): boolean;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.hasExtendedProperties> property.
				 */
				getHasExtendedProperties(): boolean;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.id> property.
				 */
				getId(): string;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.location> property.
				 */
				getLocation(): string;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.reminders> property.
				 */
				getReminders(): Titanium.Android.Calendar.Reminder[];

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.status> property.
				 */
				getStatus(): number;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.title> property.
				 */
				getTitle(): string;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Event.visibility> property.
				 */
				getVisibility(): number;

			}
			/**
			 * An object that represents a single reminder for an event in an Android calendar.
			 */
			interface Reminder extends Titanium.Proxy {
				/**
				 * Identifier of this reminder.
				 */
				readonly id: string;

				/**
				 * Method by which this reminder will be delivered.
				 */
				readonly method: number;

				/**
				 * Reminder notice period in minutes, that determines how long prior to the event this reminder
				 * should trigger.
				 */
				readonly minutes: number;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Reminder.id> property.
				 */
				getId(): string;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Reminder.method> property.
				 */
				getMethod(): number;

				/**
				 * Gets the value of the <Titanium.Android.Calendar.Reminder.minutes> property.
				 */
				getMinutes(): number;

			}
		}

		/**
		 * Module for managing notifications.
		 */
		namespace NotificationManager {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Use <Titanium.Android.DEFAULT_ALL> instead.
			 */
			const DEFAULT_ALL: number;

			/**
			 * Use <Titanium.Android.DEFAULT_LIGHTS> instead.
			 */
			const DEFAULT_LIGHTS: number;

			/**
			 * Use <Titanium.Android.DEFAULT_SOUND> instead.
			 */
			const DEFAULT_SOUND: number;

			/**
			 * Use <Titanium.Android.DEFAULT_VIBRATE> instead.
			 */
			const DEFAULT_VIBRATE: number;

			/**
			 * Use <Titanium.Android.FLAG_AUTO_CANCEL> instead.
			 */
			const FLAG_AUTO_CANCEL: number;

			/**
			 * Use <Titanium.Android.FLAG_INSISTENT> instead.
			 */
			const FLAG_INSISTENT: number;

			/**
			 * Use <Titanium.Android.FLAG_NO_CLEAR> instead.
			 */
			const FLAG_NO_CLEAR: number;

			/**
			 * Use <Titanium.Android.FLAG_ONGOING_EVENT> instead.
			 */
			const FLAG_ONGOING_EVENT: number;

			/**
			 * Use <Titanium.Android.FLAG_ONLY_ALERT_ONCE> instead.
			 */
			const FLAG_ONLY_ALERT_ONCE: number;

			/**
			 * Use <Titanium.Android.FLAG_SHOW_LIGHTS> instead.
			 */
			const FLAG_SHOW_LIGHTS: number;

			/**
			 * Use <Titanium.Android.STREAM_DEFAULT> instead.
			 */
			const STREAM_DEFAULT: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Cancels a previously displayed notification.
			 */
			function cancel(id: number): void;

			/**
			 * Cancels all previously displayed notifications.
			 */
			function cancelAll(): void;

			/**
			 * Adds a persistent notification to the status bar.
			 */
			function notify(id: number, notification: Titanium.Android.Notification): void;

			/**
			 * Create a notification channel.
			 */
			function createNotificationChannel(parameters: any): Titanium.Android.NotificationChannel;

			/**
			 * Returns whether showing notifications is enabled for the application.
			 */
			function areNotificationsEnabled(): boolean;

			/**
			 * Gets the value of the <Titanium.Android.NotificationManager.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.Android.NotificationManager.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.Android.NotificationManager.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.Android.NotificationManager.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.Android.NotificationManager.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.Android.NotificationManager.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		}

		/**
		 * The Titanium binding of the Android system-wide resources class.
		 */
		namespace R {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Animation resources. See
			 * [R.anim](https://developer.android.com/reference/android/R.anim.html)
			 * in the Android Developer Reference.
			 */
			const anim: any;

			/**
			 * Animator resources. See
			 * [R.animator](https://developer.android.com/reference/android/R.animator.html)
			 * in the Android Developer Reference.
			 */
			const animator: any;

			/**
			 * Array resources. See [R.array](https://developer.android.com/reference/android/R.array.html)
			 * in the Android Developer Reference.
			 */
			const array: any;

			/**
			 * Attribute resources. See
			 * [R.attr](https://developer.android.com/reference/android/R.attr.html)
			 * in the Android Developer Reference.
			 */
			const attr: any;

			/**
			 * Boolean resources. See
			 * [R.bool](https://developer.android.com/reference/android/R.bool.html)
			 * in the Android Developer Reference.
			 */
			const bool: any;

			/**
			 * Color resources. See
			 * [R.color](https://developer.android.com/reference/android/R.color.html)
			 * in the Android Developer Reference.
			 */
			const color: any;

			/**
			 * Dimension resources.  See
			 * [https://developer.android.com/reference/android/R.dimen.html](https://developer.android.com/reference/android/R.dimen.html)
			 * in the Android Developer Reference.
			 */
			const dimen: any;

			/**
			 * Drawable resources. See
			 * [R.drawable](https://developer.android.com/reference/android/R.drawable.html)
			 * in the Android Developer Reference.
			 */
			const drawable: any;

			/**
			 * Fraction resources. See
			 * [R.fraction](https://developer.android.com/reference/android/R.fraction.html)
			 * in the Android Developer Reference.
			 */
			const fraction: any;

			/**
			 * ID resources.  See
			 * [R.id](https://developer.android.com/reference/android/R.id.html)
			 * in the Android Developer Reference.
			 */
			const id: any;

			/**
			 * Integer resources. See
			 * [R.integer](https://developer.android.com/reference/android/R.integer.html)
			 * in the Android Developer Reference.
			 */
			const integer: any;

			/**
			 * Interpolator resources. See
			 * [R.fraction](https://developer.android.com/reference/android/R.interpolator.html)
			 * in the Android Developer Reference.
			 */
			const interpolator: any;

			/**
			 * Layout resources. See
			 * [R.layout](https://developer.android.com/reference/android/R.layout.html)
			 * in the Android Developer Reference.
			 */
			const layout: any;

			/**
			 * Menu resources. See
			 * [R.menu](https://developer.android.com/reference/android/R.menu.html)
			 * in the Android Developer Reference.
			 */
			const menu: any;

			/**
			 * Mipmap resources. See
			 * [R.mipmap](https://developer.android.com/reference/android/R.mipmap.html)
			 * in the Android Developer Reference.
			 */
			const mipmap: any;

			/**
			 * Plurals resources. See
			 * [R.plurals](https://developer.android.com/reference/android/R.plurals.html)
			 * in the Android Developer Reference.
			 */
			const plurals: any;

			/**
			 * Raw resources. See
			 * [R.raw](https://developer.android.com/reference/android/R.raw.html)
			 * in the Android Developer Reference.
			 */
			const raw: any;

			/**
			 * String resources. See
			 * [R.string](https://developer.android.com/reference/android/R.string.html)
			 * in the Android Developer Reference.
			 */
			const string: any;

			/**
			 * Style resources. See
			 * [R.style](https://developer.android.com/reference/android/R.style.html)
			 * in the Android Developer Reference.
			 */
			const style: any;

			/**
			 * Styleable resources. See
			 * [R.styleable](https://developer.android.com/reference/android/R.styleable.html)
			 * in the Android Developer Reference.
			 */
			const styleable: any;

			/**
			 * Transition resources. See
			 * [R.transition](https://developer.android.com/reference/android/R.transition.html)
			 * in the Android Developer Reference.
			 */
			const transition: any;

			/**
			 * XML resources. See
			 * [R.xml](https://developer.android.com/reference/android/R.xml.html)
			 * in the Android Developer Reference.
			 */
			const xml: any;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Gets the value of the <Titanium.Android.R.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.Android.R.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.Android.R.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.Android.R.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.Android.R.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.Android.R.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		}
	}

	/**
	 * The top-level App module is mainly used for accessing information about the
	 * application at runtime, and for sending or listening for system events.
	 */
	namespace App {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Convenience constant for system event "accessibilityannouncement".
		 */
		const EVENT_ACCESSIBILITY_ANNOUNCEMENT: string;

		/**
		 * Convenience constant for system event "accessibilitychanged".
		 */
		const EVENT_ACCESSIBILITY_CHANGED: string;

		/**
		 * Indicates whether Accessibility is enabled by the system.
		 */
		const accessibilityEnabled: boolean;

		/**
		 * Indicates whether Analytics is enabled, determined by `tiapp.xml`.
		 */
		const analytics: boolean;

		/**
		 * Application copyright statement, determined by `tiapp.xml`.
		 */
		const copyright: string;

		/**
		 * Build type that reflects how the application was packaged.
		 * Returns one of the following values:
		 * * `development` (Simulator)
		 * * `test` (Device)
		 * * `production` (App Store / Adhoc)
		 */
		const deployType: string;

		/**
		 * Application description, determined by `tiapp.xml`.
		 */
		const description: string;

		/**
		 * Application globally-unique ID, determined by `tiapp.xml`.
		 */
		const guid: string;

		/**
		 * Shows the application's splash screen on app resume.
		 */
		let forceSplashAsSnapshot: boolean;

		/**
		 * Application ID, from `tiapp.xml`.
		 */
		const id: string;

		/**
		 * The install ID for this application.
		 */
		const installId: string;

		/**
		 * Determines whether the screen is locked when the device is idle.
		 */
		let idleTimerDisabled: boolean;

		/**
		 * Application name, determined by `tiapp.xml`.
		 */
		const name: string;

		/**
		 * Determines whether proximity detection is enabled.
		 */
		let proximityDetection: boolean;

		/**
		 * Indicates the state of the device's proximity sensor, according to the
		 * <Titanium.App.proximity> event.
		 */
		const proximityState: boolean;

		/**
		 * Prevents network activity indicator from being displayed.
		 */
		let disableNetworkActivityIndicator: boolean;

		/**
		 * Application publisher, from `tiapp.xml`.
		 */
		const publisher: string;

		/**
		 * Unique session identifier for the current continuous run of the application.
		 */
		const sessionId: string;

		/**
		 * Application URL, from `tiapp.xml`.
		 */
		const url: string;

		/**
		 * Application version, from `tiapp.xml`.
		 */
		const version: string;

		/**
		 * Indicates whether or not the soft keyboard is visible.
		 */
		const keyboardVisible: boolean;

		/**
		 * Indicates whether or not the user interaction shoud be tracked.
		 */
		let trackUserInteraction: boolean;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event?: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Fire a system-level event such as <Titanium.App.EVENT_ACCESSIBILITY_ANNOUNCEMENT>.
		 */
		function fireSystemEvent(eventName: string, param?: any): void;

		/**
		 * Returns the arguments passed to the application on startup.
		 */
		function getArguments(): launchOptions;

		/**
		 * Gets the value of the <Titanium.App.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.App.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.App.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.App.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.App.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.App.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.App.accessibilityEnabled> property.
		 */
		function getAccessibilityEnabled(): boolean;

		/**
		 * Gets the value of the <Titanium.App.analytics> property.
		 */
		function getAnalytics(): boolean;

		/**
		 * Gets the value of the <Titanium.App.copyright> property.
		 */
		function getCopyright(): string;

		/**
		 * Gets the value of the <Titanium.App.deployType> property.
		 */
		function getDeployType(): string;

		/**
		 * Gets the value of the <Titanium.App.description> property.
		 */
		function getDescription(): string;

		/**
		 * Gets the value of the <Titanium.App.guid> property.
		 */
		function getGuid(): string;

		/**
		 * Gets the value of the <Titanium.App.forceSplashAsSnapshot> property.
		 */
		function getForceSplashAsSnapshot(): boolean;

		/**
		 * Sets the value of the <Titanium.App.forceSplashAsSnapshot> property.
		 */
		function setForceSplashAsSnapshot(forceSplashAsSnapshot: boolean): void;

		/**
		 * Gets the value of the <Titanium.App.id> property.
		 */
		function getId(): string;

		/**
		 * Gets the value of the <Titanium.App.installId> property.
		 */
		function getInstallId(): string;

		/**
		 * Gets the value of the <Titanium.App.idleTimerDisabled> property.
		 */
		function getIdleTimerDisabled(): boolean;

		/**
		 * Sets the value of the <Titanium.App.idleTimerDisabled> property.
		 */
		function setIdleTimerDisabled(idleTimerDisabled: boolean): void;

		/**
		 * Gets the value of the <Titanium.App.name> property.
		 */
		function getName(): string;

		/**
		 * Gets the value of the <Titanium.App.proximityDetection> property.
		 */
		function getProximityDetection(): boolean;

		/**
		 * Sets the value of the <Titanium.App.proximityDetection> property.
		 */
		function setProximityDetection(proximityDetection: boolean): void;

		/**
		 * Gets the value of the <Titanium.App.proximityState> property.
		 */
		function getProximityState(): boolean;

		/**
		 * Gets the value of the <Titanium.App.disableNetworkActivityIndicator> property.
		 */
		function getDisableNetworkActivityIndicator(): boolean;

		/**
		 * Sets the value of the <Titanium.App.disableNetworkActivityIndicator> property.
		 */
		function setDisableNetworkActivityIndicator(disableNetworkActivityIndicator: boolean): void;

		/**
		 * Gets the value of the <Titanium.App.publisher> property.
		 */
		function getPublisher(): string;

		/**
		 * Gets the value of the <Titanium.App.sessionId> property.
		 */
		function getSessionId(): string;

		/**
		 * Gets the value of the <Titanium.App.url> property.
		 */
		function getUrl(): string;

		/**
		 * Gets the value of the <Titanium.App.version> property.
		 */
		function getVersion(): string;

		/**
		 * Gets the value of the <Titanium.App.keyboardVisible> property.
		 */
		function getKeyboardVisible(): boolean;


		/**
		 * A module used to access Android application resources.
		 */
		namespace Android {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * The `R` namespace for application resources.
			 */
			const R: Titanium.App.Android.R;

			/**
			 * The version number of the application.
			 */
			const appVersionCode: number;

			/**
			 * The version name of the application.
			 */
			const appVersionName: string;

			/**
			 * Return the intent that was used to launch the application.
			 */
			const launchIntent: Titanium.Android.Intent;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Gets the value of the <Titanium.App.Android.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.App.Android.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.App.Android.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.App.Android.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.App.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.App.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

			/**
			 * Gets the value of the <Titanium.App.Android.appVersionCode> property.
			 */
			function getAppVersionCode(): number;

			/**
			 * Gets the value of the <Titanium.App.Android.appVersionName> property.
			 */
			function getAppVersionName(): string;

			/**
			 * Gets the value of the <Titanium.App.Android.launchIntent> property.
			 */
			function getLaunchIntent(): Titanium.Android.Intent;

			/**
			 * The Titanium binding of the native Android `R` class, giving access to application resources.
			 */
			interface R extends Titanium.Proxy {
			}
		}

		/**
		 * The App Properties module is used for storing application-related data in property/value pairs
		 * that persist beyond application sessions and device power cycles.
		 */
		namespace Properties {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Returns the value of a property as a boolean data type.
			 */
			function getBool(property: string, defaultValue?: boolean): boolean;

			/**
			 * Returns the value of a property as a double (double-precision, floating point) data type.
			 */
			function getDouble(property: string, defaultValue?: number): number;

			/**
			 * Returns the value of a property as an integer data type.
			 */
			function getInt(property: string, defaultValue?: number): number;

			/**
			 * Returns the value of a property as an array data type.
			 */
			function getList(property: string, defaultValue?: ReadonlyArray<any>): any[];

			/**
			 * Returns the value of a property as an object.
			 */
			function getObject(property: string, defaultValue?: any): any;

			/**
			 * Returns the value of a property as a string data type.
			 */
			function getString(property: string, defaultValue?: string): string;

			/**
			 * Indicates whether a property exists.
			 */
			function hasProperty(property: string): boolean;

			/**
			 * Returns an array of property names.
			 */
			function listProperties(): any[];

			/**
			 * Removes a property if it exists, or does nothing otherwise.
			 */
			function removeProperty(property: string): void;

			/**
			 * Removes all properties that have been set by the user on runtime, or does nothing otherwise.
			 */
			function removeAllProperties(): void;

			/**
			 * Sets the value of a property as a boolean data type. The property will be created if it
			 * does not exist.
			 */
			function setBool(property: string, value: boolean): void;

			/**
			 * Sets the value of a property as a double (double-precision, floating point) data type. The
			 * property will be created if it does not exist.
			 */
			function setDouble(property: string, value: number): void;

			/**
			 * Sets the value of a property as an integer data type. The property will be created if it
			 * does not exist.
			 */
			function setInt(property: string, value: number): void;

			/**
			 * Sets the value of a property as an array data type. The property will be created if it
			 * does not exist.
			 */
			function setList(property: string, value: ReadonlyArray<any>): void;

			/**
			 * Sets the value of a property as an object data type. The property will be created if it
			 * does not exist.
			 */
			function setObject(property: string, value: any): void;

			/**
			 * Sets the value of a property as a string data type. The property will be created if it
			 * does not exist.
			 */
			function setString(property: string, value: string): void;

			/**
			 * Gets the value of the <Titanium.App.Properties.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.App.Properties.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.App.Properties.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.App.Properties.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.App.Properties.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.App.Properties.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		}

		/**
		 * The top-level App iOS module, available only to iOS devices, that includes the facilities to
		 * create and manage local notifications and background services.
		 */
		namespace iOS {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * Convenience constant for system event "accessibilitylayoutchanged".
			 */
			const EVENT_ACCESSIBILITY_LAYOUT_CHANGED: string;

			/**
			 * Convenience constant for system event "accessibilityscreenchanged".
			 */
			const EVENT_ACCESSIBILITY_SCREEN_CHANGED: string;

			/**
			 * Use with [setMinimumBackgroundFetchInterval](Titanium.App.iOS.setMinimumBackgroundFetchInterval) method.
			 * Specifies the smallest fetch interval supported by the system.
			 */
			const BACKGROUNDFETCHINTERVAL_MIN: number;

			/**
			 * Use with [setMinimumBackgroundFetchInterval](Titanium.App.iOS.setMinimumBackgroundFetchInterval) method.
			 * Used to specify a fetch interval large enough to prevent fetch operations from occurring.
			 */
			const BACKGROUNDFETCHINTERVAL_NEVER: number;

			/**
			 * The application may not present any UI upon a notification being received.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_NONE: number;

			/**
			 * The application may badge its icon upon a notification being received.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_BADGE: number;

			/**
			 * The application may play a sound upon a notification being received.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_SOUND: number;

			/**
			 * The application may display an alert upon a notification being received.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_ALERT: number;

			/**
			 * The ability to play sounds for critical alerts.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_CRITICAL_ALERT: number;

			/**
			 * The ability to post non-interrupting notifications provisionally to the Notification Center.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_PROVISIONAL: number;

			/**
			 * An option indicating the system should display a button for in-app notification settings.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_PROVIDES_APP_NOTIFICATION_SETTINGS: number;

			/**
			 * The action will execute in background. Use with the
			 * [activationMode](Titanium.App.iOS.UserNotificationAction.activationMode) property.
			 */
			const USER_NOTIFICATION_ACTIVATION_MODE_BACKGROUND: number;

			/**
			 * The action will launch the application and execute in the foreground.
			 * Use with the [activationMode](Titanium.App.iOS.UserNotificationAction.activationMode) property.
			 */
			const USER_NOTIFICATION_ACTIVATION_MODE_FOREGROUND: number;

			/**
			 * Default action behavior with no additional action support.
			 */
			const USER_NOTIFICATION_BEHAVIOR_DEFAULT: number;

			/**
			 * Provides a textfield with the notification for the user to enter a text response.
			 */
			const USER_NOTIFICATION_BEHAVIOR_TEXTINPUT: number;

			/**
			 * The user has not yet made a choice regarding whether the application may post
			 * user notifications.
			 */
			const USER_NOTIFICATION_AUTHORIZATION_STATUS_NOT_DETERMINED: number;

			/**
			 * The application is authorized to post user notifications.
			 */
			const USER_NOTIFICATION_AUTHORIZATION_STATUS_AUTHORIZED: number;

			/**
			 * The application is not authorized to post user notifications.
			 */
			const USER_NOTIFICATION_AUTHORIZATION_STATUS_DENIED: number;

			/**
			 * The application is provisionally authorized to post non-interruptive user notifications.
			 */
			const USER_NOTIFICATION_AUTHORIZATION_STATUS_PROVISIONAL: number;

			/**
			 * The application does not support this notification type.
			 */
			const USER_NOTIFICATION_SETTING_NOT_SUPPORTED: number;

			/**
			 * The notification setting is turned on.
			 */
			const USER_NOTIFICATION_SETTING_ENABLED: number;

			/**
			 * The notification setting is turned off.
			 */
			const USER_NOTIFICATION_SETTING_DISABLED: number;

			/**
			 * No banner or alert dialog is presented when the notification is received.
			 */
			const USER_NOTIFICATION_ALERT_STYLE_NONE: number;

			/**
			 * A alert dialog is presented when the notification is received.
			 */
			const USER_NOTIFICATION_ALERT_STYLE_ALERT: number;

			/**
			 * A banner is presented when the notification is received.
			 */
			const USER_NOTIFICATION_ALERT_STYLE_BANNER: number;

			/**
			 * No options.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_NONE: number;

			/**
			 * Send dismiss actions to the UNUserNotificationCenter object's delegate for handling.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_CUSTOM_DISMISS_ACTION: number;

			/**
			 * Allow CarPlay to display notifications of this type.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_ALLOW_IN_CARPLAY: number;

			/**
			 * Show the notification's title, even if the user has disabled notification previews for the app.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_TITLE: number;

			/**
			 * Show the notification's subtitle, even if the user has disabled notification previews for the app.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_SUBTITLE: number;

			/**
			 * Uniform type identifier for all text types.
			 */
			const UTTYPE_TEXT: string;

			/**
			 * Uniform type identifier for a plain text type, equivalent to MIME type text/plain.
			 */
			const UTTYPE_PLAIN_TEXT: string;

			/**
			 * Uniform type identifier for Unicode-8 plain text type.
			 */
			const UTTYPE_UTF8_PLAIN_TEXT: string;

			/**
			 * Uniform type identifier for Unicode-16 with byte-order mark (BOM), or if BOM is not present,
			 * an external representation byte order (big-endian).
			 */
			const UTTYPE_UTF16_EXTERNAL_PLAIN_TEXT: string;

			/**
			 * Uniform type identifier for Unicode-16, native byte order, with an optional byte-order mark (BOM).
			 */
			const UTTYPE_UTF16_PLAIN_TEXT: string;

			/**
			 * Uniform type identifier for Rich Text.
			 */
			const UTTYPE_RTF: string;

			/**
			 * Uniform type identifier for HTML.
			 */
			const UTTYPE_HTML: string;

			/**
			 * Uniform type identifier for XML.
			 */
			const UTTYPE_XML: string;

			/**
			 * Uniform type identifier for PDF data.
			 */
			const UTTYPE_PDF: string;

			/**
			 * Uniform type identifier for Rich Text Format Directory, that is, Rich Text with content embedding, on-disk format.
			 */
			const UTTYPE_RTFD: string;

			/**
			 * Uniform type identifier for Rich Text with content embedding, pasteboard format.
			 */
			const UTTYPE_FLAT_RTFD: string;

			/**
			 * Uniform type identifier for MLTE (Textension) format for mixed text and multimedia data.
			 */
			const UTTYPE_TXN_TEXT_AND_MULTIMEDIA_DATA: string;

			/**
			 * Uniform type identifier for WebKit webarchive format.
			 */
			const UTTYPE_WEB_ARCHIVE: string;

			/**
			 * Uniform type identifier for all image types.
			 */
			const UTTYPE_IMAGE: string;

			/**
			 * Uniform type identifier for JPEG images.
			 */
			const UTTYPE_JPEG: string;

			/**
			 * Uniform type identifier for JPEG 2000 images.
			 */
			const UTTYPE_JPEG2000: string;

			/**
			 * Uniform type identifier for TIFF images.
			 */
			const UTTYPE_TIFF: string;

			/**
			 * Uniform type identifier for PICT images.
			 */
			const UTTYPE_PICT: string;

			/**
			 * Uniform type identifier for GIF images.
			 */
			const UTTYPE_GIF: string;

			/**
			 * Uniform type identifier for PNG images.
			 */
			const UTTYPE_PNG: string;

			/**
			 * Uniform type identifier for QuickTime images.
			 */
			const UTTYPE_QUICKTIME_IMAGE: string;

			/**
			 * Uniform type identifier for Mac OS icon images.
			 */
			const UTTYPE_APPLE_ICNS: string;

			/**
			 * Uniform type identifier for Windows bitmap images.
			 */
			const UTTYPE_BMP: string;

			/**
			 * Uniform type identifier for Windows icon images.
			 */
			const UTTYPE_ICO: string;

			/**
			 * Uniform type identifier for all audiovisual content.
			 */
			const UTTYPE_MOVIE: string;

			/**
			 * Uniform type identifier for all video content without audio.
			 */
			const UTTYPE_VIDEO: string;

			/**
			 * Uniform type identifier for all audio content.
			 */
			const UTTYPE_AUDIO: string;

			/**
			 * Uniform type identifier for QuickTime movies.
			 */
			const UTTYPE_QUICKTIME_MOVIE: string;

			/**
			 * Uniform type identifier for MPEG-1 and MPEG-2 content.
			 */
			const UTTYPE_MPEG: string;

			/**
			 * Uniform type identifier for MPEG-4 content.
			 */
			const UTTYPE_MPEG4: string;

			/**
			 * Uniform type identifier for MP3 audio.
			 */
			const UTTYPE_MP3: string;

			/**
			 * Uniform type identifier for MPEG-4 audio.
			 */
			const UTTYPE_MPEG4_AUDIO: string;

			/**
			 * Uniform type identifier for protected MPEG-4 audio (iTunes music store format).
			 */
			const UTTYPE_APPLE_PROTECTED_MPEG4_AUDIO: string;

			/**
			 * Notification types and user notification categories the application is registered to use.
			 */
			const currentUserNotificationSettings: UserNotificationSettings;

			/**
			 * Provides an Array of the NSUserActivityTypes keys defined within your Titanium project.
			 */
			const supportedUserActivityTypes: string[];

			/**
			 * Returns a URL to open the app's settings.
			 */
			const applicationOpenSettingsURL: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Creates and returns an instance of Titanium.App.iOS.UserDefaults.
			 */
			function createUserDefaults(parameters: any): Titanium.App.iOS.UserDefaults;

			/**
			 * Cancels all scheduled local notifications.
			 */
			function cancelAllLocalNotifications(): void;

			/**
			 * Cancels a local notification.
			 */
			function cancelLocalNotification(id: number): void;

			/**
			 * Cancels a local notification.
			 */
			function cancelLocalNotification(id: string): void;

			/**
			 * Registers a service to run when the application is placed in the background.
			 */
			function registerBackgroundService(params: any): Titanium.App.iOS.BackgroundService;

			/**
			 * Registers the application to use the requested notification types and categories.
			 */
			function registerUserNotificationSettings(params: UserNotificationSettings): void;

			/**
			 * Schedule a local notification.
			 */
			function scheduleLocalNotification(params: NotificationParams): Titanium.App.iOS.LocalNotification;

			/**
			 * Specifies the minimum amount of time that must elapse between background fetch operations.
			 * Available only on iOS 7 and later.
			 */
			function setMinimumBackgroundFetchInterval(fetchInterval: number): void;

			/**
			 * Marks the end of the app execution after initiating the download operation. Available only on iOS 7 and later.
			 */
			function endBackgroundHandler(handlerID: string): void;

			/**
			 * Marks the end of an `openParentApplication:reply` execution by a WatchKit extension.
			 */
			function sendWatchExtensionReply(handlerId: string, userInfo: any): void;

			/**
			 * Creates and returns an instance of <Titanium.App.iOS.SearchQuery>.
			 */
			function createSearchQuery(parameters?: any): Titanium.App.iOS.SearchQuery;

			/**
			 * Creates and returns an instance of <Titanium.App.iOS.SearchableIndex>.
			 */
			function createSearchableIndex(parameters?: any): Titanium.App.iOS.SearchableIndex;

			/**
			 * Creates and returns an instance of <Titanium.App.iOS.SearchableItem>.
			 */
			function createSearchableItem(parameters?: any): Titanium.App.iOS.SearchableItem;

			/**
			 * Creates and returns an instance of <Titanium.App.iOS.SearchableItemAttributeSet>.
			 */
			function createSearchableItemAttributeSet(parameters?: any): Titanium.App.iOS.SearchableItemAttributeSet;

			/**
			 * Creates and returns an instance of <Titanium.App.iOS.UserActivity>.
			 */
			function createUserActivity(parameters?: any): Titanium.App.iOS.UserActivity;

			/**
			 * Creates and returns an instance of <Titanium.App.iOS.UserNotificationAction>.
			 */
			function createUserNotificationAction(parameters?: any): Titanium.App.iOS.UserNotificationAction;

			/**
			 * Creates and returns an instance of <Titanium.App.iOS.UserNotificationCategory>.
			 */
			function createUserNotificationCategory(parameters?: any): Titanium.App.iOS.UserNotificationCategory;

			/**
			 * Gets the value of the <Titanium.App.iOS.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.App.iOS.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.App.iOS.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.App.iOS.currentUserNotificationSettings> property.
			 */
			function getCurrentUserNotificationSettings(): UserNotificationSettings;

			/**
			 * Gets the value of the <Titanium.App.iOS.supportedUserActivityTypes> property.
			 */
			function getSupportedUserActivityTypes(): string[];

			/**
			 * Gets the value of the <Titanium.App.iOS.applicationOpenSettingsURL> property.
			 */
			function getApplicationOpenSettingsURL(): string;

			/**
			 * A service that runs when the application is placed in the background.
			 */
			interface BackgroundService extends Titanium.Proxy {
				/**
				 * A local URL to a JavaScript file containing the code to run in the background.
				 */
				url: string;

				/**
				 * Stops the service from running during the current background session to conserve resources.
				 */
				stop(): void;

				/**
				 * Unregisters the background service.
				 */
				unregister(): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.BackgroundService.url> property.
				 */
				getUrl(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.BackgroundService.url> property.
				 */
				setUrl(url: string): void;

			}
			/**
			 * A local notification to alert the user of new or pending application information.
			 */
			interface LocalNotification extends Titanium.Proxy {
				/**
				 * Cancels the pending notification.
				 */
				cancel(): void;

			}
			/**
			 * A search query object manages the criteria to apply when searching app content that you have previously
			 * indexed by using the Core Spotlight APIs.
			 */
			interface SearchQuery extends Titanium.Proxy {
				/**
				 * A formatted string that defines the matching criteria to apply to indexed items.
				 */
				queryString: string;

				/**
				 * An array of strings that represent the attributes of indexed items.
				 */
				attributes: string[];

				/**
				 * Asynchronously queries the index for items that match the query object's specifications.
				 */
				start(): void;

				/**
				 * Cancels a query operation.
				 */
				cancel(): void;

				/**
				 * A Boolean value that indicates if the query has been cancelled (`true`) or not (`false`).
				 */
				isCancelled(): boolean;

			}
			/**
			 * The SearchableIndex module is used to add or remove Ti.App.iOS.SearchableItem objects from the device search index.
			 */
			interface SearchableIndex extends Titanium.Proxy {
				/**
				 * Indicates whether indexing is supported by the device.
				 */
				isSupported(): boolean;

				/**
				 * Adds an array of Titanium.App.iOS.SearchableItem objects to the default search index.
				 */
				addToDefaultSearchableIndex(Array: ReadonlyArray<Titanium.App.iOS.SearchableItem>, callback: (param0: any) => any): void;

				/**
				 * Removes all search items added by the application.
				 */
				deleteAllSearchableItems(callback: (param0: any) => any): void;

				/**
				 * Removes search items based on an array of domain identifiers.
				 */
				deleteAllSearchableItemByDomainIdenifiers(Array: ReadonlyArray<string>, callback: (param0: any) => any): void;

				/**
				 * Removes search items based on an array of identifiers.
				 */
				deleteSearchableItemsByIdentifiers(Array: ReadonlyArray<string>, callback: (param0: any) => any): void;

			}
			/**
			 * Used to create a unique object containing all of the search information that will appear in the device search index.
			 */
			interface SearchableItem extends Titanium.Proxy {
				/**
				 * Set of metadata properties to display for the item.
				 */
				attributeSet: Titanium.App.iOS.SearchableItemAttributeSet;

				/**
				 * Identifier that represents the "domain" or owner of this item.
				 */
				domainIdentifier: string;

				/**
				 * Searchable items have an expiration date or time to live.  By default it is set to one month.
				 */
				expirationDate: string;

				/**
				 * Unique identifier to your application group.
				 */
				uniqueIdentifier: string;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItem.domainIdentifier> property.
				 */
				getDomainIdentifier(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItem.domainIdentifier> property.
				 */
				setDomainIdentifier(domainIdentifier: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItem.expirationDate> property.
				 */
				getExpirationDate(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItem.expirationDate> property.
				 */
				setExpirationDate(expirationDate: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItem.uniqueIdentifier> property.
				 */
				getUniqueIdentifier(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItem.uniqueIdentifier> property.
				 */
				setUniqueIdentifier(uniqueIdentifier: string): void;

			}
			/**
			 * The SearchableItemAttributeSet module defines metadata properties for SearchItem and UserActivity objects.
			 */
			interface SearchableItemAttributeSet extends Titanium.Proxy {
				/**
				 * Content type of the attribute set.
				 */
				itemContentType: string;

				/**
				 * A localized string to be displayed in the UI for this item.
				 */
				displayName: string;

				/**
				 * An array of localized strings of alternate display names for this item.
				 */
				alternateNames: string[];

				/**
				 * The complete path to the item.
				 */
				path: string;

				/**
				 * File URL representing the content to be indexed.
				 */
				contentURL: string;

				/**
				 * File URL pointing to a thumbnail image for this item.
				 */
				thumbnailURL: string;

				/**
				 * Image data for thumbnail for this item.
				 */
				thumbnailData: string | Titanium.Blob;

				/**
				 * For activities this is the unique identifier for the item this activity is related to.
				 */
				relatedUniqueIdentifier: string;

				/**
				 * The date that the last metadata attribute was changed.
				 */
				metadataModificationDate: string;

				/**
				 * UTI Type pedigree for an item.
				 */
				contentType: string;

				/**
				 * Array of strings related to the content tree of the item.
				 */
				contentTypeTree: string[];

				/**
				 * Represents keywords associated with this particular item. Example keywords might be Birthday etc.
				 */
				keywords: string[];

				/**
				 * The title of the particular item.
				 */
				title: string;

				/**
				 * Subject of the the item.
				 */
				subject: string;

				/**
				 * Theme of the the item.
				 */
				theme: string;

				/**
				 * An account of the content of the resource.
				 */
				contentDescription: string;

				/**
				 * Used to reference to the resource within a given context.
				 */
				identifier: string;

				/**
				 * A class of entity for whom the resource is intended or useful.
				 */
				audiences: string[];

				/**
				 * Size of the document in MB.
				 */
				fileSize: number;

				/**
				 * Number of pages in the item.
				 */
				pageCount: number;

				/**
				 * Width in points (72 points per inch) of the document page.
				 */
				pageWidth: number;

				/**
				 * Height in points (72 points per inch) of the document page.
				 */
				pageHeight: number;

				/**
				 * Security (encryption) method used in the file.
				 */
				securityMethod: string;

				/**
				 * Application used to create the document content (e.g. "Word","Framemaker", etc.).
				 */
				creator: string;

				/**
				 * Software used to convert the original content into a PDF stream.
				 */
				encodingApplications: string[];

				/**
				 * Kind that the item represents.
				 */
				kind: string;

				/**
				 * Array of font names used in the item.
				 */
				fontNames: string[];

				/**
				 * The sample rate of the audio data contained in the file.
				 */
				audioSampleRate: number;

				/**
				 * The number of channels in the audio data contained in the file.
				 */
				audioChannelCount: number;

				/**
				 * The tempo of the music contained in the audio file in Beats Per Minute.
				 */
				tempo: number;

				/**
				 * The musical key of the song/composition contained in an audio file.
				 */
				keySignature: string;

				/**
				 * The time signature of the musical composition contained in the audio/MIDI file.
				 */
				timeSignature: string;

				/**
				 * The name of the application that encoded the data contained in the audio file.
				 */
				audioEncodingApplication: string;

				/**
				 * The composer of the song/composition contained in the audio file.
				 */
				composer: string;

				/**
				 * The lyricist/text writer for song/composition contained in the audio file.
				 */
				lyricist: string;

				/**
				 * The title for a collection of media.
				 */
				album: string;

				/**
				 * The artist for the media.
				 */
				artist: string;

				/**
				 * The track number of a song/composition when it is part of an album.
				 */
				audioTrackNumber: number;

				/**
				 * The recording date of the song/composition.
				 */
				recordingDate: string;

				/**
				 * The musical genre of the song/composition contained in the audio file.
				 */
				musicalGenre: string;

				/**
				 * Used to indicates whether the MIDI sequence contained in the file is setup for use with a General MIDI device.
				 */
				generalMIDISequence: number;

				/**
				 * Metadata attribute that stores the category of instrument.
				 */
				musicalInstrumentCategory: string;

				/**
				 * Metadata attribute that stores the name of instrument.
				 */
				musicalInstrumentName: string;

				/**
				 * Used to indicate that using the phone number is appropriate.
				 */
				supportsPhoneCall: number;

				/**
				 * Used to determine if navigation is supported.
				 */
				supportsNavigation: number;

				/**
				 * Title displayed in the search container
				 */
				containerTitle: string;

				/**
				 * Display of the search container
				 */
				containerDisplayName: string;

				/**
				 * Identifier for the search container
				 */
				containerIdentifier: string;

				/**
				 * Order the search container is displayed.
				 */
				containerOrder: number;

				/**
				 * The list of editor/editors that have worked on this item.
				 */
				editors: string[];

				/**
				 * The list of people who are visible in an image or movie or written about in a document.
				 */
				participants: string[];

				/**
				 * The list of projects that this item is part of.
				 */
				projects: string[];

				/**
				 * The date that the file was last downloaded / received.
				 */
				downloadedDate: string;

				/**
				 * The date that the item was last used.
				 */
				lastUsedDate: string;

				/**
				 * The date that the contents of the item were created.
				 */
				contentCreationDate: string;

				/**
				 * The date that the contents of the item were last modified.
				 */
				contentModificationDate: string;

				/**
				 * The date that the item was moved into the current location.
				 */
				addedDate: string;

				/**
				 * Used to indicate where the item was obtained from.
				 */
				contentSources: string[];

				/**
				 * Comment related to a file.
				 */
				comment: string;

				/**
				 * Copyright of the content.
				 */
				copyright: string;

				/**
				 * Duration in seconds of the content of the item (if appropriate).
				 */
				duration: number;

				/**
				 * A list of contacts that are somehow associated with this document beyond what is captured as Author.
				 */
				contactKeywords: string[];

				/**
				 * The codecs used to encode/decode the media.
				 */
				codecs: string[];

				/**
				 * Used to indicate company/Organization that created the document.
				 */
				organizations: string[];

				/**
				 * Media types present in the content.
				 */
				mediaTypes: string[];

				/**
				 * A version specifier for this item.
				 */
				version: string;

				/**
				 * Used to indicate the role of the document creator.
				 */
				role: string;

				/**
				 * Whether the content is prepared for streaming.  Set to `0` for not streamable and `1` for streamable.
				 */
				streamable: number;

				/**
				 * The total bit rate (audio and video combined) of the media.
				 */
				totalBitRate: number;

				/**
				 * The video bit rate.
				 */
				videoBitRate: number;

				/**
				 * The audio bit rate.
				 */
				audioBitRate: number;

				/**
				 * The delivery type of the item.  Set to `0` for fast start and `1` for RTSP.
				 */
				deliveryType: number;

				/**
				 * Used to designate the languages of the intellectual content of the resource.
				 */
				languages: string[];

				/**
				 * Used to provide a link to information about rights held in and over resource.
				 */
				rights: string[];

				/**
				 * Used to designate the entity responsible for making the resource available.
				 */
				publishers: string[];

				/**
				 * Used to designate the entity responsible for making contributions to the content of the resource.
				 */
				contributors: string[];

				/**
				 * Used to designate the extent or scope of the content of the resource.
				 */
				coverage: string[];

				/**
				 * User rating of this item out of 5 stars.
				 */
				rating: number;

				/**
				 * A description of the rating, for example, the number of reviewers.
				 */
				ratingDescription: string;

				/**
				 * User play count of this item.
				 */
				playCount: number;

				/**
				 * Information about the item.
				 */
				information: string;

				/**
				 * Director of the item, for example, the movie director.
				 */
				director: string;

				/**
				 * Producer of the content.
				 */
				producer: string;

				/**
				 * Genre of the item, for example, movie genre.
				 */
				genre: string;

				/**
				 * Performers in the movie.
				 */
				performers: string[];

				/**
				 * Original format of the movie.
				 */
				originalFormat: string;

				/**
				 * Original source of the movie.
				 */
				originalSource: string;

				/**
				 * Whether or not the item is local. Set to `1` if true and `0` otherwise.
				 */
				local: number;

				/**
				 * Whether or not the item has explicit content. Set to `1` for explicit or `0` for clean.
				 */
				contentRating: number;

				/**
				 * URL of the item.
				 */
				url: string;

				/**
				 * The fully formatted address of the item (obtained from MapKit).
				 */
				fullyFormattedAddress: string;

				/**
				 * The sub-location (e.g., street number) for the item according to guidelines established by the provider.
				 */
				subThoroughfare: string;

				/**
				 * The location (e.g., street name) for the item according to guidelines established by the provider.
				 */
				thoroughfare: string;

				/**
				 * The postal code for the item according to guidelines established by the provider.
				 */
				postalCode: string;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.displayName> property.
				 */
				getDisplayName(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.displayName> property.
				 */
				setDisplayName(displayName: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.alternateNames> property.
				 */
				getAlternateNames(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.alternateNames> property.
				 */
				setAlternateNames(alternateNames: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.path> property.
				 */
				getPath(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.path> property.
				 */
				setPath(path: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentURL> property.
				 */
				getContentURL(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentURL> property.
				 */
				setContentURL(contentURL: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailURL> property.
				 */
				getThumbnailURL(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailURL> property.
				 */
				setThumbnailURL(thumbnailURL: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailData> property.
				 */
				getThumbnailData(): string | Titanium.Blob;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailData> property.
				 */
				setThumbnailData(thumbnailData: string): void;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailData> property.
				 */
				setThumbnailData(thumbnailData: Titanium.Blob): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.relatedUniqueIdentifier> property.
				 */
				getRelatedUniqueIdentifier(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.relatedUniqueIdentifier> property.
				 */
				setRelatedUniqueIdentifier(relatedUniqueIdentifier: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.metadataModificationDate> property.
				 */
				getMetadataModificationDate(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.metadataModificationDate> property.
				 */
				setMetadataModificationDate(metadataModificationDate: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentType> property.
				 */
				getContentType(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentType> property.
				 */
				setContentType(contentType: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentTypeTree> property.
				 */
				getContentTypeTree(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentTypeTree> property.
				 */
				setContentTypeTree(contentTypeTree: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.keywords> property.
				 */
				getKeywords(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.keywords> property.
				 */
				setKeywords(keywords: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.title> property.
				 */
				getTitle(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.title> property.
				 */
				setTitle(title: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.subject> property.
				 */
				getSubject(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.subject> property.
				 */
				setSubject(subject: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.theme> property.
				 */
				getTheme(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.theme> property.
				 */
				setTheme(theme: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentDescription> property.
				 */
				getContentDescription(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentDescription> property.
				 */
				setContentDescription(contentDescription: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.identifier> property.
				 */
				getIdentifier(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.identifier> property.
				 */
				setIdentifier(identifier: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audiences> property.
				 */
				getAudiences(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audiences> property.
				 */
				setAudiences(audiences: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fileSize> property.
				 */
				getFileSize(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fileSize> property.
				 */
				setFileSize(fileSize: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageCount> property.
				 */
				getPageCount(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageCount> property.
				 */
				setPageCount(pageCount: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageWidth> property.
				 */
				getPageWidth(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageWidth> property.
				 */
				setPageWidth(pageWidth: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageHeight> property.
				 */
				getPageHeight(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageHeight> property.
				 */
				setPageHeight(pageHeight: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.securityMethod> property.
				 */
				getSecurityMethod(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.securityMethod> property.
				 */
				setSecurityMethod(securityMethod: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.creator> property.
				 */
				getCreator(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.creator> property.
				 */
				setCreator(creator: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.encodingApplications> property.
				 */
				getEncodingApplications(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.encodingApplications> property.
				 */
				setEncodingApplications(encodingApplications: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.kind> property.
				 */
				getKind(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.kind> property.
				 */
				setKind(kind: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fontNames> property.
				 */
				getFontNames(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fontNames> property.
				 */
				setFontNames(fontNames: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioSampleRate> property.
				 */
				getAudioSampleRate(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioSampleRate> property.
				 */
				setAudioSampleRate(audioSampleRate: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioChannelCount> property.
				 */
				getAudioChannelCount(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioChannelCount> property.
				 */
				setAudioChannelCount(audioChannelCount: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.tempo> property.
				 */
				getTempo(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.tempo> property.
				 */
				setTempo(tempo: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.keySignature> property.
				 */
				getKeySignature(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.keySignature> property.
				 */
				setKeySignature(keySignature: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.timeSignature> property.
				 */
				getTimeSignature(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.timeSignature> property.
				 */
				setTimeSignature(timeSignature: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioEncodingApplication> property.
				 */
				getAudioEncodingApplication(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioEncodingApplication> property.
				 */
				setAudioEncodingApplication(audioEncodingApplication: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.composer> property.
				 */
				getComposer(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.composer> property.
				 */
				setComposer(composer: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.lyricist> property.
				 */
				getLyricist(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.lyricist> property.
				 */
				setLyricist(lyricist: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.album> property.
				 */
				getAlbum(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.album> property.
				 */
				setAlbum(album: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.artist> property.
				 */
				getArtist(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.artist> property.
				 */
				setArtist(artist: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioTrackNumber> property.
				 */
				getAudioTrackNumber(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioTrackNumber> property.
				 */
				setAudioTrackNumber(audioTrackNumber: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.recordingDate> property.
				 */
				getRecordingDate(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.recordingDate> property.
				 */
				setRecordingDate(recordingDate: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalGenre> property.
				 */
				getMusicalGenre(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalGenre> property.
				 */
				setMusicalGenre(musicalGenre: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.generalMIDISequence> property.
				 */
				getGeneralMIDISequence(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.generalMIDISequence> property.
				 */
				setGeneralMIDISequence(generalMIDISequence: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalInstrumentCategory> property.
				 */
				getMusicalInstrumentCategory(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalInstrumentCategory> property.
				 */
				setMusicalInstrumentCategory(musicalInstrumentCategory: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalInstrumentName> property.
				 */
				getMusicalInstrumentName(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalInstrumentName> property.
				 */
				setMusicalInstrumentName(musicalInstrumentName: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.supportsPhoneCall> property.
				 */
				getSupportsPhoneCall(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.supportsPhoneCall> property.
				 */
				setSupportsPhoneCall(supportsPhoneCall: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.supportsNavigation> property.
				 */
				getSupportsNavigation(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.supportsNavigation> property.
				 */
				setSupportsNavigation(supportsNavigation: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerTitle> property.
				 */
				getContainerTitle(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerTitle> property.
				 */
				setContainerTitle(containerTitle: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerDisplayName> property.
				 */
				getContainerDisplayName(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerDisplayName> property.
				 */
				setContainerDisplayName(containerDisplayName: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerIdentifier> property.
				 */
				getContainerIdentifier(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerIdentifier> property.
				 */
				setContainerIdentifier(containerIdentifier: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerOrder> property.
				 */
				getContainerOrder(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerOrder> property.
				 */
				setContainerOrder(containerOrder: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.editors> property.
				 */
				getEditors(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.editors> property.
				 */
				setEditors(editors: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.participants> property.
				 */
				getParticipants(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.participants> property.
				 */
				setParticipants(participants: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.projects> property.
				 */
				getProjects(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.projects> property.
				 */
				setProjects(projects: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.downloadedDate> property.
				 */
				getDownloadedDate(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.downloadedDate> property.
				 */
				setDownloadedDate(downloadedDate: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.lastUsedDate> property.
				 */
				getLastUsedDate(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.lastUsedDate> property.
				 */
				setLastUsedDate(lastUsedDate: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentCreationDate> property.
				 */
				getContentCreationDate(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentCreationDate> property.
				 */
				setContentCreationDate(contentCreationDate: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentModificationDate> property.
				 */
				getContentModificationDate(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentModificationDate> property.
				 */
				setContentModificationDate(contentModificationDate: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.addedDate> property.
				 */
				getAddedDate(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.addedDate> property.
				 */
				setAddedDate(addedDate: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentSources> property.
				 */
				getContentSources(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentSources> property.
				 */
				setContentSources(contentSources: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.comment> property.
				 */
				getComment(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.comment> property.
				 */
				setComment(comment: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.copyright> property.
				 */
				getCopyright(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.copyright> property.
				 */
				setCopyright(copyright: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.duration> property.
				 */
				getDuration(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.duration> property.
				 */
				setDuration(duration: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contactKeywords> property.
				 */
				getContactKeywords(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contactKeywords> property.
				 */
				setContactKeywords(contactKeywords: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.codecs> property.
				 */
				getCodecs(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.codecs> property.
				 */
				setCodecs(codecs: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.organizations> property.
				 */
				getOrganizations(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.organizations> property.
				 */
				setOrganizations(organizations: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.mediaTypes> property.
				 */
				getMediaTypes(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.mediaTypes> property.
				 */
				setMediaTypes(mediaTypes: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.version> property.
				 */
				getVersion(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.version> property.
				 */
				setVersion(version: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.role> property.
				 */
				getRole(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.role> property.
				 */
				setRole(role: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.streamable> property.
				 */
				getStreamable(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.streamable> property.
				 */
				setStreamable(streamable: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.totalBitRate> property.
				 */
				getTotalBitRate(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.totalBitRate> property.
				 */
				setTotalBitRate(totalBitRate: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.videoBitRate> property.
				 */
				getVideoBitRate(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.videoBitRate> property.
				 */
				setVideoBitRate(videoBitRate: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioBitRate> property.
				 */
				getAudioBitRate(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioBitRate> property.
				 */
				setAudioBitRate(audioBitRate: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.deliveryType> property.
				 */
				getDeliveryType(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.deliveryType> property.
				 */
				setDeliveryType(deliveryType: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.languages> property.
				 */
				getLanguages(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.languages> property.
				 */
				setLanguages(languages: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.rights> property.
				 */
				getRights(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.rights> property.
				 */
				setRights(rights: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.publishers> property.
				 */
				getPublishers(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.publishers> property.
				 */
				setPublishers(publishers: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contributors> property.
				 */
				getContributors(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contributors> property.
				 */
				setContributors(contributors: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.coverage> property.
				 */
				getCoverage(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.coverage> property.
				 */
				setCoverage(coverage: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.rating> property.
				 */
				getRating(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.rating> property.
				 */
				setRating(rating: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.ratingDescription> property.
				 */
				getRatingDescription(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.ratingDescription> property.
				 */
				setRatingDescription(ratingDescription: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.playCount> property.
				 */
				getPlayCount(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.playCount> property.
				 */
				setPlayCount(playCount: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.information> property.
				 */
				getInformation(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.information> property.
				 */
				setInformation(information: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.director> property.
				 */
				getDirector(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.director> property.
				 */
				setDirector(director: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.producer> property.
				 */
				getProducer(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.producer> property.
				 */
				setProducer(producer: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.genre> property.
				 */
				getGenre(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.genre> property.
				 */
				setGenre(genre: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.performers> property.
				 */
				getPerformers(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.performers> property.
				 */
				setPerformers(performers: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.originalFormat> property.
				 */
				getOriginalFormat(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.originalFormat> property.
				 */
				setOriginalFormat(originalFormat: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.originalSource> property.
				 */
				getOriginalSource(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.originalSource> property.
				 */
				setOriginalSource(originalSource: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.local> property.
				 */
				getLocal(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.local> property.
				 */
				setLocal(local: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentRating> property.
				 */
				getContentRating(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentRating> property.
				 */
				setContentRating(contentRating: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.url> property.
				 */
				getUrl(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.url> property.
				 */
				setUrl(url: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fullyFormattedAddress> property.
				 */
				getFullyFormattedAddress(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fullyFormattedAddress> property.
				 */
				setFullyFormattedAddress(fullyFormattedAddress: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.subThoroughfare> property.
				 */
				getSubThoroughfare(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.subThoroughfare> property.
				 */
				setSubThoroughfare(subThoroughfare: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thoroughfare> property.
				 */
				getThoroughfare(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thoroughfare> property.
				 */
				setThoroughfare(thoroughfare: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.postalCode> property.
				 */
				getPostalCode(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.postalCode> property.
				 */
				setPostalCode(postalCode: string): void;

			}
			/**
			 * The UserActivity module is used to enable device Handoff and to create User Activities.
			 */
			interface UserActivity extends Titanium.Proxy {
				/**
				 * Name of the activity type.
				 */
				activityType: string;

				/**
				 * Set to `true` if the user activity can be publicly accessed by all iOS users.
				 */
				eligibleForPublicIndexing: boolean;

				/**
				 * Set to true if the user activity should be added to the on-device index.
				 */
				eligibleForSearch: boolean;

				/**
				 * Set to true if this user activity should be eligible to be handed off to another device
				 */
				eligibleForHandoff: boolean;

				/**
				 * A Boolean value that determines whether Siri can suggest the user activity as a shortcut to the user.
				 */
				eligibleForPrediction: boolean;

				/**
				 * A value used to identify the user activity.
				 */
				persistentIdentifier: string;

				/**
				 * Absolute date after which the activity is no longer eligible to be indexed or handed off.
				 */
				expirationDate: string;

				/**
				 * An array of string keywords representing words or phrases that might help the user to find the activity in the application history.
				 */
				keywords: string[];

				/**
				 * Set to true everytime you have updated the user activity and need the changes to be saved before handing it off to another device.
				 */
				needsSave: boolean;

				/**
				 * An array of String keys from the userInfo property which represent the minimal information about the user activity that should be stored for later restoration.
				 */
				requiredUserInfoKeys: string[];

				/**
				 * Determines if user activities are supported (`true`) or not (`false`) by the device.
				 */
				supported: boolean;

				/**
				 * An optional, user-visible title for this activity such as a document name or web page title.
				 */
				title: string;

				/**
				 * The userInfo dictionary contains application-specific state needed to continue an activity on another device.
				 */
				userInfo: any;

				/**
				 * When no suitable application is installed on a resuming device and the `webpageURL` property is set,
				 * the user activity will instead be continued in a web browser by loading the specified URL.
				 */
				webpageURL: string;

				/**
				 * Adds a Titanium.App.iOS.SearchableItemAttributeSet to the user activity.
				 */
				addContentAttributeSet(contentAttributeSet: Titanium.App.iOS.SearchableItemAttributeSet): void;

				/**
				 * Marks the activity as currently in use by the user.
				 */
				becomeCurrent(): void;

				/**
				 * Invalidates an activity when it is no longer eligible for continuation.
				 */
				invalidate(): void;

				/**
				 * Marks the activity as currently **not** in use and ineligible to be continued.
				 */
				resignCurrent(): void;

				/**
				 * Determines if user activities are supported (`true`) or not (`false`) by the device.
				 */
				isSupported(): boolean;

				/**
				 * Deletes user activities created by your app that have the specified persistent identifiers.
				 */
				deleteSavedUserActivitiesForPersistentIdentifiers(persistentIdentifiers: ReadonlyArray<string>): void;

				/**
				 * Deletes all user activities created by your app.
				 */
				deleteAllSavedUserActivities(): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.activityType> property.
				 */
				getActivityType(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.activityType> property.
				 */
				setActivityType(activityType: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.eligibleForPublicIndexing> property.
				 */
				getEligibleForPublicIndexing(): boolean;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.eligibleForPublicIndexing> property.
				 */
				setEligibleForPublicIndexing(eligibleForPublicIndexing: boolean): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.eligibleForSearch> property.
				 */
				getEligibleForSearch(): boolean;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.eligibleForSearch> property.
				 */
				setEligibleForSearch(eligibleForSearch: boolean): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.eligibleForHandoff> property.
				 */
				getEligibleForHandoff(): boolean;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.eligibleForHandoff> property.
				 */
				setEligibleForHandoff(eligibleForHandoff: boolean): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.eligibleForPrediction> property.
				 */
				getEligibleForPrediction(): boolean;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.eligibleForPrediction> property.
				 */
				setEligibleForPrediction(eligibleForPrediction: boolean): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.persistentIdentifier> property.
				 */
				getPersistentIdentifier(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.persistentIdentifier> property.
				 */
				setPersistentIdentifier(persistentIdentifier: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.expirationDate> property.
				 */
				getExpirationDate(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.expirationDate> property.
				 */
				setExpirationDate(expirationDate: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.keywords> property.
				 */
				getKeywords(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.keywords> property.
				 */
				setKeywords(keywords: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.needsSave> property.
				 */
				getNeedsSave(): boolean;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.needsSave> property.
				 */
				setNeedsSave(needsSave: boolean): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.requiredUserInfoKeys> property.
				 */
				getRequiredUserInfoKeys(): string[];

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.requiredUserInfoKeys> property.
				 */
				setRequiredUserInfoKeys(requiredUserInfoKeys: ReadonlyArray<string>): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.supported> property.
				 */
				getSupported(): boolean;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.supported> property.
				 */
				setSupported(supported: boolean): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.title> property.
				 */
				getTitle(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.title> property.
				 */
				setTitle(title: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.userInfo> property.
				 */
				getUserInfo(): any;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.userInfo> property.
				 */
				setUserInfo(userInfo: any): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserActivity.webpageURL> property.
				 */
				getWebpageURL(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserActivity.webpageURL> property.
				 */
				setWebpageURL(webpageURL: string): void;

			}
			/**
			 * The UserDefaults module is used for storing application-related data in property/value pairs
			 * that persist beyond application sessions and device power cycles. UserDefaults allows the suiteName
			 * of the UserDefaults to be specified at creation time.
			 */
			interface UserDefaults extends Titanium.Proxy {
				/**
				 * Sets the name of the suite to be used to access UserDefaults.
				 */
				suiteName: string;

				/**
				 * Returns the value of a property as a boolean data type.
				 */
				getBool(property: string, defaultValue?: boolean): boolean;

				/**
				 * Returns the value of a property as a double (double-precision, floating point) data type.
				 */
				getDouble(property: string, defaultValue?: number): number;

				/**
				 * Returns the value of a property as an integer data type.
				 */
				getInt(property: string, defaultValue?: number): number;

				/**
				 * Returns the value of a property as an array data type.
				 */
				getList(property: string, defaultValue?: ReadonlyArray<any>): any[];

				/**
				 * Returns the value of a property as an object.
				 */
				getObject(property: string, defaultValue?: any): any;

				/**
				 * Returns the value of a property as a string data type.
				 */
				getString(property: string, defaultValue?: string): string;

				/**
				 * Indicates whether a property exists.
				 */
				hasProperty(property: string): boolean;

				/**
				 * Returns an array of property names.
				 */
				listProperties(): any[];

				/**
				 * Removes a property if it exists, or does nothing otherwise.
				 */
				removeProperty(property: string): void;

				/**
				 * Removes all properties that have been set by the user on runtime, or does nothing otherwise.
				 */
				removeAllProperties(): void;

				/**
				 * Sets the value of a property as a boolean data type. The property will be created if it
				 * does not exist.
				 */
				setBool(property: string, value: boolean): void;

				/**
				 * Sets the value of a property as a double (double-precision, floating point) data type. The
				 * property will be created if it does not exist.
				 */
				setDouble(property: string, value: number): void;

				/**
				 * Sets the value of a property as an integer data type. The property will be created if it
				 * does not exist.
				 */
				setInt(property: string, value: number): void;

				/**
				 * Sets the value of a property as an array data type. The property will be created if it
				 * does not exist.
				 */
				setList(property: string, value: ReadonlyArray<any>): void;

				/**
				 * Sets the value of a property as an object data type. The property will be created if it
				 * does not exist.
				 */
				setObject(property: string, value: any): void;

				/**
				 * Sets the value of a property as a string data type. The property will be created if it
				 * does not exist.
				 */
				setString(property: string, value: string): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserDefaults.suiteName> property.
				 */
				getSuiteName(): string;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserDefaults.suiteName> property.
				 */
				setSuiteName(suiteName: string): void;

			}
			/**
			 * An action the user selects in response to an interactive notification.
			 */
			interface UserNotificationAction extends Titanium.Proxy {
				/**
				 * Selects how to activate the application.
				 */
				activationMode: number;

				/**
				 * Custom behavior the user notification supports.
				 */
				behavior: number;

				/**
				 * Set to true if the action requires the device to be unlocked. On the Apple Watch actions never require authentication.
				 */
				authenticationRequired: boolean;

				/**
				 * Set to true if the action causes destructive behavior to the user's data or the application.
				 */
				destructive: boolean;

				/**
				 * Identifier for this action. Used to identify the action the user pressed.
				 */
				identifier: string;

				/**
				 * Title of the button displayed in the notification.
				 */
				title: string;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserNotificationAction.activationMode> property.
				 */
				getActivationMode(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserNotificationAction.activationMode> property.
				 */
				setActivationMode(activationMode: number): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserNotificationAction.behavior> property.
				 */
				getBehavior(): number;

				/**
				 * Sets the value of the <Titanium.App.iOS.UserNotificationAction.behavior> property.
				 */
				setBehavior(behavior: number): void;

			}
			/**
			 * A set of notification actions to associate with a notification.
			 */
			interface UserNotificationCategory extends Titanium.Proxy {
				/**
				 * Array of notification actions to associate with the group.
				 */
				actionsForDefaultContext: Titanium.App.iOS.UserNotificationAction[];

				/**
				 * Array of notification actions to display for non-dialog-style notification.
				 */
				actionsForMinimalContext: Titanium.App.iOS.UserNotificationAction[];

				/**
				 * A format string for the summary description used when the system groups the category's notifications.
				 */
				categorySummaryFormat: string;

				/**
				 * Identifier for this category.
				 */
				identifier: string;

				/**
				 * The intents related to notifications of this category.
				 */
				intentIdentifiers: string[];

				/**
				 * The placeholder text to display when notification previews are disabled for the app.
				 */
				hiddenPreviewsBodyPlaceholder: string;

				/**
				 * Options for how to handle notifications of this type.
				 */
				options: number[];

			}

			/**
			 * The top-level App iOS Notification Center module. It is used to control scheduled notifications
			 * and receive details about the system-wide notification settings.
			 */
			namespace UserNotificationCenter {
				/**
				 * The name of the API that this proxy corresponds to.
				 */
				const apiName: string;

				/**
				 * Fetches the pending notifications asynchronously.
				 */
				function getPendingNotifications(callback: (param0: UserNotificationCallbackResponse) => any): void;

				/**
				 * Fetches the delivered notifications asynchronously.
				 */
				function getDeliveredNotifications(callback: (param0: UserNotificationCallbackResponse) => any): void;

				/**
				 * Removes the specified pending notifications to prevent them from being triggered.
				 * If no notifications are specified, all pending notifications will be removed.
				 */
				function removePendingNotifications(notifications?: ReadonlyArray<UserNotificationDictionary>): void;

				/**
				 * Removes the specified delivered notifications from the notification-center.
				 * If no notifications are specified, all delivered notifications will be removed.
				 */
				function removeDeliveredNotifications(notifications: ReadonlyArray<UserNotificationDictionary>): void;

				/**
				 * Notification types and user notification categories the application is registered to use.
				 */
				function requestUserNotificationSettings(callback: (param0: GetUserNotificationSettings) => any): void;

				/**
				 * Gets the value of the <Titanium.App.iOS.UserNotificationCenter.apiName> property.
				 */
				function getApiName(): string;

			}
		}
	}

	/**
	 * The Calendar module provides an API for accessing the native calendar functionality.
	 */
	namespace Calendar {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Reminder alert delivery method.
		 */
		const METHOD_ALERT: number;

		/**
		 * Reminder default delivery method.
		 */
		const METHOD_DEFAULT: number;

		/**
		 * Reminder email delivery method.
		 */
		const METHOD_EMAIL: number;

		/**
		 * Reminder SMS delivery method.
		 */
		const METHOD_SMS: number;

		/**
		 * Alert dismissed state.
		 */
		const STATE_DISMISSED: number;

		/**
		 * Alert fired state.
		 */
		const STATE_FIRED: number;

		/**
		 * Alert scheduled status.
		 */
		const STATE_SCHEDULED: number;

		/**
		 * Event has no status.
		 */
		const STATUS_NONE: number;

		/**
		 * Event canceled status.
		 */
		const STATUS_CANCELLED: number;

		/**
		 * Event canceled status.
		 */
		const STATUS_CANCELED: number;

		/**
		 * Event confirmed status.
		 */
		const STATUS_CONFIRMED: number;

		/**
		 * Event tentative status.
		 */
		const STATUS_TENTATIVE: number;

		/**
		 * Availability settings are not supported by the event's calendar.
		 */
		const AVAILABILITY_NOTSUPPORTED: number;

		/**
		 * Event has a busy availability setting.
		 */
		const AVAILABILITY_BUSY: number;

		/**
		 * Event has a free availability setting.
		 */
		const AVAILABILITY_FREE: number;

		/**
		 * Event has a tentative availability setting.
		 */
		const AVAILABILITY_TENTATIVE: number;

		/**
		 * Event has a tentative availability setting.
		 */
		const AVAILABILITY_UNAVAILABLE: number;

		/**
		 * A [eventsAuthorization](Titanium.Calendar.eventsAuthorization) value
		 * indicating that the application is authorized to use events in the Calendar.
		 */
		const AUTHORIZATION_AUTHORIZED: number;

		/**
		 * A [eventsAuthorization](Titanium.Calendar.eventsAuthorization) value
		 * indicating that the application is not authorized to use events in the Calendar.
		 */
		const AUTHORIZATION_DENIED: number;

		/**
		 * A [eventsAuthorization](Titanium.Calendar.eventsAuthorization) value
		 * indicating that the application is not authorized to use events in the Calendar.
		 * the user cannot change this application's status.
		 */
		const AUTHORIZATION_RESTRICTED: number;

		/**
		 * A [eventsAuthorization](Titanium.Calendar.eventsAuthorization) value
		 * indicating that the authorization state is unknown.
		 */
		const AUTHORIZATION_UNKNOWN: number;

		/**
		 * A [save](Titanium.Calendar.Event.save)/[remove](Titanium.Calendar.Event.remove) event value,
		 * indicating modifications to this event instance should affect only this instance.
		 */
		const SPAN_THISEVENT: number;

		/**
		 * A [save](Titanium.Calendar.Event.save)/[remove](Titanium.Calendar.Event.remove) event value,
		 * indicating modifications to this event instance should also affect future instances of this event.
		 */
		const SPAN_FUTUREEVENTS: number;

		/**
		 * Indicates a daily recurrence rule for a events reccurance frequency.
		 */
		const RECURRENCEFREQUENCY_DAILY: number;

		/**
		 * Indicates a weekly recurrence rule for a events reccurance frequency.
		 */
		const RECURRENCEFREQUENCY_WEEKLY: number;

		/**
		 * Indicates a monthly recurrence rule for a events reccurance frequency.
		 */
		const RECURRENCEFREQUENCY_MONTHLY: number;

		/**
		 * Indicates a yearly recurrence rule for a events reccurance frequency.
		 */
		const RECURRENCEFREQUENCY_YEARLY: number;

		/**
		 * Event confidential visibility.
		 */
		const VISIBILITY_CONFIDENTIAL: number;

		/**
		 * Event default visibility.
		 */
		const VISIBILITY_DEFAULT: number;

		/**
		 * Event private visibility.
		 */
		const VISIBILITY_PRIVATE: number;

		/**
		 * Event public visibility.
		 */
		const VISIBILITY_PUBLIC: number;

		/**
		 * Attendee status is unknown.
		 */
		const ATTENDEE_STATUS_UNKNOWN: number;

		/**
		 * Attendee status is pending.
		 */
		const ATTENDEE_STATUS_PENDING: number;

		/**
		 * Attendee status is accepted.
		 */
		const ATTENDEE_STATUS_ACCEPTED: number;

		/**
		 * Attendee status is declined.
		 */
		const ATTENDEE_STATUS_DECLINED: number;

		/**
		 * Attendee status is tentative.
		 */
		const ATTENDEE_STATUS_TENTATIVE: number;

		/**
		 * Attendee status is invited.
		 */
		const ATTENDEE_STATUS_INVITED: number;

		/**
		 * There is no Attendee status.
		 */
		const ATTENDEE_STATUS_NONE: number;

		/**
		 * Attendee status is delegated.
		 */
		const ATTENDEE_STATUS_DELEGATED: number;

		/**
		 * Attendee status is in process.
		 */
		const ATTENDEE_STATUS_IN_PROCESS: number;

		/**
		 * Relationship is attendee.
		 */
		const RELATIONSHIP_ATTENDEE: number;

		/**
		 * There is no relationship.
		 */
		const RELATIONSHIP_NONE: number;

		/**
		 * Attendee is organizer.
		 */
		const RELATIONSHIP_ORGANIZER: number;

		/**
		 * Attendee is performer.
		 */
		const RELATIONSHIP_PERFORMER: number;

		/**
		 * Attendee is speaker.
		 */
		const RELATIONSHIP_SPEAKER: number;

		/**
		 * Relationship is unknown.
		 */
		const RELATIONSHIP_UNKNOWN: number;

		/**
		 * Attendee role is unknown.
		 */
		const ATTENDEE_ROLE_UNKNOWN: number;

		/**
		 * Attendee role is optional.
		 */
		const ATTENDEE_ROLE_OPTIONAL: number;

		/**
		 * Attendee role is required.
		 */
		const ATTENDEE_ROLE_REQUIRED: number;

		/**
		 * Attendee role is chair.
		 */
		const ATTENDEE_ROLE_CHAIR: number;

		/**
		 * Attendee is not a participant.
		 */
		const ATTENDEE_ROLE_NON_PARTICIPANT: number;

		/**
		 * Attendee type is unknown.
		 */
		const ATTENDEE_TYPE_UNKNOWN: number;

		/**
		 * Attendee type is person.
		 */
		const ATTENDEE_TYPE_PERSON: number;

		/**
		 * Attendee type is room.
		 */
		const ATTENDEE_TYPE_ROOM: number;

		/**
		 * Attendee type is resource.
		 */
		const ATTENDEE_TYPE_RESOURCE: number;

		/**
		 * There is not attendee type.
		 */
		const ATTENDEE_TYPE_NONE: number;

		/**
		 * Attendee type is required.
		 */
		const ATTENDEE_TYPE_REQUIRED: number;

		/**
		 * Attendee type is group.
		 */
		const ATTENDEE_TYPE_GROUP: number;

		/**
		 * A local calendar source.
		 */
		const SOURCE_TYPE_LOCAL: number;

		/**
		 * A microsoft exchange calendar source.
		 */
		const SOURCE_TYPE_EXCHANGE: number;

		/**
		 * A calDev calendar source.
		 */
		const SOURCE_TYPE_CALDAV: number;

		/**
		 * A mobileMe calendar source.
		 */
		const SOURCE_TYPE_MOBILEME: number;

		/**
		 * A subscribed calendar source.
		 */
		const SOURCE_TYPE_SUBSCRIBED: number;

		/**
		 * A birthday calendar source.
		 */
		const SOURCE_TYPE_BIRTHDAYS: number;

		/**
		 * Returns an authorization constant indicating if the application has access to the events in the EventKit.
		 */
		const eventsAuthorization: number;

		/**
		 * Returns an authorization constant indicating if the application has access to the events in the EventKit.
		 */
		const calendarAuthorization: number;

		/**
		 * All alerts in selected calendars.
		 */
		const allAlerts: Titanium.Calendar.Alert[];

		/**
		 * All calendars known to the native calendar app.
		 */
		const allCalendars: Titanium.Calendar.Calendar[];

		/**
		 * All calendars known to the native calendar app that can add, edit, and
		 * delete items in the calendar.
		 */
		const allEditableCalendars: Titanium.Calendar.Calendar[];

		/**
		 * All calendars selected within the native calendar app, which may be a subset of `allCalendars`.
		 */
		const selectableCalendars: Titanium.Calendar.Calendar[];

		/**
		 * Calendar that events are added to by default, as specified by user settings.
		 */
		const defaultCalendar: Titanium.Calendar.Calendar;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Gets the calendar with the specified identifier.
		 */
		function getCalendarById(id: string): Titanium.Calendar.Calendar;

		/**
		 * Returns `true` if the app has calendar access.
		 */
		function hasCalendarPermissions(): boolean;

		/**
		 * Requests for calendar access.
		 */
		function requestCalendarPermissions(callback: (param0: EventsAuthorizationResponse) => any): void;

		/**
		 * If authorization is unknown, will bring up a dialog requesting permission.
		 */
		function requestEventsAuthorization(callback: (param0: EventsAuthorizationResponse) => any): void;

		/**
		 * Gets the value of the <Titanium.Calendar.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Calendar.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Calendar.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Calendar.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Calendar.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Calendar.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Calendar.eventsAuthorization> property.
		 */
		function getEventsAuthorization(): number;

		/**
		 * Gets the value of the <Titanium.Calendar.calendarAuthorization> property.
		 */
		function getCalendarAuthorization(): number;

		/**
		 * Gets the value of the <Titanium.Calendar.allAlerts> property.
		 */
		function getAllAlerts(): Titanium.Calendar.Alert[];

		/**
		 * Gets the value of the <Titanium.Calendar.allCalendars> property.
		 */
		function getAllCalendars(): Titanium.Calendar.Calendar[];

		/**
		 * Gets the value of the <Titanium.Calendar.allEditableCalendars> property.
		 */
		function getAllEditableCalendars(): Titanium.Calendar.Calendar[];

		/**
		 * Gets the value of the <Titanium.Calendar.selectableCalendars> property.
		 */
		function getSelectableCalendars(): Titanium.Calendar.Calendar[];

		/**
		 * Gets the value of the <Titanium.Calendar.defaultCalendar> property.
		 */
		function getDefaultCalendar(): Titanium.Calendar.Calendar;

		/**
		 * An object that represents a single alert for an event in an calendar.
		 */
		interface Alert extends Titanium.Proxy {
			/**
			 * The absolute date for the alarm.
			 */
			absoluteDate: Date;

			/**
			 * The offset from the start of an event, at which the alarm fires.
			 */
			relativeOffset: number;

			/**
			 * Date/time at which this alert alarm is set to trigger.
			 */
			readonly alarmTime: Date;

			/**
			 * Start date/time for the corresponding event.
			 */
			readonly begin: Date;

			/**
			 * End date/time for the corresponding event.
			 */
			readonly end: Date;

			/**
			 * Identifier of the event for which this alert is set.
			 */
			readonly eventId: number;

			/**
			 * Identifier of this alert.
			 */
			readonly id: string;

			/**
			 * Reminder notice period in minutes, that determines how long prior to the event this alert
			 * should trigger.
			 */
			readonly minutes: number;

			/**
			 * The current state of the alert.
			 */
			readonly state: number;

			/**
			 * Gets the value of the <Titanium.Calendar.Alert.absoluteDate> property.
			 */
			getAbsoluteDate(): Date;

			/**
			 * Sets the value of the <Titanium.Calendar.Alert.absoluteDate> property.
			 */
			setAbsoluteDate(absoluteDate: Date): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Alert.relativeOffset> property.
			 */
			getRelativeOffset(): number;

			/**
			 * Sets the value of the <Titanium.Calendar.Alert.relativeOffset> property.
			 */
			setRelativeOffset(relativeOffset: number): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Alert.alarmTime> property.
			 */
			getAlarmTime(): Date;

			/**
			 * Gets the value of the <Titanium.Calendar.Alert.begin> property.
			 */
			getBegin(): Date;

			/**
			 * Gets the value of the <Titanium.Calendar.Alert.end> property.
			 */
			getEnd(): Date;

			/**
			 * Gets the value of the <Titanium.Calendar.Alert.eventId> property.
			 */
			getEventId(): number;

			/**
			 * Gets the value of the <Titanium.Calendar.Alert.id> property.
			 */
			getId(): string;

			/**
			 * Gets the value of the <Titanium.Calendar.Alert.minutes> property.
			 */
			getMinutes(): number;

			/**
			 * Gets the value of the <Titanium.Calendar.Alert.state> property.
			 */
			getState(): number;

		}
		/**
		 * An object that represents a single attendee of an event.
		 */
		interface Attendee extends Titanium.Proxy {
			/**
			 * Indicates whether this attendee is the event organizer.
			 */
			isOrganizer: boolean;

			/**
			 * The attendee name.
			 */
			name: string;

			/**
			 * The attendee email.
			 */
			email: string;

			/**
			 * The role of the attendee.
			 */
			role: number;

			/**
			 * The type of the attendee.
			 */
			type: number;

			/**
			 * The status of the attendee.
			 */
			status: number;

			/**
			 * Gets the value of the <Titanium.Calendar.Attendee.isOrganizer> property.
			 */
			getIsOrganizer(): boolean;

			/**
			 * Sets the value of the <Titanium.Calendar.Attendee.isOrganizer> property.
			 */
			setIsOrganizer(isOrganizer: boolean): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Attendee.name> property.
			 */
			getName(): string;

			/**
			 * Sets the value of the <Titanium.Calendar.Attendee.name> property.
			 */
			setName(name: string): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Attendee.email> property.
			 */
			getEmail(): string;

			/**
			 * Sets the value of the <Titanium.Calendar.Attendee.email> property.
			 */
			setEmail(email: string): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Attendee.role> property.
			 */
			getRole(): number;

			/**
			 * Sets the value of the <Titanium.Calendar.Attendee.role> property.
			 */
			setRole(role: number): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Attendee.type> property.
			 */
			getType(): number;

			/**
			 * Sets the value of the <Titanium.Calendar.Attendee.type> property.
			 */
			setType(type: number): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Attendee.status> property.
			 */
			getStatus(): number;

			/**
			 * Sets the value of the <Titanium.Calendar.Attendee.status> property.
			 */
			setStatus(status: number): void;

		}
		/**
		 * An object that represents a single calendar.
		 */
		interface Calendar extends Titanium.Proxy {
			/**
			 * Indicates whether this calendar can be edited or deleted.
			 */
			readonly hidden: boolean;

			/**
			 * Identifier of this calendar.
			 */
			readonly id: string;

			/**
			 * Display name of this calendar.
			 */
			readonly name: string;

			/**
			 * Indicates whether the calendar is selected.
			 */
			readonly selected: boolean;

			/**
			 * Displays the source title.
			 */
			readonly sourceTitle: string;

			/**
			 * Displays the source type.
			 */
			readonly sourceType: number;

			/**
			 * Displays the source identifier.
			 */
			readonly sourceIdentifier: string;

			/**
			 * Creates an event in this calendar.
			 */
			createEvent(properties: any): Titanium.Calendar.Event;

			/**
			 * Gets the event with the specified identifier.
			 */
			getEventById(id: number): Titanium.Calendar.Event;

			/**
			 * Gets events that occur between two dates.
			 */
			getEventsBetweenDates(date1: Date, date2: Date | string): Titanium.Calendar.Event[];

			/**
			 * Gets events that occur between two dates.
			 */
			getEventsBetweenDates(date1: string, date2: Date | string): Titanium.Calendar.Event[];

			/**
			 * Gets events that occur between two dates.
			 */
			getEventsBetweenDates(date1: Date | string, date2: Date): Titanium.Calendar.Event[];

			/**
			 * Gets events that occur between two dates.
			 */
			getEventsBetweenDates(date1: Date | string, date2: string): Titanium.Calendar.Event[];

			/**
			 * Gets events that occur on a specified date.
			 */
			getEventsInDate(year: number, month: number, day: number): Titanium.Calendar.Event[];

			/**
			 * Gets events that occur during a specified month.
			 */
			getEventsInMonth(year: number, month: number): Titanium.Calendar.Event[];

			/**
			 * Gets all events that occur during a specified year.
			 */
			getEventsInYear(year: number): Titanium.Calendar.Event[];

			/**
			 * Gets the value of the <Titanium.Calendar.Calendar.hidden> property.
			 */
			getHidden(): boolean;

			/**
			 * Gets the value of the <Titanium.Calendar.Calendar.id> property.
			 */
			getId(): string;

			/**
			 * Gets the value of the <Titanium.Calendar.Calendar.name> property.
			 */
			getName(): string;

			/**
			 * Gets the value of the <Titanium.Calendar.Calendar.selected> property.
			 */
			getSelected(): boolean;

			/**
			 * Gets the value of the <Titanium.Calendar.Calendar.sourceTitle> property.
			 */
			getSourceTitle(): string;

			/**
			 * Gets the value of the <Titanium.Calendar.Calendar.sourceType> property.
			 */
			getSourceType(): number;

			/**
			 * Gets the value of the <Titanium.Calendar.Calendar.sourceIdentifier> property.
			 */
			getSourceIdentifier(): string;

		}
		/**
		 * An object that represents a single event in a calendar.
		 */
		interface Event extends Titanium.Proxy {
			/**
			 * Alarms associated with the calendar item, as an array of <Titanium.Calendar.Alert> objects.
			 */
			alerts: Titanium.Calendar.Alert[];

			/**
			 * Indicates whether this event is all day.
			 */
			allDay: boolean;

			/**
			 * Start date/time of this event.
			 */
			begin: Date;

			/**
			 * Notes for this event.
			 */
			notes: string;

			/**
			 * Description of this event.
			 */
			readonly description: string;

			/**
			 * End date/time of this event.
			 */
			end: Date;

			/**
			 * Extended properties of this event.
			 */
			readonly extendedProperties: any;

			/**
			 * Indicates whether an alarm is scheduled for this event.
			 */
			readonly hasAlarm: boolean;

			/**
			 * Identifier of this event.
			 */
			readonly id: string;

			/**
			 * Location of this event.
			 */
			location: string;

			/**
			 * Existing reminders for this event.
			 */
			readonly reminders: Titanium.Calendar.Reminder[];

			/**
			 * Status of this event.
			 */
			readonly status: number;

			/**
			 * Availability of this event.
			 */
			readonly availability: number;

			/**
			 * Boolean value that indicates whether an event is a detached instance of a
			 * repeating event.
			 */
			readonly isDetached: boolean;

			/**
			 * Title of this event.
			 */
			title: string;

			/**
			 * The recurrence rules for the calendar item.
			 */
			recurrenceRules: Titanium.Calendar.RecurrenceRule[];

			/**
			 * Visibility of this event.
			 */
			readonly visibility: number;

			/**
			 * The list of event attendees. This list will be empty if the event has no attendees.
			 */
			readonly attendees: Titanium.Calendar.Attendee[];

			/**
			 * Creates an alert for this event.
			 */
			createAlert(data: any): Titanium.Calendar.Alert;

			/**
			 * Creates a reminder for this event.
			 */
			createReminder(data: any): Titanium.Calendar.Reminder;

			/**
			 * Gets the value of the specified extended property.
			 */
			getExtendedProperty(name: string): string;

			/**
			 * Sets the value of the specified extended property.
			 */
			setExtendedProperty(name: string, value: string): void;

			/**
			 * Creates an recurrence pattern for a recurring event.
			 * All of the properties for the recurrence rule must be set during creation.
			 * The recurrence rule properties cannot be modified.
			 */
			createRecurrenceRule(data: any): Titanium.Calendar.RecurrenceRule;

			/**
			 * Saves changes to an event permanently.
			 */
			save(span: number): boolean;

			/**
			 * Removes an event from the event store.
			 */
			remove(span: number): boolean;

			/**
			 * Updates the event's data with the current information in the Calendar database.
			 */
			refresh(): boolean;

			/**
			 * Adds a recurrence rule to the recurrence rule array.
			 */
			addRecurrenceRule(rule: Titanium.Calendar.RecurrenceRule): void;

			/**
			 * Removes a recurrence rule to the recurrence rule array.
			 */
			removeRecurrenceRule(rule: Titanium.Calendar.RecurrenceRule): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.alerts> property.
			 */
			getAlerts(): Titanium.Calendar.Alert[];

			/**
			 * Sets the value of the <Titanium.Calendar.Event.alerts> property.
			 */
			setAlerts(alerts: ReadonlyArray<Titanium.Calendar.Alert>): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.allDay> property.
			 */
			getAllDay(): boolean;

			/**
			 * Sets the value of the <Titanium.Calendar.Event.allDay> property.
			 */
			setAllDay(allDay: boolean): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.begin> property.
			 */
			getBegin(): Date;

			/**
			 * Sets the value of the <Titanium.Calendar.Event.begin> property.
			 */
			setBegin(begin: Date): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.notes> property.
			 */
			getNotes(): string;

			/**
			 * Sets the value of the <Titanium.Calendar.Event.notes> property.
			 */
			setNotes(notes: string): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.description> property.
			 */
			getDescription(): string;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.end> property.
			 */
			getEnd(): Date;

			/**
			 * Sets the value of the <Titanium.Calendar.Event.end> property.
			 */
			setEnd(end: Date): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.extendedProperties> property.
			 */
			getExtendedProperties(): any;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.hasAlarm> property.
			 */
			getHasAlarm(): boolean;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.id> property.
			 */
			getId(): string;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.location> property.
			 */
			getLocation(): string;

			/**
			 * Sets the value of the <Titanium.Calendar.Event.location> property.
			 */
			setLocation(location: string): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.reminders> property.
			 */
			getReminders(): Titanium.Calendar.Reminder[];

			/**
			 * Gets the value of the <Titanium.Calendar.Event.status> property.
			 */
			getStatus(): number;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.availability> property.
			 */
			getAvailability(): number;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.isDetached> property.
			 */
			getIsDetached(): boolean;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.title> property.
			 */
			getTitle(): string;

			/**
			 * Sets the value of the <Titanium.Calendar.Event.title> property.
			 */
			setTitle(title: string): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.recurrenceRules> property.
			 */
			getRecurrenceRules(): Titanium.Calendar.RecurrenceRule[];

			/**
			 * Sets the value of the <Titanium.Calendar.Event.recurrenceRules> property.
			 */
			setRecurrenceRules(recurrenceRules: ReadonlyArray<Titanium.Calendar.RecurrenceRule>): void;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.visibility> property.
			 */
			getVisibility(): number;

			/**
			 * Gets the value of the <Titanium.Calendar.Event.attendees> property.
			 */
			getAttendees(): Titanium.Calendar.Attendee[];

		}
		/**
		 * An object that is used to describe the recurrence pattern for a recurring event.
		 */
		interface RecurrenceRule extends Titanium.Proxy {
			/**
			 * Identifier for the recurrence rule's calendar.
			 */
			readonly calendarID: string;

			/**
			 * Frequency of the recurrence rule.
			 */
			readonly frequency: number;

			/**
			 * The interval between instances of this recurrence. For example, a weekly
			 * recurrence rule with an interval of 2 occurs every other week. Must be greater than 0.
			 */
			readonly interval: number;

			/**
			 * The days of the week that the event occurs, as an Dictionay of `daysOfWeek` and `Week`.
			 */
			readonly daysOfTheWeek: daysOfTheWeekDictionary;

			/**
			 * The days of the month that the event occurs, as an array of number objects.
			 * Values can be from 1 to 31 and from -1 to -31. This parameter is only valid for
			 * recurrence rules of type
			 * [RECURRENCEFREQUENCY_MONTHLY](Titanium.Calendar.RECURRENCEFREQUENCY_MONTHLY).
			 */
			readonly daysOfTheMonth: number[];

			/**
			 * The months of the year that the event occurs, as an array of Number objects.
			 * Values can be from 1 to 12. This parameter is only valid for recurrence rules of
			 * type [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
			 */
			readonly monthsOfTheYear: number[];

			/**
			 * The weeks of the year that the event occurs, as an array of number objects.
			 * Values can be from 1 to 53 and from -1 to -53. This parameter is only valid for
			 * recurrence rules of type [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
			 */
			readonly weeksOfTheYear: number[];

			/**
			 * The days of the year that the event occurs, as an array of number objects.
			 * Values can be from 1 to 366 and from -1 to -366. This parameter is only valid for
			 * recurrence rules of type [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
			 */
			readonly daysOfTheYear: number[];

			/**
			 * An array of ordinal numbers that filters which recurrences to include in the
			 * recurrence rule's frequency. For example, a yearly recurrence rule that has a
			 * [daysOfTheWeek](Titanium.Calendar.RecurrenceRule.daysOfTheWeek) value that specifies
			 * Monday through Friday, and a `setPositions` array containing 2 and -1, occurs only
			 * on the second weekday and last weekday of every year.
			 */
			readonly setPositions: number[];

			/**
			 * End of a recurrence rule.
			 */
			readonly end: recurrenceEndDictionary;

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.calendarID> property.
			 */
			getCalendarID(): string;

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.frequency> property.
			 */
			getFrequency(): number;

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.interval> property.
			 */
			getInterval(): number;

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.daysOfTheWeek> property.
			 */
			getDaysOfTheWeek(): daysOfTheWeekDictionary;

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.daysOfTheMonth> property.
			 */
			getDaysOfTheMonth(): number[];

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.monthsOfTheYear> property.
			 */
			getMonthsOfTheYear(): number[];

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.weeksOfTheYear> property.
			 */
			getWeeksOfTheYear(): number[];

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.daysOfTheYear> property.
			 */
			getDaysOfTheYear(): number[];

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.setPositions> property.
			 */
			getSetPositions(): number[];

			/**
			 * Gets the value of the <Titanium.Calendar.RecurrenceRule.end> property.
			 */
			getEnd(): recurrenceEndDictionary;

		}
		/**
		 * An object that represents a single reminder for an event in a calendar.
		 */
		interface Reminder extends Titanium.Proxy {
			/**
			 * Identifier of this reminder.
			 */
			readonly id: string;

			/**
			 * Method by which this reminder will be delivered.
			 */
			readonly method: number;

			/**
			 * Reminder notice period in minutes, that determines how long prior to the event this reminder
			 * should trigger.
			 */
			readonly minutes: number;

			/**
			 * Gets the value of the <Titanium.Calendar.Reminder.id> property.
			 */
			getId(): string;

			/**
			 * Gets the value of the <Titanium.Calendar.Reminder.method> property.
			 */
			getMethod(): number;

			/**
			 * Gets the value of the <Titanium.Calendar.Reminder.minutes> property.
			 */
			getMinutes(): number;

		}
	}

	/**
	 * A module for translating between primitive types and raw byte streams.
	 */
	namespace Codec {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * ASCII character encoding..
		 */
		const CHARSET_ASCII: string;

		/**
		 * ISO 8859-1 (Latin-1) character encoding.
		 */
		const CHARSET_ISO_LATIN_1: string;

		/**
		 * UTF-8 character encoding.
		 */
		const CHARSET_UTF8: string;

		/**
		 * UTF-16 character encoding with default byte order.
		 */
		const CHARSET_UTF16: string;

		/**
		 * UTF-16 character encoding with big endian byte order.
		 */
		const CHARSET_UTF16BE: string;

		/**
		 * UTF-16 character encoding with little endian byte order.
		 */
		const CHARSET_UTF16LE: string;

		/**
		 * 8-bit integer encoding type.
		 */
		const TYPE_BYTE: string;

		/**
		 * 16-bit integer encoding type.
		 */
		const TYPE_SHORT: string;

		/**
		 * 32-bit integer encoding type.
		 */
		const TYPE_INT: string;

		/**
		 * 32-bit single precision floating-point type.
		 */
		const TYPE_FLOAT: string;

		/**
		 * 64-bit integer encoding type.
		 */
		const TYPE_LONG: string;

		/**
		 * 64-bit double precision floating-point type.
		 */
		const TYPE_DOUBLE: string;

		/**
		 * Big endian (network) byte order -- that is, the most significant byte first.
		 */
		const BIG_ENDIAN: number;

		/**
		 * Little endian byte order -- that is, the least significant byte first.
		 */
		const LITTLE_ENDIAN: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Get the OS native byte order (either <Titanium.Codec.BIG_ENDIAN> or
		 * <Titanium.Codec.LITTLE_ENDIAN>).
		 */
		function getNativeByteOrder(): number;

		/**
		 * Encodes a number and writes it to a buffer.
		 */
		function encodeNumber(options: EncodeNumberDict): number;

		/**
		 * Decodes a number from the `source` buffer using the specified data type.
		 */
		function decodeNumber(options: DecodeNumberDict): number;

		/**
		 * Encodes a string into a series of bytes in a buffer using the specified character set.
		 */
		function encodeString(options: any): number;

		/**
		 * Decodes the source buffer into a String using the supplied character set.
		 */
		function decodeString(options: DecodeStringDict): string;

		/**
		 * Gets the value of the <Titanium.Codec.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Codec.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Codec.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Codec.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Codec.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Codec.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

	}

	/**
	 * The top-level Contacts module, used for accessing and modifying the system contacts address book.
	 */
	namespace Contacts {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Specifies that a contact is an organization.
		 */
		const CONTACTS_KIND_ORGANIZATION: number;

		/**
		 * Specifies that a contact is a person.
		 */
		const CONTACTS_KIND_PERSON: number;

		/**
		 * Specifies that group members will be sorted by first name.
		 */
		const CONTACTS_SORT_FIRST_NAME: number;

		/**
		 * Specifies that group members will be sorted by last name.
		 */
		const CONTACTS_SORT_LAST_NAME: number;

		/**
		 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
		 * indicating that the application is authorized to use the address book.
		 */
		const AUTHORIZATION_AUTHORIZED: number;

		/**
		 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
		 * indicating that the application is not authorized to use the address book.
		 */
		const AUTHORIZATION_DENIED: number;

		/**
		 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
		 * indicating that the application is not authorized to use the address book *and*
		 * the user cannot change this application's status.
		 */
		const AUTHORIZATION_RESTRICTED: number;

		/**
		 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
		 * indicating that the authorization state is unknown.
		 */
		const AUTHORIZATION_UNKNOWN: number;

		/**
		 * Returns an authorization constant indicating if the application has access to the address book.
		 */
		const contactsAuthorization: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Creates and returns an instance of <Titanium.Contacts.Group>.
		 */
		function createGroup(parameters?: any): Titanium.Contacts.Group;

		/**
		 * Creates and returns an instance of <Titanium.Contacts.Person>, and commits all pending
		 * changes to the underlying contacts database.
		 */
		function createPerson(parameters?: any): Titanium.Contacts.Person;

		/**
		 * Gets all groups.
		 */
		function getAllGroups(): Titanium.Contacts.Group[];

		/**
		 * Gets all people, unless a limit is specified.
		 */
		function getAllPeople(limit: number): Titanium.Contacts.Person[];

		/**
		 * Gets the group with the specified identifier.
		 */
		function getGroupByID(id: number): Titanium.Contacts.Group;

		/**
		 * Gets the group with the specified identifier.
		 */
		function getGroupByIdentifier(id: string): Titanium.Contacts.Group;

		/**
		 * Gets people with a `firstName`, `middleName` or `lastName` field, or a combination
		 * of these fields, that match the specified name.
		 */
		function getPeopleWithName(name: string): Titanium.Contacts.Person[];

		/**
		 * Gets the person with the specified identifier.
		 */
		function getPersonByID(id: number): Titanium.Contacts.Person;

		/**
		 * Gets the person with the specified identifier.
		 */
		function getPersonByIdentifier(id: number): Titanium.Contacts.Person;

		/**
		 * Removes a group from the address book.
		 */
		function removeGroup(group: Titanium.Contacts.Group): void;

		/**
		 * Removes a contact from the address book.
		 */
		function removePerson(person: Titanium.Contacts.Person): void;

		/**
		 * Reverts all changes made by the previous save to the address book. Deprecated for >= iOS9.
		 */
		function revert(): void;

		/**
		 * Commits all pending changes to the underlying contacts database.
		 */
		function save(contacts: ReadonlyArray<Titanium.Contacts.Person>): void;

		/**
		 * Displays a picker that allows a person to be selected.
		 */
		function showContacts(params: showContactsParams): void;

		/**
		 * Returns `true` if the app has contacts access.
		 */
		function hasContactsPermissions(): boolean;

		/**
		 * Requests for contacts access.
		 */
		function requestContactsPermissions(callback: (param0: ContactsAuthorizationResponse) => any): void;

		/**
		 * If authorization is unknown, will bring up a dialog requesting permission.
		 */
		function requestAuthorization(callback: (param0: ContactsAuthorizationResponse) => any): void;

		/**
		 * Gets the value of the <Titanium.Contacts.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Contacts.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Contacts.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Contacts.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Contacts.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Contacts.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Contacts.contactsAuthorization> property.
		 */
		function getContactsAuthorization(): number;

		/**
		 * An object which represents a group in the system contacts address book.
		 */
		interface Group extends Titanium.Proxy {
			/**
			 * Name of this group.
			 */
			name: string;

			/**
			 * Record identifier of the group. Single value. Deprecated for iOS 9 and later.
			 */
			recordId: number;

			/**
			 * Identifier of the group.
			 */
			readonly identifier: string;

			/**
			 * Adds a person to this group.
			 */
			add(person: Titanium.Contacts.Person): void;

			/**
			 * Gets people that are members of this group.
			 */
			members(): Titanium.Contacts.Person[];

			/**
			 * Removes a person from this group. For >= iOS9, it is not
			 * required to call <Titanium.Contacts.save> after calling this method.
			 */
			remove(person: Titanium.Contacts.Person): void;

			/**
			 * Gets people that are members of this group, sorted in the specified order.
			 */
			sortedMembers(sortBy: number): Titanium.Contacts.Person[];

			/**
			 * Gets the value of the <Titanium.Contacts.Group.name> property.
			 */
			getName(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Group.name> property.
			 */
			setName(name: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Group.recordId> property.
			 */
			getRecordId(): number;

			/**
			 * Sets the value of the <Titanium.Contacts.Group.recordId> property.
			 */
			setRecordId(recordId: number): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Group.identifier> property.
			 */
			getIdentifier(): string;

		}
		/**
		 * An object that represents a contact record for a person or organization in the system contacts
		 * address book.
		 */
		interface Person extends Titanium.Proxy {
			/**
			 * Addresses for the person. Multi-value. Read-only on Android.
			 */
			address: any;

			/**
			 * Date of birth of the person. Single value.
			 */
			birthday: string;

			/**
			 * Alternate birthday of the person. Single Dictionary.
			 */
			alternateBirthday: any;

			/**
			 * Date and time that the person record was created. Single value. Deprecated since iOS 9.
			 */
			readonly created: string;

			/**
			 * Dates associated with the person. Multi-value.
			 */
			date: any;

			/**
			 * Department of the person. Single value.
			 */
			department: string;

			/**
			 * Email addresses for the person. Multi-value. Read-only on Android.
			 */
			email: any;

			/**
			 * First name of the person. Single value.
			 */
			firstName: string;

			/**
			 * Phonetic first name of the person.  Single value.
			 */
			firstPhonetic: string;

			/**
			 * Localized full name of the person. Single value. Read-only on Android.
			 */
			readonly fullName: string;

			/**
			 * Record identifier of the person. Single value.
			 */
			readonly id: number;

			/**
			 * Identifier of the person.
			 */
			readonly identifier: string;

			/**
			 * Image for the person. Single value. Read-only for >= iOS9
			 */
			image: Titanium.Blob;

			/**
			 * Instant messenger information of the person. Multi-value.
			 */
			instantMessage: any;

			/**
			 * Social profile information of the person. Multi-value.
			 */
			socialProfile: any;

			/**
			 * Job title of the person. Single value.
			 */
			jobTitle: string;

			/**
			 * Determines the type of information the person record contains; either person or organization.
			 * Read-only on Android.
			 */
			kind: number;

			/**
			 * Last name of the person. Single value.
			 */
			lastName: string;

			/**
			 * Phonetic last name of the person. Single value.
			 */
			lastPhonetic: string;

			/**
			 * Middle name of the person. Single value.
			 */
			middleName: string;

			/**
			 * Phonetic middle name of the person. Single value.
			 */
			middlePhonetic: string;

			/**
			 * Date and time that the person record was last modified. Single value. Deprecated since iOS 9.
			 */
			readonly modified: string;

			/**
			 * Nickname of the person. Single value.
			 */
			nickname: string;

			/**
			 * Notes for the person. Single value.
			 */
			note: string;

			/**
			 * Organization to which the person belongs. Single value.
			 */
			organization: string;

			/**
			 * Phone numbers for the person. Multi-value. Read-only on Android.
			 */
			phone: any;

			/**
			 * Prefix for the person. Single value.
			 */
			readonly prefix: string;

			/**
			 * Record identifier of the person. Single value. Deprecated since iOS 9.
			 */
			recordId: number;

			/**
			 * Names of people to which the person is related. Multi-value.
			 */
			relatedNames: any;

			/**
			 * Suffix for the person. Single value.
			 */
			readonly suffix: string;

			/**
			 * URLs of webpages associated with the person. Multi-value.
			 */
			url: any;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.address> property.
			 */
			getAddress(): any;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.address> property.
			 */
			setAddress(address: any): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.birthday> property.
			 */
			getBirthday(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.birthday> property.
			 */
			setBirthday(birthday: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.alternateBirthday> property.
			 */
			getAlternateBirthday(): any;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.alternateBirthday> property.
			 */
			setAlternateBirthday(alternateBirthday: any): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.created> property.
			 */
			getCreated(): string;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.date> property.
			 */
			getDate(): any;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.date> property.
			 */
			setDate(date: any): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.department> property.
			 */
			getDepartment(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.department> property.
			 */
			setDepartment(department: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.email> property.
			 */
			getEmail(): any;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.email> property.
			 */
			setEmail(email: any): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.firstName> property.
			 */
			getFirstName(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.firstName> property.
			 */
			setFirstName(firstName: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.firstPhonetic> property.
			 */
			getFirstPhonetic(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.firstPhonetic> property.
			 */
			setFirstPhonetic(firstPhonetic: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.fullName> property.
			 */
			getFullName(): string;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.id> property.
			 */
			getId(): number;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.identifier> property.
			 */
			getIdentifier(): string;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.image> property.
			 */
			getImage(): Titanium.Blob;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.image> property.
			 */
			setImage(image: Titanium.Blob): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.instantMessage> property.
			 */
			getInstantMessage(): any;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.instantMessage> property.
			 */
			setInstantMessage(instantMessage: any): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.socialProfile> property.
			 */
			getSocialProfile(): any;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.socialProfile> property.
			 */
			setSocialProfile(socialProfile: any): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.jobTitle> property.
			 */
			getJobTitle(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.jobTitle> property.
			 */
			setJobTitle(jobTitle: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.kind> property.
			 */
			getKind(): number;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.kind> property.
			 */
			setKind(kind: number): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.lastName> property.
			 */
			getLastName(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.lastName> property.
			 */
			setLastName(lastName: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.lastPhonetic> property.
			 */
			getLastPhonetic(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.lastPhonetic> property.
			 */
			setLastPhonetic(lastPhonetic: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.middleName> property.
			 */
			getMiddleName(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.middleName> property.
			 */
			setMiddleName(middleName: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.middlePhonetic> property.
			 */
			getMiddlePhonetic(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.middlePhonetic> property.
			 */
			setMiddlePhonetic(middlePhonetic: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.modified> property.
			 */
			getModified(): string;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.nickname> property.
			 */
			getNickname(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.nickname> property.
			 */
			setNickname(nickname: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.note> property.
			 */
			getNote(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.note> property.
			 */
			setNote(note: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.organization> property.
			 */
			getOrganization(): string;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.organization> property.
			 */
			setOrganization(organization: string): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.phone> property.
			 */
			getPhone(): any;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.phone> property.
			 */
			setPhone(phone: any): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.prefix> property.
			 */
			getPrefix(): string;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.recordId> property.
			 */
			getRecordId(): number;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.recordId> property.
			 */
			setRecordId(recordId: number): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.relatedNames> property.
			 */
			getRelatedNames(): any;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.relatedNames> property.
			 */
			setRelatedNames(relatedNames: any): void;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.suffix> property.
			 */
			getSuffix(): string;

			/**
			 * Gets the value of the <Titanium.Contacts.Person.url> property.
			 */
			getUrl(): any;

			/**
			 * Sets the value of the <Titanium.Contacts.Person.url> property.
			 */
			setUrl(url: any): void;

		}
	}

	/**
	 * The top-level `Database` module, used for creating and accessing the
	 * in-application SQLite database.
	 */
	namespace Database {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Constant for requesting a column's value returned in double form.
		 */
		const FIELD_TYPE_DOUBLE: number;

		/**
		 * Constant for requesting a column's value returned in float form.
		 */
		const FIELD_TYPE_FLOAT: number;

		/**
		 * Constant for requesting a column's value returned in integer form.
		 */
		const FIELD_TYPE_INT: number;

		/**
		 * Constant for requesting a column's value returned in string form.
		 */
		const FIELD_TYPE_STRING: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Installs an SQLite database to device's internal storage.
		 */
		function install(path: string, dbName: string): Titanium.Database.DB;

		/**
		 * Opens an SQLite database.
		 */
		function open(dbName: string): Titanium.Database.DB;

		/**
		 * Gets the value of the <Titanium.Database.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Database.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Database.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Database.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Database.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Database.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * The `Database` instance returned by <Titanium.Database.open> or <Titanium.Database.install>.
		 */
		interface DB extends Titanium.Proxy {
			/**
			 * A `File` object representing the file where this database is stored. Must only be used for
			 * setting file properties.
			 */
			readonly file: Titanium.Filesystem.File;

			/**
			 * The identifier of the last populated row.
			 */
			lastInsertRowId: number;

			/**
			 * The name of the database.
			 */
			name: string;

			/**
			 * The number of rows affected by the last query.
			 */
			rowsAffected: number;

			/**
			 * Closes the database and releases resources from memory. Once closed, this instance is no
			 * longer valid and should not be used. On iOS, also closes all <Titanium.Database.ResultSet>
			 * instances that exist.
			 */
			close(): void;

			/**
			 * Executes an SQL statement against the database and returns a `ResultSet`.
			 */
			execute(sql: string, vararg?: string): Titanium.Database.ResultSet;

			/**
			 * Executes an SQL statement against the database and returns a `ResultSet`.
			 */
			execute(sql: string, vararg?: ReadonlyArray<string>): Titanium.Database.ResultSet;

			/**
			 * Executes an SQL statement against the database and returns a `ResultSet`.
			 */
			execute(sql: string, vararg?: any): Titanium.Database.ResultSet;

			/**
			 * Executes an SQL statement against the database and returns a `ResultSet`.
			 */
			execute(sql: string, vararg?: ReadonlyArray<any>): Titanium.Database.ResultSet;

			/**
			 * Removes the database files for this instance from disk. WARNING: this is a destructive
			 * operation and cannot be reversed. All data in the database will be lost; use with caution.
			 */
			remove(): void;

			/**
			 * Gets the value of the <Titanium.Database.DB.file> property.
			 */
			getFile(): Titanium.Filesystem.File;

			/**
			 * Gets the value of the <Titanium.Database.DB.lastInsertRowId> property.
			 */
			getLastInsertRowId(): number;

			/**
			 * Sets the value of the <Titanium.Database.DB.lastInsertRowId> property.
			 */
			setLastInsertRowId(lastInsertRowId: number): void;

			/**
			 * Gets the value of the <Titanium.Database.DB.name> property.
			 */
			getName(): string;

			/**
			 * Sets the value of the <Titanium.Database.DB.name> property.
			 */
			setName(name: string): void;

			/**
			 * Gets the value of the <Titanium.Database.DB.rowsAffected> property.
			 */
			getRowsAffected(): number;

			/**
			 * Sets the value of the <Titanium.Database.DB.rowsAffected> property.
			 */
			setRowsAffected(rowsAffected: number): void;

		}
		/**
		 * The ResultSet instance returned by <Titanium.Database.DB.execute>.
		 */
		interface ResultSet extends Titanium.Proxy {
			/**
			 * The number of columns in this result set.
			 */
			readonly fieldCount: number;

			/**
			 * The number of rows in this result set.
			 */
			readonly rowCount: number;

			/**
			 * Indicates whether the current row is valid.
			 */
			readonly validRow: boolean;

			/**
			 * Closes this result set and release resources. Once closed, the result set must no longer
			 * be used.
			 */
			close(): void;

			/**
			 * Retrieves the value for the specified field in the current row,
			 * and casts it to the specified type (String, Integer, Float or Double.)
			 */
			field(index: number, type?: number): string | number | Titanium.Blob;

			/**
			 * Retrieves the value for the specified field in the current row,
			 * and casts it to the specified type (String, Integer, Float or Double.)
			 */
			fieldByName(name: string, type?: number): string | number | Titanium.Blob;

			/**
			 * Returns the field name for the specified field index.
			 */
			fieldName(index: number): string;

			/**
			 * Returns the field name for the specified field index.
			 */
			getFieldName(index: number): string;

			/**
			 * Returns whether the current row is valid.
			 */
			isValidRow(): boolean;

			/**
			 * Advances to the next row in the result set and returns `true` if one exists,
			 * or `false` otherwise.
			 */
			next(): boolean;

			/**
			 * Gets the value of the <Titanium.Database.ResultSet.fieldCount> property.
			 */
			getFieldCount(): number;

			/**
			 * Gets the value of the <Titanium.Database.ResultSet.rowCount> property.
			 */
			getRowCount(): number;

			/**
			 * Gets the value of the <Titanium.Database.ResultSet.validRow> property.
			 */
			getValidRow(): boolean;

		}
	}

	/**
	 * The top level filesystem module, used to access files and directories on the device.
	 */
	namespace Filesystem {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Constant for append mode for file operations.
		 */
		const MODE_APPEND: number;

		/**
		 * Constant for read mode for file operations.
		 */
		const MODE_READ: number;

		/**
		 * Constant for write mode for file operations.
		 */
		const MODE_WRITE: number;

		/**
		 * Constant used to set protection key to NSFileProtectionNone in file attributes.
		 */
		const IOS_FILE_PROTECTION_NONE: string;

		/**
		 * Constant used to set protection key to NSFileProtectionComplete in file attributes.
		 */
		const IOS_FILE_PROTECTION_COMPLETE: string;

		/**
		 * Constant used to set protection key to NSFileProtectionCompleteUnlessOpen in file attributes.
		 */
		const IOS_FILE_PROTECTION_COMPLETE_UNLESS_OPEN: string;

		/**
		 * Constant used to set protection key to NSFileProtectionCompleteUntilFirstUserAuthentication in file attributes.
		 */
		const IOS_FILE_PROTECTION_COMPLETE_UNTIL_FIRST_USER_AUTHENTICATION: string;

		/**
		 * Path to the application's internal cache directory.
		 */
		const applicationCacheDirectory: string;

		/**
		 * Path to the application's data directory.
		 */
		const applicationDataDirectory: string;

		/**
		 * Path to the iOS application directory.
		 */
		const applicationDirectory: string;

		/**
		 * Path to the application support directory.
		 */
		const applicationSupportDirectory: string;

		/**
		 * Path to a directory on removable storage, such as SD card.
		 */
		const externalStorageDirectory: string;

		/**
		 * Platform-specific line ending constant.
		 */
		const lineEnding: string;

		/**
		 * Path to the application's resource directory.
		 */
		const resourcesDirectory: string;

		/**
		 * Path to the application's raw resource directory.
		 */
		const resRawDirectory: string;

		/**
		 * Platform-specific path separator constant.
		 */
		const separator: string;

		/**
		 * Path for the application's temporary directory.
		 */
		const tempDirectory: string;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Creates a temporary directory and returns a [File](Titanium.Filesystem.File) object representing the new directory.
		 */
		function createTempDirectory(): Titanium.Filesystem.File;

		/**
		 * Creates a temporary file and returns a [File](Titanium.Filesystem.File) object representing the new file.
		 */
		function createTempFile(): Titanium.Filesystem.File;

		/**
		 * Returns a `File` object representing the file identified by the path arguments.
		 */
		function getFile(...paths: string[]): Titanium.Filesystem.File;

		/**
		 * Returns a `File` object representing the file identified by the path arguments.
		 */
		function getFile(...paths: string[]): Titanium.Filesystem.File;

		/**
		 * Returns a `Blob` object representing the asset catalog image identified by the path arguments.
		 */
		function getAsset(path: string): Titanium.Blob;

		/**
		 * Returns `true` if the device supports external storage *and* the external storage device is mounted.
		 */
		function isExternalStoragePresent(): boolean;

		/**
		 * Returns `true` if the app has storage permissions.
		 */
		function hasStoragePermissions(): boolean;

		/**
		 * Requests for storage permissions
		 */
		function requestStoragePermissions(callback: (param0: RequestStorageAccessResult) => any): void;

		/**
		 * Opens file using the <Titanium.IOStream> interface.
		 */
		function openStream(mode: number, path: string): Titanium.Filesystem.FileStream;

		/**
		 * Returns the path to the container directory associated with the specified security application group ID.
		 */
		function directoryForSuite(suiteName: string): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Filesystem.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Filesystem.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Filesystem.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Filesystem.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Filesystem.applicationCacheDirectory> property.
		 */
		function getApplicationCacheDirectory(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.applicationDataDirectory> property.
		 */
		function getApplicationDataDirectory(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.applicationDirectory> property.
		 */
		function getApplicationDirectory(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.applicationSupportDirectory> property.
		 */
		function getApplicationSupportDirectory(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.externalStorageDirectory> property.
		 */
		function getExternalStorageDirectory(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.lineEnding> property.
		 */
		function getLineEnding(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.resourcesDirectory> property.
		 */
		function getResourcesDirectory(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.resRawDirectory> property.
		 */
		function getResRawDirectory(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.separator> property.
		 */
		function getSeparator(): string;

		/**
		 * Gets the value of the <Titanium.Filesystem.tempDirectory> property.
		 */
		function getTempDirectory(): string;

		/**
		 * Object representing a path to a file or directory in the device's persistent storage.
		 */
		interface File extends Titanium.Proxy {
			/**
			 * `true` if the file is executable.
			 */
			readonly executable: boolean;

			/**
			 * Set to `true` if the file is hidden.
			 */
			hidden: boolean;

			/**
			 * Name of the file.
			 */
			readonly name: string;

			/**
			 * Native path associated with this file object, as a file URL.
			 */
			readonly nativePath: string;

			/**
			 * A `File` object representing the parent directory of the file identified by this object.
			 */
			readonly parent: Titanium.Filesystem.File;

			/**
			 * `true` if the file identified by this object is read-only.
			 */
			readonly readonly: boolean;

			/**
			 * Size, in bytes, of the file identified by this object.
			 */
			readonly size: number;

			/**
			 * Value indicating whether or not to back up to a cloud service.
			 */
			remoteBackup: boolean;

			/**
			 * `true` if the file identified by this object is a symbolic link.
			 */
			readonly symbolicLink: boolean;

			/**
			 * `true` if the file identified by this object is writable.
			 */
			readonly writable: boolean;

			/**
			 * `true` if the file identified by this object is writable.
			 */
			readonly writeable: boolean;

			/**
			 * Appends data to the file identified by this file object.
			 */
			append(data: string): boolean;

			/**
			 * Appends data to the file identified by this file object.
			 */
			append(data: Titanium.Blob): boolean;

			/**
			 * Appends data to the file identified by this file object.
			 */
			append(data: Titanium.Filesystem.File): boolean;

			/**
			 * Copies the file identified by this file object to a new path.
			 */
			copy(destinationPath: string): boolean;

			/**
			 * Creates a directory at the path identified by this file object.
			 */
			createDirectory(recursive?: boolean): boolean;

			/**
			 * Creates a file at the path identified by this file object.
			 */
			createFile(): boolean;

			/**
			 * Returns the creation timestamp for the file identified by this file object.
			 */
			createTimestamp(): number;

			/**
			 * Returns the creation Date for the file identified by this file object.
			 */
			createdAt(): Date;

			/**
			 * Deletes the directory identified by this file object.
			 */
			deleteDirectory(recursive?: boolean): boolean;

			/**
			 * Deletes the file identified by this file object.
			 */
			deleteFile(): boolean;

			/**
			 * Returns `true` if the file or directory identified by this file object exists on the device.
			 */
			exists(): boolean;

			/**
			 * Returns the extension for the file identified by this file object.
			 */
			extension(): string;

			/**
			 * Returns a listing of the directory identified by this file object, or `null`
			 * if this object doesn't identify a directory.
			 */
			getDirectoryListing(): string[];

			/**
			 * Returns the path of the parent directory holding the file identified by this
			 * file object, as a String (deprecated) **or** as a `File` object.
			 */
			getParent(): string | Titanium.Filesystem.File;

			/**
			 * Returns the protection key value of this file object.
			 * Returns `null` if there's an error.
			 */
			getProtectionKey(): string;

			/**
			 * Returns `true` if this file object represents a directory.
			 */
			isDirectory(): boolean;

			/**
			 * Returns `true` if this file object represents an ordinary file.
			 */
			isFile(): boolean;

			/**
			 * Returns the last modification time for this file.
			 */
			modificationTimestamp(): number;

			/**
			 * Returns the last modification Date for the file identified by this file object.
			 */
			modifiedAt(): Date;

			/**
			 * Moves the file identified by this file object to another path.
			 */
			move(newpath: string): boolean;

			/**
			 * Opens the file identified by this file object for random access.
			 */
			open(mode: number): Titanium.Filesystem.FileStream;

			/**
			 * Returns the contents of the file identified by this file object as a `Blob`.
			 */
			read(): Titanium.Blob;

			/**
			 * Renames the file identified by this file object.
			 */
			rename(newname: string): boolean;

			/**
			 * Returns the fully-resolved native path associated with this file object.
			 */
			resolve(): string;

			/**
			 * Sets the protection key as an attribute to the file identified by this file object.
			 */
			setProtectionKey(fileProtectionType: string): boolean;

			/**
			 * Returns the amount of free space available on the device where the file identified by this file object is stored.
			 */
			spaceAvailable(): number;

			/**
			 * Writes the specified data to the file identified by this file object.
			 */
			write(data: string, append?: boolean): boolean;

			/**
			 * Writes the specified data to the file identified by this file object.
			 */
			write(data: Titanium.Filesystem.File, append?: boolean): boolean;

			/**
			 * Writes the specified data to the file identified by this file object.
			 */
			write(data: Titanium.Blob, append?: boolean): boolean;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.executable> property.
			 */
			getExecutable(): boolean;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.hidden> property.
			 */
			getHidden(): boolean;

			/**
			 * Sets the value of the <Titanium.Filesystem.File.hidden> property.
			 */
			setHidden(hidden: boolean): void;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.name> property.
			 */
			getName(): string;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.nativePath> property.
			 */
			getNativePath(): string;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.readonly> property.
			 */
			getReadonly(): boolean;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.size> property.
			 */
			getSize(): number;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.remoteBackup> property.
			 */
			getRemoteBackup(): boolean;

			/**
			 * Sets the value of the <Titanium.Filesystem.File.remoteBackup> property.
			 */
			setRemoteBackup(remoteBackup: boolean): void;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.symbolicLink> property.
			 */
			getSymbolicLink(): boolean;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.writable> property.
			 */
			getWritable(): boolean;

			/**
			 * Gets the value of the <Titanium.Filesystem.File.writeable> property.
			 */
			getWriteable(): boolean;

		}
		/**
		 * Wrapper around `Titanium.Filesystem.File` that implements the `Titanium.IOStream` interface
		 */
		interface FileStream extends Titanium.Proxy {
			/**
			 * Reads data from this stream into a buffer.
			 */
			read(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: ReadCallbackArgs) => any): number;

			/**
			 * Writes data from a buffer to this stream.
			 */
			write(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: WriteCallbackArgs) => any): number;

			/**
			 * Indicates whether this stream is writable.
			 */
			isWritable(): boolean;

			/**
			 * Indicates whether this stream is readable.
			 */
			isReadable(): boolean;

			/**
			 * closes file stream, exception is thrown on error
			 */
			close(): void;

		}
	}

	/**
	 * The top level Geolocation module. The Geolocation module is used for accessing device location based information.
	 */
	namespace Geolocation {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request the best
		 * accuracy available.
		 */
		const ACCURACY_BEST: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
		 * updates accurate to the nearest 100 meters.
		 */
		const ACCURACY_HUNDRED_METERS: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
		 * updates accurate to the nearest kilometer.
		 */
		const ACCURACY_KILOMETER: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
		 * updates accurate to the nearest 10 meters.
		 */
		const ACCURACY_NEAREST_TEN_METERS: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
		 * updates accurate to the nearest three kilometers.
		 */
		const ACCURACY_THREE_KILOMETERS: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request more
		 * accurate location updates with higher battery usage.
		 */
		const ACCURACY_HIGH: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request highest possible
		 * accuracy and combine it with additional sensor data.
		 */
		const ACCURACY_BEST_FOR_NAVIGATION: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request less
		 * accurate location updates with lower battery usage.
		 */
		const ACCURACY_LOW: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is authorized to use location services.
		 */
		const AUTHORIZATION_AUTHORIZED: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is not authorized to use location services, *or*
		 * location services are disabled.
		 */
		const AUTHORIZATION_DENIED: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is not authorized to use location servies *and*
		 * the user cannot change this application's status.
		 */
		const AUTHORIZATION_RESTRICTED: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the authorization state is unknown.
		 */
		const AUTHORIZATION_UNKNOWN: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is authorized to start location services at any time. This authorization
		 * includes the use of all location services, including monitoring regions and significant location changes.
		 */
		const AUTHORIZATION_ALWAYS: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is authorized to start most location services only while running in the foreground.
		 */
		const AUTHORIZATION_WHEN_IN_USE: number;

		/**
		 * Error code indicating that the user denied access to the location service.
		 */
		const ERROR_DENIED: number;

		/**
		 * Error code indicating that the heading could not be determined.
		 */
		const ERROR_HEADING_FAILURE: number;

		/**
		 * Error code indicating that the user's location could not be determined.
		 */
		const ERROR_LOCATION_UNKNOWN: number;

		/**
		 * Error code indicating that the network was unavailable.
		 */
		const ERROR_NETWORK: number;

		/**
		 * Error code indicating that region monitoring is delayed.
		 */
		const ERROR_REGION_MONITORING_DELAYED: number;

		/**
		 * Error code indicating that region monitoring is denied.
		 */
		const ERROR_REGION_MONITORING_DENIED: number;

		/**
		 * Error code indicating a region monitoring failure.
		 */
		const ERROR_REGION_MONITORING_FAILURE: number;

		/**
		 * The location data is being used for an unknown activity.
		 */
		const ACTIVITYTYPE_OTHER: string;

		/**
		 * The location data is used for tracking location changes to the automobile specifically during vehicular navigation.
		 */
		const ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION: string;

		/**
		 * The location data is used for tracking any pedestrian-related activity.
		 */
		const ACTIVITYTYPE_FITNESS: string;

		/**
		 * The location data is used for tracking movements of other types of vehicular
		 * navigation that are not automobile related.
		 */
		const ACTIVITYTYPE_OTHER_NAVIGATION: string;

		/**
		 * Specifies the requested accuracy for location updates.
		 */
		let accuracy: number;

		/**
		 * The minimum change of position (in meters) before a 'location' event is fired.
		 */
		let distanceFilter: number;

		/**
		 * Requested frequency for location updates, in milliseconds.
		 */
		let frequency: number;

		/**
		 * Indicates whether the current device supports a compass.
		 */
		const hasCompass: boolean;

		/**
		 * Minimum heading change (in degrees) before a `heading` event is fired.
		 */
		let headingFilter: number;

		/**
		 * Returns an authorization constant indicating if the application has access to location services.
		 */
		let locationServicesAuthorization: number;

		/**
		 * Indicates if the user has enabled or disabled location services for the device (not the application).
		 */
		const locationServicesEnabled: boolean;

		/**
		 * Determines the preferred location provider.
		 */
		let preferredProvider: string;

		/**
		 * Determines whether the compass calibration UI is shown if needed.
		 */
		let showCalibration: boolean;

		/**
		 * Specifies that an indicator be shown when the app makes use of continuous
		 * background location updates.
		 */
		let showBackgroundLocationIndicator: boolean;

		/**
		 * Indicates if the location changes should be updated only when a significant change
		 * in location occurs.
		 */
		let trackSignificantLocationChange: boolean;

		/**
		 * Determines if the app can do background location updates.
		 */
		let allowsBackgroundLocationUpdates: boolean;

		/**
		 * The type of user activity to be associated with the location updates.
		 */
		let activityType: number;

		/**
		 * Indicates whether the location updates may be paused.
		 */
		let pauseLocationUpdateAutomatically: boolean;

		/**
		 * JSON representation of the last geolocation received.
		 */
		const lastGeolocation: string;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Resolves an address to a location.
		 */
		function forwardGeocoder(address: string, callback: (param0: ForwardGeocodeResponse) => any): void;

		/**
		 * Retrieves the current compass heading.
		 */
		function getCurrentHeading(callback: (param0: HeadingResponse) => any): void;

		/**
		 * Retrieves the last known location from the device.
		 */
		function getCurrentPosition(callback: (param0: LocationResults) => any): void;

		/**
		 * Returns `true` if the app has location access.
		 */
		function hasLocationPermissions(authorizationType: number): boolean;

		/**
		 * Requests for location access.
		 */
		function requestLocationPermissions(authorizationType: number, callback: (param0: LocationAuthorizationResponse) => any): void;

		/**
		 * Tries to resolve a location to an address.
		 */
		function reverseGeocoder(latitude: number, longitude: number, callback: (param0: ReverseGeocodeResponse) => any): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Geolocation.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Geolocation.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Geolocation.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Geolocation.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.accuracy> property.
		 */
		function getAccuracy(): number;

		/**
		 * Sets the value of the <Titanium.Geolocation.accuracy> property.
		 */
		function setAccuracy(accuracy: number): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.distanceFilter> property.
		 */
		function getDistanceFilter(): number;

		/**
		 * Sets the value of the <Titanium.Geolocation.distanceFilter> property.
		 */
		function setDistanceFilter(distanceFilter: number): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.frequency> property.
		 */
		function getFrequency(): number;

		/**
		 * Sets the value of the <Titanium.Geolocation.frequency> property.
		 */
		function setFrequency(frequency: number): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.hasCompass> property.
		 */
		function getHasCompass(): boolean;

		/**
		 * Gets the value of the <Titanium.Geolocation.headingFilter> property.
		 */
		function getHeadingFilter(): number;

		/**
		 * Sets the value of the <Titanium.Geolocation.headingFilter> property.
		 */
		function setHeadingFilter(headingFilter: number): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.locationServicesAuthorization> property.
		 */
		function getLocationServicesAuthorization(): number;

		/**
		 * Sets the value of the <Titanium.Geolocation.locationServicesAuthorization> property.
		 */
		function setLocationServicesAuthorization(locationServicesAuthorization: number): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.locationServicesEnabled> property.
		 */
		function getLocationServicesEnabled(): boolean;

		/**
		 * Gets the value of the <Titanium.Geolocation.preferredProvider> property.
		 */
		function getPreferredProvider(): string;

		/**
		 * Sets the value of the <Titanium.Geolocation.preferredProvider> property.
		 */
		function setPreferredProvider(preferredProvider: string): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.showCalibration> property.
		 */
		function getShowCalibration(): boolean;

		/**
		 * Sets the value of the <Titanium.Geolocation.showCalibration> property.
		 */
		function setShowCalibration(showCalibration: boolean): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.showBackgroundLocationIndicator> property.
		 */
		function getShowBackgroundLocationIndicator(): boolean;

		/**
		 * Sets the value of the <Titanium.Geolocation.showBackgroundLocationIndicator> property.
		 */
		function setShowBackgroundLocationIndicator(showBackgroundLocationIndicator: boolean): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.trackSignificantLocationChange> property.
		 */
		function getTrackSignificantLocationChange(): boolean;

		/**
		 * Sets the value of the <Titanium.Geolocation.trackSignificantLocationChange> property.
		 */
		function setTrackSignificantLocationChange(trackSignificantLocationChange: boolean): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.allowsBackgroundLocationUpdates> property.
		 */
		function getAllowsBackgroundLocationUpdates(): boolean;

		/**
		 * Sets the value of the <Titanium.Geolocation.allowsBackgroundLocationUpdates> property.
		 */
		function setAllowsBackgroundLocationUpdates(allowsBackgroundLocationUpdates: boolean): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.activityType> property.
		 */
		function getActivityType(): number;

		/**
		 * Sets the value of the <Titanium.Geolocation.activityType> property.
		 */
		function setActivityType(activityType: number): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.pauseLocationUpdateAutomatically> property.
		 */
		function getPauseLocationUpdateAutomatically(): boolean;

		/**
		 * Sets the value of the <Titanium.Geolocation.pauseLocationUpdateAutomatically> property.
		 */
		function setPauseLocationUpdateAutomatically(pauseLocationUpdateAutomatically: boolean): void;

		/**
		 * Gets the value of the <Titanium.Geolocation.lastGeolocation> property.
		 */
		function getLastGeolocation(): string;


		/**
		 * Module for Android-specific geolocation functionality.
		 */
		namespace Android {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Set to `true` to enable manual configuration of location updates through this module.
			 */
			let manualMode: boolean;

			/**
			 * Specifies the GPS location provider.
			 */
			const PROVIDER_GPS: string;

			/**
			 * Specifies the network location provider.
			 */
			const PROVIDER_NETWORK: string;

			/**
			 * Specifies the passive location provider.
			 */
			const PROVIDER_PASSIVE: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Adds and enables the specified location provider, possibly replacing an existing one.
			 */
			function addLocationProvider(provider: Titanium.Geolocation.Android.LocationProvider): void;

			/**
			 * Disables and removes the specified location provider.
			 */
			function removeLocationProvider(provider: Titanium.Geolocation.Android.LocationProvider): void;

			/**
			 * Adds and enables the specified location rule.
			 */
			function addLocationRule(rule: Titanium.Geolocation.Android.LocationRule): void;

			/**
			 * Disables and removes the specified location rule.
			 */
			function removeLocationRule(rule: Titanium.Geolocation.Android.LocationRule): void;

			/**
			 * Gets the value of the <Titanium.Geolocation.Android.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.Geolocation.Android.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.Geolocation.Android.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.Geolocation.Android.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.Geolocation.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.Geolocation.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

			/**
			 * Gets the value of the <Titanium.Geolocation.Android.manualMode> property.
			 */
			function getManualMode(): boolean;

			/**
			 * Sets the value of the <Titanium.Geolocation.Android.manualMode> property.
			 */
			function setManualMode(manualMode: boolean): void;

			/**
			 * Creates and returns an instance of <Titanium.Geolocation.Android.LocationProvider>.
			 */
			function createLocationProvider(parameters?: any): Titanium.Geolocation.Android.LocationProvider;

			/**
			 * Creates and returns an instance of <Titanium.Geolocation.Android.LocationRule>.
			 */
			function createLocationRule(parameters?: any): Titanium.Geolocation.Android.LocationRule;

			/**
			 * Represents a source of location information, such as GPS.
			 */
			interface LocationProvider extends Titanium.Proxy {
				/**
				 * Type of location provider: [PROVIDER_GPS](Titanium.Geolocation.Android.PROVIDER_GPS),
				 * [PROVIDER_NETWORK](Titanium.Geolocation.Android.PROVIDER_NETWORK), or
				 * [PROVIDER_PASSIVE](Titanium.Geolocation.Android.PROVIDER_PASSIVE).
				 */
				name: string;

				/**
				 * Limits the frequency of location updates to no more than one per `minUpdateTime` seconds.
				 */
				minUpdateTime: number;

				/**
				 * Don't send a location update unless the location has changed at least `minUpdateDistance`
				 * meters since the previous update.
				 */
				minUpdateDistance: number;

				/**
				 * Gets the value of the <Titanium.Geolocation.Android.LocationProvider.name> property.
				 */
				getName(): string;

				/**
				 * Sets the value of the <Titanium.Geolocation.Android.LocationProvider.name> property.
				 */
				setName(name: string): void;

				/**
				 * Gets the value of the <Titanium.Geolocation.Android.LocationProvider.minUpdateTime> property.
				 */
				getMinUpdateTime(): number;

				/**
				 * Sets the value of the <Titanium.Geolocation.Android.LocationProvider.minUpdateTime> property.
				 */
				setMinUpdateTime(minUpdateTime: number): void;

				/**
				 * Gets the value of the <Titanium.Geolocation.Android.LocationProvider.minUpdateDistance> property.
				 */
				getMinUpdateDistance(): number;

				/**
				 * Sets the value of the <Titanium.Geolocation.Android.LocationProvider.minUpdateDistance> property.
				 */
				setMinUpdateDistance(minUpdateDistance: number): void;

			}
			/**
			 * A location rule to filter the results returned by location providers.
			 */
			interface LocationRule extends Titanium.Proxy {
				/**
				 * If specified, this rule only applies to updates generated
				 * by the specified provider. If `null`, this rule applies to all updates.
				 */
				name: string;

				/**
				 * Minimum accuracy required for a location update.
				 */
				accuracy: number;

				/**
				 * Controls the frequency of location updates.
				 */
				minAge: number;

				/**
				 * Controls the freshness of location updates. Do not forward an update
				 * unless it is newer than `maxAge` milliseconds.
				 */
				maxAge: number;

				/**
				 * Gets the value of the <Titanium.Geolocation.Android.LocationRule.name> property.
				 */
				getName(): string;

				/**
				 * Sets the value of the <Titanium.Geolocation.Android.LocationRule.name> property.
				 */
				setName(name: string): void;

				/**
				 * Gets the value of the <Titanium.Geolocation.Android.LocationRule.accuracy> property.
				 */
				getAccuracy(): number;

				/**
				 * Sets the value of the <Titanium.Geolocation.Android.LocationRule.accuracy> property.
				 */
				setAccuracy(accuracy: number): void;

				/**
				 * Gets the value of the <Titanium.Geolocation.Android.LocationRule.minAge> property.
				 */
				getMinAge(): number;

				/**
				 * Sets the value of the <Titanium.Geolocation.Android.LocationRule.minAge> property.
				 */
				setMinAge(minAge: number): void;

				/**
				 * Gets the value of the <Titanium.Geolocation.Android.LocationRule.maxAge> property.
				 */
				getMaxAge(): number;

				/**
				 * Sets the value of the <Titanium.Geolocation.Android.LocationRule.maxAge> property.
				 */
				setMaxAge(maxAge: number): void;

			}
		}
	}

	/**
	 * The Gesture module is responsible for high-level device gestures such as orientation changes
	 * and shake gestures.
	 */
	namespace Gesture {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Indicates if the device is currently held in portrait form.
		 */
		const portrait: boolean;

		/**
		 * Indicates if the device is currently held in landscape form.
		 */
		const landscape: boolean;

		/**
		 * Orientation of the device.
		 */
		const orientation: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Returns whether or not the device is currently held in landscape form.
		 */
		function isLandscape(): boolean;

		/**
		 * Returns whether or not the device is currently held in portrait form.
		 */
		function isPortrait(): boolean;

		/**
		 * Gets the value of the <Titanium.Gesture.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Gesture.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Gesture.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Gesture.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Gesture.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Gesture.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Gesture.orientation> property.
		 */
		function getOrientation(): number;

	}

	/**
	 * The top level Locale module.
	 */
	namespace Locale {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Country of the current system locale, as an ISO 2-letter code.
		 */
		const currentCountry: string;

		/**
		 * Language of the current system locale, as an ISO 2-letter code.
		 */
		const currentLanguage: string;

		/**
		 * Current system locale, as a combination of ISO 2-letter language and country codes.
		 */
		const currentLocale: string;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Formats a telephone number according to the current system locale.
		 */
		function formatTelephoneNumber(number: string): string;

		/**
		 * Returns the ISO 3-letter currency code for the specified locale.
		 */
		function getCurrencyCode(locale: string): string;

		/**
		 * Returns the currency symbol for the specified currency code.
		 */
		function getCurrencySymbol(currencyCode: string): string;

		/**
		 * Sets the current language of the application.
		 */
		function setLanguage(language: string): void;

		/**
		 * Returns the currency symbol for the specified locale.
		 */
		function getLocaleCurrencySymbol(locale: string): string;

		/**
		 * Returns a string, localized according to the current system locale using the appropriate
		 * `/i18n/LANG/strings.xml` localization file.
		 */
		function getString(key: string, hint?: string): string;

		/**
		 * Gets the value of the <Titanium.Locale.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Locale.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Locale.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Locale.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Locale.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Locale.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Locale.currentCountry> property.
		 */
		function getCurrentCountry(): string;

		/**
		 * Gets the value of the <Titanium.Locale.currentLanguage> property.
		 */
		function getCurrentLanguage(): string;

		/**
		 * Gets the value of the <Titanium.Locale.currentLocale> property.
		 */
		function getCurrentLocale(): string;

	}

	/**
	 * The top-level Media module.
	 */
	namespace Media {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Audio file format 3GPP2.
		 */
		const AUDIO_FILEFORMAT_3GP2: number;

		/**
		 * Audio file format 3GPP.
		 */
		const AUDIO_FILEFORMAT_3GPP: number;

		/**
		 * Audio file format Audio Interchange File Format (AIFF).
		 */
		const AUDIO_FILEFORMAT_AIFF: number;

		/**
		 * Audio file format Adaptive Multi-Rate (AMR).
		 */
		const AUDIO_FILEFORMAT_AMR: number;

		/**
		 * Audio file format Apple Compressed Audio Format (CAF).
		 */
		const AUDIO_FILEFORMAT_CAF: number;

		/**
		 * Audio file format MP3.
		 */
		const AUDIO_FILEFORMAT_MP3: number;

		/**
		 * Audio file format MP4.
		 */
		const AUDIO_FILEFORMAT_MP4: number;

		/**
		 * Audio file format MP4A.
		 */
		const AUDIO_FILEFORMAT_MP4A: number;

		/**
		 * Audio file format WAVE.
		 */
		const AUDIO_FILEFORMAT_WAVE: number;

		/**
		 * Audio format MPEG4 AAC encoding.
		 */
		const AUDIO_FORMAT_AAC: number;

		/**
		 * Audio format 8-bit [aLaw encoding](https://en.wikipedia.org/wiki/A-law_algorithm).
		 */
		const AUDIO_FORMAT_ALAW: number;

		/**
		 * Audio format Apple lossless encoding.
		 */
		const AUDIO_FORMAT_APPLE_LOSSLESS: number;

		/**
		 * Audio format [iLBC encoding](https://en.wikipedia.org/wiki/Internet_Low_Bitrate_Codec).
		 */
		const AUDIO_FORMAT_ILBC: number;

		/**
		 * Audio format Apple IMA4 encoding.
		 */
		const AUDIO_FORMAT_IMA4: number;

		/**
		 * Audio format 16-bit, [linear PCM encoding](https://en.wikipedia.org/wiki/Pulse-code_modulation).
		 */
		const AUDIO_FORMAT_LINEAR_PCM: number;

		/**
		 * Audio format 8-bit [muLaw encoding](https://en.wikipedia.org/wiki/M-law_algorithm).
		 */
		const AUDIO_FORMAT_ULAW: number;

		/**
		 * Line-type constant for headphones.
		 */
		const AUDIO_HEADPHONES: number;

		/**
		 * Line-type constant for headphones and microphone.
		 */
		const AUDIO_HEADPHONES_AND_MIC: number;

		/**
		 * Line-type constant for headset in/out.
		 */
		const AUDIO_HEADSET_INOUT: number;

		/**
		 * Line-type constant for line-out.
		 */
		const AUDIO_LINEOUT: number;

		/**
		 * Line-type constant for microphone.
		 */
		const AUDIO_MICROPHONE: number;

		/**
		 * Line-type constant indicated mute switch is on.
		 */
		const AUDIO_MUTED: number;

		/**
		 * Line-type constant indicating receiver and microphone.
		 */
		const AUDIO_RECEIVER_AND_MIC: number;

		/**
		 * For long-duration sounds such as rain, car engine noise, and so on.
		 */
		const AUDIO_SESSION_CATEGORY_AMBIENT: string;

		/**
		 * Session mode for playing recorded music or other sounds that are central to the successful use of your application.
		 */
		const AUDIO_SESSION_CATEGORY_PLAYBACK: string;

		/**
		 * Session mode for recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application.
		 */
		const AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD: string;

		/**
		 * Session mode for recording audio; it silences playback audio.
		 */
		const AUDIO_SESSION_CATEGORY_RECORD: string;

		/**
		 * Session mode for long-duration sounds such as rain, car engine noise, and so on.
		 */
		const AUDIO_SESSION_CATEGORY_SOLO_AMBIENT: string;

		/**
		 * For long-duration sounds such as rain, car engine noise, and so on.
		 */
		const AUDIO_SESSION_MODE_AMBIENT: number;

		/**
		 * Session mode for playing recorded music or other sounds that are central to the successful use of your application.
		 */
		const AUDIO_SESSION_MODE_PLAYBACK: number;

		/**
		 * Session mode for recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application.
		 */
		const AUDIO_SESSION_MODE_PLAY_AND_RECORD: number;

		/**
		 * Session mode for recording audio; it silences playback audio.
		 */
		const AUDIO_SESSION_MODE_RECORD: number;

		/**
		 * Session mode for long-duration sounds such as rain, car engine noise, and so on.
		 */
		const AUDIO_SESSION_MODE_SOLO_AMBIENT: number;

		/**
		 * Constant that specifies audio should output to the default audio route. See <Titanium.Media.setOverrideAudioRoute> for more information.
		 */
		const AUDIO_SESSION_OVERRIDE_ROUTE_NONE: number;

		/**
		 * Constant that specifies audio should output to the speaker. See <Titanium.Media.setOverrideAudioRoute> for more information.
		 */
		const AUDIO_SESSION_OVERRIDE_ROUTE_SPEAKER: number;

		/**
		 * Constant for line level input on a dock connector. This is an input port.
		 */
		const AUDIO_SESSION_PORT_LINEIN: string;

		/**
		 * Constant for built-in microphone on an iOS device. This is an input port.
		 */
		const AUDIO_SESSION_PORT_BUILTINMIC: string;

		/**
		 * Constant for microphone on a wired headset. This is an input port.
		 */
		const AUDIO_SESSION_PORT_HEADSETMIC: string;

		/**
		 * Constant for line level output on a dock connector. This is an output port.
		 */
		const AUDIO_SESSION_PORT_LINEOUT: string;

		/**
		 * Constant for headphone or headset output. This is an output port.
		 */
		const AUDIO_SESSION_PORT_HEADPHONES: string;

		/**
		 * Constant for output on a Bluetooth A2DP device. This is an output port.
		 */
		const AUDIO_SESSION_PORT_BLUETOOTHA2DP: string;

		/**
		 * Constant for the speaker you hold to your ear when on a phone call. This is an output port.
		 */
		const AUDIO_SESSION_PORT_BUILTINRECEIVER: string;

		/**
		 * Constant for built-in speaker on an iOS device. This is an output port.
		 */
		const AUDIO_SESSION_PORT_BUILTINSPEAKER: string;

		/**
		 * Constant for output via High-Definition Multimedia Interface. This is an output port
		 */
		const AUDIO_SESSION_PORT_HDMI: string;

		/**
		 * Constant for output on a remote Air Play device. This is an output port.
		 */
		const AUDIO_SESSION_PORT_AIRPLAY: string;

		/**
		 * Constant for input or output on a Bluetooth Hands-Free Profile device. This can be both an input and output port.
		 */
		const AUDIO_SESSION_PORT_BLUETOOTHHFP: string;

		/**
		 * Constant for input or output on a Universal Serial Bus device. This can be both an input and output port.
		 */
		const AUDIO_SESSION_PORT_USBAUDIO: string;

		/**
		 * Constant for output on a Bluetooth Low Energy device. This is an output port. This is available on iOS7 and later.
		 */
		const AUDIO_SESSION_PORT_BLUETOOTHLE: string;

		/**
		 * Constant for Input or output via Car Audio. This can be both an input and output port. This is available on iOS7 and later.
		 */
		const AUDIO_SESSION_PORT_CARAUDIO: string;

		/**
		 * Line-type constant for speaker output.
		 */
		const AUDIO_SPEAKER: number;

		/**
		 * Line-type constant indicating that audio is unavailable.
		 */
		const AUDIO_UNAVAILABLE: number;

		/**
		 * Line-type constant indicating that line-type is unknown or not determined.
		 */
		const AUDIO_UNKNOWN: number;

		/**
		 * Audio data is being buffered from the network.
		 */
		const AUDIO_STATE_BUFFERING: number;

		/**
		 * Audio playback is being initialized.
		 */
		const AUDIO_STATE_INITIALIZED: number;

		/**
		 * Playback is paused.
		 */
		const AUDIO_STATE_PAUSED: number;

		/**
		 * Audio playback is active.
		 */
		const AUDIO_STATE_PLAYING: number;

		/**
		 * Audio playback is starting.
		 */
		const AUDIO_STATE_STARTING: number;

		/**
		 * Audio playback is stopped.
		 */
		const AUDIO_STATE_STOPPED: number;

		/**
		 * Audio playback is stopping.
		 */
		const AUDIO_STATE_STOPPING: number;

		/**
		 * Player is waiting for audio data from the network.
		 */
		const AUDIO_STATE_WAITING_FOR_DATA: number;

		/**
		 * Player is waiting for audio data to fill the queue.
		 */
		const AUDIO_STATE_WAITING_FOR_QUEUE: number;

		/**
		 * Constant specifying to have the device determine to use the flash or not.
		 */
		const CAMERA_FLASH_AUTO: number;

		/**
		 * Constant specifying to never fire the flash.
		 */
		const CAMERA_FLASH_OFF: number;

		/**
		 * Constant specifying to always fire the flash.
		 */
		const CAMERA_FLASH_ON: number;

		/**
		 * Constant specifying the front camera.
		 */
		const CAMERA_FRONT: number;

		/**
		 * Constant indicating the rear camera.
		 */
		const CAMERA_REAR: number;

		/**
		 * Constant specifying that app is authorized to use camera. This is available on iOS7 and later.
		 */
		const CAMERA_AUTHORIZATION_AUTHORIZED: number;

		/**
		 * Constant specifying that app is denied usage of camera. This is available on iOS7 and later.
		 */
		const CAMERA_AUTHORIZATION_DENIED: number;

		/**
		 * Constant specifying that app is restricted from using camera. This is available on iOS7 and later.
		 */
		const CAMERA_AUTHORIZATION_RESTRICTED: number;

		/**
		 * Constant specifying that app is not yet authorized to use camera. This is available on iOS7 and later.
		 */
		const CAMERA_AUTHORIZATION_NOT_DETERMINED: number;

		/**
		 * Constant specifying that app is not yet authorized to use camera. This is available on iOS7 and later.
		 */
		const CAMERA_AUTHORIZATION_UNKNOWN: number;

		/**
		 * Constant for media device busy error.
		 */
		const DEVICE_BUSY: number;

		/**
		 * Media type constant for photo media.
		 */
		const MEDIA_TYPE_PHOTO: string;

		/**
		 * Media type constant for live photo media.
		 */
		const MEDIA_TYPE_LIVEPHOTO: string;

		/**
		 * Media type constant for video media.
		 */
		const MEDIA_TYPE_VIDEO: string;

		/**
		 * Music library media containing any type of content.
		 */
		const MUSIC_MEDIA_TYPE_ALL: number;

		/**
		 * Music library media containing any type of audio content.
		 */
		const MUSIC_MEDIA_TYPE_ANY_AUDIO: number;

		/**
		 * Music library media containing audiobook content.
		 */
		const MUSIC_MEDIA_TYPE_AUDIOBOOK: number;

		/**
		 * Music library media containing music content.
		 */
		const MUSIC_MEDIA_TYPE_MUSIC: number;

		/**
		 * Music library media containing podcast content.
		 */
		const MUSIC_MEDIA_TYPE_PODCAST: number;

		/**
		 * Constant for grouping query results by title.
		 */
		const MUSIC_MEDIA_GROUP_TITLE: number;

		/**
		 * Constant for grouping query results by album.
		 */
		const MUSIC_MEDIA_GROUP_ALBUM: number;

		/**
		 * Constant for grouping query results by artist.
		 */
		const MUSIC_MEDIA_GROUP_ARTIST: number;

		/**
		 * Constant for grouping query results by album and artist.
		 */
		const MUSIC_MEDIA_GROUP_ALBUM_ARTIST: number;

		/**
		 * Constant for grouping query results by composer.
		 */
		const MUSIC_MEDIA_GROUP_COMPOSER: number;

		/**
		 * Constant for grouping query results by genre.
		 */
		const MUSIC_MEDIA_GROUP_GENRE: number;

		/**
		 * Constant for grouping query results by playlist.
		 */
		const MUSIC_MEDIA_GROUP_PLAYLIST: number;

		/**
		 * Constant for grouping query results by podcast title.
		 */
		const MUSIC_MEDIA_GROUP_PODCAST_TITLE: number;

		/**
		 * Constant for "Repeat All" setting.
		 */
		const MUSIC_PLAYER_REPEAT_ALL: number;

		/**
		 * Constant for user's default repeat setting.
		 */
		const MUSIC_PLAYER_REPEAT_DEFAULT: number;

		/**
		 * Constant for "No Repeat" setting.
		 */
		const MUSIC_PLAYER_REPEAT_NONE: number;

		/**
		 * Constant for "Repeat one item" setting.
		 */
		const MUSIC_PLAYER_REPEAT_ONE: number;

		/**
		 * Constant for shuffling complete albums setting.
		 */
		const MUSIC_PLAYER_SHUFFLE_ALBUMS: number;

		/**
		 * Constant for user's default shuffle setting.
		 */
		const MUSIC_PLAYER_SHUFFLE_DEFAULT: number;

		/**
		 * Constant for "no shuffle" setting.
		 */
		const MUSIC_PLAYER_SHUFFLE_NONE: number;

		/**
		 * Constant for shuffling songs setting.
		 */
		const MUSIC_PLAYER_SHUFFLE_SONGS: number;

		/**
		 * Constant for interrupted state.
		 */
		const MUSIC_PLAYER_STATE_INTERRUPTED: number;

		/**
		 * Constant for paused state.
		 */
		const MUSIC_PLAYER_STATE_PAUSED: number;

		/**
		 * Constant for playing state.
		 */
		const MUSIC_PLAYER_STATE_PLAYING: number;

		/**
		 * Constant for backward seek state.
		 */
		const MUSIC_PLAYER_STATE_SEEK_BACKWARD: number;

		/**
		 * Constant for forward seek state.
		 */
		const MUSIC_PLAYER_STATE_SEEK_FORWARD: number;

		/**
		 * Constant for stopped state.
		 */
		const MUSIC_PLAYER_STATE_STOPPED: number;

		/**
		 * Constant for media no camera error.
		 */
		const NO_CAMERA: number;

		/**
		 * Constant for media no video error.
		 */
		const NO_VIDEO: number;

		/**
		 * Media type constant for high-quality video recording.
		 */
		const QUALITY_HIGH: number;

		/**
		 * Media type constant for low-quality video recording.
		 */
		const QUALITY_LOW: number;

		/**
		 * Media type constant for medium-quality video recording.
		 */
		const QUALITY_MEDIUM: number;

		/**
		 * Media type constant for medium-quality video recording.
		 */
		const QUALITY_640x480: number;

		/**
		 * Media type constant for medium-quality video recording.
		 */
		const QUALITY_IFRAME_1280x720: number;

		/**
		 * Media type constant for medium-quality video recording.
		 */
		const QUALITY_IFRAME_960x540: number;

		/**
		 * Constant for unknown media error.
		 */
		const UNKNOWN_ERROR: number;

		/**
		 * Constant for default video controls.
		 */
		const VIDEO_CONTROL_DEFAULT: number;

		/**
		 * Constant for video controls for an embedded view.
		 */
		const VIDEO_CONTROL_EMBEDDED: number;

		/**
		 * Constant for fullscreen video controls.
		 */
		const VIDEO_CONTROL_FULLSCREEN: number;

		/**
		 * Constant for video controls hidden.
		 */
		const VIDEO_CONTROL_HIDDEN: number;

		/**
		 * Constant for no video controls.
		 */
		const VIDEO_CONTROL_NONE: number;

		/**
		 * Constant for video controls volume only.
		 */
		const VIDEO_CONTROL_VOLUME_ONLY: number;

		/**
		 * Video playback ended normally.
		 */
		const VIDEO_FINISH_REASON_PLAYBACK_ENDED: number;

		/**
		 * Video playback ended abnormally.
		 */
		const VIDEO_FINISH_REASON_PLAYBACK_ERROR: number;

		/**
		 * Video playback ended by user action (such as clicking the `Done` button).
		 */
		const VIDEO_FINISH_REASON_USER_EXITED: number;

		/**
		 * Indicates that the player can no longer play media items because of an error.
		 */
		const VIDEO_LOAD_STATE_FAILED: number;

		/**
		 * Current media is playable.
		 */
		const VIDEO_LOAD_STATE_PLAYABLE: number;

		/**
		 * Playback will be automatically started in this state when `autoplay` is true.
		 */
		const VIDEO_LOAD_STATE_PLAYTHROUGH_OK: number;

		/**
		 * Playback will be automatically paused in this state, if started.
		 */
		const VIDEO_LOAD_STATE_STALLED: number;

		/**
		 * Current load state is not known.
		 */
		const VIDEO_LOAD_STATE_UNKNOWN: number;

		/**
		 * A audio type of media in the movie returned by <Titanium.Media.VideoPlayer> `mediaTypes` property.
		 */
		const VIDEO_MEDIA_TYPE_AUDIO: number;

		/**
		 * An unknown type of media in the movie returned by <Titanium.Media.VideoPlayer> `mediaTypes` property.
		 */
		const VIDEO_MEDIA_TYPE_NONE: number;

		/**
		 * A video type of media in the movie returned by <Titanium.Media.VideoPlayer> `mediaTypes` property.
		 */
		const VIDEO_MEDIA_TYPE_VIDEO: number;

		/**
		 * Video playback has been interrupted.
		 */
		const VIDEO_PLAYBACK_STATE_INTERRUPTED: number;

		/**
		 * Video playback is paused.
		 */
		const VIDEO_PLAYBACK_STATE_PAUSED: number;

		/**
		 * Video is being played.
		 */
		const VIDEO_PLAYBACK_STATE_PLAYING: number;

		/**
		 * Video playback is rewinding.
		 */
		const VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD: number;

		/**
		 * Video playback is seeking forward.
		 */
		const VIDEO_PLAYBACK_STATE_SEEKING_FORWARD: number;

		/**
		 * Video playback is stopped.
		 */
		const VIDEO_PLAYBACK_STATE_STOPPED: number;

		/**
		 * Constant for disabling repeat on video playback.
		 */
		const VIDEO_REPEAT_MODE_NONE: number;

		/**
		 * Constant for repeating one video (i.e., the one video will repeat constantly) during playback.
		 */
		const VIDEO_REPEAT_MODE_ONE: number;

		/**
		 * Scale video to fill the screen, clipping edges if necessary.
		 */
		const VIDEO_SCALING_ASPECT_FILL: number;

		/**
		 * Scale video to fit the screen, letterboxing if necessary.
		 */
		const VIDEO_SCALING_ASPECT_FIT: number;

		/**
		 * Video is scaled until both dimensions fit the screen exactly, stretching if necessary.
		 */
		const VIDEO_SCALING_MODE_FILL: number;

		/**
		 * Video scaling is disabled.
		 */
		const VIDEO_SCALING_NONE: number;

		/**
		 * Specifies that the video should be stretched to fill the bounds of layer.
		 */
		const VIDEO_SCALING_RESIZE: string;

		/**
		 * Specifies that the player should preserve the aspect ratio of video and fit the video within the bounds of layer.
		 */
		const VIDEO_SCALING_RESIZE_ASPECT: string;

		/**
		 * Specifies that the player should preserve the aspect ratio of video and fill the bounds of layer.
		 */
		const VIDEO_SCALING_RESIZE_ASPECT_FILL: string;

		/**
		 * Video source type is a file.
		 */
		const VIDEO_SOURCE_TYPE_FILE: number;

		/**
		 * Video source type is a remote stream.
		 */
		const VIDEO_SOURCE_TYPE_STREAMING: number;

		/**
		 * Video source type is unknown.
		 */
		const VIDEO_SOURCE_TYPE_UNKNOWN: number;

		/**
		 * Use the exact time.
		 */
		const VIDEO_TIME_OPTION_EXACT: number;

		/**
		 * Use the closest keyframe in the time.
		 */
		const VIDEO_TIME_OPTION_NEAREST_KEYFRAME: number;

		/**
		 * Use the closest sync (or key) frame at given the time.
		 */
		const VIDEO_TIME_OPTION_CLOSEST_SYNC: number;

		/**
		 * Use the sync (or key) frame located right after or at given the time.
		 */
		const VIDEO_TIME_OPTION_NEXT_SYNC: number;

		/**
		 * Use the sync (or key) frame located right before or at given the time.
		 */
		const VIDEO_TIME_OPTION_PREVIOUS_SYNC: number;

		/**
		 * An instance of <Titanium.Media.MusicPlayer> representing the app-specific music player.
		 */
		const appMusicPlayer: Titanium.Media.MusicPlayer;

		/**
		 * Returns the line type constant for the current line type.
		 */
		const audioLineType: number;

		/**
		 * Returns `true` if the device is playing audio.
		 */
		const audioPlaying: boolean;

		/**
		 * A constant for the audio session category to be used.
		 */
		let audioSessionCategory: number;

		/**
		 * A constant for the audio session mode to be used.
		 */
		let audioSessionMode: number;

		/**
		 * Array indicating which cameras are available, `CAMERA_FRONT`, `CAMERA_REAR` or both.
		 */
		const availableCameras: number[];

		/**
		 * Array of media type constants supported for the camera.
		 */
		let availableCameraMediaTypes: any[];

		/**
		 * Array of media type constants supported for saving to the device's camera roll or saved images album.
		 */
		let availablePhotoGalleryMediaTypes: any[];

		/**
		 * Array of media type constants supported for the photo library.
		 */
		let availablePhotoMediaTypes: any[];

		/**
		 * Current average microphone level in dB or -1 if microphone monitoring is disabled.
		 */
		let averageMicrophonePower: number;

		/**
		 * Determines how the flash is fired when using the device's camera.
		 */
		let cameraFlashMode: number;

		/**
		 * `true` if the device has a recording input device available.
		 */
		const canRecord: boolean;

		/**
		 * Returns a description of the current route, consisting of zero or more input ports and zero or more output ports.
		 */
		const currentRoute: RouteDescription;

		/**
		 * `true` if the device has camera support.
		 */
		const isCameraSupported: boolean;

		/**
		 * Returns the authorization status for the camera.
		 */
		const cameraAuthorizationStatus: number;

		/**
		 * Returns the authorization status for the camera.
		 */
		const cameraAuthorization: number;

		/**
		 * Current microphone level peak power in dB or -1 if microphone monitoring is disabled.
		 */
		const peakMicrophonePower: number;

		/**
		 * An instance of <Titanium.Media.MusicPlayer> representing the system-wide music player.
		 */
		const systemMusicPlayer: Titanium.Media.MusicPlayer;

		/**
		 * Current volume of the playback device.
		 */
		const volume: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Plays a device beep notification.
		 */
		function beep(): void;

		/**
		 * Hides the device camera UI.
		 */
		function hideCamera(): void;

		/**
		 * Hides the music library.
		 */
		function hideMusicLibrary(): void;

		/**
		 * Returns `true` if the source supports the specified media type.
		 */
		function isMediaTypeSupported(source: string, type: string): boolean;

		/**
		 * Shows the music library and allows the user to select one or more tracks.
		 */
		function openMusicLibrary(options: MusicLibraryOptionsType): void;

		/**
		 * Opens the photo gallery image picker.
		 */
		function openPhotoGallery(options: PhotoGalleryOptionsType): void;

		/**
		 * Displays the given image.
		 */
		function previewImage(options: any): void;

		/**
		 * Saves media to the device's photo gallery / camera roll.
		 */
		function saveToPhotoGallery(media: Titanium.Blob, callbacks: any): void;

		/**
		 * Saves media to the device's photo gallery / camera roll.
		 */
		function saveToPhotoGallery(media: Titanium.Filesystem.File, callbacks: any): void;

		/**
		 * Overrides the default audio route when using the <Titanium.Media.AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD> session mode.
		 */
		function setOverrideAudioRoute(route: number): void;

		/**
		 * Shows the camera.
		 */
		function showCamera(options: CameraOptionsType): void;

		/**
		 * Returns `true` if the app has music library access.
		 */
		function hasMusicLibraryPermissions(): boolean;

		/**
		 * Request permissions for the native music-library.
		 */
		function requestMusicLibraryPermissions(callback: (param0: RequestMusicLibraryAccessResult) => any): void;

		/**
		 * Searches the music library for items matching the specified search predicates.
		 */
		function queryMusicLibrary(query: MediaQueryType): Titanium.Media.Item[];

		/**
		 * Starts monitoring the microphone sound level.
		 */
		function startMicrophoneMonitor(): void;

		/**
		 * Stops monitoring the microphone sound level.
		 */
		function stopMicrophoneMonitor(): void;

		/**
		 * Uses the device camera to capture a photo.
		 */
		function takePicture(): void;

		/**
		 * Starts video capture using the camera specified.
		 */
		function startVideoCapture(): void;

		/**
		 * Stops video capture using the camera specified.
		 */
		function stopVideoCapture(): void;

		/**
		 * Switches between front and rear-facing cameras. Make sure to set one of the below constants to determine
		 * the camera you want to switch to.
		 */
		function switchCamera(camera: number): void;

		/**
		 * Returns `true` if the app has camera access.
		 */
		function hasCameraPermissions(): boolean;

		/**
		 * Requests for camera access.
		 */
		function requestCameraPermissions(callback: (param0: RequestCameraAccessResult) => any): void;

		/**
		 * Returns `true` if the app has photo gallery permissions.
		 */
		function hasPhotoGalleryPermissions(): boolean;

		/**
		 * Requests for photo gallery permissions.
		 */
		function requestPhotoGalleryPermissions(callback: (param0: RequestPhotoGalleryAccessResult) => any): void;

		/**
		 * Requests for camera access.
		 */
		function requestCameraAccess(callback: (param0: RequestCameraAccessResult) => any): void;

		/**
		 * Takes a screen shot of the visible UI on the device.
		 */
		function takeScreenshot(callback: (param0: ScreenshotResult) => any): void;

		/**
		 * Makes the device vibrate.
		 */
		function vibrate(pattern?: ReadonlyArray<number>): void;

		/**
		 * Request the user's permission for audio recording.
		 */
		function requestAuthorization(callback: (param0: MediaAuthorizationResponse) => any): void;

		/**
		 * Returns `true` if the app has audio permissions.
		 */
		function hasAudioPermissions(): boolean;

		/**
		 * Returns `true` if the app has audio permissions.
		 */
		function hasAudioRecorderPermissions(): boolean;

		/**
		 * Request the user's permission for audio recording.
		 */
		function requestAudioPermissions(callback: (param0: MediaAuthorizationResponse) => any): void;

		/**
		 * Request the user's permission for audio recording.
		 */
		function requestAudioRecorderPermissions(callback: (param0: MediaAuthorizationResponse) => any): void;

		/**
		 * Creates and returns an instance of <Titanium.Media.AudioPlayer>.
		 */
		function createAudioPlayer(parameters?: any): Titanium.Media.AudioPlayer;

		/**
		 * Creates and returns an instance of <Titanium.Media.AudioRecorder>.
		 */
		function createAudioRecorder(parameters?: any): Titanium.Media.AudioRecorder;

		/**
		 * Gets the value of the <Titanium.Media.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Media.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Media.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Media.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Media.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Media.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Media.QUALITY_640x480> property.
		 */
		function getQUALITY_640x480(): number;

		/**
		 * Gets the value of the <Titanium.Media.QUALITY_IFRAME_1280x720> property.
		 */
		function getQUALITY_IFRAME_1280x720(): number;

		/**
		 * Gets the value of the <Titanium.Media.QUALITY_IFRAME_960x540> property.
		 */
		function getQUALITY_IFRAME_960x540(): number;

		/**
		 * Gets the value of the <Titanium.Media.appMusicPlayer> property.
		 */
		function getAppMusicPlayer(): Titanium.Media.MusicPlayer;

		/**
		 * Gets the value of the <Titanium.Media.audioLineType> property.
		 */
		function getAudioLineType(): number;

		/**
		 * Gets the value of the <Titanium.Media.audioPlaying> property.
		 */
		function getAudioPlaying(): boolean;

		/**
		 * Gets the value of the <Titanium.Media.audioSessionCategory> property.
		 */
		function getAudioSessionCategory(): number;

		/**
		 * Sets the value of the <Titanium.Media.audioSessionCategory> property.
		 */
		function setAudioSessionCategory(audioSessionCategory: number): void;

		/**
		 * Gets the value of the <Titanium.Media.audioSessionMode> property.
		 */
		function getAudioSessionMode(): number;

		/**
		 * Sets the value of the <Titanium.Media.audioSessionMode> property.
		 */
		function setAudioSessionMode(audioSessionMode: number): void;

		/**
		 * Gets the value of the <Titanium.Media.availableCameras> property.
		 */
		function getAvailableCameras(): number[];

		/**
		 * Gets the value of the <Titanium.Media.availableCameraMediaTypes> property.
		 */
		function getAvailableCameraMediaTypes(): any[];

		/**
		 * Sets the value of the <Titanium.Media.availableCameraMediaTypes> property.
		 */
		function setAvailableCameraMediaTypes(availableCameraMediaTypes: ReadonlyArray<any>): void;

		/**
		 * Gets the value of the <Titanium.Media.availablePhotoGalleryMediaTypes> property.
		 */
		function getAvailablePhotoGalleryMediaTypes(): any[];

		/**
		 * Sets the value of the <Titanium.Media.availablePhotoGalleryMediaTypes> property.
		 */
		function setAvailablePhotoGalleryMediaTypes(availablePhotoGalleryMediaTypes: ReadonlyArray<any>): void;

		/**
		 * Gets the value of the <Titanium.Media.availablePhotoMediaTypes> property.
		 */
		function getAvailablePhotoMediaTypes(): any[];

		/**
		 * Sets the value of the <Titanium.Media.availablePhotoMediaTypes> property.
		 */
		function setAvailablePhotoMediaTypes(availablePhotoMediaTypes: ReadonlyArray<any>): void;

		/**
		 * Gets the value of the <Titanium.Media.averageMicrophonePower> property.
		 */
		function getAverageMicrophonePower(): number;

		/**
		 * Sets the value of the <Titanium.Media.averageMicrophonePower> property.
		 */
		function setAverageMicrophonePower(averageMicrophonePower: number): void;

		/**
		 * Gets the value of the <Titanium.Media.cameraFlashMode> property.
		 */
		function getCameraFlashMode(): number;

		/**
		 * Sets the value of the <Titanium.Media.cameraFlashMode> property.
		 */
		function setCameraFlashMode(cameraFlashMode: number): void;

		/**
		 * Gets the value of the <Titanium.Media.canRecord> property.
		 */
		function getCanRecord(): boolean;

		/**
		 * Gets the value of the <Titanium.Media.currentRoute> property.
		 */
		function getCurrentRoute(): RouteDescription;

		/**
		 * Gets the value of the <Titanium.Media.isCameraSupported> property.
		 */
		function getIsCameraSupported(): boolean;

		/**
		 * Gets the value of the <Titanium.Media.cameraAuthorizationStatus> property.
		 */
		function getCameraAuthorizationStatus(): number;

		/**
		 * Gets the value of the <Titanium.Media.cameraAuthorization> property.
		 */
		function getCameraAuthorization(): number;

		/**
		 * Gets the value of the <Titanium.Media.peakMicrophonePower> property.
		 */
		function getPeakMicrophonePower(): number;

		/**
		 * Gets the value of the <Titanium.Media.systemMusicPlayer> property.
		 */
		function getSystemMusicPlayer(): Titanium.Media.MusicPlayer;

		/**
		 * Gets the value of the <Titanium.Media.volume> property.
		 */
		function getVolume(): number;

		/**
		 * Creates and returns an instance of <Titanium.Media.Sound>.
		 */
		function createSound(parameters?: any): Titanium.Media.Sound;

		/**
		 * Creates and returns an instance of <Titanium.Media.SystemAlert>.
		 */
		function createSystemAlert(parameters?: any): Titanium.Media.SystemAlert;

		/**
		 * Creates and returns an instance of <Titanium.Media.VideoPlayer>.
		 */
		function createVideoPlayer(parameters?: any): Titanium.Media.VideoPlayer;

		/**
		 * An audio player object used for streaming audio to the device, and low-level control of the audio playback.
		 */
		interface AudioPlayer extends Titanium.Proxy {
			/**
			 * Audio data is being buffered from the network.
			 */
			readonly STATE_BUFFERING: number;

			/**
			 * Audio playback is being initialized.
			 */
			readonly STATE_INITIALIZED: number;

			/**
			 * Playback is paused.
			 */
			readonly STATE_PAUSED: number;

			/**
			 * Audio playback is active.
			 */
			readonly STATE_PLAYING: number;

			/**
			 * Audio playback is starting.
			 */
			readonly STATE_STARTING: number;

			/**
			 * Audio playback is stopped.
			 */
			readonly STATE_STOPPED: number;

			/**
			 * Audio playback is stopping.
			 */
			readonly STATE_STOPPING: number;

			/**
			 * Player is waiting for audio data from the network.
			 */
			readonly STATE_WAITING_FOR_DATA: number;

			/**
			 * Player is waiting for audio data to fill the queue.
			 */
			readonly STATE_WAITING_FOR_QUEUE: number;

			/**
			 * Used to identify the volume of audio streams for alarms.
			 */
			readonly AUDIO_TYPE_ALARM: number;

			/**
			 * Used to identify the volume of audio streams for DTMF tones or beeps.
			 */
			readonly AUDIO_TYPE_SIGNALLING: number;

			/**
			 * Used to identify the volume of audio streams for media playback.
			 */
			readonly AUDIO_TYPE_MEDIA: number;

			/**
			 * Used to identify the volume of audio streams for notifications.
			 */
			readonly AUDIO_TYPE_NOTIFICATION: number;

			/**
			 * Used to identify the volume of audio streams for the phone ring.
			 */
			readonly AUDIO_TYPE_RING: number;

			/**
			 * Used to identify the volume of audio streams for voice calls.
			 */
			readonly AUDIO_TYPE_VOICE: number;

			/**
			 * Boolean to indicate if audio should continue playing even if the associated
			 * Android [Activity](Titanium.Android.Activity) is paused.
			 */
			allowBackground: boolean;

			/**
			 * Focuses on the current audio player and stops other audio playing.
			 */
			audioFocus: boolean;

			/**
			 * Changes the audio-stream-type.
			 */
			audioType: number;

			/**
			 * Bit rate of the current playback stream.
			 */
			bitRate: number;

			/**
			 * Estimated duration in milliseconds of the file being played.
			 */
			readonly duration: number;

			/**
			 * Boolean indicating if the player is idle.
			 */
			readonly idle: boolean;

			/**
			 * Indicates whether or not audio output of the player is muted.
			 */
			muted: boolean;

			/**
			 * Indicates whether the player is currently playing video in "external playback" mode.
			 */
			readonly externalPlaybackActive: boolean;

			/**
			 * Indicates whether the player allows switching to "external playback" mode.
			 */
			allowsExternalPlayback: boolean;

			/**
			 * Indicates the desired rate of playback; 0.0 means "paused", 1.0 indicates a
			 * desire to play at the natural rate of the current item. In addition, 2.0
			 * would mean that the audio plays twice as fast.
			 */
			rate: number;

			/**
			 * Boolean indicating if audio playback is paused.
			 */
			paused: boolean;

			/**
			 * Boolean indicating if audio is currently playing.
			 */
			readonly playing: boolean;

			/**
			 * Current playback progress, in milliseconds.
			 */
			readonly progress: number;

			/**
			 * Current state of playback, specified using one of the `STATE` constants defined on this object.
			 */
			readonly state: number;

			/**
			 * URL for the audio stream.
			 */
			url: string;

			/**
			 * Volume of the audio, from 0.0 (muted) to 1.0 (loudest).
			 */
			volume: number;

			/**
			 * Boolean indicating if the playback is waiting for audio data from the network.
			 */
			readonly waiting: boolean;

			/**
			 * Size of the buffer used for streaming, in milliseconds.
			 */
			bufferSize: number;

			/**
			 * Current playback position of the audio.
			 */
			time: number;

			/**
			 * Returns the value of the [paused](Titanium.Media.AudioPlayer.paused) property.
			 */
			getPaused(): boolean;

			/**
			 * Returns the value of the [paused](Titanium.Media.AudioPlayer.paused) property.
			 */
			isPaused(): boolean;

			/**
			 * Returns the value of the [playing](Titanium.Media.AudioPlayer.playing) property.
			 */
			getPlaying(): boolean;

			/**
			 * Returns the value of the [playing](Titanium.Media.AudioPlayer.playing) property.
			 */
			isPlaying(): boolean;

			/**
			 * Pauses audio playback.
			 */
			pause(): void;

			/**
			 * Starts or resumes audio playback.
			 */
			play(): void;

			/**
			 * Sets the value of the [paused](Titanium.Media.AudioPlayer.paused) property.
			 */
			setPaused(paused: boolean): void;

			/**
			 * Moves the playback cursor and invokes the specified block when the seek
			 * operation has either been completed or been interrupted.
			 */
			seekToTime(time: number): void;

			/**
			 * Stops buffering audio data and releases audio resources.
			 */
			release(): void;

			/**
			 * Returns the audio session id.
			 */
			getAudioSessionId(): number;

			/**
			 * Starts or resumes audio playback.
			 */
			start(): void;

			/**
			 * Restarts (stops and stars) audio playback.
			 */
			restart(): void;

			/**
			 * Converts a [state](Titanium.Media.AudioPlayer.state) value into a text description
			 * suitable for display.
			 */
			stateDescription(state: number): string;

			/**
			 * Stops audio playback.
			 */
			stop(): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.allowBackground> property.
			 */
			getAllowBackground(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.allowBackground> property.
			 */
			setAllowBackground(allowBackground: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.audioFocus> property.
			 */
			getAudioFocus(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.audioFocus> property.
			 */
			setAudioFocus(audioFocus: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.audioType> property.
			 */
			getAudioType(): number;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.audioType> property.
			 */
			setAudioType(audioType: number): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.bitRate> property.
			 */
			getBitRate(): number;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.bitRate> property.
			 */
			setBitRate(bitRate: number): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.duration> property.
			 */
			getDuration(): number;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.idle> property.
			 */
			getIdle(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.muted> property.
			 */
			getMuted(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.muted> property.
			 */
			setMuted(muted: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.externalPlaybackActive> property.
			 */
			getExternalPlaybackActive(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.allowsExternalPlayback> property.
			 */
			getAllowsExternalPlayback(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.allowsExternalPlayback> property.
			 */
			setAllowsExternalPlayback(allowsExternalPlayback: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.rate> property.
			 */
			getRate(): number;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.rate> property.
			 */
			setRate(rate: number): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.progress> property.
			 */
			getProgress(): number;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.state> property.
			 */
			getState(): number;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.url> property.
			 */
			getUrl(): string;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.url> property.
			 */
			setUrl(url: string): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.volume> property.
			 */
			getVolume(): number;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.volume> property.
			 */
			setVolume(volume: number): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.waiting> property.
			 */
			getWaiting(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.bufferSize> property.
			 */
			getBufferSize(): number;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.bufferSize> property.
			 */
			setBufferSize(bufferSize: number): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioPlayer.time> property.
			 */
			getTime(): number;

			/**
			 * Sets the value of the <Titanium.Media.AudioPlayer.time> property.
			 */
			setTime(time: number): void;

		}
		/**
		 * An audio recorder object used for recording audio from the device microphone.
		 */
		interface AudioRecorder extends Titanium.Proxy {
			/**
			 * Audio compression to be used for the recording.
			 */
			compression: number;

			/**
			 * Audio format to be used for the recording.
			 */
			format: number;

			/**
			 * Indicates if the audio recorder is paused.
			 */
			readonly paused: boolean;

			/**
			 * Indicates if the audio recorder is recording.
			 */
			readonly recording: boolean;

			/**
			 * Indicates if the audio recorder is stopped.
			 */
			readonly stopped: boolean;

			/**
			 * Pauses the current audio recording.
			 */
			pause(): void;

			/**
			 * Resumes a paused recording.
			 */
			resume(): void;

			/**
			 * Starts an audio recording.
			 */
			start(): void;

			/**
			 * Stops the current audio recording and returns the recorded audio file.
			 */
			stop(): Titanium.Filesystem.File;

			/**
			 * Gets the value of the <Titanium.Media.AudioRecorder.compression> property.
			 */
			getCompression(): number;

			/**
			 * Sets the value of the <Titanium.Media.AudioRecorder.compression> property.
			 */
			setCompression(compression: number): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioRecorder.format> property.
			 */
			getFormat(): number;

			/**
			 * Sets the value of the <Titanium.Media.AudioRecorder.format> property.
			 */
			setFormat(format: number): void;

			/**
			 * Gets the value of the <Titanium.Media.AudioRecorder.paused> property.
			 */
			getPaused(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.AudioRecorder.recording> property.
			 */
			getRecording(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.AudioRecorder.stopped> property.
			 */
			getStopped(): boolean;

		}
		/**
		 * A representation of a media item returned by [openMusicLibrary](Titanium.Media.openMusicLibrary) or [queryMusicLibrary](Titanium.Media.queryMusicLibrary).
		 */
		interface Item extends Titanium.Proxy {
			/**
			 * Artist credited for the album containing this item.
			 */
			readonly albumArtist: string;

			/**
			 * The persistent identifier for an album artist.
			 */
			readonly albumArtistPersistentID: number;

			/**
			 * The key for the persistent identifier for an album.
			 */
			readonly albumPersistentID: number;

			/**
			 * Title of the album containing this item.
			 */
			readonly albumTitle: string;

			/**
			 * Number of tracks for the album containing this item.
			 */
			readonly albumTrackCount: number;

			/**
			 * Track number for this item.
			 */
			readonly albumTrackNumber: number;

			/**
			 * Artist credited for this item.
			 */
			readonly artist: string;

			/**
			 * Image for the item's artwork as a `Blob` object,  or `null` if no artwork is
			 * available.
			 */
			readonly artwork: Titanium.Blob;

			/**
			 * A URL pointing to the media item.
			 */
			readonly assetURL: string;

			/**
			 * The number of musical beats per minute for the media item, corresponding
			 * to the "BPM" field in the Info tab in the "Get Info" dialog in iTunes.
			 */
			readonly beatsPerMinute: number;

			/**
			 * The user's place in the media item the most recent time it was played.
			 */
			readonly bookmarkTime: string;

			/**
			 * Textual information about the media item, corresponding to the "Comments"
			 * field in in the Info tab in the Get Info dialog in iTunes.
			 */
			readonly comments: string;

			/**
			 * Composer of this item.
			 */
			readonly composer: string;

			/**
			 * Date when the item was added to the music library.
			 */
			readonly dateAdded: Date;

			/**
			 * Total number of discs for the album containing this item.
			 */
			readonly discCount: number;

			/**
			 * Disc number for this item in the album.
			 */
			readonly discNumber: number;

			/**
			 * Genre of this item.
			 */
			readonly genre: string;

			/**
			 * The persistent identifier for a genre.
			 */
			readonly genrePersistentID: number;

			/**
			 * True if the item represents a protected asset.
			 */
			readonly hasProtectedAsset: boolean;

			/**
			 * True if the media item is an iCloud item.
			 */
			readonly isCloudItem: boolean;

			/**
			 * True if this item is part of a compilation album.
			 */
			readonly isCompilation: boolean;

			/**
			 * True if this item is marked as "Explicit".
			 */
			readonly isExplicit: boolean;

			/**
			 * The most recent calendar date on which the user played the media item.
			 */
			readonly lastPlayedDate: Date;

			/**
			 * Lyrics for this item.
			 */
			readonly lyrics: string;

			/**
			 * The type of the media.
			 */
			readonly mediaType: number;

			/**
			 * The key for the persistent identifier for the media item.
			 */
			readonly persistentID: string;

			/**
			 * Number of times the item has been played.
			 */
			readonly playCount: number;

			/**
			 * Length (in seconds) of this item.
			 */
			readonly playbackDuration: number;

			/**
			 * Used to enqueue store tracks by their ID.
			 */
			readonly playbackStoreID: number;

			/**
			 * Title of a podcast item.
			 */
			readonly podcastTitle: string;

			/**
			 * The persistent identifier for an audio podcast.
			 */
			readonly podcastPersistentID: number;

			/**
			 * Rating for this item.
			 */
			readonly rating: number;

			/**
			 * Date when this this item was released.
			 */
			readonly releaseDate: Date;

			/**
			 * Number of times this item has been skipped.
			 */
			readonly skipCount: number;

			/**
			 * Title of this item.
			 */
			readonly title: string;

			/**
			 * Corresponds to the "Grouping" field in the Info tab in the "Get Info"
			 * dialog in iTunes.
			 */
			readonly userGrouping: string;

			/**
			 * Gets the value of the <Titanium.Media.Item.albumArtist> property.
			 */
			getAlbumArtist(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.albumArtistPersistentID> property.
			 */
			getAlbumArtistPersistentID(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.albumPersistentID> property.
			 */
			getAlbumPersistentID(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.albumTitle> property.
			 */
			getAlbumTitle(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.albumTrackCount> property.
			 */
			getAlbumTrackCount(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.albumTrackNumber> property.
			 */
			getAlbumTrackNumber(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.artist> property.
			 */
			getArtist(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.artwork> property.
			 */
			getArtwork(): Titanium.Blob;

			/**
			 * Gets the value of the <Titanium.Media.Item.assetURL> property.
			 */
			getAssetURL(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.beatsPerMinute> property.
			 */
			getBeatsPerMinute(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.bookmarkTime> property.
			 */
			getBookmarkTime(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.comments> property.
			 */
			getComments(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.composer> property.
			 */
			getComposer(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.dateAdded> property.
			 */
			getDateAdded(): Date;

			/**
			 * Gets the value of the <Titanium.Media.Item.discCount> property.
			 */
			getDiscCount(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.discNumber> property.
			 */
			getDiscNumber(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.genre> property.
			 */
			getGenre(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.genrePersistentID> property.
			 */
			getGenrePersistentID(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.hasProtectedAsset> property.
			 */
			getHasProtectedAsset(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.Item.isCloudItem> property.
			 */
			getIsCloudItem(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.Item.isCompilation> property.
			 */
			getIsCompilation(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.Item.isExplicit> property.
			 */
			getIsExplicit(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.Item.lastPlayedDate> property.
			 */
			getLastPlayedDate(): Date;

			/**
			 * Gets the value of the <Titanium.Media.Item.lyrics> property.
			 */
			getLyrics(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.mediaType> property.
			 */
			getMediaType(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.persistentID> property.
			 */
			getPersistentID(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.playCount> property.
			 */
			getPlayCount(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.playbackDuration> property.
			 */
			getPlaybackDuration(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.playbackStoreID> property.
			 */
			getPlaybackStoreID(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.podcastTitle> property.
			 */
			getPodcastTitle(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.podcastPersistentID> property.
			 */
			getPodcastPersistentID(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.rating> property.
			 */
			getRating(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.releaseDate> property.
			 */
			getReleaseDate(): Date;

			/**
			 * Gets the value of the <Titanium.Media.Item.skipCount> property.
			 */
			getSkipCount(): number;

			/**
			 * Gets the value of the <Titanium.Media.Item.title> property.
			 */
			getTitle(): string;

			/**
			 * Gets the value of the <Titanium.Media.Item.userGrouping> property.
			 */
			getUserGrouping(): string;

		}
		/**
		 * This object represents a music controller.
		 */
		interface MusicPlayer extends Titanium.Proxy {
			/**
			 * Current point in song playback, in seconds.
			 */
			currentPlaybackTime: number;

			/**
			 * An `Item` object representing the currently playing media item.
			 */
			readonly nowPlaying: Titanium.Media.Item;

			/**
			 * Playback state.
			 */
			readonly playbackState: number;

			/**
			 * Repeat setting.
			 */
			repeatMode: number;

			/**
			 * Shuffle setting.
			 */
			shuffleMode: number;

			/**
			 * Pauses playback of the current media item.
			 */
			pause(): void;

			/**
			 * Begins playback of the current media item.
			 */
			play(): void;

			/**
			 * Begins seeking backward in the currently playing media.
			 */
			seekBackward(): void;

			/**
			 * Begins seeking forward in the currently playing media item.
			 */
			seekForward(): void;

			/**
			 * Sets the media queue.
			 */
			setQueue(queue: Titanium.Media.Item): void;

			/**
			 * Sets the media queue.
			 */
			setQueue(queue: ReadonlyArray<Titanium.Media.Item>): void;

			/**
			 * Sets the media queue.
			 */
			setQueue(queue: string): void;

			/**
			 * Skips to the beginning of the currently playing media item.
			 */
			skipToBeginning(): void;

			/**
			 * Skips to the next media item in the queue.
			 */
			skipToNext(): void;

			/**
			 * Skips to the previous media item in the queue.
			 */
			skipToPrevious(): void;

			/**
			 * Stops playback of the current media queue.
			 */
			stop(): void;

			/**
			 * Ends a seek operation and returns to the previous playback state.
			 * See also: [seekForward](Titanium.Media.MusicPlayer.seekForward) and
			 * [seekBackward](Titanium.Media.MusicPlayer.seekBackward).
			 */
			stopSeeking(): void;

			/**
			 * Gets the value of the <Titanium.Media.MusicPlayer.currentPlaybackTime> property.
			 */
			getCurrentPlaybackTime(): number;

			/**
			 * Sets the value of the <Titanium.Media.MusicPlayer.currentPlaybackTime> property.
			 */
			setCurrentPlaybackTime(currentPlaybackTime: number): void;

			/**
			 * Gets the value of the <Titanium.Media.MusicPlayer.nowPlaying> property.
			 */
			getNowPlaying(): Titanium.Media.Item;

			/**
			 * Gets the value of the <Titanium.Media.MusicPlayer.playbackState> property.
			 */
			getPlaybackState(): number;

			/**
			 * Gets the value of the <Titanium.Media.MusicPlayer.repeatMode> property.
			 */
			getRepeatMode(): number;

			/**
			 * Sets the value of the <Titanium.Media.MusicPlayer.repeatMode> property.
			 */
			setRepeatMode(repeatMode: number): void;

			/**
			 * Gets the value of the <Titanium.Media.MusicPlayer.shuffleMode> property.
			 */
			getShuffleMode(): number;

			/**
			 * Sets the value of the <Titanium.Media.MusicPlayer.shuffleMode> property.
			 */
			setShuffleMode(shuffleMode: number): void;

		}
		/**
		 * An object for playing basic audio resources.
		 */
		interface Sound extends Titanium.Proxy {
			/**
			 * Audio data is being buffered from the network.
			 */
			readonly STATE_BUFFERING: number;

			/**
			 * Audio playback is being initialized.
			 */
			readonly STATE_INITIALIZED: number;

			/**
			 * Playback is paused.
			 */
			readonly STATE_PAUSED: number;

			/**
			 * Audio playback is active.
			 */
			readonly STATE_PLAYING: number;

			/**
			 * Audio playback is starting.
			 */
			readonly STATE_STARTING: number;

			/**
			 * Audio playback is stopped.
			 */
			readonly STATE_STOPPED: number;

			/**
			 * Audio playback is stopping.
			 */
			readonly STATE_STOPPING: number;

			/**
			 * Player is waiting for audio data from the network.
			 */
			readonly STATE_WAITING_FOR_DATA: number;

			/**
			 * Player is waiting for audio data to fill the queue.
			 */
			readonly STATE_WAITING_FOR_QUEUE: number;

			/**
			 * Used to identify the volume of audio streams for alarms.
			 */
			readonly AUDIO_TYPE_ALARM: number;

			/**
			 * Used to identify the volume of audio streams for DTMF tones or beeps.
			 */
			readonly AUDIO_TYPE_SIGNALLING: number;

			/**
			 * Used to identify the volume of audio streams for media playback.
			 */
			readonly AUDIO_TYPE_MEDIA: number;

			/**
			 * Used to identify the volume of audio streams for notifications.
			 */
			readonly AUDIO_TYPE_NOTIFICATION: number;

			/**
			 * Used to identify the volume of audio streams for the phone ring.
			 */
			readonly AUDIO_TYPE_RING: number;

			/**
			 * Used to identify the volume of audio streams for voice calls.
			 */
			readonly AUDIO_TYPE_VOICE: number;

			/**
			 * Determines whether the audio should continue playing even when its activity is paused.
			 */
			allowBackground: boolean;

			/**
			 * Changes the audio-stream-type.
			 */
			audioType: number;

			/**
			 * Duration of the audio resource.
			 */
			readonly duration: number;

			/**
			 * Determines whether the audio should loop upon completion.
			 */
			looping: boolean;

			/**
			 * Indicates if the audio is paused.
			 */
			paused: boolean;

			/**
			 * Indicates if the audio is playing.
			 */
			readonly playing: boolean;

			/**
			 * Current playback position of the audio.
			 */
			time: number;

			/**
			 * URL identifying the audio resource.
			 */
			url: string;

			/**
			 * Volume of the audio from 0.0 (muted) to 1.0 (loudest).
			 */
			volume: number;

			/**
			 * Returns the value of the [looping](Titanium.Media.Sound.looping) property.
			 */
			isLooping(): boolean;

			/**
			 * Returns the value of the [paused](Titanium.Media.Sound.paused) property.
			 */
			isPaused(): boolean;

			/**
			 * Returns the value of the [playing](Titanium.Media.Sound.playing) property.
			 */
			isPlaying(): boolean;

			/**
			 * Pauses the audio.
			 */
			pause(): void;

			/**
			 * Starting playing the sound, or resume playing a paused sound.
			 */
			play(): void;

			/**
			 * Releases all internal resources.
			 */
			release(): void;

			/**
			 * Resets the audio playback position to the beginning.
			 */
			reset(): void;

			/**
			 * Sets the value of the [looping](Titanium.Media.Sound.looping) property.
			 */
			setLooping(looping: boolean): void;

			/**
			 * Sets the value of the [paused](Titanium.Media.Sound.paused) property.
			 */
			setPaused(paused: boolean): void;

			/**
			 * Stops playing the audio and resets the playback position to the beginning of the clip.
			 */
			stop(): void;

			/**
			 * Gets the value of the <Titanium.Media.Sound.audioType> property.
			 */
			getAudioType(): number;

			/**
			 * Sets the value of the <Titanium.Media.Sound.audioType> property.
			 */
			setAudioType(audioType: number): void;

			/**
			 * Gets the value of the <Titanium.Media.Sound.duration> property.
			 */
			getDuration(): number;

			/**
			 * Gets the value of the <Titanium.Media.Sound.time> property.
			 */
			getTime(): number;

			/**
			 * Sets the value of the <Titanium.Media.Sound.time> property.
			 */
			setTime(time: number): void;

			/**
			 * Gets the value of the <Titanium.Media.Sound.url> property.
			 */
			getUrl(): string;

			/**
			 * Sets the value of the <Titanium.Media.Sound.url> property.
			 */
			setUrl(url: string): void;

			/**
			 * Gets the value of the <Titanium.Media.Sound.volume> property.
			 */
			getVolume(): number;

			/**
			 * Sets the value of the <Titanium.Media.Sound.volume> property.
			 */
			setVolume(volume: number): void;

		}
		/**
		 * An object for playing system sounds.
		 */
		interface SystemAlert extends Titanium.Proxy {
			/**
			 * URL identifying the audio resource.
			 */
			url: string;

			/**
			 * Start playing the system alert.
			 */
			play(): void;

			/**
			 * Gets the value of the <Titanium.Media.SystemAlert.url> property.
			 */
			getUrl(): string;

			/**
			 * Sets the value of the <Titanium.Media.SystemAlert.url> property.
			 */
			setUrl(url: string): void;

		}
		/**
		 * A native control for playing videos.
		 */
		interface VideoPlayer extends Titanium.UI.View {
			/**
			 * Whether or not the current movie can be played on a remote device.
			 */
			allowsAirPlay: boolean;

			/**
			 * Indicates if a movie should automatically start playback.
			 */
			autoplay: boolean;

			/**
			 * Sets the background view for customization which is always displayed behind movie content.
			 */
			backgroundView: Titanium.UI.View;

			/**
			 * URL of the media to play.
			 */
			contentURL: string;

			/**
			 * Current playback time of the current movie in milliseconds.
			 */
			currentPlaybackTime: number;

			/**
			 * The duration of the current movie in milliseconds, or 0.0 if not known.
			 */
			duration: number;

			/**
			 * The end time of movie playback, in milliseconds.
			 */
			endPlaybackTime: number;

			/**
			 * Determines if the movie is presented in the entire screen (obscuring all other application content).
			 */
			fullscreen: boolean;

			/**
			 * The start time of movie playback, in milliseconds.
			 */
			initialPlaybackTime: number;

			/**
			 * Returns the network load state of the movie player.
			 */
			readonly loadState: number;

			/**
			 * Media object to play, as either a `File`,  a `Blob`, or a URL.
			 */
			media: Titanium.Blob | Titanium.Filesystem.File | string;

			/**
			 * The style of the playback controls.
			 */
			mediaControlStyle: number;

			/**
			 * The types of media in the movie, or <Titanium.Media.VIDEO_MEDIA_TYPE_NONE> if not known.
			 */
			mediaTypes: number;

			/**
			 * Returns the status of the movie player.
			 */
			readonly moviePlayerStatus: number;

			/**
			 * Returns the natural size of the movie.
			 */
			naturalSize: MovieSize;

			/**
			 * Use the overlay view to add additional custom views between the video content and the controls.
			 */
			overlayView: Titanium.UI.View;

			/**
			 * Whether or not the receiver allows Picture in Picture playback.
			 */
			pictureInPictureEnabled: boolean;

			/**
			 * Currently playable duration of the movie, in milliseconds, for progressively
			 * downloaded network content, or 0.0 if not known.
			 */
			readonly playableDuration: number;

			/**
			 * Current playback state of the video player.
			 */
			readonly playbackState: number;

			/**
			 * Boolean to indicate if the player has started playing.
			 */
			readonly playing: boolean;

			/**
			 * Determines how the movie player repeats when reaching the end of playback.
			 */
			repeatMode: number;

			/**
			 * Determines how the content scales to fit the view.
			 */
			scalingMode: number;

			/**
			 * Whether or not the receiver shows playback controls. Default is true.
			 */
			showsControls: boolean;

			/**
			 * The playback type of the movie.
			 */
			sourceType: number;

			/**
			 * URL of the media to play.
			 */
			url: string | string[];

			/**
			 * Volume of the audio portion of the video.
			 */
			volume: number;

			/**
			 * Cancels all pending asynchronous thumbnail requests.
			 */
			cancelAllThumbnailImageRequests(): void;

			/**
			 * Pauses playing the video.
			 */
			pause(): void;

			/**
			 * Starts playing the video.
			 */
			play(): void;

			/**
			 * Releases the internal video resources immediately.
			 */
			release(): void;

			/**
			 * Asynchronously request thumbnail images for one or more points in time in the video.
			 */
			requestThumbnailImagesAtTimes(times: ReadonlyArray<number>, option: number, callback: (param0: ThumbnailResponse) => any): void;

			/**
			 * Stops playing the video.
			 */
			stop(): void;

			/**
			 * Returns a thumbnail image for the video at the specified time.
			 */
			thumbnailImageAtTime(time: number, option: number): Titanium.Blob;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.allowsAirPlay> property.
			 */
			getAllowsAirPlay(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.allowsAirPlay> property.
			 */
			setAllowsAirPlay(allowsAirPlay: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.autoplay> property.
			 */
			getAutoplay(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.autoplay> property.
			 */
			setAutoplay(autoplay: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.backgroundView> property.
			 */
			getBackgroundView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.backgroundView> property.
			 */
			setBackgroundView(backgroundView: any): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.contentURL> property.
			 */
			getContentURL(): string;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.contentURL> property.
			 */
			setContentURL(contentURL: string): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.currentPlaybackTime> property.
			 */
			getCurrentPlaybackTime(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.currentPlaybackTime> property.
			 */
			setCurrentPlaybackTime(currentPlaybackTime: number): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.duration> property.
			 */
			getDuration(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.duration> property.
			 */
			setDuration(duration: number): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.endPlaybackTime> property.
			 */
			getEndPlaybackTime(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.endPlaybackTime> property.
			 */
			setEndPlaybackTime(endPlaybackTime: number): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.fullscreen> property.
			 */
			getFullscreen(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.fullscreen> property.
			 */
			setFullscreen(fullscreen: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.initialPlaybackTime> property.
			 */
			getInitialPlaybackTime(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.initialPlaybackTime> property.
			 */
			setInitialPlaybackTime(initialPlaybackTime: number): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.loadState> property.
			 */
			getLoadState(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.media> property.
			 */
			setMedia(media: Titanium.Blob): void;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.media> property.
			 */
			setMedia(media: Titanium.Filesystem.File): void;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.media> property.
			 */
			setMedia(media: string): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.mediaControlStyle> property.
			 */
			getMediaControlStyle(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.mediaControlStyle> property.
			 */
			setMediaControlStyle(mediaControlStyle: number): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.mediaTypes> property.
			 */
			getMediaTypes(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.mediaTypes> property.
			 */
			setMediaTypes(mediaTypes: number): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.moviePlayerStatus> property.
			 */
			getMoviePlayerStatus(): number;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.naturalSize> property.
			 */
			getNaturalSize(): MovieSize;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.naturalSize> property.
			 */
			setNaturalSize(naturalSize: MovieSize): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.overlayView> property.
			 */
			getOverlayView(): Titanium.UI.View;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.overlayView> property.
			 */
			setOverlayView(overlayView: any): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.pictureInPictureEnabled> property.
			 */
			getPictureInPictureEnabled(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.pictureInPictureEnabled> property.
			 */
			setPictureInPictureEnabled(pictureInPictureEnabled: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.playableDuration> property.
			 */
			getPlayableDuration(): number;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.playbackState> property.
			 */
			getPlaybackState(): number;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.playing> property.
			 */
			getPlaying(): boolean;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.repeatMode> property.
			 */
			getRepeatMode(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.repeatMode> property.
			 */
			setRepeatMode(repeatMode: number): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.scalingMode> property.
			 */
			getScalingMode(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.scalingMode> property.
			 */
			setScalingMode(scalingMode: number): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.showsControls> property.
			 */
			getShowsControls(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.showsControls> property.
			 */
			setShowsControls(showsControls: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.sourceType> property.
			 */
			getSourceType(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.sourceType> property.
			 */
			setSourceType(sourceType: number): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.url> property.
			 */
			getUrl(): string | string[];

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.url> property.
			 */
			setUrl(url: string): void;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.url> property.
			 */
			setUrl(url: ReadonlyArray<string>): void;

			/**
			 * Gets the value of the <Titanium.Media.VideoPlayer.volume> property.
			 */
			getVolume(): number;

			/**
			 * Sets the value of the <Titanium.Media.VideoPlayer.volume> property.
			 */
			setVolume(volume: number): void;

		}

		/**
		 * Android-specific media-related functionality.
		 */
		namespace Android {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Scans newly created or downloaded media files to make them available to other
			 * Android media providers, such as the Gallery.
			 */
			function scanMediaFiles(paths: ReadonlyArray<string>, mimeTypes: ReadonlyArray<string>, callback: (param0: MediaScannerResponse) => any): void;

			/**
			 * Set the system homescreen wallpaper.
			 */
			function setSystemWallpaper(image: Titanium.Blob, scale: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.Android.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.Media.Android.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.Media.Android.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.Media.Android.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.Media.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.Media.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		}
	}

	/**
	 * The top level network module.
	 */
	namespace Network {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Special hostname value for listening sockets, representing all
		 * locally available network interfaces.
		 */
		const INADDR_ANY: string;

		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that the device is
		 * communicating over a local-area network.
		 */
		const NETWORK_LAN: number;

		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that the device is
		 * communicating over a mobile network.
		 */
		const NETWORK_MOBILE: number;

		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that no
		 * network is available.
		 */
		const NETWORK_NONE: number;

		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that the
		 * current network type is unknown.
		 */
		const NETWORK_UNKNOWN: number;

		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that the
		 * device is communicating over a WiFi network.
		 */
		const NETWORK_WIFI: number;

		/**
		 * Constant value for an Alert style push notification.
		 */
		const NOTIFICATION_TYPE_ALERT: number;

		/**
		 * Constant value for a Badge style push notification.
		 */
		const NOTIFICATION_TYPE_BADGE: number;

		/**
		 * Constant value for a Sound style push notification.
		 */
		const NOTIFICATION_TYPE_SOUND: number;

		/**
		 * Constant value for a Newsstand style push notification. Only available on iOS5 and later
		 */
		const NOTIFICATION_TYPE_NEWSSTAND: number;

		/**
		 * Constant value specifying read-only mode for sockets.
		 */
		const READ_MODE: number;

		/**
		 * Constant value specifying read-write mode for sockets.
		 */
		const READ_WRITE_MODE: number;

		/**
		 * Constant value representing a socket in the CLOSED state.
		 */
		const SOCKET_CLOSED: number;

		/**
		 * Constant value representing a socket in the CONNECTED state.
		 */
		const SOCKET_CONNECTED: number;

		/**
		 * Constant value representing a socket in the ERROR state.
		 */
		const SOCKET_ERROR: number;

		/**
		 * Constant value representing a socket in the INITIALIZED state.
		 */
		const SOCKET_INITIALIZED: number;

		/**
		 * Constant value representing a socket in the LISTENING state.
		 */
		const SOCKET_LISTENING: number;

		/**
		 * Constant value specifying write-only mode for sockets.
		 */
		const WRITE_MODE: number;

		/**
		 * Constant value specifying TLS version 1.0 for SSL.
		 */
		const TLS_VERSION_1_0: number;

		/**
		 * Constant value specifying TLS version 1.1 for SSL.
		 */
		const TLS_VERSION_1_1: number;

		/**
		 * Constant value specifying TLS version 1.2 for SSL.
		 */
		const TLS_VERSION_1_2: number;

		/**
		 * Constant value specifying that the progress of a download can not be calculated.
		 */
		const PROGRESS_UNKNOWN: number;

		/**
		 * A list of all cookies in the cookie storage.
		 */
		const allHTTPCookies: Titanium.Network.Cookie[];

		/**
		 * Network type value as a constant.
		 */
		const networkType: number;

		/**
		 * Network type as a String. Returns one of `NONE`, `WIFI`, `LAN`, `MOBILE`, or `UNKNOWN`.
		 */
		const networkTypeName: string;

		/**
		 * Boolean value indicating if the device is connected to the network.
		 */
		const online: boolean;

		/**
		 * Remote device UUID if the device is registered with the Apple Push Notification
		 * Service, or null if it is not registered.
		 */
		const remoteDeviceUUID: string;

		/**
		 * Array of push notification type constants enabled for the application.
		 */
		const remoteNotificationTypes: number[];

		/**
		 * Indicates whether push  notifications have been enabled using
		 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications).
		 */
		const remoteNotificationsEnabled: boolean;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Legacy method to add a connectivity listener to listen for network changes.
		 */
		function addConnectivityListener(callback: (param0: any) => any): void;

		/**
		 * Adds a cookie to the HTTP client cookie store.
		 */
		function addHTTPCookie(cookie: Titanium.Network.Cookie): void;

		/**
		 * Adds a cookie to the system cookie store.
		 */
		function addSystemCookie(cookie: Titanium.Network.Cookie): void;

		/**
		 * Creates and returns a `BonjourBrowser` object.
		 */
		function createBonjourBrowser(serviceType: string, domain: string, parameters?: any): Titanium.Network.BonjourBrowser;

		/**
		 * Creates and returns a `BonjourService` object.
		 */
		function createBonjourService(name: string, type: string, domain: string, parameters?: any): Titanium.Network.BonjourService;

		/**
		 * Legacy method to create and return an instance of <Titanium.Network.TCPSocket>.
		 */
		function createTCPSocket(hostName: string, port: number, mode: number, parameters: any): Titanium.Network.TCPSocket;

		/**
		 * Returns a decoded version of a URI encoded value.
		 */
		function decodeURIComponent(value: string): string;

		/**
		 * Returns a URI encoded version of the specified URI component.
		 */
		function encodeURIComponent(value: string): string;

		/**
		 * Gets all the cookies with the domain, path and name matched with the given values from the HTTP client cookie store.
		 */
		function getHTTPCookies(domain: string, path: string, name: string): Titanium.Network.Cookie[];

		/**
		 * Gets all the cookies with the domain matched with the given values from the HTTP client cookie store.
		 */
		function getHTTPCookiesForDomain(domain: string): Titanium.Network.Cookie[];

		/**
		 * Gets all the cookies with the domain, path and name matched with the given values from the system cookie store.
		 */
		function getSystemCookies(domain: string, path: string, name: string): Titanium.Network.Cookie[];

		/**
		 * Removes all the cookies from the HTTP client cookie store.
		 */
		function removeAllHTTPCookies(): void;

		/**
		 * Removes all the cookie from the system client cookie store.
		 */
		function removeAllSystemCookies(): void;

		/**
		 * Removes the cookie with the domain, path and name exactly the same as the given values from the HTTP client cookie store.
		 */
		function removeHTTPCookie(domain: string, path: string, name: string): void;

		/**
		 * Removes the cookies with the domain matched with the given values from the HTTP client cookie store.
		 */
		function removeHTTPCookiesForDomain(domain: string): void;

		/**
		 * Removes the cookie with the domain, path and name exactly the same as the given values from the system cookie store.
		 */
		function removeSystemCookie(domain: string, path: string, name: string): void;

		/**
		 * Registers for push notifications with the Apple Push Notification Service.
		 */
		function registerForPushNotifications(config: PushNotificationConfig): void;

		/**
		 * Unregisters the application for push notifications.
		 */
		function unregisterForPushNotifications(): void;

		/**
		 * Creates and returns an instance of <Titanium.Network.Cookie>.
		 */
		function createCookie(parameters?: any): Titanium.Network.Cookie;

		/**
		 * Creates and returns an instance of <Titanium.Network.HTTPClient>.
		 */
		function createHTTPClient(parameters?: any): Titanium.Network.HTTPClient;

		/**
		 * Gets the value of the <Titanium.Network.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Network.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Network.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Network.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Network.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Network.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Network.allHTTPCookies> property.
		 */
		function getAllHTTPCookies(): Titanium.Network.Cookie[];

		/**
		 * Gets the value of the <Titanium.Network.networkType> property.
		 */
		function getNetworkType(): number;

		/**
		 * Gets the value of the <Titanium.Network.networkTypeName> property.
		 */
		function getNetworkTypeName(): string;

		/**
		 * Gets the value of the <Titanium.Network.online> property.
		 */
		function getOnline(): boolean;

		/**
		 * Gets the value of the <Titanium.Network.remoteDeviceUUID> property.
		 */
		function getRemoteDeviceUUID(): string;

		/**
		 * Gets the value of the <Titanium.Network.remoteNotificationTypes> property.
		 */
		function getRemoteNotificationTypes(): number[];

		/**
		 * Gets the value of the <Titanium.Network.remoteNotificationsEnabled> property.
		 */
		function getRemoteNotificationsEnabled(): boolean;

		/**
		 * A browser for the discovery and retrieval of Bonjour services available on the network.
		 */
		interface BonjourBrowser extends Titanium.Proxy {
			/**
			 * The domain the browser is searching in
			 */
			domain: string;

			/**
			 * Whether or not the browser is currently searching
			 */
			isSearching: boolean;

			/**
			 * The type of the service the browser searches for
			 */
			serviceType: string;

			/**
			 * Conduct a search for Bonjour services matching the type and domain specified during creation
			 */
			search(): void;

			/**
			 * Halt an ongoing search
			 */
			stopSearch(): void;

			/**
			 * Gets the value of the <Titanium.Network.BonjourBrowser.domain> property.
			 */
			getDomain(): string;

			/**
			 * Sets the value of the <Titanium.Network.BonjourBrowser.domain> property.
			 */
			setDomain(domain: string): void;

			/**
			 * Gets the value of the <Titanium.Network.BonjourBrowser.isSearching> property.
			 */
			getIsSearching(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.BonjourBrowser.isSearching> property.
			 */
			setIsSearching(isSearching: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.BonjourBrowser.serviceType> property.
			 */
			getServiceType(): string;

			/**
			 * Sets the value of the <Titanium.Network.BonjourBrowser.serviceType> property.
			 */
			setServiceType(serviceType: string): void;

		}
		/**
		 * Describes a service on the network which is published by Bonjour.
		 */
		interface BonjourService extends Titanium.Proxy {
			/**
			 * the domain of the service
			 */
			domain: string;

			/**
			 * whether or not the service is local to the device
			 */
			isLocal: boolean;

			/**
			 * the name of the service
			 */
			name: string;

			/**
			 * the TCPSocket object that is used to connect to the service
			 */
			socket: any;

			/**
			 * the type of the service
			 */
			type: string;

			/**
			 * Publish a Bonjour service to the network.  Only works if isLocal is TRUE
			 */
			publish(socket: any): void;

			/**
			 * Resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service.
			 */
			resolve(timeout: number): void;

			/**
			 * Halts publication of a service.
			 */
			stop(): void;

			/**
			 * Gets the value of the <Titanium.Network.BonjourService.domain> property.
			 */
			getDomain(): string;

			/**
			 * Sets the value of the <Titanium.Network.BonjourService.domain> property.
			 */
			setDomain(domain: string): void;

			/**
			 * Gets the value of the <Titanium.Network.BonjourService.isLocal> property.
			 */
			getIsLocal(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.BonjourService.isLocal> property.
			 */
			setIsLocal(isLocal: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.BonjourService.name> property.
			 */
			getName(): string;

			/**
			 * Sets the value of the <Titanium.Network.BonjourService.name> property.
			 */
			setName(name: string): void;

			/**
			 * Gets the value of the <Titanium.Network.BonjourService.socket> property.
			 */
			getSocket(): any;

			/**
			 * Sets the value of the <Titanium.Network.BonjourService.socket> property.
			 */
			setSocket(socket: any): void;

			/**
			 * Gets the value of the <Titanium.Network.BonjourService.type> property.
			 */
			getType(): string;

			/**
			 * Sets the value of the <Titanium.Network.BonjourService.type> property.
			 */
			setType(type: string): void;

		}
		/**
		 * Cookie object used to manage the system cookie store and HTTP client cookie store.
		 */
		interface Cookie extends Titanium.Proxy {
			/**
			 * The comment describing the purpose of this cookie
			 */
			comment: string;

			/**
			 * The domain attribute of the cookie.
			 */
			domain: string;

			/**
			 * The expiration Date of the cookie.
			 */
			expiryDate: string;

			/**
			 * Sets the Max-Age attribute of a Cookie, in delta-seconds.
			 */
			maxAge: number;

			/**
			 * The httponly attribute of the cookie.
			 */
			httponly: boolean;

			/**
			 * The name of the cookie.
			 */
			readonly name: string;

			/**
			 * The origual url attribute of the cookie.
			 */
			originalUrl: string;

			/**
			 * The path attribute of the cookie.
			 */
			path: string;

			/**
			 * The secure attribute of the cookie.
			 */
			secure: boolean;

			/**
			 * The value of the cookie.
			 */
			value: string;

			/**
			 * The version of the cookie specification to which this cookie conforms.
			 */
			version: number;

			/**
			 * Returns true if the cookie is valid.
			 */
			isValid(): boolean;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.comment> property.
			 */
			getComment(): string;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.comment> property.
			 */
			setComment(comment: string): void;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.domain> property.
			 */
			getDomain(): string;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.domain> property.
			 */
			setDomain(domain: string): void;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.expiryDate> property.
			 */
			getExpiryDate(): string;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.expiryDate> property.
			 */
			setExpiryDate(expiryDate: string): void;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.maxAge> property.
			 */
			getMaxAge(): number;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.maxAge> property.
			 */
			setMaxAge(maxAge: number): void;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.httponly> property.
			 */
			getHttponly(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.httponly> property.
			 */
			setHttponly(httponly: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.name> property.
			 */
			getName(): string;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.originalUrl> property.
			 */
			getOriginalUrl(): string;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.originalUrl> property.
			 */
			setOriginalUrl(originalUrl: string): void;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.path> property.
			 */
			getPath(): string;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.path> property.
			 */
			setPath(path: string): void;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.secure> property.
			 */
			getSecure(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.secure> property.
			 */
			setSecure(secure: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.value> property.
			 */
			getValue(): string;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.value> property.
			 */
			setValue(value: string): void;

			/**
			 * Gets the value of the <Titanium.Network.Cookie.version> property.
			 */
			getVersion(): number;

			/**
			 * Sets the value of the <Titanium.Network.Cookie.version> property.
			 */
			setVersion(version: number): void;

		}
		/**
		 * HTTP client object that (mostly) implements the XMLHttpRequest specification.
		 */
		interface HTTPClient extends Titanium.Proxy {
			/**
			 * Ready state constant indicating that the request is complete.
			 */
			readonly DONE: number;

			/**
			 * Ready state constant indicating that response headers have been received.
			 */
			readonly HEADERS_RECEIVED: number;

			/**
			 * Ready state constant indicating that response data is being received from the remote server.
			 */
			readonly LOADING: number;

			/**
			 * Ready state constant indicating that the connection has been opened, but the request has
			 * not yet been sent.
			 */
			readonly OPENED: number;

			/**
			 * Ready state constant indicating that HTTPClient request has not been opened or sent.
			 */
			readonly UNSENT: number;

			/**
			 * All of the response headers.
			 */
			readonly allResponseHeaders: string;

			/**
			 * Returns all the response headers returned with the request.
			 */
			readonly responseHeaders: any;

			/**
			 * Determines whether automatic encoding is enabled for the specified URL.
			 */
			autoEncodeUrl: boolean;

			/**
			 * Determines whether automatic automatic handling of HTTP redirects is enabled.
			 */
			autoRedirect: boolean;

			/**
			 * Indicates whether the response was successful.
			 */
			readonly connected: boolean;

			/**
			 * Connection type, normally either `GET`, `POST` or `PATCH`.
			 */
			readonly connectionType: string;

			/**
			 * Sets the domain parameter for authentication credentials.
			 */
			domain: string;

			/**
			 * Determines whether the client should attempt to keep a persistent connection.
			 */
			enableKeepAlive: boolean;

			/**
			 * Target local file to receive data.
			 */
			file: string;

			/**
			 * Absolute URL of the request.
			 */
			readonly location: string;

			/**
			 * Function to be called at regular intervals as the request data is being received.
			 */
			ondatastream: (param0: any) => any;

			/**
			 * Function to be called upon a error response.
			 */
			onerror: (param0: FailureResponse) => any;

			/**
			 * Function to be called upon a successful response.
			 */
			onload: (param0: SuccessResponse) => any;

			/**
			 * Function to be called for each [readyState](Titanium.Network.HTTPClient.readyState) change.
			 */
			onreadystatechange: (param0: any) => any;

			/**
			 * Function to be called at regular intervals as the request data is being transmitted.
			 */
			onsendstream: (param0: any) => any;

			/**
			 * Sets the password parameter for authentication credentials.
			 */
			password: string;

			/**
			 * The current ready state of this HTTP request.
			 */
			readonly readyState: number;

			/**
			 * Response data as a `Blob` object.
			 */
			readonly responseData: Titanium.Blob;

			/**
			 * Response as text.
			 */
			readonly responseText: string;

			/**
			 * Response object as an XML DOM Document object.
			 */
			readonly responseXML: Titanium.XML.Document;

			/**
			 * The Security Manager for this client.
			 */
			securityManager: SecurityManagerProtocol;

			/**
			 * Response HTTP status code.
			 */
			readonly status: number;

			/**
			 * Human-readable status message associated with the status code.
			 */
			readonly statusText: string;

			/**
			 * Timeout in milliseconds when the connection should be aborted.
			 */
			timeout: number;

			/**
			 * Sets the username parameter for authentication credentials.
			 */
			username: string;

			/**
			 * Determines how SSL certification validation is performed on connection.
			 */
			validatesSecureCertificate: boolean;

			/**
			 * Sets the TLS version to use for handshakes.
			 */
			tlsVersion: number;

			/**
			 * Determines whether HTTP responses are cached.
			 */
			cache: boolean;

			/**
			 * Cancels a pending request.
			 */
			abort(): void;

			/**
			 * Registers a new AuthSchemeFactory for a given scheme.
			 */
			addAuthFactory(scheme: string, factory: any): void;

			/**
			 * Adds a custom key manager.
			 */
			addKeyManager(X509KeyManager: any): void;

			/**
			 * Adds a custom trust manager.
			 */
			addTrustManager(X509TrustManager: any): void;

			/**
			 * Clears any cookies stored for the host.
			 */
			clearCookies(host: string): void;

			/**
			 * Returns the value of the specified response header.
			 */
			getResponseHeader(name: string): string;

			/**
			 * Opens the request and prepares the connection.
			 */
			open(method: string, url: string, async?: boolean): void;

			/**
			 * Sends the request.
			 */
			send(data?: any): void;

			/**
			 * Sends the request.
			 */
			send(data?: string): void;

			/**
			 * Sends the request.
			 */
			send(data?: Titanium.Filesystem.File): void;

			/**
			 * Sends the request.
			 */
			send(data?: Titanium.Blob): void;

			/**
			 * Sets the value for the specified request header. Must be called after `open` but before `send`.
			 */
			setRequestHeader(name: string, value: string): void;

			/**
			 * Sets the request timeout.
			 */
			setTimeout(timeout: number): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.allResponseHeaders> property.
			 */
			getAllResponseHeaders(): string;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.responseHeaders> property.
			 */
			getResponseHeaders(): any;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.autoEncodeUrl> property.
			 */
			getAutoEncodeUrl(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.autoEncodeUrl> property.
			 */
			setAutoEncodeUrl(autoEncodeUrl: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.autoRedirect> property.
			 */
			getAutoRedirect(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.autoRedirect> property.
			 */
			setAutoRedirect(autoRedirect: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.connected> property.
			 */
			getConnected(): boolean;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.connectionType> property.
			 */
			getConnectionType(): string;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.domain> property.
			 */
			getDomain(): string;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.domain> property.
			 */
			setDomain(domain: string): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.enableKeepAlive> property.
			 */
			getEnableKeepAlive(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.enableKeepAlive> property.
			 */
			setEnableKeepAlive(enableKeepAlive: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.file> property.
			 */
			getFile(): string;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.file> property.
			 */
			setFile(file: string): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.location> property.
			 */
			getLocation(): string;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.ondatastream> property.
			 */
			getOndatastream(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.ondatastream> property.
			 */
			setOndatastream(ondatastream: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.onerror> property.
			 */
			getOnerror(): (param0: FailureResponse) => any;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.onerror> property.
			 */
			setOnerror(onerror: (param0: FailureResponse) => any): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.onload> property.
			 */
			getOnload(): (param0: SuccessResponse) => any;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.onload> property.
			 */
			setOnload(onload: (param0: SuccessResponse) => any): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.onreadystatechange> property.
			 */
			getOnreadystatechange(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.onreadystatechange> property.
			 */
			setOnreadystatechange(onreadystatechange: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.onsendstream> property.
			 */
			getOnsendstream(): (param0: any) => any;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.onsendstream> property.
			 */
			setOnsendstream(onsendstream: (param0: any) => any): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.password> property.
			 */
			getPassword(): string;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.password> property.
			 */
			setPassword(password: string): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.readyState> property.
			 */
			getReadyState(): number;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.responseData> property.
			 */
			getResponseData(): Titanium.Blob;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.responseText> property.
			 */
			getResponseText(): string;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.responseXML> property.
			 */
			getResponseXML(): Titanium.XML.Document;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.securityManager> property.
			 */
			getSecurityManager(): SecurityManagerProtocol;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.securityManager> property.
			 */
			setSecurityManager(securityManager: SecurityManagerProtocol): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.status> property.
			 */
			getStatus(): number;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.statusText> property.
			 */
			getStatusText(): string;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.timeout> property.
			 */
			getTimeout(): number;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.username> property.
			 */
			getUsername(): string;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.username> property.
			 */
			setUsername(username: string): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.validatesSecureCertificate> property.
			 */
			getValidatesSecureCertificate(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.validatesSecureCertificate> property.
			 */
			setValidatesSecureCertificate(validatesSecureCertificate: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.tlsVersion> property.
			 */
			getTlsVersion(): number;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.tlsVersion> property.
			 */
			setTlsVersion(tlsVersion: number): void;

			/**
			 * Gets the value of the <Titanium.Network.HTTPClient.cache> property.
			 */
			getCache(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.HTTPClient.cache> property.
			 */
			setCache(cache: boolean): void;

		}
		/**
		 * The TCPSocket instance returned from <Titanium.Network.createTCPSocket>.  This object
		 * represents a socket which either listens locally on the device for connections,
		 * or connects to a remote machine.
		 */
		interface TCPSocket extends Titanium.Proxy {
			/**
			 * the host name to connect to.  Must be <Titanium.Network.INADDR_ANY> or an identifier for the local device in order to listen
			 */
			hostName: string;

			/**
			 * whether or not the socket is valid
			 */
			isValid: boolean;

			/**
			 * the socket's mode
			 */
			mode: number;

			/**
			 * the port to connect/listen on
			 */
			port: number;

			/**
			 * strip terminating null character when sending string data; default is false
			 */
			stripTerminator: boolean;

			/**
			 * close the socket
			 */
			close(): void;

			/**
			 * connect the scocket to a TCP server
			 */
			connect(): void;

			/**
			 * set up the socket to receive connections
			 */
			listen(): void;

			/**
			 * write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE
			 */
			write(data: any, sendTo: number): void;

			/**
			 * write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE
			 */
			write(data: string, sendTo: number): void;

			/**
			 * Gets the value of the <Titanium.Network.TCPSocket.hostName> property.
			 */
			getHostName(): string;

			/**
			 * Sets the value of the <Titanium.Network.TCPSocket.hostName> property.
			 */
			setHostName(hostName: string): void;

			/**
			 * Gets the value of the <Titanium.Network.TCPSocket.isValid> property.
			 */
			getIsValid(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.TCPSocket.isValid> property.
			 */
			setIsValid(isValid: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.TCPSocket.mode> property.
			 */
			getMode(): number;

			/**
			 * Sets the value of the <Titanium.Network.TCPSocket.mode> property.
			 */
			setMode(mode: number): void;

			/**
			 * Gets the value of the <Titanium.Network.TCPSocket.port> property.
			 */
			getPort(): number;

			/**
			 * Sets the value of the <Titanium.Network.TCPSocket.port> property.
			 */
			setPort(port: number): void;

			/**
			 * Gets the value of the <Titanium.Network.TCPSocket.stripTerminator> property.
			 */
			getStripTerminator(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.TCPSocket.stripTerminator> property.
			 */
			setStripTerminator(stripTerminator: boolean): void;

		}

		/**
		 * Socket module, used for creating sockets.
		 */
		namespace Socket {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * State value representing an initialized socket.
			 */
			const INITIALIZED: number;

			/**
			 * State value representing a connected socket.
			 */
			const CONNECTED: number;

			/**
			 * State value representing a socket that is listening for connections.
			 */
			const LISTENING: number;

			/**
			 * State value representing a closed socket.
			 */
			const CLOSED: number;

			/**
			 * State value indicating an error has occurred on the socket.
			 */
			const ERROR: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Returns a new TCP socket object.
			 */
			function createTCP(params?: any): Titanium.Network.Socket.TCP;

			/**
			 * Gets the value of the <Titanium.Network.Socket.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.Network.Socket.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.Network.Socket.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.Network.Socket.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.Network.Socket.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.Network.Socket.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

			/**
			 * TCP socket that implements the `Titanium.IOStream` interface.
			 */
			interface TCP extends Titanium.Proxy {
				/**
				 * The host to connect to or listen on.
				 */
				host: string;

				/**
				 * The port to connect to or listen on.
				 */
				port: number;

				/**
				 * Max number of pending incoming connections to be allowed when the socket is in the [LISTENING](Titanium.Network.Socket.LISTENING) state.
				 */
				listenQueueSize: number;

				/**
				 * Timeout, in milliseconds, for `connect` and all `write` operations.
				 */
				timeout: number;

				/**
				 * Callback to be fired when the socket enters the "connected" state.
				 */
				connected: (param0: ConnectedCallbackArgs) => any;

				/**
				 * Callback to be fired when the socket enters the [ERROR](Titanium.Network.Socket.ERROR) state.
				 */
				error: (param0: ErrorCallbackArgs) => any;

				/**
				 * Callback to be fired when a listener accepts a connection.
				 */
				accepted: (param0: AcceptedCallbackArgs) => any;

				/**
				 * Current state of the socket.
				 */
				readonly state: number;

				/**
				 * Reads data from this stream into a buffer.
				 */
				read(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: ReadCallbackArgs) => any): number;

				/**
				 * Writes data from a buffer to this stream.
				 */
				write(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: WriteCallbackArgs) => any): number;

				/**
				 * Indicates whether this stream is writable.
				 */
				isWritable(): boolean;

				/**
				 * Indicates whether this stream is readable.
				 */
				isReadable(): boolean;

				/**
				 * Closes a socket.
				 */
				close(): void;

				/**
				 * Attempts to connect the socket to its host/port.
				 */
				connect(): void;

				/**
				 * Attempts to start listening on the socket's host/port.
				 */
				listen(): void;

				/**
				 * Tells a [LISTENING](Titanium.Network.Socket.LISTENING) socket to accept a connection request at the top of a listener's request queue when one becomes available.
				 */
				accept(options: AcceptDict): void;

				/**
				 * Gets the value of the <Titanium.Network.Socket.TCP.host> property.
				 */
				getHost(): string;

				/**
				 * Sets the value of the <Titanium.Network.Socket.TCP.host> property.
				 */
				setHost(host: string): void;

				/**
				 * Gets the value of the <Titanium.Network.Socket.TCP.port> property.
				 */
				getPort(): number;

				/**
				 * Sets the value of the <Titanium.Network.Socket.TCP.port> property.
				 */
				setPort(port: number): void;

				/**
				 * Gets the value of the <Titanium.Network.Socket.TCP.listenQueueSize> property.
				 */
				getListenQueueSize(): number;

				/**
				 * Sets the value of the <Titanium.Network.Socket.TCP.listenQueueSize> property.
				 */
				setListenQueueSize(listenQueueSize: number): void;

				/**
				 * Gets the value of the <Titanium.Network.Socket.TCP.timeout> property.
				 */
				getTimeout(): number;

				/**
				 * Sets the value of the <Titanium.Network.Socket.TCP.timeout> property.
				 */
				setTimeout(timeout: number): void;

				/**
				 * Gets the value of the <Titanium.Network.Socket.TCP.connected> property.
				 */
				getConnected(): (param0: ConnectedCallbackArgs) => any;

				/**
				 * Sets the value of the <Titanium.Network.Socket.TCP.connected> property.
				 */
				setConnected(connected: (param0: ConnectedCallbackArgs) => any): void;

				/**
				 * Gets the value of the <Titanium.Network.Socket.TCP.error> property.
				 */
				getError(): (param0: ErrorCallbackArgs) => any;

				/**
				 * Sets the value of the <Titanium.Network.Socket.TCP.error> property.
				 */
				setError(error: (param0: ErrorCallbackArgs) => any): void;

				/**
				 * Gets the value of the <Titanium.Network.Socket.TCP.accepted> property.
				 */
				getAccepted(): (param0: AcceptedCallbackArgs) => any;

				/**
				 * Sets the value of the <Titanium.Network.Socket.TCP.accepted> property.
				 */
				setAccepted(accepted: (param0: AcceptedCallbackArgs) => any): void;

				/**
				 * Gets the value of the <Titanium.Network.Socket.TCP.state> property.
				 */
				getState(): number;

			}
		}
	}

	/**
	 * The top-level Platform module.  The Platform module is used to access the device's platform-related
	 * functionality.
	 */
	namespace Platform {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Constant to indicate that the system is plugged in and currently being charged.
		 */
		const BATTERY_STATE_CHARGING: number;

		/**
		 * Constant to indicate that the battery is fully charged.
		 */
		const BATTERY_STATE_FULL: number;

		/**
		 * Constant to indicate that the battery state is not known or monitoring is disabled.
		 */
		const BATTERY_STATE_UNKNOWN: number;

		/**
		 * Constant to indicate that the system is unplugged.
		 */
		const BATTERY_STATE_UNPLUGGED: number;

		/**
		 * System's WIFI IP address. No other network types are supported.
		 */
		const address: string;

		/**
		 * System's processor architecture.
		 */
		const architecture: string;

		/**
		 * System's unused memory, measured in bytes.
		 */
		const availableMemory: number;

		/**
		 * Battery level in percent, accessible only when `batteryMonitoring` is enabled. Measured
		 * in 5% increments on iPhone/iPad.
		 */
		const batteryLevel: number;

		/**
		 * Determines whether battery monitoring is enabled.
		 */
		let batteryMonitoring: boolean;

		/**
		 * Indicates the state of the battery. Accessible only when `batteryMonitoring` is enabled.
		 */
		const batteryState: number;

		/**
		 * Returns the DisplayCaps object.
		 */
		const displayCaps: Titanium.Platform.DisplayCaps;

		/**
		 * Applications's globally-unique ID (UUID).
		 */
		const id: string;

		/**
		 * An alphanumeric string that uniquely identifies a device to the app's vendor.
		 */
		const identifierForVendor: string;

		/**
		 * An alphanumeric string unique to each device, used only for serving advertisements.
		 */
		let identifierForAdvertising: string;

		/**
		 * A Boolean value that indicates whether the user has limited ad tracking.
		 */
		const isAdvertisingTrackingEnabled: boolean;

		/**
		 * System's default language.
		 */
		const locale: string;

		/**
		 * System's network interface mac address, or app UUID.
		 */
		const macaddress: string;

		/**
		 * Manufacturer of the device.
		 */
		const manufacturer: string;

		/**
		 * Model of the device.
		 */
		const model: string;

		/**
		 * Name of the platform. Returns `android` for the Android platform, `iPhone OS` for the iOS
		 * platform (iPhone, iPad, or iPod Touch), and `windows` for the Windows platform.
		 * Since iOS 10 this property returns `iOS` for for the iOS platform (iPhone, iPad, or iPod Touch).
		 */
		const name: string;

		/**
		 * System's WIFI network mask. No other network types are supported.
		 */
		const netmask: string;

		/**
		 * Short name of the system's Operating System. Returns `android` for the Android platfrom,
		 * `iphone` for the iPhone or iPod Touch, `ipad` for the iPad, `windowsphone` for Windows Phone, and `windowsstore` for Windows Store
		 * platform.
		 */
		const osname: string;

		/**
		 * Operating System architecture. On Android, this is `32bit`.
		 */
		const ostype: string;

		/**
		 * Number of logical processing cores.
		 */
		const processorCount: number;

		/**
		 * Short name of the JavaScript runtime in use.
		 */
		const runtime: string;

		/**
		 * System's total memory, measured in bytes.
		 */
		const totalMemory: number;

		/**
		 * System uptime since last boot in seconds.
		 */
		const uptime: number;

		/**
		 * System name, if set. On iOS, this can be found in Settings > General > About > Name.
		 */
		const username: string;

		/**
		 * System's OS version.
		 */
		const version: string;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Returns whether the system is configured with a default application to handle the URL's protocol.
		 */
		function canOpenURL(url: string): boolean;

		/**
		 * Returns an array of basic cpu information for all logical processors
		 */
		function cpus(): CPU[];

		/**
		 * Creates a globally-unique identifier.
		 */
		function createUUID(): string;

		/**
		 * Opens this URL using the system's default application for its protocol.
		 */
		function openURL(url: string, options: any, callback: () => any): boolean;

		/**
		 * Returns whether the system settings are configured to show times in 24-hour format.
		 */
		function is24HourTimeFormat(): boolean;

		/**
		 * Gets the value of the <Titanium.Platform.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Platform.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Platform.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Platform.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Platform.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Platform.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Gets the value of the <Titanium.Platform.address> property.
		 */
		function getAddress(): string;

		/**
		 * Gets the value of the <Titanium.Platform.architecture> property.
		 */
		function getArchitecture(): string;

		/**
		 * Gets the value of the <Titanium.Platform.availableMemory> property.
		 */
		function getAvailableMemory(): number;

		/**
		 * Gets the value of the <Titanium.Platform.batteryLevel> property.
		 */
		function getBatteryLevel(): number;

		/**
		 * Gets the value of the <Titanium.Platform.batteryMonitoring> property.
		 */
		function getBatteryMonitoring(): boolean;

		/**
		 * Sets the value of the <Titanium.Platform.batteryMonitoring> property.
		 */
		function setBatteryMonitoring(batteryMonitoring: boolean): void;

		/**
		 * Gets the value of the <Titanium.Platform.batteryState> property.
		 */
		function getBatteryState(): number;

		/**
		 * Gets the value of the <Titanium.Platform.displayCaps> property.
		 */
		function getDisplayCaps(): Titanium.Platform.DisplayCaps;

		/**
		 * Gets the value of the <Titanium.Platform.id> property.
		 */
		function getId(): string;

		/**
		 * Gets the value of the <Titanium.Platform.identifierForVendor> property.
		 */
		function getIdentifierForVendor(): string;

		/**
		 * Gets the value of the <Titanium.Platform.identifierForAdvertising> property.
		 */
		function getIdentifierForAdvertising(): string;

		/**
		 * Sets the value of the <Titanium.Platform.identifierForAdvertising> property.
		 */
		function setIdentifierForAdvertising(identifierForAdvertising: string): void;

		/**
		 * Gets the value of the <Titanium.Platform.isAdvertisingTrackingEnabled> property.
		 */
		function getIsAdvertisingTrackingEnabled(): boolean;

		/**
		 * Gets the value of the <Titanium.Platform.locale> property.
		 */
		function getLocale(): string;

		/**
		 * Gets the value of the <Titanium.Platform.macaddress> property.
		 */
		function getMacaddress(): string;

		/**
		 * Gets the value of the <Titanium.Platform.manufacturer> property.
		 */
		function getManufacturer(): string;

		/**
		 * Gets the value of the <Titanium.Platform.model> property.
		 */
		function getModel(): string;

		/**
		 * Gets the value of the <Titanium.Platform.name> property.
		 */
		function getName(): string;

		/**
		 * Gets the value of the <Titanium.Platform.netmask> property.
		 */
		function getNetmask(): string;

		/**
		 * Gets the value of the <Titanium.Platform.osname> property.
		 */
		function getOsname(): string;

		/**
		 * Gets the value of the <Titanium.Platform.ostype> property.
		 */
		function getOstype(): string;

		/**
		 * Gets the value of the <Titanium.Platform.processorCount> property.
		 */
		function getProcessorCount(): number;

		/**
		 * Gets the value of the <Titanium.Platform.runtime> property.
		 */
		function getRuntime(): string;

		/**
		 * Gets the value of the <Titanium.Platform.totalMemory> property.
		 */
		function getTotalMemory(): number;

		/**
		 * Gets the value of the <Titanium.Platform.uptime> property.
		 */
		function getUptime(): number;

		/**
		 * Gets the value of the <Titanium.Platform.username> property.
		 */
		function getUsername(): string;

		/**
		 * Gets the value of the <Titanium.Platform.version> property.
		 */
		function getVersion(): string;

		/**
		 * The Display Caps object returned by the <Titanium.Platform.displayCaps> property.
		 */
		interface DisplayCaps extends Titanium.Proxy {
			/**
			 * Logical density of the display.
			 */
			readonly density: string;

			/**
			 * Display density expressed as dots-per-inch.
			 */
			readonly dpi: number;

			/**
			 * Logical density of the display, as a scaling factor for the Density Independent Pixel (dip)
			 * unit.
			 */
			readonly logicalDensityFactor: number;

			/**
			 * Absolute height of the display in relation to UI orientation. Measured in platform-specific
			 * units; pixels on Android and density-independent pixels (dip) on iOS.
			 */
			readonly platformHeight: number;

			/**
			 * Absolute width of the display in relation to UI orientation. Measured in platform-specific
			 * units; pixels on Android and density-independent pixels (dip) on iOS.
			 */
			readonly platformWidth: number;

			/**
			 * Physical pixels per inch of the display in the X dimension.
			 */
			readonly xdpi: number;

			/**
			 * Physical pixels per inch of the display in the Y dimension.
			 */
			readonly ydpi: number;

			/**
			 * Gets the value of the <Titanium.Platform.DisplayCaps.density> property.
			 */
			getDensity(): string;

			/**
			 * Gets the value of the <Titanium.Platform.DisplayCaps.dpi> property.
			 */
			getDpi(): number;

			/**
			 * Gets the value of the <Titanium.Platform.DisplayCaps.logicalDensityFactor> property.
			 */
			getLogicalDensityFactor(): number;

			/**
			 * Gets the value of the <Titanium.Platform.DisplayCaps.platformHeight> property.
			 */
			getPlatformHeight(): number;

			/**
			 * Gets the value of the <Titanium.Platform.DisplayCaps.platformWidth> property.
			 */
			getPlatformWidth(): number;

			/**
			 * Gets the value of the <Titanium.Platform.DisplayCaps.xdpi> property.
			 */
			getXdpi(): number;

			/**
			 * Gets the value of the <Titanium.Platform.DisplayCaps.ydpi> property.
			 */
			getYdpi(): number;

		}

		/**
		 * The Android-specific Platform module, used to access the device's platform-related functionality.
		 */
		namespace Android {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			let bubbleParent: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			const apiName: string;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Android API level identifier of the Operating System.
			 */
			const API_LEVEL: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is large
			 */
			const PHYSICAL_SIZE_CATEGORY_LARGE: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is normal
			 */
			const PHYSICAL_SIZE_CATEGORY_NORMAL: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is small
			 */
			const PHYSICAL_SIZE_CATEGORY_SMALL: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is undefined
			 */
			const PHYSICAL_SIZE_CATEGORY_UNDEFINED: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is extra large
			 */
			const PHYSICAL_SIZE_CATEGORY_XLARGE: number;

			/**
			 * The physical size category of the Android device or emulator.
			 */
			const physicalSizeCategory: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: any) => any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event: any): void;

			/**
			 * Applies the properties to the proxy.
			 */
			function applyProperties(props: any): void;

			/**
			 * Gets the value of the <Titanium.Platform.Android.bubbleParent> property.
			 */
			function getBubbleParent(): boolean;

			/**
			 * Sets the value of the <Titanium.Platform.Android.bubbleParent> property.
			 */
			function setBubbleParent(bubbleParent: boolean): void;

			/**
			 * Gets the value of the <Titanium.Platform.Android.apiName> property.
			 */
			function getApiName(): string;

			/**
			 * Gets the value of the <Titanium.Platform.Android.lifecycleContainer> property.
			 */
			function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Sets the value of the <Titanium.Platform.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

			/**
			 * Sets the value of the <Titanium.Platform.Android.lifecycleContainer> property.
			 */
			function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

			/**
			 * Gets the value of the <Titanium.Platform.Android.physicalSizeCategory> property.
			 */
			function getPhysicalSizeCategory(): number;

		}
	}

	/**
	 * Stream module containing stream utility methods.
	 */
	namespace Stream {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Use with [createStream](Titanium.Stream.createStream) to open a stream in read
		 * mode.
		 */
		const MODE_READ: number;

		/**
		 * Use with [createStream](Titanium.Stream.createStream) to open a stream in write
		 * mode.
		 */
		const MODE_WRITE: number;

		/**
		 * Use with [createStream](Titanium.Stream.createStream) to open a stream in append
		 * mode.
		 */
		const MODE_APPEND: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Creates stream from a `Buffer` or `Blob` object.
		 */
		function createStream(params: CreateStreamArgs): Titanium.IOStream;

		/**
		 * Asynchronously reads data from an [IOStream](Titanium.IOStream) into a buffer.
		 */
		function read(sourceStream: Titanium.IOStream, buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: ReadCallbackArgs) => any): void;

		/**
		 * Reads all data from the specified [IOStream](Titanium.IOStream).
		 */
		function readAll(sourceStream: Titanium.IOStream, buffer?: Titanium.Buffer, resultsCallback?: (param0: ReadCallbackArgs) => any): Titanium.Buffer | void;

		/**
		 * Asynchronously writes data from a buffer to an [IOStream](Titanium.IOStream).
		 */
		function write(outputStream: Titanium.IOStream, buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: WriteCallbackArgs) => any): void;

		/**
		 * Writes all data from an input stream to an output stream.
		 */
		function writeStream(inputStream: Titanium.IOStream, outputStream: Titanium.IOStream, maxChunkSize: number, resultsCallback?: (param0: WriteStreamCallbackArgs) => any): void;

		/**
		 * Reads data from input stream and passes it to a handler method.
		 */
		function pump(inputStream: Titanium.IOStream, handler: (param0: PumpCallbackArgs) => any, maxChunkSize: number, isAsync?: boolean): void;

		/**
		 * Gets the value of the <Titanium.Stream.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Stream.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Stream.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Stream.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Stream.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Stream.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

	}

	/**
	 * The top-level Utils module, containing a set of JavaScript methods that are often useful when
	 * building applications.
	 */
	namespace Utils {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Returns the specified data decoded from Base64.
		 */
		function base64decode(obj: string): Titanium.Blob;

		/**
		 * Returns the specified data decoded from Base64.
		 */
		function base64decode(obj: Titanium.Blob): Titanium.Blob;

		/**
		 * Returns the specified data decoded from Base64.
		 */
		function base64decode(obj: Titanium.Filesystem.File): Titanium.Blob;

		/**
		 * Returns the specified data encoded to Base64.
		 */
		function base64encode(obj: string): Titanium.Blob;

		/**
		 * Returns the specified data encoded to Base64.
		 */
		function base64encode(obj: Titanium.Blob): Titanium.Blob;

		/**
		 * Returns the specified data encoded to Base64.
		 */
		function base64encode(obj: Titanium.Filesystem.File): Titanium.Blob;

		/**
		 * Returns a MD5 digest of the specified data as a hex-based String.
		 */
		function md5HexDigest(obj: string): string;

		/**
		 * Returns a MD5 digest of the specified data as a hex-based String.
		 */
		function md5HexDigest(obj: Titanium.Blob): string;

		/**
		 * Returns a SHA-1 hash of the specified data as a hex-based String.
		 */
		function sha1(obj: string): string;

		/**
		 * Returns a SHA-1 hash of the specified data as a hex-based String.
		 */
		function sha1(obj: Titanium.Blob): string;

		/**
		 * Returns a SHA-256 hash of the specified data as a hex-based String.
		 */
		function sha256(obj: string): string;

		/**
		 * Returns a SHA-256 hash of the specified data as a hex-based String.
		 */
		function sha256(obj: Titanium.Blob): string;

		/**
		 * Gets the value of the <Titanium.Utils.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Utils.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Utils.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Utils.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Utils.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Utils.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

	}

	/**
	 * Used to enable data and file transfers between a watchOS and iOS application.
	 */
	namespace WatchSession {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * Returns the current activation state of the watch.
		 */
		const activationState: number;

		/**
		 * The watch is currently not activated.
		 */
		const ACTIVATION_STATE_NOT_ACTIVATED: number;

		/**
		 * The watch is currently inactive.
		 */
		const ACTIVATION_STATE_INACTIVE: number;

		/**
		 * The watch is currently activated.
		 */
		const ACTIVATION_STATE_ACTIVATED: number;

		/**
		 * Returns `true` if there is more content for the session to deliver.
		 */
		const hasContentPending: boolean;

		/**
		 * The number of calls remaining to `transferCurrentComplication` before the system starts
		 * transferring the complicationUserInfo as regular userInfos.
		 */
		const remainingComplicationUserInfoTransfers: number;

		/**
		 * Returns `true` if the device supports watch connectivity.
		 */
		const isSupported: boolean;

		/**
		 * Returns `true` if the device is paired with a watch.
		 */
		const isPaired: boolean;

		/**
		 * Returns `true` if the accompanying watch app is installed.
		 */
		const isWatchAppInstalled: boolean;

		/**
		 * Returns `true` if complication is enabled on the installed watch app.
		 */
		const isComplicationEnabled: boolean;

		/**
		 * Returns `true` if the watch is currently reachable.
		 */
		const isReachable: boolean;

		/**
		 * Returns `true` if the watch is currently activated.
		 */
		const isActivated: boolean;

		/**
		 * The most recent application context sent to the watch app.
		 */
		const recentApplicationContext: any;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Activates the watch session
		 */
		function activateSession(): void;

		/**
		 * Sends a message to the apple watch.
		 */
		function sendMessage(message: any, reply?: (param0: MessageReply) => any): void;

		/**
		 * Sends an app context update to the apple watch.
		 */
		function updateApplicationContext(params: any): void;

		/**
		 * Transfers an user info to the apple watch.
		 */
		function transferUserInfo(params: any): void;

		/**
		 * Transfers a file to the apple watch.
		 */
		function transferFile(params: any): void;

		/**
		 * Transfers complication data to the watch application.
		 */
		function transferCurrentComplication(params: any): void;

		/**
		 * Cancels all incomplete user info and complication transfers to the apple watch.
		 */
		function cancelAllUserInfoTransfers(): void;

		/**
		 * Cancels all incomplete file transfers to the apple watch.
		 */
		function cancelAllFileTransfers(): void;

		/**
		 * Cancels all incomplete transfers to the apple watch.
		 */
		function cancelAllTransfers(): void;

		/**
		 * Gets the value of the <Titanium.WatchSession.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.WatchSession.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.WatchSession.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.WatchSession.activationState> property.
		 */
		function getActivationState(): number;

		/**
		 * Gets the value of the <Titanium.WatchSession.hasContentPending> property.
		 */
		function getHasContentPending(): boolean;

		/**
		 * Gets the value of the <Titanium.WatchSession.remainingComplicationUserInfoTransfers> property.
		 */
		function getRemainingComplicationUserInfoTransfers(): number;

		/**
		 * Gets the value of the <Titanium.WatchSession.isSupported> property.
		 */
		function getIsSupported(): boolean;

		/**
		 * Gets the value of the <Titanium.WatchSession.isPaired> property.
		 */
		function getIsPaired(): boolean;

		/**
		 * Gets the value of the <Titanium.WatchSession.isWatchAppInstalled> property.
		 */
		function getIsWatchAppInstalled(): boolean;

		/**
		 * Gets the value of the <Titanium.WatchSession.isComplicationEnabled> property.
		 */
		function getIsComplicationEnabled(): boolean;

		/**
		 * Gets the value of the <Titanium.WatchSession.isReachable> property.
		 */
		function getIsReachable(): boolean;

		/**
		 * Gets the value of the <Titanium.WatchSession.isActivated> property.
		 */
		function getIsActivated(): boolean;

		/**
		 * Gets the value of the <Titanium.WatchSession.recentApplicationContext> property.
		 */
		function getRecentApplicationContext(): any;

	}

	/**
	 * The top level XML module.  The XML module is used for parsing and processing XML-based content.
	 */
	namespace XML {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * Parses an XML string into a <Titanium.XML.Document> object.
		 */
		function parseString(xml: string): Titanium.XML.Document;

		/**
		 * Serializes a [Node](Titanium.XML.Node) object into a string.
		 */
		function serializeToString(node: Titanium.XML.Node): string;

		/**
		 * Gets the value of the <Titanium.XML.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.XML.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.XML.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.XML.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.XML.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.XML.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

		/**
		 * Represents an attribute of an [Element](Titanium.XML.Element).
		 */
		interface Attr extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * Attribute name
			 */
			readonly name: string;

			/**
			 * The <Titanium.XML.Element> to which the attribute belongs.
			 */
			readonly ownerElement: Titanium.XML.Element;

			/**
			 * True if this attribute was explicitly given a value in the instance document, false otherwise.
			 */
			readonly specified: boolean;

			/**
			 * The attribute value as a string.
			 */
			value: string;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Gets the value of the <Titanium.XML.Attr.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.Attr.name> property.
			 */
			getName(): string;

			/**
			 * Gets the value of the <Titanium.XML.Attr.ownerElement> property.
			 */
			getOwnerElement(): Titanium.XML.Element;

			/**
			 * Gets the value of the <Titanium.XML.Attr.specified> property.
			 */
			getSpecified(): boolean;

			/**
			 * Gets the value of the <Titanium.XML.Attr.value> property.
			 */
			getValue(): string;

			/**
			 * Sets the value of the <Titanium.XML.Attr.value> property.
			 */
			setValue(value: string): void;

		}
		/**
		 * Used to include blocks of literal text containing characters that would otherwise need
		 * to be escaped.
		 */
		interface CDATASection extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.
			 */
			data: string;

			/**
			 * The number of characters that are available through data and the substringData method. This may have the value zero, i.e., <Titanium.XML.CharacterData> may be empty.
			 */
			readonly length: number;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.
			 */
			appendData(arg: string): void;

			/**
			 * Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			deleteData(offset: number, count: number): void;

			/**
			 * Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.
			 */
			insertData(offset: number, arg: string): void;

			/**
			 * Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			replaceData(offset: number, count: number, arg: string): void;

			/**
			 * Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			substringData(offset: number, count: number): string;

			/**
			 * Breaks this node into two nodes at the specified by offset, and returns a new node of the same type, which contains all the content at and after the offset point. Throws an exception if the specified offset is negative or if this node is read only.
			 */
			splitText(offset: number): Titanium.XML.Text;

			/**
			 * Gets the value of the <Titanium.XML.CDATASection.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.CDATASection.data> property.
			 */
			getData(): string;

			/**
			 * Sets the value of the <Titanium.XML.CDATASection.data> property.
			 */
			setData(data: string): void;

			/**
			 * Gets the value of the <Titanium.XML.CDATASection.length> property.
			 */
			getLength(): number;

		}
		/**
		 * An interface extending <Titanium.XML.Node> with a set of attributes and methods for accessing character data in the DOM.
		 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-FF21A306) on Android and iOS. For reasons of compatibility with the javascript engine, text is represented by UTF-8 instead of UTF-16 on Android and iOS.
		 */
		interface CharacterData extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.
			 */
			data: string;

			/**
			 * The number of characters that are available through data and the substringData method. This may have the value zero, i.e., <Titanium.XML.CharacterData> may be empty.
			 */
			readonly length: number;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.
			 */
			appendData(arg: string): void;

			/**
			 * Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			deleteData(offset: number, count: number): void;

			/**
			 * Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.
			 */
			insertData(offset: number, arg: string): void;

			/**
			 * Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			replaceData(offset: number, count: number, arg: string): void;

			/**
			 * Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			substringData(offset: number, count: number): string;

			/**
			 * Gets the value of the <Titanium.XML.CharacterData.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.CharacterData.data> property.
			 */
			getData(): string;

			/**
			 * Sets the value of the <Titanium.XML.CharacterData.data> property.
			 */
			setData(data: string): void;

			/**
			 * Gets the value of the <Titanium.XML.CharacterData.length> property.
			 */
			getLength(): number;

		}
		/**
		 * Represents the contents of an XML comment.
		 */
		interface Comment extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.
			 */
			data: string;

			/**
			 * The number of characters that are available through data and the substringData method. This may have the value zero, i.e., <Titanium.XML.CharacterData> may be empty.
			 */
			readonly length: number;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.
			 */
			appendData(arg: string): void;

			/**
			 * Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			deleteData(offset: number, count: number): void;

			/**
			 * Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.
			 */
			insertData(offset: number, arg: string): void;

			/**
			 * Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			replaceData(offset: number, count: number, arg: string): void;

			/**
			 * Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			substringData(offset: number, count: number): string;

			/**
			 * Gets the value of the <Titanium.XML.Comment.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.Comment.data> property.
			 */
			getData(): string;

			/**
			 * Sets the value of the <Titanium.XML.Comment.data> property.
			 */
			setData(data: string): void;

			/**
			 * Gets the value of the <Titanium.XML.Comment.length> property.
			 */
			getLength(): number;

		}
		/**
		 * The <Titanium.XML.DOMImplementation> interface provides a number of methods for performing operations that are independent of any particular instance of the document object model.Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490) on Android and iOS.
		 */
		interface DOMImplementation extends Titanium.Proxy {
			/**
			 * Creates an <Titanium.XML.Document> object of the specified type with its document element. Raises an exception if qualifiedName is malformed, contains an illegal character, or is inconsistent with namespaceURI. Also raises an exception if doctype has already been used with a different document.
			 */
			createDocument(namespaceURI: string, qualifiedName: string, doctype: Titanium.XML.DocumentType): Titanium.XML.Document;

			/**
			 * Creates an empty <Titanium.XML.DocumentType> node. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur. Raises an exception if qualifiedName is malformed or contains an illegal character.
			 */
			createDocumentType(qualifiedName: string, publicId: string, systemId: string): Titanium.XML.DocumentType;

			/**
			 * Test if the <Titanium.XML.DOMImplementation> implements a specific feature.
			 */
			hasFeature(feature: string, version: string): boolean;

		}
		/**
		 * The DOM Document returned from <Titanium.XML.parseString>.
		 */
		interface Document extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * An interface to the list of entities that are defined for the document, such as via a Document Type Definition (DTD).
			 */
			readonly doctype: Titanium.XML.DocumentType;

			/**
			 * Root element of this document.
			 */
			readonly documentElement: Titanium.XML.Element;

			/**
			 * [DOMImplementation](Titanium.XML.DOMImplementation) object associated with this
			 * document.
			 */
			readonly implementation: Titanium.XML.DOMImplementation;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Creates an attribute with the given name.
			 */
			createAttribute(name: string): Titanium.XML.Attr;

			/**
			 * Creates an attribute with the given name and namespace.
			 */
			createAttributeNS(namespaceURI: string, name: string): Titanium.XML.Attr;

			/**
			 * Creates and returns a [CDATASection](Titanium.XML.CDATASection).
			 */
			createCDATASection(data: string): Titanium.XML.CDATASection;

			/**
			 * Creates a [Comment](Titanium.XML.Comment) with the supplied string data.
			 */
			createComment(data: string): Titanium.XML.Comment;

			/**
			 * Creates an empty [DocumentFragment](Titanium.XML.DocumentFragment).
			 */
			createDocumentFragment(): Titanium.XML.DocumentFragment;

			/**
			 * Creates an element with the given tag name.
			 */
			createElement(tagName: string): Titanium.XML.Element;

			/**
			 * Create a new element with the given namespace and name.
			 */
			createElementNS(namespaceURI: string, name: string): Titanium.XML.Element;

			/**
			 * Creates an [EntityReference](Titanium.XML.EntityReference) with the given name.
			 */
			createEntityReference(name: string): Titanium.XML.EntityReference;

			/**
			 * Creates a processing instruction for inserting into the DOM tree.
			 */
			createProcessingInstruction(target: string, data: string): Titanium.XML.ProcessingInstruction;

			/**
			 * Creates a text node.
			 */
			createTextNode(data: string): Titanium.XML.Text;

			/**
			 * Returns an [Element](Titanium.XML.Element) that has an ID attribute with the given value.
			 */
			getElementById(elementId: string): Titanium.XML.Element;

			/**
			 * Returns a node list of elements in the document which have the given tag.
			 */
			getElementsByTagName(tagname: string): Titanium.XML.NodeList;

			/**
			 * Returns a node list of elements in the document which belong to the given namespace and have the given tag name.
			 */
			getElementsByTagNameNS(namespaceURI: string, localname: string): Titanium.XML.NodeList;

			/**
			 * Imports a node from another document to this document,
			 * without altering or removing the source node from the original document.
			 */
			importNode(importedNode: Titanium.XML.Node, deep: boolean): Titanium.XML.Node;

			/**
			 * Gets the value of the <Titanium.XML.Document.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.Document.doctype> property.
			 */
			getDoctype(): Titanium.XML.DocumentType;

			/**
			 * Gets the value of the <Titanium.XML.Document.documentElement> property.
			 */
			getDocumentElement(): Titanium.XML.Element;

			/**
			 * Gets the value of the <Titanium.XML.Document.implementation> property.
			 */
			getImplementation(): Titanium.XML.DOMImplementation;

		}
		/**
		 * A lightweight document object used as a container for a group of nodes.
		 */
		interface DocumentFragment extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Gets the value of the <Titanium.XML.DocumentFragment.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

		}
		/**
		 * Each <Titanium.XML.Document> has a `doctype` attribute whose value is either 'null' or a <Titanium.XML.DocumentType> object.
		 */
		interface DocumentType extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * A <Titanium.XML.NamedNodeMap> containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded.
			 */
			readonly entities: Titanium.XML.NamedNodeMap;

			/**
			 * The internal subset as a string.
			 */
			readonly internalSubset: string;

			/**
			 * The name of DTD; i.e., the name immediately following the `DOCTYPE` keyword.
			 */
			readonly name: string;

			/**
			 * A <Titanium.XML.NamedNodeMap> containing the notations declared in the DTD. Duplicates are discarded. Every node in this map also implements the <Titanium.XML.Notation> interface.
			 */
			readonly notations: Titanium.XML.NamedNodeMap;

			/**
			 * The public identifier of the external subset.
			 */
			readonly publicId: string;

			/**
			 * The system identifier of the external subset.
			 */
			readonly systemId: string;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Gets the value of the <Titanium.XML.DocumentType.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.DocumentType.entities> property.
			 */
			getEntities(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.DocumentType.internalSubset> property.
			 */
			getInternalSubset(): string;

			/**
			 * Gets the value of the <Titanium.XML.DocumentType.name> property.
			 */
			getName(): string;

			/**
			 * Gets the value of the <Titanium.XML.DocumentType.notations> property.
			 */
			getNotations(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.DocumentType.publicId> property.
			 */
			getPublicId(): string;

			/**
			 * Gets the value of the <Titanium.XML.DocumentType.systemId> property.
			 */
			getSystemId(): string;

		}
		/**
		 * Represents an element in a DOM document, a <Titanium.XML.Node> defined by a start-tag and end-tag (or an empty tag). Elements may have [attributes](Titanium.XML.Attr) associated with them.
		 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614) on Android and iOS with some non-standard extensions.
		 */
		interface Element extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * The name of the element, as defined by its tag.
			 */
			readonly tagName: string;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Retrieves an attribute value by name, returning it as a string.
			 */
			getAttribute(name: string): string;

			/**
			 * Adds a new attribute. Any attribute with the same name is replaced. Throws an exception if the element is read-only, or if the name contains an illegal character.
			 */
			setAttribute(name: string, value: string): void;

			/**
			 * Removes an attribute by name. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.
			 */
			removeAttribute(name: string): void;

			/**
			 * Retrieves an attribute value by name, returning it as a <Titanium.XML.Attr> object.
			 */
			getAttributeNode(name: string): Titanium.XML.Attr;

			/**
			 * Adds a new attribute. Any attribute with the same `nodeName` as the argument is replaced. Throws an exception if the element is read-only, if `newAttr` is from a different document, or if `newAttr` is already an attribute of another element.
			 */
			setAttributeNode(newAttr: Titanium.XML.Attr): Titanium.XML.Attr;

			/**
			 * Removes the specified attribute node. If the removed attribute has a default value, it is replaced immediately, with the same namespace and local name as the removed attribute, if applicable. Throws an exception if the element is read-only, or the attribute is not an attribute of the element.
			 */
			removeAttributeNode(oldAttr: Titanium.XML.Attr): void;

			/**
			 * Retrieves a <Titanium.XML.NodeList> of all descendant elements with a given tag name, in preorder traversal.
			 */
			getElementsByTagName(name: string): Titanium.XML.NodeList;

			/**
			 * Retrieves an attribute value by local name and namespace URI, returning it as a string.
			 */
			getAttributeNS(namespaceURI: string, localName: string): string;

			/**
			 * Adds a new attribute. Any attribute with the same local name and namespace URI is present on the element is replaced, with its prefix changed to that of the `qualifiedName` parameter. Throws an exception if the element is read-only, if the name contains an illegal character, or if the qualified name contains an error.
			 */
			setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;

			/**
			 * Removes an attribute by local name and namespace URI. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.
			 */
			removeAttributeNS(namespaceURI: string, localName: string): void;

			/**
			 * Retrieves an attribute value by local name and namespace URI, returning it as a <Titanium.XML.Attr> object.
			 */
			getAttributeNodeNS(namespaceURI: string, localName: string): Titanium.XML.Attr;

			/**
			 * Adds a new attribute. Any attribute with the same local name and namespace URI is replaced. Throws an exception if the element is read-only, if `newAttr` is from a different document, or if `newAttr` is already an attribute of another element.
			 */
			setAttributeNodeNS(newAttr: Titanium.XML.Attr): Titanium.XML.Attr;

			/**
			 * Retrieves a <Titanium.XML.NodeList> of all descendant elements with a given local name and namespace URI, in preorder traversal.
			 */
			getElementsByTagNameNS(namespaceURI: string, localName: string): Titanium.XML.NodeList;

			/**
			 * Determines whether or not an attribute with the given name is available in the element, or has a default value.
			 */
			hasAttribute(name: string): boolean;

			/**
			 * Determines whether or not an attribute with the given name is available in the element, or has a default value.
			 */
			hasAttributeNS(namespaceURI: string, localName: string): boolean;

			/**
			 * Gets the value of the <Titanium.XML.Element.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.Element.tagName> property.
			 */
			getTagName(): string;

		}
		/**
		 * This interface represents an entity, either parsed or unparsed, in an XML document. Note that this models the entity itself not the entity declaration. The nodeName attribute that is inherited from Node contains the name of the entity. An Entity node does not have any parent.
		 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-527DCFF2) on Android and iOS.
		 */
		interface Entity extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * For unparsed entities, the name of the notation for the entity. For parsed entities, this is `null`.
			 */
			readonly notationName: string;

			/**
			 * The public identifier associated with the entity, if specified. If the public identifier was not specified, this is `null`.
			 */
			readonly publicId: string;

			/**
			 * The system identifier associated with the entity, if specified. If the system identifier was not specified, this is null.
			 */
			readonly systemId: string;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Gets the value of the <Titanium.XML.Entity.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.Entity.notationName> property.
			 */
			getNotationName(): string;

			/**
			 * Gets the value of the <Titanium.XML.Entity.publicId> property.
			 */
			getPublicId(): string;

			/**
			 * Gets the value of the <Titanium.XML.Entity.systemId> property.
			 */
			getSystemId(): string;

		}
		/**
		 * Represents an XML entity reference.
		 */
		interface EntityReference extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Gets the value of the <Titanium.XML.EntityReference.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

		}
		/**
		 * A key-value paired map that maps String objects to <Titanium.XML.Node> objects.
		 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1780488922) on Android and iOS.
		 */
		interface NamedNodeMap extends Titanium.Proxy {
			/**
			 * The number of nodes in the map. The valid range of child node indices is 0-`length`-1, inclusive.
			 */
			readonly length: number;

			/**
			 * Retrieves a node specified by name.
			 */
			getNamedItem(name: string): Titanium.XML.Node;

			/**
			 * Adds a node using its `nodeName` attribute. If a node with that name is already present, it is replaced. Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.
			 */
			setNamedItem(node: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Removes a node from the map specified by name. When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value.
			 */
			removeNamedItem(name: string): Titanium.XML.Node;

			/**
			 * Retrieves the node at the specified index of the map. Note that NamedNodeMaps are not ordered.
			 */
			item(index: number): Titanium.XML.Node;

			/**
			 * Retrieves a node specified by name and namespace. Returns `null` if no matching node is in the map.
			 */
			getNamedItemNS(namespaceURI: string, localName: string): Titanium.XML.Node;

			/**
			 * Adds a node using its `namespaceURI` and `localName` attributes. If a node with that name is already present, it is replaced. Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.
			 */
			setNamedItemNS(node: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Removes a node from the map specified by local name and namespace URI. When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value. Returns the node removed from the map, or `null` if there is no corresponding node.
			 */
			removeNamedItemNS(namespaceURI: string, localName: string): Titanium.XML.Node;

			/**
			 * Gets the value of the <Titanium.XML.NamedNodeMap.length> property.
			 */
			getLength(): number;

		}
		/**
		 * A single node in the [Document](Titanium.XML.Document) tree.
		 */
		interface Node extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Gets the value of the <Titanium.XML.Node.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

		}
		/**
		 * A list of <Titanium.XML.Node> objects. Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177) on Android and iOS.
		 */
		interface NodeList extends Titanium.Proxy {
			/**
			 * The length of the node list.
			 */
			readonly length: number;

			/**
			 * Returns the <Titanium.XML.Node> object at the specified index.
			 */
			item(index: number): Titanium.XML.Node;

			/**
			 * Gets the value of the <Titanium.XML.NodeList.length> property.
			 */
			getLength(): number;

		}
		/**
		 * Represents a notation declared in the DTD.  Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-5431D1B9) on Android and iOS.
		 */
		interface Notation extends Titanium.Proxy {
			/**
			 * The public identifier of this notation. If the public identifier was not specified, this is `null`.
			 */
			readonly publicId: string;

			/**
			 * The system identifier of this notation. If the system identifier was not specified, this is `null`.
			 */
			readonly systemId: string;

			/**
			 * Gets the value of the <Titanium.XML.Notation.publicId> property.
			 */
			getPublicId(): string;

			/**
			 * Gets the value of the <Titanium.XML.Notation.systemId> property.
			 */
			getSystemId(): string;

		}
		/**
		 * A way to keep processor-specific information in the text of the document. Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1004215813) on Android and iOS.
		 */
		interface ProcessingInstruction extends Titanium.Proxy {
			/**
			 * Retrieve the content of this processing instruction. This from the first non white space character after the target to the character immediatly preceding the ?>. When setting a processing instruction, a DOMException may be thrown on an invalid instruction.
			 */
			data: string;

			/**
			 * Retrieve the target of this processing instruction. XML defines this as being the first token following the markup that begins the processing instruction.
			 */
			readonly target: string;

			/**
			 * Gets the value of the <Titanium.XML.ProcessingInstruction.data> property.
			 */
			getData(): string;

			/**
			 * Sets the value of the <Titanium.XML.ProcessingInstruction.data> property.
			 */
			setData(data: string): void;

			/**
			 * Gets the value of the <Titanium.XML.ProcessingInstruction.target> property.
			 */
			getTarget(): string;

		}
		/**
		 * Represents the textual content of an <Titanium.XML.Element> or <Titanium.XML.Attr> Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1312295772) on Android and iOS.
		 */
		interface Text extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly text: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.
			 */
			data: string;

			/**
			 * The number of characters that are available through data and the substringData method. This may have the value zero, i.e., <Titanium.XML.CharacterData> may be empty.
			 */
			readonly length: number;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.
			 */
			appendData(arg: string): void;

			/**
			 * Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			deleteData(offset: number, count: number): void;

			/**
			 * Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.
			 */
			insertData(offset: number, arg: string): void;

			/**
			 * Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			replaceData(offset: number, count: number, arg: string): void;

			/**
			 * Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			substringData(offset: number, count: number): string;

			/**
			 * Breaks this node into two nodes at the specified by offset, and returns a new node of the same type, which contains all the content at and after the offset point. Throws an exception if the specified offset is negative or if this node is read only.
			 */
			splitText(offset: number): Titanium.XML.Text;

			/**
			 * Gets the value of the <Titanium.XML.Text.attributes> property.
			 */
			getAttributes(): Titanium.XML.NamedNodeMap;

			/**
			 * Gets the value of the <Titanium.XML.Text.data> property.
			 */
			getData(): string;

			/**
			 * Sets the value of the <Titanium.XML.Text.data> property.
			 */
			setData(data: string): void;

			/**
			 * Gets the value of the <Titanium.XML.Text.length> property.
			 */
			getLength(): number;

		}
	}

	/**
	 * The top level Yahoo module.  The Yahoo module is used for accessing Yahoo related API services.
	 */
	namespace Yahoo {
		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		let bubbleParent: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		const apiName: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		let lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		function addEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		function removeEventListener(name: string, callback: (param0: any) => any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		function fireEvent(name: string, event: any): void;

		/**
		 * Applies the properties to the proxy.
		 */
		function applyProperties(props: any): void;

		/**
		 * invoke a Yahoo YQL query
		 */
		function yql(yql: string, callback: (param0: YQLResponse) => any): void;

		/**
		 * Gets the value of the <Titanium.Yahoo.bubbleParent> property.
		 */
		function getBubbleParent(): boolean;

		/**
		 * Sets the value of the <Titanium.Yahoo.bubbleParent> property.
		 */
		function setBubbleParent(bubbleParent: boolean): void;

		/**
		 * Gets the value of the <Titanium.Yahoo.apiName> property.
		 */
		function getApiName(): string;

		/**
		 * Gets the value of the <Titanium.Yahoo.lifecycleContainer> property.
		 */
		function getLifecycleContainer(): Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Sets the value of the <Titanium.Yahoo.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.Window): void;

		/**
		 * Sets the value of the <Titanium.Yahoo.lifecycleContainer> property.
		 */
		function setLifecycleContainer(lifecycleContainer: Titanium.UI.TabGroup): void;

	}
}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudACLsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of ACL objects, if any exist.
	 */
	acls?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudACLsCheckResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Dictionary of permissions.
	 */
	permission?: any;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudChatsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `chats` objects, if any exist.
	 */
	chats?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudChatGroupsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `chat_groups` objects, if any exist.
	 */
	chat_groups?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudCheckinsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `checkins` objects, if any exist.
	 */
	checkins?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudClientsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * IP address of client.
	 */
	ip_address?: string;

	/**
	 * Location of client.
	 */
	location?: any;

}
/**
 * Argument passed to the callback as a request is transmitted or received.
 */
interface CloudStreamProgress {
	/**
	 * A value from 0.0-1.0 with the progress of the exchange.
	 */
	progress?: number;

	/**
	 * The URL for the request, to help identify it.
	 */
	url?: string;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudEmailsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudEventsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `event` objects, if any exist.
	 */
	events?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudEventOccurrencesResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `event` objects, if any exist.
	 */
	event_occurrences?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudFilesResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `file` objects, if any exist.
	 */
	files?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudFriendsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `user` objects, if any exist.
	 */
	users?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudFriendRequestsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `user` objects, if any exist.
	 */
	friend_requests?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudGeoFenceResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of geo-fence objects, if any exist.
	 */
	geo_fences?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudKeyValuesResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `keyvalues` objects, if any exist.
	 */
	keyvalues?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudLikesResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `like` objects, if any exist.
	 */
	likes?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudMessagesResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `message` objects, if any exist.
	 */
	messages?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudObjectsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `classname` objects, if any exist.
	 */
	classname?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudPhotoCollectionsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `collections` objects, if any exist.
	 */
	collections?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudPhotoCollectionsPhotosResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `photos` objects, if any exist.
	 */
	photos?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudPhotosResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `photos` objects, if any exist.
	 */
	photos?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudPlacesResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `places` objects, if any exist.
	 */
	places?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudPostsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `posts` objects, if any exist.
	 */
	posts?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudPushNotificationsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

}
/**
 * Argument passed to the callback when a request finishes successfully.
 */
interface CloudPushNotificationsQueryChannelResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Array of `push_channel` names, if any exist.
	 */
	push_channels?: string[];

}
/**
 * Argument passed to the callback when a request finishes successfully.
 */
interface CloudPushNotificationsShowChannelResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Dictionary containing counts of devices subscribed to a push channel, grouped by platform.
	 */
	devices?: any;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudPushNotificationsQueryResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `subscription` objects, if any exist.
	 */
	subscriptions?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully.
 */
interface CloudPushSchedulesResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Array of [schedules push notifications](https://docs.appcelerator.com/arrowdb/latest/#!/api/PushSchedules), if any exist.
	 */
	push_schedules?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudReviewsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `reviews` objects, if any exist.
	 */
	reviews?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudSocialIntegrationsResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `users` objects, if any exist.
	 */
	users?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudStatusesResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `statuses` objects, if any exist.
	 */
	statuses?: any[];

}
/**
 * Properties for the modal dialog used in 3-Legged OAuth
 */
interface CloudUsersSecureDialog {
	/**
	 * Defines the title for the dialog.
	 */
	title?: string;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudUsersResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Set of `user` objects, if any exist.
	 */
	users?: any[];

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CloudUsersSecureResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Indicates whether the request failed.
	 */
	error?: boolean;

	/**
	 * Meta data, if any returned.
	 */
	meta?: any;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	message?: string;

	/**
	 * Identifies the current access token when using 3-Legged OAuth.
	 */
	accessToken?: string;

	/**
	 * Indicates the number of seconds before the access token expires.
	 */
	expiresIn?: number;

}
/**
 * Simple object for specifying token retrieval options to [retrieveDeviceToken](Modules.CloudPush.retrieveDeviceToken).
 */
interface CloudPushNotificationConfig {
	/**
	 * Callback function called when the push registration is successfully completed.
	 */
	success?: (param0: CloudPushNotificationSuccessArg) => any;

	/**
	 * Callback function called when an error occurs during registration.
	 */
	error?: (param0: CloudPushNotificationErrorArg) => any;

}
/**
 * A simple object passed to the [retrieveDeviceToken](Modules.CloudPush.retrieveDeviceToken) success callback.
 */
interface CloudPushNotificationSuccessArg {
	/**
	 * The device token which this device was registered for.
	 */
	deviceToken?: string;

}
/**
 * A simple object passed to the [retrieveDeviceToken](Modules.CloudPush.retrieveDeviceToken) error callback.
 */
interface CloudPushNotificationErrorArg {
	/**
	 * Description of the error.
	 */
	error?: string;

}
/**
 * Optional Titanium modules.
 */
interface Modules {
}
/**
 * Simple object passed to the
 * [startActivityForResult](Titanium.Android.Activity.startActivityForResult) callback.
 */
interface ActivityResult {
	/**
	 * Unique, automatically generated integer request code.
	 */
	requestCode?: number;

	/**
	 * Integer result code that the started activity passed to
	 * [setResult](Titanium.Android.Activity.setResult).
	 */
	resultCode?: number;

	/**
	 * Intent that can contain data returned to the caller. Data can be attached to
	 * the intent as "extras").
	 */
	intent?: Titanium.Android.Intent;

}
/**
 * Options passed to <Titanium.Android.createServiceIntent>.
 */
interface ServiceIntentOptions {
	/**
	 * URL for the service's JavaScript.
	 */
	url?: string;

	/**
	 * One of the `START_*` constants from <Titanium.Android> to specify the "stickiness" of the Service when Android shuts down the host application.
	 */
	startMode?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestPermissionAccessResult {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface CalendarPermissionResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

}
/**
 * Parameter for wakeLock
 */
interface wakeLockOptions {
	/**
	 * Minimum time the device will be switched on (plus device switch-off time)
	 */
	time?: number;

	/**
	 * Wake lock level and flag. See [PowerManager.newWakeLock in the Android API Reference](https://developer.android.com/reference/android/os/PowerManager.html#newWakeLock(int,%20java.lang.String))
	 */
	flags?: number;

}
/**
 * Dictionary of options for the <Titanium.UI.OptionDialog.show> method.
 */
interface showParams {
	/**
	 * String to be used as title for the dialog.
	 */
	title?: string;

	/**
	 * String to be used as a message for the dialog.
	 */
	message?: string;

	/**
	 * Array of String instances.
	 */
	buttonNames?: string[];

	/**
	 * Array of String instances.
	 */
	options?: string[];

	/**
	 * Determines whether to animate the dialog as it is shown.
	 */
	animated?: boolean;

	/**
	 * View to which to attach the dialog.
	 */
	view?: Titanium.UI.View;

	/**
	 * Positions the arrow of the option dialog relative to the attached view's dimensions.
	 */
	rect?: Dimension;

}
/**
 * Dictionary describing the arguments passed to the application on startup.
 * Use the [getArguments](Titanium.App.getArguments) method to retrieve the launch options.
 */
interface launchOptions {
	/**
	 * This key indicates that the application was launched in order to open
	 * the specified URL.
	 */
	url?: string;

	/**
	 * This key indicates that the application was launched by another
	 * application with the specified bundle ID.
	 */
	source?: string;

	/**
	 * If set to `true`, this key indicates that the application was launched in response to an
	 * incoming location event.
	 */
	launchOptionsLocationKey?: boolean;

}
/**
 * Response when receiving pending or local notifications
 * in <Titanium.App.iOS.UserNotificationCenter.getPendingNotifications> and
 * <Titanium.App.iOS.UserNotificationCenter.getDeliveredNotifications>.
 */
interface UserNotificationCallbackResponse {
	/**
	 * An array of identifiers used to create notifications.
	 */
	notifications?: UserNotificationDictionary[];

}
/**
 * Dictionary of notification data used in the array of `notifications`
 * when receiving pending or local notifications in
 * <Titanium.App.iOS.UserNotificationCenter.getPendingNotifications> and
 * <Titanium.App.iOS.UserNotificationCenter.getDeliveredNotifications>.
 */
interface UserNotificationDictionary {
	/**
	 * Title of the notification.
	 */
	alertTitle?: string;

	/**
	 * Subtitle of the notification.
	 */
	alertSubtitle?: string;

	/**
	 * Alert button text ('Open', by default) or home text ('Press Home to unlock', by default)
	 * type: String
	 */
	alertAction?: string;

	/**
	 * Alert message.
	 */
	alertBody?: string;

	/**
	 * Image displayed instead of `Default.png` when launching the application.
	 */
	alertLaunchImage?: string;

	/**
	 * Application badge value.
	 */
	badge?: number;

	/**
	 * Date and time when the notification was configured to fire.
	 */
	date?: Date;

	/**
	 * Path to the sound file configured to play when the notification was fired.
	 */
	sound?: string;

	/**
	 * Timezone of the date when the notification was configured to fire.
	 */
	timezone?: string;

	/**
	 * Custom data object.
	 */
	userInfo?: any;

	/**
	 * Category identifier of the notification.
	 */
	category?: string;

	/**
	 * The notification identifier.
	 */
	identifier: string;

	/**
	 * Region of the notification.
	 */
	region?: any;

}
/**
 * Dictionary object of parameters used to register the application with local notifications using
 * the <Titanium.App.iOS.registerUserNotificationSettings> method.
 */
interface GetUserNotificationSettings {
	/**
	 * Notification types to use.
	 */
	types?: number[];

	/**
	 * Set of categories of user notification actions required by the applicaiton to use.
	 */
	categories?: Titanium.App.iOS.UserNotificationCategory[];

	/**
	 * The current authorization status for using notifications.
	 */
	authorizationStatus?: number;

	/**
	 * The current sound settings.
	 */
	soundSetting?: number;

	/**
	 * The current badge settings.
	 */
	badgeSetting?: number;

	/**
	 * The current alert settings.
	 */
	alertSetting?: number;

	/**
	 * The current notication-center settings.
	 */
	notificationCenterSetting?: number;

	/**
	 * The current lock-screen settings.
	 */
	lockScreenSetting?: number;

	/**
	 * The current CarPlay settings.
	 */
	carPlaySetting?: number;

	/**
	 * The authorization status to play sounds for critical alerts.
	 * Available in Titanium SDK 7.4.0 and later.
	 */
	criticalAlertSetting?: number;

	/**
	 * A Boolean value indicating the system displays a button for in-app notification settings.
	 * Available in Titanium SDK 7.4.0 and later.
	 */
	providesAppNotificationSettings?: number;

	/**
	 * The current alert style used to display notifications.
	 */
	alertStyle?: number;

}
/**
 * Dictionary object of parameters used to create a notification using
 * <Titanium.App.iOS.scheduleLocalNotification>.
 */
interface NotificationParams {
	/**
	 * The notification identifier.
	 */
	identifier: string;

	/**
	 * Alert button text ('Open', by default) or home text ('Press Home to unlock', by default)
	 * to display.
	 */
	alertAction?: string;

	/**
	 * Alert message to display.
	 */
	alertBody?: string;

	/**
	 * Alert title to display.
	 */
	alertTitle?: string;

	/**
	 * Alert subtitle to display.
	 */
	alertSubtitle?: string;

	/**
	 * Image to display instead of `Default.png` when launching the application.
	 */
	alertLaunchImage?: string;

	/**
	 * Notification attachments to display.
	 */
	attachments?: UserNotificationAttachment[];

	/**
	 * Application badge value.
	 */
	badge?: number;

	/**
	 * String identifier of category of actions to be displayed for an interactive notification.
	 */
	category?: string;

	/**
	 * Date and time for the notification to occur.
	 */
	date?: Date;

	/**
	 * Interval to repeat the notification. One of `weekly`, `daily`, `yearly,` `monthly`.
	 */
	repeat?: string;

	/**
	 * Path to the sound file to play when notification occurs, relative to the `Resources` folder.
	 */
	sound?: string;

	/**
	 * Timezone of the date configured for the notification. If not set, the system timezone is used.
	 */
	timezone?: string;

	/**
	 * Data to pass to the application with the notification event.
	 */
	userInfo?: any;

	/**
	 * Region the notification will be triggered in. Allowed parameter are:
	 * - `latitude`: Latitude of the location center, in decimal degrees (required).
	 * - `longitude`: Longitude of the location center, in decimal degrees (required).
	 * - `triggersOnce`: Whether or not the notification will only fire once (optional, default: true).
	 */
	region?: any;

	/**
	 * The string the notification adds to the category's summary format string.
	 */
	summaryArgument?: string;

	/**
	 * The number of items the notification adds to the category's summary format string.
	 */
	summaryArgumentCount?: string;

}
/**
 * Provide at least the property `identifier` and `url` property to identify a local
 * image, sound or video. If your media is invalid, the API will throw an error log and
 * skip the invalid attachment.
 */
interface UserNotificationAttachment {
	/**
	 * The identifier of this attachment.
	 */
	identifier: string;

	/**
	 * The URL to the attachment's data. If you have obtained this attachment from
	 * the notification-center then the URL will be security-scoped.
	 */
	url: string;

	/**
	 * An additional dictionary of options to provide.
	 */
	options?: any;

}
/**
 * Dictionary object of parameters used to identify an incoming URL that is handled
 * by the application.
 */
interface LaunchOptionsType {
	/**
	 * The application or service that triggered the handled URL.
	 */
	source?: string;

	/**
	 * The url that was triggered by the application or service.
	 */
	url?: string;

}
/**
 * Dictionary object of parameters used to register the application with local notifications using
 * the <Titanium.App.iOS.registerUserNotificationSettings> method.
 * To retrieve the current notification settings, use the
 * <Titanium.App.iOS.UserNotificationCenter.requestUserNotificationSettings> method.
 */
interface UserNotificationSettings {
	/**
	 * Notification types to use.
	 */
	types?: number[];

	/**
	 * Set of categories of user notification actions required by the applicaiton to use.
	 */
	categories?: Titanium.App.iOS.UserNotificationCategory[];

}
/**
 * Simple object used to specify options for [imageAsCropped](Titanium.Blob.imageAsCropped).
 */
interface ImageAsCroppedDict {
	/**
	 * Width to crop this image to.
	 */
	width?: number;

	/**
	 * Height to crop this image to.
	 */
	height?: number;

	/**
	 * Left coordinate of the cropped rectangle within the source image.
	 */
	x?: number;

	/**
	 * Top coordinate of the cropped rectangle within the source image.
	 */
	y?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface EventsAuthorizationResponse {
	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code, if any returned.
	 */
	code?: number;

}
/**
 * Dictionary containing `daysOfWeek` and `week`.
 */
interface daysOfTheWeekDictionary {
	/**
	 * The day of the week. Values are from 1 to 7, with Sunday being 1.
	 */
	daysOfWeek?: number;

	/**
	 * The week number of the day of the week.
	 * Values range from -53 to 53. A negative value indicates a value from the end of
	 * the range. 0 indicates the week number is irrelevant.
	 */
	week?: number;

}
/**
 * Dictionary containing either `endDate` or `occurrenceCount` property.
 */
interface recurrenceEndDictionary {
	/**
	 * End date of the recurrence end, or undefined if the recurrence end is count-based.
	 */
	endDate?: Date;

	/**
	 * Occurrence count of the recurrence end, or 0 if the recurrence end is date-based.
	 */
	occurrenceCount?: number;

}
/**
 * Named parameters for <Titanium.Codec.encodeNumber>.
 */
interface EncodeNumberDict {
	/**
	 * Number to encode.
	 */
	source: number;

	/**
	 * Destination buffer.
	 */
	dest: Titanium.Buffer;

	/**
	 * Encoding type to use.
	 */
	type: string;

	/**
	 * Index in the `dest` buffer of the first byte of encoded data.
	 */
	position?: number;

	/**
	 * Byte order to encode with.
	 */
	byteOrder?: number;

}
/**
 * Named parameters for <Titanium.Codec.decodeNumber>.
 */
interface DecodeNumberDict {
	/**
	 * Buffer to decode.
	 */
	source: Titanium.Buffer;

	/**
	 * The encoding type to use.
	 */
	type: string;

	/**
	 * Index in the `source` buffer of the first byte of data to decode.
	 */
	position?: number;

	/**
	 * byte order to decode with.
	 */
	byteOrder?: number;

}
/**
 * Named parameters for <Titanium.Codec.encodeString>.
 */
interface EncodeStringDict {
	/**
	 * Source string to encode.
	 */
	source: string;

	/**
	 * Destination buffer.
	 */
	dest: Titanium.Buffer;

	/**
	 * Index in the `dest` buffer of the first byte of the encoded string.
	 */
	destPosition?: number;

	/**
	 * Position in `source` to start encoding.
	 */
	sourcePosition?: number;

	/**
	 * Number of characters in `source` to encode.
	 */
	sourceLength?: number;

	/**
	 * Character encoding to use when encoding this string to bytes.
	 */
	charset?: string;

}
/**
 * Named parameters for <Titanium.Codec.decodeString>.
 */
interface DecodeStringDict {
	/**
	 * Buffer to decode.
	 */
	source: Titanium.Buffer;

	/**
	 * Index in the `source` buffer of the first byte of data to decode.
	 */
	position?: number;

	/**
	 * Number of bytes to decode.
	 */
	length?: number;

	/**
	 * Character set to use when encoding this string to bytes.
	 */
	charset?: string;

}
/**
 * Dictionary of options for the <Titanium.Contacts.showContacts> method.
 */
interface showContactsParams {
	/**
	 * Determines whether to animate the show/hide of the contacts picker (iPhone, iPad only.)
	 */
	animated?: boolean;

	/**
	 * Field names to show when selecting properties. By default, shows all available.
	 */
	fields?: string[];

	/**
	 * Function to call when selection is canceled.
	 */
	cancel?: (param0: any) => any;

	/**
	 * Function to call when a person is selected. Must not be used with `selectedProperty` property.
	 */
	selectedPerson?: (param0: any) => any;

	/**
	 * Function to call when a property is selected. Must not be used with `selectedPerson`
	 * property.
	 * Note: If ringtone or texttone is selected, null values are returned, since these are unsupported
	 * by Apple.
	 * Since iOS 9.0, there is a native apple issue whereby it may return null if the birthday property
	 * is selected on certain device models.
	 * The callback contains the selected property and a 'person' object of type <Titanium.Contacts.Person>.
	 * Since iOS 9.0, apple only returns the person object with partial information. Currently it is known to
	 * at least contain the selected property and fullName.
	 */
	selectedProperty?: (param0: any) => any;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface ContactsAuthorizationResponse {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * Properties used in any event or callback which needs to report a success or failure.
 */
interface ErrorResponse {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * Properties used in any event or callback which needs to report a success.
 */
interface SuccessResponse {
	/**
	 * Indicates if the operation succeeded. Returns `true`.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0.
	 */
	code?: number;

}
/**
 * Properties used in any event or callback which needs to report a failure.
 */
interface FailureResponse {
	/**
	 * Indicates if the operation succeeded. Returns `false`.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns a non-zero value.
	 */
	code?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestStorageAccessResult {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * Argument passed to the [getCurrentPosition](Titanium.Geolocation.getCurrentPosition) callback.
 */
interface LocationResults {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * If `success` is true, object describing the location provider generating this update.
	 */
	provider?: LocationProviderDict;

	/**
	 * If `success` is true, actual location data for this update.
	 */
	coords?: LocationCoordinates;

}
/**
 * Simple object holding the data for a location update.
 */
interface LocationCoordinates {
	/**
	 * Latitude of the location update, in decimal degrees.
	 */
	latitude?: number;

	/**
	 * Longitude of the location update, in decimal degrees.
	 */
	longitude?: number;

	/**
	 * Altitude of the location update, in meters.
	 */
	altitude?: number;

	/**
	 * Accuracy of the location update, in meters.
	 */
	accuracy?: number;

	/**
	 * Vertical accuracy of the location update, in meters.
	 */
	altitudeAccuracy?: number;

	/**
	 * Compass heading, in degrees. May be unknown if device is not moving. On
	 * iOS, a negative value indicates that the heading data is not valid.
	 */
	heading?: number;

	/**
	 * Current speed in meters/second. On iOS, a negative value indicates that the
	 * heading data is not valid or the accuracy is configured incorrectly.
	 * Note: Due to the Apple Geolocation API, set the <Titanium.Geolocation.accuracy>
	 * property to <Titanium.Geolocation.ACCURACY_BEST_FOR_NAVIGATION> in order to properly
	 * measure speed changes and prevent the app from returning negative values.
	 */
	speed?: number;

	/**
	 * Timestamp for this location update, in milliseconds.
	 */
	timestamp?: number;

	/**
	 * The floor of the building on which the user is located.
	 */
	floor?: LocationCoordinatesFloor;

}
/**
 * Simple object holding floor of the building on which the user is located.
 */
interface LocationCoordinatesFloor {
	/**
	 * The logical floor of the building.
	 */
	level?: number;

}
/**
 * Simple object returned in the callback from the
 * [forwardGeocoder](Titanium.Geolocation.forwardGeocoder) method.
 * Note that Android includes a number of extra fields.
 */
interface ForwardGeocodeResponse {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Estimated accuracy of the geocoding, in meters.
	 */
	accuracy?: number;

	/**
	 * Longitude of the geocoded address.
	 */
	longitude?: string;

	/**
	 * Latitude of the geocoded address.
	 */
	latitude?: string;

	/**
	 * Street name, without street address.
	 */
	street?: string;

	/**
	 * Street name.
	 */
	street1?: string;

	/**
	 * City name.
	 */
	city?: string;

	/**
	 * First line of region.
	 */
	region1?: string;

	/**
	 * Not used.
	 */
	region2?: string;

	/**
	 * Postal code.
	 */
	postalCode?: string;

	/**
	 * Country name.
	 */
	country?: string;

	/**
	 * Country code.
	 */
	countryCode?: string;

	/**
	 * Country code. Same as `countryCode`.
	 */
	country_code?: string;

	/**
	 * Display address. Identical to `address`.
	 */
	displayAddress?: string;

	/**
	 * Full address.
	 */
	address?: string;

}
/**
 * Argument passed to the [getCurrentHeading](Titanium.Geolocation.getCurrentHeading) callback.
 */
interface HeadingResponse {
	/**
	 * Indicates a successful operation.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code.
	 */
	code?: number;

	/**
	 * If `success` is true, the actual heading data.
	 */
	heading?: HeadingData;

}
/**
 * Simple object holding compass heading data.
 */
interface HeadingData {
	/**
	 * Accuracy of the compass heading, in platform-specific units.
	 */
	accuracy?: number;

	/**
	 * Declination in degrees from magnetic North.
	 */
	magneticHeading?: number;

	/**
	 * Declination in degrees from true North.
	 */
	trueHeading?: number;

	/**
	 * Timestamp for the heading data, in milliseconds.
	 */
	timestamp?: number;

	/**
	 * Raw geomagnetic data for the X axis.
	 */
	x?: number;

	/**
	 * Raw geomagnetic data for the Y axis.
	 */
	y?: number;

	/**
	 * Raw geomagnetic data for the Z axis.
	 */
	z?: number;

}
/**
 * Simple object describing a location provider.
 */
interface LocationProviderDict {
	/**
	 * Accuracy of the location provider, either fine (1) or coarse (2).
	 */
	accuracy?: number;

	/**
	 * Name of the location provider.
	 */
	name?: string;

	/**
	 * Power consumption for this provider, either low (1), medium (2), or high (3).
	 */
	power?: number;

}
/**
 * Simple object returned in the callback from the
 * [reverseGeocoder](Titanium.Geolocation.reverseGeocoder) method.
 */
interface ReverseGeocodeResponse {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * An array of reverse-geocoded addresses matching the requested location.
	 */
	places?: GeocodedAddress[];

}
/**
 * Simple object representing a place, returned in the callback from the
 * [reverseGeocoder](Titanium.Geolocation.reverseGeocoder) method.
 */
interface GeocodedAddress {
	/**
	 * Street name, without street address.
	 */
	street?: string;

	/**
	 * Street name.
	 */
	street1?: string;

	/**
	 * City name.
	 */
	city?: string;

	/**
	 * First line of region.
	 */
	region1?: string;

	/**
	 * Not used.
	 */
	region2?: string;

	/**
	 * Postal code
	 */
	postalCode?: string;

	/**
	 * Postal code. To be replaced by `postalCode`
	 */
	zipcode?: string;

	/**
	 * Country name.
	 */
	country?: string;

	/**
	 * Country code.
	 */
	countryCode?: string;

	/**
	 * Country code. To be replaced by `countryCode`.
	 */
	country_code?: string;

	/**
	 * Longitude of the geocoded point.
	 */
	longitude?: number;

	/**
	 * Latitude of the geocoded point.
	 */
	latitude?: number;

	/**
	 * Display address. Identical to `address`.
	 */
	displayAddress?: string;

	/**
	 * Full address.
	 */
	address?: string;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface LocationAuthorizationResponse {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * Simple object passed to the [scanMediaFiles](Titanium.Media.Android.scanMediaFiles) callback.
 */
interface MediaScannerResponse {
	/**
	 * Path to the media file that was scanned.
	 */
	path?: string;

	/**
	 * URI to the file if it was scanned and added to the media library, or `null`
	 * if the file was not added.
	 */
	uri?: string;

}
/**
 * An abstract type to represent a metadata item inside the `metadata` event (iOS only).
 */
interface TiMetadataItemType {
	/**
	 * The key of the metadata item, e.g. "title".
	 */
	key?: string;

	/**
	 * The key-path of the metadata item.
	 */
	keySpace?: string;

	/**
	 * The value of the metadata item. Can be represented as various types.
	 */
	value?: string | number | boolean;

	/**
	 * A dictionary of the additional attributes.
	 */
	extraAttributes?: any;

}
/**
 * Simple object for specifying options to [openMusicLibrary](Titanium.Media.openMusicLibrary).
 */
interface MusicLibraryOptionsType {
	/**
	 * Function to call when the music library selection is made.
	 */
	success?: (param0: MusicLibraryResponseType) => any;

	/**
	 * Function to call upon receiving an error.
	 */
	error?: (param0: FailureResponse) => any;

	/**
	 * Function to call if the user presses the cancel button.
	 */
	cancel?: (param0: FailureResponse) => any;

	/**
	 * Specifies that the library should be hidden automatically after media selection is completed.
	 */
	autohide?: boolean;

	/**
	 * Boolean if the dialog should be animated when showing and hiding.
	 */
	animated?: boolean;

	/**
	 * An array of media type constants defining selectable media.
	 */
	mediaTypes?: number | number[];

	/**
	 * Set to `true` to allow the user to select multiple items from the library.
	 */
	allowMultipleSelections?: boolean;

}
/**
 * Simple object passed to the [openMusicLibrary](Titanium.Media.openMusicLibrary)
 * `success` callback function.
 */
interface MusicLibraryResponseType {
	/**
	 * A single representative of the selected items.
	 */
	representative?: Titanium.Media.Item;

	/**
	 * A list of all the items chosen by the user.
	 */
	items?: Titanium.Media.Item[];

	/**
	 * Media types in this collection, represented as the bitwise OR of the media type
	 * values for all media types represented in `items`.
	 */
	types?: number;

}
/**
 * A specifier for a media library query. By default, filters perform an exact match.
 */
interface MediaQueryType {
	/**
	 * A constant that specifies the ordering of the result array.
	 */
	grouping?: number;

	/**
	 * The media type to filter on.
	 */
	mediaType?: MediaQueryInfoType | number;

	/**
	 * The title to filter on. Value should be a String.
	 */
	title?: MediaQueryInfoType | string;

	/**
	 * The album title to filter on. Value should be a String.
	 */
	albumTitle?: MediaQueryInfoType | string;

	/**
	 * The artist to filter on. Value should be a String.
	 */
	artist?: MediaQueryInfoType | string;

	/**
	 * The album artist to filter on. Value should be a String.
	 */
	albumArtist?: MediaQueryInfoType | string;

	/**
	 * The genre to filter on. Value should be a String.
	 */
	genre?: MediaQueryInfoType | string;

	/**
	 * The composer to filter on. Value should be a String.
	 */
	composer?: MediaQueryInfoType | string;

	/**
	 * Filter by whether or not the item is a compilation.
	 * The value should be a Boolean.
	 */
	isCompilation?: MediaQueryInfoType | boolean;

	/**
	 * The play count to filter on. Value should be a Number.
	 */
	playCount?: MediaQueryInfoType | number;

	/**
	 * The persistent ID to filter on. Value should be a Number.
	 */
	persistentID?: MediaQueryInfoType | number;

	/**
	 * The album persistent ID to filter on. Value should be a Number.
	 */
	albumPersistentID?: MediaQueryInfoType | number;

	/**
	 * The album artist persistent ID to filter on. Value should be a Number.
	 */
	albumArtistPersistentID?: MediaQueryInfoType | number;

	/**
	 * The genre persistent ID to filter on. Value should be a Number.
	 */
	genrePersistentID?: MediaQueryInfoType | number;

	/**
	 * The composer persistent ID to filter on. Value should be a Number.
	 */
	composerPersistentID?: MediaQueryInfoType | number;

	/**
	 * Filter by whether or not the item is a cloud item.
	 * Value should be a Boolean.
	 */
	isCloudItem?: MediaQueryInfoType | boolean;

	/**
	 * Filter by whether or not the item is a protected asset.
	 * Value should be a Boolean.
	 */
	hasProtectedAsset?: MediaQueryInfoType | boolean;

	/**
	 * The podcast title to filter on. Value should be a String.
	 */
	podcastTitle?: MediaQueryInfoType | string;

	/**
	 * The podcast persistent ID to filter on. Value should be a Number.
	 */
	podcastPersistentID?: MediaQueryInfoType | number;

}
/**
 * A full query descriptor for a filtering predicate.
 */
interface MediaQueryInfoType {
	/**
	 * The value for the given predicate. See the descriptions in <MediaQueryType> for information about which properties require which values.
	 */
	value?: number | string | boolean;

	/**
	 * Whether or not the predicate is for an exact match.  The default is `true`.
	 */
	exact?: boolean;

}
/**
 * Simple object for specifying options to [showCamera](Titanium.Media.showCamera).
 */
interface CameraOptionsType {
	/**
	 * Function to call when the camera is closed after a successful capture/selection.
	 */
	success?: (param0: CameraMediaItemType) => any;

	/**
	 * Function to call upon receiving an error.
	 */
	error?: (param0: FailureResponse) => any;

	/**
	 * Function to call if the user presses the cancel button.
	 */
	cancel?: (param0: FailureResponse) => any;

	/**
	 * Specifies if the camera should be hidden automatically after the media capture is completed.
	 */
	autohide?: boolean;

	/**
	 * Specifies if the dialog should be animated upon showing and hiding.
	 */
	animated?: boolean;

	/**
	 * Specifies if the media should be saved to the photo gallery upon successful capture.
	 */
	saveToPhotoGallery?: boolean;

	/**
	 * Specifies if the media should be editable after capture/selection.
	 */
	allowEditing?: boolean;

	/**
	 * Array of media type constants to allow. Note: If you want to select live photos, iOS only  allows
	 * you to select existing live photos from the gallery, capturing new live photos is not supported by
	 * iOS public API, yet.
	 */
	mediaTypes?: string[];

	/**
	 * Maximum duration (in milliseconds) to allow video capture before completing.
	 */
	videoMaximumDuration?: number;

	/**
	 * Constant to indicate the video quality during capture.
	 */
	videoQuality?: number;

	/**
	 * Opens the camera with the specified camera direction.
	 */
	whichCamera?: number;

	/**
	 * Indicates if the built-in camera controls should be displayed.
	 */
	showControls?: boolean;

	/**
	 * View to added as an overlay to the camera UI (on top).
	 */
	overlay?: Titanium.UI.View;

	/**
	 * Transformation matrix to apply to the camera or photogallery view.
	 */
	transform?: Titanium.UI.Matrix2D;

	/**
	 * Show the camera in a popover.
	 */
	inPopOver?: boolean;

	/**
	 * View to position the camera or photo gallery popover on top of.
	 */
	popoverView?: Titanium.UI.View;

	/**
	 * Controls the type of arrow and position of the popover.
	 */
	arrowDirection?: number;

	/**
	 * Determines if the camera preview should rotate or not.
	 */
	autorotate?: boolean;

}
/**
 * Simple object for specifying options to
 * [openPhotoGallery](Titanium.Media.openPhotoGallery).
 */
interface PhotoGalleryOptionsType {
	/**
	 * Function to call when the photo gallery is closed after a successful selection.
	 */
	success?: (param0: CameraMediaItemType) => any;

	/**
	 * Function to call upon receiving an error.
	 */
	error?: (param0: FailureResponse) => any;

	/**
	 * Function to call if the user presses the cancel button.
	 */
	cancel?: (param0: FailureResponse) => any;

	/**
	 * Specifies if the photo gallery should be hidden automatically after the media
	 * selection is completed.
	 */
	autohide?: boolean;

	/**
	 * Specifies if the dialog should be animated upon showing and hiding.
	 */
	animated?: boolean;

	/**
	 * Specifies if the media should be editable after capture/selection.
	 */
	allowEditing?: boolean;

	/**
	 * Array of media type constants to allow.
	 * Live photos is only supported on the iOS platform, starting with iOS 9.1. If you want
	 * to allow live photos with <Titanium.Media.MEDIA_TYPE_LIVEPHOTO>, you also need to specify
	 * at least <Titanium.Media.MEDIA_TYPE_PHOTO> as a fallback. If you do not allow live
	 * photos, they still can be selected, but will be represented as a normal static photo.
	 */
	mediaTypes?: string[];

	/**
	 * View to position the photo gallery popover on top of.
	 */
	popoverView?: Titanium.UI.View;

	/**
	 * Controls the type of arrow and position of the popover.
	 */
	arrowDirection?: number;

	/**
	 * Specifies if the user should be able to select multiple photos.
	 */
	allowMultiple?: boolean;

}
/**
 * A media object from the camera or photo gallery.
 */
interface CameraMediaItemType {
	/**
	 * Indicates if the operation succeeded. Returns `true`.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0.
	 */
	code?: number;

	/**
	 * The media object, as a [Blob](Titanium.Blob).
	 */
	media?: Titanium.Blob;

	/**
	 * The type of media, either `MEDIA_TYPE_PHOTO`, `MEDIA_TYPE_LIVEPHOTO` or `MEDIA_TYPE_VIDEO` defined in <Titanium.Media>.
	 */
	mediaType?: string;

	/**
	 * Simple object defining the user's selected crop rectangle, or `null` if the user has not edited the photo.
	 */
	cropRect?: CropRectType;

	/**
	 * Simple object defining the preview image size.
	 */
	previewRect?: PreviewRectType;

	/**
	 * The live photo object, as a <Titanium.UI.iOS.LivePhoto> and
	 * `undefined` if no live photo is selected.
	 */
	livePhoto?: Titanium.UI.iOS.LivePhoto;

}
/**
 * Simple object for describing the crop rectangle for an image.
 */
interface CropRectType {
	/**
	 * X coordinate of the crop rectangle's upper-left corner.
	 */
	x?: number;

	/**
	 * Y coordinate of the crop rectangle's upper-left corner.
	 */
	y?: number;

	/**
	 * Width of the crop rectangle, in pixels.
	 */
	width?: number;

	/**
	 * Height of the crop rectangle, in pixels.
	 */
	height?: number;

}
/**
 * Simple object for describing the preview image rectangle. This will be undefined when custom camera overlay is not used.
 */
interface PreviewRectType {
	/**
	 * Width preview image, in pixels.
	 */
	width?: number;

	/**
	 * Height preview image, in pixels.
	 */
	height?: number;

}
/**
 * Options passed to <Titanium.Media.previewImage>.
 */
interface PreviewImageOptions {
	/**
	 * The image to preview. Must be a blob based on a file, such as from <Titanium.Filesystem.File.read>.
	 */
	image?: Titanium.Blob;

	/**
	 * Function to be called back if the preview succeeds. No info is passed.
	 */
	success?: (param0: any) => any;

	/**
	 * Function called back if the preview fails. Check the `message` property of passed back parameter.
	 */
	error?: (param0: PreviewImageError) => any;

}
/**
 * The parameter passed to the `error` callback of <PreviewImageOptions>.
 */
interface PreviewImageError {
	/**
	 * Indicates if the operation succeeded. Returns `false`.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code, if applicable.
	 */
	code?: number;

	/**
	 * Description of the error.
	 */
	message?: string;

}
/**
 * The parameter passed to the <Titanium.Media.takeScreenshot> callback.
 */
interface ScreenshotResult {
	/**
	 * The screenshot image.
	 */
	media?: Titanium.Blob;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface MediaAuthorizationResponse {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestCameraAccessResult {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestMusicLibraryAccessResult {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestPhotoGalleryAccessResult {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * An Object describing the current audio route.
 */
interface RouteDescription {
	/**
	 * An Array of current input ports for the session. See the `AUDIO_SESSION_PORT` constants.
	 */
	inputs?: any[];

	/**
	 * An Array of current output ports for the session. See the `AUDIO_SESSION_PORT` constants.
	 */
	outputs?: any[];

}
/**
 * Simple object passed to the thumbnail callback in response to the
 * [requestThumbnailImagesAtTimes](Titanium.Media.VideoPlayer.requestThumbnailImagesAtTimes)
 * method.
 */
interface ThumbnailResponse {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Thumbnail image, as a `Blob`.
	 */
	image?: Titanium.Blob;

	/**
	 * Time offset for the thumbnail, in seconds.
	 */
	time?: number;

}
/**
 * Simple object used to describe the size of a movie.
 */
interface MovieSize {
	/**
	 * Width of the movie.
	 */
	width?: number;

	/**
	 * Height of the movie.
	 */
	height?: number;

}
/**
 * The protocol that the <Titanium.Network.HTTPClient.securityManager> must implement.
 */
interface SecurityManagerProtocol {
	/**
	 * Returns if the security manager will participate in authentication of this end point.
	 */
	willHandleURL(url: any): boolean;

	/**
	 * The <APSConnectionDelegate> for this connection.
	 */
	connectionDelegateForUrl(url: any): APSConnectionDelegate;

	/**
	 * Returns an array of objects implementing the [X509TrustManager](https://developer.android.com/reference/javax/net/ssl/X509TrustManager.html) protocol for the SSL Context.
	 */
	getTrustManagers(proxy: any): any[];

	/**
	 * Returns an array of objects implementing the [X509KeyManager](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html) protocol for the SSL Context.
	 */
	getKeyManagers(proxy: any): any[];

}
/**
 * An extension of the [NSURLConnectionDelegate](https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intf/NSURLConnectionDelegate) protocol to allow users to participate in authentication and resource management for this HTTPClient.
 */
interface APSConnectionDelegate {
}
/**
 * An Object describing the current ready state. See [onreadystatechange](Titanium.Network.HTTPClient.onreadystatechange) for more information.
 */
interface ReadyStatePayload {
	/**
	 * The state for which `onreadystatechange` was invoked. Set to one of `Titanium.Network.HTTPClient` ready-state constants
	 */
	readyState?: number;

}
/**
 * Simple object for specifying push notification options to
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications).
 */
interface PushNotificationConfig {
	/**
	 * Array of `NOTIFICATION_TYPE` constants that the application would like to receive.
	 */
	types?: number[];

	/**
	 * Callback function called when the push registration is successfully completed.
	 */
	success?: (param0: PushNotificationSuccessArg) => any;

	/**
	 * Callback function called when an error occurs during registration.
	 */
	error?: (param0: PushNotificationErrorArg) => any;

	/**
	 * Callback function invoked upon receiving a new push notification.
	 */
	callback?: (param0: PushNotificationData) => any;

}
/**
 * A simple object passed to the
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications) success callback.
 */
interface PushNotificationSuccessArg {
	/**
	 * Indicates if the operation succeeded. Returns `true`.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0.
	 */
	code?: number;

	/**
	 * The value of this string is always "remote".
	 */
	type?: string;

	/**
	 * The device token which this device was registered for.
	 */
	deviceToken?: string;

}
/**
 * A simple object passed to the
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications) error callback.
 */
interface PushNotificationErrorArg {
	/**
	 * Indicates if the operation succeeded. Returns `false`.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns a non-zero value.
	 */
	code?: number;

	/**
	 * The value of this string is always "remote".
	 */
	type?: string;

}
/**
 * A simple object representing a push notification.
 */
interface PushNotificationData {
	/**
	 * The `userinfo` dictionary passed to the Apple Push Notification Service.
	 */
	data?: any;

	/**
	 * Boolean indicating if notification was received while app was in background.
	 * This property became available in Titanium Mobile 3.1.0 for iOS.
	 */
	inBackground?: boolean;

}
/**
 * Argument object passed to the [connected](Titanium.Network.Socket.TCP.connected) callback when the socket connects.
 */
interface ConnectedCallbackArgs {
	/**
	 * Socket instance that has been connected.
	 */
	socket?: Titanium.Network.Socket.TCP;

}
/**
 * Object passed to the error callback when the socket enters the [ERROR](Titanium.Network.Socket.ERROR) state.
 */
interface ErrorCallbackArgs {
	/**
	 * Indicates if the operation succeeded. Returns `false`.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns a non-zero value.
	 */
	code?: number;

	/**
	 * Socket that experienced the error.
	 */
	socket?: Titanium.Network.Socket.TCP;

	/**
	 * The error code of the error (potentially system-dependent).
	 */
	errorCode?: number;

}
/**
 * Argument object passed to the [accepted](Titanium.Network.Socket.TCP.accepted)
 * callback when a listener accepts a connection.
 */
interface AcceptedCallbackArgs {
	/**
	 * Socket which received the connection.
	 */
	socket?: Titanium.Network.Socket.TCP;

	/**
	 * Socket which represents the inbound connection.
	 */
	inbound?: Titanium.Network.Socket.TCP;

}
/**
 * Options object for the [accept](Titanium.Network.Socket.TCP.accept) method.
 */
interface AcceptDict {
	/**
	 * Timeout, in milliseconds, for all `write` operations.
	 */
	timeout?: number;

	/**
	 * Callback to be fired when the socket enters the [ERROR](Titanium.Network.Socket.ERROR) state.
	 */
	error?: (param0: ErrorCallbackArgs) => any;

}
/**
 * Simple object holding the data for a logical cpu.
 */
interface CPU {
	/**
	 * General description of the CPU
	 */
	model?: string;

	/**
	 * Speed of the CPU in MHz
	 */
	speed?: number;

	/**
	 * A collection of timings for this logical CPU.
	 */
	times?: CPUTimes;

}
/**
 * Simple object holding the data for a logical cpu execution times.
 */
interface CPUTimes {
	/**
	 * The number of milliseconds the CPU has spent in user mode.
	 */
	user?: number;

	/**
	 * The number of milliseconds the CPU has spent in nice mode.
	 */
	nice?: number;

	/**
	 * The number of milliseconds the CPU has spent in sys mode.
	 */
	sys?: number;

	/**
	 * The number of milliseconds the CPU has spent in idle mode.
	 */
	idle?: number;

	/**
	 * The number of milliseconds the CPU has spent in irq mode.
	 */
	irq?: number;

}
/**
 * Argument passed to [createStream](Titanium.Stream.createStream).
 */
interface CreateStreamArgs {
	/**
	 * Object that the stream will read from or write to.
	 */
	source?: Titanium.Blob | Titanium.Buffer;

	/**
	 * Mode to open the stream in.
	 */
	mode?: number;

}
/**
 * Argument passed to the read callback when an asynchronous [read](Titanium.Stream.read) operation
 * finishes.
 */
interface ReadCallbackArgs {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Stream being read.
	 */
	source?: Titanium.IOStream;

	/**
	 * Number of bytes processed, or -1 in the event of an error or end of stream.
	 */
	bytesProcessed?: number;

	/**
	 * Whether an error was encountered. Set to 1 in the case of an error, 0
	 * otherwise.
	 */
	errorState?: number;

	/**
	 * Text description of the error.
	 */
	errorDescription?: string;

}
/**
 * Argument passed to the write callback when an asynchronous
 * [write](Titanium.Stream.write) operation
 * finishes.
 */
interface WriteCallbackArgs {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Stream being written to.
	 */
	source?: Titanium.IOStream;

	/**
	 * Number of bytes processed, or -1 in the event of an error or end of stream.
	 */
	bytesProcessed?: number;

	/**
	 * Whether an error was encountered. Set to 1 in the case of an error, 0
	 * otherwise.
	 */
	errorState?: number;

	/**
	 * Text description of the error.
	 */
	errorDescription?: string;

}
/**
 * Argument passed to the callback when an asynchronous
 * [writeStream](Titanium.Stream.writeStream) operation finishes.
 */
interface WriteStreamCallbackArgs {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Stream being read from.
	 */
	fromStream?: Titanium.IOStream;

	/**
	 * Stream being written to.
	 */
	toStream?: Titanium.IOStream;

	/**
	 * Number of bytes processed, or -1 in the event of an error or end of stream.
	 */
	bytesProcessed?: number;

	/**
	 * Whether an error was encountered. Set to 1 in the case of an error, 0
	 * otherwise.
	 */
	errorState?: number;

	/**
	 * Text description of the error.
	 */
	errorDescription?: string;

}
/**
 * Argument passed to the callback each time the
 * [pump](Titanium.Stream.pump) operation has new data to deliver.
 */
interface PumpCallbackArgs {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Stream being read from.
	 */
	source?: Titanium.IOStream;

	/**
	 * Buffer object holding the data currently being pumped to the handler method.
	 */
	buffer?: Titanium.Buffer;

	/**
	 * Number of bytes being passed to this invocation of the handler, or
	 * -1 in the event of an error or end of stream.
	 */
	bytesProcessed?: number;

	/**
	 * Total number of bytes read from the stream so far,
	 * including the data passed to this current invocation of the handler.
	 */
	totalBytesProcessed?: number;

	/**
	 * Whether an error was encountered. Set to 1 in the case of an error, 0
	 * otherwise.
	 */
	errorState?: number;

	/**
	 * Text description of the error.
	 */
	errorDescription?: string;

}
/**
 * Arguments to be passed to createBuffer
 */
interface CreateBufferArgs {
	/**
	 * An initial value which will be encoded and placed in the buffer. If value is a Number, type must also be set. (this is simply a convenient way of calling <Titanium.Codec.encodeString> or <Titanium.Codec.encodeNumber> and placing the encoded value in the returned buffer.)
	 */
	value?: string | number;

	/**
	 * The length of the buffer.
	 */
	length?: number;

	/**
	 * The type of data encoding to use with `value`.
	 */
	type?: string;

	/**
	 * The byte order of this buffer.
	 */
	byteOrder?: number;

}
/**
 * Simple object passed to <Titanium.UI.create2DMatrix> to initialize a matrix.
 */
interface MatrixCreationDict {
	/**
	 * Scale the matrix by the specified scaling factor. The same scaling factor is used
	 * for both horizontal and vertical scaling.
	 */
	scale?: number;

	/**
	 * Rotation angle, in degrees. See the [rotate](Titanium.UI.2DMatrix.rotate) method
	 * for a discussion of rotation.
	 */
	rotate?: number;

	/**
	 * Point to rotate around, specified as a dictionary object with `x` and `y`
	 * properties, where { x: 0.5, y: 0.5 } represents the center of whatever is being
	 * rotated.
	 */
	anchorPoint?: any;

}
/**
 * An abstract datatype for specifying an attributed string attribute.
 */
interface Attribute {
	/**
	 * Attribute to apply to the text.
	 */
	type: number;

	/**
	 * Attribute value.
	 */
	value: number;

	/**
	 * Attribute range.
	 */
	range: number[];

}
/**
 * An abstract datatype for specifying an Paragraph style attribute.
 */
interface ParagraphAttribute {
	/**
	 * The text alignment of the receiver.
	 */
	alignment?: number;

	/**
	 * The indentation of the first line of the receiver.
	 */
	firstLineHeadIndent?: number | string;

	/**
	 * The indentation of the lines of lines other than the first.
	 */
	headIndent?: number | string;

	/**
	 * The trailing indentation of the receiver.
	 */
	tailIndent?: number | string;

	/**
	 * The mode that should be used to break lines in the receiver.
	 */
	lineBreakMode?: number;

	/**
	 * The maximum line height of receiver.
	 */
	maximumLineHeight?: number | string;

	/**
	 * The minimum height of receiver.
	 */
	minimumLineHeight?: number | string;

	/**
	 * The distance in points between the bottom of one line fragment and the top of the next.
	 */
	lineSpacing?: number | string;

	/**
	 * The space after the end of the paragraph.
	 */
	paragraphSpacingAfter?: number | string;

	/**
	 * The distance between the top of paragraph and the beginning of its text content.
	 */
	paragraphSpacingBefore?: number | string;

	/**
	 * The line height multiple.
	 */
	lineHeightMultiple?: number;

	/**
	 * The threshold of paragraph for hyphenation.
	 */
	hyphenationFactor?: number;

	/**
	 * A Boolean value indicating whether the system may tighten inter-character spacing
	 * before truncating text.
	 */
	allowsDefaultTighteningForTruncation?: boolean;

}
/**
 * Dictionary describing the items for <Titanium.UI.Clipboard.setItems>.
 */
interface ClipboardItemsType {
	/**
	 * An array of key-value items to add to the clipboard. The key must a valid mime-type
	 * matching the mime-type of the value.
	 */
	items?: any[];

	/**
	 * The privacy options to apply to all the items on the clipboard. The available options are
	 * described in `Ti.UI.CLIPBOARD_OPTION_*`. Depending on the key, the value can be a Date or
	 * Boolean.
	 */
	options?: any;

}
/**
 * An abstract datatype for specifying a text font.
 */
interface Font {
	/**
	 * Specifies the font family or specific font to use.
	 */
	fontFamily?: string;

	/**
	 * Font size, in platform-dependent units.
	 */
	fontSize?: number | string;

	/**
	 * Font weight. Valid values are "bold", "semibold", "normal", "thin",
	 * "light" and "ultralight".
	 */
	fontWeight?: string;

	/**
	 * Font style. Valid values are "italic" or "normal".
	 */
	fontStyle?: string;

	/**
	 * The text style for the font.
	 */
	textStyle?: string;

}
/**
 * Template that represents the basic appearance of a list item.
 */
interface ItemTemplate {
	/**
	 * Contains key-value pairs of view properties and their values that are applied to the ListItem.
	 */
	properties?: any;

	/**
	 * Contains key-value pairs of view events and their listeners that are applied to the ListItem.
	 */
	events?: any;

	/**
	 * Contains an array of subview templates to be added (in order) as children to this view.
	 */
	childTemplates?: ViewTemplate[];

}
/**
 * Template that represents a view subcomponent of an <ItemTemplate>.
 */
interface ViewTemplate {
	/**
	 * View's class name, for example, `Ti.UI.Button`.
	 */
	type: string;

	/**
	 * View's ID (or set of IDs) used for data binding. This value must be unique.
	 */
	bindId?: string;

	/**
	 * Contains key-value pairs of view properties and their values that are applied to this view component.
	 */
	properties?: any;

	/**
	 * Contains key-value pairs of view events and their listeners that are applied to this view component.
	 */
	events?: any;

	/**
	 * Contains an array of subview templates to be added (in order) as children to this view.
	 */
	childTemplates?: ViewTemplate[];

}
/**
 * Represents displayed item data.
 */
interface ListDataItem {
	/**
	 * Template ID configured with the <Titanium.UI.ListView.templates> property or
	 * <Titanium.UI.LIST_ITEM_TEMPLATE_DEFAULT>.
	 */
	template?: string | number;

	/**
	 * Contains key-value pairs of view properties and their values that are applied to the
	 * `ListItem`.
	 */
	properties?: any;

	[key: string]: any;
}
/**
 * Represents the custom edit action for a ListItem.
 */
interface RowActionType {
	/**
	 * The title of the row action.
	 */
	title: string;

	/**
	 * The [identifier](RowActionType. identifier) of the row action. Only included in the event
	 * if previously defined. Available in Titanium 6.0.0 and later.
	 */
	identifier?: string;

	/**
	 * The style of the row action.
	 */
	style: number;

	/**
	 * The background color of the row action.
	 */
	color?: string;

}
/**
 * A simple object for specifying the animation properties to use when inserting or deleting
 * sections or cells, or scrolling the list.
 */
interface ListViewAnimationProperties {
	/**
	 * Whether this list change should be animated. Ignored if any `animationStyle` value is specified.
	 */
	animated?: boolean;

	/**
	 * Type of animation to use for cell insertions and deletions.
	 */
	animationStyle?: number;

	/**
	 * Specifies what position to scroll the selected cell to.
	 */
	position?: number;

}
/**
 * A simple object that represents an index entry in a `ListView`.
 */
interface ListViewIndexEntry {
	/**
	 * Title to display in the index bar.
	 */
	title?: string;

	/**
	 * Section index associated with this title.
	 */
	index?: number;

}
/**
 * Optional parameter for [setContentInsets](Titanium.UI.ListView.setContentInsets) method.
 */
interface ListViewContentInsetOption {
	/**
	 * Determines whether the list view's content inset change is animated.
	 */
	animated?: boolean;

	/**
	 * The duration in `milliseconds` for animation while the content inset is  being changed.
	 */
	duration?: number;

}
/**
 * The parameter for [setMarker](Titanium.UI.ListView.setMarker) and [addMarker](Titanium.UI.ListView.addMarker) methods.
 */
interface ListViewMarkerProps {
	/**
	 * The sectionIndex of the reference item.
	 */
	sectionIndex?: number;

	/**
	 * The itemIndex of the reference item.
	 */
	itemIndex?: number;

}
/**
 * The parameter for [setContentInsets](Titanium.UI.TableView.setContentInsets) method.
 */
interface ListViewEdgeInsets {
	/**
	 * Value specifying the top insets for the enclosing scroll view of the list view.
	 */
	top?: number;

	/**
	 * Value specifying the left insets for the enclosing scroll view of the list view.
	 */
	left?: number;

	/**
	 * Value specifying the right insets for the enclosing scroll view of the list view.
	 */
	right?: number;

	/**
	 * Value specifying the bottom insets for the enclosing scroll view of the list view.
	 */
	bottom?: number;

}
/**
 * The arguments for the <Titanium.UI.ListView.prefetch> and <Titanium.UI.ListView.cancelprefetch> events.
 */
interface ListItemEventType {
	/**
	 * List section if the item is contained in a list section.
	 */
	section?: Titanium.UI.ListSection;

	/**
	 * Section index.
	 */
	sectionIndex?: number;

	/**
	 * Item index.
	 */
	itemIndex?: number;

	/**
	 * The item ID bound to the list item that generated the event.
	 */
	itemId?: string;

}
/**
 * Simple object passed to <Titanium.UI.createMatrix2D> to initialize a matrix.
 */
interface Matrix2DCreationDict {
	/**
	 * Scale the matrix by the specified scaling factor. The same scaling factor is used
	 * for both horizontal and vertical scaling.
	 */
	scale?: number;

	/**
	 * Rotation angle, in degrees. See the [rotate](Titanium.UI.Matrix2D.rotate) method
	 * for a discussion of rotation.
	 */
	rotate?: number;

	/**
	 * Point to rotate around, specified as a dictionary object with `x` and `y`
	 * properties, where { x: 0.5, y: 0.5 } represents the center of whatever is being
	 * rotated.
	 */
	anchorPoint?: any;

}
/**
 * Dictionary of options for the <Titanium.UI.OptionDialog.hide> method.
 */
interface hideParams {
	/**
	 * Determines whether to animate the dialog as it is dismissed.
	 */
	animated?: boolean;

}
/**
 * Optional parameter for [setContentOffset](Titanium.UI.ScrollView.setContentOffset) method.
 */
interface contentOffsetOption {
	/**
	 * Determines whether the scroll view's content area change is animated.
	 */
	animated?: boolean;

}
/**
 * Optional parameter for [setZoomScale](Titanium.UI.ScrollView.setZoomScale) method.
 */
interface zoomScaleOption {
	/**
	 * Determines whether the scroll view's zooming is animated.
	 */
	animated?: boolean;

}
/**
 * A simple object for specifying the animation properties when scrolling the view.
 */
interface ScrollViewAnimationProperties {
	/**
	 * When set to `true` it will scroll smoothly to the destination.
	 */
	animated?: boolean;

}
/**
 * Dictionary to specify edge insets for <Titanium.UI.Tab.iconInsets>.
 */
interface TabIconInsets {
	/**
	 * Top inset.
	 */
	top?: number;

	/**
	 * Left inset.
	 */
	left?: number;

}
/**
 * A simple object for specifying the animation properties to use when inserting or deleting rows, or scrolling the table.
 */
interface TableViewAnimationProperties {
	/**
	 * Whether this table change should be animated. Ignored if any `animationStyle` value is specified.
	 */
	animated?: boolean;

	/**
	 * Type of animation to use for row insertions and deletions.
	 */
	animationStyle?: number;

	/**
	 * Specifies what position to scroll the selected row to.
	 */
	position?: number;

}
/**
 * A simple object that represents an index entry in a `TableView`.
 */
interface TableViewIndexEntry {
	/**
	 * Title to display in the index bar for this item.
	 */
	title?: string;

	/**
	 * Row index associated with this item.
	 */
	index?: number;

}
/**
 * Optional parameter for [setContentInsets](Titanium.UI.TableView.setContentInsets) method.
 */
interface TableViewContentInsetOption {
	/**
	 * Determines whether the table view's content inset change is animated.
	 */
	animated?: boolean;

	/**
	 * The duration in `milleseconds` for animation while the content inset is  being changed.
	 */
	duration?: number;

}
/**
 * The parameter for [setContentInsets](Titanium.UI.TableView.setContentInsets) method.
 */
interface TableViewEdgeInsets {
	/**
	 * Value specifying the top insets for the enclosing scroll view of the table.
	 */
	top?: number;

	/**
	 * Value specifying the left insets for the enclosing scroll view of the table.
	 */
	left?: number;

	/**
	 * Value specifying the right insets for the enclosing scroll view of the table.
	 */
	right?: number;

	/**
	 * Value specifying the bottom insets for the enclosing scroll view of the table.
	 */
	bottom?: number;

}
/**
 * Dictionary object of parameters for the <Titanium.UI.TextArea.selected> event and <Titanium.UI.TextArea.selection> property that describes
 * position and length of the selected text.
 */
interface textAreaSelectedParams {
	/**
	 * Starting position of selected text.
	 */
	location?: number;

	/**
	 * Number of characters selected.
	 */
	length?: number;

}
/**
 * Dictionary object of parameters for the <Titanium.UI.TextField.selection> property that describes
 * position and length of the selected text.
 */
interface textFieldSelectedParams {
	/**
	 * Starting position of selected text.
	 */
	location?: number;

	/**
	 * Number of characters selected.
	 */
	length?: number;

}
/**
 * Dictionary object of parameters for the <Titanium.UI.TextField.padding>  that describes the padding
 */
interface TextFieldPadding {
	/**
	 * Left padding
	 */
	left?: number;

	/**
	 * Right padding
	 */
	right?: number;

	/**
	 * Top padding (Android only, since 6.1.0)
	 */
	top?: number;

	/**
	 * Bottom padding (Android only, since 6.1.0)
	 */
	bottom?: number;

}
/**
 * A pair of coordinates used to describe the location of a <Titanium.UI.View>.
 */
interface Point {
	/**
	 * The x-axis coordinate of this point.
	 */
	x?: number | string;

	/**
	 * The y-axis coordinate of this point.
	 */
	y?: number | string;

}
/**
 * A simple object defining a color gradient.
 */
interface Gradient {
	/**
	 * Type of gradient, either 'linear' or 'radial'.
	 */
	type?: string;

	/**
	 * Start point for the gradient.
	 */
	startPoint?: Point;

	/**
	 * End point for the gradient.
	 */
	endPoint?: Point;

	/**
	 * For a radial gradient, the radius at the `startPoint`.
	 */
	startRadius?: number;

	/**
	 * For a radial gradient, the radius at the `endPoint`.
	 */
	endRadius?: number;

	/**
	 * An array of colors, as a color name or hex triplet.
	 */
	colors?: string[] | GradientColorRef[];

	/**
	 * Set to `true` to continue filling with the starting color beyond the `startPoint`.
	 */
	backfillStart?: boolean;

	/**
	 * Set to `true` to continue filling with the final color beyond the `endPoint`.
	 */
	backfillEnd?: boolean;

}
/**
 * A simple object consisting of a color and an offset.
 */
interface GradientColorRef {
	/**
	 * Color value at this point in the gradient, as a color name or hex triplet.
	 */
	color?: string;

	/**
	 * The color's normalized position within the gradient, ranging from 0 (start) to 1 (end).
	 */
	offset?: number;

}
/**
 * A simple object consisting of the position and size measurements.
 */
interface Dimension {
	/**
	 * The height measurement.
	 */
	height?: number;

	/**
	 * The width measurement.
	 */
	width?: number;

	/**
	 * The x-axis coordinate of the position.
	 */
	x?: number;

	/**
	 * The y-axis coordinate of the position.
	 */
	y?: number;

}
/**
 * Optional parameter to enable animation to [hide](Titanium.UI.View.hide) and [show](Titanium.UI.View.show).
 */
interface AnimationOption {
	/**
	 * Determines whether to enable a circular reveal animation.
	 */
	animated?: boolean;

}
/**
 * Dictionary object of parameters for the padding applied to all kinds of views.
 */
interface ViewPadding {
	/**
	 * Left padding
	 */
	left?: number;

	/**
	 * Right padding
	 */
	right?: number;

	/**
	 * Top padding
	 */
	top?: number;

	/**
	 * Bottom padding
	 */
	bottom?: number;

}
/**
 * The parameter passed to the <Titanium.UI.WebView.takeSnapshot> callback.
 */
interface SnapshotResult {
	/**
	 * The snapshot image.
	 */
	snapshot?: Titanium.Blob;

	/**
	 * Indicates if the snapshot taken.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

}
/**
 * The object returned to the <Titanium.UI.WebView.backForwardList> method.
 */
interface BackForwardList {
	/**
	 * The current item.
	 */
	currentItem?: BackForwardListItem;

	/**
	 * The item immediately preceding the current item.
	 */
	backItem?: BackForwardListItem;

	/**
	 * The item immediately following the current item.
	 */
	forwardItem?: BackForwardListItem;

	/**
	 * The portion of the list preceding the current item.
	 */
	backList?: BackForwardListItem[];

	/**
	 * The portion of the list following the current item.
	 */
	forwardList?: BackForwardListItem[];

}
/**
 * The object represents a webpage in the back-forward of a web view.
 */
interface BackForwardListItem {
	/**
	 * The URL of the webpage represented by this item.
	 */
	url?: string;

	/**
	 * The URL of the initial request that created this item.
	 */
	initialUrl?: string;

	/**
	 * The title of the webpage represented by this item.
	 */
	title?: string;

}
/**
 * An object returned when the <Titanium.UI.WebView.onlink> callback is fired.
 */
interface OnLinkURLResponse {
	/**
	 * The url of the link that should be navigated to.
	 */
	url?: string;

}
/**
 * Dictionary of options for the <Titanium.UI.Window.open> method.
 */
interface openWindowParams {
	/**
	 * Determines whether to use an animated effect when the window is shown.
	 */
	animated?: boolean;

	/**
	 * Window's bottom position, in platform-specific units.
	 */
	bottom?: number | string;

	/**
	 * Determines if the window is fullscreen.
	 */
	fullscreen?: boolean;

	/**
	 * Window's height, in platform-specific units.
	 */
	height?: number | string;

	/**
	 * Window's left position, in platform-specific units.
	 */
	left?: number | string;

	/**
	 * Determines whether to open the window modal in front of other windows.
	 */
	modal?: boolean;

	/**
	 * Presentation style of this modal window.
	 */
	modalStyle?: number;

	/**
	 * Transition style of this modal window.
	 */
	modalTransitionStyle?: number;

	/**
	 * For modal windows, hides the nav bar (`true`) or shows the nav bar (`false`).
	 */
	navBarHidden?: boolean;

	/**
	 * Window's right position, in platform-specific units.
	 */
	right?: number | string;

	/**
	 * Window's top position, in platform-specific units.
	 */
	top?: number | string;

	/**
	 * Transition style of this non-modal window.
	 */
	transition?: number;

	/**
	 * Window's width, in platform-specific units.
	 */
	width?: number | string;

	/**
	 * Animation resource to run on the activity (heavyweight window) being opened.
	 */
	activityEnterAnimation?: number;

	/**
	 * Animation resource to run on the activity that is being put in background as a heavyweight window is being opened above it.
	 */
	activityExitAnimation?: number;

}
/**
 * Dictionary of options for the <Titanium.UI.Window.setToolbar> method.
 */
interface windowToolbarParam {
	/**
	 * Defines if the toolbar is translucent.
	 */
	translucent?: boolean;

	/**
	 * Defines if the toolbar appearance is animated.
	 */
	animated?: boolean;

	/**
	 * Background color for the toolbar, as a color name or hex triplet.
	 */
	barColor?: string;

	/**
	 * The tintColor to apply to the tool bar.
	 */
	tintColor?: string;

}
/**
 * Dictionary of options for the <Titanium.UI.Window.close> method.
 */
interface closeWindowParams {
	/**
	 * Determines whether to use an animated effect when the window is closed.
	 */
	animated?: boolean;

	/**
	 * Animation resource to use for the incoming activity.
	 */
	activityEnterAnimation?: number;

	/**
	 * Animation resource to use for the outgoing activity (heavyweight window).
	 */
	activityExitAnimation?: number;

}
/**
 * Dictionary of options for the <Titanium.UI.Window.titleAttributes> property.
 */
interface titleAttributesParams {
	/**
	 * Color of the window title, as a color name or hex triplet.
	 */
	color?: string;

	/**
	 * Font to use for the window title.
	 */
	font?: Font;

	/**
	 * Shadow color and offset for the window title.
	 */
	shadow?: shadowDict;

}
/**
 * Dictionary describing the shadow effect for text.
 */
interface shadowDict {
	/**
	 * Specifies the blur radius of the shadow.
	 */
	blurRadius?: number;

	/**
	 * Color name or hex triplet specifying the color of the shadow.
	 */
	color?: string;

	/**
	 * Dictionary with the properties `width` and `height` used as the horizontal
	 * and vertical offset of the shadow, respectively.
	 */
	offset?: any;

}
/**
 * Object of options for <Titanium.UI.iOS.ApplicationShortcuts.addDynamicShortcut>.
 */
interface ShortcutParams {
	/**
	 * The unique key for the application shortcut.
	 */
	itemtype: string;

	/**
	 * The title of the application shortcut.
	 */
	title: string;

	/**
	 * The subtitle displayed on the application shortcut.
	 */
	subtitle?: string;

	/**
	 * The icon to be displayed on the application shortcut. You can either use one of the constants like
	 * <Titanium.UI.iOS.SHORTCUT_ICON_TYPE_COMPOSE>, a local image specified by the image path or a reference to a
	 * <Titanium.Contacts.Person>.
	 */
	icon?: number | string | Titanium.Contacts.Person;

	/**
	 * The userInfo of the application shortcut.
	 */
	userInfo?: any;

}
/**
 * Dictionary to specify a boundary identifier for <Titanium.UI.iOS.CollisionBehavior.addBoundary>.
 */
interface BoundaryIdentifier {
	/**
	 * Arbitrary identifier for the boundary
	 */
	identifier?: string;

	/**
	 * Start point for the boundary
	 */
	point1?: Point;

	/**
	 * End point for the boundary
	 */
	point2?: Point;

}
/**
 * Dictionary to specify edge insets for <Titanium.UI.iOS.CollisionBehavior.referenceInsets>.
 */
interface ReferenceInsets {
	/**
	 * Top inset.
	 */
	top?: number;

	/**
	 * Left inset.
	 */
	left?: number;

	/**
	 * Right inset.
	 */
	right?: number;

	/**
	 * Bottom inset.
	 */
	bottom?: number;

}
/**
 * Simple object for defining a single image in a cover flow view.
 */
interface CoverFlowImageType {
	/**
	 * Image to use, as a local file URL, `Blob`, or `File`.
	 */
	image?: string | Titanium.Blob | Titanium.Filesystem.File;

	/**
	 * Display width for the image, in Apple points.
	 */
	width?: number;

	/**
	 * Display height of the image, in Apple points.
	 */
	height?: number;

}
/**
 * A simple object for specifying options when showing or dismissing a <Titanium.UI.iOS.DocumentViewer>.
 */
interface DocumentViewerOptions {
	/**
	 * Indicates whether to animate the transition.
	 */
	animated?: boolean;

	/**
	 * Anchors the options menu to the specified view.
	 */
	view?: Titanium.UI.View;

}
/**
 * Dictionary of options for showing a menu popup with <Titanium.UI.iOS.MenuPopup.show>.
 */
interface MenuPopupShowParams {
	/**
	 * The view where the menu pop is shown at.
	 */
	view: Titanium.UI.View;

	/**
	 * Determines whether the menu popup should be opened or closed animated.
	 */
	animated?: boolean;

	/**
	 * Indicates the arrow direction of the menu popup.
	 */
	arrowDirection?: number;

}
/**
 * Dictionary of options for hiding a menu popup with <Titanium.UI.iOS.MenuPopup.hide>.
 */
interface MenuPopupHideParams {
	/**
	 * Determines whether the menu popup should be opened or closed animated.
	 */
	animated?: boolean;

}
/**
 * Optional parameter for [setShowMasterInPortrait](Titanium.UI.iOS.SplitWindow.setShowMasterInPortrait) and
 * [setMasterIsOverlayed](Titanium.UI.iOS.SplitWindow.setMasterIsOverlayed) methods.
 */
interface animationOption {
	/**
	 * Determines whether the change is animated.
	 */
	animated?: boolean;

}
/**
 * Object describing a button bar or tabbed bar item.
 */
interface BarItemType {
	/**
	 * Button title, used if no `image` is specified.
	 */
	title?: string;

	/**
	 * Button icon. If specified, takes precedence over `title`.
	 */
	image?: string | Titanium.Blob | Titanium.Filesystem.File;

	/**
	 * Width for this button.
	 */
	width?: number;

	/**
	 * Whether the button is enabled initially.
	 */
	enabled?: boolean;

	/**
	 * A succint label associated with the bar item for the device's accessibility service.
	 */
	accessibilityLabel?: string;

}
/**
 * The parameter passed to the <Titanium.UI.iOS.WebViewConfiguration.preferences> method.
 */
interface WebViewPreferencesObject {
	/**
	 * The minimum font size in points.
	 */
	minimumFontSize?: number;

	/**
	 * A Boolean value indicating whether JavaScript is enabled.
	 */
	javaScriptEnabled?: boolean;

	/**
	 * A Boolean value indicating whether JavaScript can open windows without user interaction.
	 */
	javaScriptCanOpenWindowsAutomatically?: boolean;

}
/**
 * Dictionary specifying the transition animation used with the <Titanium.UI.iOS.createTransitionAnimation> method.
 */
interface transitionAnimationParam {
	/**
	 * Length of the transition in milliseconds.
	 */
	duration?: number;

	/**
	 * Animation to hide the current window.
	 */
	transitionFrom?: Titanium.UI.Animation;

	/**
	 * Animation to show the new window.
	 */
	transitionTo?: Titanium.UI.Animation;

}
/**
 * Dictionary of options for <Titanium.UI.iPad.Popover.show> and <Titanium.UI.iPad.Popover.hide>.
 */
interface PopoverParams {
	/**
	 * Indicates whether to animate showing or hiding the popover.
	 */
	animated?: boolean;

	/**
	 * Sets the arrow position of the popover relative to the attached view object's dimensions
	 * when showing the popover.
	 */
	rect?: Dimension;

	/**
	 * Attaches the popover to the specified view when showing the popover.
	 */
	view: Titanium.UI.View;

}
/**
 * Reply message received from watch app.
 */
interface MessageReply {
	/**
	 * Reply message from watchapp.
	 */
	message?: any;

	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

}
/**
 * Properties passed to a yql callback to report a success or failure.
 */
interface YQLResponse {
	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Error message, if any returned. Use `error` instead
	 */
	message?: string;

	/**
	 * The data payload received from the YQL.
	 */
	data?: any;

}
