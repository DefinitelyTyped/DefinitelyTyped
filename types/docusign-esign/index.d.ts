// Type definitions for docusign-esign 5.5
// Project: https://github.com/docusign/docusign-node-client#readme
// Definitions by: Edwin Quimbo <https://github.com/equimbo/>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.3

/// <reference types="node" />

export class ApiClient {
    constructor(opts: { basePath: string; oAuthBasePath: string });

    addDefaultHeader(header: string, value: string): void;

    applyAuthToRequest(request: any, authNames: string[]): void;

    buildCollectionParam(param: any[], collectionFormat: any): string[];

    buildUrl(path: string, pathParams: any): string;

    callApi(
        path: string,
        httpMethod: string,
        pathParams: object,
        queryParams: object,
        headerParams: object,
        formParams: object,
        bodyParam: object,
        authNames: string[],
        contentTypes: string[],
        accepts: string[],
        returnType: any,
        callback?: () => void,
    ): Promise<any>;

    deserialize(response: object, returnType: any): any;

    generateAccessToken(clientId: string, clientSecret: string, code: string, callback?: () => void): Promise<any>;

    getAuthorizationUri(
        clientId: string,
        scopes: string[],
        redirectUri: string,
        responseType: string,
        state: string,
    ): string;

    getBasePath(): string;

    getJWTUri(clientId: string, redirectURI: string, oAuthBasePath: string): string;

    getOAuthBasePath(): string;

    getUserInfo(accessToken: string, callback?: () => void): Promise<any>;

    hasNoInvalidScopes(scopes: string[]): boolean;

    isFileParam(param: any): boolean;

    isJsonMime(contentType: string): boolean;

    jsonPreferredMime(contentTypes: string[]): string;

    normalizeParams(params: any): any;

    paramToString(param: any): string;

    requestJWTApplicationToken(
        clientId: string,
        scopes: string[],
        rsaPrivateKey: Buffer,
        expiresIn: number,
        callback?: () => void,
    ): Promise<any>;

    requestJWTUserToken(
        clientId: string,
        userId: string,
        scopes: string[],
        rsaPrivateKey: Buffer,
        expiresIn: number,
        callback?: () => void,
    ): Promise<any>;

    setBasePath(basePath: string): void;

    setOAuthBasePath(oAuthBasePath: string): void;

    static CollectionFormatEnum: {
        CSV: string;
        MULTI: string;
        PIPES: string;
        SSV: string;
        TSV: string;
    };

    static RestApi: {
        BasePath: {
            DEMO: string;
            PRODUCTION: string;
            STAGE: string;
        };
    };

    static constructFromObject(data: any, obj: any, itemType: any): void;

    static convertToType(data: any, type: any): any;

    static parseDate(str: string): Date;
}

export class Configuration {
    constructor();

    getDefaultApiClient(): ApiClient;

    setDefaultApiClient(defaultApiClient: ApiClient): void;
}

export class AccountsApi {
    constructor(apiClient: ApiClient);

    _delete(accountId: string, callback?: () => void): Promise<void>;

    create(optsOrCallback?: any, callback?: () => void): Promise<NewAccountSummary>;

    createBrand(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BrandsResponse>;

    createCustomField(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<CustomFields>;

    createPermissionProfile(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<PermissionProfile>;

    deleteBrand(accountId: string, brandId: string, callback?: () => void): Promise<void>;

    deleteBrandLogoByType(accountId: string, brandId: string, logoType: string, callback?: () => void): Promise<void>;

    deleteBrands(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BrandsResponse>;

    deleteCaptiveRecipient(
        accountId: string,
        recipientPart: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CaptiveRecipientInformation>;

    deleteCustomField(
        accountId: string,
        customFieldId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<void>;

    deleteENoteConfiguration(accountId: string, callback?: () => void): Promise<void>;

    deletePermissionProfile(
        accountId: string,
        permissionProfileId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<void>;

    getAccountIdentityVerification(
        accountId: string,
        callback?: () => void,
    ): Promise<AccountIdentityVerificationResponse>;

    getAccountInformation(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<AccountInformation>;

    getAccountTabSettings(accountId: string, callback?: () => void): Promise<TabAccountSettings>;

    getAllPaymentGatewayAccounts(accountId: string, callback?: () => void): Promise<PaymentGatewayAccountsInfo>;

    getBillingCharges(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BillingChargeResponse>;

    getBrand(accountId: string, brandId: string, optsOrCallback?: any, callback?: () => void): Promise<Brand>;

    getBrandExportFile(accountId: string, brandId: string, callback?: () => void): Promise<void>;

    getBrandLogoByType(accountId: string, brandId: string, logoType: string, callback?: () => void): Promise<object>;

    getBrandResources(accountId: string, brandId: string, callback?: () => void): Promise<BrandResourcesList>;

    getBrandResourcesByContentType(
        accountId: string,
        brandId: string,
        resourceContentType: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<void>;

    getConsumerDisclosure(accountId: string, langCode: string, callback?: () => void): Promise<ConsumerDisclosure>;

    getConsumerDisclosureDefault(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ConsumerDisclosure>;

    getENoteConfiguration(accountId: string, callback?: () => void): Promise<ENoteConfiguration>;

    getEnvelopePurgeConfiguration(accountId: string, callback?: () => void): Promise<EnvelopePurgeConfiguration>;

    getFavoriteTemplates(accountId: string, callback?: () => void): Promise<FavoriteTemplatesInfo>;

    getNotificationDefaults(accountId: string, callback?: () => void): Promise<NotificationDefaults>;

    getPasswordRules(accountId: string, callback?: () => void): Promise<AccountPasswordRules>;

    getPasswordRules_0(callback?: () => void): Promise<UserPasswordRules>;

    getPermissionProfile(
        accountId: string,
        permissionProfileId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<PermissionProfile>;

    getProvisioning(callback?: () => void): Promise<ProvisioningInformation>;

    getSupportedLanguages(accountId: string, callback?: () => void): Promise<SupportedLanguages>;

    getWatermark(accountId: string, callback?: () => void): Promise<Watermark>;

    getWatermarkPreview(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<Watermark>;

    listBrands(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BrandsResponse>;

    listCustomFields(accountId: string, callback?: () => void): Promise<CustomFields>;

    listPermissions(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<PermissionProfileInformation>;

    listRecipientNamesByEmail(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<RecipientNamesResponse>;

    listSettings(accountId: string, callback?: () => void): Promise<AccountSettingsInformation>;

    listSignatureProviders(accountId: string, callback?: () => void): Promise<AccountSignatureProviders>;

    listUnsupportedFileTypes(accountId: string, callback?: () => void): Promise<FileTypeList>;

    unFavoriteTemplate(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<FavoriteTemplatesInfo>;

    updateAccountTabSettings(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<TabAccountSettings>;

    updateBrand(accountId: string, brandId: string, optsOrCallback?: any, callback?: () => void): Promise<Brand>;

    updateBrandLogoByType(
        logoFileBytes: Blob,
        accountId: string,
        brandId: string,
        logoType: string,
        callback?: () => void,
    ): Promise<void>;

    updateBrandResourcesByContentType(
        accountId: string,
        brandId: string,
        resourceContentType: string,
        callback?: () => void,
    ): Promise<BrandResources>;

    updateConsumerDisclosure(
        accountId: string,
        langCode: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ConsumerDisclosure>;

    updateCustomField(
        accountId: string,
        customFieldId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CustomFields>;

    updateENoteConfiguration(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ENoteConfiguration>;

    updateEnvelopePurgeConfiguration(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopePurgeConfiguration>;

    updateFavoriteTemplate(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<FavoriteTemplatesInfo>;

    updateNotificationDefaults(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<NotificationDefaults>;

    updatePasswordRules(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<AccountPasswordRules>;

    updatePermissionProfile(
        accountId: string,
        permissionProfileId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<PermissionProfile>;

    updateSettings(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<void>;

    updateWatermark(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<Watermark>;
}

export class AuthenticationApi {
    constructor(apiClient: ApiClient);

    deleteSocialLogin(accountId: string, userId: string, optsOrCallback?: any, callback?: () => void): Promise<void>;

    getOAuthToken(callback?: () => void): Promise<OauthAccess>;

    listSocialLogins(accountId: string, userId: string, callback?: () => void): Promise<UserSocialIdResult>;

    login(optsOrCallback?: any, callback?: () => void): Promise<LoginInformation>;

    revokeOAuthToken(callback?: () => void): Promise<void>;

    updatePassword(loginPart: string, optsOrCallback?: any, callback?: () => void): Promise<void>;

    updateSocialLogin(accountId: string, userId: string, optsOrCallback?: any, callback?: () => void): Promise<void>;
}

export class BillingApi {
    constructor(apiClient: ApiClient);

    getBillingPlan(billingPlanId: string, callback?: () => void): Promise<BillingPlanResponse>;

    getCreditCardInfo(accountId: string, callback?: () => void): Promise<CreditCardInformation>;

    getDowngradeRequestBillingInfo(
        accountId: string,
        callback?: () => void,
    ): Promise<DowngradRequestBillingInfoResponse>;

    getInvoice(accountId: string, invoiceId: string, callback?: () => void): Promise<BillingInvoice>;

    getPayment(accountId: string, paymentId: string, callback?: () => void): Promise<BillingPaymentItem>;

    getPlan(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<AccountBillingPlanResponse>;

    listBillingPlans(callback?: () => void): Promise<BillingPlansResponse>;

    listInvoices(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BillingInvoicesResponse>;

    listInvoicesPastDue(accountId: string, callback?: () => void): Promise<BillingInvoicesSummary>;

    listPayments(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BillingPaymentsResponse>;

    makePayment(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BillingPaymentResponse>;

    purchaseEnvelopes(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<void>;

    updateDowngradeAccountBillingPlan(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DowngradePlanUpdateResponse>;

    updatePlan(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BillingPlanUpdateResponse>;
}

export class BulkEnvelopesApi {
    constructor(apiClient: ApiClient);

    createBulkSendList(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BulkSendingList>;

    createBulkSendRequest(
        accountId: string,
        bulkSendListId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BulkSendResponse>;

    createBulkSendTestRequest(
        accountId: string,
        bulkSendListId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BulkSendTestResponse>;

    deleteBulkSendList(
        accountId: string,
        bulkSendListId: string,
        callback?: () => void,
    ): Promise<BulkSendingListSummaries>;

    deleteRecipients(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<BulkRecipientsUpdateResponse>;

    get(accountId: string, batchId: string, optsOrCallback?: any, callback?: () => void): Promise<BulkEnvelopeStatus>;

    getBulkSendList(accountId: string, bulkSendListId: string, callback?: () => void): Promise<BulkSendingList>;

    getBulkSendLists(accountId: string, callback?: () => void): Promise<BulkSendingListSummaries>;

    getRecipients(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BulkRecipientsResponse>;

    list(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BulkEnvelopesResponse>;

    updateBulkSendList(
        accountId: string,
        bulkSendListId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BulkSendingList>;

    updateRecipients(
        bulkRecipientsRequest: Blob,
        accountId: string,
        envelopeId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<BulkRecipientsSummaryResponse>;
}

export class CloudStorageApi {
    constructor(apiClient: ApiClient);

    createProvider(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CloudStorageProviders>;

    deleteProvider(
        accountId: string,
        userId: string,
        serviceId: string,
        callback?: () => void,
    ): Promise<CloudStorageProviders>;

    deleteProviders(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CloudStorageProviders>;

    getProvider(
        accountId: string,
        userId: string,
        serviceId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CloudStorageProviders>;

    list(
        accountId: string,
        userId: string,
        serviceId: string,
        folderId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ExternalFolder>;

    listFolders(
        accountId: string,
        userId: string,
        serviceId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ExternalFolder>;

    listProviders(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CloudStorageProviders>;
}

export class CommentsApi {
    constructor(apiClient: ApiClient);

    createEnvelopeComments(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CommentHistoryResult>;

    getCommentsTranscript(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<object>;
}

export class ConnectApi {
    constructor(apiClient: ApiClient);

    createConfiguration(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ConnectCustomConfiguration>;

    deleteConfiguration(accountId: string, connectId: string, callback?: () => void): Promise<void>;

    deleteEventFailureLog(accountId: string, failureId: string, callback?: () => void): Promise<void>;

    deleteEventLog(accountId: string, logId: string, callback?: () => void): Promise<void>;

    deleteEventLogs(accountId: string, callback?: () => void): Promise<void>;

    deleteMobileNotifiers(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<MobileNotifierConfigurationInformation>;

    getConfiguration(accountId: string, connectId: string, callback?: () => void): Promise<ConnectConfigResults>;

    getEventLog(accountId: string, logId: string, optsOrCallback?: any, callback?: () => void): Promise<ConnectLog>;

    listConfigurations(accountId: string, callback?: () => void): Promise<ConnectConfigResults>;

    listEventFailureLogs(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<ConnectLogs>;

    listEventLogs(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<ConnectLogs>;

    listMobileNotifiers(accountId: string, callback?: () => void): Promise<MobileNotifierConfigurationInformation>;

    listTests(accountId: string, connectId: string, callback?: () => void): Promise<ResourceInformation>;

    listUsers(
        accountId: string,
        connectId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<IntegratedUserInfoList>;

    retryEventForEnvelope(accountId: string, envelopeId: string, callback?: () => void): Promise<ConnectFailureResults>;

    retryEventForEnvelopes(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ConnectFailureResults>;

    updateConfiguration(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ConnectCustomConfiguration>;

    updateMobileNotifiers(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<MobileNotifierConfigurationInformation>;
}

export class CustomTabsApi {
    constructor(apiClient: ApiClient);

    _delete(accountId: string, customTabId: string, callback?: () => void): Promise<void>;

    create(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<TabMetadata>;

    get(accountId: string, customTabId: string, callback?: () => void): Promise<TabMetadata>;

    list(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<TabMetadataList>;

    update(accountId: string, customTabId: string, optsOrCallback?: any, callback?: () => void): Promise<TabMetadata>;
}

export class DataFeedApi {
    constructor(apiClient: ApiClient);

    getDataFeedElement(accountId: string, dataFeedElementId: string, callback?: () => void): Promise<void>;
}

export class DiagnosticsApi {
    constructor(apiClient: ApiClient);

    deleteRequestLogs(callback?: () => void): Promise<void>;

    getRequestLog(requestLogId: string, callback?: () => void): Promise<object>;

    getRequestLogSettings(callback?: () => void): Promise<DiagnosticsSettingsInformation>;

    getResources(callback?: () => void): Promise<ResourceInformation>;

    getService(callback?: () => void): Promise<ServiceInformation>;

    listRequestLogs(optsOrCallback?: any, callback?: () => void): Promise<ApiRequestLogsResult>;

    updateRequestLogSettings(optsOrCallback?: any, callback?: () => void): Promise<DiagnosticsSettingsInformation>;
}

export class EmailArchiveApi {
    constructor(apiClient: ApiClient);

    createBCCEmailArchive(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<BccEmailArchive>;

    deleteBCCEmailArchive(accountId: string, bccEmailArchiveId: string, callback?: () => void): Promise<void>;

    getBCCEmailArchiveHistoryList(
        accountId: string,
        bccEmailArchiveId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BccEmailArchiveHistoryList>;

    getBCCEmailArchiveList(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BccEmailArchiveList>;
}

export class EnvelopeApplianceApi {
    constructor(apiClient: ApiClient);

    getApplianceInfo(accountId: string, envelopeId: string, callback?: () => void): Promise<DisplayApplianceInfo>;
}

export class EnvelopePurgeConfigurationApi {
    constructor(apiClient: ApiClient);

    getEnvelopePurgeConfiguration(accountId: string, callback?: () => void): Promise<EnvelopePurgeConfiguration>;

    updateEnvelopePurgeConfiguration(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopePurgeConfiguration>;
}

export class EnvelopesApi {
    constructor(apiClient: ApiClient);

    applyTemplate(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentTemplateList>;

    applyTemplateToDocument(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentTemplateList>;

    createChunkedUpload(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<ChunkedUploadResponse>;

    createConsoleView(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<ViewUrl>;

    createCorrectView(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ViewUrl>;

    createCustomFields(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CustomFields>;

    createDocumentFields(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentFieldsInformation>;

    createDocumentResponsiveHtmlPreview(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentHtmlDefinitions>;

    createDocumentTabs(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    createEditView(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ViewUrl>;

    createEmailSettings(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EmailSettings>;

    createEnvelope(accountId: string, options?: any, callback?: () => void): Promise<EnvelopeSummary>;

    createEnvelopeComments(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CommentHistoryResult>;

    createEnvelopeRecipientPreview(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ViewUrl>;

    createEnvelopeRecipientSharedView(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ViewUrl>;

    createEnvelopeTransferRules(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeTransferRuleInformation>;

    createLock(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<LockInformation>;

    createRecipient(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Recipients>;

    createRecipientProofFileLink(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<ProofServiceViewLink>;

    createRecipientProofFileResourceToken(
        tokenScopes: string,
        accountId: string,
        envelopeId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<ProofServiceResourceToken>;

    createRecipientView(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ViewUrl>;

    createResponsiveHtmlPreview(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentHtmlDefinitions>;

    createSenderView(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ViewUrl>;

    createTabs(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    deleteAttachments(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeAttachmentsResult>;

    deleteChunkedUpload(
        accountId: string,
        chunkedUploadId: string,
        callback?: () => void,
    ): Promise<ChunkedUploadResponse>;

    deleteCustomFields(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CustomFields>;

    deleteDocumentFields(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentFieldsInformation>;

    deleteDocumentPage(
        accountId: string,
        envelopeId: string,
        documentId: string,
        pageNumber: string,
        callback?: () => void,
    ): Promise<void>;

    deleteDocumentTabs(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    deleteDocuments(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeDocumentsResult>;

    deleteEmailSettings(accountId: string, envelopeId: string, callback?: () => void): Promise<EmailSettings>;

    deleteEnvelopeTransferRules(
        accountId: string,
        envelopeTransferRuleId: string,
        callback?: () => void,
    ): Promise<void>;

    deleteLock(accountId: string, envelopeId: string, callback?: () => void): Promise<LockInformation>;

    deleteRecipient(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<Recipients>;

    deleteRecipients(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Recipients>;

    deleteTabs(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    deleteTemplatesFromDocument(
        accountId: string,
        envelopeId: string,
        documentId: string,
        templateId: string,
        callback?: () => void,
    ): Promise<void>;

    getAttachment(accountId: string, envelopeId: string, attachmentId: string, callback?: () => void): Promise<void>;

    getAttachments(accountId: string, envelopeId: string, callback?: () => void): Promise<EnvelopeAttachmentsResult>;

    getChunkedUpload(
        accountId: string,
        chunkedUploadId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ChunkedUploadResponse>;

    getCommentsTranscript(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<object>;

    getConsumerDisclosure(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        langCode: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ConsumerDisclosure>;

    getConsumerDisclosureDefault(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ConsumerDisclosure>;

    getDocument(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback: DocumentOptions,
        callback?: () => void,
    ): Promise<object>;

    getDocumentPageImage(
        accountId: string,
        envelopeId: string,
        documentId: string,
        pageNumber: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<object>;

    getDocumentTabs(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    getEmailSettings(accountId: string, envelopeId: string, callback?: () => void): Promise<EmailSettings>;

    getEnvelope(accountId: string, envelopeId: string, optsOrCallback?: any, callback?: () => void): Promise<Envelope>;

    getEnvelopeDocumentHtmlDefinitions(
        accountId: string,
        envelopeId: string,
        documentId: string,
        callback?: () => void,
    ): Promise<DocumentHtmlDefinitionOriginals>;

    getEnvelopeHtmlDefinitions(
        accountId: string,
        envelopeId: string,
        callback?: () => void,
    ): Promise<DocumentHtmlDefinitionOriginals>;

    getEnvelopeTransferRules(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeTransferRuleInformation>;

    getFormData(accountId: string, envelopeId: string, callback?: () => void): Promise<EnvelopeFormData>;

    getLock(accountId: string, envelopeId: string, callback?: () => void): Promise<LockInformation>;

    getNotificationSettings(accountId: string, envelopeId: string, callback?: () => void): Promise<Notification>;

    getPageTabs(
        accountId: string,
        envelopeId: string,
        documentId: string,
        pageNumber: string,
        callback?: () => void,
    ): Promise<Tabs>;

    getPages(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<PageImages>;

    getRecipientDocumentVisibility(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<DocumentVisibilityList>;

    getRecipientInitialsImage(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<object>;

    getRecipientSignature(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<UserSignature>;

    getRecipientSignatureImage(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<object>;

    getTabsBlob(accountId: string, envelopeId: string, callback?: () => void): Promise<void>;

    getTemplateRecipientDocumentVisibility(
        accountId: string,
        templateId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<DocumentVisibilityList>;

    listAuditEvents(accountId: string, envelopeId: string, callback?: () => void): Promise<EnvelopeAuditEventResponse>;

    listCustomFields(accountId: string, envelopeId: string, callback?: () => void): Promise<CustomFieldsEnvelope>;

    listDocumentFields(
        accountId: string,
        envelopeId: string,
        documentId: string,
        callback?: () => void,
    ): Promise<DocumentFieldsInformation>;

    listDocuments(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeDocumentsResult>;

    listRecipients(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Recipients>;

    listStatus(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<EnvelopesInformation>;

    listStatusChanges(
        accountId: string,
        optsOrCallback: EnvelopesFilters,
        callback?: () => void,
    ): Promise<EnvelopesInformation>;

    listTabs(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    listTemplates(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<TemplateInformation>;

    listTemplatesForDocument(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<TemplateInformation>;

    putAttachment(
        accountId: string,
        envelopeId: string,
        attachmentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeAttachmentsResult>;

    putAttachments(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeAttachmentsResult>;

    rotateDocumentPage(
        accountId: string,
        envelopeId: string,
        documentId: string,
        pageNumber: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<void>;

    update(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeUpdateSummary>;

    updateChunkedUpload(
        accountId: string,
        chunkedUploadId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ChunkedUploadResponse>;

    updateChunkedUploadPart(
        accountId: string,
        chunkedUploadId: string,
        chunkedUploadPartSeq: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ChunkedUploadResponse>;

    updateCustomFields(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CustomFields>;

    updateDocument(
        accountId: string,
        envelopeId: string,
        documentId: string,
        callback?: () => void,
    ): Promise<EnvelopeDocument>;

    updateDocumentFields(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentFieldsInformation>;

    updateDocumentTabs(
        accountId: string,
        envelopeId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    updateDocuments(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeDocumentsResult>;

    updateEmailSettings(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EmailSettings>;

    updateEnvelopeTransferRule(
        accountId: string,
        envelopeTransferRuleId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeTransferRule>;

    updateEnvelopeTransferRules(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeTransferRuleInformation>;

    updateLock(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<LockInformation>;

    updateNotificationSettings(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Notification>;

    updateRecipientDocumentVisibility(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentVisibilityList>;

    updateRecipientInitialsImage(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<void>;

    updateRecipientSignatureImage(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<void>;

    updateRecipients(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<RecipientsUpdateSummary>;

    updateRecipientsDocumentVisibility(
        accountId: string,
        envelopeId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentVisibilityList>;

    updateTabs(
        accountId: string,
        envelopeId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    updateTabsBlob(accountId: string, envelopeId: string, callback?: () => void): Promise<void>;

    updateTemplateRecipientDocumentVisibility(
        accountId: string,
        templateId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<TemplateDocumentVisibilityList>;

    updateTemplateRecipientsDocumentVisibility(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<TemplateDocumentVisibilityList>;
}

export class FoldersApi {
    constructor(apiClient: ApiClient);

    list(
        accountId: string,
        options?: {
            include?: string;
            includeItems?: string;
            startPosition?: string;
            userFilter?: string;
        },
    ): Promise<Folders>;

    listItems(
        accountId: string,
        folderId: string,
        options?: {
            includeItems?: string;
        },
    ): Promise<FolderItemResponse>;

    moveEnvelopes(
        accountId: string,
        folderId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<FoldersResponse>;

    search(
        accountId: string,
        searchFolderId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<FolderItemResponse>;
}

export class GroupsApi {
    constructor(apiClient: ApiClient);

    createGroups(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<GroupInformation>;

    deleteBrands(
        accountId: string,
        groupId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BrandsResponse>;

    deleteGroupUsers(
        accountId: string,
        groupId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UsersResponse>;

    deleteGroups(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<GroupInformation>;

    getBrands(accountId: string, groupId: string, callback?: () => void): Promise<BrandsResponse>;

    listGroupUsers(
        accountId: string,
        groupId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UsersResponse>;

    listGroups(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<GroupInformation>;

    updateBrands(
        accountId: string,
        groupId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BrandsResponse>;

    updateGroupUsers(
        accountId: string,
        groupId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UsersResponse>;

    updateGroups(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<GroupInformation>;
}

export class NotaryApi {
    constructor(apiClient: ApiClient);

    createNotary(optsOrCallback?: any, callback?: () => void): Promise<Notary>;

    createNotaryJurisdictions(optsOrCallback?: any, callback?: () => void): Promise<NotaryJurisdiction>;

    deleteNotaryJurisdiction(jurisdictionId: string, callback?: () => void): Promise<void>;

    getNotary(optsOrCallback?: any, callback?: () => void): Promise<NotaryResult>;

    getNotaryJurisdiction(jurisdictionId: string, callback?: () => void): Promise<NotaryJurisdiction>;

    getNotaryJurisdictionSeal(jurisdictionId: string, callback?: () => void): Promise<void>;

    getNotaryJurisdictions(callback?: () => void): Promise<NotaryJurisdictionList>;

    listNotaryJournals(optsOrCallback?: any, callback?: () => void): Promise<NotaryJournalList>;

    updateNotary(optsOrCallback?: any, callback?: () => void): Promise<Notary>;

    updateNotaryJurisdiction(
        jurisdictionId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<NotaryJurisdiction>;
}

export class OrganizationsApi {
    constructor(apiClient: ApiClient);

    deleteReport(organizationId: string, reportCorrelationId: string, callback?: () => void): Promise<void>;

    getReport(organizationId: string, reportCorrelationId: string, callback?: () => void): Promise<void>;
}

export class PowerFormsApi {
    constructor(apiClient: ApiClient);

    createPowerForm(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<PowerForm>;

    deletePowerForm(accountId: string, powerFormId: string, callback?: () => void): Promise<void>;

    deletePowerForms(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<PowerFormsResponse>;

    getPowerForm(accountId: string, powerFormId: string, callback?: () => void): Promise<PowerForm>;

    getPowerFormData(
        accountId: string,
        powerFormId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<PowerFormsFormDataResponse>;

    listPowerFormSenders(
        accountId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<PowerFormSendersResponse>;

    listPowerForms(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<PowerFormsResponse>;

    updatePowerForm(
        accountId: string,
        powerFormId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<PowerForm>;
}

export class SigningGroupsApi {
    constructor(apiClient: ApiClient);

    createList(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<SigningGroupInformation>;

    deleteList(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<SigningGroupInformation>;

    deleteUsers(
        accountId: string,
        signingGroupId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<SigningGroupUsers>;

    get(accountId: string, signingGroupId: string, callback?: () => void): Promise<SigningGroup>;

    list(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<SigningGroupInformation>;

    listUsers(accountId: string, signingGroupId: string, callback?: () => void): Promise<SigningGroupUsers>;

    update(
        accountId: string,
        signingGroupId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<SigningGroup>;

    updateList(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<SigningGroupInformation>;

    updateUsers(
        accountId: string,
        signingGroupId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<SigningGroupUsers>;
}

export class TemplatesApi {
    constructor(apiClient: ApiClient);

    createCustomFields(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CustomFields>;

    createDocumentFields(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentFieldsInformation>;

    createEditView(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ViewUrl>;

    createLock(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<LockInformation>;

    createRecipients(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Recipients>;

    createTabs(
        accountId: string,
        templateId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    createTemplate(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<TemplateSummary>;

    createTemplateDocumentResponsiveHtmlPreview(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentHtmlDefinitions>;

    createTemplateDocumentTabs(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    createTemplateRecipientPreview(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ViewUrl>;

    createTemplateResponsiveHtmlPreview(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentHtmlDefinitions>;

    deleteBulkRecipients(
        accountId: string,
        templateId: string,
        recipientId: string,
        callback?: () => void,
    ): Promise<BulkRecipientsUpdateResponse>;

    deleteCustomFields(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CustomFields>;

    deleteDocumentFields(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentFieldsInformation>;

    deleteDocumentPage(
        accountId: string,
        templateId: string,
        documentId: string,
        pageNumber: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<void>;

    deleteDocuments(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<TemplateDocumentsResult>;

    deleteGroupShare(
        accountId: string,
        templateId: string,
        templatePart: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<GroupInformation>;

    deleteLock(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<LockInformation>;

    deleteRecipient(
        accountId: string,
        templateId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Recipients>;

    deleteRecipients(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Recipients>;

    deleteTabs(
        accountId: string,
        templateId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    deleteTemplateDocumentTabs(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    get(accountId: string, templateId: string, optsOrCallback?: any, callback?: () => void): Promise<EnvelopeTemplate>;

    getDocument(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<object>;

    getDocumentPageImage(
        accountId: string,
        templateId: string,
        documentId: string,
        pageNumber: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<object>;

    getDocumentTabs(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    getLock(accountId: string, templateId: string, callback?: () => void): Promise<LockInformation>;

    getNotificationSettings(accountId: string, templateId: string, callback?: () => void): Promise<Notification>;

    getPageTabs(
        accountId: string,
        templateId: string,
        documentId: string,
        pageNumber: string,
        callback?: () => void,
    ): Promise<Tabs>;

    getPages(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<PageImages>;

    getTemplateDocumentHtmlDefinitions(
        accountId: string,
        templateId: string,
        documentId: string,
        callback?: () => void,
    ): Promise<DocumentHtmlDefinitionOriginals>;

    getTemplateHtmlDefinitions(
        accountId: string,
        templateId: string,
        callback?: () => void,
    ): Promise<DocumentHtmlDefinitionOriginals>;

    listBulkRecipients(
        accountId: string,
        templateId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BulkRecipientsResponse>;

    listCustomFields(accountId: string, templateId: string, callback?: () => void): Promise<CustomFields>;

    listDocumentFields(
        accountId: string,
        templateId: string,
        documentId: string,
        callback?: () => void,
    ): Promise<DocumentFieldsInformation>;

    listDocuments(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<TemplateDocumentsResult>;

    listRecipients(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Recipients>;

    listTabs(
        accountId: string,
        templateId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    listTemplates(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<EnvelopeTemplateResults>;

    rotateDocumentPage(
        accountId: string,
        templateId: string,
        documentId: string,
        pageNumber: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<void>;

    update(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<TemplateUpdateSummary>;

    updateBulkRecipients(
        accountId: string,
        templateId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<BulkRecipientsSummaryResponse>;

    updateCustomFields(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CustomFields>;

    updateDocument(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<EnvelopeDocument>;

    updateDocumentFields(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<DocumentFieldsInformation>;

    updateDocuments(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<TemplateDocumentsResult>;

    updateGroupShare(
        accountId: string,
        templateId: string,
        templatePart: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<GroupInformation>;

    updateLock(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<LockInformation>;

    updateNotificationSettings(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Notification>;

    updateRecipients(
        accountId: string,
        templateId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<RecipientsUpdateSummary>;

    updateTabs(
        accountId: string,
        templateId: string,
        recipientId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;

    updateTemplateDocumentTabs(
        accountId: string,
        templateId: string,
        documentId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Tabs>;
}

export class TrustServiceProvidersApi {
    constructor(apiClient: ApiClient);

    getSealProviders(accountId: string, callback?: () => void): Promise<AccountSeals>;
}

export class UsersApi {
    constructor(apiClient: ApiClient);

    _delete(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<UsersResponse>;

    create(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<NewUsersSummary>;

    createSignatures(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UserSignaturesInformation>;

    deleteContactWithId(accountId: string, contactId: string, callback?: () => void): Promise<ContactUpdateResponse>;

    deleteContacts(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<ContactUpdateResponse>;

    deleteCustomSettings(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CustomSettingsInformation>;

    deleteProfileImage(accountId: string, userId: string, callback?: () => void): Promise<void>;

    deleteSignature(accountId: string, userId: string, signatureId: string, callback?: () => void): Promise<void>;

    deleteSignatureImage(
        accountId: string,
        userId: string,
        signatureId: string,
        imageType: string,
        callback?: () => void,
    ): Promise<UserSignature>;

    getContactById(
        accountId: string,
        contactId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<ContactGetResponse>;

    getInformation(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UserInformation>;

    getProfile(accountId: string, userId: string, callback?: () => void): Promise<UserProfile>;

    getProfileImage(accountId: string, userId: string, optsOrCallback?: any, callback?: () => void): Promise<object>;

    getSettings(accountId: string, userId: string, callback?: () => void): Promise<UserSettingsInformation>;

    getSignature(accountId: string, userId: string, signatureId: string, callback?: () => void): Promise<UserSignature>;

    getSignatureImage(
        accountId: string,
        userId: string,
        signatureId: string,
        imageType: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<object>;

    list(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<UserInformationList>;

    listCustomSettings(accountId: string, userId: string, callback?: () => void): Promise<CustomSettingsInformation>;

    listSignatures(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UserSignaturesInformation>;

    postContacts(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<ContactUpdateResponse>;

    putContacts(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<ContactUpdateResponse>;

    updateCustomSettings(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<CustomSettingsInformation>;

    updateProfile(accountId: string, userId: string, optsOrCallback?: any, callback?: () => void): Promise<void>;

    updateProfileImage(accountId: string, userId: string, callback?: () => void): Promise<void>;

    updateSettings(accountId: string, userId: string, optsOrCallback?: any, callback?: () => void): Promise<void>;

    updateSignature(
        accountId: string,
        userId: string,
        signatureId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UserSignature>;

    updateSignatureImage(
        accountId: string,
        userId: string,
        signatureId: string,
        imageType: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UserSignature>;

    updateSignatures(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UserSignaturesInformation>;

    updateUser(
        accountId: string,
        userId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<UserInformation>;

    updateUsers(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<UserInformationList>;
}

export class WorkspacesApi {
    constructor(apiClient: ApiClient);

    createWorkspace(accountId: string, optsOrCallback?: any, callback?: () => void): Promise<Workspace>;

    createWorkspaceFile(
        accountId: string,
        workspaceId: string,
        folderId: string,
        callback?: () => void,
    ): Promise<WorkspaceItem>;

    deleteWorkspace(accountId: string, workspaceId: string, callback?: () => void): Promise<Workspace>;

    deleteWorkspaceFolderItems(
        accountId: string,
        workspaceId: string,
        folderId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<void>;

    getWorkspace(accountId: string, workspaceId: string, callback?: () => void): Promise<Workspace>;

    getWorkspaceFile(
        accountId: string,
        workspaceId: string,
        folderId: string,
        fileId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<null>;

    listWorkspaceFilePages(
        accountId: string,
        workspaceId: string,
        folderId: string,
        fileId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<PageImages>;

    listWorkspaceFolderItems(
        accountId: string,
        workspaceId: string,
        folderId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<WorkspaceFolderContents>;

    listWorkspaces(accountId: string, callback?: () => void): Promise<WorkspaceList>;

    updateWorkspace(
        accountId: string,
        workspaceId: string,
        optsOrCallback?: any,
        callback?: () => void,
    ): Promise<Workspace>;

    updateWorkspaceFile(
        accountId: string,
        workspaceId: string,
        folderId: string,
        fileId: string,
        callback?: () => void,
    ): Promise<WorkspaceItem>;
}

export namespace ApiClient {
    namespace OAuth {
        class OAuthToken {
            constructor();

            constructFromObject(data: any, obj: any): any;
        }

        class UserInfo {
            constructor();

            constructFromObject(data: any, obj: any): any;
        }

        const BasePath: {
            DEMO: string;
            PRODUCTION: string;
            STAGE: string;
        };

        const ResponseType: {
            CODE: string;
            TOKEN: string;
        };

        const Scope: {
            EXTENDED: string;
            IMPERSONATION: string;
            SIGNATURE: string;
        };
    }
}

/**
 * object specifying the format of the string provided to a recipient in order to access an envelope.
 */
export interface AccessCodeFormat {
    /**
     * Boolean specifying whether this format configuration is required.
     */
    formatRequired?: string;
    /**
     * Metadata indicating whether the `formatRequired` property is editable.
     */
    formatRequiredMetadata?: SettingsMetadata;
    /**
     * Boolean specifying whether alphabetical characters are required in the access code string.
     */
    letterRequired?: string;
    /**
     * Metadata indicating whether the `letterRequired` property is editable.
     */
    letterRequiredMetadata?: SettingsMetadata;
    /**
     * Minimum length of the access code string.
     */
    minimumLength?: string;
    /**
     * Metadata indicating whether the `minimumLength` property is editable.
     */
    minimumLengthMetadata?: SettingsMetadata;
    /**
     * Boolean specifying whether numerical characters (0-9) are required in the access code string.
     */
    numberRequired?: string;
    /**
     * Metadata indicating whether the `numberRequired` property is editable.
     */
    numberRequiredMetadata?: SettingsMetadata;
    /**
     * Boolean specifying whether special characters are required in the access code string. The string cannot contain the special characters '<', '>', '&', or '#'.
     */
    specialCharacterRequired?: string;
    /**
     * Metadata indicating whether the `specialCharacterRequired` property is editable.
     */
    specialCharacterRequiredMetadata?: SettingsMetadata;
}
/**
 * Contains information about the address associated with the account.
 */
export interface AccountAddress {
    /**
     * The first line of the address. Maximum length: 100 characters.
     */
    address1?: string;
    /**
     * The second line of the address. Maximum length: 100 characters.
     */
    address2?: string;
    /**
     * The city associated with the address. Maximum length: 40 characters.
     */
    city?: string;
    /**
     * The country associated with the address. Maximum length: 50 characters.
     */
    country?: string;
    /**
     * The email address associated with the account.
     */
    email?: string;
    /**
     * The fax number associated with the account.
     */
    fax?: string;
    /**
     * The first name of the user associated with the account. Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * The last name of the user associated with the account.
     */
    lastName?: string;
    /**
     * The phone number associated with the account.
     */
    phone?: string;
    /**
     * The postal code associated with the address. Maximum length: 20 characters.
     */
    postalCode?: string;
    /**
     * The state or province associated with the address. Maximum length: 40 characters.
     */
    state?: string;
    /**
     * An array of supported countries associated with the account.
     */
    supportedCountries?: Country[];
}
/**
 * Contains information about an account billing plan.
 */
export interface AccountBillingPlan {
    /**
     * Reserved for DocuSign.
     */
    addOns?: AddOn[];
    /**
     * Reserved for DocuSign.
     */
    canCancelRenewal?: string;
    /**
     * When set to **true**, specifies that you can upgrade the account through the API. For GET methods, you must set the
     * `include_metadata` query parameter to **true** for this property to appear in the response.
     */
    canUpgrade?: string;
    /**
     * Specifies the ISO currency code to use for the account.
     */
    currencyCode?: string;

    downgradePlanInformation?: DowngradePlanUpdateResponse;
    /**
     * When set to **true**, customer support is provided as part of the account plan.
     */
    enableSupport?: string;
    /**
     * The number of seats (users) included in the plan.
     */
    includedSeats?: string;
    /**
     * Reserved for DocuSign.
     */
    incrementalSeats?: string;
    /**
     * When **true**, the account has been downgraded from a premium account type. Otherwise **false**.
     */
    isDowngrade?: string;
    /**
     * Any other percentage discount for the plan.
     *
     * Example: `"0.00"`
     */
    otherDiscountPercent?: string;
    /**
     * The payment cycle associated with the plan. The possible values are:
     * - `Monthly`
     * - `Annually`
     */
    paymentCycle?: string;
    /**
     * The payment method used for the billing plan. Valid values are:
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
    /**
     * The per-seat price associated with the plan.
     *
     * Example: `"456.0000"`
     */
    perSeatPrice?: string;
    /**
     * Identifies the type of plan. Examples include:
     *
     * - `business`
     * - `corporate`
     * - `enterprise`
     * - `free`
     */
    planClassification?: string;
    /**
     * Reserved for DocuSign.
     */
    planFeatureSets?: FeatureSet[];
    /**
     * DocuSign's id for the account plan.
     */
    planId?: string;
    /**
     * The name of the billing plan used for the account.
     *
     * Examples:
     *
     * - `Personal - Annual`
     * - `Unlimited Envelope Subscription - Annual Billing`
     */
    planName?: string;
    /**
     * The renewal status for the account. Valid values are:
     *
     * * `auto`: The account automatically renews.
     * * `queued_for_close`: The account will be closed at the `billingPeriodEndDate`.
     * * `queued_for_downgrade`: The account will be downgraded at the `billingPeriodEndDate`.
     *
     * **Note**: For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response.
     */
    renewalStatus?: string;
    seatDiscounts?: SeatDiscount[];
    /**
     * The support incident fee charged for each support incident.
     * Example: `"$0.00"`
     */
    supportIncidentFee?: string;
    /**
     * The support plan fee charged for this plan.
     * Example: `"$0.00"`
     */
    supportPlanFee?: string;
}
export interface AccountBillingPlanResponse {
    /**
     * The billing address for the account.
     */
    billingAddress?: AccountAddress;
    /**
     * When set to **true**, the credit card address information is the same as that returned as the billing address.
     * If false, then the billing address is considered a billing contact address, and the credit card address can be different.
     */
    billingAddressIsCreditCardAddress?: string;
    /**
     * An object that contains details about the billing plan.
     */
    billingPlan?: AccountBillingPlan;
    /**
     * A complex type that has information about the credit card used to pay for this account.
     */
    creditCardInformation?: CreditCardInformation;
    /**
     * Information about the bank that processes direct debits for the payment plan.
     */
    directDebitProcessorInformation?: DirectDebitProcessorInformation;
    downgradePlanInformation?: DowngradePlanUpdateResponse;
    /**
     * The payment method used for the billing plan. Valid values are:
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
    /**
     * Information about the entity that processes payments for the billing plan.
     */
    paymentProcessorInformation?: PaymentProcessorInformation;
    /**
     * A complex type that contains properties for entering referral and discount information.
     */
    referralInformation?: ReferralInformation;
    /**
     * A list of billing plans that the current billing plan can be rolled into.
     */
    successorPlans?: /* Contains information about a billing plan. */ BillingPlan[];
}

/**
 * The AccountBrands resource enables you to use account-level brands to customize the styles and text that recipients see.
 */
export interface AccountBrands {
    /**
     * A list of brands.
     */
    brands?: /* Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope. */ Brand[];
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    recipientBrandIdDefault?: string;
    /**
     * The brand that envelope senders see when a brand is not explicitly set.
     */
    senderBrandIdDefault?: string;
}

/**
 * Details about account consumer disclosures.
 */
export interface AccountConsumerDisclosures {
    /**
     * The GUID of the account associated with the consumer disclosure.
     */
    accountEsignId?: string;
    /**
     * When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents.
     * If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
     * **Note**: Only Admin users can change this setting.
     */
    allowCDWithdraw?: string;
    /**
     * Metadata that indicates whether the `allowCDWithdraw` property is editable.
     *
     */
    allowCDWithdrawMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If the customer needs to change their email address, this is the email address to which they should the change request.
     *
     * Maximum length: 100 characters.
     */
    changeEmail?: string;
    /**
     * Other information about the requirements for the user to change their email address.
     *
     * Maximum length: 255 characters.
     *
     * Example:
     *
     * `We do not require any other information from you to change your email address.`
     */
    changeEmailOther?: string;
    /**
     * Specifies the company name used in the disclosure. The default value is the account name.
     *
     * However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true**.
     * Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.
     *
     * **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD.
     * You must also set the value of the `useBrand` property to **true**.
     */
    companyName?: string;
    /**
     * The phone number of the company associated with the consumer disclosure, as a free-formatted string.
     */
    companyPhone?: string;
    /**
     * The cost per page if the customer requests paper copies.
     *
     * Example:
     *
     * `0.0000`
     */
    copyCostPerPage?: string;
    /**
     * Specifies the fee collection method for cases in which the customer requires paper copies of the document.
     *
     * Maximum length: 255 characters.
     *
     * Example:
     *
     * `We will bill you for any fees at that time, if any.`
     */
    copyFeeCollectionMethod?: string;
    /**
     * The email address to which the customer should send a request for copies of a document.
     *
     * Maximum length: 100 characters.
     */
    copyRequestEmail?: string;
    /**
     * When set to **true**, indicates that the consumer disclosure is a custom disclosure. The default is **false**.
     */
    custom?: string;
    /**
     * When set to **true** (default), indicates that eSign is enabled.
     */
    enableEsign?: string;
    /**
     * The final, assembled text of the Electronic Record and Signature Disclosure that includes the appropriate `companyName` and other specifics.
     * It also includes the HTML tags used for formatting.
     */
    esignAgreement?: string;
    /**
     * The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`.
     * It also includes the HTML tags used for formatting.
     *
     * **Note**: If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
     */
    esignText?: string;
    /**
     * The code for the language version of the disclosure. The following languages are supported:
     *
     * - Arabic (`ar`)
     * - Bulgarian (`bg`)
     * - Czech (`cs`)
     * - Chinese Simplified (`zh_CN`)
     * - Chinese Traditional (`zh_TW`)
     * - Croatian (`hr`)
     * - Danish (`da`)
     * - Dutch (`nl`)
     * - English US (`en`)
     * - English UK (`en_GB`)
     * - Estonian (`et`)
     * - Farsi (`fa`)
     * - Finnish (`fi`)
     * - French (`fr`)
     * - French Canadian (`fr_CA`)
     * - German (`de`)
     * - Greek (`el`)
     * - Hebrew (`he`)
     * - Hindi (`hi`)
     * - Hungarian (`hu`)
     * - Bahasa Indonesian (`id`)
     * - Italian (`it`)
     * - Japanese (`ja`)
     * - Korean (`ko`)
     * - Latvian (`lv`)
     * - Lithuanian (`lt`)
     * - Bahasa Melayu (`ms`)
     * - Norwegian (`no`)
     * - Polish (`pl`)
     * - Portuguese (`pt`)
     * - Portuguese Brazil (`pt_BR`)
     * - Romanian (`ro`)
     * - Russian (`ru`)
     * - Serbian (`sr`)
     * - Slovak (`sk`)
     * - Slovenian (`sl`)
     * - Spanish (`es`)
     * - Spanish Latin America (`es_MX`)
     * - Swedish (`sv`)
     * - Thai (`th`)
     * - Turkish (`tr`)
     * - Ukrainian (`uk`)
     * - Vietnamese (`vi`)
     *
     * Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
     */
    languageCode?: string;
    /**
     * When set to **true**, the  recipient must agree to the consumer disclosure. The value of this property is read only. It is calculated based on the account setting
     * `consumerDisclosureFrequency` and the user's actions.
     */
    mustAgreeToEsign?: string;
    /**
     * **Deprecated**.
     *
     * The `pdfId` property in the consumer_disclosure PUT request is deprecated. For security reasons going forward, any value provided in the request packet must be ignored.
     */
    pdfId?: string;
    /**
     * When set to **true**, specifies that the company name in the signing brand is used for the disclosure. Whenever an envelope is sent from the account that uses a
     * signing brand with a specified company name, that value is used in email notifications and in the signing experience.
     *
     * When set to **false** (default), or if the signing brand does not specify a company name, the account name is used instead.
     *
     * **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD.
     */
    useBrand?: string;
    /**
     * When set to **true**, specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement.
     */
    useConsumerDisclosureWithinAccount?: string;
    /**
     * Metadata that indicates whether the `useConsumerDisclosureWithinAccount` property is editable.
     *
     */
    useConsumerDisclosureWithinAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 100 characters.
     */
    withdrawAddressLine1?: string;
    /**
     * Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 100 characters.
     */
    withdrawAddressLine2?: string;
    /**
     * When set to **true** (default), indicates that the customer can withdraw consent by email.
     */
    withdrawByEmail?: string;
    /**
     * When set to **true**, indicates that the customer can withdraw consent by postal mail. The default is **false**.
     */
    withdrawByMail?: string;
    /**
     * When set to **true**, indicates that the customer can withdraw consent by phone. The default is **false**.
     */
    withdrawByPhone?: string;
    /**
     * Contains the city of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 50 characters.
     */
    withdrawCity?: string;
    /**
     * Text indicating the consequences of withdrawing consent.
     *
     * Maximum length: 255 characters.
     */
    withdrawConsequences?: string;
    /**
     * Contains the email address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 100 characters.
     */
    withdrawEmail?: string;
    /**
     * Contains any other information needed to withdraw consent.
     *
     * Maximum length: 255 characters.
     *
     * Example:
     *
     * `We do not need any other information from you to withdraw consent.`
     */
    withdrawOther?: string;
    /**
     * Contains the phone number that a customer can call to register consent withdrawal notification as a free-formatted string.
     *
     * Maximum length: 20 characters.
     */
    withdrawPhone?: string;
    /**
     * Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 20 characters.
     */
    withdrawPostalCode?: string;
    /**
     * Contains the state of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Example: `PA`
     */
    withdrawState?: string;
}

/**
 * An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administrators to group and manage envelopes.
 */
export interface AccountCustomFields {
    /**
     * An array of list custom fields.
     */
    listCustomFields?: /* This object represents a list custom field from which envelope creators and senders can select custom data. */ ListCustomField[];
    /**
     * An array of text custom fields.
     */
    textCustomFields?: /* This object represents a free text custom field where envelope creators and senders can enter custom data. */ TextCustomField[];
}

export interface AccountIdentityInputOption {
    isRequired?: boolean;
    optionName?: string;
    valueType?: string;
}

export interface AccountIdentityVerificationResponse {
    identityVerification?: /* Specifies an Identity Verification workflow. */ AccountIdentityVerificationWorkflow[];
}

/**
 * Information about a specific step in an Identity Verification workflow.
 */
export interface AccountIdentityVerificationStep {
    /**
     * The name of the Identity Verification workflow step.
     */
    name?: string;
    /**
     * Reserved for DocuSign.
     */
    type?: string;
}

/**
 * Specifies an Identity Verification workflow.
 */
export interface AccountIdentityVerificationWorkflow {
    /**
     * Text describing the purpose of the Identity Verification workflow.
     */
    defaultDescription?: string;
    /**
     * The name of the Identity Verification workflow.
     */
    defaultName?: string;

    inputOptions?: AccountIdentityInputOption[];
    /**
     * The signature provider associated with the Identity Verification workflow.
     */
    signatureProvider?: AccountSignatureProvider;
    /**
     * Workflow unique ID</br>This is the ID you must specify when setting ID Verification in an envelope using the `identityVerification`
     * [core recipient parameter](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipients#core-recipient-parameters)
     */
    workflowId?: string;
    /**
     * Reserved for DocuSign.
     */
    workflowResourceKey?: string;
}

export interface AccountInformation {
    /**
     * The GUID associated with the account ID.
     */
    accountIdGuid?: string;
    /**
     * The name on the account.
     */
    accountName?: string;
    /**
     * The list of
     * [account settings][accountsettings]
     * that determine
     * the features available for the account.
     * Note that some features are determined
     * by the plan used to create the account and cannot be overridden.
     *
     * [accountsettings]: https://developers.docusign.com/esign-rest-api/reference/Accounts/Accounts/create/#account-settings
     *
     */
    accountSettings?: /* Contains account settings information. Used in requests to set property values. Used in responses to report property values. */ AccountSettingsInformation;
    /**
     * When set to **true**, the transaction rooms feature exposed through the Workspaces API is enabled.
     */
    allowTransactionRooms?: string;
    /**
     * Number of days remaining in the current billing period.
     */
    billingPeriodDaysRemaining?: string;
    /**
     * The billing period end date in UTC timedate format.
     */
    billingPeriodEndDate?: string;
    /**
     * The number of envelopes that can be sent in the current billing period (can be unlimited).
     */
    billingPeriodEnvelopesAllowed?: string;
    /**
     * The number of envelopes that have been sent in the current billing period.
     */
    billingPeriodEnvelopesSent?: string;
    /**
     * The billing period start date in UTC timedate format.
     */
    billingPeriodStartDate?: string;
    /**
     * The type of billing method on the account. Valid values are:
     *
     * - `direct`
     * - `web`
     */
    billingProfile?: string;
    /**
     * When set to **true**, specifies that you can upgrade the account through the API. For GET methods, you must set the `include_metadata` query parameter to **true**
     * for this property to appear in the response.
     */
    canUpgrade?: string;

    connectPermission?: string;
    /**
     * The creation date of the account in UTC timedate format.
     */
    createdDate?: string;
    /**
     * The currency code for the account, based on the [ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).
     */
    currencyCode?: string;
    /**
     * ID of the plan used to create this account.
     */
    currentPlanId?: string;
    /**
     * The code that identifies the billing plan groups and plans for the new account.
     */
    distributorCode?: string;
    /**
     * URL of the landing page used to create the account.
     */
    docuSignLandingUrl?: string;

    dssValues?: {
        [name: string]: string;
    };
    /**
     * When **true**, the ability to send envelopes is blocked. When **false**, envelopes can be sent.
     */
    envelopeSendingBlocked?: string;
    /**
     * The price of sending an envelope, represented in the account's local currency.
     */
    envelopeUnitPrice?: string;
    /**
     * The Account ID displayed on the user's Account page.
     */
    externalAccountId?: string;
    /**
     *  A complex element that contains up to four Question/Answer pairs for forgotten password information for a user.
     */
    forgottenPasswordQuestionsCount?: string;
    /**
     * When **true**, the account has been downgraded from a premium account type. Otherwise **false**.
     */
    isDowngrade?: string;
    /**
     * The payment method used for the billing plan. Valid values are:
     *
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
    /**
     * Identifies the type of plan. Examples include:
     *
     * - `business`
     * - `corporate`
     * - `enterprise`
     * - `free`
     */
    planClassification?: string;
    /**
     * The date that the current plan will end.
     */
    planEndDate?: string;
    /**
     * The name of the billing plan used for the account.
     *
     * Examples:
     *
     * - `Personal - Annual`
     * - `Unlimited Envelope Subscription - Annual Billing`
     */
    planName?: string;
    /**
     * The date that the Account started using the current plan.
     */
    planStartDate?: string;

    recipientDomains?: RecipientDomain[];
    /**
     * The number of active users the account can have at one time.
     */
    seatsAllowed?: string;
    /**
     * The number of users currently active on the account.
     */
    seatsInUse?: string;
    /**
     * The status of the account content per (Title 21 CFR Part 11)
     * [https://www.fda.gov/regulatory-information/search-fda-guidance-documents/part-11-electronic-records-electronic-signatures-scope-and-application].
     * This regulation defines the criteria under which electronic records and electronic signatures are considered trustworthy.
     */
    status21CFRPart11?: string;
    /**
     * The date on which the account was suspended.
     */
    suspensionDate?: string;
    /**
     * Indicates whether the account is currently suspended.
     */
    suspensionStatus?: string;
}

export interface AccountMinimumPasswordLength {
    maximumLength?: string;
    /**
     * Minimum length of the access code string.
     */
    minimumLength?: string;
}
/**
 * A complex element that specifies notifications (expirations and reminders) for the envelope.
 */
export interface AccountNotification {
    /**
     * A complex element that specifies the expiration settings for the envelope.
     */
    expirations?: /* A complex element that specifies the expiration settings for the envelope. */ Expirations;
    /**
     * A complex element that specifies reminder settings for the envelope
     */
    reminders?: /* A complex element that specifies reminder settings for the envelope. */ Reminders;
    /**
     * When **true**, the user can override envelope expirations.
     */
    userOverrideEnabled?: string;
}

export interface AccountPasswordExpirePasswordDays {
    maximumDays?: string;

    minimumDays?: string;
}

export interface AccountPasswordLockoutDurationMinutes {
    maximumMinutes?: string;

    minimumMinutes?: string;
}

export interface AccountPasswordLockoutDurationType {
    /**
     * An array of option strings supported by this setting.
     */
    options?: string[];
}

export interface AccountPasswordMinimumPasswordAgeDays {
    maximumAge?: string;

    minimumAge?: string;
}
/**
 * Information about the number of password questions required (0 to 4) to confirm a user's identity when a user needs to reset their password.
 */
export interface AccountPasswordQuestionsRequired {
    /**
     * The maximum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or greater than `minimumQuestions`.
     */
    maximumQuestions?: string;
    /**
     * The minimum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or less than `maximumQuestions`.
     */
    minimumQuestions?: string;
}
/**
 * Contains details about the password rules for an account.
 */
export interface AccountPasswordRules {
    /**
     * When set to **true**, passwords expire. The default value is `false`.
     */
    expirePassword?: string;
    /**
     * The number of days before passwords expire. To use this property, the `expirePassword` property must be set to **true**.
     */
    expirePasswordDays?: string;
    /**
     * Metadata that indicates whether the `expirePasswordDays` property is editable.
     *
     */
    expirePasswordDaysMetadata?: AccountPasswordExpirePasswordDays;
    /**
     * The number of minutes a user is locked out of the system after three (?) failed login attempts. The default value is `2`.
     */
    lockoutDurationMinutes?: string;
    /**
     * Metadata that indicates whether the `lockoutDurationMinutes` property is editable.
     *
     */
    lockoutDurationMinutesMetadata?: AccountPasswordLockoutDurationMinutes;
    /**
     * The interval associated with the user lockout after a failed login attempt.
     *
     * Possible values are: (?????)
     *
     * - `minutes` (default)
     * - `hours`
     * - `days`
     */
    lockoutDurationType?: string;
    /**
     * Metadata that indicates whether the `lockoutDurationType` property is editable.
     *
     */
    lockoutDurationTypeMetadata?: AccountPasswordLockoutDurationType;
    /**
     * The minimum number of days after a password is set before it can be changed. This value can be `0` or more days. The default value is `0`.
     */
    minimumPasswordAgeDays?: string;
    /**
     * Metadata that indicates whether the `minimumPasswordAgeDays` property is editable.
     *
     */
    minimumPasswordAgeDaysMetadata?: AccountPasswordMinimumPasswordAgeDays;
    /**
     * The minimum number of characters in the password. This value must be a number between `6` and `15`. The default value is `6`.
     */
    minimumPasswordLength?: string;
    /**
     * Metadata that indicates whether the `minimumPasswordLength` property is editable.
     *
     */
    minimumPasswordLengthMetadata?: AccountMinimumPasswordLength;
    /**
     * When set to **true**, passwords must include a digit. The default value is `false`.
     */
    passwordIncludeDigit?: string;
    /**
     * When set to **true**, passwords must include either a digit or a special character. The default value is `false`.
     *
     * **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
     */
    passwordIncludeDigitOrSpecialCharacter?: string;
    /**
     * When set to **true**, passwords must include a lowercase letter. The default value is `false`.
     */
    passwordIncludeLowerCase?: string;
    /**
     * When set to **true**, passwords must include a special character. The default value is `false`.
     *
     * **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
     */
    passwordIncludeSpecialCharacter?: string;
    /**
     * When set to **true**, passwords must include an uppercase letter. The default value is `false`.
     */
    passwordIncludeUpperCase?: string;
    /**
     * The type of password strength. Possible values are:
     *
     * - `basic`: The minimum password length is 6 characters with no other password requirements.
     * - `medium`: The minimum password length is 7 characters. Passwords must also have one uppercase letter, one lowercase letter, and one number or special character.
     * - `strong`: The minimum password length is 9 characters. Passwords must also have one uppercase letter, one lowercase letter, one number, and one special character.
     * - `custom`: This option enables you to customize password requirements, including the following properties:
     *
     *    - `minimumPasswordLength`
     *    - `minimumPasswordAgeDays`
     *    - `passwordIncludeDigit`
     *    - `passwordIncludeDigitOrSpecialCharacter`
     *    - `passwordIncludeLowerCase`
     *    - `passwordIncludeSpecialCharacter`
     *    - `passwordIncludeUpperCase`
     *    - `questionsRequired`
     */
    passwordStrengthType?: string;
    /**
     * Metadata that indicates whether the `passwordStrengthType` property is editable.
     *
     */
    passwordStrengthTypeMetadata?: AccountPasswordStrengthType;
    /**
     * The number of security questions required to confirm the user’s identity before the user can reset their password. The default value is `0`.
     */
    questionsRequired?: string;
    /**
     * Metadata that indicates whether the `questionsRequired` property is editable.
     *
     */
    questionsRequiredMetadata?: /* Information about the number of password questions required (0 to 4) to confirm a user's identity when a user needs to reset their password.
     */ AccountPasswordQuestionsRequired;
}

export interface AccountPasswordStrengthType {
    /**
     * An array of option strings supported by this setting.
     */
    options?: AccountPasswordStrengthTypeOption[];
}

export interface AccountPasswordStrengthTypeOption {
    /**
     * Minimum length of the access code string.
     */
    minimumLength?: string;

    name?: string;
    /**
     * When set to **true**, passwords must include a digit. The default value is `false`.
     */
    passwordIncludeDigit?: string;
    /**
     * When set to **true**, passwords must include either a digit or a special character. The default value is `false`.
     *
     * **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
     */
    passwordIncludeDigitOrSpecialCharacter?: string;
    /**
     * When set to **true**, passwords must include a lowercase letter. The default value is `false`.
     */
    passwordIncludeLowerCase?: string;
    /**
     * When set to **true**, passwords must include a special character. The default value is `false`.
     *
     * **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
     */
    passwordIncludeSpecialCharacter?: string;
    /**
     * When set to **true**, passwords must include an uppercase letter. The default value is `false`.
     */
    passwordIncludeUpperCase?: string;
}
/**
 * The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
 */
export interface AccountPermissionProfiles {
    /**
     * The username of the user who last modified the permission profile.
     */
    modifiedByUsername?: string;
    /**
     * The date and time when the permission profile was last modified.
     */
    modifiedDateTime?: string;
    /**
     * The ID of the permission profile. Possible values include:
     *
     * - `2301416` (for the `DocuSign Viewer` profile)
     * - `2301415` (for the `DocuSign Sender` profile)
     * - `2301414` (for the `Account Administrator` profile)
     *
     * In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
     */
    permissionProfileId?: string;
    /**
     * The name of the account permission profile.
     *
     * Example: `Account Administrator`
     */
    permissionProfileName?: string;
    /**
     * This object specifies the permissions that are associated with the account permission profile.
     */
    settings?: /* This object defines account permissions for users who are associated with the account permission profile.  */ AccountRoleSettings;
    /**
     * The total number of users in the group associated with the account permission profile.
     */
    userCount?: string;
    /**
     * A list of user objects containing information about the users who are associated with the account permission profile.
     */
    users?: UserInformation[];
}
/**
 * This object defines account permissions for users who are associated with the account permission profile.
 */
export interface AccountRoleSettings {
    /**
     * When **true**, users have full administrative access to the account.
     */
    allowAccountManagement?: string;
    /**
     * Metadata that indicates whether the `allowAccountManagement` property is editable.
     *
     */
    allowAccountManagementMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can manage documents by using the API.
     */
    allowApiAccess?: string;
    /**
     * Metadata that indicates whether the `allowApiAccess` property is editable.
     *
     */
    allowApiAccessMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can access the account by using the eSignature API.
     */
    allowApiAccessToAccount?: string;
    /**
     * Metadata that indicates whether the `allowApiAccessToAccount` property is editable.
     *
     */
    allowApiAccessToAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can send envelopes on behalf of others.
     */
    allowApiSendingOnBehalfOfOthers?: string;
    /**
     * Metadata that indicates whether the `allowApiSendingOnBehalfOfOthers` property is editable.
     *
     */
    allowApiSendingOnBehalfOfOthersMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users may specify sequential signing recipients when they send documents by using the API.
     */
    allowApiSequentialSigning?: string;
    /**
     * Metadata that indicates whether the `allowApiSequentialSigning` property is editable.
     *
     */
    allowApiSequentialSigningMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     *  If **true**, auto-tagging is enabled for the account.
     */
    allowAutoTagging?: string;
    /**
     * Metadata that indicates whether the `allowAutoTagging` property is editable.
     */
    allowAutoTaggingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, bulk sending is enabled for users.
     */
    allowBulkSending?: string;
    /**
     * Metadata that indicates whether the `allowBulkSending` property is editable.
     *
     */
    allowBulkSendingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the DocuSign Desktop Client is enabled for users.
     *
     */
    allowDocuSignDesktopClient?: string;
    /**
     * Metadata that indicates whether the `allowDocuSignDesktopClient` property is editable.
     *
     */
    allowDocuSignDesktopClientMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies the level of access that users have to the account's address book. Valid values are:
     *
     * - `personal`
     * - `useShared`
     * - `usePersonalAndShared`
     * - `personalAndShared`
     *
     */
    allowedAddressBookAccess?: string;
    /**
     * Metadata that indicates whether the `allowedAddressBookAccess` property is editable.
     *
     */
    allowedAddressBookAccessMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    allowedClickwrapsAccess?: string;

    allowedClickwrapsAccessMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies the level of access that users have to account templates. Valid values are:
     *
     * - `none`
     * - `use`
     * - `create`
     * - `share`
     */
    allowedTemplateAccess?: string;
    /**
     * Metadata that indicates whether the `allowedTemplateAccess` property is editable.
     *
     */
    allowedTemplateAccessMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can be recipients of envelopes transferred to them by administrators of other accounts.
     */
    allowedToBeEnvelopeTransferRecipient?: string;
    /**
     * Metadata that indicates whether the `allowedToBeEnvelopeTransferRecipient` property is editable.
     *
     */
    allowedToBeEnvelopeTransferRecipientMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can send envelopes.
     */
    allowEnvelopeSending?: string;
    /**
     * Metadata that indicates whether the `allowEnvelopeSending` property is editable.
     *
     */
    allowEnvelopeSendingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can add electronic seal ([eSeal](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals)) recipients.
     */
    allowESealRecipients?: string;
    /**
     * Metadata that indicates whether the `allowESealRecipients` property is editable.
     */
    allowESealRecipientsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, PowerForm Administrators can access all of the PowerForm envelopes associated with the account.
     */
    allowPowerFormsAdminToAccessAllPowerFormEnvelopes?: string;
    /**
     * Metadata that indicates whether the `allowPowerFormsAdminToAccessAllPowerFormEnvelopes` property is editable.
     */
    allowPowerFormsAdminToAccessAllPowerFormEnvelopesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, senders can set the language of the email that is sent to recipients.
     */
    allowSendersToSetRecipientEmailLanguage?: string;
    /**
     * Metadata that indicates whether the `allowSendersToSetRecipientEmailLanguage` property is editable.
     *
     */
    allowSendersToSetRecipientEmailLanguageMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can add requests for attachments from signers.
     */
    allowSignerAttachments?: string;
    /**
     * Metadata that indicates whether the `allowSignerAttachments` property is editable.
     *
     */
    allowSignerAttachmentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, senders can include supplemental documents.
     */
    allowSupplementalDocuments?: string;
    /**
     * Metadata that indicates whether the `allowSupplementalDocuments` property is editable.
     */
    allowSupplementalDocumentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the tagger palette is visible during the sending and correct flows and users can add tabs to documents.
     */
    allowTaggingInSendAndCorrect?: string;
    /**
     * Metadata that indicates whether the `allowTaggingInSendAndCorrect` property is editable.
     *
     */
    allowTaggingInSendAndCorrectMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    allowVaulting?: string;
    /**
     * Reserved for DocuSign.
     */
    allowVaultingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can override the default account setting that controls whether recipients can sign documents on paper.
     * The option to overrride this setting occurs during the sending process on a per-envelope basis.
     */
    allowWetSigningOverride?: string;
    /**
     * Metadata that indicates whether the `allowWetSigningOverride` property is editable.
     *
     */
    allowWetSigningOverrideMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    canCreateWorkspaces?: string;
    /**
     * Reserved for DocuSign.
     */
    canCreateWorkspacesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users cannot upload documents.
     */
    disableDocumentUpload?: string;
    /**
     * Metadata that indicates whether the `disableDocumentUpload` property is editable.
     *
     */
    disableDocumentUploadMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can access the **Other Actions** menu.
     */
    disableOtherActions?: string;
    /**
     * Metadata that indicates whether the `disableOtherActions` property is editable.
     *
     */
    disableOtherActionsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, API request logging is enabled.
     *
     * **Note**: Logging limits apply.
     */
    enableApiRequestLogging?: string;
    /**
     * Metadata that indicates whether the `enableApiRequestLogging` property is editable.
     *
     */
    enableApiRequestLoggingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, senders are notified when recipients view the documents that they send.
     */
    enableRecipientViewingNotifications?: string;
    /**
     * Metadata that indicates whether the `enableRecipientViewingNotifications` property is editable.
     *
     */
    enableRecipientViewingNotificationsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the sequential signing user export interface is enabled.
     */
    enableSequentialSigningInterface?: string;
    /**
     * Metadata that indicates whether the `enableSequentialSigningInterface` property is editable.
     *
     */
    enableSequentialSigningInterfaceMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    enableTransactionPointIntegration?: string;
    /**
     * Reserved for DocuSign.
     */
    enableTransactionPointIntegrationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The PowerForms rights associated with the account permission profile. Valid values are:
     *
     * - `none`
     * - `user`
     * - `admin`
     *
     */
    powerFormRole?: string;
    /**
     * Metadata that indicates whether the `powerFormRole` property is editable.
     *
     */
    powerFormRoleMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, senders receive emails about completed, self-signed documents that contain links to the completed documents instead of PDF attachments.
     */
    receiveCompletedSelfSignedDocumentsAsEmailLinks?: string;
    /**
     * Metadata that indicates whether the `receiveCompletedSelfSignedDocumentsAsEmailLinks` property is editable.
     *
     */
    receiveCompletedSelfSignedDocumentsAsEmailLinksMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    signingUiVersionMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, senders can require recipients to accept supplemental documents.
     */
    supplementalDocumentsMustAccept?: string;
    /**
     * Metadata that indicates whether the `supplementalDocumentsMustAccept` property is editable.
     *
     */
    supplementalDocumentsMustAcceptMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, senders can require recipients to read supplemental documents.
     */
    supplementalDocumentsMustRead?: string;
    /**
     * Metadata that indicates whether the `supplementalDocumentsMustRead` property is editable.
     *
     */
    supplementalDocumentsMustReadMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users can require recipients to view supplemental documents.
     */
    supplementalDocumentsMustView?: string;
    /**
     * Metadata that indicates whether the `supplementalDocumentsMustView` property is editable.
     *
     */
    supplementalDocumentsMustViewMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    useNewDocuSignExperienceInterface?: string;
    /**
     * Reserved for DocuSign.
     */
    useNewDocuSignExperienceInterfaceMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    useNewSendingInterface?: string;
    /**
     * Reserved for DocuSign.
     */
    useNewSendingInterfaceMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    vaultingMode?: string;
    /**
     * Reserved for DocuSign.
     */
    vaultingModeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}

export interface AccountSealProviders {
    /**
     * A list of electronic seals to apply to documents.
     */
    seals?: SealIdentifier[];
}

export interface AccountSeals {
    /**
     * A list of electronic seals to apply to documents.
     */
    seals?: SealIdentifier[];
}
/**
 * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
 */
export interface AccountSettingsInformation {
    /**
     * Format of the string provided to a recipient in order to access an envelope.
     */
    accessCodeFormat?: /* object specifying the format of the string provided to a recipient in order to access an envelope. */ AccessCodeFormat;
    /**
     * UTC date/time format for the account.
     */
    accountDateTimeFormat?: string;
    /**
     * Metadata that indicates whether the `accountDateTimeFormat` property is editable.
     */
    accountDateTimeFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The name on the account.
     */
    accountName?: string;
    /**
     * Metadata that indicates whether the `accountName` property is editable.
     */
    accountNameMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * An object that specifies notifications (expirations and reminders) for the envelope.
     */
    accountNotification?: /* A complex element that specifies notifications (expirations and reminders) for the envelope. */ AccountNotification;
    /**
     * An object that defines the settings to use in the UI.
     */
    accountUISettings?: /* An object that defines the options that are available to non-administrators in the UI. */ AccountUISettings;
    /**
     * When set to **true**, [Signature Adoption Configuration](https://support.docusign.com/en/guides/ndse-admin-guide-signature-adopt-config) is enabled.
     *
     * **Note**: Only Admin users can change this setting.
     */
    adoptSigConfig?: string;
    /**
     * Metadata that indicates whether the `adoptSigConfig` property is editable.
     *
     */
    adoptSigConfigMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**, the Advanced Correction feature is enabled for this account.
     */
    advancedCorrect?: string;
    /**
     * Metadata that indicates whether the `advancedCorrect` property is editable.
     *
     */
    advancedCorrectMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the configured [Access Code Format](https://developers.docusign.com/esign-rest-api/reference/Accounts/Accounts/get#accessCodeFormat)
     * page is enabled for account administrators.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowAccessCodeFormat?: string;
    /**
     * Metadata that indicates whether the `allowAccessCodeFormat` property is editable.
     *
     */
    allowAccessCodeFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the account can be managed on a per-user basis.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowAccountManagementGranular?: string;
    /**
     * Metadata that indicates whether the `allowAccountManagementGranular` property is editable.
     *
     */
    allowAccountManagementGranularMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether member names can be changed in the account.
     */
    allowAccountMemberNameChange?: string;
    /**
     * Metadata that indicates whether the `allowAccountMemberNameChange` property is editable.
     *
     */
    allowAccountMemberNameChangeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, [Conditional Routing](https://support.docusign.com/en/guides/ndse-user-guide-conditional-recipients) is enabled for the account as part of
     * DocuSign's Advanced Recipient Routing feature.
     */
    allowAdvancedRecipientRoutingConditional?: string;
    /**
     * Metadata that indicates whether the ` allowAdvancedRecipientRoutingConditional` property is editable.
     */
    allowAdvancedRecipientRoutingConditionalMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    /**
     *   If **true**, an agent recipient can change the email addresses of recipients later in the signing order.
     *
     */
    allowAgentNameEmailEdit?: string;
    /**
     * Metadata that indicates whether the `allowAgentNameEmailEdit` property is editable.
     *
     */
    allowAgentNameEmailEditMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    allowAgreementActions?: string;
    /**
     * Metadata about the `allowAgreementActions` property.
     */
    allowAgreementActionsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     *   If **true**, auto-navigation can be enabled for this account.
     *
     */
    allowAutoNavSettings?: string;
    /**
     * Metadata that indicates whether the `allowAutoNavSettings` property is editable.
     *
     */
    allowAutoNavSettingsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     *  If **true**, auto-tagging is enabled for the account.
     */
    allowAutoTagging?: string;
    /**
     * Metadata that indicates whether the `allowAutoTagging` property is editable.
     */
    allowAutoTaggingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, bulk send functionality is enabled for the account.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowBulkSend?: string;
    /**
     * Metadata that indicates whether the `allowBulkSend` property is editable.
     *
     */
    allowBulkSendMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents.
     * If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure.
     * The default value is **false**.
     * **Note**: Only Admin users can change this setting.
     */
    allowCDWithdraw?: string;
    /**
     * Metadata that indicates whether the `allowCDWithdraw` property is editable.
     *
     */
    allowCDWithdrawMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether a Connect configuration can use HTTP listeners.
     */
    allowConnectHttpListenerConfigs?: string;
    /**
     * Reserved for DocuSign.
     */
    allowConnectSendFinishLater?: string;
    /**
     * Metadata that indicates whether the `allowConnectSendFinishLater` property is editable.
     *
     */
    allowConnectSendFinishLaterMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * the account has the ability to change the
     * [Consumer Disclosure](https://support.docusign.com/en/guides/ndse-admin-guide-legal-disclosure)
     * setting.
     *
     */
    allowConsumerDisclosureOverride?: string;
    /**
     * Metadata that indicates whether the `allowConsumerDisclosureOverride` property is editable.
     *
     */
    allowConsumerDisclosureOverrideMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, senders can download form data from the envelopes that they send.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowDataDownload?: string;
    /**
     * Metadata that indicates whether the `allowDataDownload` property is editable.
     *
     */
    allowDataDownloadMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether disclosure documents can be included in envelopes.
     */
    allowDocumentDisclosures?: string;
    /**
     * Metadata that indicates whether the `allowDocumentDisclosures` property is editable.
     *
     */
    allowDocumentDisclosuresMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether notifications can include the envelope's signed document.
     */
    allowDocumentsOnSignedEnvelopes?: string;
    /**
     * Metadata that indicates whether the `allowDocumentsOnSignedEnvelopes` property is editable.
     *
     */
    allowDocumentsOnSignedEnvelopesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the [Document Visibility](https://support.docusign.com/guides/ndse-user-guide-document-visibility) feature is enabled for the account.
     *
     */
    allowDocumentVisibility?: string;
    /**
     * Metadata that indicates whether the `allowDocumentVisibility` property is editable.
     *
     */
    allowDocumentVisibilityMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**,
     * [eHanko stamps](https://support.docusign.com/en/guides/ndse-user-guide-manage-your-stamps)
     * are enabled.
     *
     */
    allowEHankoStamps?: string;
    /**
     * Metadata that indicates whether the `allowEHankoStamps` property is editable.
     *
     */
    allowEHankoStampsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies whether eNote eOriginal integration is enabled.
     *
     */
    allowENoteEOriginal?: string;
    /**
     * Metadata that indicates whether the `allowENoteEOriginal` property is editable.
     *
     */
    allowENoteEOriginalMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the envelope correction feature is enabled.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowEnvelopeCorrect?: string;
    /**
     * Metadata that indicates whether the `allowEnvelopeCorrect` property is editable.
     *
     */
    allowEnvelopeCorrectMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies whether the account is able to
     * manage rules that [transfer ownership](https://support.docusign.com/en/guides/ndse-admin-guide-custody-transfer)
     * of envelopes within the same account.
     *
     *
     *
     *
     */
    allowEnvelopeCustodyTransfer?: string;
    /**
     * Metadata that indicates whether the `allowEnvelopeCustodyTransfer` property is editable.
     *
     */
    allowEnvelopeCustodyTransferMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies whether
     * [envelope custom fields](https://support.docusign.com/en/guides/ndse-user-guide-manage-custom-fields)
     * are enabled.
     *
     */
    allowEnvelopeCustomFields?: string;
    /**
     * Metadata that indicates whether the `allowEnvelopeCustomFields` property is editable.
     *
     */
    allowEnvelopeCustomFieldsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, envelope publishing reporting is enabled.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowEnvelopePublishReporting?: string;
    /**
     * Metadata that indicates whether the `allowEnvelopePublishReporting` property is editable.
     *
     */
    allowEnvelopePublishReportingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies whether the account has access to reports.
     *
     */
    allowEnvelopeReporting?: string;
    /**
     * Metadata that indicates whether the `allowEnvelopeReporting` property is editable.
     *
     */
    allowEnvelopeReportingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If the account plan does not include calculated fields, this setting allows an account to use them.
     *
     *
     */
    allowExpression?: string;
    /**
     * Metadata that indicates whether the `allowExpression` property is editable.
     *
     */
    allowExpressionMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, signers are required to use Express Digital Signatures.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowExpressSignerCertificate?: string;
    /**
     * Metadata that indicates whether the `allowExpressSignerCertificate` property is editable.
     *
     */
    allowExpressSignerCertificateMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether resource files can be used for extended sending.
     */
    allowExtendedSendingResourceFile?: string;
    /**
     * Metadata that indicates whether the `allowExtendedSendingResourceFile` property is editable.
     *
     */
    allowExtendedSendingResourceFileMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account can
     * configure and use signature pads for their recipients.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowExternalSignaturePad?: string;
    /**
     * Metadata that indicates whether the `allowExternalSignaturePad` property is editable.
     *
     */
    allowExternalSignaturePadMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, IDV Level 1 is allowed. The default value is **false**.
     */
    allowIDVLevel1?: string;
    /**
     * Metadata that indicates whether the `allowIDVLevel1` property is editable.
     */
    allowIDVLevel1Metadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    allowIDVPlatform?: string;
    /**
     * Metadata that indicates whether the `allowIDVPlatform` property is editable.
     */
    allowIDVPlatformMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account administrator can enable in-person signing.
     *
     * **Note**: Only SysAdmin users can change this setting.
     *
     *
     */
    allowInPerson?: string;
    /**
     * Metadata that indicates whether the `allowInPerson` property is editable.
     *
     */
    allowInPersonMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, [Managed Stamps](https://support.docusign.com/en/guides/ndse-admin-guide-managed-stamps) are enabled.
     */
    allowManagedStamps?: string;
    /**
     * Metadata that indicates whether the `allowManagedStamps` property is editable.
     *
     */
    allowManagedStampsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the Document Markup feature is enabled.
     *
     * **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
     */
    allowMarkup?: string;
    /**
     * Metadata that indicates whether the `allowMarkup` property is editable.
     *
     */
    allowMarkupMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, account users can set their own
     * [time zone settings](https://support.docusign.com/en/articles/How-do-I-modify-time-zone-settings-for-my-account).
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowMemberTimeZone?: string;
    /**
     * Metadata that indicates whether the `allowMemberTimeZone` property is editable.
     *
     */
    allowMemberTimeZoneMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account can use
     * [merge fields](https://support.docusign.com/en/guides/dfs-user-guide-merge-fields-user)
     * with DocuSign for Salesforce.
     *
     */
    allowMergeFields?: string;
    /**
     * Metadata that indicates whether the `allowMergeFields` property is editable.
     *
     */
    allowMergeFieldsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies whether the account supports multiple brands.
     *
     */
    allowMultipleBrandProfiles?: string;
    /**
     * Metadata that indicates whether the `allowMultipleBrandProfiles` property is editable.
     *
     */
    allowMultipleBrandProfilesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, recipients can
     * upload multiple signer attachments with a single attachment.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowMultipleSignerAttachments?: string;
    /**
     * Metadata that indicates whether the `allowMultipleSignerAttachments` property is editable.
     *
     */
    allowMultipleSignerAttachmentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies whether users can use
     * international numbers
     * for phone authentication.
     *
     */
    allowNonUSPhoneAuth?: string;
    /**
     * Metadata that indicates whether the `allowNonUSPhoneAuth` property is editable.
     *
     */
    allowNonUSPhoneAuthMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    allowOcrOfEnvelopeDocuments?: string;

    allowOcrOfEnvelopeDocumentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * [offline signing](https://support.docusign.com/articles/Offline-access-with-the-DocuSign-Mobile-App-for-iOS-iPad-iPhone-iPod-Touch)
     * is enabled for the account.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowOfflineSigning?: string;
    /**
     * Metadata that indicates whether the `allowOfflineSigning` property is editable.
     *
     */
    allowOfflineSigningMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, senders can use OpenTrust signer certificates.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowOpenTrustSignerCertificate?: string;
    /**
     * Metadata that indicates whether the `allowOpenTrustSignerCertificate` property is editable.
     *
     */
    allowOpenTrustSignerCertificateMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether [Organization Administration](https://developers.docusign.com/orgadmin-api) is enabled for the account.
     */
    allowOrganizations?: string;
    /**
     * Metadata that indicates whether the `allowOrganizations` property is editable.
     *
     */
    allowOrganizationsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, payment processing is enabled for the account.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowPaymentProcessing?: string;
    /**
     * Metadata that indicates whether the `allowPaymentProcessing` property is editable.
     *
     */
    allowPaymentProcessingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, signers can use personal signer certificates.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowPersonalSignerCertificate?: string;
    /**
     * Metadata that indicates whether the `allowPersonalSignerCertificate` property is editable.
     *
     */
    allowPersonalSignerCertificateMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether phone authentication is enabled for the account.
     */
    allowPhoneAuthentication?: string;
    /**
     * Metadata that indicates whether the `allowPhoneAuthentication` property is editable.
     *
     */
    allowPhoneAuthenticationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether users can override phone authentication.
     */
    allowPhoneAuthOverride?: string;
    /**
     * Metadata that indicates whether the `allowPhoneAuthOverride` property is editable.
     *
     */
    allowPhoneAuthOverrideMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign. This property returns the value **false** when listing account settings. Read only.
     */
    allowPrivateSigningGroups?: string;
    /**
     * Metadata that indicates whether the `allowPrivateSigningGroups` property is editable.
     *
     */
    allowPrivateSigningGroupsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * an account administrator can to turn on reminders
     * and expiration defaults for the account.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowReminders?: string;
    /**
     * Metadata that indicates whether the `allowReminders` property is editable.
     *
     */
    allowRemindersMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * resource files can be uploaded in branding.
     *
     */
    allowResourceFileBranding?: string;
    /**
     * Metadata that indicates whether the `allowResourceFileBranding` property is editable.
     *
     */
    allowResourceFileBrandingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * account administrators can
     * specify that signers are
     * required to use SAFE-BioPharma digital signatures.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowSafeBioPharmaSignerCertificate?: string;
    /**
     * Metadata that indicates whether the `allowSafeBioPharmaSignerCertificate` property is editable.
     *
     */
    allowSafeBioPharmaSignerCertificateMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether a DocuSign Signature Appliance can be used with the account.
     */
    allowSecurityAppliance?: string;
    /**
     * Metadata that indicates whether the `allowSecurityAppliance` property is editable.
     *
     */
    allowSecurityApplianceMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * the account admin can enable the
     * Send to Certified Delivery
     * feature on the account.
     *
     */
    allowSendToCertifiedDelivery?: string;
    /**
     * Metadata that indicates whether the `allowSendToCertifiedDelivery` property is editable.
     *
     */
    allowSendToCertifiedDeliveryMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * the account admin can enable the Send to Intermediary
     * feature on the account.
     *
     */
    allowSendToIntermediary?: string;
    /**
     * Metadata that indicates whether the `allowSendToIntermediary` property is editable.
     *
     */
    allowSendToIntermediaryMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * the account can use templates.
     *
     */
    allowServerTemplates?: string;
    /**
     * Metadata that indicates whether the `allowServerTemplates` property is editable.
     *
     */
    allowServerTemplatesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    allowSetEmbeddedRecipientStartURL?: string;

    allowSetEmbeddedRecipientStartURLMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * shared tabs are enabled for the account.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowSharedTabs?: string;
    /**
     * Metadata that indicates whether the `allowSharedTabs` property is editable.
     *
     */
    allowSharedTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, Signature Stamps are enabled.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowSignatureStamps?: string;
    /**
     * Metadata that indicates whether the `allowSignatureStamps` property is editable.
     *
     */
    allowSignatureStampsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, recipients can sign documents from the home page.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowSignDocumentFromHomePage?: string;
    /**
     * Metadata that indicates whether the `allowSignDocumentFromHomePage` property is editable.
     *
     */
    allowSignDocumentFromHomePageMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the recipient of an envelope sent from this account can reassign it to another person.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    allowSignerReassign?: string;
    /**
     * Metadata that indicates whether the `allowSignerReassign` property is editable.
     *
     */
    allowSignerReassignMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, an account administrator can override the ability of an envelope recipient to reassign it to another person.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowSignerReassignOverride?: string;
    /**
     * Metadata that indicates whether the `allowSignerReassignOverride` property is editable.
     *
     */
    allowSignerReassignOverrideMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether Signing and App Extensions are allowed.
     */
    allowSigningExtensions?: string;
    /**
     * Metadata that indicates whether the `allowSigningExtensions` property is editable.
     *
     */
    allowSigningExtensionsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account allows signing groups. This setting is only shown in responses that list account settings. Read only.
     */
    allowSigningGroups?: string;
    /**
     * Metadata that indicates whether the `allowSigningGroups` property is editable.
     *
     */
    allowSigningGroupsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether the account supports radio buttons on tabs [Radio CustomTabType](https://developers.docusign.com/esign-soap-api/reference/Sending-Group/Tab).
     */
    allowSigningRadioDeselect?: string;
    /**
     * Metadata that indicates whether the `allowSigningRadioDeselect` property is editable.
     *
     */
    allowSigningRadioDeselectMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * the account administrator can enable
     * the Sign Now feature.
     *
     */
    allowSignNow?: string;
    /**
     * Metadata that indicates whether the `allowSignNow` property is editable.
     *
     */
    allowSignNowMetadata?: string;

    allowSMSDelivery?: string;

    allowSMSDeliveryMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Deprecated.
     */
    allowSocialIdLogin?: string;
    /**
     * Deprecated.
     */
    allowSocialIdLoginMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can include supplemental documents.
     */
    allowSupplementalDocuments?: string;
    /**
     * Metadata that indicates whether the `allowSupplementalDocuments` property is editable.
     */
    allowSupplementalDocumentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    allowUsersToAccessDirectory?: string;

    allowUsersToAccessDirectoryMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    allowValueInsights?: string;

    allowValueInsightsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * This property determines how template anchor tabs are applied.
     *
     * Valid values are:
     *
     * - `document`: Anchor tabs are applied only to the document that you specify.
     * - `envelope`: Anchor tabs are applied to all of the documents in the envelope associated with the template.
     *
     * **Note**: When you are using the `anchorPopulationScope` property with a Composite Template, the value `document` is supported only with a single server template
     * and a single inline template.
     *
     *
     */
    anchorPopulationScope?: string;
    /**
     * Metadata that indicates whether the `anchorPopulationScope` property is editable.
     *
     */
    anchorPopulationScopeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     *
     */
    anchorTagVersionedPlacementEnabled?: string;

    anchorTagVersionedPlacementMetadataEnabled?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, envelope documents are included as a PDF file attachment to "signing completed" emails.
     *
     * **Note**: Only SysAdmin users can change this setting.
     */
    attachCompletedEnvelope?: string;
    /**
     * Metadata that indicates whether the `attachCompletedEnvelope` property is editable.
     */
    attachCompletedEnvelopeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Sets when authentication checks are applied for recipient envelope access. This setting only applies to the following ID checks:
     *
     * - Phone Authentication
     * - SMS Authentication
     * - Knowledge-Based ID
     *
     * This setting takes one of the following options:
     *
     * - `initial_access`: The authentication check always applies the first time a recipient accesses the documents. Recipients are not asked to authenticate again
     * when they access the documents from the same browser on the same device. If the recipient attempts to access the documents from a different browser or a different device,
     * the recipient must pass authentication again. Once authenticated, that recipient is not challenged again on the new device or browser. The ability for a recipient to
     * skip authentication for documents is limited to documents sent from the same sending account.
     * - `each_access`: Authentication checks apply every time a recipient attempts to access the envelope. However, you can configure the Authentication Expiration setting
     * to allow recipients to skip authentication when they have recently passed authentication by setting a variable time frame.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    authenticationCheck?: string;
    /**
     * Metadata that indicates whether the `authenticationCheck` property is editable.
     *
     */
    authenticationCheckMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies how auto-navigation works.
     * Valid values are:
     *
     * - `off`
     * - `required_fields`
     * - `required_and_blank_fields`
     * - `all_fields`
     * - `page_then_required_fields`
     * - `page_then_required_and_blank_fields`
     * - `page_then_all_fields`
     *
     */
    autoNavRule?: string;
    /**
     * Metadata that indicates whether the `autoNavRule` property is editable.
     *
     */
    autoNavRuleMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether to automatically provision a user membership in the account for accountless recipients. (Also known as Just-in-Time provisioning.)
     */
    autoProvisionSignerAccount?: string;
    /**
     * Metadata that indicates whether the `autoProvisionSignerAccount` property is editable.
     *
     */
    autoProvisionSignerAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether BCC for Email Archive is enabled for the account. BCC for Email Archive allows you to set up an archive email address
     * so that a BCC copy of an envelope is sent only to that address.
     */
    bccEmailArchive?: string;
    /**
     * Metadata that indicates whether the `bccEmailArchive` property is editable.
     *
     */
    bccEmailArchiveMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     *
     */
    betaSwitchConfiguration?: string;
    /**
     * Reserved for DocuSign.
     */
    betaSwitchConfigurationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The billing address for the account.
     */
    billingAddress?: /* Contains address information. */ AddressInformation;
    /**
     * Metadata that indicates whether the `billingAddress` property is editable.
     *
     */
    billingAddressMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can use the bulk send feature for the account.
     */
    bulkSend?: string;

    bulkSendMaxCopiesInBatch?: string;

    bulkSendMaxUnprocessedEnvelopesCount?: string;
    /**
     * Metadata that indicates whether the `bulkSend` property is editable.
     *
     */
    bulkSendMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, account administrators can self-brand their sending console through the DocuSign console.
     */
    canSelfBrandSend?: string;
    /**
     * Metadata that indicates whether the `canSelfBrandSend` property is editable.
     *
     */
    canSelfBrandSendMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, account administrators can self-brand their signing console through the DocuSign console.
     */
    canSelfBrandSign?: string;
    /**
     * Metadata that indicates whether the `canSelfBrandSign` property is editable.
     *
     */
    canSelfBrandSignMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    canUseSalesforceOAuth?: string;

    canUseSalesforceOAuthMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    captureVoiceRecording?: string;
    /**
     * Reserved for DocuSign.
     */
    captureVoiceRecordingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether to use a shorter/wider format when generating the CFR Part 11 signature image.
     */
    cfrUseWideImage?: string;
    /**
     * Metadata that indicates whether the `cfrUseWideImage` property is editable.
     *
     */
    cfrUseWideImageMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    checkForMultipleAdminsOnAccount?: string;
    /**
     * Metadata that indicates whether the `checkForMultipleAdminsOnAccount` property is editable.
     */
    checkForMultipleAdminsOnAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether the signers of the envelopes from this account use a signature with a DocuSign chrome around it or not.
     */
    chromeSignatureEnabled?: string;
    /**
     * Metadata that indicates whether the `chromeSignatureEnabled` property is editable.
     *
     */
    chromeSignatureEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the text of comments is included in email notifications when a comment is posted.
     *
     * **Note**:  If the envelope requires additional recipient authentication, comment text is not included.
     */
    commentEmailShowMessageText?: string;
    /**
     * Metadata that indicates whether the `commentEmailShowMessageText` property is editable.
     *
     */
    commentEmailShowMessageTextMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true** and comments are enabled for the account, senders can disable comments for an envelope through the **Advanced Options** menu that
     * appears during the sending process.
     */
    commentsAllowEnvelopeOverride?: string;
    /**
     * Metadata that indicates whether the `commentsAllowEnvelopeOverride` property is editable.
     *
     */
    commentsAllowEnvelopeOverrideMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, conditional fields can be used in documents.
     *
     * **Note**: Only Admin users can change this setting.
     */
    conditionalFieldsEnabled?: string;
    /**
     * Metadata that indicates whether the `conditionalFieldsEnabled` property is editable.
     *
     */
    conditionalFieldsEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Speficies how often to display the consumer disclosure.
     *
     * Valid values are:
     *
     * - `once`: Per account, the supplemental document is displayed once only per `userId`.
     * - `always`: Per envelope, the supplemental document is displayed once only per `userId`.
     * - `each_access`: Per envelope, the supplemental document is displayed once only per `recipientId`.
     *
     */
    consumerDisclosureFrequency?: string;
    /**
     * Metadata that indicates whether the `consumerDisclosureFrequency` property is editable.
     *
     */
    consumerDisclosureFrequencyMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether to enable PDF form fields to get converted to DocuSign secure fields when the document is added or uploaded to an envelope.
     */
    convertPdfFields?: string;
    /**
     * Metadata that indicates whether the `convertPdfFields` property is editable.
     *
     */
    convertPdfFieldsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies how data is shared for tabs with the same tabLabel. Valid values are:
     *
     * - `document`: Tabs in a document with the same label populate with the same data.
     * - `envelope`: Tabs in all documents in the envelope with the same label populate with the same data.
     *
     * This setting applies to the following tab types:
     *
     * - Check box
     * - Company
     * - Data field
     * - Drop-down list
     * - Full name
     * - Formula
     * - Note
     * - Title
     *
     * **Note**: Only Admin users can change this setting. Changing this setting affects envelopes that have been sent but not completed.
     */
    dataPopulationScope?: string;
    /**
     * Metadata that indicates whether the `dataPopulationScope` property is editable.
     *
     */
    dataPopulationScopeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the mobile app distributor key is prevented from connecting for account users.
     */
    disableMobileApp?: string;
    /**
     * Metadata that indicates whether the `disableMobileApp` property is editable.
     *
     */
    disableMobileAppMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, push notifications are disabled for the account.
     *
     * **Note**: Only Admin users can change this setting.
     */
    disableMobilePushNotifications?: string;
    /**
     * Metadata that indicates whether the `disableMobilePushNotifications` property is editable.
     *
     */
    disableMobilePushNotificationsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, sending from a mobile application is disabled.
     *
     * **Note**: Only Admin users can change this setting.
     */
    disableMobileSending?: string;
    /**
     * Metadata that indicates whether the `disableMobileSending` property is editable.
     *
     */
    disableMobileSendingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, account users cannot be logged into multiple sessions at the same time.
     *
     * **Note**: Only Admin users can change this setting.
     */
    disableMultipleSessions?: string;
    /**
     * Metadata that indicates whether the `disableMultipleSessions` property is editable.
     *
     */
    disableMultipleSessionsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    disablePurgeNotificationsForSenderMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, signers cannot view certificates of completion.
     */
    disableSignerCertView?: string;
    /**
     * Metadata that indicates whether the `disableSignerCertView` property is editable.
     *
     */
    disableSignerCertViewMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, signers cannot view envelope history.
     */
    disableSignerHistoryView?: string;
    /**
     * Metadata that indicates whether the `disableSignerHistoryView` property is editable.
     *
     */
    disableSignerHistoryViewMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the **Select Style** option is hidden from signers and they must draw their signature instead.
     */
    disableStyleSignature?: string;
    /**
     * Metadata that indicates whether the `disableStyleSignature` property is editable.
     *
     */
    disableStyleSignatureMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, signers cannot upload custom image files of their signature and initials.
     *
     * **Note**: Only Admin users can change this setting.
     */
    disableUploadSignature?: string;
    /**
     * Metadata that indicates whether the `disableUploadSignature` property is editable.
     *
     */
    disableUploadSignatureMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the User Sharing feature is disabled for the account.
     */
    disableUserSharing?: string;
    /**
     * Metadata that indicates whether the `disableUserSharing` property is editable.
     *
     */
    disableUserSharingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether to display a Beta switch for your app.
     */
    displayBetaSwitch?: string;
    /**
     * Metadata that indicates whether the `displayBetaSwitch` property is editable.
     *
     */
    displayBetaSwitchMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Sets the account document upload restriction for non-account administrators. Valid values are:
     *
     * - `no_restrictions`: There are no restrictions on the type of documents that can be uploaded.
     * - `allow_pdf_only`: Non-administrators can only upload PDF files.
     * - `no_upload`: Non-administrators cannot upload files.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    documentConversionRestrictions?: string;
    /**
     * Metadata that indicates whether the `documentConversionRestrictions` property is editable.
     *
     */
    documentConversionRestrictionsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Sets a document retention period, which controls the number of days that DocuSign retains documents after they have reached a completed,declined, or voided state.
     * When document retention is enabled for the account, the default value is `356` days.
     */
    documentRetention?: string;
    /**
     * Metadata that indicates whether the `documentRetention` property is editable.
     *
     */
    documentRetentionMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true** and `documentRetention` is set, document fields and metadata are also purged after the document retention period ends.
     * The default value is **false**.
     *
     * **Note**: Only Admins can change this setting.
     */
    documentRetentionPurgeTabs?: string;
    /**
     * Configures the Document Visibility feature for the account. Valid values are:
     *
     * - `Off`: Document Visibility is not active for the account.
     * - `MustSignToViewUnlessSenderAccount`: Document Visibility is enabled for all envelopes sent from the account. Any member of the sending account can view all of the
     * documents in an envelope.
     * - `MustSignToViewUnlessSender`: Document Visibility is enabled for all envelopes sent from the account. Only the sender can view all of the documents in an envelope.
     * - `SenderCanSetMustSignToViewUnlessSenderAccount`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope,
     * all of the documents within it are still visible to any member of the sending account.
     * Vd- `SenderCanSetMustSignToViewUnlessSender`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope,
     * all of the documents in the envelope are visible only to the sender.
     *
     * **Note**: For this configuration to take effect, `allowDocumentVisibility` must be set to **true**.
     */
    documentVisibility?: string;
    /**
     * Metadata that indicates whether the `documentVisibility` property is editable.
     *
     */
    documentVisibilityMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies the version of the email templates used in an account. If new signing is selected in a member's Admin page, the user is updated to the newest version (1.1),
     * the minimum version of email supported for the account.
     */
    emailTemplateVersion?: string;
    /**
     * Metadata that indicates whether the `emailTemplateVersion` property is editable.
     *
     */
    emailTemplateVersionMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables Access Code Generator on the account.
     */
    enableAccessCodeGenerator?: string;
    /**
     * Metadata that indicates whether the `enableAccessCodeGenerator` property is editable.
     *
     */
    enableAccessCodeGeneratorMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables Advanced Payments for the account.
     */
    enableAdvancedPayments?: string;
    /**
     * Metadata that indicates whether the `enableAdvancedPayments` property is editable.
     *
     */
    enableAdvancedPaymentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables advanced PowerForms for the account.
     */
    enableAdvancedPowerForms?: string;
    /**
     * Metadata that indicates whether the `enableAdvancedPowerForms` property is editable.
     *
     */
    enableAdvancedPowerFormsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables the account to set the AutoNav rule setting, which enables a sender to override the auto-navigation setting per envelope.
     *
     * **Note**: To change this setting, you must be a SysAdmin user or `EnableAutoNavByDSAdmin must be set.
     */
    enableAutoNav?: string;
    /**
     * Metadata that indicates whether the `enableAutoNav` property is editable.
     *
     */
    enableAutoNavMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, calculated fields are enabled for the account.
     *
     * **Note**: This setting can be changed only by Admin users, and only if the account-level setting `allowExpression` is set to **true**.
     */
    enableCalculatedFields?: string;
    /**
     * Metadata that indicates whether the `enableCalculatedFields` property is editable.
     *
     */
    enableCalculatedFieldsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether clickwraps are enabled in your app. A [clickwrap](https://developers.docusign.com/click-api/guides/)
     * is an iframe that you embed in your own website or app.
     */
    enableClickwraps?: string;
    /**
     * Metadata that indicates whether the `enableClickwraps` property is editable.
     *
     */
    enableClickwrapsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    enableCommentsHistoryDownloadInSigning?: string;

    enableCommentsHistoryDownloadInSigningMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables customer satisfaction metric tracking for the account.
     */
    enableCustomerSatisfactionMetricTracking?: string;
    /**
     * Metadata that indicates whether the `enableCustomerSatisfactionMetricTracking` property is editable.
     *
     */
    enableCustomerSatisfactionMetricTrackingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    enableDSPro?: string;
    /**
     * Metadata that indicates whether the `enableDSPro` property is editable.
     *
     */
    enableDSProMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, enables the account administrator to control envelope stamping for an account (stamping the `envelopeId` in the the document margins).
     *
     * **Note**: This setting can be changed only by Admin users, and only if the account-level setting `enableEnvelopeStampingByDSAdmin` is set to **true**.
     */
    enableEnvelopeStampingByAccountAdmin?: string;
    /**
     * Metadata that indicates whether the `enableEnvelopeStampingByAccountAdmin` property is editable.
     *
     */
    enableEnvelopeStampingByAccountAdminMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables the DocuSign administrator to control envelope stamping for an account (placement of the `envelopeId`).
     */
    enableEnvelopeStampingByDSAdmin?: string;
    /**
     * Metadata that indicates whether the `enableEnvelopeStampingByDSAdmin` property is editable.
     *
     */
    enableEnvelopeStampingByDSAdminMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    enableInBrowserEditor?: string;

    enableInBrowserEditorMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, payment processing is enabled for this account.
     *
     * **Note**: This setting can be changed only by Admin users, and only if the account-level setting `allowPaymentProcessing` is set.
     */
    enablePaymentProcessing?: string;
    /**
     * Metadata that indicates whether the `enablePaymentProcessing` property is editable.
     *
     */
    enablePaymentProcessingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, enables PowerForms for the account.
     *
     * **Note**: Only SysAdmin users can change this setting.
     */
    enablePowerForm?: string;
    /**
     * When set to **true**, enables direct PowerForms for an account. Direct PowerForms are in-session PowerForms.
     *
     * **Note**: Only Admin users can change this setting.
     */
    enablePowerFormDirect?: string;
    /**
     * Metadata that indicates whether the `enablePowerFormDirect` property is editable.
     *
     */
    enablePowerFormDirectMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Metadata that indicates whether the `enablePowerForm` property is editable.
     *
     */
    enablePowerFormMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    enableRecipientDomainValidation?: string;
    /**
     * Metadata that indicates whether the `enableRecipientDomainValidation` property is editable.
     *
     */
    enableRecipientDomainValidationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Enables direct links to envelopes in reports for administrators in the following scopes:
     * - `NoEnvelopes`
     * - `AllEnvelopes`
     * - `OnlyOwnEnvelopes`
     */
    enableReportLinks?: string;
    /**
     * Metadata that indicates whether the `enableReportLinks` property is editable.
     *
     */
    enableReportLinksMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account can use the `requireSignOnPaper` option.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    enableRequireSignOnPaper?: string;
    /**
     * Metadata that indicates whether the `enableRequireSignOnPaper` property is editable.
     *
     */
    enableRequireSignOnPaperMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, account administrators can reserve a web domain and users. Domains are organization-specific reserved internet domains, such as
     * `@exampledomain.com`. You can define policy settings for users of each reserved domain within your organization, export lists of domain users for audit purposes,
     * and manage domain users.
     *
     * - Domains may be claimed by an organization.
     * - When a domain is claimed by an organization, all users within that domain are added to the organization, even if they have trial or free accounts.
     * - You can set domain controls for all users of the domain.
     * - You can export information about your organization’s users that are associated with your reserved domains.
     *
     * **Note**: Only SysAdmin users can change this setting.
     */
    enableReservedDomain?: string;
    /**
     * Metadata that indicates whether the `enableReservedDomain` property is editable.
     *
     */
    enableReservedDomainMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables responsive signing.
     */
    enableResponsiveSigning?: string;
    /**
     * Metadata that indicates whether the `enableResponsiveSigning` property is editable.
     *
     */
    enableResponsiveSigningMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, scheduled releases are enabled. The default value is **false**.
     */
    enableScheduledRelease?: string;
    /**
     * Metadata that indicates whether the `enableScheduledRelease` property is editable.
     *
     */
    enableScheduledReleaseMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    enableSearchUI?: string;

    enableSearchUIMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables fonts to be set on tags for the account.
     */
    enableSendingTagsFontSettings?: string;
    /**
     * Metadata that indicates whether the `enableSendingTagsFontSettings` property is editable.
     *
     */
    enableSendingTagsFontSettingsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this account can use the Agent recipient type.
     *
     * **Note**: Only SysAdmin users can change this setting.
     *
     */
    enableSendToAgent?: string;
    /**
     * Metadata that indicates whether the `enableSendToAgent` property is editable.
     *
     */
    enableSendToAgentMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, this account can use the Intermediary recipient type.
     *
     * **Note**: Only Admin users can change this setting, and only if `allowSendToIntermediary` is set.
     *
     */
    enableSendToIntermediary?: string;
    /**
     * Metadata that indicates whether the `enableSendToIntermediary` property is editable.
     *
     */
    enableSendToIntermediaryMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, this account can use the Editor recipient type.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    enableSendToManage?: string;
    /**
     * Metadata that indicates whether the `enableSendToManage` property is editable.
     *
     */
    enableSendToManageMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account can define the routing
     * order of recipients for envelopes sent by using the DocuSign API.
     *
     * **Note**: Only SysAdmin users can change this setting.
     */
    enableSequentialSigningAPI?: string;
    /**
     * Metadata that indicates whether the `enableSequentialSigningAPI` property is editable.
     *
     */
    enableSequentialSigningAPIMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account can define the routing order
     * of recipients for envelopes sent by using the DocuSign application.
     *
     * **Note**: Only SysAdmin users can change this setting.
     *
     */
    enableSequentialSigningUI?: string;
    /**
     * Metadata that indicates whether the `enableSequentialSigningUI` property is editable.
     *
     */
    enableSequentialSigningUIMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, users can use the signing attachments feature to request attachments from signers.
     *
     * **Note**: Only Admin users can change this setting.
     */
    enableSignerAttachments?: string;
    /**
     * Metadata that indicates whether the `enableSignerAttachments` property is editable.
     *
     */
    enableSignerAttachmentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, enables comments for the account so that signers and recipients can make and respond to comments in documents
     * belonging to the envelopes that they are sent.
     */
    enableSigningExtensionComments?: string;
    /**
     * Metadata that indicates whether the `enableSigningExtensionComments` property is editable.
     *
     */
    enableSigningExtensionCommentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables conversation functionality.
     */
    enableSigningExtensionConversations?: string;
    /**
     * Metadata that indicates whether the `enableSigningExtensionConversations` property is editable.
     *
     */
    enableSigningExtensionConversationsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, switches Signing Order to On by default for new envelopes.
     */
    enableSigningOrderSettingsForAccount?: string;
    /**
     * Metadata that indicates whether the `enableSigningOrderSettingsForAccount` property is editable.
     *
     */
    enableSigningOrderSettingsForAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, a sender can allow signers to use the sign on paper option.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    enableSignOnPaper?: string;
    /**
     * Metadata that indicates whether the `enableSignOnPaper` property is editable.
     *
     */
    enableSignOnPaperMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, a user can override the default default account setting for the Sign on Paper option, which specifies whether
     * signers can sign documents on paper as an option to signing electronically.
     *
     * **Note**: Only Admin users can change this setting.
     */
    enableSignOnPaperOverride?: string;
    /**
     * Metadata that indicates whether the `enableSignOnPaperOverride` property is editable.
     *
     */
    enableSignOnPaperOverrideMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, Sign with Notary functionality is enabled for the account.
     *
     * **Note**: Only Admin users can change this setting.
     */
    enableSignWithNotary?: string;
    /**
     * Metadata that indicates whether the `enableSignWithNotary` property is editable.
     *
     */
    enableSignWithNotaryMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, blockchain-based [Smart Contracts](https://www.docusign.com/products/blockchain) are enabled. The default value is **false**.
     */
    enableSmartContracts?: string;
    /**
     * Metadata that indicates whether the `enableSmartContracts` property is editable.
     */
    enableSmartContractsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account can use SMS authentication.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    enableSMSAuthentication?: string;
    /**
     * Metadata that indicates whether the `enableSMSAuthentication` property is editable.
     *
     */
    enableSMSAuthenticationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Deprecated.
     */
    enableSocialIdLogin?: string;
    /**
     * Deprecated.
     */
    enableSocialIdLoginMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables strikethrough formatting in documents.
     */
    enableStrikeThrough?: string;
    /**
     * Metadata that indicates whether the `enableStrikeThrough` property is editable.
     *
     */
    enableStrikeThroughMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    enableTransactionPoint?: string;
    /**
     * Reserved for DocuSign.
     */
    enableTransactionPointMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, Vaulting is enabled for the account.
     */
    enableVaulting?: string;
    /**
     * Metadata that indicates whether the `enableVaulting` property is editable.
     *
     */
    enableVaultingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    enableWitnessing?: string;
    /**
     * Metadata that indicates whether the `enableWitnessing` property is editable.
     *
     */
    enableWitnessingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the template name must be unique.
     */
    enforceTemplateNameUniqueness?: string;
    /**
     * Metadata that indicates whether the `enforceTemplateNameUniqueness` property is editable.
     *
     */
    enforceTemplateNameUniquenessMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Shows the envelope integration rule for the account, which indicates whether custom admins can enable Connect for their accounts. Enumeration values are:
     *
     * - `not_allowed`
     * - `full`
     *
     * **Note**: Only SysAdmin users can change this setting.
     */
    envelopeIntegrationAllowed?: string;
    /**
     * Metadata that indicates whether the `envelopeIntegrationAllowed` property is editable.
     *
     */
    envelopeIntegrationAllowedMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, enables Connect for an account. Note that Connect integration requires additional configuration that must be set up for it to take effect;
     * this switch is only the on/off control for the account.
     *
     * **Note**: Only Admin users can change this setting, and only when `envelopeIntegrationAllowed` is set.
     */
    envelopeIntegrationEnabled?: string;
    /**
     * Metadata that indicates whether the `envelopeIntegrationEnabled` property is editable.
     *
     */
    envelopeIntegrationEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, envelopes sent by this account automatically have the envelope ID stamped in the document margins, unless the sender selects not
     * to have the documents stamped.
     */
    envelopeStampingDefaultValue?: string;
    /**
     * Metadata that indicates whether the `envelopeStampingDefaultValue` property is editable.
     *
     */
    envelopeStampingDefaultValueMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether a member of an account can express send (without tags) or must send with tags on documents.
     */
    expressSend?: string;
    /**
     * Boolean that specifies whether a member of an account can send templates without the tags being stripped out, even when the account is configured to let its
     * users express send only (they cannot use the tagger).
     */
    expressSendAllowTabs?: string;
    /**
     * Metadata that indicates whether the `expressSendAllowTabs` property is editable.
     *
     */
    expressSendAllowTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Metadata that indicates whether the `expressSend` property is editable.
     *
     */
    expressSendMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * A list of external document sources such as DropBox and OneDrive.
     */
    externalDocumentSources?: /* A complex object specifying the external document sources. */ ExternalDocumentSources;
    /**
     * Specifies the signature pad type.
     * Valid values are:
     *
     * - `none`
     * - `topaz`
     * - `e_padv9`
     * - `e_pad_integrisign`
     * - `topaz_sigplusextlite`
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    externalSignaturePadType?: string;
    /**
     * Metadata that indicates whether the `externalSignaturePadType` property is editable.
     *
     */
    externalSignaturePadTypeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, fax delivery to recipients is allowed for the account.
     *
     * **Note**: Only Admin users can change this setting.
     */
    faxOutEnabled?: string;
    /**
     * Metadata that indicates whether the `faxOutEnabled` property is editable.
     *
     */
    faxOutEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, HTML used to implement [Guided Forms](https://www.docusign.com/products/guided-forms) is enabled for the account.
     */
    guidedFormsHtmlAllowed?: string;

    guidedFormsHtmlAllowedMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether to hide the account address in the Certificate of Completion.
     */
    hideAccountAddressInCoC?: string;
    /**
     * Metadata that indicates whether the `hideAccountAddressInCoC` property is editable.
     *
     */
    hideAccountAddressInCoCMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether to hide the pricing functionality for an account.
     */
    hidePricing?: string;
    /**
     * Metadata that indicates whether the `hidePricing` property is editable.
     *
     */
    hidePricingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * A list of ID check configuration objects.
     */
    idCheckConfigurations?: /* A complex object specifying ID check configuration. */ IdCheckConfiguration[];
    /**
     * Determines when a user's authentication with the account expires. Valid values are:
     *
     * - `always`: Users are required to authenticate each time.
     * - `variable`: If the authentication for a user is valid and falls within the value for the `idCheckExpireDays` property, the user is not required to authenticate again.
     *
     * **Note**: Only Admin users can change this setting.
     */
    idCheckExpire?: string;
    /**
     * The number of days before user authentication credentials expire. A value of `0` specifies that users must re-authenticate for each new session.
     *
     * **Note**: Only Admin users can change this setting.
     */
    idCheckExpireDays?: string;
    /**
     * Metadata that indicates whether the `idCheckExpireDays` property is editable.
     *
     */
    idCheckExpireDaysMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Metadata that indicates whether the `idCheckExpire` property is editable.
     *
     */
    idCheckExpireMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The number of minutes before user authentication credentials expire.
     */
    idCheckExpireMinutes?: string;
    /**
     * Metadata that indicates whether the `idCheckExpireMinutes` property is editable.
     *
     */
    idCheckExpireMinutesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Indicates if authentication is configured for the account. Valid values are:
     *
     * - `always`: Authentication checks are performed on every envelope.
     * - `never`: Authentication checks are not performed on any envelopes.
     * - `optional`: Authentication is configurable per envelope.
     *
     * **Note**: Only Admin users can change this setting.
     */
    idCheckRequired?: string;
    /**
     * Metadata that indicates whether the `idCheckRequired` property is editable.
     *
     */
    idCheckRequiredMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    identityVerification?: /* Specifies an Identity Verification workflow. */ AccountIdentityVerificationWorkflow[];
    /**
     * Metadata that indicates whether the `identityVerification` property is editable.
     *
     */
    identityVerificationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    ignoreErrorIfAnchorTabNotFound?: string;
    /**
     * Reserved for DocuSign.
     */
    ignoreErrorIfAnchorTabNotFoundMetadataEnabled?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * A text field containing the question that an in-person signing host uses to collect personal information from the recipient.
     * The recipient's response to this question is saved and can be viewed in the certificate associated with the envelope.
     *
     * **Note**: Only Admin users can change this setting.
     */
    inPersonIDCheckQuestion?: string;
    /**
     * Metadata that indicates whether the `inPersonIDCheckQuestion` property is editable.
     *
     */
    inPersonIDCheckQuestionMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, in-person signing is enabled for the account.
     */
    inPersonSigningEnabled?: string;
    /**
     * Metadata that indicates whether the `inPersonSigningEnabled` property is editable.
     *
     */
    inPersonSigningEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, the account can send in-session (embedded) envelopes.
     *
     * **Note**: Only Admin users can change this setting.
     */
    inSessionEnabled?: string;
    /**
     * Metadata that indicates whether the `inSessionEnabled` property is editable.
     *
     */
    inSessionEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, emails are not sent to the in-session (embedded) recipients on an envelope.
     *
     * **Note**: Only Admin users can change this setting.
     */
    inSessionSuppressEmails?: string;
    /**
     * Metadata that indicates whether the `inSessionSuppressEmails` property is editable.
     *
     */
    inSessionSuppressEmailsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The maximum number of signing groups allowed on the account. The default value is `50`. This setting is only shown in responses that list account settings.
     *
     * **Note**: Only SysAdmin users can change this setting.
     */
    maximumSigningGroups?: string;
    /**
     * Metadata that indicates whether the `maximumSigningGroups` property is editable.
     *
     */
    maximumSigningGroupsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The maximum number of users per signing group. The default value is `50`. This setting is only shown in responses that list account settings.
     *
     * **Note**: Only SysAdmin users can change this setting.
     */
    maximumUsersPerSigningGroup?: string;
    /**
     * Metadata that indicates whether the `maximumUsersPerSigningGroup` property is editable.
     *
     */
    maximumUsersPerSigningGroupMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The maximum number of custom stamps.
     */
    maxNumberOfCustomStamps?: string;
    /**
     * The number of minutes of inactivity before a mobile user is automatically logged out of the system. Valid values are `1` to `120` minutes. The default value is `20` minutes.
     *
     * **Note**: Only Admin users can change this setting.
     */
    mobileSessionTimeout?: string;
    /**
     * Metadata that indicates whether the `mobileSessionTimeout` property is editable.
     *
     */
    mobileSessionTimeoutMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The number of active custom stamps associated with the account. DocuSign calculates this number automatically. This property is only visible to the DocuSign account manager.
     */
    numberOfActiveCustomStamps?: string;
    /**
     * Boolean that specifies whether to opt in for Signing v02 on Mobile Devices functionality.
     */
    optInMobileSigningV02?: string;
    /**
     * Metadata that indicates whether the `optInMobileSigningV02` property is editable.
     *
     */
    optInMobileSigningV02Metadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that allows envelope senders to opt out of the recipient signing auto-navigation feature and opt out of updating tab font color.
     */
    optOutAutoNavTextAndTabColorUpdates?: string;
    /**
     * Metadata that indicates whether the `optOutAutoNavTextAndTabColorUpdates` property is editable.
     *
     */
    optOutAutoNavTextAndTabColorUpdatesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether to allow envelope senders to opt out of using the new platform seal.
     */
    optOutNewPlatformSeal?: string;
    /**
     * Metadata that indicates whether the `optOutNewPlatformSealPlatform` property is editable.
     *
     */
    optOutNewPlatformSealPlatformMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, senders can allow recipients to provide a phone number for the Phone Authentication process.
     *
     * **Note**: Only Admin users can change this setting.
     */
    phoneAuthRecipientMayProvidePhoneNumber?: string;
    /**
     * Metadata that indicates whether the `phoneAuthRecipientMayProvidePhoneNumber` property is editable.
     *
     */
    phoneAuthRecipientMayProvidePhoneNumberMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The policy for adding a digital certificate to downloaded, printed, and emailed documents.
     *
     * Possible values are:
     *
     * - `no_sign`
     * - `no_sign_allow_user_override`
     * - `yes_sign` (Specifies that PDF files downloaded from the platform are signed.)
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    pkiSignDownloadedPDFDocs?: string;
    /**
     * Metadata that indicates whether the `pkiSignDownloadedPDFDocs` property is editable.
     *
     */
    pkiSignDownloadedPDFDocsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * recipients receiving envelopes from this account
     * can sign offline.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    recipientsCanSignOffline?: string;
    /**
     * Metadata that indicates whether the `recipientsCanSignOffline` property is editable.
     *
     */
    recipientsCanSignOfflineMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, recipients receiving envelopes from this account can override auto-navigation functionality.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    recipientSigningAutoNavigationControl?: string;
    /**
     * Metadata that indicates whether the `recipientSigningAutoNavigationControl` property is editable.
     *
     */
    recipientSigningAutoNavigationControlMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * recipients are required
     * to use a 21 CFR part 11-compliant signing experience.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    require21CFRpt11Compliance?: string;
    /**
     * Metadata that indicates whether the `require21CFRpt11Compliance` property is editable.
     *
     */
    require21CFRpt11ComplianceMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, signers who decline to sign an envelope sent from this account
     * are required to provide a reason for declining.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    requireDeclineReason?: string;
    /**
     * Metadata that indicates whether the `requireDeclineReason` property is editable.
     *
     */
    requireDeclineReasonMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account requires external management of users.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    requireExternalUserManagement?: string;
    /**
     * Metadata that indicates whether the `requireExternalUserManagement` property is editable.
     *
     */
    requireExternalUserManagementMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Sets the Digital Signature certificate requirements for sending envelopes.
     * Valid values are:
     *
     * - `none`: A Digital Signature certificate is not required.
     * - `docusign_express`: Signers must use a DocuSign Express certificate.
     * - `docusign_personal`: Signers must use a DocuSign personal certificate.
     * - `safe`
     * - `open_trust`: Signers must use an OpenTrust certificate.
     *
     */
    requireSignerCertificateType?: string;
    /**
     * Metadata that indicates whether the `requireSignerCertificateType` property is editable.
     *
     */
    requireSignerCertificateTypeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The RSA account name.
     *
     * **Note**:
     * Only Admin users can change this setting. Modifying this value may disrupt
     * your ID Check capability.
     * Ensure you have the correct value before changing it.
     *
     */
    rsaVeridAccountName?: string;
    /**
     * The password for the RSA account.
     *
     *
     * **Note**:
     * Only Admin users can change this setting. Modifying this value may disrupt
     * your ID Check capability.
     * Ensure you have the correct value before changing it.
     *
     */
    rsaVeridPassword?: string;
    /**
     * The RSA rule set used with the account.
     *
     * **Note**:
     * Only Admin users can change this setting. Modifying this value may disrupt
     * your ID Check capability.
     * Ensure you have the correct value before changing it.
     *
     */
    rsaVeridRuleset?: string;
    /**
     * The user ID for the RSA account.
     *
     * **Note**:
     * Only Admin users can change this setting. Modifying this value may disrupt
     * your ID Check capability.
     * Ensure you have the correct value before changing it.
     *
     */
    rsaVeridUserId?: string;
    /**
     * Sets how self-signed documents are presented to the email recipients.
     * Valid values are:
     *
     * - `include_pdf`: A PDF of the completed document is attached to the email.
     * - `include_link`: A secure link to the self-signed documents is included
     *    in the email.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    selfSignedRecipientEmailDocument?: string;
    /**
     * Metadata that indicates whether the `selfSignedRecipientEmailDocument` property is editable.
     *
     */
    selfSignedRecipientEmailDocumentMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the `selfSignedRecipientEmailDocument` user setting
     * can be set for an individual user.
     * The user setting overrides the account setting.
     *
     * **Note**: Only Admin users can change this account setting.
     *
     */
    selfSignedRecipientEmailDocumentUserOverride?: string;
    /**
     * Metadata that indicates whether the `selfSignedRecipientEmailDocumentUserOverride` property is editable.
     *
     */
    selfSignedRecipientEmailDocumentUserOverrideMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, a signer can draw their signature in each
     * location where a sign or initial tab exists. This functionality
     * is typically used for mobile signing.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    senderCanSignInEachLocation?: string;
    /**
     * Metadata that indicates whether the `senderCanSignInEachLocation` property is editable.
     *
     */
    senderCanSignInEachLocationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, a sender who is also a recipient of an envelope
     * must follow the authentication requirements for the envelope.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    senderMustAuthenticateSigning?: string;
    /**
     * Metadata that indicates whether the `senderMustAuthenticateSigning` property is editable.
     *
     */
    senderMustAuthenticateSigningMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The account-wide default font color to use for the content of the tab.
     *
     * Valid values are:
     *
     * - `Black`
     * - `BrightBlue`
     * - `BrightRed`
     * - `DarkGreen`
     * - `DarkRed`
     * - `Gold`
     * - `Green`
     * - `NavyBlue`
     * - `Purple`
     * - `White`
     *
     */
    sendingTagsFontColor?: string;
    /**
     * Metadata that indicates whether the `sendingTagsFontColor` property is editable.
     *
     */
    sendingTagsFontColorMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The account-wide default font to be used for the tab value. Supported fonts include:
     *
     * - `Default`
     * - `Arial`
     * - `ArialNarrow`
     * - `Calibri`
     * - `CourierNew`
     * - `Garamond`
     * - `Georgia`
     * - `Helvetica`
     * - `LucidaConsole`
     * - `MSGothic`
     * - `MSMincho`
     * - `OCR-A`
     * - `Tahoma`
     * - `TimesNewRoman`
     * - `Trebuchet`
     * - `Verdana`
     */
    sendingTagsFontName?: string;
    /**
     * Metadata that indicates whether the `sendingTagsFontName` property is editable.
     *
     */
    sendingTagsFontNameMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The account-wide default font size used for the information in the tab:
     *
     * - `Size7`
     * - `Size8`
     * - `Size9`
     * - `Size10`
     * - `Size11`
     * - `Size12`
     * - `Size14`
     * - `Size16`
     * - `Size18`
     * - `Size20`
     * - `Size22`
     * - `Size24`
     * - `Size26`
     * - `Size28`
     * - `Size36`
     * - `Size48`
     * - `Size72`
     */
    sendingTagsFontSize?: string;
    /**
     * Metadata that indicates whether the `sendingTagsFontSize` property is editable.
     *
     */
    sendingTagsFontSizeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When true,
     * the account can use the
     * certified deliveries recipient type.
     *
     */
    sendToCertifiedDeliveryEnabled?: string;
    /**
     * Metadata that indicates whether the `sendToCertifiedDeliveryEnabled` property is editable.
     *
     */
    sendToCertifiedDeliveryEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The amount of idle activity time, in minutes, before a user is automatically logged out of the system. The minimum setting is 20 minutes and the maximum setting is 120 minutes.
     *
     */
    sessionTimeout?: string;
    /**
     * Metadata that indicates whether the `sessionTimeout` property is editable.
     *
     */
    sessionTimeoutMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, senders can set the email language to use for
     * each recipient.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    setRecipEmailLang?: string;
    /**
     * Metadata that indicates whether the `setRecipEmailLang` property is editable.
     *
     */
    setRecipEmailLangMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * setting a unique language for a recipient
     * not only affects the email language, but also the signing
     * language they are presented with. If **false**, only the email will
     * be affected when the sender specifies a unique language for a
     * recipient.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    setRecipSignLang?: string;
    /**
     * Metadata that indicates whether the `setRecipSignLang` property is editable.
     *
     */
    setRecipSignLangMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether an account can use Shared Template Folders.
     */
    sharedTemplateFolders?: string;
    /**
     * Metadata that indicates whether the `sharedTemplateFolders` property is editable.
     *
     */
    sharedTemplateFoldersMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether complete dialogs are displayed directly within an application in embedded signing sessions.
     */
    showCompleteDialogInEmbeddedSession?: string;
    /**
     * Metadata that indicates whether the `showCompleteDialogInEmbeddedSession` property is editable.
     *
     */
    showCompleteDialogInEmbeddedSessionMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, Conditional Routing options display to senders during the sending experience.
     */
    showConditionalRoutingOnSend?: string;

    showConditionalRoutingOnSendMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether conditional field options are initially displayed (before a user makes entries).
     */
    showInitialConditionalFields?: string;
    /**
     * Metadata that indicates whether the `showInitialConditionalFields` property is editable.
     *
     */
    showInitialConditionalFieldsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether localized watermarks are displayed.
     */
    showLocalizedWatermarks?: string;
    /**
     * Metadata that indicates whether the `showLocalizedWatermarks` property is editable.
     *
     */
    showLocalizedWatermarksMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * show tutorials.
     *
     */
    showTutorials?: string;
    /**
     * Metadata that indicates whether the `showTutorials` property is editable.
     *
     */
    showTutorialsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Names of electronic or digital signature providers that can be used.
     */
    signatureProviders?: string[];
    /**
     * Metadata that indicates whether the `signatureProviders` property is editable.
     *
     */
    signatureProvidersMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The format for the signature date. Valid values are:
     *
     * - `d/M/yyyy`
     * - `dd-MM-yy`
     * - `dd-MMM-yy`
     * - `dd-MM-yyyy`
     * - `dd.MM.yyyy`
     * - `dd-MMM-yyyy`
     * - `dd MMMM yyyy`
     * - `M/d/yyyy`
     * - `MM-dd-yyyy`
     * - `MM/dd/yyyy`
     * - `MM/dd/yy`
     * - `MMM-dd-yyyy`
     * - `MMM d, yyyy`
     * - `MMMM d, yyyy`
     * - `yyyy-MM-dd`
     * - `yyyy-MMM-dd`
     * - `yyyy/MM/dd`
     * - `yyyy MMMM d`
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signDateFormat?: string;
    /**
     * Metadata that indicates whether the `signDateFormat` property is editable.
     *
     */
    signDateFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * the Certificate of Completion is included in the PDF of the envelope documents
     * when it is downloaded.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerAttachCertificateToEnvelopePDF?: string;
    /**
     * Metadata that indicates whether the `signerAttachCertificateToEnvelopePDF` property is editable.
     *
     */
    signerAttachCertificateToEnvelopePDFMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, signer attachments are added to the parent document
     * that contains the attachment.
     * The default behavior creates
     * a new document in the envelope for every signer attachment.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerAttachConcat?: string;
    /**
     * Metadata that indicates whether the `signerAttachConcat` property is editable.
     *
     */
    signerAttachConcatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * a signer can create a DocuSign account
     * after signing.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerCanCreateAccount?: string;
    /**
     * Metadata that indicates whether the `signerCanCreateAccount` property is editable.
     *
     */
    signerCanCreateAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, recipients can sign on a mobile device.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerCanSignOnMobile?: string;
    /**
     * Metadata that indicates whether the `signerCanSignOnMobile` property is editable.
     *
     */
    signerCanSignOnMobileMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, an "envelope complete" email is sent to an in-session
     * (embedded) or offline signer after DocuSign processes the envelope
     * if in-session emails are not suppressed.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerInSessionUseEnvelopeCompleteEmail?: string;
    /**
     * Metadata that indicates whether the `signerInSessionUseEnvelopeCompleteEmail` property is editable.
     *
     */
    signerInSessionUseEnvelopeCompleteEmailMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Sets the login requirements for signers. Valid values are:
     *
     * - `login_not_required`: Signers are not required to log in.
     * - `login_required_if_account_holder`: If the signer has a DocuSign account,
     *   they must log in to sign the document.
     * - `login_required_per_session`: The sender cannot send an envelope to anyone
     *   who does not have a DocuSign account.
     * - `login_required_per_envelope`: The sender cannot send an envelope to anyone
     *   who does not have a DocuSign account, and the signer must also log in for
     *   each envelope they will sign.
     *
     *
     * **Note**: Only Admin users can change this setting. If you use Direct PowerForms
     * or captive (embedded signers), the "Account required" settings are bypassed for
     * those signers. If your workflow requires that the signer have an account,
     * you should not use those methods.
     *
     */
    signerLoginRequirements?: string;
    /**
     * Metadata that indicates whether the `signerLoginRequirements` property is editable.
     *
     */
    signerLoginRequirementsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, senders can only send an envelope to a recipient
     * that has a DocuSign account.
     *
     * **Note**: Only Account Administrators can change this setting.
     *
     */
    signerMustHaveAccount?: string;
    /**
     * Metadata that indicates whether the `signerMustHaveAccount` property is editable.
     *
     */
    signerMustHaveAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * signers must log in to the DocuSign platform to sign an envelope.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerMustLoginToSign?: string;
    /**
     * Metadata that indicates whether the `signerMustLoginToSign` property is editable.
     *
     */
    signerMustLoginToSignMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the initial values of all SecureFields are written
     * to the document when it is sent.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerShowSecureFieldInitialValues?: string;
    /**
     * Metadata that indicates whether the `signerShowSecureFieldInitialValues` property is editable.
     *
     */
    signerShowSecureFieldInitialValuesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The number of minutes
     * that a signing session stays
     * alive without any activity.
     *
     */
    signingSessionTimeout?: string;
    /**
     * Metadata that indicates whether the `signingSessionTimeout` property is editable.
     *
     */
    signingSessionTimeoutMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     *
     */
    signingUiVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    signingUiVersionMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The format for the signature time. Valid values are:
     *
     * - `none`
     * - `HH:mm`
     * - `h:mm`
     * - `HH:mm:ss`
     * - `h:mm:ss`
     *
     */
    signTimeFormat?: string;
    /**
     * Metadata that indicates whether the `signTimeFormat` property is editable.
     *
     */
    signTimeFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * the time shows the AM or PM indicator.
     *
     */
    signTimeShowAmPm?: string;
    /**
     * Metadata that indicates whether the `signTimeShowAmPm` property is editable.
     *
     */
    signTimeShowAmPmMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, simplified sending is enabled for the account. The default value is **false**.
     */
    simplifiedSendingEnabled?: string;
    /**
     * Metadata that indicates whether the `simplifiedSendingEnabled` property is editable.
     *
     */
    simplifiedSendingEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * single sign-on (SSO) is enabled.
     *
     */
    singleSignOnEnabled?: string;
    /**
     * Metadata that indicates whether the `singleSignOnEnabled` property is editable.
     *
     */
    singleSignOnEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * do not require authentication prompt for viewing completed envelopes
     *
     */
    skipAuthCompletedEnvelopes?: string;
    /**
     * Metadata that indicates whether the `skipAuthCompletedEnvelopes` property is editable.
     *
     */
    skipAuthCompletedEnvelopesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * recipients can use
     * [social ids](https://support.docusign.com/guides/signer-authentication)
     * when signing
     *
     */
    socialIdRecipAuth?: string;
    /**
     * Metadata that indicates whether the `socialIdRecipAuth` property is editable.
     *
     */
    socialIdRecipAuthMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, senders can specify the visibility of the documents in an envelope at the recipient level.
     *
     */
    specifyDocumentVisibility?: string;
    /**
     * Metadata that indicates whether the `specifyDocumentVisibility` property is editable.
     *
     */
    specifyDocumentVisibilityMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * when initiating correction of an in-flight envelope
     * the sender starts in advanced correct mode.
     *
     */
    startInAdvancedCorrect?: string;
    /**
     * Metadata that indicates whether the `startInAdvancedCorrect` property is editable.
     *
     */
    startInAdvancedCorrectMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, account users must accept supplemental documents when signing.
     */
    supplementalDocumentsMustAccept?: string;
    /**
     * Metadata that indicates whether the `supplementalDocumentsMustAccept` property is editable.
     *
     */
    supplementalDocumentsMustAcceptMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, account users must both view and accept supplemental documents when signing.
     */
    supplementalDocumentsMustRead?: string;
    /**
     * Metadata that indicates whether the `supplementalDocumentsMustRead` property is editable.
     *
     */
    supplementalDocumentsMustReadMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, account users must view supplemental documents when signing.
     */
    supplementalDocumentsMustView?: string;
    /**
     * Metadata that indicates whether the `supplementalDocumentsMustView` property is editable.
     *
     */
    supplementalDocumentsMustViewMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether or not API calls require a x509 cert in the header of the call.
     */
    suppressCertificateEnforcement?: string;
    /**
     * Metadata that indicates whether the `suppressCertificateEnforcement` property is editable.
     *
     */
    suppressCertificateEnforcementMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Account-wide tab settings.
     */
    tabAccountSettings?: TabAccountSettings;
    /**
     * Specifies the time zone
     * to use with the API.
     *
     * Valid values are:
     *
     * - `TZ_01_AfghanistanStandardTime`
     * - `TZ_02_AlaskanStandardTime`
     * - `TZ_03_ArabStandardTime`
     * - `TZ_04_ArabianStandardTime`
     * - `TZ_05_ArabicStandardTime`
     * - `TZ_06_ArgentinaStandardTime`
     * - `TZ_07_AtlanticStandardTime`
     * - `TZ_08_AUS_CentralStandardTime`
     * - `TZ_09_AUS_EasternStandardTime`
     * - `TZ_10_AzerbaijanStandardTime`
     * - `TZ_11_AzoresStandardTime`
     * - `TZ_12_BangladeshStandardTime`
     * - `TZ_13_CanadaCentralStandardTime`
     * - `TZ_14_CapeVerdeStandardTime`
     * - `TZ_15_CaucasusStandardTime`
     * - `TZ_16_CentralAustraliaStandardTime`
     * - `TZ_17_CentralAmericaStandardTime`
     * - `TZ_18_CentralAsiaStandardTime`
     * - `TZ_19_CentralBrazilianStandardTime`
     * - `TZ_20_CentralEuropeStandardTime`
     * - `TZ_21_CentralEuropeanStandardTime`
     * - `TZ_22_CentralPacificStandardTime`
     * - `TZ_23_CentralStandardTime`
     * - `TZ_24_CentralStandardTimeMexico`
     * - `TZ_25_ChinaStandardTime`
     * - `TZ_26_DatelineStandardTime`
     * - `TZ_27_E_AfricaStandardTime`
     * - `TZ_28_E_AustraliaStandardTime`
     * - `TZ_29_E_EuropeStandardTime`
     * - `TZ_30_E_SouthAmericaStandardTime`
     * - `TZ_31_EasternStandardTime`
     * - `TZ_32_EgyptStandardTime`
     * - `TZ_33_EkaterinburgStandardTime`
     * - `TZ_34_FijiStandardTime`
     * - `TZ_35_FLE_StandardTime`
     * - `TZ_36_GeorgianStandardTime`
     * - `TZ_37_GMT_StandardTime`
     * - `TZ_38_GreenlandStandardTime`
     * - `TZ_39_GreenwichStandardTime`
     * - `TZ_40_GTB_StandardTime`
     * - `TZ_41_HawaiianStandardTime`
     * - `TZ_42_IndiaStandardTime`
     * - `TZ_43_IranStandardTime`
     * - `TZ_44_IsraelStandardTime`
     * - `TZ_45_JordanStandardTime`
     * - `TZ_46_KaliningradStandardTime`
     * - `TZ_47_KamchatkaStandardTime`
     * - `TZ_48_KoreaStandardTime`
     * - `TZ_49_MagadanStandardTime`
     * - `TZ_50_MauritiusStandardTime`
     * - `TZ_51_MidAtlanticStandardTime`
     * - `TZ_52_MiddleEastStandardTime`
     * - `TZ_53_MontevideoStandardTime`
     * - `TZ_54_MoroccoStandardTime`
     * - `TZ_55_MountainStandardTime`
     * - `TZ_56_MountainStandardTimeMMexico`
     * - `TZ_57_MyanmarStandardTime`
     * - `TZ_58_N_CentralAsiaStandardTime`
     * - `TZ_59_NamibiaStandardTime`
     * - `TZ_60_NepalStandardTime`
     * - `TZ_61_NewZealandStandardTime`
     * - `TZ_62_NewfoundlandStandardTime`
     * - `TZ_63_NorthAsiaEastStandardTime`
     * - `TZ_64_NorthAsiaStandardTime`
     * - `TZ_65_PacificSAStandardTime`
     * - `TZ_66_PacificStandardTime`
     * - `TZ_67_PacificStandardTimeMexico`
     * - `TZ_68_PakistanStandardTime`
     * - `TZ_69_ParaguayStandardTime`
     * - `TZ_70_RomanceStandardTime`
     * - `TZ_71_RussianStandardTime`
     * - `TZ_72_SAEasternStandardTime`
     * - `TZ_73_SAPacificStandardTime`
     * - `TZ_74_SAWesternStandardTime`
     * - `TZ_75_SamoaStandardTime`
     * - `TZ_76_SE_AsiaStandardTime`
     * - `TZ_77_SingaporeStandardTime`
     * - `TZ_78_SouthAfricaStandardTime`
     * - `TZ_79_SriLankaStandardTime`
     * - `TZ_80_SyriaStandardTime`
     * - `TZ_81_TaipeiStandardTime`
     * - `TZ_82_TasmaniaStandardTime`
     * - `TZ_83_TokyoStandardTime`
     * - `TZ_84_TongaStandardTime`
     * - `TZ_85_TurkeyStandardTime`
     * - `TZ_86_UlaanbaatarStandardTime`
     * - `TZ_87_US_EasternStandardTime`
     * - `TZ_88_USMountainStandardTime`
     * - `TZ_89_VenezuelaStandardTime`
     * - `TZ_90_VladivostokStandardTime`
     * - `TZ_91_W_AustraliaStandardTime`
     * - `TZ_92_W_CentralAfricaStandardTime`
     * - `TZ_93_W_EuropeStandardTime`
     * - `TZ_94_WestAsiaStandardTime`
     * - `TZ_95_WestPacificStandardTime`
     * - `TZ_96_YakutskStandardTime`
     *
     */
    timezoneOffsetAPI?: string;
    /**
     * Metadata that indicates whether the `timezoneOffsetAPI` property is editable.
     *
     */
    timezoneOffsetAPIMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Specifies the time zone
     * to use in the UI.
     *
     * Valid values are:
     *
     * - `TZ_01_AfghanistanStandardTime`
     * - `TZ_02_AlaskanStandardTime`
     * - `TZ_03_ArabStandardTime`
     * - `TZ_04_ArabianStandardTime`
     * - `TZ_05_ArabicStandardTime`
     * - `TZ_06_ArgentinaStandardTime`
     * - `TZ_07_AtlanticStandardTime`
     * - `TZ_08_AUS_CentralStandardTime`
     * - `TZ_09_AUS_EasternStandardTime`
     * - `TZ_10_AzerbaijanStandardTime`
     * - `TZ_11_AzoresStandardTime`
     * - `TZ_12_BangladeshStandardTime`
     * - `TZ_13_CanadaCentralStandardTime`
     * - `TZ_14_CapeVerdeStandardTime`
     * - `TZ_15_CaucasusStandardTime`
     * - `TZ_16_CentralAustraliaStandardTime`
     * - `TZ_17_CentralAmericaStandardTime`
     * - `TZ_18_CentralAsiaStandardTime`
     * - `TZ_19_CentralBrazilianStandardTime`
     * - `TZ_20_CentralEuropeStandardTime`
     * - `TZ_21_CentralEuropeanStandardTime`
     * - `TZ_22_CentralPacificStandardTime`
     * - `TZ_23_CentralStandardTime`
     * - `TZ_24_CentralStandardTimeMexico`
     * - `TZ_25_ChinaStandardTime`
     * - `TZ_26_DatelineStandardTime`
     * - `TZ_27_E_AfricaStandardTime`
     * - `TZ_28_E_AustraliaStandardTime`
     * - `TZ_29_E_EuropeStandardTime`
     * - `TZ_30_E_SouthAmericaStandardTime`
     * - `TZ_31_EasternStandardTime`
     * - `TZ_32_EgyptStandardTime`
     * - `TZ_33_EkaterinburgStandardTime`
     * - `TZ_34_FijiStandardTime`
     * - `TZ_35_FLE_StandardTime`
     * - `TZ_36_GeorgianStandardTime`
     * - `TZ_37_GMT_StandardTime`
     * - `TZ_38_GreenlandStandardTime`
     * - `TZ_39_GreenwichStandardTime`
     * - `TZ_40_GTB_StandardTime`
     * - `TZ_41_HawaiianStandardTime`
     * - `TZ_42_IndiaStandardTime`
     * - `TZ_43_IranStandardTime`
     * - `TZ_44_IsraelStandardTime`
     * - `TZ_45_JordanStandardTime`
     * - `TZ_46_KaliningradStandardTime`
     * - `TZ_47_KamchatkaStandardTime`
     * - `TZ_48_KoreaStandardTime`
     * - `TZ_49_MagadanStandardTime`
     * - `TZ_50_MauritiusStandardTime`
     * - `TZ_51_MidAtlanticStandardTime`
     * - `TZ_52_MiddleEastStandardTime`
     * - `TZ_53_MontevideoStandardTime`
     * - `TZ_54_MoroccoStandardTime`
     * - `TZ_55_MountainStandardTime`
     * - `TZ_56_MountainStandardTimeMMexico`
     * - `TZ_57_MyanmarStandardTime`
     * - `TZ_58_N_CentralAsiaStandardTime`
     * - `TZ_59_NamibiaStandardTime`
     * - `TZ_60_NepalStandardTime`
     * - `TZ_61_NewZealandStandardTime`
     * - `TZ_62_NewfoundlandStandardTime`
     * - `TZ_63_NorthAsiaEastStandardTime`
     * - `TZ_64_NorthAsiaStandardTime`
     * - `TZ_65_PacificSAStandardTime`
     * - `TZ_66_PacificStandardTime`
     * - `TZ_67_PacificStandardTimeMexico`
     * - `TZ_68_PakistanStandardTime`
     * - `TZ_69_ParaguayStandardTime`
     * - `TZ_70_RomanceStandardTime`
     * - `TZ_71_RussianStandardTime`
     * - `TZ_72_SAEasternStandardTime`
     * - `TZ_73_SAPacificStandardTime`
     * - `TZ_74_SAWesternStandardTime`
     * - `TZ_75_SamoaStandardTime`
     * - `TZ_76_SE_AsiaStandardTime`
     * - `TZ_77_SingaporeStandardTime`
     * - `TZ_78_SouthAfricaStandardTime`
     * - `TZ_79_SriLankaStandardTime`
     * - `TZ_80_SyriaStandardTime`
     * - `TZ_81_TaipeiStandardTime`
     * - `TZ_82_TasmaniaStandardTime`
     * - `TZ_83_TokyoStandardTime`
     * - `TZ_84_TongaStandardTime`
     * - `TZ_85_TurkeyStandardTime`
     * - `TZ_86_UlaanbaatarStandardTime`
     * - `TZ_87_US_EasternStandardTime`
     * - `TZ_88_USMountainStandardTime`
     * - `TZ_89_VenezuelaStandardTime`
     * - `TZ_90_VladivostokStandardTime`
     * - `TZ_91_W_AustraliaStandardTime`
     * - `TZ_92_W_CentralAfricaStandardTime`
     * - `TZ_93_W_EuropeStandardTime`
     * - `TZ_94_WestAsiaStandardTime`
     * - `TZ_95_WestPacificStandardTime`
     * - `TZ_96_YakutskStandardTime`
     *
     */
    timezoneOffsetUI?: string;
    /**
     * Metadata that indicates whether the `timezoneOffsetUI` property is editable.
     *
     */
    timezoneOffsetUIMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     *
     */
    universalSignatureOptIn?: string;
    /**
     * Reserved for DocuSign.
     *
     */
    useAccountLevelEmail?: string;
    /**
     * Metadata that indicates whether the `useAccountLevelEmail` property is editable.
     *
     */
    useAccountLevelEmailMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account uses an Electronic Record and
     * Signature Disclosure Statement.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    useConsumerDisclosure?: string;
    /**
     * Metadata that indicates whether the `useConsumerDisclosure` property is editable.
     *
     */
    useConsumerDisclosureMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement.
     */
    useConsumerDisclosureWithinAccount?: string;
    /**
     * Metadata that indicates whether the `useConsumerDisclosureWithinAccount` property is editable.
     *
     */
    useConsumerDisclosureWithinAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     *
     */
    useDerivedKeys?: string;
    /**
     * Metadata that indicates whether the `useDerivedKeys` property is editable.
     *
     */
    useDerivedKeysMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * signers
     * are required to use Express Digital Signatures.
     *
     */
    useDocuSignExpressSignerCertificate?: string;
    /**
     * Metadata that indicates whether the `useDocuSignExpressSignerCertificate` property is editable.
     *
     */
    useDocuSignExpressSignerCertificateMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    useMultiAppGroupsData?: string;

    useMultiAppGroupsDataMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     *
     */
    useNewBlobForPdf?: string;
    /**
     * Metadata that indicates whether the `useNewBlobForPdf` property is editable.
     *
     */
    useNewBlobForPdfMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * signers are
     * required to use SAFE digital signatures.
     *
     */
    useSAFESignerCertificates?: string;
    /**
     * Metadata that indicates whether the `useSAFESignerCertificates` property is editable.
     *
     */
    useSAFESignerCertificatesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**,
     * the account can use the API.
     *
     * **Note**: Only SysAdmin users can change this setting.
     *
     */
    usesAPI?: string;
    /**
     * Metadata that indicates whether the `usesAPI` property is editable.
     *
     */
    usesAPIMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether the account uses the digital signature provider platform to eSign.
     */
    useSignatureProviderPlatform?: string;
    /**
     * Metadata that indicates whether the `useSignatureProviderPlatform` property is editable.
     *
     */
    useSignatureProviderPlatformMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Boolean that specifies whether validations on recipient email domains are allowed.
     */
    validationsAllowed?: string;
    /**
     * Metadata that indicates whether the `validationsAllowed` property is editable.
     *
     */
    validationsAllowedMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Valid values are:
     *
     * - `docusign`
     * - `account`
     *
     */
    validationsBrand?: string;
    /**
     * Metadata that indicates whether the `validationsBrand` property is editable.
     *
     */
    validationsBrandMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Valid values are:
     *
     * - `none`
     * - `monthly`
     *
     */
    validationsCadence?: string;
    /**
     * Metadata that indicates whether the `validationsCadence` property is editable.
     *
     */
    validationsCadenceMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * enables validations.
     *
     */
    validationsEnabled?: string;
    /**
     * Metadata that indicates whether the `validationsEnabled` property is editable.
     *
     */
    validationsEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Valid values are:
     *
     * - `none`
     * - `life_sciences_part11`
     *
     */
    validationsReport?: string;
    /**
     * Metadata that indicates whether the `validationsReport` property is editable.
     *
     */
    validationsReportMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * the
     * [watermark feature](https://support.docusign.com/en/articles/How-do-I-manage-the-watermark-for-In-Process-envelopes-sent-from-my-account)
     * is enabled for the account.
     *
     */
    waterMarkEnabled?: string;
    /**
     * Metadata that indicates whether the `waterMarkEnabled` property is editable.
     *
     */
    waterMarkEnabledMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If **true**,
     * sent reminders are included in the envelope history.
     */
    writeReminderToEnvelopeHistory?: string;
    /**
     * Metadata that indicates whether the `writeReminderToEnvelopeHistory` property is editable.
     *
     */
    writeReminderToEnvelopeHistoryMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The smallest screen allowed.
     */
    wurflMinAllowableScreenSize?: string;
    /**
     * Metadata that indicates whether the `wurflMinAllowableScreenSize` property is editable.
     *
     */
    wurflMinAllowableScreenSizeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}
/**
 * Contains shared access information.
 */
export interface AccountSharedAccess {
    /**
     * The account ID associated with the envelope.
     */
    accountId?: string;
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * A complex type containing an errorCode and message identifying the error that occurred.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * A list of shared access information of envelope and templates for the users specified in the request.
     */
    sharedAccess?: /* Information about shared items. */ MemberSharedItems[];
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}
/**
 * Contains information abotu the signature provider associated with the Identity Verification workflow.
 * If empty, then this specific workflow is not intended for signers.
 *
 */
export interface AccountSignatureProvider {
    /**
     * Reserved for DocuSign.
     */
    isRequired?: string;
    /**
     * Reserved for DocuSign.
     */
    priority?: string;
    /**
     * Reserved for DocuSign.
     */
    signatureProviderDisplayName?: string;
    /**
     * Reserved for DocuSign.
     */
    signatureProviderId?: string;
    /**
     * The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. For details,
     * see [the current provider list](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
     * You can also retrieve the list by using the [AccountSignatureProviders::List](https://developers.docusign.com/esign-rest-api/reference/Accounts/AccountSignatureProviders/list/)
     * method.
     *
     * Example: `universalsignaturepen_default`
     *
     *
     */
    signatureProviderName?: string;
    /**
     * Reserved for DocuSign.
     */
    signatureProviderOptionsMetadata?: /* Reserved for DocuSign. */ AccountSignatureProviderOption[];
    /**
     * Reserved for DocuSign.
     */
    signatureProviderRequiredOptions?: /* Contains additional information that a specific signature provider requires. */ SignatureProviderRequiredOption[];
}
/**
 * Reserved for DocuSign.
 */
export interface AccountSignatureProviderOption {
    /**
     * Reserved for DocuSign.
     */
    signatureProviderOptionDisplayName?: string;
    /**
     * Reserved for DocuSign.
     */
    signatureProviderOptionId?: string;
    /**
     * Reserved for DocuSign.
     */
    signatureProviderOptionName?: string;
}
/**
 * This resource provides information on the Standards Based Signature providers that have been provisioned for an account.
 *
 */
export interface AccountSignatureProviders {
    /**
     * Names of electronic or digital signature providers that can be used.
     */
    signatureProviders?: AccountSignatureProvider[];
}
/**
 * Tab settings determine the tab types and tab functionality that are enabled for an account.
 */
export interface AccountTabSettings {
    /**
     * When set to **true**, account users can set a tab order for the signing process.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowTabOrder?: string;
    /**
     * Metadata that indicates whether the `allowTabOrder` property is editable.
     *
     */
    allowTabOrderMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, approve and decline tabs are enabled.
     */
    approveDeclineTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `approveDeclineTabs` property is editable.
     *
     */
    approveDeclineTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, [calculated fields](https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields) are enabled for tabs.
     */
    calculatedFieldsEnabled?: string;
    /**
     * Metadata that indicates whether the `calculatedFields` property is editable.
     *
     */
    calculatedFieldsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, checkbox tabs are enabled.
     */
    checkboxTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `checkBoxTabs` property is editable.
     */
    checkBoxTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, regular expressions are enabled for tabs that contain data fields.
     */
    dataFieldRegexEnabled?: string;
    /**
     * Metadata that indicates whether the `dataFieldRegex` property is editable.
     *
     */
    dataFieldRegexMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, setting character limits for input fields is enabled.
     */
    dataFieldSizeEnabled?: string;
    /**
     * Metadata that indicates whether the `dataFieldSize` property is editable.
     *
     */
    dataFieldSizeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    drawTabsEnabled?: string;

    drawTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    firstLastEmailTabsEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    firstLastEmailTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, list tabs are enabled.
     */
    listTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `listTabs` property is editable.
     *
     */
    listTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, note tabs are enabled.
     */
    noteTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `noteTabs` property is editable.
     *
     */
    noteTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, radio button tabs are enabled.
     */
    radioTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `radioTabs` property is editable.
     *
     */
    radioTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, saving custom tabs is enabled.
     */
    savingCustomTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `savingCustomTabs` property is editable.
     *
     */
    savingCustomTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    senderToChangeTabAssignmentsEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    senderToChangeTabAssignmentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, shared custom tabs are enabled.
     */
    sharedCustomTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `sharedCustomTabs` property is editable.
     *
     */
    sharedCustomTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, [data
     * labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    tabDataLabelEnabled?: string;
    /**
     * Metadata that indicates whether the `tabDataLabel` property is editable.
     *
     */
    tabDataLabelMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    tabLocationEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    tabLocationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, tab locking is enabled.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    tabLockingEnabled?: string;
    /**
     * Metadata that indicates whether the `tabLocking` property is editable.
     *
     */
    tabLockingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    tabScaleEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    tabScaleMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, text formatting (such as font type, font size,
     * font color, bold, italic, and underline) is enabled for tabs that
     * support formatting.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    tabTextFormattingEnabled?: string;
    /**
     * Metadata that indicates whether the `tabTextFormatting` property is editable.
     *
     */
    tabTextFormattingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, text tabs are enabled.
     */
    textTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `textTabs` property is editable.
     *
     */
    textTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}
/**
 * An object that defines the options that are available to non-administrators in the UI.
 */
export interface AccountUISettings {
    adminMessage?: AdminMessage;

    askAnAdmin?: AskAnAdmin;

    enableAdminMessage?: string;

    enableAdminMessageMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    enableEasySignCanUseMultiTemplateApply?: string;

    enableEasySignCanUseMultiTemplateApplyMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    enableEasySignTemplateUpload?: string;

    enableEasySignTemplateUploadMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    enableEnvelopeCopyWithData?: string;

    enableEnvelopeCopyWithDataMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    hideSendAnEnvelope?: string;

    hideSendAnEnvelopeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the **Templates** menu is hidden from account users who are not Admins. The default value is **false**.
     */
    hideUseATemplate?: string;

    hideUseATemplateInPrepare?: string;

    hideUseATemplateInPrepareMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    hideUseATemplateMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    orderBasedRecipientIdGeneration?: string;

    orderBasedRecipientIdGenerationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    removeEnvelopeForwarding?: string;

    removeEnvelopeForwardingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    shouldRedactAccessCode?: string;

    shouldRedactAccessCodeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    uploadNewImageToSignOrInitial?: string;

    uploadNewImageToSignOrInitialMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}

export interface AccountWatermarks {
    displayAngle?: string;

    enabled?: string;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * A unique ID for the Salesforce object.
     */
    id?: string;

    imageBase64?: string;

    transparency?: string;

    watermarkText?: string;
}
/**
 * Account management
 */
export interface Accounts {
    /**
     * The GUID associated with the account ID.
     */
    accountIdGuid?: string;
    /**
     * The name on the account.
     */
    accountName?: string;
    /**
     * The list of
     * [account settings][accountsettings]
     * that determine
     * the features available for the account.
     * Note that some features are determined
     * by the plan used to create the account and cannot be overridden.
     *
     * [accountsettings]: https://developers.docusign.com/esign-rest-api/reference/Accounts/Accounts/create/#account-settings
     *
     */
    accountSettings?: /* Contains account settings information. Used in requests to set property values. Used in responses to report property values. */ AccountSettingsInformation;

    /**
     * When set to **true**, the transaction rooms feature exposed through the Workspaces API is enabled.
     */
    allowTransactionRooms?: string;
    /**
     * Number of days remaining in the current billing period.
     */
    billingPeriodDaysRemaining?: string;
    /**
     * The billing period end date in UTC timedate format.
     */
    billingPeriodEndDate?: string;
    /**
     * The number of envelopes that can be sent in the current billing period (can be unlimited).
     */
    billingPeriodEnvelopesAllowed?: string;
    /**
     * The number of envelopes that have been sent in the current billing period.
     */
    billingPeriodEnvelopesSent?: string;
    /**
     * The billing period start date in UTC timedate format.
     */
    billingPeriodStartDate?: string;
    /**
     * The type of billing method on the account. Valid values are:
     *
     * - `direct`
     * - `web`
     */
    billingProfile?: string;
    /**
     * When set to **true**, specifies that you can upgrade the account through the API. For GET methods, you must set the `include_metadata`
     * query parameter to **true** for this property to appear in the response.
     */
    canUpgrade?: string;

    connectPermission?: string;
    /**
     * The creation date of the account in UTC timedate format.
     */
    createdDate?: string;
    /**
     * The currency code for the account, based on the [ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).
     */
    currencyCode?: string;
    /**
     * ID of the plan used to create this account.
     */
    currentPlanId?: string;
    /**
     * The code that identifies the billing plan groups and plans for the new account.
     */
    distributorCode?: string;
    /**
     * URL of the landing page used to create the account.
     */
    docuSignLandingUrl?: string;

    dssValues?: {
        [name: string]: string;
    };
    /**
     * When **true**, the ability to send envelopes is blocked. When **false**, envelopes can be sent.
     */
    envelopeSendingBlocked?: string;
    /**
     * The price of sending an envelope, represented in the account's local currency.
     */
    envelopeUnitPrice?: string;
    /**
     * The Account ID displayed on the user's Account page.
     */
    externalAccountId?: string;
    /**
     *  A complex element that contains up to four Question/Answer pairs for forgotten password information for a user.
     */
    forgottenPasswordQuestionsCount?: string;
    /**
     * When **true**, the account has been downgraded from a premium account type. Otherwise **false**.
     */
    isDowngrade?: string;
    /**
     * The payment method used for the billing plan. Valid values are:
     *
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
    /**
     * Identifies the type of plan. Examples include:
     *
     * - `business`
     * - `corporate`
     * - `enterprise`
     * - `free`
     */
    planClassification?: string;
    /**
     * The date that the current plan will end.
     */
    planEndDate?: string;
    /**
     * The name of the billing plan used for the account.
     *
     * Examples:
     *
     * - `Personal - Annual`
     * - `Unlimited Envelope Subscription - Annual Billing`
     */
    planName?: string;
    /**
     * The date that the Account started using the current plan.
     */
    planStartDate?: string;

    recipientDomains?: RecipientDomain[];
    /**
     * The number of active users the account can have at one time.
     */
    seatsAllowed?: string;
    /**
     * The number of users currently active on the account.
     */
    seatsInUse?: string;
    /**
     * The status of the account content per (Title 21 CFR Part 11)
     * [https://www.fda.gov/regulatory-information/search-fda-guidance-documents/part-11-electronic-records-electronic-signatures-scope-and-application].
     * This regulation defines the criteria under which electronic records and electronic signatures are considered trustworthy.
     */
    status21CFRPart11?: string;
    /**
     * The date on which the account was suspended.
     */
    suspensionDate?: string;
    /**
     * Indicates whether the account is currently suspended.
     */
    suspensionStatus?: string;
}
/**
 * Contains information about add ons.
 */
export interface AddOn {
    /**
     * Reserved for DocuSign.
     */
    active?: string;
    /**
     * Reserved for DocuSign.
     */
    addOnId?: string;
    /**
     * A unique ID for the Salesforce object.
     */
    id?: string;
    /**
     * Reserved for DocuSign.
     */
    name?: string;
}
/**
 * Contains address information.
 */
export interface AddressInformation {
    /**
     * The first line of the user's address.
     * Maximum length: 100 characters.
     */
    address1?: string;
    /**
     * The second line of the user's address.
     * Maximum length: 100 characters.
     */
    address2?: string;
    /**
     * The user's city. Maximum length: 40 characters.
     */
    city?: string;
    /**
     * The user's country. Maximum length: 50 characters.
     */
    country?: string;
    /**
     * A fax number associated with the address, if one is available.
     */
    fax?: string;
    /**
     * A phone number associated with the address.
     */
    phone?: string;
    /**
     * The user's postal code. Maximum length: 20 characters.
     */
    postalCode?: string;
    /**
     * The user's state or province. Maximum length: 40 characters.
     */
    stateOrProvince?: string;
}

export interface AddressInformationInput {
    /**
     * A complex type that contains the following information for the new account: `address1`, `address2`, `city`, `country`, `fax`, `phone`, `postalCode` and `stateOrProvince`.
     *
     * The maximum characters for the strings are:
     * * `address1`, `address2`, `city`, `country` and `stateOrProvince`: 100 characters
     * * `postalCode`, `phone`, and `fax`: 20 characters
     *
     * **Note:** If country is US (United States), `stateOrProvince` codes are validated. Otherwise, `stateOrProvince` is treated as a non-validated string used to specify a state,
     * province, or region.
     */
    addressInformation?: /* Contains address information. */ AddressInformation;
    /**
     * Specifies the display level for the recipient. Valid values are:
     * * `ReadOnly`
     * * `Editable`
     * * `DoNotDisplay`
     */
    displayLevelCode?: string;
    /**
     * A Boolean value that specifies whether the information must be returned in the response.
     */
    receiveInResponse?: string;
}

export interface AdminMessage {
    baseMessage?: string;

    moreInformation?: string;
}
/**
 * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
 */
export interface Agent {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Metadata that indicates whether the `accessCode` property is editable. Read only.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
     */
    addAccessCodeToEmail?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app.
     * Authenticating the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**,
     * an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group,
     * only the user who previously completed may sign again. Read only.
     */
    completedCount?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status
     * but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * The reason the recipient declined the document. Read only.
     */
    declinedReason?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient.
     * For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * The email id of the agent. Notification of the document to sign is sent to this email id.
     *
     * Maximum length: 100 characters.
     */
    email?: string;
    /**
     * Metadata that indicates whether the `email` property is editable. Read only.
     */
    emailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients,
     * the other recipients will inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option,
     * the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is
     * clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's
     * system (the server responding to the URL) must request a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign.
     * The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this.
     * In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes
     * through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets
     * `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending
     * application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal
     * DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard
     * signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are:
     * `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope.
     * The merge fields are enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility`
     * property must be set to **true** for the envelope to use this.
     *
     * When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an
     * administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope,
     * unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients,
     * unless they are specifically excluded using this setting when an envelope is sent.
     */
    excludedDocuments?: string[];
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The recipient's first name. Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * Metadata that indicates whether the `firstame` property is editable. Read only.
     */
    firstNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    fullName?: string;
    /**
     * Reserved for DocuSign.
     */
    fullNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses.
     * The names of these authentication types appear in the web console sending export interface in the Identify list for a recipient.
     * This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $.
     * To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add
     * a phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings
     * are used as the default settings for the recipient's account.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * The recipient's last name.
     */
    lastName?: string;
    /**
     * Metadata that indicates whether the `lastName` property is editable. Read only.
     */
    lastNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * The full legal name of the recipient. Maximum Length: 100 characters.
     *
     * **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A note sent to the recipient in the signing email.
     * This note is unique to this recipient.
     * In the user interface,
     * it appears near the upper left corner
     * of the document
     * on the signing screen.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * Metadata that indicates whether the `note` property is editable. Read only.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     *
     *
     */
    phoneAuthentication?: RecipientPhoneAuthentication;
    /**
     * Reserved for DocuSign.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Information about the recipient's authentication status. Read only.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date,
     * or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing
     * order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     */
    requireIdLookup?: string;
    /**
     * Metadata that indicates whether the `requireIdLookup` property is editable. Read only.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    signedDateTime?: string;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     * For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients.
     * However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value,
     * such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * Metadata that indicates whether the `signingGroupId` property is editable. Read only.
     */
    signingGroupIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
    /**
     * A complex type that contains information about users in the signing group.
     */
    signingGroupUsers?: UserInfo[];
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the element `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * The recipient's status. Read only.
     *
     * Possible values:
     *
     * - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform
     * senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
     * - `declined`: The recipient declined to sign the document(s) in the envelope.
     * - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the
     * documents in an envelope.
     * - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing,
     * after which the recipient's status automatically switches to `completed`.
     */
    status?: string;
    /**
     * The code associated with the recipient's status. Read only.
     */
    statusCode?: string;
    /**
     * When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
     */
    suppressEmails?: string;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * The total number of tabs in the documents. Read only.
     */
    totalTabCount?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}
/**
 * Contains API request log information.
 */
export interface ApiRequestLog {
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;
    /**
     * A sender-defined description of the line item.
     *
     */
    description?: string;

    requestLogId?: string;
    /**
     * The status of the item.
     */
    status?: string;
}
/**
 * Contains information about mutiple API request logs.
 */
export interface ApiRequestLogsResult {
    /**
     * Reserved: TBD
     */
    apiRequestLogs?: /* Contains API request log information. */ ApiRequestLog[];
}
/**
 * Contains information about an APP store product.
 */
export interface AppStoreProduct {
    marketPlace?: string;
    /**
     * The Product ID from the AppStore.
     */
    productId?: string;
}
/**
 * Contains information about an APP store receipt.
 */
export interface AppStoreReceipt {
    /**
     * The Product ID from the AppStore.
     */
    productId?: string;
    /**
     * Reserved: TBD
     */
    receiptData?: string;
}
/**
 * A tab that allows the recipient to approve documents
 * without placing a signature or initials on the
 * document.
 *
 */
export interface Approve {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     *  Specifies the approval text that displays in the tab.
     */
    buttonText?: string;
    /**
     * Metadata that indicates whether the `buttonText` property is editable.
     */
    buttonTextMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab ID for the custom tab to be applied. You can only use this when adding new tabs for a recipient.
     * When used, the new tab inherits all of the properties of the custom tab.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`,
     * the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * Specifies the page number on which the tab is located. For supplemental documents, this value must be `1`.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the vertical offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface AskAnAdmin {
    email?: string;

    message?: string;

    name?: string;

    phone?: string;
}
/**
 * Contains information about an attachment.
 */
export interface Attachment {
    /**
     * Valid values are `sender` and `senderAndAllRecipients`.
     */
    accessControl?: string;
    /**
     * The unique identifier for the attachment.
     */
    attachmentId?: string;
    /**
     * Specifies the type of the attachment for the recipient. Possible values are:
     *
     * - `.htm`
     * - `.xml`
     */
    attachmentType?: string;
    /**
     * A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size.
     */
    data?: string;
    /**
     * A label for the attachment. Potential values include:
     *
     * - `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms) provide a step-by-step, mobile-ready experience to help
     * signers easily complete long or complex forms.
     * - `eventNotifications`: A list of envelope-level event statuses that trigger Connect to send updates to the endpoint specified in the `url` property.
     *
     */
    label?: string;
    /**
     * The name of the attachment.
     */
    name?: string;
    /**
     * The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl`
     * property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads.
     */
    remoteUrl?: string;
}
/**
 * Contains information about the method used for authentication.
 */
export interface AuthenticationMethod {
    /**
     * Indicates the type of authentication. Valid values are:
     *
     * - `PhoneAuth`
     * - `STAN`
     * - `ISCheck`
     * - `OFAC`
     * - `AccessCode`
     * - `AgeVerify`
     * - `SSOAuth`
     */
    authenticationType?: string;
    /**
     * The last provider that authenticated the user.
     */
    lastProvider?: string;
    /**
     *  The data and time the user last used the authentication method.
     */
    lastTimestamp?: string;
    /**
     * The number of times the authentication method was used.
     */
    totalCount?: string;
}
/**
 * A complex element that contains information about a user's authentication status.
 */
export interface AuthenticationStatus {
    /**
     * The result of a user's attempt to authenticate by using an access code. It returns:
     *
     * - `Status`: `Pass` or `Fail`.
     * - `dateTime`: The date and time that the event occurred.
     * - `FailureDescription`: A string containing the details about a failed authentication.
     * - `VendorFailureStatusCode`: A string containing the vendor's status code for a failed authentication.
     */
    accessCodeResult?: /* Information about the result of an event. */ EventResult;
    /**
     * The result of an age verification check. It returns:
     *
     * - `Status`: `Pass` or `Fail`.
     * - `dateTime`: The date and time that the event occurred.
     * - `FailureDescription`: A string containing the details about a failed authentication.
     * - `VendorFailureStatusCode`: A string containing the vendor's status code for a failed authentication.
     */
    ageVerifyResult?: /* Information about the result of an event. */ EventResult;
    /**
     * Deprecated.
     */
    anySocialIDResult?: /* Information about the result of an event. */ EventResult;
    /**
     * Deprecated.
     */
    facebookResult?: /* Information about the result of an event. */ EventResult;
    /**
     * Deprecated.
     */
    googleResult?: /* Information about the result of an event. */ EventResult;
    /**
     * The result of an [Identity Verification][IDV] workflow.
     *
     * [IDV]: /esign/restapi/Accounts/IdentityVerifications/
     */
    identityVerificationResult?: /* Information about the result of an event. */ EventResult;
    /**
     * The result of an ID lookup authentication check. It returns:
     *
     * - `Status`: `Pass` or `Fail`.
     * - `dateTime`: The date and time that the event occurred.
     * - `FailureDescription`: A string containing the details about a failed authentication.
     * - `VendorFailureStatusCode`: A string containing the vendor's status code for a failed authentication.
     */
    idLookupResult?: /* Information about the result of an event. */ EventResult;
    /**
     * The result of the user's answers to ID challenge questions. It returns:
     *
     * - `Status`: `Pass` or `Fail`.
     * - `dateTime`: The date and time that the event occurred.
     * - `FailureDescription`: A string containing the details about a failed authentication.
     * - `VendorFailureStatusCode`: A string containing the vendor's status code for a failed authentication.
     */
    idQuestionsResult?: /* Information about the result of an event. */ EventResult;
    /**
     * Deprecated.
     */
    linkedinResult?: /* Information about the result of an event. */ EventResult;
    /**
     * Deprecated.
     */
    liveIDResult?: /* Information about the result of an event. */ EventResult;
    /**
     * The result of an Office of Foreign Asset Control (OFAC) check. It returns:
     *
     * - `Status`: `Pass` or `Fail`.
     * - `dateTime`: The date and time that the event occurred.
     * - `FailureDescription`: A string containing the details about a failed authentication.
     * - `VendorFailureStatusCode`: A string containing the vendor's status code for a failed authentication.
     */
    ofacResult?: /* Information about the result of an event. */ EventResult;
    /**
     * Deprecated.
     */
    openIDResult?: /* Information about the result of an event. */ EventResult;
    /**
     * The result of the user's attempt to authenticate by using two-factor authentication (2FA) through phone messaging. It returns:
     *
     * - `Status`: `Pass` or `Fail`.
     * - `dateTime`: The date and time that the event occurred.
     * - `FailureDescription`: A string containing the details about a failed authentication.
     * - `VendorFailureStatusCode`: A string containing the vendor's status code for a failed authentication.
     */
    phoneAuthResult?: /* Information about the result of an event. */ EventResult;
    /**
     * Success/failure result of authentication using sign-in with a Salesforce account. It returns:
     *
     * - `Status`: `Pass` or `Fail`.
     * - `dateTime`: The date and time that the event occurred.
     * - `FailureDescription`: A string containing the details about a failed authentication.
     * - `VendorFailureStatusCode`: A string containing the vendor's status code for a failed authentication.
     */
    salesforceResult?: /* Information about the result of an event. */ EventResult;
    /**
     * The result of the user's attempt to authenticate by using a signature provider.
     */
    signatureProviderResult?: /* Information about the result of an event. */ EventResult;
    /**
     * The result of the user's attempt to authenticate by using two-factor authentication (2FA) through SMS messaging on a mobile phone.
     */
    smsAuthResult?: /* Information about the result of an event. */ EventResult;
    /**
     * The result of a Student Authentication Network (STAN) authentication check. It returns:
     *
     * - `Status`: `Pass` or `Fail`.
     * - `dateTime`: The date and time that the event occurred.
     * - `FailureDescription`: A string containing the details about a failed authentication.
     * - `VendorFailureStatusCode`: A string containing the vendor's status code for a failed authentication.
     */
    sTANPinResult?: /* Information about the result of an event. */ EventResult;
    /**
     * Deprecated.
     */
    twitterResult?: /* Information about the result of an event. */ EventResult;
    /**
     * Deprecated.
     */
    yahooResult?: /* Information about the result of an event. */ EventResult;
}
/**
 * The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses
 * that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
 *
 */
export interface BCCEmailArchive {
    /**
     * A list of changes to the BCC email archive configuration.
     */
    bccEmailArchiveHistory?: /* Contains details about the history of the BCC email archive configuration. */ BccEmailArchiveHistory[];
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}
/**
 * Contains information about the BCC email address.
 */
export interface BccEmailAddress {
    /**
     * Only users with canManageAccount setting can use this option. An array of up to 5 email addresses the envelope is sent to as a BCC email.
     *
     * Example: If your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC
     * Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
     */
    bccEmailAddressId?: string;
    /**
     * Specifies the BCC email address. DocuSign verifies that the email format is correct, but does not verify that the email is active.Using this overrides the BCC
     * for Email Archive information setting for this envelope.
     *
     * Maximum of length: 100 characters.
     */
    email?: string;
}
/**
 * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
 */
export interface BccEmailArchive {
    /**
     * The id of the account that owns the BCC email archive configuration.
     */
    accountId?: string;
    /**
     * The id of the BCC email archive configuration.
     */
    bccEmailArchiveId?: string;
    /**
     * The UTC DateTime when the BCC email archive configuration was created.
     */
    created?: string;
    /**
     * Details about the user who created the BCC email archive configuration.
     */
    createdBy?: UserInfo;
    /**
     * The BCC email address to use for archiving DocuSign messages.
     *
     * Example: customer_bcc@example.com
     */
    email?: string;
    /**
     * The GUID of the activation email message sent to the BCC email address.
     */
    emailNotificationId?: string;
    /**
     * The UTC DateTime when the BCC email archive configuration was last modified.
     */
    modified?: string;
    /**
     * Details about the user who last modified the BCC email archive configuration.
     */
    modifiedBy?: UserInfo;
    /**
     * The status of the BCC email address. Possible values are:
     *
     * - `activation_sent`: An activation link has been sent to the BCC email address.
     * - `active`: The BCC email address is actively used for archiving.
     * - `closed`: The BCC email address is no longer used for archiving.
     */
    status?: string;
    /**
     * The helper URI for retrieving the BCC email archive.
     */
    uri?: string;
}
/**
 * Contains details about the history of the BCC email archive configuration.
 */
export interface BccEmailArchiveHistory {
    /**
     * The id of the account that owns the BCC email archive configuration.
     */
    accountId?: string;
    /**
     * The action taken on the BCC email archive configuration.
     *
     * Examples:
     *
     * - `CREATED`: The BCC email archive configuration has been created.
     * - `UPDATED`: The BCC email address has been activated by clicking on the activation link in the activation email message.
     * - `CLOSED`: The BCC email address has been marked as closed is no longer used for archiving.
     */
    action?: string;
    /**
     * The BCC email address used to archive the emails that DocuSign generates.
     *
     * Example: customer_bcc@example.com
     */
    email?: string;
    /**
     * The UTC DateTime when the BCC email address was last modified.
     */
    modified?: string;
    /**
     * Details about the user who last modified the BCC email archive configuration.
     */
    modifiedBy?: UserInfo;
    /**
     * The status of the BCC email address. Possible values are:
     *
     * - `activation_sent`: An activation link has been sent to the BCC email address.
     * - `active`: The BCC email address is actively used for archiving.
     * - `closed`: The BCC email address is no longer used for archiving.
     */
    status?: string;
}

export interface BccEmailArchiveHistoryList {
    /**
     * A list of changes to the BCC email archive configuration.
     */
    bccEmailArchiveHistory?: /* Contains details about the history of the BCC email archive configuration. */ BccEmailArchiveHistory[];
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}
/**
 * Contains a list of BCC email archive configurations.
 */
export interface BccEmailArchiveList {
    /**
     * A list of  BCC email archive configurations.
     */
    bccEmailArchives?: BccEmailArchive[];
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}
/**
 * Contains information about a billing charge.
 */
export interface BillingCharge {
    /**
     * Reserved: TBD
     */
    allowedQuantity?: string;
    /**
     * Reserved: TBD
     */
    blocked?: string;
    /**
     * Provides information on what services the charge item is for.
     *
     * The following table provides a description of the different chargeName values available at this time.
     *
     * | chargeName | Description |
     * | --- | --- |
     * | id_check | ID Check Charge |
     * | in_person_signing | In Person Signing charge |
     * | envelopes Included | Sent Envelopes for the account |
     * | age_verify | Age verification check |
     * | ofac | OFAC Check |
     * | id_confirm | ID confirmation check |
     * | student_authentication | STAN PIN authentication check |
     * | wet_sign_fax | Pages for returning signed documents by fax |
     * | attachment_fax | Pages for returning attachments by fax |
     * | phone_authentication | Phone authentication charge |
     * | powerforms | PowerForm envelopes sent |
     * | signer_payments | Payment processing charge |
     * | outbound_fax | Send by fax charge |
     * | bulk_recipient_envelopes | Bulk Recipient Envelopes sent |
     * | sms_authentications | SMS authentication charge |
     * | saml_authentications | SAML authentication charge |
     * | express_signer_certificate | DocuSign Express Certificate charge |
     * | personal_signer_certificate | Personal Signer Certificate charge |
     * | safe_certificate | SAFE BioPharma Signer Certificate charge |
     * | seats | Included active seats charge |
     * | open_trust_certificate | OpenTrust Signer Certificate charge |
     */
    chargeName?: string;
    /**
     * Reserved: TBD
     */
    chargeType?: string;
    /**
     * Reserved: TBD
     */
    chargeUnitOfMeasure?: string;

    discounts?: BillingDiscount[];

    firstEffectiveDate?: string;

    includedQuantity?: string;
    /**
     * Reserved: TBD
     */
    incrementalQuantity?: string;

    lastEffectiveDate?: string;

    prices?: BillingPrice[];
    /**
     * Reserved: TBD
     */
    unitPrice?: string;

    usedQuantity?: string;
}
/**
 * Defines a billing charge response object.
 */
export interface BillingChargeResponse {
    /**
     * Reserved: TBD
     */
    billingChargeItems?: /* Contains information about a billing charge. */ BillingCharge[];
}

export interface BillingDiscount {
    /**
     * Reserved: TBD
     */
    beginQuantity?: string;

    discount?: string;

    endQuantity?: string;
}

export interface BillingInvoice {
    /**
     * The total amount of the purchase.
     */
    amount?: string;
    /**
     * Reserved: TBD
     */
    balance?: string;
    /**
     * Reserved: TBD
     */
    dueDate?: string;

    invoiceId?: string;
    /**
     * Reserved: TBD
     */
    invoiceItems?: /* Contains information about an item on a billing invoice. */ BillingInvoiceItem[];
    /**
     * Reserved: TBD
     */
    invoiceNumber?: string;
    /**
     * Contains a URI for an endpoint that you can use to retrieve invoice information.
     */
    invoiceUri?: string;

    nonTaxableAmount?: string;

    pdfAvailable?: string;

    taxableAmount?: string;
}
/**
 * Contains information about an item on a billing invoice.
 */
export interface BillingInvoiceItem {
    /**
     * Reserved: TBD
     */
    chargeAmount?: string;
    /**
     * Reserved: TBD
     */
    chargeName?: string;
    /**
     * Reserved: TBD
     */
    invoiceItemId?: string;
    /**
     * The quantity of envelopes to add to the account.
     */
    quantity?: string;
    /**
     * Reserved: TBD
     */
    unitPrice?: string;
}
/**
 * Defines a billing invoice response object.
 */
export interface BillingInvoicesResponse {
    /**
     * Reserved: TBD
     */
    billingInvoices?: BillingInvoice[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
}

export interface BillingInvoicesSummary {
    /**
     * Reserved: TBD
     */
    billingInvoices?: BillingInvoice[];

    pastDueBalance?: string;

    paymentAllowed?: string;
}
/**
 * Contains information on a billing plan.
 */
export interface BillingPayment {
    /**
     * Reserved: TBD
     */
    amount?: string;
    /**
     * Reserved: TBD
     */
    invoiceId?: string;

    paymentId?: string;
}

export interface BillingPaymentItem {
    /**
     * The total amount of the purchase.
     */
    amount?: string;
    /**
     * A sender-defined description of the line item.
     *
     */
    description?: string;

    paymentDate?: string;

    paymentId?: string;
    /**
     * When set to **true**, a PDF version of the invoice is available.
     *
     * To get the PDF, make the call again and change "Accept:" in the header to "Accept: application/pdf".
     */
    paymentNumber?: string;
}

export interface BillingPaymentRequest {
    /**
     * The payment amount for the past due invoices. This value must match the pastDueBalance value retrieved using Get Past Due Invoices.
     */
    paymentAmount?: string;
}
/**
 * Defines an billing payment response object.
 */
export interface BillingPaymentResponse {
    /**
     * Reserved: TBD
     */
    billingPayments?: /* Contains information on a billing plan. */ BillingPayment[];
}
/**
 * Defines a billing payments response object.
 */
export interface BillingPaymentsResponse {
    /**
     * Reserved: TBD
     */
    billingPayments?: BillingPaymentItem[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
}
/**
 * Contains information about a billing plan.
 */
export interface BillingPlan {
    /**
     * Reserved for DocuSign.
     */
    appStoreProducts?: /* Contains information about an APP store product. */ AppStoreProduct[];
    /**
     * Contains the `currencyCode` and `currencySymbol` for the alternate currency values for `envelopeFee`, `fixedFee`, and `seatFee` that are configured for this plan feature set.
     */
    currencyPlanPrices?: CurrencyPlanPrice[];
    /**
     * When set to **true**, customer support is provided as part of the account plan.
     */
    enableSupport?: string;
    /**
     * The number of seats (users) included in the plan.
     */
    includedSeats?: string;
    /**
     * Any other percentage discount for the plan.
     *
     * Example: `"0.00"`
     */
    otherDiscountPercent?: string;
    /**
     * The payment cycle associated with the plan. The possible values are:
     *
     * - `Monthly`
     * - `Annually`
     */
    paymentCycle?: string;
    /**
     * The payment method used for the billing plan. Valid values are:
     *
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
    /**
     * The per-seat price associated with the plan.
     *
     * Example: `"456.0000"`
     */
    perSeatPrice?: string;
    /**
     * Identifies the type of plan. Examples include:
     *
     * - `business`
     * - `corporate`
     * - `enterprise`
     * - `free`
     */
    planClassification?: string;
    /**
     * Reserved for DocuSign.
     */
    planFeatureSets?: /* This object provides details about a feature set, or add-on product that is associated with an account.
        It is reserved for DocuSign internal use only. */ FeatureSet[];
    /**
     * DocuSign's id for the account plan.
     */
    planId?: string;
    planName?: string;
    /**
     * A complex type that returns information about any seat discounts. It contains the information `BeginSeatCount`, `EndSeatCount` and `SeatDiscountPercent`.
     */
    seatDiscounts?: /* This object contains information about a seat discount. */ SeatDiscount[];
    /**
     * The support incident fee charged for each support incident.
     *
     * Example: `"$0.00"`
     */
    supportIncidentFee?: string;
    /**
     * The support plan fee charged for this plan.
     *
     * Example: `"$0.00"`
     */
    supportPlanFee?: string;
}
/**
 * This object contains details about a billing plan.
 */
export interface BillingPlanInformation {
    appStoreReceipt?: /* Contains information about an APP store receipt. */ AppStoreReceipt;
    /**
     * The billing address for the account.
     */
    billingAddress?: /* Contains information about the address associated with the account. */ AccountAddress;
    /**
     * A complex type that has information about the credit card used to pay for this account.
     */
    creditCardInformation?: /* This object contains information about a credit card that is associated with an account. */ CreditCardInformation;
    /**
     * Information about the bank that processes direct debits for the payment plan.
     */
    directDebitProcessorInformation?: /* Contains information about a bank that processes a customer's direct debit payments. */ DirectDebitProcessorInformation;
    /**
     * (Optional) The user's reason for downgrading their billing plan.
     */
    downgradeReason?: string;
    /**
     * When set to **true**, customer support is provided as part of the account plan.
     */
    enableSupport?: string;
    /**
     * The number of seats (users) included in the plan.
     */
    includedSeats?: string;
    /**
     * Reserved for DocuSign.
     */
    incrementalSeats?: string;
    /**
     * The payment method used for the billing plan. Valid values are:
     *
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
    /**
     * Information about the entity that processes payments for the billing plan.
     */
    paymentProcessorInformation?: PaymentProcessorInformation;
    /**
     * An object used to identify the features and attributes of the account being created.
     */
    planInformation?: /* An object used to identify the features and attributes of the account being created. */ PlanInformation;
    /**
     * A complex type that contains properties for entering referral and discount information.
     */
    referralInformation?: ReferralInformation;
    /**
     * The renewal status of the account. Possible values are:
     *
     * - `auto`: The account automatically renews.
     * - `queued_for_close`: The account will be closed at the billingPeriodEndDate.
     * - queued_for_downgrade`: The account will be downgraded at the `billingPeriodEndDate`.
     */
    renewalStatus?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountAmount?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountFixedAmount?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountPercent?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountPeriods?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountSeatPriceOverride?: string;
}
/**
 * Information used to provide a preview of a billing plan.
 */
export interface BillingPlanPreview {
    /**
     * Specifies the ISO currency code for the account.
     */
    currencyCode?: string;

    invoice?: BillingInvoice;
    /**
     * When set to **true**, the billing plan is prorated.
     */
    isProrated?: string;

    subtotalAmount?: string;

    taxAmount?: string;

    totalAmount?: string;
}
/**
 * Defines a billing plan response object.
 */
export interface BillingPlanResponse {
    /**
     * An object that contains details about the billing plan.
     */
    billingPlan?: /* Contains information about a billing plan. */ BillingPlan;
    /**
     * A list of billing plans that the current billing plan can be rolled into.
     */
    successorPlans?: /* Contains information about a billing plan. */ BillingPlan[];
}
/**
 * Defines a billing plan update response object.
 */
export interface BillingPlanUpdateResponse {
    /**
     * The type of payment method used for the account. Valid values are:
     *
     * - `credit_card`
     * -
     */
    accountPaymentMethod?: string;

    billingPlanPreview?: /* Information used to provide a preview of a billing plan. */ BillingPlanPreview;
    /**
     * Specifies the ISO currency code for the account.
     */
    currencyCode?: string;
    /**
     * The number of seats (users) included in the plan.
     */
    includedSeats?: string;
    /**
     * The payment cycle associated with the plan. The possible values are:
     *
     * - `Monthly`
     * - `Annually`
     */
    paymentCycle?: string;
    /**
     * The payment method used for the billing plan. Valid values are:
     *
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
    /**
     * DocuSign's id for the account plan.
     */
    planId?: string;
    /**
     * The name of the billing plan used for the account.
     *
     * Examples:
     *
     * - `Personal - Annual`
     * - `Unlimited Envelope Subscription - Annual Billing`
     */
    planName?: string;
}
/**
 * Billing plans
 */
export interface BillingPlans {
    /**
     * The billing address for the account.
     */
    billingAddress?: /* Contains information about the address associated with the account. */ AccountAddress;
    /**
     * When set to **true**, the credit card address information is the same as that returned as the billing address.
     * If false, then the billing address is considered a billing contact address, and the credit card address can be different.
     */
    billingAddressIsCreditCardAddress?: string;
    /**
     * An object that contains details about the billing plan.
     */
    billingPlan?: /* Contains information about an account billing plan. */ AccountBillingPlan;
    /**
     * A complex type that has information about the credit card used to pay for this account.
     */
    creditCardInformation?: /* This object contains information about a credit card that is associated with an account. */ CreditCardInformation;
    /**
     * Information about the bank that processes direct debits for the payment plan.
     */
    directDebitProcessorInformation?: /* Contains information about a bank that processes a customer's direct debit payments. */ DirectDebitProcessorInformation;

    downgradePlanInformation?: DowngradePlanUpdateResponse;
    /**
     * The payment method used for the billing plan. Valid values are:
     *
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
    /**
     * Information about the entity that processes payments for the billing plan.
     */
    paymentProcessorInformation?: PaymentProcessorInformation;
    /**
     * Contains information describing discounts and promotions.
     */
    referralInformation?: ReferralInformation;
    /**
     * A list of billing plans that the current billing plan can be rolled into.
     */
    successorPlans?: /* Contains information about a billing plan. */ BillingPlan[];
}
/**
 * Defines a billing plans response object.
 */
export interface BillingPlansResponse {
    /**
     * Reserved: TBD
     */
    billingPlans?: /* Contains information about a billing plan. */ BillingPlan[];
}

export interface BillingPrice {
    /**
     * Reserved: TBD
     */
    beginQuantity?: string;

    endQuantity?: string;
    /**
     * Reserved: TBD
     */
    unitPrice?: string;
}
/**
 * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
 */
export interface Brand {
    /**
     * The name of the company associated with the brand.
     */
    brandCompany?: string;
    /**
     * The id of the brand.
     */
    brandId?: string;
    /**
     * An array of two-letter codes for the languages that you want to use with the brand. The supported languages are:
     *
     * - Arabic (`ar`)
     * - Armenian (`hy`)
     * - Bahasa Indonesia (`id`)
     * - Bahasa Malay (`ms`)
     * - Bulgarian (`bg`)
     * - Chinese Simplified (`zh_CN`)
     * - Chinese Traditional (`zh_TW`)
     * - Croatian (`hr`)
     * - Czech (`cs`)
     * - Danish (`da`)
     * - Dutch (`nl`)
     * - English UK (`en_GB`)
     * - English US (`en`)
     * - Estonian (`et`)
     * - Farsi (`fa`)
     * - Finnish (`fi`)
     * - French (`fr`)
     * - French Canada (`fr_CA`)
     * - German (`de`)
     * - Greek (`el`)
     * - Hebrew (`he`)
     * - Hindi (`hi`)
     * - Hungarian (`hu`)
     * - Italian (`it`)
     * - Japanese (`ja`)
     * - Korean (`ko`)
     * - Latvian (`lv`)
     * - Lithuanian (`lt`)
     * - Norwegian (`no`)
     * - Polish (`pl`)
     * - Portuguese (`pt`)
     * - Portuguese Brasil (`pt_BR`)
     * - Romanian (`ro`)
     * - Russian (`ru`)
     * - Serbian (`sr`)
     * - Slovak (`sk`)
     * - Slovenian (`sl`)
     * - Spanish (`es`)
     * - Spanish Latin America (`es_MX`)
     * - Swedish (`sv`)
     * - Thai (`th`)
     * - Turkish (`tr`)
     * - Ukranian (`uk`)
     * - Vietnamese (`vi`)
     */
    brandLanguages?: string[];
    /**
     * The name of the brand.
     */
    brandName?: string;
    /**
     * An array of name-value pairs specifying the colors that the brand uses for the following elements:
     *
     * - Button background
     * - Button text
     * - Header background
     * - Header text
     */
    colors?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
    /**
     * The two-letter code for the language that you want to use as the brand default. The supported languages are:
     *
     * - Arabic (`ar`)
     * - Armenian (`hy`)
     * - Bahasa Indonesia (`id`)
     * - Bahasa Malay (`ms`)
     * - Bulgarian (`bg`)
     * - Chinese Simplified (`zh_CN`)
     * - Chinese Traditional (`zh_TW`)
     * - Croatian (`hr`)
     * - Czech (`cs`)
     * - Danish (`da`)
     * - Dutch (`nl`)
     * - English UK (`en_GB`)
     * - English US (`en`)
     * - Estonian (`et`)
     * - Farsi (`fa`)
     * - Finnish (`fi`)
     * - French (`fr`)
     * - French Canada (`fr_CA`)
     * - German (`de`)
     * - Greek (`el`)
     * - Hebrew (`he`)
     * - Hindi (`hi`)
     * - Hungarian (`hu`)
     * - Italian (`it`)
     * - Japanese (`ja`)
     * - Korean (`ko`)
     * - Latvian (`lv`)
     * - Lithuanian (`lt`)
     * - Norwegian (`no`)
     * - Polish (`pl`)
     * - Portuguese (`pt`)
     * - Portuguese Brasil (`pt_BR`)
     * - Romanian (`ro`)
     * - Russian (`ru`)
     * - Serbian (`sr`)
     * - Slovak (`sk`)
     * - Slovenian (`sl`)
     * - Spanish (`es`)
     * - Spanish Latin America (`es_MX`)
     * - Swedish (`sv`)
     * - Thai (`th`)
     * - Turkish (`tr`)
     * - Ukranian (`uk`)
     * - Vietnamese (`vi`)
     */
    defaultBrandLanguage?: string;
    /**
     * Deprecated.
     */
    emailContent?: /* Deprecated. */ BrandEmailContent[];
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * When **true**, the `brandCompany` property is overriding the name of the company in the account settings.
     */
    isOverridingCompanyName?: boolean;
    /**
     * When **true**, the sending brand is the default brand for sending new envelopes.
     */
    isSendingDefault?: boolean;
    /**
     * When **true**, the siging brand is the default brand for the signing experience.
     */
    isSigningDefault?: boolean;
    /**
     * An array of name/value pairs specifying the pages to which the user is redirected after the following events occur:
     *
     * - Signing Completed
     * - Viewed Exit
     * - Finish Later
     * - Decline
     * - Session Timeout
     * - Authentication Failure
     *
     * If you do not specify landing pages, the DocuSign default pages are used.
     */
    landingPages?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
    /**
     * An array of `brandLink` objects that contain information about the links that the brand uses.
     */
    links?: /* Information about a link that a brand uses. */ BrandLink[];
    /**
     * The URIs for retrieving the logos that are associated with the brand.
     */
    logos?: /* Information about the logos associated with the brand. */ BrandLogos;
    /**
     * An object containing the URLs for the four DocuSign master resource files that the brand uses for sending, signing, email messages, and captive (embedded) signing.
     * You can modify the default email messages and formats in these file to customize the user experience.
     *
     * **Note**: This object is returned only when the `resourceContentType` is `sending`, `signing`, `email`, or `signing_captive`.
     */
    resources?: BrandResourceUrls;
}
/**
 * Deprecated.
 */
export interface BrandEmailContent {
    /**
     * Deprecated.
     */
    content?: string;
    /**
     * Deprecated.
     */
    emailContentType?: string;
    /**
     * Deprecated.
     */
    emailToLink?: string;
    /**
     * Deprecated.
     */
    linkText?: string;
}
/**
 * Information about a link that a brand uses.
 */
export interface BrandLink {
    /**
     * The text used for the link.
     */
    linkText?: string;
    /**
     * The type of link. Valid values include:
     *
     * - `aboutDocusign`
     * - `closeButton`
     */
    linkType?: string;
    /**
     * When **true**, the link displays to the recipient.
     */
    showLink?: string;
    /**
     * The URL or mailto address of the link.
     */
    urlOrMailTo?: string;
}
/**
 * Information about the logos associated with the brand.
 */
export interface BrandLogos {
    /**
     * The URI for the logo that the brand uses in the header of email messages.
     */
    email?: string;
    /**
     * The URI for the brand's primary logo.
     */
    primary?: string;
    /**
     * The URI for the brand's secondary logo.
     */
    secondary?: string;
}
/**
 * This request object contains information about a specific brand.
 */
export interface BrandRequest {
    /**
     * The id of the brand.
     */
    brandId?: string;
}
/**
 * Brands use resource files to style the following experiences:
 *
 * - Email
 * - Sending
 * - Signing
 * - Captive (embedded) signing
 *
 * You can modify these resource files to customize these experiences.
 */
export interface BrandResourceUrls {
    /**
     * The URI for the email resource file that the brand uses.
     */
    email?: string;
    /**
     * The URI for the sending resource file that the brand uses.
     */
    sending?: string;
    /**
     * The URI for the signing resource file that the brand uses.
     */
    signing?: string;
    /**
     * The URI for the captive (embedded) signing resource file that the brand uses.
     */
    signingCaptive?: string;
}
/**
 * Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
 */
export interface BrandResources {
    /**
     * The user id of the user who created the brand resource.
     */
    createdByUserInfo?: UserInfo;
    /**
     * The date and time that the brand resource was created.
     */
    createdDate?: string;
    /**
     * Deprecated.
     */
    dataNotSavedNotInMaster?: string[];
    /**
     * Information about the user who last modified the brand resource.
     */
    modifiedByUserInfo?: UserInfo;
    /**
     * The date on which this user record was last modified.
     */
    modifiedDate?: string;
    /**
     * This property is returned in the response to the [AccountBrands::listResources][listResources] request.
     * It contains a list of any email templates that have been modified to differ from the master resource files.
     *
     * [listResources]: ./categories/Accounts/AccountBrands/listResources.html
     */
    modifiedTemplates?: string[];
    /**
     * The type of brand resource file. A brand uses a different resource file to control each of the following experiences:
     *
     * - Sending (`sending`)
     * - Signing (`signing`)
     * - Email messages (`email`)
     * - Captive (embedded) signing (`signing_captive`)
     *
     * You can modify the default email messages and formats in these files and upload them to your brand to customize the user experience.
     */
    resourcesContentType?: string;
    /**
     * The URI for the brand resource file.
     */
    resourcesContentUri?: string;
}

export interface BrandResourcesList {
    /**
     * A list of resources that the brand uses.
     */
    resourcesContentTypes?: BrandResources[];
}
/**
 * Details about one or more brands.
 */
export interface BrandsRequest {
    /**
     * A list of brands.
     */
    brands?: /* This request object contains information about a specific brand. */ BrandRequest[];
}

export interface BrandsResponse {
    /**
     * A list of brands.
     */
    brands?: /* Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope. */ Brand[];
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    recipientBrandIdDefault?: string;
    /**
     * The brand that envelope senders see when a brand is not explicitly set.
     */
    senderBrandIdDefault?: string;
}

export interface BulkEnvelope {
    /**
     * The row of the recipient in the CSV file used to create the bulk recipient list.
     */
    bulkRecipientRow?: string;
    /**
     * Indicates the status of the bulk send operation. Returned values can be:
     * - `queued`
     * - `processing`
     * - `sent`
     * - `failed`
     */
    bulkStatus?: string;
    /**
     * The email address of the recipient assigned to this envelope transaction.
     */
    email?: string;
    /**
     * GUID of the bulk envelope.
     */
    envelopeId?: string;
    /**
     * The URI for retrieving the envelope or envelopes.
     */
    envelopeUri?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The name of the recipient assigned to this envelope transaction.
     */
    name?: string;
    /**
     * The date and time on which the bulk envelope was created.
     */
    submittedDateTime?: string;
    /**
     * Identifier for the envelope transaction. The ID is a sender-generated value and is valid in the DocuSign system for 7 days.
     * We recommend that you use a transaction ID for offline signing to ensure that an envelope is not sent multiple times.
     * You can use the transaction ID to determine an envelope's status (queued, processing, sent, or failed) in cases where the Internet
     * connection is lost before envelope status is returned.
     */
    transactionId?: string;
}

export interface BulkEnvelopeStatus {
    /**
     * Identifier used to query the status of an individual bulk recipient batch.
     */
    batchId?: string;
    /**
     * The total number of items in the batch being queried.
     */
    batchSize?: string;
    /**
     * A list of bulk envelope objects.
     */
    bulkEnvelopes?: BulkEnvelope[];
    /**
     * URI at which you can retrieve the batch envelopes.
     */
    bulkEnvelopesBatchUri?: string;
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The number of entries with a status of `failed`.
     */
    failed?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of entries with a status of `queued`.
     */
    queued?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The number of entries with a status of `sent`.
     */
    sent?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The date on which the bulk envelope was created.
     */
    submittedDate?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface BulkEnvelopesResponse {
    /**
     * Reserved: TBD
     */
    bulkEnvelopeStatuses?: BulkEnvelopeStatus[];
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface BulkRecipient {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Specifies the recipient's email address.
     *
     * Maximum length: 100 characters.
     */
    email?: string;
    /**
     * Array or errors.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails[];
    /**
     * Specifies the authentication check used for the signer. If blank then no authentication check is required for the signer. Only one value can be used in this field.
     *
     * The acceptable values are:
     *
     * * KBA: Enables the normal ID check authentication set up for your account.
     * * Phone: Enables phone authentication.
     * * SMS: Enables SMS authentication.
     */
    identification?: string;
    /**
     * Specifies the recipient's name.
     *
     * Maximum length: 50 characters.
     */
    name?: string;
    /**
     * A note sent to the recipient in the signing email.
     * This note is unique to this recipient.
     * In the user interface,
     * it appears near the upper left corner
     * of the document
     * on the signing screen.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * This is only used if the Identification field value is Phone or SMS. The value for this field can be a valid telephone number or, if Phone,
     * usersupplied (SMS authentication cannot use a user supplied number). Parenthesis and dashes can be used in the telephone number.
     *
     * If `usersupplied` is used, the signer supplies his or her own telephone number.
     */
    phoneNumber?: string;

    recipientSignatureProviderInfo?: BulkRecipientSignatureProvider[];

    rowNumber?: string;
    /**
     * Specifies values used to populate recipient tabs with information. This allows each bulk recipient signer to have different values
     * for their associated tabs. Any number of `tabLabel` columns can be added to the bulk recipient file.
     *
     * The information used in the bulk recipient file header must be the same as the `tabLabel` for the tab.
     *
     * The values entered in this column are automatically inserted into the corresponding tab for the recipient in the same row.
     *
     * Note that this option cannot be used for tabs that do not have data or that are automatically populated data such as Signature,
     * Full Name, Email Address, Company, Title, and Date Signed tabs.
     */
    tabLabels?: BulkRecipientTabLabel[];
}

export interface BulkRecipientSignatureProvider {
    name?: string;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
}

export interface BulkRecipientTabLabel {
    name?: string;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
}

export interface BulkRecipientsRequest {
    /**
     * A complex type containing information about the bulk recipients in the request.
     */
    bulkRecipients?: BulkRecipient[];
}

export interface BulkRecipientsResponse {
    /**
     * A complex type containing information about the bulk recipients in the response.
     */
    bulkRecipients?: BulkRecipient[];
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface BulkRecipientsSummaryResponse {
    /**
     * A complex type containing information about the bulk recipients in the response.
     */
    bulkRecipients?: BulkRecipient[];
    /**
     * The number of items returned in this response.
     */
    bulkRecipientsCount?: string;
    /**
     * Reserved for DocuSign.
     */
    bulkRecipientsUri?: string;
    /**
     * Array or errors.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails[];
}

export interface BulkRecipientsUpdateResponse {
    signer?: Signer;
}
/**
 * The bulk send list resource provides methods that enable you to create and manage bulk sending lists, which you can use to send multiple copies of an envelope in a single batch.
 *
 * **Note**: The Bulk Send feature is only available on Business Pro plans that are using EasySign.
 */
export interface BulkSend {
    /**
     * An array of `bulkCopy` objects. Each object represents an instance or copy of an envelope and contains details such as the recipient, custom fields, tabs, and other information.
     */
    bulkCopies?: BulkSendingCopy[];
    /**
     * The GUID of the bulk send list. This property is created after you post a new bulk send list.
     */
    listId?: string;
    /**
     * The name of the bulk send list.
     */
    name?: string;
}
/**
 * This object contains information about the envelope or template that you want to send in bulk.
 */
export interface BulkSendRequest {
    /**
     * The GUID of the envelope or template that you want to send in bulk.
     */
    envelopeOrTemplateId?: string;
}
/**
 * The object contains the response to a bulk send request.
 */
export interface BulkSendResponse {
    /**
     * A batch identifier that you can use to get the status of the batch.
     */
    batchId?: string;
    /**
     * The GUID of the envelope or template that was sent.
     */
    envelopeOrTemplateId?: string;
    /**
     * A human-readable object that describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: string[];
    /**
     * A list of errors that occurred. This information is intended to be parsed by machine.
     */
    errors?: string[];
}
/**
 * This object contains the results of a bulk send test.
 */
export interface BulkSendTestResponse {
    /**
     * When **true**, the envelope or template is compatible with the bulk send list and can be sent by using the [BulkSend::createBulkSendRequest][BulkSendRequest] method.
     *
     * **Note**: This property is only returned in responses and ignored in requests.
     *
     * [BulkSendRequest]: ./createBulkSendRequest.html
     */
    canBeSent?: boolean;
    /**
     * Human-readable details about any validation errors that occurred.
     */
    validationErrorDetails?: string[];
    /**
     * A list of validation errors that were encountered during the bulk send test.
     *
     * **Note**: This information is intended to be parsed by machine.
     */
    validationErrors?: string[];
}
/**
 * This object contains the details to use for a specific copy, or instance, of the envelope. When you send an envelope by using a bulk send list,
 * you can customize these properties for each instance.
 */
export interface BulkSendingCopy {
    /**
     * The custom fields for this copy of the envelope.
     *
     * **Note**: These custom fields must also be included in the original envelope or template that you want to send.
     */
    customFields?: /* This object contains details about a custom field for a bulk send copy. In a bulk send request, each custom field in the bulk send list
        must match a custom field in the envelope or template that you want to send. */ BulkSendingCopyCustomField[];
    /**
     * The email body for this copy of the envelope.
     */
    emailBlurb?: string;
    /**
     * The email subject line for this copy of the envelope. For information about adding merge field information to the email subject, see
     * [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
     */
    emailSubject?: string;
    /**
     * Information about the recipients associated with this copy of the envelope.
     */
    recipients?: /* This object contains details about a bulk send recipient. */ BulkSendingCopyRecipient[];
}
/**
 * This object contains details about a custom field for a bulk send copy. In a bulk send request, each custom field in the bulk send list must match a
 * custom field in the envelope or template that you want to send.
 */
export interface BulkSendingCopyCustomField {
    /**
     * The name of the custom field.
     */
    name?: string;
    /**
     * The value of the custom field.
     */
    value?: string;
}
/**
 * This object contains details about a bulk send recipient.
 */
export interface BulkSendingCopyRecipient {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app.
     * Authenticating the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**,
     * an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status
     * but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * The recipient's email address.
     */
    email?: string;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients, the other recipients will
     * inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign,
     * just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions.
     * When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated
     * by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded
     * signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application
     * before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,
     * the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use.
     * In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.)
     * to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process
     * for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`,
     * `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope.
     * The merge fields are enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses.
     * The names of these authentication types appear in the web console sending export interface in the Identify list for a recipient.
     * This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the
     * `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list,
     * these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS,
     * you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;

    identificationMethod?: string;

    name?: string;
    /**
     * A note sent to the recipient in the signing email.
     * This note is unique to this recipient.
     * In the user interface,
     * it appears near the upper left corner
     * of the document
     * on the signing screen.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     *
     *
     */
    phoneAuthentication?: RecipientPhoneAuthentication;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId`
     * must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature
     * (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    recipientSignatureProviders?: RecipientSignatureProvider[];
    /**
     * The name of the role associated with the recipient. This property is optional and is only used in place of a `recipientId`.
     */
    roleName?: string;
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the element `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * A list of tabs associated with the recipient. In a bulk send request, each of these recipient tabs must match a recipient tab
     * on the envelope or template that you want to send.
     * To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.
     *
     * For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName`
     * to the tab here that you are populating with that information.
     *
     *  You can use the following types of tabs to match bulk send recipients to an envelope:
     *
     * - Text tabs
     * - Radio group tabs (where the name of the `radioGroup` on the envelope is used as the `tabLabel` in the bulk send list)
     * - List tabs
     */
    tabs?: BulkSendingCopyTab[];
}
/**
 * A tab associated with the bulk send recipient. In a bulk send request, each recipient tab must match a recipient tab on the envelope or template that you want to send.
 * To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.
 *
 * For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`,
 * you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.
 */
export interface BulkSendingCopyTab {
    /**
     * The initial value that you want to assign to the tab.
     */
    initialValue?: string;
    /**
     * The label associated with the recipient tab. In a bulk send request, the `tabLabel` for this tab and the `tabLabel`
     * for the corresponding tab on the envelope or template must be the same.
     *
     * Maximum Length: 500 characters.
     */
    tabLabel?: string;
}
/**
 * This object contains the details for the bulk send list.
 */
export interface BulkSendingList {
    /**
     * An array of `bulkCopy` objects. Each object represents an instance or copy of an envelope and contains details such as the recipient, custom fields, tabs,
     * and other information.
     */
    bulkCopies?: BulkSendingCopy[];
    /**
     * The GUID of the bulk send list.
     */
    listId?: string;
    /**
     * The name of the bulk send list.
     */
    name?: string;
}
/**
 * This complex type contains summaries that provide basic information about the bulk send lists that belong to the current user.
 */
export interface BulkSendingListSummaries {
    /**
     * An array of `bulkSendingListSummary` objects where each summary provides basic information about a bulk send list that belongs to the current user.
     */
    bulkListSummaries?: /* This object contains basic information about a bulk send list. */ BulkSendingListSummary[];
}
/**
 * This object contains basic information about a bulk send list.
 */
export interface BulkSendingListSummary {
    /**
     * The GUID of the bulk send list. This property is created after you post a new bulk send list.
     */
    bulkSendListId?: string;
    /**
     * The GUID of the user who created the bulk send list.
     */
    createdByUser?: string;
    /**
     * The UTC DateTime that the bulk send list was created.
     */
    createdDate?: string;
    /**
     * The name of the bulk send list.
     */
    name?: string;
}
/**
 * This object contains details about a captive (embedded) recipient.
 */
export interface CaptiveRecipient {
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app.
     * Authenticating the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to
     * **true**, an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * The email address associated with the captive recipient.
     */
    email?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The username associated with the captive recipient.
     */
    userName?: string;
}
/**
 * Contains information about captive (embedded) recipients.
 */
export interface CaptiveRecipientInformation {
    /**
     * A complex type containing information about one or more captive recipients.
     */
    captiveRecipients?: /* This object contains details about a captive (embedded) recipient. */ CaptiveRecipient[];
}
/**
 * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial,
 * date or add information to any of the documents.
 */
export interface CarbonCopy {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Metadata that indicates whether the `accessCode` property is editable. Read only.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
     */
    addAccessCodeToEmail?: string;
    /**
     * Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address.
     * This element is only active if enabled for the account.
     */
    agentCanEditEmail?: string;
    /**
     * Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name.
     * This element is only active if enabled for the account.
     */
    agentCanEditName?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * Not applicable for Carbon Copy recipients.
     */
    clientUserId?: string;
    /**
     * Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group,
     * only the user who previously completed may sign again. Read only.
     */
    completedCount?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient.
     * This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * The reason the recipient declined the document. Read only.
     */
    declinedReason?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient.
     * For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * The recipient's email address. Notification of the document to sign is sent to this email address.
     *
     * Maximum length: 100 characters.
     */
    email?: string;
    /**
     * Metadata that indicates whether the `email` property is editable. Read only.
     */
    emailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients,
     * the other recipients will inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign,
     * just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions.
     * When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by
     * the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded
     * signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending
     * application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,
     * the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use.
     * In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.)
     * to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process
     * for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`,
     * `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope.
     * The merge fields are enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility`
     * property must be set to **true** for the envelope to use this.
     *
     * When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an
     * administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope,
     * unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients,
     * unless they are specifically excluded using this setting when an envelope is sent.
     */
    excludedDocuments?: string[];
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The recipient's first name. Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * Metadata that indicates whether the `firstame` property is editable. Read only.
     */
    firstNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    fullName?: string;
    /**
     * Reserved for DocuSign.
     */
    fullNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication
     * types appear in the web console sending export interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $.
     * To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a
     * phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * Specifies the ID Verification workflow applied on an envelope by workflow ID. <br/>See
     * the [list](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list) method in the
     * [IdentityVerifications](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications) resource for more information on how to
     * retrieve workflow IDs available for an account. <br/>This can be used in addition to other
     * [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods. <br/>Note that ID Verification and ID Check are
     * two distinct methods. ID Verification checks recipients' identity by verifying their ID while ID Check relies on data available on public records
     * (such as current and former address).
     */
    identityVerification?: RecipientIdentityVerification;
    /**
     * When set to **true** and the envelope recipient creates a DocuSign account after signing,
     * the Manage Account Email Notification settings are used as the default settings for the recipient's account.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * The recipient's last name.
     */
    lastName?: string;
    /**
     * Metadata that indicates whether the `lastName` property is editable. Read only.
     */
    lastNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * The full legal name of the recipient. Maximum Length: 100 characters.
     *
     * **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A note sent to the recipient in the signing email.
     * This note is unique to this recipient.
     * In the user interface,
     * it appears near the upper left corner
     * of the document
     * on the signing screen.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * Metadata that indicates whether the `note` property is editable. Read only.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details. It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     *
     *
     */
    phoneAuthentication?: RecipientPhoneAuthentication;

    proofFile?: RecipientProofFile;
    /**
     * Reserved for DocuSign.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Information about the recipient's authentication status. Read only.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial,
     * date, or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order,
     * set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     */
    requireIdLookup?: string;
    /**
     * Metadata that indicates whether the `requireIdLookup` property is editable. Read only.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    signedDateTime?: string;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     * For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients.
     * However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * Metadata that indicates whether the `signingGroupId` property is editable. Read only.
     */
    signingGroupIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
    /**
     * A complex type that contains information about users in the signing group.
     */
    signingGroupUsers?: UserInfo[];
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the element `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * The recipient's status. Read only.
     *
     * Possible values:
     *
     * - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about
     * the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
     * - `declined`: The recipient declined to sign the document(s) in the envelope.
     * - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
     * - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the
     * recipient's status automatically switches to `completed`.
     */
    status?: string;
    /**
     * The code associated with the recipient's status. Read only.
     */
    statusCode?: string;
    /**
     * When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
     */
    suppressEmails?: string;
    /**
     * A list of `commentTabs` that contains the Carbon Copy recipient's comments.
     */
    tabs?: EnvelopeRecipientTabs;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * The total number of tabs in the documents. Read only.
     */
    totalTabCount?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}
/**
 * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed.
 * However, they don't need to sign, initial, date or add information to any of the documents.
 */
export interface CertifiedDelivery {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Metadata that indicates whether the `accessCode` property is editable. Read only.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
     */
    addAccessCodeToEmail?: string;
    /**
     * Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address.
     * This element is only active if enabled for the account.
     */
    agentCanEditEmail?: string;
    /**
     * Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name.
     * This element is only active if enabled for the account.
     */
    agentCanEditName?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app.
     * Authenticating the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**,
     * an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group,
     * only the user who previously completed may sign again. Read only.
     */
    completedCount?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status
     * but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * The reason the recipient declined the document. Read only.
     */
    declinedReason?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient.
     * For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * The recipient's email address.
     */
    email?: string;
    /**
     * Metadata that indicates whether the `email` property is editable. Read only.
     */
    emailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients,
     * the other recipients will inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign,
     * just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions.
     * When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is
     * initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is
     * identical to an embedded signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending
     * application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,
     * the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use.
     * In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify
     * the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing
     * process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`,
     * `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope.
     * The merge fields are enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be
     * set to **true** for the envelope to use this.
     *
     * When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative
     * role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope,
     * unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients,
     * unless they are specifically excluded using this setting when an envelope is sent.
     */
    excludedDocuments?: string[];
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The recipient's first name. Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * Metadata that indicates whether the `firstame` property is editable. Read only.
     */
    firstNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    fullName?: string;
    /**
     * Reserved for DocuSign.
     */
    fullNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication
     * types appear in the web console sending export interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $.
     * To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a
     * phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * Specifies the ID Verification workflow applied on an envelope by workflow ID. <br/>See the
     * [list](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list) method in the
     * [IdentityVerifications](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications) resource for more information on how to
     * retrieve workflow IDs available for an account. <br/>This can be used in addition to other
     * [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
     * <br/>Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients' identity by verifying their ID while ID Check relies on
     * data available on public records (such as current and former address).
     */
    identityVerification?: RecipientIdentityVerification;
    /**
     * When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default
     * settings for the recipient's account.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * The recipient's last name.
     */
    lastName?: string;
    /**
     * Metadata that indicates whether the `lastName` property is editable. Read only.
     */
    lastNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * The full legal name of the recipient. Maximum Length: 100 characters.
     *
     * **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A note sent to the recipient in the signing email.
     * This note is unique to this recipient.
     * In the user interface,
     * it appears near the upper left corner
     * of the document
     * on the signing screen.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * Metadata that indicates whether the `note` property is editable. Read only.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details. It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     *
     *
     */
    phoneAuthentication?: RecipientPhoneAuthentication;

    proofFile?: RecipientProofFile;
    /**
     * Reserved for DocuSign.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Information about the recipient's authentication status. Read only.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial,
     * date, or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the
     * routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     */
    requireIdLookup?: string;
    /**
     * Metadata that indicates whether the `requireIdLookup` property is editable. Read only.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    signedDateTime?: string;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     * For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients.
     * However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value,
     * such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * Metadata that indicates whether the `signingGroupId` property is editable. Read only.
     */
    signingGroupIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
    /**
     * A complex type that contains information about users in the signing group.
     */
    signingGroupUsers?: UserInfo[];
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the element `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * The status of the recipient. Read only.
     *
     * Possible values:
     *
     * - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign.
     * This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if
     * **Send-on-behalf-of** is turned off for the account.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
     * - `declined`: The recipient declined to sign the document(s) in the envelope.
     * - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website.
     * This is not an email delivery of the documents in an envelope.
     * - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing,
     * after which the recipient's status automatically switches to `completed`.
     */
    status?: string;
    /**
     * The code associated with the recipient's status. Read only.
     */
    statusCode?: string;
    /**
     * When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
     */
    suppressEmails?: string;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * The total number of tabs in the documents. Read only.
     */
    totalTabCount?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}
/**
 * A tab that allows the recipient to select a yes/no (on/off) option.
 *
 */
export interface Checkbox {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property
     * for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab ID for the custom tab to apply. This property can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`,
     * the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located.
     * For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope,
     * each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property does not apply to `checkbox` tabs. Check boxes are always optional.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When **true**, the checkbox is selected.
     */
    selected?: string;
    /**
     * Metadata that indicates whether the `selected` property is editable.
     */
    selectedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When **true**, this tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     *
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}
/**
 * An object that contains information about the chunked upload part.
 */
export interface ChunkedUploadPart {
    /**
     * The order of the part in the chunked upload.
     */
    sequence?: string;
    /**
     * The size of the part in bytes.
     *
     * We recommend that a chunked upload part is no larger than a few MB in size.
     */
    size?: string;
}
/**
 * This is the request object for uploading a chunked upload.
 */
export interface ChunkedUploadRequest {
    /**
     * The id of the chunked upload.
     *
     * **Note**: This property is ignored in requests, and overridden with an auto-generated value in responses.
     */
    chunkedUploadId?: string;
    /**
     * A Base64-encoded representation of the content hat is used to upload the file.
     *
     * Maximum size: 50 MB. However, data is also subject to REST API limits regarding request sizes, and Internet Information Systems
     * (IIS) might place further constraints on file size.
     */
    data?: string;
}
/**
 * This response object is returned after you upload a chunked upload.
 */
export interface ChunkedUploadResponse {
    /**
     * A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content that has been
     * uploaded to the chunked upload. DocuSign compares this value to its own computation. If the two values are not equal, the original
     * content and received content are not the same and the commit action is refused.
     */
    checksum?: string;
    /**
     * The id of the chunked upload.
     */
    chunkedUploadId?: string;
    /**
     * A list of the parts that compose the chunked upload, including their byte sizes. The list must be contiguous before you can commit the chunked upload.
     */
    chunkedUploadParts?: /* An object that contains information about the chunked upload part. */ ChunkedUploadPart[];
    /**
     * The URI that you use to reference the chunked upload in other API requests, such as envelope document and envelope attachment requests.
     */
    chunkedUploadUri?: string;
    /**
     * When **true**, the chunked upload has been committed. A committed chunked upload can no longer receive any additional parts and is ready
     * for use within other API requests.
     */
    committed?: string;
    /**
     * The UTC time at which the chunked upload expires and is no longer addressable.
     *
     * **Note**: You must fully upload and use a chunked upload within 20 minutes of initializing it.
     *
     */
    expirationDateTime?: string;
    /**
     * The maximum number of parts allowed for a chunked upload. This value is configurable per DocuSign environment, account, or integrator.
     * The default value is 128. The maximum possible value is 256.
     */
    maxChunkedUploadParts?: string;
    /**
     * The maximum total size allowed for a chunked upload. This value is configured per DocuSign environment, account, or integrator. The default value is 50 MB.
     */
    maxTotalSize?: string;
    /**
     * The total size of the parts of the chunked upload.
     *
     * **Note**: When a chunked upload is used as an envelope document, it is subject to the PDF size limit (25 MB) and page count limit that apply to all envelope documents.
     */
    totalSize?: string;
}
/**
 * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
 */
export interface ChunkedUploads {
    /**
     * A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content that has been uploaded to the chunked upload.
     * DocuSign compares this value to its own computation. If the two values are not equal,
     * the original content and received content are not the same and the commit action is refused.
     */
    checksum?: string;
    /**
     * The id of the chunked upload.
     */
    chunkedUploadId?: string;
    /**
     * A list of the parts that compose the chunked upload, including their byte sizes. The list must be contiguous before you can commit the chunked upload.
     */
    chunkedUploadParts?: /* An object that contains information about the chunked upload part. */ ChunkedUploadPart[];
    /**
     * The URI that you use to reference the chunked upload in other API requests, such as envelope document and envelope attachment requests.
     */
    chunkedUploadUri?: string;
    /**
     * When **true**, the chunked upload has been committed. A committed chunked upload can no longer receive any additional parts and is ready
     * for use within other API requests.
     */
    committed?: string;
    /**
     * The UTC time at which the chunked upload expires and is no longer addressable.
     *
     * **Note**: The length of time before expiration is configurable, and begins when you initiate the chunked upload. You must fully upload and use a
     * chunked upload within this time. The default value for this duration is 20 minutes.
     */
    expirationDateTime?: string;
    /**
     * The maximum number of parts allowed for a chunked upload. This value is configurable per DocuSign environment, account, or integrator.
     * The default value is 128. The maximum possible value is 256.
     *
     */
    maxChunkedUploadParts?: string;
    /**
     * The maximum total size allowed for a chunked upload. This value is configured per DocuSign environment, account, or integrator. The default value is 50 MB.
     */
    maxTotalSize?: string;
    /**
     * The total size of the parts of the chunked upload.
     *
     * **Note**: When a chunked upload is used as an envelope document, it is subject to the PDF size limit (25 MB) and page count limit that apply to all envelope documents.
     */
    totalSize?: string;
}
/**
 * Cloud storage
 */
export interface CloudStorage {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: ExternalDocServiceErrorDetails;
    /**
     * A unique ID for the Salesforce object.
     */
    id?: string;
    /**
     * A list of objects that contain information about a file or folder in cloud storage.
     */
    items?: /* This object contains information about a file or folder in cloud storage. */ ExternalFile[];
    /**
     * The name of the cloud storage item.
     */
    name?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}
/**
 * Contains details about a specific cloud storage provider.
 */
export interface CloudStorageProvider {
    /**
     * The authentication URL used for the cloud storage provider. This information is only included in the response if the user has not passed authentication
     * for the cloud storage provider. If the redirectUrl query string is provided, the returnUrl is appended to the authenticationUrl.
     */
    authenticationUrl?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.
     *
     * The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
     */
    redirectUrl?: string;
    /**
     * The service name for the cloud storage provider.
     */
    service?: string;
    /**
     * The DocuSign-generated ID for the cloud storage provider.
     */
    serviceId?: string;
}
/**
 * The CloudStorageProviders resource provides methods that allow you to manage the cloud storage providers associate with an account.
 */
export interface CloudStorageProviders {
    /**
     * An Array containing the storage providers associated with the user.
     */
    storageProviders?: /* Contains details about a specific cloud storage provider. */ CloudStorageProvider[];
}

export interface Comment {
    /**
     * The Guid of the envelope the comment thread belongs to.
     */
    envelopeId?: string;
    /**
     * Reserved for DocuSign.
     */
    hmac?: string;
    /**
     * The unique identifier for the comment.
     */
    id?: string;
    /**
     * An array of userIds that are mentioned directly in the body of a comment.
     */
    mentions?: string[];
    /**
     * When **true**, indicates that the comment was read.
     */
    read?: boolean;
    /**
     * The email address of the user who created the comment.
     */
    sentByEmail?: string;
    /**
     * The full name of the user who created the comment.
     */
    sentByFullName?: string;
    /**
     * Reserved for DocuSign.
     */
    sentByImageId?: string;
    /**
     * The initials of the user who created the comment.
     */
    sentByInitials?: string;
    /**
     * The recipient id of the user who created the comment.
     */
    sentByRecipientId?: string;
    /**
     * The user id of the user who created the comment.
     */
    sentByUserId?: string;
    /**
     * The id of the signing group that can view the comment or that created the comment.
     */
    signingGroupId?: string;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
    /**
     * The subject of the envelope.
     */
    subject?: string;
    /**
     * The unique identifier for the tab that represents the comment thread.
     */
    tabId?: string;
    /**
     * The content of the comment, as UTF-8 text.
     *
     * Maximum Length: 500 characters.
     *
     * **Note**: The maximum size allowed for the entire message body is 32 KB.
     */
    text?: string;
    /**
     * The unique identifier for the comment thread.
     */
    threadId?: string;
    /**
     * The userId of the user who created the thread.
     */
    threadOriginatorId?: string;
    /**
     * The time the comment was created.
     */
    timestamp?: string;
    /**
     * The time the comment was created, formatted according to the format of the user who created the comment.
     */
    timeStampFormatted?: string;
    /**
     * The user ids of the users that the comment is visible to.
     */
    visibleTo?: string[];
}

export interface CommentHistoryResult {
    /**
     * An array of comment tabs that contain information about users' comments on documents.
     */
    comments?: Comment[];
    /**
     * The maximum number of results to return.
     */
    count?: number; // int32

    endTimetoken?: string;

    startTimetoken?: string;
}

export interface CommentPublish {
    /**
     * A unique ID for the Salesforce object.
     */
    id?: string;
    /**
     * An array of userIds that are mentioned directly in the body of a comment.
     */
    mentions?: string[];
    /**
     * Specifies the text that is shown in the dropdown list.
     */
    text?: string;

    threadAnchorKeys?: {
        [name: string]: string;
    };
    /**
     * The unique identifier for the comment thread.
     */
    threadId?: string;

    visibleTo?: string[];
}

export interface CommentThread {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of comment tabs that contain information about users' comments on documents.
     */
    comments?: Comment[];
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a
     * `documentId` property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`,
     * the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The page number being accessed.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, b
     * ut there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the comment thread.
     */
    threadId?: string;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}
/**
 * Details about envelope comments.
 */
export interface Comments {
    /**
     * The envelope's GUID.
     *
     * Example: `93be49ab-afa0-4adf-933c-f752070d71ec`
     */
    envelopeId?: string;
    /**
     * Reserved for DocuSign.
     */
    hmac?: string;
    /**
     * A unique ID for the Salesforce object.
     */
    id?: string;
    /**
     * An array of userIds that are mentioned directly in the body of a comment.
     */
    mentions?: string[];
    /**
     * Indicates if the comment has been read by the target recipient of the comment.
     */
    read?: boolean;

    sentByEmail?: string;

    sentByFullName?: string;
    /**
     * Reserved for DocuSign.
     */
    sentByImageId?: string;

    sentByInitials?: string;

    sentByRecipientId?: string;

    sentByUserId?: string;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason,
     * we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients.
     * However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a
     * different value, such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;

    subject?: string;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Specifies the text that is shown in the dropdown list.
     */
    text?: string;
    /**
     * The unique identifier for the comment thread.
     */
    threadId?: string;
    /**
     * The userId of the user who created the thread.
     */
    threadOriginatorId?: string;

    timestamp?: string;

    timeStampFormatted?: string;

    visibleTo?: string[];
}

export interface CommentsPublish {
    commentsToPublish?: CommentPublish[];
}
/**
 * A tab that displays the recipient's company name.
 *
 */
export interface Company {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the
     * `anchorString` property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`,
     * etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible
     * (the characters are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console.
     * The information on the downloaded document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * Metadata that indicates whether the `concealValueOnDocument` property is editable.
     */
    concealValueOnDocumentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used,
     * the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data.
     * If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * Metadata that indicates whether the `disableAutoSize` property is editable.
     */
    disableAutoSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a
     * `documentId` property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`,
     * the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional value that describes the maximum length of the property when the property is a string.
     */
    maxLength?: string;
    /**
     * Metadata that indicates whether the `maxLength` property is editable.
     */
    maxLengthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The initial value of the tab when it was sent to the recipient.
     */
    originalValue?: string;
    /**
     * Metadata that indicates whether the `originalValue` property is editable.
     */
    originalValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located.
     * For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     *
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}
/**
 * This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope,
 * combine templates with PDF forms, and combine templates with documents from cloud sources.
 *
 * [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
 */
export interface CompositeTemplate {
    /**
     * The id of this composite template. This id is used as a reference when adding document object information. If used, the document's `content-disposition`
     * must include the composite template ID to which the document should be added. If a composite template ID is not specified in the content-disposition,
     * the document is applied based on the value of the `documentId` property only. If no document object is specified, the composite template inherits the first document.
     */
    compositeTemplateId?: string;
    /**
     * An optional document object that will act as the primary document in the composite template object. If the document node is present, it will take
     * precedence over any server template or inline template documents. It always comes first. Only use this when you want to supply the document dynamically.
     */
    document?: /* A document object. */ Document;
    /**
     *  Zero or more inline templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value.
     */
    inlineTemplates?: InlineTemplate[];
    /**
     * A number representing the sequence in which to apply the template that contains the PDF metadata.
     *
     * Example: `4`
     */
    pdfMetaDataTemplateSequence?: string;
    /**
     * Zero or more server-side templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value
     */
    serverTemplates?: ServerTemplate[];
}
/**
 * This object contains the results of a ConnectConfigurations::GET method.
 */
export interface ConnectConfigResults {
    /**
     * An array of DocuSign Connect configurations.
     */
    configurations?: ConnectCustomConfiguration[];
    /**
     * The number of results.
     */
    totalRecords?: string;
}
/**
 * Contains information about a DocuSign Connect configuration.
 */
export interface ConnectConfigurations {
    /**
     * When set to **true**, data is sent to the urlToPublishTo web address. This option can be set to false to stop sending data while maintaining the Connect configuration information.
     */
    allowEnvelopePublish?: string;
    /**
     * When set to **true**  (default), DocuSign sends data to the designated Salesforce account through Connect.
     */
    allowSalesforcePublish?: string;
    /**
     * When set to **true**, the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect.
     */
    allUsers?: string;
    /**
     * If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
     */
    configurationType?: string;
    /**
     * The DocuSign-generated ID for the Connect configuration. This property is read only.
     */
    connectId?: string;
    /**
     * When set to **true**, Connect logging is turned on. We recommend that you enable this functionality, which helps you troubleshoot any issues.
     *
     * You can have a maximum of 100 active logs in your account. You can view the entries in active logs in the **Logs** tab in the console.
     */
    enableLog?: string;
    /**
     * An array of strings that lists envelope-related events to track through Connect. The possible event values are:
     *
     * - `sent`: An envelope has the status `sent` in the following scenarios:
     *    - When the envelope has been sent to recipients.
     *    - When using remote signing, this event is triggered when the email notification with a link to the documents is sent to at least one recipient.
     *    - When using embedded signing, this event is triggered when the link is ready for the recipient to sign the envelope.
     *
     *    An envelope remains in this state until all recipients have viewed or taken action on the envelope.
     *
     * - `delivered`: This status is triggered when all recipients have opened the envelope, selected the **Continue** button in the interface, and viewed the documents.
     * - `completed`: This status is triggered when all recipients have completed their assigned actions on an envelope.
     * - `declined`: This status is triggered when a recipient has declined to sign the envelope.
     * - `voided`: The voided status indicates that the sender has voided the envelope.
     *
     * **Note**: In previous versions of the API, this value was a single comma-separated string.
     *
     */
    envelopeEvents?: string[];

    eventData?: ConnectEventData;
    /**
     * The id of an external folder.
     */
    externalFolderId?: string;
    /**
     * The label for an external folder.
     */
    externalFolderLabel?: string;
    /**
     * When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes.
     */
    includeCertificateOfCompletion?: string;
    /**
     * When set to **true**, a certificate for a SOAP header is included in messages sent through Connect.
     */
    includeCertSoapHeader?: string;
    /**
     * When set to **true**, the Document Fields associated with the envelope's documents are included in the notification messages.
     * Document Fields are optional custom name-value pairs added to documents using the API.
     */
    includeDocumentFields?: string;
    /**
     * When set to **true**, Connect attaches the envelope documents to the XML payloads of your event notification messages.
     *
     * **Note**: Consider resources and scaling when adding documents to your event payloads. Documents attached to these messages are sent in base64 XML element nodes,
     * which are larger than binary document data. This can significantly increase your payload size, opening up windows for failure. If you include documents,
     * you must build your application to scale in these situations.
     */
    includeDocuments?: string;
    /**
     * When set to **true**, Connect will include the voidedReason for voided envelopes.
     */
    includeEnvelopeVoidReason?: string;
    /**
     * When set to **true**, a Hash-based Message Authentication Code (HMAC) signature is included in messages sent through Connect.
     * For more information, see [Using HMAC Security with DocuSign Connect](https://developers.docusign.com/esign-rest-api/guides/connect-hmac).
     */
    includeHMAC?: string;
    /**
     * When set to **true**, Connect will include the sender account as Custom Field in the data.
     */
    includeSenderAccountasCustomField?: string;
    /**
     * When set to **true**, Connect will include the envelope time zone information.
     */
    includeTimeZoneInformation?: string;
    /**
     * The name of the Connect configuration. The name helps identify the configuration in the list.
     */
    name?: string;
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * An array of strings that lists of recipient-related events that trigger a notification
     * to your webhook Connect listener. The possible event values are:
     *
     * - `sent`: If a recipient type is set to receive an email notification to take action on an envelope, the recipient status is set to `sent` upon delivery of the email.
     * - `delivered`: The recipient has viewed the documents in the envelope. This recipient status does not indicate email delivery of the documents in the envelope.
     * - `completed`: The recipient has completed their assigned actions on an envelope.
     * - `declined`: The recipient has declined to sign a document in the envelope.
     * - `authenticationfailed`: At least one signer has failed the authentication check on the document. If this occurs, you have two options:
     *    - Send a reminder to the recipients, which provides the signer with another chance to access and pass the authentication.
     *    - Correct the document and modify the authentication setting.
     * - `autoresponded`: The recipient's email system sent back an automatic response. This status is only used when **Send-on-behalf-of** is turned off for the account.
     *
     * **Note**: In previous versions of the API, this value was a single comma-separated string.
     *
     */
    recipientEvents?: string[];
    /**
     * When set to **true**, [Mutual TLS](https://developers.docusign.com/esign-rest-api/guides/mutual-tls-intro) authentication is enabled.
     */
    requireMutualTls?: string;
    /**
     * When set to **true**, event delivery acknowledgements are enabled for your Connect configuration.
     *
     * DocuSign Connect awaits a valid 200 response from your application acknowledging that it received a message. If you do not acknowledge receiving an
     * event notification message within 100 seconds, DocuSign treats the message as a failure and places it into a failure queue.
     * It is imperative that you acknowledge successful receipt of Connect events as they occur by sending a 200 event back.
     *
     * #### When set to **true** and Send Individual Messages (SIM) mode is activated
     *
     * If the HTTP status response to a notification message is not in the range of 200-299,
     * then the message delivery failed, and the configuration is marked as down.
     *
     * The message will be queued and retried once per day.
     * While a Connect configuration is marked down, subsequent notifications will not be tried. Instead they will be immediately queued with the reason `Pending`.
     * When a message succeeds, all queued messages for the configuration will be tried immediately, in order.
     *
     * There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.
     *
     * #### When set to **true** and SIM mode is not activated
     *
     * If the HTTP Status response to a notification message is not in the range of 200-299,  then the message delivery failed, and the message is queued.
     *
     * The message will be retried after at least a day the next time a subsequent message is successfully sent to this configuration (subscription).
     * Subsequent notifications will be tried when they occur.
     * There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.
     *
     * #### When set to **false**
     *
     * When `requiresAcknowledgement` is set to **false** and you do not acknowledge receiving an event notification message within 100 seconds,
     * DocuSign treats the message as a failure and determines that the server is unavailable. It does not retry to send the notification message,
     * and you must handle the failure manually.
     *
     *
     */
    requiresAcknowledgement?: string;
    /**
     * The version of the Salesforce API that you are using.
     */
    salesforceApiVersion?: string;

    salesforceAuthcode?: string;

    salesforceCallBackUrl?: string;
    /**
     * When set to **true**, DocuSign can use documents in your Salesforce account for sending and signing.
     */
    salesforceDocumentsAsContentFiles?: string;

    senderOverride?: string;
    /**
     * This property sets the items that are available for selection when adding or editing Connect objects.
     */
    senderSelectableItems?: string[];
    /**
     * An array of Salesforce objects.
     */
    sfObjects?: ConnectSalesforceObject[];
    /**
     * When set to **true**, Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol.
     */
    signMessageWithX509Certificate?: string;
    /**
     * The namespace of the SOAP interface.
     *
     * **Note**: If `useSoapInterface` is set to **true**, you must set this value.
     */
    soapNamespace?: string;
    /**
     * The endpoint to which Connect should send webhook notification messages via an HTTPS POST request. The URL must start with `https`.
     * The customer's web server must use an SSL/TLS certificate whose CA is in the Microsoft list of trusted CAs. Self-signed certificates are not acceptable,
     * but you can use free certificates from Let's Encrypt.
     */
    urlToPublishTo?: string;
    /**
     * A comma-separated list of userIds. This sets the users associated with the tracked envelope and recipient events.
     * When a tracked event occurs for a set user, the a notification message is sent to your Connect listener.
     *
     * ###### Note: If allUsers is set to `false` then you must provide a list of user ids.
     */
    userIds?: string[];
    /**
     * The name of the user.
     */
    userName?: string;
    /**
     * When set to **true**, indicates that the `urlToPublishTo` property contains a SOAP endpoint.
     */
    useSoapInterface?: string;
}

export interface ConnectCustomConfiguration {
    /**
     * When set to **true**, data is sent to the urlToPublishTo web address. This option can be set to false to stop sending data while maintaining the Connect configuration information.
     */
    allowEnvelopePublish?: string;
    /**
     * When set to **true**  (default), DocuSign sends data to the designated Salesforce account through Connect.
     */
    allowSalesforcePublish?: string;
    /**
     * When set to **true**, the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect.
     */
    allUsers?: string;
    /**
     * If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
     */
    configurationType?: string;
    /**
     * The ID of the custom Connect configuration being accessed.
     */
    connectId?: string;
    /**
     * When set to **true**, Connect logging is turned on. We recommend that you enable this functionality, which helps you troubleshoot any issues.
     *
     * You can have a maximum of 100 active logs in your account. You can view the entries in active logs in the **Logs** tab in the console.
     */
    enableLog?: string;
    /**
     * A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property.
     *
     * To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
     */
    envelopeEvents?: string[];

    eventData?: ConnectEventData;
    /**
     * The id of an external folder.
     */
    externalFolderId?: string;
    /**
     * The label for an external folder.
     */
    externalFolderLabel?: string;
    /**
     * When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes.
     */
    includeCertificateOfCompletion?: string;

    includeCertSoapHeader?: string;
    /**
     * When set to **true**, the Document Fields associated with the envelope's documents are included in the notification messages.
     * Document Fields are optional custom name-value pairs added to documents using the API.
     */
    includeDocumentFields?: string;
    /**
     * reserved
     */
    includeDocuments?: string;
    /**
     * When set to **true**, if the envelope is voided, the Connect Service notification will include the void reason, as entered by the person that voided the envelope.
     */
    includeEnvelopeVoidReason?: string;

    includeHMAC?: string;
    /**
     * When set to **true**, Connect will include the sender account as Custom Field in the data.
     */
    includeSenderAccountasCustomField?: string;
    /**
     * When set to **true**, Connect will include the envelope time zone information.
     */
    includeTimeZoneInformation?: string;

    name?: string;
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * An array of recipient event statuses that will trigger Connect to send notifications to your webhook listener at the url endpoint specified in the `url` property.
     *
     * To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
     */
    recipientEvents?: string[];
    /**
     * When set to **true**, [Mutual TLS](https://developers.docusign.com/esign-rest-api/guides/mutual-tls-intro) authentication is enabled.
     */
    requireMutualTls?: string;
    /**
     * When set to **true**, event delivery acknowledgements are enabled for your Connect configuration.
     *
     * DocuSign Connect awaits a valid 200 response from your application acknowledging that it received a message. If you do not acknowledge receiving an
     * event notification message within 100 seconds, DocuSign treats the message as a failure and places it into a failure queue. It is imperative that you
     * acknowledge successful receipt of Connect events as they occur by sending a 200 event back.
     *
     * #### When set to **true** and Send Individual Messages (SIM) mode is activated
     *
     * If the HTTP status response to a notification message is not in the range of 200-299,
     * then the message delivery failed, and the configuration is marked as down.
     *
     * The message will be queued and retried once per day.
     * While a Connect configuration is marked down, subsequent notifications will not be tried. Instead they will be immediately queued with the reason `Pending`.
     * When a message succeeds, all queued messages for the configuration will be tried immediately, in order.
     *
     * There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.
     *
     * #### When set to **true** and SIM mode is not activated
     *
     * If the HTTP Status response to a notification message is not in the range of 200-299,  then the message delivery failed, and the message is queued.
     *
     * The message will be retried after at least a day the next time a subsequent message is successfully sent to this configuration (subscription).
     * Subsequent notifications will be tried when they occur.
     * There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.
     *
     * #### When set to **false**
     *
     * When `requiresAcknowledgement` is set to **false** and you do not acknowledge receiving an event notification message within 100 seconds,
     * DocuSign treats the message as a failure and determines that the server is unavailable. It does not retry to send the notification message,
     * and you must handle the failure manually.
     *
     *
     */
    requiresAcknowledgement?: string;
    /**
     * The version of the Salesforce API that you are using.
     */
    salesforceApiVersion?: string;

    salesforceAuthcode?: string;

    salesforceCallBackUrl?: string;
    /**
     * When set to **true**, DocuSign can use documents in your Salesforce account for sending and signing.
     */
    salesforceDocumentsAsContentFiles?: string;

    senderOverride?: string;
    /**
     * This property sets the items that are available for selection when adding or editing Connect objects.
     */
    senderSelectableItems?: string[];
    /**
     * An array of Salesforce objects.
     */
    sfObjects?: ConnectSalesforceObject[];
    /**
     * When set to **true**, Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol.
     */
    signMessageWithX509Certificate?: string;
    /**
     * The namespace of the SOAP interface.
     *
     * **Note**: If `useSoapInterface` is set to **true**, you must set this value.
     */
    soapNamespace?: string;
    /**
     * This is the web address and name of your listener or Retrieving Service endpoint. You need to include HTTPS:// in the web address.
     */
    urlToPublishTo?: string;
    /**
     * A comma-separated list of userIds. This sets the users associated with the tracked envelope and recipient events. When a tracked event occurs for a set user,
     * the a notification message is sent to your Connect listener.
     *
     * ###### Note: If allUsers is set to `false` then you must provide a list of user ids.
     */
    userIds?: string[];
    /**
     * The name of the user.
     */
    userName?: string;
    /**
     * When set to **true**, the notifications are sent to your endpoint as SOAP requests.
     */
    useSoapInterface?: string;
}

export interface ConnectDebugLog {
    /**
     * The name of the Connect configuration.
     */
    connectConfig?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The UTC date and time of the event.
     */
    eventDateTime?: string;
    /**
     * A description of the event.
     */
    eventDescription?: string;
    /**
     * Log output.
     */
    payload?: string;
}

export interface ConnectEventData {
    format?: string;

    includeData?: string[];
    /**
     * The version of the rest API.
     */
    version?: string;
}
/**
 * Connect event logging information. This object contains sections for regular Connect logs and for Connect failures.
 */
export interface ConnectEvents {
    /**
     * A list of Connect failure logs.
     */
    failures?: /* Contains information about a Connect log entry. */ ConnectLog[];
    /**
     * A list of Connect general logs.
     */
    logs?: /* Contains information about a Connect log entry. */ ConnectLog[];
    /**
     * The count of records in the log list.
     */
    totalRecords?: string;

    type?: string;
}

export interface ConnectFailureFilter {
    envelopeIds?: string[];

    synchronous?: string;
}
/**
 * This object contains details about a Connect failure result.
 */
export interface ConnectFailureResult {
    /**
     * Reserved for DocuSign.
     */
    configId?: string;
    /**
     * Reserved for DocuSign.
     *
     */
    configUrl?: string;
    /**
     * The envelope ID of the envelope status that failed to post.
     */
    envelopeId?: string;
    /**
     * The connection status.
     */
    status?: string;
    /**
     * A human-readable message describing the connection status.
     */
    statusMessage?: string;
}

export interface ConnectFailureResults {
    /**
     * Details about a Connect failure result.
     */
    retryQueue?: /* This object contains details about a Connect failure result. */ ConnectFailureResult[];
}
/**
 * Contains information about a Connect log entry.
 */
export interface ConnectLog {
    /**
     * The external account number (int) or account ID GUID.
     */
    accountId?: string;
    /**
     * The web address of the listener or retrieving service endpoint for Connect.
     */
    configUrl?: string;
    /**
     * A complex element containing information about the Connect configuration, error details, date/time, description and payload.
     * This information is included in the response only when the `additional_info` query is set to **true**.
     * This additional information is only available when retrieving general logs with
     * [ConnectEvents:get](https://developers.docusign.com/esign-rest-api/reference/Connect/ConnectEvents/get), but not when retrieving
     * failure logs with [ConnectEvents:listFailures](https://developers.docusign.com/esign-rest-api/reference/Connect/ConnectEvents/listFailures).
     */
    connectDebugLog?: ConnectDebugLog[];
    /**
     * The id of the Connect configuration that failed. If an account has multiple Connect configurations, this value is used to look up the Connect configuration for the failed post.
     */
    connectId?: string;
    /**
     * The UTC DateTime when the Connect post was created.
     */
    created?: string;
    /**
     * The email address of the envelope sender.
     */
    email?: string;
    /**
     * The id of the envelope that failed to post.
     */
    envelopeId?: string;
    /**
     * The server error associated with the Connect post failure.
     */
    error?: string;
    /**
     * The id of the Connect post failure.
     */
    failureId?: string;
    /**
     * The URI for the Connect post failure.
     */
    failureUri?: string;
    /**
     * The UTC DateTime of the last attempt to post.
     */
    lastTry?: string;
    /**
     * The id of the Connect log entry.
     */
    logId?: string;
    /**
     * The URI for the Connect log entry.
     */
    logUri?: string;
    /**
     * The number of times the Connect post has been retried.
     */
    retryCount?: string;
    /**
     * A URI that you can use to retry to publish the Connect post.
     */
    retryUri?: string;
    /**
     * The envelope status for the Connect post. Possible values are:
     * - `Any`
     * - `Voided`
     * - `Created`
     * - `Deleted`
     * - `Sent`
     * - `Delivered`
     * - `Signed`
     * - `Completed`
     * - `Declined`
     * - `TimedOut`
     * - `Template`
     * - `Processing`
     *
     * For details about these statuses, see [Envelope Status Code Descriptions](https://developers.docusign.com/esign-rest-api/guides/status-and-error-codes#envelope-status-code-descriptions).
     */
    status?: string;
    /**
     * The subject of the envelope.
     */
    subject?: string;
    /**
     * The name of the sender of the envelope.
     */
    userName?: string;
}

export interface ConnectLogs {
    /**
     * A list of Connect failure logs.
     */
    failures?: /* Contains information about a Connect log entry. */ ConnectLog[];
    /**
     * A list of Connect general logs.
     */
    logs?: /* Contains information about a Connect log entry. */ ConnectLog[];
    /**
     * The count of records in the log list.
     */
    totalRecords?: string;

    type?: string;
}
/**
 * This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
 */
export interface ConnectSalesforceField {
    dsAttribute?: string;
    /**
     * A URL that links to the information in the DocuSign field.
     */
    dsLink?: string;

    dsNode?: string;
    /**
     * A unique ID for the Salesforce object.
     */
    id?: string;

    sfField?: string;
    /**
     * The name of the Salesforce field.
     */
    sfFieldName?: string;
    /**
     * The name of the Salesforce folder.
     */
    sfFolder?: string;

    sfLockedValue?: string;
}
/**
 * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
 *
 * When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one
 * that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign
 * Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
 * [DocuSign for Salesforce - Adding Completed Documents to the Notes and
 * Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
 */
export interface ConnectSalesforceObject {
    /**
     * When set to **true**, the `connectSalesforceObject` is active.
     */
    active?: string;
    /**
     * A description of the `connectSalesforceObject`.
     */
    description?: string;
    /**
     * The id of the `connectSalesforceObject`.
     */
    id?: string;

    insert?: string;
    /**
     * When **true**, Salesforce is updated only when the envelope is complete.
     */
    onCompleteOnly?: string;
    /**
     * The DocuSign and Salesforce fields that you want to use to match a Salesforce object with DocuSign information. This information tells Connect when to send updates to Salesforce.
     */
    selectFields?: /* This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account. */ ConnectSalesforceField[];
    /**
     * The Salesforce.com object type, such as `case`, `contact`, or `opportunity`.
     */
    sfObject?: string;
    /**
     * A name for the Salesforce object.
     *
     * **Note**: You can enter any name for the object. It does not have to match the `sfObject` property.
     */
    sfObjectName?: string;
    /**
     * The DocuSign and Salesforce fields that you want to update.
     *
     * **Note**: You can choose to update SalesForce (with information from DocuSign) only, update DocuSign only, or both.
     */
    updateFields?: /* This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account. */ ConnectSalesforceField[];
}

export interface ConnectUserObject {
    /**
     * The type of custom Connect configuration being accessed.
     */
    configurationtype?: string;
    /**
     * The ID of the custom Connect configuration being accessed.
     */
    connectId?: string;
    /**
     * Boolean value that indicates whether the custom Connect configuration is enabled or not.
     */
    enabled?: string;

    hasAccess?: string;

    senderSearchableItems?: string[];
}
/**
 * The request object for the EnvelopeViews::createConsole method.
 */
export interface ConsoleViewRequest {
    /**
     * The id of the envelope.
     */
    envelopeId?: string;
    /**
     * (Optional) The URL to which the user should be redirected after the console view session has ended.
     *
     * Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.
     */
    returnUrl?: string;
}
/**
 * Details about consumer disclosures.
 */
export interface ConsumerDisclosure {
    /**
     * The GUID of the account associated with the consumer disclosure.
     */
    accountEsignId?: string;
    /**
     * When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents.
     * If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
     * **Note**: Only Admin users can change this setting.
     */
    allowCDWithdraw?: string;
    /**
     * Metadata that indicates whether the `allowCDWithdraw` property is editable.
     *
     */
    allowCDWithdrawMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If the customer needs to change their email address, this is the email address to which they should the change request.
     *
     * Maximum length: 100 characters.
     */
    changeEmail?: string;
    /**
     * Other information about the requirements for the user to change their email address.
     *
     * Maximum length: 255 characters.
     *
     * Example:
     *
     * `We do not require any other information from you to change your email address.`
     */
    changeEmailOther?: string;
    /**
     * Specifies the company name used in the disclosure. The default value is the account name.
     *
     * However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand`
     * property to **true**. Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email
     * notifications and in the signing experience.
     *
     * **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD.
     * You must also set the value of the `useBrand` property to **true**.
     */
    companyName?: string;
    /**
     * The phone number of the company associated with the consumer disclosure, as a free-formatted string.
     */
    companyPhone?: string;
    /**
     * The cost per page if the customer requests paper copies.
     *
     * Example:
     *
     * `0.0000`
     */
    copyCostPerPage?: string;
    /**
     * Specifies the fee collection method for cases in which the customer requires paper copies of the document.
     *
     * Maximum length: 255 characters.
     *
     * Example:
     *
     * `We will bill you for any fees at that time, if any.`
     */
    copyFeeCollectionMethod?: string;
    /**
     * The email address to which the customer should send a request for copies of a document.
     *
     * Maximum length: 100 characters.
     */
    copyRequestEmail?: string;
    /**
     * When set to **true**, indicates that the consumer disclosure is a custom disclosure. The default is **false**.
     */
    custom?: string;
    /**
     * When set to **true** (default), indicates that eSign is enabled.
     */
    enableEsign?: string;
    /**
     * The final, assembled text of the Electronic Record and Signature Disclosure that includes the appropriate `companyName` and other specifics.
     * It also includes the HTML tags used for formatting.
     */
    esignAgreement?: string;
    /**
     * The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`.
     * It also includes the HTML tags used for formatting.
     *
     * **Note**: If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
     */
    esignText?: string;
    /**
     * The code for the language version of the disclosure. The following languages are supported:
     *
     * - Arabic (`ar`)
     * - Bulgarian (`bg`)
     * - Czech (`cs`)
     * - Chinese Simplified (`zh_CN`)
     * - Chinese Traditional (`zh_TW`)
     * - Croatian (`hr`)
     * - Danish (`da`)
     * - Dutch (`nl`)
     * - English US (`en`)
     * - English UK (`en_GB`)
     * - Estonian (`et`)
     * - Farsi (`fa`)
     * - Finnish (`fi`)
     * - French (`fr`)
     * - French Canadian (`fr_CA`)
     * - German (`de`)
     * - Greek (`el`)
     * - Hebrew (`he`)
     * - Hindi (`hi`)
     * - Hungarian (`hu`)
     * - Bahasa Indonesian (`id`)
     * - Italian (`it`)
     * - Japanese (`ja`)
     * - Korean (`ko`)
     * - Latvian (`lv`)
     * - Lithuanian (`lt`)
     * - Bahasa Melayu (`ms`)
     * - Norwegian (`no`)
     * - Polish (`pl`)
     * - Portuguese (`pt`)
     * - Portuguese Brazil (`pt_BR`)
     * - Romanian (`ro`)
     * - Russian (`ru`)
     * - Serbian (`sr`)
     * - Slovak (`sk`)
     * - Slovenian (`sl`)
     * - Spanish (`es`)
     * - Spanish Latin America (`es_MX`)
     * - Swedish (`sv`)
     * - Thai (`th`)
     * - Turkish (`tr`)
     * - Ukrainian (`uk`)
     * - Vietnamese (`vi`)
     *
     * Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
     */
    languageCode?: string;
    /**
     * When set to **true**, the  recipient must agree to the consumer disclosure. The value of this property is read only. It is calculated based on the account setting
     * `consumerDisclosureFrequency` and the user's actions.
     */
    mustAgreeToEsign?: string;
    /**
     * **Deprecated**.
     *
     * The `pdfId` property in the consumer_disclosure PUT request is deprecated. For security reasons going forward, any value provided in the request packet must be ignored.
     */
    pdfId?: string;
    /**
     * When set to **true**, specifies that the company name in the signing brand is used for the disclosure. Whenever an envelope is sent from the account that uses a
     * signing brand with a specified company name, that value is used in email notifications and in the signing experience.
     *
     * When set to **false** (default), or if the signing brand does not specify a company name, the account name is used instead.
     *
     * **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD.
     */
    useBrand?: string;
    /**
     * When set to **true**, specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement.
     */
    useConsumerDisclosureWithinAccount?: string;
    /**
     * Metadata that indicates whether the `useConsumerDisclosureWithinAccount` property is editable.
     *
     */
    useConsumerDisclosureWithinAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 100 characters.
     */
    withdrawAddressLine1?: string;
    /**
     * Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 100 characters.
     */
    withdrawAddressLine2?: string;
    /**
     * When set to **true** (default), indicates that the customer can withdraw consent by email.
     */
    withdrawByEmail?: string;
    /**
     * When set to **true**, indicates that the customer can withdraw consent by postal mail. The default is **false**.
     */
    withdrawByMail?: string;
    /**
     * When set to **true**, indicates that the customer can withdraw consent by phone. The default is **false**.
     */
    withdrawByPhone?: string;
    /**
     * Contains the city of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 50 characters.
     */
    withdrawCity?: string;
    /**
     * Text indicating the consequences of withdrawing consent.
     *
     * Maximum length: 255 characters.
     */
    withdrawConsequences?: string;
    /**
     * Contains the email address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 100 characters.
     */
    withdrawEmail?: string;
    /**
     * Contains any other information needed to withdraw consent.
     *
     * Maximum length: 255 characters.
     *
     * Example:
     *
     * `We do not need any other information from you to withdraw consent.`
     */
    withdrawOther?: string;
    /**
     * Contains the phone number that a customer can call to register consent withdrawal notification as a free-formatted string.
     *
     * Maximum length: 20 characters.
     */
    withdrawPhone?: string;
    /**
     * Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 20 characters.
     */
    withdrawPostalCode?: string;
    /**
     * Contains the state of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Example: `PA`
     */
    withdrawState?: string;
}

export interface Contact {
    /**
     * The cloud service that provided the contact. Valid values are:
     *
     * - `rooms`
     * - `docusignCore` (default)
     *
     * <!-- Future:
     *
     * - `Box`
     * - `GoogleDrive`
     * - `Dropbox`
     * - `SalesForce`
     * - `SkyDrive`
     *
     * -->
     */
    cloudProvider?: string;
    /**
     * The id of the container at the cloud provider. For example, this might be the room id for a DocuSign Transaction Room.
     */
    cloudProviderContainerId?: string;
    /**
     * The id of a contact person in the account's address book.
     */
    contactId?: string;
    /**
     * A list of the contact's phone numbers.
     *
     * **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact.
     * Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:
     *
     * - Sending an envelope by using SMS
     * - Using phone authentication
     *
     * You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
     */
    contactPhoneNumbers?: /* Details about the phone numbers associated with a specific contact. */ ContactPhoneNumber[];
    /**
     * The URI for retrieving information about the contact.
     */
    contactUri?: string;

    emails?: string[];
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;

    isOwner?: boolean;

    name?: string;

    organization?: string;
    /**
     * When **true**, the tab is shared.
     */
    shared?: string;

    signingGroup?: string;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
}
/**
 * This response object contains information about the contacts associated with an account.
 */
export interface ContactGetResponse {
    /**
     * A list of contacts.
     */
    contacts?: Contact[];
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}
/**
 * The request object containing the new information for the contacts.
 */
export interface ContactModRequest {
    /**
     * A list of contacts.
     */
    contactList?: Contact[];
}
/**
 * Details about the phone numbers associated with a specific contact.
 */
export interface ContactPhoneNumber {
    /**
     * The contact's phone number.
     *
     * Example: `+12223334444`
     */
    phoneNumber?: string;
    /**
     * The type of phone number. Valid values are:
     *
     * - `home`
     * - `mobile`
     * - `work`
     * - `other`
     * - `fax`
     */
    phoneType?: string;
}
/**
 * This response objects shows the updated details for the contacts.
 */
export interface ContactUpdateResponse {
    /**
     * A list of contacts.
     */
    contacts?: Contact[];
}
/**
 * The `Contacts` resource enables you to manage the contact in an account's address book.
 */
export interface Contacts {
    /**
     * The cloud service that provided the contact. Valid values are:
     *
     * - `rooms`
     * - `docusignCore` (default)
     *
     * <!-- Future:
     *
     * - `Box`
     * - `GoogleDrive`
     * - `Dropbox`
     * - `SalesForce`
     * - `SkyDrive`
     *
     * -->
     */
    cloudProvider?: string;
    /**
     * The id of the container at the cloud provider. For example, this might be the room id for a DocuSign Transaction Room.
     */
    cloudProviderContainerId?: string;
    /**
     * The id of a contact person in the account's address book.
     */
    contactId?: string;
    /**
     * A list of the contact's phone numbers.
     *
     * **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios,
     * the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:
     *
     * - Sending an envelope by using SMS
     * - Using phone authentication
     *
     * You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
     */
    contactPhoneNumbers?: /* Details about the phone numbers associated with a specific contact. */ ContactPhoneNumber[];
    /**
     * The URI for retrieving information about the contact.
     */
    contactUri?: string;
    /**
     * The email address or addresses associated with the contact.
     */
    emails?: string[];
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * When **true**, the current user is the owner of the contact.
     */
    isOwner?: boolean;
    /**
     * The name of the contact.
     */
    name?: string;
    /**
     * The name of the contact's organization.
     */
    organization?: string;
    /**
     * When set to **true**, the contact is shared. For more information, see [Shared Contacts](https://support.docusign.com/guides/ndse-user-guide-manage-contacts).
     *
     * **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios,
     * the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:
     *
     * - Sending an envelope by using SMS
     * - Using phone authentication
     *
     * You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
     */
    shared?: string;
    /**
     * If the contact belongs to a signing group, this property contains the `signingGroupId`.
     */
    signingGroup?: string;
    /**
     * The name of the signing group that the contact belongs to.
     */
    signingGroupName?: string;
}
/**
 * The request body for the EnvelopeViews::createCorrect method.
 */
export interface CorrectViewRequest {
    /**
     * (Optional) The URL to which the user should be redirected after the correct/send view session has ended. DocuSign redirects to this URL and includes an event
     *  parameter that your app can use.
     *
     * Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.
     *
     * The event parameters returned are:
     *
     * * `send` (user corrected and sent the envelope)
     * * `save` (user saved the envelope)
     * * `cancel` (user canceled the transaction.)
     * * `error` (there was an error when performing the correct or send)
     * * `sessionEnd` (the session ended before the user completed a different action)
     *
     * ###### Note: Include `https://` in the URL or the redirect might not succeed on some browsers.
     */
    returnUrl?: string;
    /**
     * Specifies whether the window is displayed with or without dressing.
     */
    suppressNavigation?: string;
}

export interface Country {
    isoCode?: string;

    name?: string;

    provinces?: Province[];

    provinceValidated?: string;
}
/**
 * This object contains information about a credit card that is associated with an account.
 */
export interface CreditCardInformation {
    /**
     * A complex element containing the credit card billing address information.
     */
    address?: /* Contains address information. */ AddressInformation;
    /**
     * The credit card number.
     */
    cardNumber?: string;
    /**
     * The type of credit card. Valid values are:
     *
     * - `visa`
     * - `mastercard`
     * - `amex`
     */
    cardType?: string;
    /**
     * The 3 or 4-digit card verification value (CVV) number associated with the credit card. CVV numbers are also referred to as card security codes (CSCs).
     */
    cvNumber?: string;
    /**
     * The month that the credit card expires, expressed as a number from 1 to 12.
     */
    expirationMonth?: string;
    /**
     * The year in which the credit card expires, in 4-digit format.
     */
    expirationYear?: string;
    /**
     * The exact name as it appears on the credit card.
     */
    nameOnCard?: string;
}

export interface CreditCardTypes {
    /**
     * An array containing supported credit card types.
     */
    cardTypes?: string[];
}
/**
 * Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only.
 */
export interface CurrencyFeatureSetPrice {
    /**
     * Reserved for DocuSign.
     */
    currencyCode?: string;
    /**
     * Reserved for DocuSign.
     */
    currencySymbol?: string;
    /**
     * Reserved for DocuSign.
     */
    envelopeFee?: string;
    /**
     * Reserved for DocuSign.
     */
    fixedFee?: string;
    /**
     * Reserved for DocuSign.
     */
    seatFee?: string;
}

export interface CurrencyPlanPrice {
    /**
     * Specifies the ISO currency code for the account.
     */
    currencyCode?: string;
    /**
     * Specifies the currency symbol for the account.
     */
    currencySymbol?: string;
    /**
     * The per-seat price associated with the plan.
     *
     * Example: `"456.0000"`
     */
    perSeatPrice?: string;
    /**
     * A simple type enumeration of the language used. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id),
     * Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en),
     * English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu),
     * Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR),
     * Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr),
     * Ukrainian (uk) and Vietnamese (vi).
     */
    supportedCardTypes?: CreditCardTypes;
    /**
     * The support incident fee charged for each support incident.
     *
     * Example: `"$0.00"`
     */
    supportIncidentFee?: string;
    /**
     * The support plan fee charged for this plan.
     *
     * Example: `"$0.00"`
     */
    supportPlanFee?: string;
}
/**
 * This object provides details about a custom field.
 */
export interface CustomField {
    /**
     * The type of custom field. Valid values are:
     *
     * - `text` (default)
     * - `list`
     */
    customFieldType?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The id of the custom field.
     */
    fieldId?: string;
    /**
     * For a list custom field, this is an array of strings that represent the items in a list.
     *
     * Maximum Length: 2,000 characters.
     */
    listItems?: string[];
    /**
     * The name of the custom field.
     */
    name?: string;
    /**
     * When set to **true**, the signer must complete the custom field.
     */
    required?: string;
    /**
     * When set to **true**, the custom field displays at the top of the Certificate of Completion.
     */
    show?: string;
    /**
     * Specifies the value of the custom field.
     *
     * Maximum Length: 2,000 characters.
     */
    value?: string;
}

export interface CustomFields {
    /**
     * An array of list custom fields.
     */
    listCustomFields?: /* This object represents a list custom field from which envelope creators and senders can select custom data. */ ListCustomField[];
    /**
     * An array of text custom fields.
     */
    textCustomFields?: /* This object represents a free text custom field where envelope creators and senders can enter custom data. */ TextCustomField[];
}

export interface CustomFieldsEnvelope {
    /**
     * An array of list custom fields.
     */
    listCustomFields?: /* This object represents a list custom field from which envelope creators and senders can select custom data. */ ListCustomField[];
    /**
     * An array of text custom fields.
     */
    textCustomFields?: /* This object represents a free text custom field where envelope creators and senders can enter custom data. */ TextCustomField[];
}

export interface CustomSettingsInformation {
    /**
     * The name/value pair information for the user custom setting.
     */
    customSettings?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
}
/**
 * Custom tabs
 */
export interface CustomTabs {
    /**
     * An optional string that is used to auto-match tabs to strings located in the documents of an envelope.
     */
    anchor?: string;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters
     * are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded
     * document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * The user name of the DocuSign user who created this object.
     */
    createdByDisplayName?: string;
    /**
     * The userId of the DocuSign user who created this object.
     */
    createdByUserId?: string;
    /**
     * The DocuSign-generated custom tab ID for the custom tab to be applied. This property can only be used when adding new tabs for a recipient. When used, the new tab
     * inherits all of the custom tab properties.
     */
    customTabId?: string;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter
     * as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * When set to **true**, the custom tab is editable. Otherwise the custom tab cannot be modified.
     */
    editable?: string;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * When set to **true**, the tab is included in e-mails related to the envelope on which it exists. This applies to only specific tabs.
     */
    includedInEmail?: string;
    /**
     * The original value of the tab.
     */
    initialValue?: string;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * If the tab is a list, this represents the values that are possible for the tab.
     */
    items?: string[];
    /**
     * The UTC DateTime this object was last modified. This is in ISO8601 format.
     */
    lastModified?: string;
    /**
     * The User Name of the DocuSign user who last modified this object.
     */
    lastModifiedByDisplayName?: string;
    /**
     * The userId of the DocuSign user who last modified this object.
     */
    lastModifiedByUserId?: string;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * The maximum number of entry characters supported by the custom tab.
     */
    maximumLength?: string;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;
    /**
     * The name of the custom tab.
     */
    name?: string;
    /**
     * If the custom tab is for a payment request, this is the external code for the item associated with the charge. For example, this might be your product id.
     *
     * Example: `SHAK1`
     *
     * Maximum Length: 100 characters.
     */
    paymentItemCode?: string;
    /**
     * If the custom tab is for a payment request, this is the description of the item associated with the charge.
     *
     * Example: `The Danish play by Shakespeare`
     *
     * Maximum Length: 100 characters.
     */
    paymentItemDescription?: string;
    /**
     * If the custom tab is for a payment request, this is the name of the item associated with the charge.
     *
     * Maximum Length: 100 characters.
     *
     * Example: `Hamlet`
     */
    paymentItemName?: string;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
     */
    scaleValue?: string;
    /**
     * When set to **true**, the radio button is selected.
     */
    selected?: string;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * The type of stamp. Valid values are:
     *
     * - `signature`: A signature image. This is the default value.
     * - `stamp`: A stamp image.
     * - null
     */
    stampType?: string;
    /**
     * Metadata that indicates whether the `stampType` property is editable.
     *
     */
    stampTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * The type of this tab. Values are:
     *
     * - Approve
     * - CheckBox
     * - Company
     * - Date
     * - DateSigned,	Decline
     * - Email,	EmailAddress
     * - EnvelopeId
     * - FirstName
     * - Formula
     * - FullName,	InitialHere
     * - InitialHereOptional
     * - LastName
     * - List
     * - Note
     * - Number
     * - Radio
     * - SignerAttachment
     * - SignHere
     * - SignHereOptional
     * - Ssn
     * - Text
     * - Title
     * - Zip5
     * - Zip5Dash4
     *
     */
    type?: string;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * A regular expression used to validate input for the tab.
     */
    validationPattern?: string;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
}
/**
 * A tab that allows the recipient to enter a date. Date tabs
 * are one-line fields that allow date information to be
 * entered in any format. The tooltip for this tab recommends
 * entering the date as MM/DD/YYYY, but this is not enforced.
 * The format entered by the signer is retained. If you need a
 * particular date format enforced, DocuSign recommends using a
 * Text tab with a validation pattern and a validation message
 * to enforce the format.
 *
 */
export interface Date {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc.
     * will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible
     * (the characters are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console.
     * The information on the downloaded document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * Metadata that indicates whether the `concealValueOnDocument` property is editable.
     */
    concealValueOnDocumentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all
     * the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter
     * as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * Metadata that indicates whether the `disableAutoSize` property is editable.
     */
    disableAutoSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property
     * that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional value that describes the maximum length of the property when the property is a string.
     */
    maxLength?: string;
    /**
     * Metadata that indicates whether the `maxLength` property is editable.
     */
    maxLengthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The initial value of the tab when it was sent to the recipient.
     */
    originalValue?: string;
    /**
     * Metadata that indicates whether the `originalValue` property is editable.
     */
    originalValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located.
     * For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and shared is true, information must be entered in this field to complete the envelope.
     */
    requireAll?: string;
    /**
     * Metadata that indicates whether the `requireAll` property is editable.
     */
    requireAllMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender must populate the tab before an envelope can be sent using the template.
     *
     * This value tab can only be changed by modifying (PUT) the template.
     *
     * Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
     */
    senderRequired?: string;
    /**
     * Metadata that indicates whether the `senderRequired` property is editable.
     */
    senderRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     *
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * Metadata that indicates whether the `validationMessage` property is editable.
     */
    validationMessageMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A regular expression used to validate input for the tab.
     */
    validationPattern?: string;
    /**
     * Metadata that indicates whether the `validationPattern` property is editable.
     */
    validationPatternMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}
/**
 * A tab that displays the date that the recipient signed the
 * document.
 *
 */
export interface DateSigned {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located.
     * For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}
/**
 * Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area.
 * The stamp is superimposed on top of this central area.
 *
 * This property contains the following information about the central rectangle:
 *
 * - `DateAreaX`: The X axis position of the top-left corner.
 * - `DateAreaY`: The Y axis position of the top-left corner.
 * - `DateAreaWidth`: The width of the rectangle.
 * - `DateAreaHeight`: The height of the rectangle.
 */
export interface DateStampProperties {
    /**
     * The height of the rectangle.
     */
    dateAreaHeight?: string;
    /**
     * The width of the rectangle.
     */
    dateAreaWidth?: string;
    /**
     * The X axis position of the top-left corner.
     */
    dateAreaX?: string;
    /**
     * The Y axis position of the top-left corner.
     */
    dateAreaY?: string;
}
/**
 * A tab that allows the recipient the option of declining an
 * envelope. If the recipient clicks the tab during the signing
 * process, the envelope is voided.
 *
 */
export interface Decline {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property
     * or an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     *  Specifies the decline text displayed in the tab.
     */
    buttonText?: string;
    /**
     * Metadata that indicates whether the `buttonText` property is editable.
     */
    buttonTextMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used,
     * the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The reason the recipient declined the document.
     */
    declineReason?: string;
    /**
     * Metadata that indicates whether the `declineReason` property is editable.
     */
    declineReasonMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The page number on which the tab is located.
     * For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface DiagnosticsSettingsInformation {
    /**
     *  When set to **true**, enables API request logging for the user.
     */
    apiRequestLogging?: string;
    /**
     * Specifies the maximum number of API requests to log.
     */
    apiRequestLogMaxEntries?: string;
    /**
     * Indicates the remaining number of API requests that can be logged.
     */
    apiRequestLogRemainingEntries?: string;
}

/**
 * Contains information about a bank that processes a customer's direct debit payments.
 */
export interface DirectDebitProcessorInformation {
    /**
     * The branch code of the bank used for direct debit.
     *
     * Maximum Length: 10 characters.
     */
    bankBranchCode?: string;
    /**
     * The check digit or digits in the international bank account number. These digits are used to confirm the validity of the account.
     *
     * Maximum Length: 4 characters.
     */
    bankCheckDigit?: string;
    /**
     * The code or number that identifies the bank. This is also known as the sort code.
     *
     * Example: `200000`
     *
     * Maximum Length: 18 characters.
     */
    bankCode?: string;
    /**
     * The name of the direct debit bank.
     *
     * Maximum Length: 80 characters.
     */
    bankName?: string;
    /**
     * The name on the direct debit bank account. This field is required for POST and PUT requests.
     *
     * Maximum Length: 60 characters.
     */
    bankTransferAccountName?: string;
    /**
     * The customer's bank account number. This value will be obfuscated. This field is required for POST and PUT requests.
     *
     * Maximum Length: 30 characters.
     */
    bankTransferAccountNumber?: string;
    /**
     * Specifies the type of direct debit transfer. The value of this field is dependent on the user's country. This field is required for POST and PUT requests. Possible values are:
     *
     * - `DirectDebitUK`
     * - `DirectEntryAU`
     * - `SEPA`
     */
    bankTransferType?: string;
    /**
     * The user's country. The system populates this value automatically.
     *
     *
     */
    country?: string;
    /**
     * The email address of the user who is associated with the payment method. This field is required for POST and PUT requests.
     *
     * Maximum Length: 80 characters.
     */
    email?: string;
    /**
     * The user's first name. This field is required for POST and PUT requests.
     *
     * Maximum Length: 30 characters.
     */
    firstName?: string;
    /**
     * The International Bank Account Number (IBAN).
     *
     * Example: `DE89370400440532013000`
     *
     * For more information, see [PeopleSoft's guide to Setting Up Banks](https://docs.oracle.com/cd/E16365_01/fscm91pbr0/eng/psbooks/fsbk/chapter.htm?File=fsbk/htm/fsbk03.htm).
     *
     * **Note**: This number will be obfuscated.
     */
    iBAN?: string;
    /**
     * The user's last name. This field is required for POST and PUT requests.
     *
     * Maximum Length: 70 characters.
     */
    lastName?: string;
}

export interface DisplayApplianceDocument {
    attachmentDescription?: string;
    documentId?: /* Integer that identifies the document in the envelope.*/ string;
    documentType?: string;
    envelopeId?: /*The envelope's GUID. \n\nExample: `93be49ab-afa0-4adf-933c-f752070d71ec`*/ string;
    externalDocumentId?: string;
    latestPDFId?: string;
    name?: string;
    pages?: /*An array of page objects.*/ number;
}

export interface DisplayApplianceDocumentPage {
    docPageCountTotal?: number;
    documentId?: /*Integer that identifies the document in the envelope.*/ string;
    documentName?: string;
    extension?: string;
    height72DPI?: number;
    isAttachmentType?: boolean;
    page?: number;
    pageId?: /*The unique id of the page.*/ string;
    type?: string;
    width72DPI?: number;
}

export interface DisplayApplianceEnvelope {
    addDemoStamp?: boolean;
    allowMultipleAttachments?: boolean;
    burnDefaultTabData?: boolean;
    convertPdfFields?: /*Boolean that specifies whether to enable PDF form fields to
            get converted to DocuSign secure fields when the document is added or
            uploaded to an envelope.*/ boolean;
    envelopeId?: /*The envelope's GUID. \n\nExample: `93be49ab-afa0-4adf-933c-f752070d71ec` */ string;
    envelopeType?: string;
    includeSigsBeforeComplete?: boolean;
    isConcatMode?: boolean;
    isEnvelopeIDStampingEnabled?: boolean;
    pdfFormConversionFontScale100?: boolean;
    shouldFlatten?: boolean;
    showEnvelopeChanges?: boolean;
    signOnline?: boolean;
    status?: /*The status of the item. */ string;
    userId?: /*The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
        `userId` can represent another user whom the Administrator is accessing. */ string;
}

export interface DisplayApplianceInfo {
    documentData?: DisplayApplianceDocument[];
    documentPages?: DisplayApplianceDocumentPage[];
    envelopeData?: DisplayApplianceEnvelope;
    pageData?: DisplayAppliancePage[];
    recipientData?: DisplayApplianceRecipient[];
}

export interface DisplayAppliancePage {
    documentId?: string;
    documentName?: string;
    externalDocumentId?: string;
    height?: number;
    isFirstPage?: boolean;
    pageId?: string;
    pageNo?: number;
    pageStatus?: string;
    pageType?: string;
    width?: number;
}

export interface DisplayAppliancePdf {
    attachmentInfo?: DisplayApplianceSignerAttachment;
    docName?: string;
    documentId?: string;
    latestPdf?: string;
    latestPDFId?: string;
    originalPdf?: string;
    originalPDFId?: string;
    pageCount?: number;
    pdfType?: string;
}

export interface DisplayApplianceRecipient {
    cfrPart11?: boolean;
    company?: string;
    digitalSignatureBase64?: string;
    email?: string;
    initialsBase64?: string;
    inPersonEmail?: string;
    isNotary?: boolean;
    notarySealBase64?: string;
    phoneNumber?: string;
    recipientCompleteCount?: number;
    recipientGuidId?: string;
    recipientId?: string;
    recipientStatus?: string;
    recipientType?: string;
    rowState?: string;
    signatureBase64?: string;
    signed?: boolean;
    signerApplyTabs?: boolean;
    signerAttachmentBase64?: string;
    userName?: string;
}

export interface DisplayApplianceSignerAttachment {
    attachmentDescription?: string;
    attachmentTabId?: string;
    documentId?: string;
    envelopeId?: string;
    pageCount?: number;
    pageId?: string;
    recipientId?: string;
}

export interface DobInformationInput {
    /**
     * Specifies the recipient's date, month, and year of birth.
     */
    dateOfBirth?: string;
    /**
     * Specifies the display level for the recipient. Valid values are:
     * * `ReadOnly`
     * * `Editable`
     * * `DoNotDisplay`
     */
    displayLevelCode?: string;
    /**
     * A Boolean value that specifies whether the information must be returned in the response.
     */
    receiveInResponse?: string;
}
/**
 * A document object.
 */
export interface Document {
    /**
     * Reserved for DocuSign.
     */
    applyAnchorTabs?: string;
    /**
     * This string sets the display and behavior properties of
     * the document during signing. The possible values are:
     *
     * * `modal`<br>
     *   The document is shown as a supplement action strip
     *   and can be viewed, downloaded, or printed in a modal window.
     *   This is the recommended value for supplemental documents.
     *
     * * `download`<br>
     *   The document is shown as a supplement action strip
     *   and can be viewed, downloaded, or printed in a new browser window.
     *
     * * `inline`<br>
     *   The document is shown in the normal signing window.
     *   This value is not used with supplemental documents,
     *   but is the default value for all other documents.
     *
     */
    display?: string;
    /**
     * The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document
     * using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding.
     */
    documentBase64?: string;

    documentFields?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
    /**
     * Specifies the document ID of this document. This value is used by tabs to determine which document they appear in.
     */
    documentId?: string;
    /**
     * When set to **true**, the document is been already encrypted by the sender for use with the DocuSign Key Manager Security Appliance.
     *
     */
    encryptedWithKeyManager?: string;
    /**
     * The file extension type of the document. Non-PDF documents are converted to PDF.
     *
     * If the document is not a PDF, `fileExtension` is required.
     *
     * If you try to upload a non-PDF document without a `fileExtension`, you will receive an "unable to load document" error message.
     *
     */
    fileExtension?: string;

    fileFormatHint?: string;

    htmlDefinition?: /* Holds the properties that define how to generate the responsive-formatted HTML for the document. */ DocumentHtmlDefinition;
    /**
     * When set to **true**,
     * the document is included in the combined document download (`documentsCombinedUri`).
     * The default value is **true**.
     *
     */
    includeInDownload?: string;

    isDynamicXfa?: boolean;

    isStaticXfa?: boolean;
    /**
     * Matchboxes define areas in a document for document matching when you are creating envelopes. They are only used when you upload and edit a template.
     *
     * A matchbox consists of 5 elements:
     *
     * * pageNumber - The document page number  on which the matchbox will appear.
     * * xPosition - The x position of the matchbox on a page.
     * * yPosition - The y position of the matchbox on a page.
     * * width - The width of the matchbox.
     * * height - The height of the matchbox.
     *
     */
    matchBoxes?: MatchBox[];
    /**
     * The name of the document.
     */
    name?: string;

    ocrRequests?: OcrRequest[];
    /**
     * (Optional) The order in which to sort the results.
     *
     * Valid values are:
     *
     *
     * * `asc`: Ascending order.
     * * `desc`: Descending order.
     */
    order?: string;
    /**
     * An integer value specifying the number of document pages in the template.
     */
    pageCount?: string;
    /**
     * An array of page objects.
     */
    pages?: string;

    pageSizes?: PageSize[];
    /**
     * The user's encrypted password hash.
     */
    password?: string;

    pdfFieldsData?: string;

    pdfFormFieldOption?: string;

    pdfWidgetsBase64?: string;
    /**
     * The file id from the cloud storage service where the document is located. This information is returned using
     * [CloudStorage::listFolders](https://developers.docusign.com/esign-rest-api/reference/CloudStorage/CloudStorage/listFolders) or
     * [CloudStorage::list](https://developers.docusign.com/esign-rest-api/reference/CloudStorage/CloudStorage/list).
     *
     */
    remoteUrl?: string;
    /**
     * Sets how the signer interacts with the supplemental document.
     * The possible values are:
     *
     * *	`no_interaction`<br>
     *   No recipient action is required.
     *
     * *	`view`<br>
     *   The recipient is required to view the document.
     *
     * *	`accept`<br>
     *   The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.
     *
     * *	`view_accept`<br>
     *   The recipient is required to view and accept the document.
     *
     *
     */
    signerMustAcknowledge?: string;

    signerMustAcknowledgeUseAccountDefault?: boolean;
    /**
     * A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data.
     * They may also display data to the recipients.
     */
    tabs?: EnvelopeRecipientTabs;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * When set to **true**, PDF form field data is transformed into document tab values when the PDF form field name matches the DocuSign custom tab tabLabel.
     * The resulting PDF form data is also returned in the PDF meta data when requesting the document PDF.
     *
     */
    transformPdfFields?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
}

export interface DocumentFieldsInformation {
    documentFields?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
}

export interface DocumentHtmlCollapsibleDisplaySettings {
    arrowClosed?: string;

    arrowColor?: string;

    arrowLocation?: string;

    arrowOpen?: string;

    arrowSize?: string;

    arrowStyle?: string;

    containerStyle?: string;

    labelStyle?: string;

    onlyArrowIsClickable?: boolean;

    outerLabelAndArrowStyle?: string;
}

/**
 * Holds the properties that define how to generate the responsive-formatted HTML for the document.
 */
export interface DocumentHtmlDefinition {
    /**
     * Contains text that all display anchors must start with. Using at least 4 characters will improve anchor processing performance.
     */
    displayAnchorPrefix?: string;
    /**
     * An object that defines how to handle a section of the HTML in signing. This property enables an incoming request to make a
     * section of the HTML collapsible and expandable or hidden from view. A start anchor, end anchor, or both are required.
     * If the anchors are not found, the display anchor will be ignored. For a list of the available types, see the `display` enum.
     */
    displayAnchors?: DocumentHtmlDisplayAnchor[];
    /**
     * The position on the page where the display section appears.
     */
    displayOrder?: string;
    /**
     * The number of the page on which the display section appears.
     */
    displayPageNumber?: string;
    /**
     * The GUID of the document.
     */
    documentGuid?: string;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Header text or an HTML tag to place above the responsive HTML block.
     */
    headerLabel?: string;
    /**
     * If set, the responsive HTML version of the signing document will only display on screens with the specified pixel width or less.
     * If the screen is larger than the value that you specify, the default PDF version of the content displays instead.
     */
    maxScreenWidth?: string;
    /**
     * Holds a comma-separated list of HTML tags to remove if they have no text within their node (including child nodes).
     */
    removeEmptyTags?: string;
    /**
     * When set to **true**, the **Mobile-Friendly** toggle displays at the top of the screen on the user's mobile device.
     * This toggle enables the user to switch between the mobile-friendly and PDF versions of a document. For example, the recipient can use this toggle to
     * review the document using the PDF view before they finish signing.
     */
    showMobileOptimizedToggle?: string;
    /**
     * Specifies the type of responsive signing that will be used with the document. Valid strings are:
     *
     * - `document`: The HTML signing page will be generated from the provided document. For details, see
     * [Converting a PDF to a signable HTML document](https://developers.docusign.com/esign-rest-api/guides/responsive-signing/converting-pdf).
     * - `html`: The HTML signing page will be passed directly. For details, see [Converting a PDF to a signable HTML
     * document](https://developers.docusign.com/esign-rest-api/guides/responsive-signing/converting-pdf).
     */
    source?: string;
}

export interface DocumentHtmlDefinitionOriginal {
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * The GUID of the document.
     */
    documentIdGuid?: string;

    htmlDefinition?: /* Holds the properties that define how to generate the responsive-formatted HTML for the document. */ DocumentHtmlDefinition;
}

export interface DocumentHtmlDefinitionOriginals {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: DocumentHtmlDefinitionOriginal[];
}

export interface DocumentHtmlDefinitions {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: string[];
}

export interface DocumentHtmlDisplayAnchor {
    /**
     * When set to **true**, the start or end anchor strings must match the strings specified by the start and end anchor settings in case as well as in content.
     */
    caseSensitive?: boolean;
    /**
     * This object defines how the HTML section inside the `startAnchor` and `endAnchor` displays.
     */
    displaySettings?: DocumentHtmlDisplaySettings;
    /**
     * Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.
     *
     * **Note**: A start anchor, an end anchor, or both are required.
     */
    endAnchor?: string;
    /**
     * When **true**, removes the end anchor string for the Smart Section from the HTML, preventing it from displaying.
     */
    removeEndAnchor?: boolean;
    /**
     * When **true**, removes the start anchor string for the Smart Section from the HTML, preventing it from displaying.
     */
    removeStartAnchor?: boolean;
    /**
     * Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of the document will be used by default.
     *
     * **Note**: A start anchor, an end anchor, or both are required.
     */
    startAnchor?: string;
}

export interface DocumentHtmlDisplaySettings {
    /**
     * Specifies the valid CSS-formatted styles to use on responsive table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column` types.
     */
    cellStyle?: string;
    /**
     * This object defines the appearance and function of a collapsible section or item.
     */
    collapsibleSettings?: DocumentHtmlCollapsibleDisplaySettings;
    /**
     * This string sets the display and behavior properties of
     * the document during signing. The possible values are:
     *
     * * `modal`<br>
     *   The document is shown as a supplement action strip
     *   and can be viewed, downloaded, or printed in a modal window.
     *   This is the recommended value for supplemental documents.
     *
     * * `download`<br>
     *   The document is shown as a supplement action strip
     *   and can be viewed, downloaded, or printed in a new browser window.
     *
     * * `inline`<br>
     *   The document is shown in the normal signing window.
     *   This value is not used with supplemental documents,
     *   but is the default value for all other documents.
     *
     */
    display?: string;
    /**
     * The label for the display section.
     */
    displayLabel?: string;
    /**
     * The position on the page where the display section appears.
     */
    displayOrder?: number; // int32
    /**
     * The number of the page on which the display section appears.
     */
    displayPageNumber?: number; // int32
    /**
     * When **true**, the `displayLabel` is hidden when the display section is expanded and the display section is no longer collapsible.
     * This property is valid only when the value of the `display` property is `collapsed`.
     */
    hideLabelWhenOpened?: boolean;
    /**
     * Specifies the valid CSS-formatted styles to use on inline display sections. This property is valid only when the value of the `display` property is `inline`.
     */
    inlineOuterStyle?: string;
    /**
     * The label for the display section when it is expanded from a collapsed state. This label displays only on the first opening and is only valid with the value of the
     * `display` property is `collapsed`.
     */
    labelWhenOpened?: string;

    preLabel?: string;
    /**
     * When **true** and the section is expanded, the position of the section close is scrolled to the top of the screen. This property is only valid when the value of the
     * `display` property is `collapsed`.
     */
    scrollToTopWhenOpened?: boolean;
    /**
     * Specifies the valid CSS-formatted styles to use on responsive tables. This property is valid only when the value of the `display` property is `responsive_table`
     * or `responsive_table_single_column`.
     */
    tableStyle?: string;
}
/**
 * This resource is used to create a responsive preview of a specific document.
 */
export interface DocumentResponsiveHtmlPreview {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: string[];
}

export interface DocumentTemplate {
    documentEndPage?: string;
    /**
     * Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
     */
    documentId?: string;

    documentStartPage?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The unique identifier of the template. If this is not provided, DocuSign generates an error and the call fails.
     */
    templateId?: string;
}

export interface DocumentTemplateList {
    documentTemplates?: DocumentTemplate[];
}
/**
 * This object configures a recipient's read/write access to a document.
 */
export interface DocumentVisibility {
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property
     * that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * Indicates whether the document is editable:
     *
     * - `editable`
     * - `read_only`
     */
    rights?: string;
    /**
     * When **true**, the document is visible to the recipient.
     */
    visible?: string;
}
/**
 * A list of `documentVisibility` objects that specify whether documents are visible to recipients.
 */
export interface DocumentVisibilityList {
    /**
     * An array of `documentVisibility` objects that specifies which documents are visible to which recipients.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
}

export interface DowngradRequestBillingInfoResponse {
    downgradePlanInformation?: DowngradePlanUpdateResponse;
    /**
     * The payment method used for the billing plan. Valid values are:
     *
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
}

export interface DowngradeBillingPlanInformation {
    downgradeEventType?: string;
    /**
     * An object used to identify the features and attributes of the account being created.
     */
    planInformation?: /* An object used to identify the features and attributes of the account being created. */ PlanInformation;
}

export interface DowngradePlanUpdateResponse {
    /**
     * The type of payment method used for the account. Valid values are:
     *
     * - `credit_card`
     * -
     */
    accountPaymentMethod?: string;

    downgradeEffectiveDate?: string;

    downgradePaymentCycle?: string;

    downgradePlanId?: string;

    downgradePlanName?: string;

    downgradeRequestStatus?: string;

    message?: string;
}

export interface Draw {
    allowSignerUpload?: string;

    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc.
     * will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab
     * inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The page number being accessed.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When **true**, the tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the item.
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;

    useBackgroundAsCanvas?: string;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for
 * eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
 */
export interface ENoteConfiguration {
    /**
     * When **false**, the user must configure Connect and eOriginal for the integration to work.
     */
    connectConfigured?: string;
    /**
     * When **false**, the user must configure eNote for the feature to work.
     *
     * **Note**: In the account settings, `allowENoteEOriginal` must be set to **true** to make changes to the configuration.
     */
    eNoteConfigured?: string;
    /**
     * The name of the organization.
     */
    organization?: string;
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * The user's username.
     */
    userName?: string;
}

export interface ENoteConfigurations {
    connectConfigured?: string;

    eNoteConfigured?: string;

    organization?: string;
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * The name of the user.
     */
    userName?: string;
}

/**
 * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access
 * rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email
 * nformation, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial
 * tabs and text tabs for the remaining recipients.
 */
export interface Editor {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Metadata that indicates whether the `accessCode` property is editable. Read only.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
     */
    addAccessCodeToEmail?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app.
     * Authenticating the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**,
     * an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group,
     * only the user who previously completed may sign again. Read only.
     */
    completedCount?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise
     * not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * The reason the recipient declined the document. Read only.
     */
    declinedReason?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient.
     * For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * The recipient's email address. Notification of the document to sign is sent to this email address.
     *
     * Maximum length: 100 characters.
     */
    email?: string;
    /**
     * Metadata that indicates whether the `email` property is editable. Read only.
     */
    emailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients, the other recipients will inherit
     * the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign,
     * just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions.
     * When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the
     * DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or
     * viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending
     * application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,
     * the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use.
     * In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.)
     * to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process
     * for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`,
     * `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope.
     * The merge fields are enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The recipient's first name.
     *
     * Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * Metadata that indicates whether the `firstame` property is editable. Read only.
     */
    firstNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    fullName?: string;
    /**
     * Reserved for DocuSign.
     */
    fullNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication
     * types appear in the web console sending export interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $.
     * To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a
     * phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default
     * settings for the recipient's account.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * The recipient's last name.
     */
    lastName?: string;
    /**
     * Metadata that indicates whether the `lastName` property is editable. Read only.
     */
    lastNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * The full legal name of the recipient. Maximum Length: 100 characters.
     *
     * **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A note sent to the recipient in the signing email.
     * This note is unique to this recipient.
     * In the user interface,
     * it appears near the upper left corner
     * of the document
     * on the signing screen.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * Metadata that indicates whether the `note` property is editable. Read only.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details. It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     *
     *
     */
    phoneAuthentication?: RecipientPhoneAuthentication;
    /**
     * Reserved for DocuSign.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Information about the recipient's authentication status. Read only.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed.
     * They don't need to sign, initial, date, or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information,
     * add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     */
    requireIdLookup?: string;
    /**
     * Metadata that indicates whether the `requireIdLookup` property is editable. Read only.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    signedDateTime?: string;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason,
     * we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients.
     * However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * Metadata that indicates whether the `signingGroupId` property is editable. Read only.
     */
    signingGroupIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
    /**
     * A complex type that contains information about users in the signing group.
     */
    signingGroupUsers?: UserInfo[];
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details. It contains the element
     * `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * The recipient's status. Read only.
     *
     * Possible values:
     *
     * - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about
     * the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
     * - `declined`: The recipient declined to sign the document(s) in the envelope.
     * - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
     * - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's
     * status automatically switches to `completed`.
     *
     */
    status?: string;
    /**
     * The code associated with the recipient's status. Read only.
     */
    statusCode?: string;
    /**
     * When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
     */
    suppressEmails?: string;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * The total number of tabs in the documents. Read only.
     */
    totalTabCount?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}

/**
 * A tab that allows the recipient to enter an email address.
 * This is a one-line field that checks that a valid email
 * address is entered. It uses the same parameters as a Text
 * tab, with the validation message and pattern set for email
 * information.
 *
 * When getting information that includes
 * this tab type, the original value of the tab when the
 * associated envelope was sent is included in the response.
 *
 */
export interface Email {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible
     * (the characters are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console.
     * The information on the downloaded document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * Metadata that indicates whether the `concealValueOnDocument` property is editable.
     */
    concealValueOnDocumentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab
     * inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be a
     * ble enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * Metadata that indicates whether the `disableAutoSize` property is editable.
     */
    disableAutoSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional value that describes the maximum length of the property when the property is a string.
     */
    maxLength?: string;
    /**
     * Metadata that indicates whether the `maxLength` property is editable.
     */
    maxLengthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The initial value of the tab when it was sent to the recipient.
     */
    originalValue?: string;
    /**
     * Metadata that indicates whether the `originalValue` property is editable.
     */
    originalValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located.
     * For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and shared is true, information must be entered in this field to complete the envelope.
     */
    requireAll?: string;
    /**
     * Metadata that indicates whether the `requireAll` property is editable.
     */
    requireAllMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender must populate the tab before an envelope can be sent using the template.
     *
     * This value tab can only be changed by modifying (PUT) the template.
     *
     * Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
     */
    senderRequired?: string;
    /**
     * Metadata that indicates whether the `senderRequired` property is editable.
     */
    senderRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     *
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * Metadata that indicates whether the `validationMessage` property is editable.
     */
    validationMessageMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A regular expression used to validate input for the tab.
     */
    validationPattern?: string;
    /**
     * Metadata that indicates whether the `validationPattern` property is editable.
     */
    validationPatternMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * A tab that displays the recipient's email as entered in the
 * recipient information.
 *
 */
export interface EmailAddress {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property
     * for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This property can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located.
     * For supplemental documents, this value must be `1`.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface EmailSettings {
    /**
     * An array containing the email address that should receive a copy of all email communications related to an envelope for archiving purposes. Maximum Length: 100 characters.
     *
     * While this property is an array, note that it takes only a single email address.
     *
     * **Note**: Only users with the `canManageAccount` setting set to **true** can use this option.
     *
     * DocuSign verifies that the email format is correct, but does not verify that the email address is active. You can use this for archiving purposes. However,
     * using this property overrides the BCC for Email Archive information setting for this envelope.
     *
     * **Example**: if your account has BCC for Email Archive set up for the email address archive@mycompany.com and you send an envelope using the BCC Email
     * Override to send a BCC email to salesarchive@mycompany.com, then a copy of the envelope is only sent to the salesarchive@mycompany.com email address.
     */
    bccEmailAddresses?: /* Contains information about the BCC email address. */ BccEmailAddress[];
    /**
     * The Reply To email address to use for email replies, instead of the one that is configured at the account level. DocuSign verifies that the email address
     * is in a correct format, but does not verify that it is active. Maximum Length: 100 characters.
     */
    replyEmailAddressOverride?: string;
    /**
     * The name to associate with the Reply To email address, instead of the name that is configured at the account level. Maximum Length: 100 characters.
     */
    replyEmailNameOverride?: string;
}

export interface Envelope {
    /**
     * Reserved for DocuSign.
     */
    accessControlListBase64?: string;
    /**
     * When set to **true**, users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document,
     * they can add a comment to the document.
     */
    allowComments?: string;
    /**
     * When set to **true**, the Document Markup feature is enabled.
     *
     * **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
     */
    allowMarkup?: string;
    /**
     * When **true**, the recipient can redirect an envelope to a more appropriate recipient.
     */
    allowReassign?: string;
    /**
     * When set to **true**, recipients can view the history of the envelope.
     */
    allowViewHistory?: string;
    /**
     * Deprecated. This feature has been replaced by signing groups.
     */
    anySigner?: string;
    /**
     * When **true**, the envelope is queued for processing and the value of the `status` property is set to `Processing`. Additionally, GET status calls return
     * `Processing` until completed.
     *
     *
     * **Note**: A `transactionId` is required for this call to work correctly. When the envelope is created, the status is `Processing` and an `envelopeId`
     * is not returned in the response. To get the `envelopeId`, use a GET envelope query by using the
     * [transactionId](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/create/#envelopeDefinition) or by checking the Connect notification.
     */
    asynchronous?: string;
    /**
     * Contains a URL for retrieving the attachments that are associated with the envelope.
     */
    attachmentsUri?: string;
    /**
     * When **true**, marks all of the documents in the envelope as authoritative copies.
     *
     * **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level,
     * but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
     */
    authoritativeCopy?: string;
    /**
     * The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
     * If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
     */
    authoritativeCopyDefault?: string;
    /**
     * When set to **true**, autonavigation is set for the recipient.
     *
     */
    autoNavigation?: string;
    /**
     * The id of the brand.
     */
    brandId?: string;
    /**
     * When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
     */
    brandLock?: string;
    /**
     * The URI for retrieving certificate information.
     */
    certificateUri?: string;
    /**
     * Specifies the date and time this item was completed.
     */
    completedDateTime?: string;

    copyRecipientData?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise
     * not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: /* An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administators
        to group and manage envelopes.  */ AccountCustomFields;
    /**
     * The URI for retrieving custom fields.
     */
    customFieldsUri?: string;
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deletedDateTime?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * When set to **true**, responsive documents are disabled for the envelope.
     */
    disableResponsiveDocument?: string;
    /**
     * The URI for retrieving all of the documents associated with the envelope as a single PDF file.
     */
    documentsCombinedUri?: string;
    /**
     * The URI for retrieving all of the documents associated with the envelope as separate files.
     */
    documentsUri?: string;
    /**
     * This is the same as the email body. If the sender enters an email blurb, it is included in the email body for all envelope recipients.
     */
    emailBlurb?: string;
    /**
     * A complex type that contains email settings.
     */
    emailSettings?: EmailSettings;
    /**
     * The subject line of the email message that is sent to all recipients.
     *
     * For information about adding merge field information to the email subject, see [Template Email Subject Merge
     * Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
     *
     */
    emailSubject?: string;
    /**
     * When set to **true**, the signer is allowed to print the document and sign it on paper.
     */
    enableWetSign?: string;
    /**
     * When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role
     * (Agent, Editor, or Intermediaries) or
     * informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically
     * excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are
     * specifically excluded by using this setting when an envelope is sent.
     *
     * **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.
     *
     * [docviz]: /esign/restapi/Envelopes/EnvelopeDocumentVisibility
     */
    enforceSignerVisibility?: string;
    /**
     * An array of attachment objects that provide information about the attachments that are associated with the envelope.
     */
    envelopeAttachments?: /* Contains information about an attachment. */ Attachment[];
    /**
     * An array containing information about the documents that are included in the envelope.
     */
    envelopeDocuments?: /* This object contains details about the envelope document. */ EnvelopeDocument[];
    /**
     * The envelope's GUID.
     *
     * Example: `93be49ab-afa0-4adf-933c-f752070d71ec`
     */
    envelopeId?: string;
    /**
     * When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
     * After a document or attachment is stamped with an Envelope ID,
     * the ID is seen by all recipients
     * and becomes a permanent part of the document
     * and cannot be removed.
     */
    envelopeIdStamping?: string;
    /**
     * Reserved for DocuSign.
     */
    envelopeLocation?: string;
    /**
     * Provides information about the features and services that are enabled for the envelope, including the Correct feature, the Advanced Correct feature, and DocuSign eNotary service.
     */
    envelopeMetadata?: EnvelopeMetadata;
    /**
     * The URI for retrieving the envelope or envelopes.
     */
    envelopeUri?: string;
    /**
     * An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
     */
    expireAfter?: string;
    /**
     * The date and time the envelope is set to expire.
     */
    expireDateTime?: string;
    /**
     * When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`).
     * Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used.
     * If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
     */
    expireEnabled?: string;
    /**
     * May contain an external identifier for the envelope.
     */
    externalEnvelopeId?: string;
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * When set to **true**, indicates that users have added comments to the envelope.
     */
    hasComments?: string;
    /**
     * When set to **true**, indicates that the data collected through form fields on a document has changed.
     */
    hasFormDataChanged?: string;
    /**
     * When set to **true**, indicates that a .wav file used for voice authentication is included in the envelope.
     */
    hasWavFile?: string;
    /**
     * Reserved for DocuSign.
     */
    holder?: string;
    /**
     * The date and time the envelope was initially sent.
     */
    initialSentDateTime?: string;
    /**
     * When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
     */
    is21CFRPart11?: string;
    /**
     * When set to **true**, indicates that the envelope is a dynamic envelope.
     */
    isDynamicEnvelope?: string;
    /**
     * When set to **true**, indicates that the envelope is a signature-provided envelope.
     */
    isSignatureProviderEnvelope?: string;
    /**
     * The date and time that the item was last modified.
     */
    lastModifiedDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    location?: string;
    /**
     * Provides lock information about an envelope that a user has locked.
     */
    lockInformation?: /* This section provides information about envelope locks. */ EnvelopeLocks;
    /**
     * When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope.
     *
     * Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes.
     *
     * However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
     */
    messageLock?: string;

    notification?: /* A complex element that specifies the notification settings for the envelope. */ Notification;
    /**
     * The URI for retrieving notifications.
     */
    notificationUri?: string;
    /**
     * Information about any PowerForms that are included in the envelope.
     */
    powerForm?: /* Contains details about a PowerForm. */ PowerForm;
    /**
     * The date that a purge was completed.
     */
    purgeCompletedDate?: string;
    /**
     * The date that a purge was requested.
     */
    purgeRequestDate?: string;
    /**
     * Shows the current purge state for the envelope. The possible values are:
     *
     * * `unpurged`: There has been no successful request to purge documents.
     * * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
     * * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
     * * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
     * * `documents_purged`: The envelope documents have been successfully purged.
     * * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.
     *
     *
     */
    purgeState?: string;
    /**
     * An array of recipient objects that provides details about the recipients of the envelope.
     */
    recipients?: /* Envelope recipients */ EnvelopeRecipients;
    /**
     * When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
     */
    recipientsLock?: string;
    /**
     * Contains a URI for an endpoint that you can use to retrieve the recipients.
     */
    recipientsUri?: string;
    /**
     * Information about the sender of the envelope.
     */
    sender?: UserInfo;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * When set to **true**, recipients can sign on a mobile device.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerCanSignOnMobile?: string;
    /**
     * Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
     */
    signingLocation?: string;
    /**
     * The status of the item.
     */
    status?: string;
    /**
     * The data and time that the status changed.
     */
    statusChangedDateTime?: string;
    /**
     * The DateTime that the envelope changed status (i.e. was created or sent.)
     */
    statusDateTime?: string;
    /**
     * The URI for retrieving the templates.
     */
    templatesUri?: string;
    /**
     * Specifies the Transaction ID from the AppStore.
     */
    transactionId?: string;
    /**
     * When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting.
     * When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients.
     *
     * If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not
     * returned in responses when getting envelope information.
     */
    useDisclosure?: string;
    /**
     * The date and time the envelope or template was voided.
     */
    voidedDateTime?: string;
    /**
     * The reason the envelope or template was voided.
     */
    voidedReason?: string;
}

export interface EnvelopeAttachment {
    /**
     * Valid values are `sender` and `senderAndAllRecipients`.
     */
    accessControl?: string;
    /**
     * The unique identifier for the attachment.
     */
    attachmentId?: string;
    /**
     * Specifies the type of the attachment for the recipient. Possible values are:
     *
     * - `.htm`
     * - `.xml`
     */
    attachmentType?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;

    label?: string;

    name?: string;
}

export interface EnvelopeAttachments {
    /**
     * Valid values are `sender` and `senderAndAllRecipients`.
     */
    accessControl?: string;
    /**
     * The unique identifier for the attachment.
     */
    attachmentId?: string;
    /**
     * Specifies the type of the attachment for the recipient. Possible values are:
     *
     * - `.htm`
     * - `.xml`
     */
    attachmentType?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * A label for the attachment. Potential values include:
     *
     * - `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms) provide a step-by-step, mobile-ready experience to help signers easily complete long or complex forms.
     * - `eventNotifications`: A list of envelope-level event statuses that trigger Connect to send updates to the endpoint specified in the `url` property.
     */
    label?: string;
    /**
     * The name of the attachment.
     */
    name?: string;
}

export interface EnvelopeAttachmentsRequest {
    /**
     * An object that contains information about the attachment.
     */
    attachments?: /* Contains information about an attachment. */ Attachment[];
}

export interface EnvelopeAttachmentsResult {
    /**
     * An array of attachment objects that contain information about the attachments.
     */
    attachments?: EnvelopeAttachment[];
}

export interface EnvelopeAuditEvent {
    eventFields?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
}

export interface EnvelopeAuditEventResponse {
    /**
     * Reserved: TBD
     */
    auditEvents?: EnvelopeAuditEvent[];
}

/**
 * Details about envelope consumer disclosures.
 */
export interface EnvelopeConsumerDisclosures {
    /**
     * The GUID of the account associated with the consumer disclosure.
     */
    accountEsignId?: string;
    /**
     * When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents.
     * If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
     * **Note**: Only Admin users can change this setting.
     */
    allowCDWithdraw?: string;
    /**
     * Metadata that indicates whether the `allowCDWithdraw` property is editable.
     *
     */
    allowCDWithdrawMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * If the customer needs to change their email address, this is the email address to which they should the change request.
     */
    changeEmail?: string;
    /**
     * Other information about the requirements for the user to change their email address.
     *
     * Example:
     *
     * `We do not require any other information from you to change your email address.`
     */
    changeEmailOther?: string;
    /**
     * Specifies the company name used in the disclosure. The default value is the account name.
     *
     * However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true**.
     * Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.
     *
     * **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD.
     * You must also set the value of the `useBrand` property to **true**.
     *
     */
    companyName?: string;
    /**
     * The phone number of the company associated with the consumer disclosure, as a free-formatted string.
     */
    companyPhone?: string;
    /**
     * The cost per page if the customer requests paper copies.
     *
     * Example:
     *
     * `0.0000`
     */
    copyCostPerPage?: string;
    /**
     * Specifies the fee collection method for cases in which the customer requires paper copies of the document.
     *
     * Maximum length: 255 characters.
     *
     * Example:
     *
     * `We will bill you for any fees at that time, if any.`
     */
    copyFeeCollectionMethod?: string;
    /**
     * The email address to which the customer should send a request for copies of a document.
     *
     * Maximum length: 100 characters.
     */
    copyRequestEmail?: string;
    /**
     * When set to **true**, indicates that the consumer disclosure is a custom disclosure. The default is **false**.
     */
    custom?: string;
    /**
     * When set to **true** (default), indicates that eSign is enabled.
     */
    enableEsign?: string;
    /**
     * The final, assembled text of the Electronic Record and Signature Disclosure that includes the appropriate `companyName` and other specifics.
     * It also includes the HTML tags used for formatting.
     */
    esignAgreement?: string;
    /**
     * The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`. It also includes the HTML tags used for formatting.
     *
     * **Note**: If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
     */
    esignText?: string;
    /**
     * The simple type enumeration for the language to use when displaying the disclosure. The following languages are supported:
     *
     * - Arabic (`ar`)
     * - Bulgarian (`bg`)
     * - Czech (`cs`)
     * - Chinese Simplified (`zh_CN`)
     * - Chinese Traditional (`zh_TW`)
     * - Croatian (`hr`)
     * - Danish (`da`)
     * - Dutch (`nl`)
     * - English US (`en`)
     * - English UK (`en_GB`)
     * - Estonian (`et`)
     * - Farsi (`fa`)
     * - Finnish (`fi`)
     * - French (`fr`)
     * - French Canadian (`fr_CA`)
     * - German (`de`)
     * - Greek (`el`)
     * - Hebrew (`he`)
     * - Hindi (`hi`)
     * - Hungarian (`hu`)
     * - Bahasa Indonesian (`id`)
     * - Italian (`it`)
     * - Japanese (`ja`)
     * - Korean (`ko`)
     * - Latvian (`lv`)
     * - Lithuanian (`lt`)
     * - Bahasa Melayu (`ms`)
     * - Norwegian (`no`)
     * - Polish (`pl`)
     * - Portuguese (`pt`)
     * - Portuguese Brazil (`pt_BR`)
     * - Romanian (`ro`)
     * - Russian (`ru`)
     * - Serbian (`sr`)
     * - Slovak (`sk`)
     * - Slovenian (`sl`)
     * - Spanish (`es`)
     * - Spanish Latin America (`es_MX`)
     * - Swedish (`sv`)
     * - Thai (`th`)
     * - Turkish (`tr`)
     * - Ukrainian (`uk`)
     * - Vietnamese (`vi`)
     *
     * Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
     */
    languageCode?: string;
    /**
     * When set to **true**, the  recipient must agree to the consumer disclosure. The value of this property is read only. It is calculated based on the account setting
     * `consumerDisclosureFrequency` and the user's actions.
     */
    mustAgreeToEsign?: string;
    /**
     * **Deprecated**.
     *
     * The `pdfId` property in the consumer_disclosure PUT request is deprecated. For security reasons going forward, any value provided in the request packet must be ignored.
     */
    pdfId?: string;
    /**
     * When set to **true**, specifies that the company name in the signing brand is used for the disclosure. Whenever an envelope is sent from the account that uses a
     * signing brand with a specified company name, that value is used in email notifications and in the signing experience.
     *
     * When set to **false** (default), or if the signing brand does not specify a company name, the account name is used instead.
     *
     * **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD.
     */
    useBrand?: string;
    /**
     * When set to **true**, specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement.
     */
    useConsumerDisclosureWithinAccount?: string;
    /**
     * Metadata that indicates whether the `useConsumerDisclosureWithinAccount` property is editable.
     *
     */
    useConsumerDisclosureWithinAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 100 characters.
     */
    withdrawAddressLine1?: string;
    /**
     * Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 100 characters.
     */
    withdrawAddressLine2?: string;
    /**
     * When set to **true** (default), indicates that the customer can withdraw consent by email.
     */
    withdrawByEmail?: string;
    /**
     * When set to **true**, indicates that the customer can withdraw consent by postal mail. The default is **false**.
     */
    withdrawByMail?: string;
    /**
     * When set to **true**, indicates that the customer can withdraw consent by phone. The default is **false**.
     */
    withdrawByPhone?: string;
    /**
     * Contains the city of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 50 characters.
     */
    withdrawCity?: string;
    /**
     * Text indicating the consequences of withdrawing consent.
     *
     * Maximum length: 255 characters.
     */
    withdrawConsequences?: string;
    /**
     * Contains the email address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 100 characters.
     */
    withdrawEmail?: string;
    /**
     * Contains any other information needed to withdraw consent.
     *
     * Maximum length: 255 characters.
     *
     * Example:
     *
     * `We do not need any other information from you to withdraw consent.`
     */
    withdrawOther?: string;
    /**
     * Contains the phone number that a customer can call to register consent withdrawal notification as a free-formatted string.
     *
     * Maximum length: 20 characters.
     */
    withdrawPhone?: string;
    /**
     * Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Maximum length: 20 characters.
     */
    withdrawPostalCode?: string;
    /**
     * Contains the state of the postal address to which a customer can send a consent withdrawal notification.
     *
     * Example: `PA`
     */
    withdrawState?: string;
}

/**
 * An envelope custom field enables you to collect custom data about envelopes on a per-envelope basis. You can then use the custom data for sorting, organizing, searching,
 * and other downstream processes. For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault their
 * documents from the web app on a per-envelope basis by setting an envelope custom field with a name like "eVault with eOriginal?" to "Yes" or "No".
 *
 * When a user creates an envelope, the envelope custom fields display in the **Envelope Settings** section of the DocuSign console. Envelope recipients do not see the
 * envelope custom fields. For more information, see [Envelope Custom Fields](https://support.docusign.com/en/guides/ndse-admin-guide-document-labels).
 */
export interface EnvelopeCustomFields {
    /**
     * An array of list custom fields.
     */
    listCustomFields?: /* This object represents a list custom field from which envelope creators and senders can select custom data. */ ListCustomField[];
    /**
     * An array of text custom fields.
     */
    textCustomFields?: /* This object represents a free text custom field where envelope creators and senders can enter custom data. */ TextCustomField[];
}

/**
 * Envelope object definition.
 */
export interface EnvelopeDefinition {
    /**
     * Reserved for DocuSign.
     */
    accessControlListBase64?: string;
    /**
     * Sets the document reading zones for screen reader applications.  This element can only be used if Document Accessibility is enabled for the account.
     *
     * ###### Note: This information is currently generated from the DocuSign web console by setting the reading zones when creating a template,
     * exporting the reading zone string information, and adding it here.
     */
    accessibility?: string;
    /**
     * When **true**, comments are allowed on the envelope.
     */
    allowComments?: string;
    /**
     * When set to **true**, the Document Markup feature is enabled.
     *
     * **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
     */
    allowMarkup?: string;
    /**
     * When **true**, the recipient can redirect an envelope to a more appropriate recipient.
     */
    allowReassign?: string;
    /**
     * When set to **true**, this enables the Recursive Recipients feature and allows a recipient to appear more than once in the routing order.
     */
    allowRecipientRecursion?: string;
    /**
     * When **true**, users can view the history of the envelope.
     */
    allowViewHistory?: string;
    /**
     * Deprecated. This feature has been replaced by signing groups.
     */
    anySigner?: string;
    /**
     * When **true**, the envelope is queued for processing and the value of the `status` property is set to `Processing`. Additionally, GET status calls return `Processing` until completed.
     *
     *
     * **Note**: A `transactionId` is required for this call to work correctly. When the envelope is created, the status is `Processing` and an `envelopeId`
     * is not returned in the response. To get the `envelopeId`, use a GET envelope query by using the
     * [transactionId](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/create/#envelopeDefinition) or by checking the Connect notification.
     */
    asynchronous?: string;
    /**
     * An array of attachment objects containing details about any envelope attachments.
     */
    attachments?: /* Contains information about an attachment. */ Attachment[];
    /**
     * The URI for retrieving the envelope attachments.
     */
    attachmentsUri?: string;
    /**
     * When **true**, marks all of the documents in the envelope as authoritative copies.
     *
     * **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level,
     * but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
     */
    authoritativeCopy?: string;
    /**
     * The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
     * If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
     */
    authoritativeCopyDefault?: string;
    /**
     * When set to **true**, autonavigation is set for the recipient.
     *
     */
    autoNavigation?: string;
    /**
     * The id of the brand, or text and formatting, to use for the envelope. To use brands, account branding must be enabled for the account.
     */
    brandId?: string;
    /**
     * When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
     */
    brandLock?: string;
    /**
     * The URI for retrieving certificate information.
     */
    certificateUri?: string;
    /**
     * The date and time that the envelope was completed.
     */
    completedDateTime?: string;
    /**
     * A complex type that can be added to create envelopes from a combination of DocuSign templates and PDF forms. The basic envelope remains the same, while the Composite
     * Template adds new document and template overlays into the envelope. There can be any number of Composite Template structures in the envelope.
     */
    compositeTemplates?: CompositeTemplate[];

    copyRecipientData?: string;
    /**
     * The date and time that the envelope was created.
     */
    createdDateTime?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise
     * not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: /* An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administators to group
        and manage envelopes.  */ AccountCustomFields;
    /**
     * The URI for retrieving custom fields.
     */
    customFieldsUri?: string;
    /**
     * The date and time that the recipient declined the envelope.
     */
    declinedDateTime?: string;
    /**
     * The date and time that the envelope was deleted.
     */
    deletedDateTime?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * When set to **true**, the responsive document feature is turned off for the envelope.
     */
    disableResponsiveDocument?: string;
    /**
     * A complex element that contains details about the documents associated with the envelope.
     */
    documents?: /* A document object. */ Document[];
    /**
     * The URI for retrieving all of the documents associated with the envelope as a single PDF file.
     */
    documentsCombinedUri?: string;
    /**
     * The URI for retrieving all of the documents associated with the envelope as separate files.
     */
    documentsUri?: string;
    /**
     * This optional element holds the body of the email message that is sent to all envelope recipients.
     *
     * Maximum Length: 10000 characters.
     */
    emailBlurb?: string;
    /**
     * This optional complex element enables the sender to override some envelope email setting information.
     * This can be used to override the Reply To email address and name associated with the envelope, as well as the BCC email addresses to which an envelope is sent.
     * When the `emailSettings` information is used for an envelope, it only applies to that envelope.
     *
     * **Important Note**: The `emailSettings` information is not returned in the GET method for envelope status. Use GET /email_settings to return information about the emailSettings.
     */
    emailSettings?: EmailSettings;
    /**
     * The subject line of the email message that is sent to all recipients.
     *
     * For information about adding merge field information to the email subject, see
     * [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
     *
     */
    emailSubject?: string;
    /**
     * When set to **true**, the signer is allowed to print the document and sign it on paper.
     */
    enableWetSign?: string;
    /**
     * When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or
     * Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are
     * specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless
     * they are specifically excluded by using this setting when an envelope is sent.
     *
     * **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.
     *
     * [docviz]: /esign/restapi/Envelopes/EnvelopeDocumentVisibility
     */
    enforceSignerVisibility?: string;
    /**
     * An array of attachment objects that provide information about the attachments that are associated with the envelope.
     */
    envelopeAttachments?: /* Contains information about an attachment. */ Attachment[];
    /**
     * An array containing information about the documents that are included in the envelope.
     */
    envelopeDocuments?: /* This object contains details about the envelope document. */ EnvelopeDocument[];
    /**
     * The envelope's GUID.
     *
     * Example: `93be49ab-afa0-4adf-933c-f752070d71ec`
     */
    envelopeId?: string;
    /**
     * When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
     * After a document or attachment is stamped with an Envelope ID,
     * the ID is seen by all recipients
     * and becomes a permanent part of the document
     * and cannot be removed.
     */
    envelopeIdStamping?: string;
    /**
     * Reserved for DocuSign.
     */
    envelopeLocation?: string;
    /**
     * Metadata about the features that are enabled for the envelope.
     */
    envelopeMetadata?: EnvelopeMetadata;
    /**
     * The URI for retrieving the envelope or envelopes.
     */
    envelopeUri?: string;
    /**
     * This optional object is used to register a webhook that will receive status changes for this envelope.
     */
    eventNotification?: /* Register a Connect webhook for a specific envelope */ EventNotification;
    /**
     * An array of `eventNotification` objects.
     */
    eventNotifications?: /* Register a Connect webhook for a specific envelope */ EventNotification[];
    /**
     * An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
     */
    expireAfter?: string;
    /**
     * The date and time the envelope is set to expire.
     */
    expireDateTime?: string;
    /**
     * When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`).
     * Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does
     * not have an expiration setting, the DocuSign default value of 120 days is used.
     */
    expireEnabled?: string;
    /**
     * May contain an external identifier for the envelope.
     */
    externalEnvelopeId?: string;
    /**
     * An array of folders that the envelope belongs to.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * When set to **true**, indicates that users have added comments to the envelope.
     */
    hasComments?: string;
    /**
     * When set to **true**, indicates that the form data associated with the envelope has changed since it was sent. If **false**, this property does not appear in the response.
     */
    hasFormDataChanged?: string;
    /**
     * When set to **true**, indicates that a wave file (voice recording) is part of the envelope.
     */
    hasWavFile?: string;
    /**
     * Reserved for DocuSign.
     */
    holder?: string;
    /**
     * The date and time that the envelope was first sent.
     */
    initialSentDateTime?: string;
    /**
     * When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
     */
    is21CFRPart11?: string;
    /**
     * When set to **true**, indicates that the envelope is a dynamic envelope.
     */
    isDynamicEnvelope?: string;
    /**
     * When set to **true**, indicates that the envelope is a signature-provided envelope.
     */
    isSignatureProviderEnvelope?: string;
    /**
     * The date and time that the item was last modified.
     */
    lastModifiedDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    location?: string;
    /**
     * Provides lock information about an envelope that a user has locked.
     */
    lockInformation?: /* This section provides information about envelope locks. */ EnvelopeLocks;
    /**
     * When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope.
     *
     * Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes.
     *
     * However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
     */
    messageLock?: string;
    /**
     * An optional complex element that specifies the notification options for the envelope.
     */
    notification?: /* A complex element that specifies the notification settings for the envelope. */ Notification;
    /**
     * The URI for retrieving notifications.
     */
    notificationUri?: string;
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * Information about any PowerForms that are included in the envelope.
     */
    powerForm?: /* Contains details about a PowerForm. */ PowerForm;
    /**
     * The date that a purge was completed.
     */
    purgeCompletedDate?: string;
    /**
     * The date that a purge was requested.
     */
    purgeRequestDate?: string;
    /**
     * Initiates a purge request. Valid values are:
     * * `documents_queued`: Places envelope documents in the purge queue.
     * * `documents_and_metadata_queued`: Places envelope documents and metadata in the purge queue.
     *
     */
    purgeState?: string;
    /**
     * Specifies the envelope recipients.
     */
    recipients?: /* Envelope recipients */ EnvelopeRecipients;
    /**
     * When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
     */
    recipientsLock?: string;
    /**
     * Contains a URI for an endpoint that you can use to retrieve the recipients.
     */
    recipientsUri?: string;
    /**
     * Information about the sender of the envelope.
     */
    sender?: UserInfo;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * When set to **true**, recipients can sign on a mobile device.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerCanSignOnMobile?: string;
    /**
     * Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
     */
    signingLocation?: string;
    /**
     * Indicates the envelope status. Valid values are:
     *
     * * `sent`: The envelope has been sent to the recipients.
     * * `created`: The envelope is saved as a draft and can be modified and sent later.
     */
    status?: string;
    /**
     * The data and time that the status changed.
     */
    statusChangedDateTime?: string;
    /**
     * The DateTime that the envelope changed status (i.e. was created or sent.)
     */
    statusDateTime?: string;
    /**
     * The id of the template. If a value is not provided, DocuSign generates a value.
     */
    templateId?: string;
    /**
     * This object specifies the template recipients. Each `roleName` in the template must have a recipient assigned to it. This object is comprised of the following elements:
     *
     * * `email`: The recipient's email address.
     * * `name`: The recipient's name.
     * * `roleName`: The template roleName associated with the recipient.
     * * `clientUserId`: An optional property that specifies whether the recipient is embedded or remote. If the `clientUserId` is not null, then the recipient is embedded.
     * Note that if a `clientUserId` is used and the account settings `signerMustHaveAccount` or `signerMustLoginToSign` are **true**, an error is generated on sending.
     * * `defaultRecipient`: Optional, When set to **true**, this recipient is the default recipient and any tabs generated by the `transformPdfFields`
     * option are mapped to this recipient.
     * * `routingOrder`: This specifies the routing order of the recipient in the envelope.
     * * `accessCode`: This optional element specifies the access code a recipient has to enter to validate the identity. Maximum Length: 50 characters.
     * * `inPersonSignerName`: Optional. If the template role is an in-person signer, this is the full legal name of the signer. Maximum Length: 100 characters.
     * * `emailNotification`: This is an optional complex element that has a role-specific `emailSubject`, `emailBody`, and `language`. It follows the same format as
     * the `emailNotification` property for recipients.
     * * `tabs`: This property enables the tab values to be specified for matching to tabs in the template.
     *
     */
    templateRoles?: TemplateRole[];
    /**
     * The URI for retrieving any templates associated with the envelope.
     */
    templatesUri?: string;
    /**
     *  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. We recommend that you use a transaction ID
     * for offline signing to ensure that an envelope is not sent multiple times. You can use the `transactionId` property to determine an envelope's status
     * (i.e. was it created or not) in cases where the Internet connection was lost before the envelope status was returned.
     */
    transactionId?: string;
    /**
     * When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting.
     * When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients.
     *
     * If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in
     * responses when getting envelope information.
     */
    useDisclosure?: string;
    /**
     * The date and time the envelope or template was voided.
     */
    voidedDateTime?: string;
    /**
     * The reason the envelope or template was voided.
     */
    voidedReason?: string;
}

/**
 * This object contains details about the envelope document.
 */
export interface EnvelopeDocument {
    /**
     * If recipients were added by converting form fields into tabs, their ids appear here. Read only.
     */
    addedRecipientIds?: string[];
    /**
     * If this document is an attachment to another document in the envelope, this is the id of the attachment tab it is associated with on the other document.
     */
    attachmentTabId?: string;
    /**
     * When **true**, marks all of the documents in the envelope as authoritative copies.
     *
     * **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level,
     * but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
     */
    authoritativeCopy?: string;
    /**
     * Metadata that indicates if the sender can edit the `authoritativeCopy` property. Not applicable for template documents.
     */
    authoritativeCopyMetadata?: /* Metadata about a property. */ PropertyMetadata;

    availableDocumentTypes?: /* This object contains information about the type of signature. */ SignatureType[];
    /**
     * When **true**, the document has editable form fields that are made available through a PDF format.
     */
    containsPdfFormFields?: string;
    /**
     * This string sets the display and behavior properties of
     * the document during signing. The possible values are:
     *
     * * `modal`<br>
     *   The document is shown as a supplement action strip
     *   and can be viewed, downloaded, or printed in a modal window.
     *   This is the recommended value for supplemental documents.
     *
     * * `download`<br>
     *   The document is shown as a supplement action strip
     *   and can be viewed, downloaded, or printed in a new browser window.
     *
     * * `inline`<br>
     *   The document is shown in the normal signing window.
     *   This value is not used with supplemental documents,
     *   but is the default value for all other documents.
     *
     */
    display?: string;
    /**
     * Metadata that indicates if the sender can edit the `display` property. Not applicable for template documents.
     */
    displayMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object containing information about the custom fields on the document.
     */
    documentFields?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
    /**
     * The id of the document that the tab is placed on. This value must refer to the id of an existing document.
     */
    documentId?: string;
    /**
     * The GUID of the document.
     */
    documentIdGuid?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * When set to **true**,
     * the document is included in the combined document download (`documentsCombinedUri`).
     * The default value is **true**.
     *
     */
    includeInDownload?: string;
    /**
     * Metadata that indicates if the sender can edit the `includeInDowload` property. Not applicable for template documents.
     */
    includeInDownloadMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The document's file name.
     *
     * Example: `Q1-Report.docx`
     */
    name?: string;
    /**
     * Metadata that indicates if the sender can edit the `name` property. Not applicable for template documents.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * (Optional) The order in which to sort the results.
     *
     * Valid values are:
     *
     *
     * * `asc`: Ascending order.
     * * `desc`: Descending order.
     */
    order?: string;
    /**
     * An array of page objects that contain information about the pages in the document.
     */
    pages?: /* Description of a page of a document. */ Page[];
    /**
     * Sets how the signer interacts with the supplemental document.
     * The possible values are:
     *
     * *	`no_interaction`<br>
     *   No recipient action is required.
     *
     * *	`view`<br>
     *   The recipient is required to view the document.
     *
     * *	`accept`<br>
     *   The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.
     *
     * *	`view_accept`<br>
     *   The recipient is required to view and accept the document.
     *
     *
     */
    signerMustAcknowledge?: string;
    /**
     * Metadata that indicates if the sender can edit the `signerMustAcknowledge` property. Not applicable for template documents.
     */
    signerMustAcknowledgeMetadata?: /* Metadata about a property. */ PropertyMetadata;

    sizeBytes?: string;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;

    type?: string;
    /**
     * The URI for retrieving the document.
     */
    uri?: string;
}

/**
 * Envelope document fields
 */
export interface EnvelopeDocumentFields {
    /**
     * The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign.
     * The array contains the elements:
     *
     * * name - A string that can be a maximum of 50 characters.
     * * value - A string that can be a maximum of 200 characters.
     *
     * *IMPORTANT*: If you are using xml, the name/value pair is contained in a nameValue element.
     *
     */
    documentFields?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
}

export interface EnvelopeDocumentHtmlDefinitions {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: DocumentHtmlDefinitionOriginal[];
}

/**
 * Envelope Document Tabs resource
 */
export interface EnvelopeDocumentTabs {
    /**
     * A list of
     * [Approve tabs][approve].
     *
     * An Approve tab enables
     * the recipient to approve documents without
     * placing a signature or initials on the document. If the
     * recipient clicks the tab during the signing process, the
     * recipient is considered to have signed the document. No
     * information is shown on the document of the approval, but it
     * is recorded as a signature in the envelope history.
     * The value of an approve tab can't be set.
     *
     * [approve]:		      https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/approve
     *
     */
    approveTabs?: Approve[];
    /**
     * A list of
     * [Checkbox tabs][checkbox].
     *
     *
     * A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
     *
     *
     * [checkbox]:  https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/checkbox
     *
     */
    checkboxTabs?: Checkbox[];
    /**
     * An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document,
     * they can add a comment to the document and control who else can see the comment. This value can't be set.
     */
    commentThreadTabs?: CommentThread[];
    /**
     * A list of
     * [Company tabs][company].
     *
     *
     * A Company tab displays a field for the name of the recipient's company. This value can't be set.
     *
     *
     *
     * [company]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
     *
     */
    companyTabs?: Company[];
    /**
     * A list of
     * [Date Signed tabs][dateSigned].
     *
     *
     * A Date Signed tab displays the date that the recipient signed the document. This value can't be set.
     *
     * [dateSigned]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/dateSigned
     *
     */
    dateSignedTabs?: DateSigned[];
    /**
     * A list of
     * [Date tabs][date].
     * A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced.
     * The system retains the format that the recipient enters.
     *
     * **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.
     * [date]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/date
     */
    dateTabs?: Date[];
    /**
     * A list of
     * [Decline tabs][decline].
     *
     * A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.
     *
     *
     * [decline]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/decline
     *
     */
    declineTabs?: Decline[];

    drawTabs?: Draw[];
    /**
     * A list of
     * [Email Address tabs][emailAddress].
     *
     * An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.
     *
     *
     * [emailAddress]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/emailAddress
     *
     */
    emailAddressTabs?: EmailAddress[];
    /**
     * A list of
     * [Email tabs][email].
     *
     * An Email tab enables the recipient to enter an email address.
     * This is a one-line field that checks that a valid email
     * address is entered. It uses the same parameters as a Text
     * tab, with the validation message and pattern set for email
     * information. This value can be set.
     *
     * When getting information that includes
     * this tab type, the original value of the tab when the
     * associated envelope was sent is included in the response.
     *
     * [email]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/email
     *
     */
    emailTabs?: Email[];
    /**
     * A list of
     * [Envelope ID tabs][envelopeId].
     *
     * An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.
     *
     *
     * [envelopeId]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
     *
     */
    envelopeIdTabs?: EnvelopeId[];
    /**
     * A list of
     * [First Name tabs][firstName].
     *
     * A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces.
     * This value can't be set.
     *
     *
     * [firstName]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
     *
     */
    firstNameTabs?: FirstName[];
    /**
     * A list of [Formula tabs][formulaTab].
     *
     * The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields,
     * the Formula tab calculates and displays the result. This value can be set.
     *
     * The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].
     *
     * If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].
     *
     * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     * [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     * [formulaTab]:	    	https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/formulaTab
     *
     */
    formulaTabs?: FormulaTab[];
    /**
     * A list of
     * [Full Name tabs][fullName].
     *
     * A Full Name tab displays the recipient's full name. This value can't be set.
     *
     *
     * [fullName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/fullName
     *
     */
    fullNameTabs?: FullName[];
    /**
     * A list of
     * [Initial Here tabs][initialHere].
     *
     * This type of tab enables the recipient to initial the document. May be optional. This value can't be set.
     *
     * [initialHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/initialHere
     *
     */
    initialHereTabs?: InitialHere[];
    /**
     * A list of
     * [Last Name tabs][lastName].
     *
     * A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.
     *
     *
     * [lastName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/lastName
     *
     */
    lastNameTabs?: LastName[];
    /**
     * A list of [List tabs][list].
     * A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.
     * [list]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/list
     */
    listTabs?: List[];
    /**
     * A list of  [Notarize tabs][notarize].
     *
     * A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.
     *
     * **Note**: Only one notarize tab can appear on a page.
     *
     * [notarize]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/notarize
     *
     */
    notarizeTabs?: Notarize[];
    /**
     * A list of
     * [Note tabs][note].
     *
     * A Note tab displays additional information to the recipient in the form of a note. This value can be set.
     *
     * [note]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/note
     *
     */
    noteTabs?: Note[];
    /**
     * A list of
     * [Number tabs][number].
     * A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.
     * [number]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/number
     */
    // tslint:disable-next-line: ban-types
    numberTabs?: Number[];
    /**
     * This type of tab enables the recipient to strike through document text. This value can't be set.
     */
    polyLineOverlayTabs?: PolyLineOverlay[];
    /**
     * A list of [Radio Group tabs][radioGroup].
     * A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
     * buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
     * [radioGroup]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radioGroup
     */
    radioGroupTabs?: RadioGroup[];
    /**
     * A list of
     * [Signer Attachment tabs][signerAttachment].
     *
     * This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.
     *
     *
     * [signerAttachment]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signerAttachment
     *
     */
    signerAttachmentTabs?: SignerAttachment[];
    /**
     * A list of
     * [Sign Here tabs][signHere].
     *
     * This type of tab enables the recipient to sign a document. May be optional. This value can't be set.
     *
     * [signHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signHere
     *
     */
    signHereTabs?: SignHere[];
    /**
     * A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.
     *
     * Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.
     *
     * **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
     */
    smartSectionTabs?: SmartSection[];
    /**
     * A list of
     * [SSN tabs][ssn].
     *
     * An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
     * dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
     *
     *
     * [ssn]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/ssn
     *
     */
    ssnTabs?: Ssn[];
    /**
     * An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroups?: TabGroup[];
    /**
     * A list of
     * [Text tabs][text].
     *
     * A text tab enables the recipient to enter free text. This value can be set.
     *
     * [text]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/text
     *
     */
    textTabs?: Text[];
    /**
     * A list of
     * [Title tabs][title].
     *
     * A Title tab displays the recipient's title.  This value can't be set.
     *
     *
     * [title]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/title
     *
     */
    titleTabs?: Title[];
    /**
     * A list of
     * [View tabs][view].
     *
     * A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.
     *
     * [view]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/view
     *
     */
    viewTabs?: /* This tab is used with the Approve tab to handle supplemental documents. */ View[];
    /**
     * A list of
     * [Zip tabs][zip].
     *
     * A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes.
     * It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.
     *
     *
     * [zip]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/zip
     *
     */
    zipTabs?: Zip[];
}

/**
 * Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example, if
 * the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the
 * documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates. It is not available for PowerForms.
 *
 * **Note**: Before you use Document Visibility, you should be aware of the following information:
 *
 * - Document Visibility must be enabled for your account by your DocuSign administrator.
 * - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document.
 * - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents, or page images.
 * - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.
 *
 * The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information, see
 * [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
 */
export interface EnvelopeDocumentVisibility {
    /**
     * An array of `documentVisibility` objects that specifies which documents are visible to which recipients.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
}

/**
 * Envelope documents
 */
export interface EnvelopeDocuments {
    /**
     * An array of document objects.
     */
    envelopeDocuments?: /* This object contains details about the envelope document. */ EnvelopeDocument[];
    /**
     * The envelope ID of the envelope status that failed to post.
     */
    envelopeId?: string;
}

export interface EnvelopeDocumentsResult {
    /**
     * An array containing information about the documents that are included in the envelope.
     */
    envelopeDocuments?: /* This object contains details about the envelope document. */ EnvelopeDocument[];
    /**
     * The envelope's GUID.
     *
     * Example: `93be49ab-afa0-4adf-933c-f752070d71ec`
     */
    envelopeId?: string;
}

/**
 * Envelope email settings
 */
export interface EnvelopeEmailSettings {
    /**
     * An array containing the email address that should receive a copy of all email communications related to an envelope for archiving purposes. Maximum Length: 100 characters.
     *
     * While this property is an array, note that it takes only a single email address.
     *
     * **Note**: Only users with the `canManageAccount` setting set to **true** can use this option.
     *
     * DocuSign verifies that the email format is correct, but does not verify that the email address is active. You can use this for archiving purposes.
     * However, using this property overrides the BCC for Email Archive information setting for this envelope.
     *
     * **Example**: if your account has BCC for Email Archive set up for the email address archive@mycompany.com and you send an envelope using the BCC Email
     * Override to send a BCC email to salesarchive@mycompany.com, then a copy of the envelope is only sent to the salesarchive@mycompany.com email address.
     */
    bccEmailAddresses?: /* Contains information about the BCC email address. */ BccEmailAddress[];
    /**
     * The Reply To email address to use for email replies, instead of the one that is configured at the account level. DocuSign verifies that the email address
     * is in a correct format, but does not verify that it is active. Maximum Length: 100 characters.
     */
    replyEmailAddressOverride?: string;
    /**
     * The name to associate with the Reply To email address, instead of the name that is configured at the account level. Maximum Length: 100 characters.
     */
    replyEmailNameOverride?: string;
}

/**
 * For which envelope events should your webhook be called?
 */
export interface EnvelopeEvent {
    /**
     * An envelope status for which your webhook should be called. Values: Draft, Sent, Delivered, Completed, Declined, or Voided.
     */
    envelopeEventStatusCode?: string;
    /**
     * reserved
     */
    includeDocuments?: string;
}

/**
 * This object contains the data that recipients have entered into the form fields associated with an envelope.
 */
export interface EnvelopeFormData {
    /**
     * The subject line of the email message that is sent to all recipients.
     *
     * For information about adding merge field information to the email subject, see [Template Email Subject
     * Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
     *
     */
    emailSubject?: string;
    /**
     * The id of the envelope.
     */
    envelopeId?: string;
    /**
     * An array of form data objects.
     */
    formData?: FormDataItem[];
    /**
     * An array of form data objects that are associated with specific recipients.
     */
    recipientFormData?: RecipientFormData[];
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * The status of the envelope. Valid values are:
     *
     * * `sent`: The envelope is sent to the recipients.
     * * `created`: The envelope is saved as a draft and can be modified and sent later.
     */
    status?: string;
}

export interface EnvelopeHtmlDefinitions {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: DocumentHtmlDefinitionOriginal[];
}

/**
 * A tab that displays the envelope ID. Recipients cannot enter
 * or change the information in this tab.
 *
 */
export interface EnvelopeId {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab
     * inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies
     * the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located.
     * For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * Lists of envelope and transaction IDs to use in the results.
 */
export interface EnvelopeIdsRequest {
    /**
     * A comma-separated list of envelope IDs to include in the results.
     */
    envelopeIds?: string[];
    /**
     * A comma-separated list of transaction IDs to include in the results. Note that transaction IDs are valid for seven days.
     */
    transactionIds?: string[];
}

/**
 * This section provides information about envelope locks.
 */
export interface EnvelopeLocks {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Sets the time, in seconds, until the lock expires when there is no activity on the envelope.
     *
     * The default value is 300 seconds. The maximum value is 1,800 seconds.
     *
     * The lock duration can be extended.
     *
     */
    lockDurationInSeconds?: string;
    /**
     * The human-readable name of the application that is locking the envelope or template. This value displays to the user in error messages when lock conflicts occur.
     */
    lockedByApp?: string;
    /**
     * A complex type containing information about the user that has the envelope or template locked.
     */
    lockedByUser?: UserInfo;
    /**
     * The date and time that the lock expires.
     */
    lockedUntilDateTime?: string;
    /**
     * A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock.
     */
    lockToken?: string;
    /**
     * The type of lock.  Currently `edit` is the only supported type.
     */
    lockType?: string;
    /**
     * When set to **true**, a scratchpad is used to edit information.
     *
     */
    useScratchPad?: string;
}

export interface EnvelopeMetadata {
    /**
     * Specifies if the Advanced Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that
     * you sent or are shared with you. It offers more functionality than the Correct feature.
     */
    allowAdvancedCorrect?: string;
    /**
     * Specifies if the Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that you sent or
     * are shared with you, including the recipient, envelope, and document information.
     */
    allowCorrect?: string;
    /**
     * Specifies if DocuSign eNotary service is enabled for the envelope.
     */
    enableSignWithNotary?: string;
}

/**
 * A complex element that specifies the notification settings for the envelope.
 */
export interface EnvelopeNotificationRequest {
    /**
     * A complex element that specifies the expiration settings for the envelope.
     */
    expirations?: /* A complex element that specifies the expiration settings for the envelope. */ Expirations;
    /**
     * A complex element that specifies reminder settings for the envelope
     */
    reminders?: /* A complex element that specifies reminder settings for the envelope. */ Reminders;
    /**
     * When set to **true**, the account default notification settings are used for the envelope, overriding the reminders and expirations settings. When set to **false**,
     * the reminders and expirations settings specified in this request are used.
     */
    useAccountDefaults?: string;
}

/**
 * Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided
 * envelopes after a set number of days (`retentionDays`).
 */
export interface EnvelopePurgeConfiguration {
    /**
     * When set to **true**, purging is enabled.
     */
    purgeEnvelopes?: string;
    /**
     * When set to **true**, the system also redacts personally identifiable information (PII).
     *
     * **Note**: To redact PII, you must also set the property `removeTabsAndEnvelopeAttachments` to **true**.
     */
    redactPII?: string;
    /**
     * When set to **true**, the system also purges the tabs and attachments associated with the envelopes.
     */
    removeTabsAndEnvelopeAttachments?: string;
    /**
     * The number of days to retain envelope documents before purging them. This value must be a number between `0` and `999`.
     */
    retentionDays?: string;
}

/**
 * All of the tabs associated with a recipient. Each property is a list of a type of tab.
 *
 */
export interface EnvelopeRecipientTabs {
    /**
     * A list of
     * [Approve tabs][approve].
     *
     * An Approve tab enables
     * the recipient to approve documents without
     * placing a signature or initials on the document. If the
     * recipient clicks the tab during the signing process, the
     * recipient is considered to have signed the document. No
     * information is shown on the document of the approval, but it
     * is recorded as a signature in the envelope history.
     * The value of an approve tab can't be set.
     *
     * [approve]:		      https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/approve
     *
     */
    approveTabs?: Approve[];
    /**
     * A list of
     * [Checkbox tabs][checkbox].
     *
     *
     * A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
     *
     *
     * [checkbox]:  https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/checkbox
     *
     */
    checkboxTabs?: Checkbox[];
    /**
     * An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document,
     * they can add a comment to the document and control who else can see the comment. This value can't be set.
     */
    commentThreadTabs?: CommentThread[];
    /**
     * A list of
     * [Company tabs][company].
     *
     *
     * A Company tab displays a field for the name of the recipient's company. This value can't be set.
     *
     *
     *
     * [company]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
     *
     */
    companyTabs?: Company[];
    /**
     * A list of
     * [Date Signed tabs][dateSigned].
     *
     *
     * A Date Signed tab displays the date that the recipient signed the document. This value can't be set.
     *
     * [dateSigned]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/dateSigned
     *
     */
    dateSignedTabs?: DateSigned[];
    /**
     * A list of
     * [Date tabs][date].
     *
     * A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced.
     * The system retains the format that the recipient enters.
     *
     * **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.
     *
     *
     * [date]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/date
     *
     */
    dateTabs?: Date[];
    /**
     * A list of
     * [Decline tabs][decline].
     *
     * A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.
     *
     *
     * [decline]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/decline
     *
     */
    declineTabs?: Decline[];

    drawTabs?: Draw[];
    /**
     * A list of
     * [Email Address tabs][emailAddress].
     *
     * An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.
     *
     *
     * [emailAddress]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/emailAddress
     *
     */
    emailAddressTabs?: EmailAddress[];
    /**
     * A list of
     * [Email tabs][email].
     *
     * An Email tab enables the recipient to enter an email address.
     * This is a one-line field that checks that a valid email
     * address is entered. It uses the same parameters as a Text
     * tab, with the validation message and pattern set for email
     * information. This value can be set.
     *
     * When getting information that includes
     * this tab type, the original value of the tab when the
     * associated envelope was sent is included in the response.
     *
     * [email]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/email
     *
     */
    emailTabs?: Email[];
    /**
     * A list of
     * [Envelope ID tabs][envelopeId].
     *
     * An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.
     *
     *
     * [envelopeId]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
     *
     */
    envelopeIdTabs?: EnvelopeId[];
    /**
     * A list of
     * [First Name tabs][firstName].
     *
     * A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces.
     * This value can't be set.
     *
     *
     * [firstName]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
     *
     */
    firstNameTabs?: FirstName[];
    /**
     * A list of [Formula tabs][formulaTab].
     *
     * The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields,
     * the Formula tab calculates and displays the result. This value can be set.
     *
     * The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].
     *
     * If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see
     * [Requesting Payments Along with Signatures][paymentguide].
     *
     * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     * [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     * [formulaTab]:	    	https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/formulaTab
     *
     */
    formulaTabs?: FormulaTab[];
    /**
     * A list of
     * [Full Name tabs][fullName].
     *
     * A Full Name tab displays the recipient's full name. This value can't be set.
     *
     *
     * [fullName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/fullName
     *
     */
    fullNameTabs?: FullName[];
    /**
     * A list of
     * [Initial Here tabs][initialHere].
     *
     * This type of tab enables the recipient to initial the document. May be optional. This value can't be set.
     *
     * [initialHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/initialHere
     *
     */
    initialHereTabs?: InitialHere[];
    /**
     * A list of
     * [Last Name tabs][lastName].
     *
     * A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.
     *
     *
     * [lastName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/lastName
     *
     */
    lastNameTabs?: LastName[];
    /**
     * A list of [List tabs][list].
     * A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.
     * [list]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/list
     */
    listTabs?: List[];
    /**
     * A list of  [Notarize tabs][notarize].
     *
     * A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.
     *
     * **Note**: Only one notarize tab can appear on a page.
     *
     * [notarize]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/notarize
     *
     */
    notarizeTabs?: Notarize[];
    /**
     * A list of
     * [Note tabs][note].
     *
     * A Note tab displays additional information to the recipient in the form of a note. This value can be set.
     *
     * [note]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/note
     *
     */
    noteTabs?: Note[];
    /**
     * A list of
     * [Number tabs][number].
     * A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.
     * [number]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/number
     */
    // tslint:disable-next-line: ban-types
    numberTabs?: Number[];
    /**
     * This type of tab enables the recipient to strike through document text. This value can't be set.
     */
    polyLineOverlayTabs?: PolyLineOverlay[];
    /**
     * A list of [Radio Group tabs][radioGroup].
     * A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
     * buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
     * [radioGroup]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radioGroup
     */
    radioGroupTabs?: RadioGroup[];
    /**
     * A list of
     * [Signer Attachment tabs][signerAttachment].
     *
     * This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.
     *
     *
     * [signerAttachment]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signerAttachment
     *
     */
    signerAttachmentTabs?: SignerAttachment[];
    /**
     * A list of
     * [Sign Here tabs][signHere].
     *
     * This type of tab enables the recipient to sign a document. May be optional. This value can't be set.
     *
     * [signHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signHere
     *
     */
    signHereTabs?: SignHere[];
    /**
     * A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.
     *
     * Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.
     *
     * **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
     */
    smartSectionTabs?: SmartSection[];
    /**
     * A list of
     * [SSN tabs][ssn].
     *
     * An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
     * dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
     *
     *
     * [ssn]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/ssn
     *
     */
    ssnTabs?: Ssn[];
    /**
     * An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroups?: TabGroup[];
    /**
     * A list of
     * [Text tabs][text].
     *
     * A text tab enables the recipient to enter free text. This value can be set.
     *
     * [text]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/text
     *
     */
    textTabs?: Text[];
    /**
     * A list of
     * [Title tabs][title].
     *
     * A Title tab displays the recipient's title.  This value can't be set.
     *
     *
     * [title]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/title
     *
     */
    titleTabs?: Title[];
    /**
     * A list of
     * [View tabs][view].
     *
     * A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.
     *
     * [view]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/view
     *
     */
    viewTabs?: /* This tab is used with the Approve tab to handle supplemental documents. */ View[];
    /**
     * A list of
     * [Zip tabs][zip].
     *
     * A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes.
     * It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.
     *
     *
     * [zip]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/zip
     *
     */
    zipTabs?: Zip[];
}

/**
 * Envelope recipients
 */
export interface EnvelopeRecipients {
    /**
     * A list of agent recipients assigned to the documents.
     */
    agents?: /* Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after
        the agent in routing order. */ Agent[];
    /**
     * A list of carbon copy recipients assigned to the documents.
     */
    carbonCopies?: /* Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial,
        date or add information to any of the documents.  */ CarbonCopy[];
    /**
     * A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does
     * not need to sign, initial, date, or add information to any of the documents.
     */
    certifiedDeliveries?: /* Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents
        for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents. */ CertifiedDelivery[];
    /**
     * The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient,
     * but he or she has not completed the required actions.
     */
    currentRoutingOrder?: string;
    /**
     * A list of users who can edit the envelope.
     */
    editors?: /* A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management
        and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name
        and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit
        signature/initial tabs and text tabs for the remaining recipients. */ Editor[];
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing
     * Host and new separate Signer Name field appears after Sign in person is selected.
     */
    inPersonSigners?: InPersonSigner[];
    /**
     * Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent
     * Agents, Editors or Intermediaries recipient types are added).
     */
    intermediaries?: /* Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for
         recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added. */ Intermediary[];
    /**
     * The number of recipients in the envelope.
     */
    recipientCount?: string;
    /**
     * A list of electronic seals to apply to documents.
     */
    seals?: SealSign[];
    /**
     * A list of signers on the envelope.
     */
    signers?: Signer[];
    /**
     * A list of signers who act as witnesses on the envelope.
     */
    witnesses?: /* A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the
        documents in the envelope. */ Witness[];
}

/**
 *  This object describes an envelope.
 */
export interface EnvelopeSummary {
    /**
     * An object that describes the status of the bulk send envelopes.
     */
    bulkEnvelopeStatus?: BulkEnvelopeStatus;
    /**
     * The envelope ID of the envelope status that failed to post.
     */
    envelopeId?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Indicates the envelope status. Valid values are:
     *
     * * `completed`: The envelope has been completed and all tags have been signed.
     * * `created`: The envelope is created as a draft. It can be modified and sent later.
     * * `declined`: The envelope has been declined by the recipients.
     * * `delivered`: The envelope has been delivered to the recipients.
     * * `sent`: The envelope is sent to the recipients.
     * * `signed`: The envelope has been signed by the recipients.
     * * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
     *
     */
    status?: string;
    /**
     * The DateTime that the envelope changed status (i.e. was created or sent.)
     */
    statusDateTime?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
}

export interface EnvelopeTemplate {
    /**
     * Reserved for DocuSign.
     */
    accessControlListBase64?: string;
    /**
     * When set to **true**, users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document,
     * they can add a comment to the document.
     */
    allowComments?: string;
    /**
     * When set to **true**, the Document Markup feature is enabled.
     *
     * **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
     */
    allowMarkup?: string;
    /**
     * When **true**, the recipient can redirect an envelope to a more appropriate recipient.
     */
    allowReassign?: string;
    /**
     * When set to **true**, recipients can view the history of the envelope.
     */
    allowViewHistory?: string;
    /**
     * Deprecated. This feature has been replaced by signing groups.
     */
    anySigner?: string;
    /**
     * When **true**, the envelope is queued for processing and the value of the `status` property is set to `Processing`. Additionally, GET status calls return
     * `Processing` until completed.
     *
     *
     * **Note**: A `transactionId` is required for this call to work correctly. When the envelope is created, the status is `Processing` and an `envelopeId` is not
     * returned in the response. To get the `envelopeId`, use a GET envelope query by using the
     * [transactionId](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/create/#envelopeDefinition) or by checking the Connect notification.
     */
    asynchronous?: string;
    /**
     * Contains a URL for retrieving the attachments that are associated with the envelope.
     */
    attachmentsUri?: string;
    /**
     * When **true**, marks all of the documents in the envelope as authoritative copies.
     *
     * **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level,
     * but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
     */
    authoritativeCopy?: string;
    /**
     * The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
     * If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
     */
    authoritativeCopyDefault?: string;
    /**
     * By default, templates that have been used within
     * the last 60 days are included in auto-matching.
     *
     * By explicitly setting `autoMatch`,
     * you can permanently include or exclude the template
     * in auto matching.
     *
     * When **true** the template is included in auto-matching
     * regardless of when it was last used.
     *
     * When **false** the template is never included in auto-matching.
     */
    autoMatch?: string;
    /**
     * If **true**, the template has been explicitly included in or excluded from auto-matching. The default is false.
     * This is a read-only property.
     */
    autoMatchSpecifiedByUser?: string;
    /**
     * When set to **true**, autonavigation is set for the recipient.
     *
     */
    autoNavigation?: string;
    /**
     * The id of the brand.
     */
    brandId?: string;
    /**
     * When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
     */
    brandLock?: string;
    /**
     * The URI for retrieving certificate information.
     */
    certificateUri?: string;
    /**
     * Specifies the date and time this item was completed.
     */
    completedDateTime?: string;

    copyRecipientData?: string;
    /**
     * The UTC DateTime when the workspace user authorization was created.
     */
    created?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status
     * but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: /* An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account
        administators to group and manage envelopes.  */ AccountCustomFields;
    /**
     * The URI for retrieving custom fields.
     */
    customFieldsUri?: string;
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deletedDateTime?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * A sender-defined description of the line item.
     *
     */
    description?: string;
    /**
     * When set to **true**, responsive documents are disabled for the envelope.
     */
    disableResponsiveDocument?: string;
    /**
     * A complex element that contains details about the documents associated with the envelope.
     */
    documents?: /* A document object. */ Document[];
    /**
     * The URI for retrieving all of the documents associated with the envelope as a single PDF file.
     */
    documentsCombinedUri?: string;
    /**
     * The URI for retrieving all of the documents associated with the envelope as separate files.
     */
    documentsUri?: string;
    /**
     * This is the same as the email body. If the sender enters an email blurb, it is included in the email body for all envelope recipients.
     */
    emailBlurb?: string;
    /**
     * A complex type that contains email settings.
     */
    emailSettings?: EmailSettings;
    /**
     * The subject line of the email message that is sent to all recipients.
     *
     * For information about adding merge field information to the email subject, see
     * [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
     *
     */
    emailSubject?: string;
    /**
     * When set to **true**, the signer is allowed to print the document and sign it on paper.
     */
    enableWetSign?: string;
    /**
     * When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or
     * informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using
     * this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using
     * this setting when an envelope is sent.
     *
     * **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.
     *
     * [docviz]: /esign/restapi/Envelopes/EnvelopeDocumentVisibility
     */
    enforceSignerVisibility?: string;
    /**
     * An array of attachment objects that provide information about the attachments that are associated with the envelope.
     */
    envelopeAttachments?: /* Contains information about an attachment. */ Attachment[];
    /**
     * An array containing information about the documents that are included in the envelope.
     */
    envelopeDocuments?: /* This object contains details about the envelope document. */ EnvelopeDocument[];
    /**
     * The envelope's GUID.
     *
     * Example: `93be49ab-afa0-4adf-933c-f752070d71ec`
     */
    envelopeId?: string;
    /**
     * When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
     * After a document or attachment is stamped with an Envelope ID,
     * the ID is seen by all recipients
     * and becomes a permanent part of the document
     * and cannot be removed.
     */
    envelopeIdStamping?: string;
    /**
     * Reserved for DocuSign.
     */
    envelopeLocation?: string;
    /**
     * Provides information about the features and services that are enabled for the envelope, including the Correct feature, the Advanced Correct feature, and DocuSign eNotary service.
     */
    envelopeMetadata?: EnvelopeMetadata;
    /**
     * The URI for retrieving the envelope or envelopes.
     */
    envelopeUri?: string;
    /**
     * An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
     */
    expireAfter?: string;
    /**
     * The date and time the envelope is set to expire.
     */
    expireDateTime?: string;
    /**
     * When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`).
     * Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used.
     * If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
     */
    expireEnabled?: string;
    /**
     * May contain an external identifier for the envelope.
     */
    externalEnvelopeId?: string;

    favoritedByMe?: string;
    /**
     * The id of the folder.
     */
    folderId?: string;

    folderIds?: string[];

    folderName?: string;
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * When set to **true**, indicates that users have added comments to the envelope.
     */
    hasComments?: string;
    /**
     * When set to **true**, indicates that the data collected through form fields on a document has changed.
     */
    hasFormDataChanged?: string;
    /**
     * When set to **true**, indicates that a .wav file used for voice authentication is included in the envelope.
     */
    hasWavFile?: string;
    /**
     * Reserved for DocuSign.
     */
    holder?: string;
    /**
     * The date and time the envelope was initially sent.
     */
    initialSentDateTime?: string;
    /**
     * When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
     */
    is21CFRPart11?: string;
    /**
     * When set to **true**, indicates that the envelope is a dynamic envelope.
     */
    isDynamicEnvelope?: string;
    /**
     * When set to **true**, indicates that the envelope is a signature-provided envelope.
     */
    isSignatureProviderEnvelope?: string;
    /**
     * The UTC date and time that the comment was last updated.
     *
     * **Note**: This can only be done by the creator.
     */
    lastModified?: string;

    lastModifiedBy?: UserInfo;
    /**
     * The date and time that the item was last modified.
     */
    lastModifiedDateTime?: string;

    lastUsed?: string;
    /**
     * Reserved for DocuSign.
     */
    location?: string;
    /**
     * Provides lock information about an envelope that a user has locked.
     */
    lockInformation?: /* This section provides information about envelope locks. */ EnvelopeLocks;
    /**
     * When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope.
     *
     * Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes.
     *
     * However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
     */
    messageLock?: string;

    name?: string;
    /**
     * The user's new password.
     */
    newPassword?: string;

    notification?: /* A complex element that specifies the notification settings for the envelope. */ Notification;
    /**
     * The URI for retrieving notifications.
     */
    notificationUri?: string;

    owner?: UserInfo;
    /**
     * An integer value specifying the number of document pages in the template.
     */
    pageCount?: string;
    /**
     * The user's encrypted password hash.
     */
    password?: string;

    passwordProtected?: string;
    /**
     * Information about any PowerForms that are included in the envelope.
     */
    powerForm?: /* Contains details about a PowerForm. */ PowerForm;
    /**
     * An array of PowerForm objects.
     */
    powerForms?: /* Contains details about a PowerForm. */ PowerForm[];
    /**
     * The date that a purge was completed.
     */
    purgeCompletedDate?: string;
    /**
     * The date that a purge was requested.
     */
    purgeRequestDate?: string;
    /**
     * Shows the current purge state for the envelope. The possible values are:
     *
     * * `unpurged`: There has been no successful request to purge documents.
     * * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
     * * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
     * * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
     * * `documents_purged`: The envelope documents have been successfully purged.
     * * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.
     *
     *
     */
    purgeState?: string;
    /**
     * An array of recipient objects that provides details about the recipients of the envelope.
     */
    recipients?: /* Envelope recipients */ EnvelopeRecipients;
    /**
     * When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
     */
    recipientsLock?: string;
    /**
     * Contains a URI for an endpoint that you can use to retrieve the recipients.
     */
    recipientsUri?: string;
    /**
     * Information about the sender of the envelope.
     */
    sender?: UserInfo;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * When **true**, the tab is shared.
     */
    shared?: string;
    /**
     * When set to **true**, recipients can sign on a mobile device.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerCanSignOnMobile?: string;
    /**
     * Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
     */
    signingLocation?: string;
    /**
     * The status of the item.
     */
    status?: string;
    /**
     * The data and time that the status changed.
     */
    statusChangedDateTime?: string;
    /**
     * The DateTime that the envelope changed status (i.e. was created or sent.)
     */
    statusDateTime?: string;
    /**
     * The id of the template.
     */
    templateId?: string;
    /**
     * The URI for retrieving the templates.
     */
    templatesUri?: string;
    /**
     * Specifies the Transaction ID from the AppStore.
     */
    transactionId?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
    /**
     * When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting.
     * When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients.
     *
     * If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned
     * in responses when getting envelope information.
     */
    useDisclosure?: string;
    /**
     * The date and time the envelope or template was voided.
     */
    voidedDateTime?: string;
    /**
     * The reason the envelope or template was voided.
     */
    voidedReason?: string;
}

/**
 * Information about templates.
 */
export interface EnvelopeTemplateResults {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The list of requested templates.
     */
    envelopeTemplates?: EnvelopeTemplate[];
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

/**
 * Envelope templates
 */
export interface EnvelopeTemplates {
    /**
     * An array of `templateSummary` objects that contain information about templates.
     */
    templates?: /* Summary of a template request. */ TemplateSummary[];
}

export interface EnvelopeTransactionStatus {
    /**
     * The envelope ID of the envelope status that failed to post.
     */
    envelopeId?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Indicates the envelope status. Valid values are:
     *
     * * sent - The envelope is sent to the recipients.
     * * created - The envelope is saved as a draft and can be modified and sent later.
     */
    status?: string;
    /**
     *  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for
     * offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status
     * (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
     */
    transactionId?: string;
}

/**
 * This object contains details about an envelope transfer rule.
 */
export interface EnvelopeTransferRule {
    /**
     * When set to **true**, the original owner is added as a carbon copy recipient after envelope transfer. The default value is **false**.
     */
    carbonCopyOriginalOwner?: string;
    /**
     * When set to **true**, the envelope transfer rule is active.
     */
    enabled?: string;
    /**
     * The id of the envelope transfer rule. The system generates this id when the rule is first created.
     */
    envelopeTransferRuleId?: string;
    /**
     * The type of envelope event that triggers the transfer. Valid values are:
     *
     * - `sent`
     * - `before sent`
     * - `completed`
     */
    eventType?: string;
    /**
     * Information about the group that triggers the transfer.
     */
    fromGroup?: /* This object contains information about a group. */ Group;
    /**
     * Information about the user who triggers the transfer.
     */
    fromUser?: UserInformation;
    /**
     * The UTC DateTime when the envelope transfer rule was last modified. This property is read only.
     */
    modifiedDate?: string;
    /**
     * Information about the user who last modified the envelope transfer rule.
     */
    modifiedUser?: UserInformation;
    /**
     * Information about the destination folder to which the envelope is transferred.
     */
    toFolder?: /* This object contains details about a folder. */ Folder;
    /**
     * Information about the user to which the envelope is transferred.
     */
    toUser?: UserInformation;
}

export interface EnvelopeTransferRuleInformation {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * Contains information about a specific envelope transfer rule.
     */
    envelopeTransferRules?: /* This object contains details about an envelope transfer rule. */ EnvelopeTransferRule[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

/**
 * This object contains details about the envelope transfer rule that you want to create.
 */
export interface EnvelopeTransferRuleRequest {
    /**
     * When set to **true**, the original owner is added as a carbon copy recipient after envelope transfer. The default value is **false**.
     */
    carbonCopyOriginalOwner?: string;
    /**
     * When set to **true**, the envelope transfer rule is active.
     */
    enabled?: string;
    /**
     * The id of the envelope transfer rule. The system generates this id when the rule is first created.
     */
    envelopeTransferRuleId?: string;
    /**
     * The type of envelope event that triggers the transfer. Valid values are:
     *
     * - `sent`
     * - `before sent`
     * - `completed`
     */
    eventType?: string;
    /**
     * Information about the group that triggers the transfer.
     */
    fromGroups?: /* This object contains information about a group. */ Group[];
    /**
     * Information about the user who triggers the transfer.
     */
    fromUsers?: UserInformation[];
    /**
     * The UTC DateTime when the envelope transfer rule was last modified. This property is read only.
     */
    modifiedDate?: string;
    /**
     * Information about the user who last modified the envelope transfer rule.
     */
    modifiedUser?: UserInformation;
    /**
     * Information about the destination folder to which the envelope is transferred.
     */
    toFolder?: /* This object contains details about a folder. */ Folder;
    /**
     * Information about the user to which the envelope is transferred.
     */
    toUser?: UserInformation;
}

/**
 * This resource provides methods that enable account administrators to create and manage envelope transfer rules.
 */
export interface EnvelopeTransferRules {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * Contains information about a specific envelope transfer rule.
     */
    envelopeTransferRules?: /* This object contains details about an envelope transfer rule. */ EnvelopeTransferRule[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface EnvelopeUpdateSummary {
    /**
     * An object that describes the status of the bulk send envelopes.
     */
    bulkEnvelopeStatus?: BulkEnvelopeStatus;
    /**
     * The envelope ID of the envelope status that failed to post.
     */
    envelopeId?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;

    listCustomFieldUpdateResults?: /* This object represents a list custom field from which envelope creators and senders can select custom data. */ ListCustomField[];
    /**
     * Provides lock information about an envelope that a user has locked.
     */
    lockInformation?: /* This section provides information about envelope locks. */ EnvelopeLocks;
    /**
     * Shows the current purge state for the envelope. The possible values are:
     *
     * * `unpurged`: There has been no successful request to purge documents.
     * * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
     * * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
     * * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
     * * `documents_purged`: The envelope documents have been successfully purged.
     * * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.
     *
     *
     */
    purgeState?: string;
    /**
     * An array of `recipientUpdateResults` objects that contain details about the recipients.
     */
    recipientUpdateResults?: /* The recipient details that are returned after you update the recipient. */ RecipientUpdateResponse[];

    tabUpdateResults?: EnvelopeRecipientTabs;

    textCustomFieldUpdateResults?: /* This object represents a free text custom field where envelope creators and senders can enter custom data. */ TextCustomField[];
}

/**
 * Embedding Envelope views
 */
export interface EnvelopeViews {
    /**
     * The view URL to be navigated to.
     */
    url?: string;
}

/**
 * Envelope creation, management
 */
export interface Envelopes {
    /**
     * Reserved for DocuSign.
     */
    accessControlListBase64?: string;
    /**
     * When set to **true**, users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document,
     * they can add a comment to the document.
     */
    allowComments?: string;
    /**
     * When set to **true**, the Document Markup feature is enabled.
     *
     * **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
     */
    allowMarkup?: string;
    /**
     * When **true**, the recipient can redirect an envelope to a more appropriate recipient.
     */
    allowReassign?: string;
    /**
     * When set to **true**, recipients can view the history of the envelope.
     */
    allowViewHistory?: string;
    /**
     * Deprecated. This feature has been replaced by signing groups.
     */
    anySigner?: string;
    /**
     * When **true**, the envelope is queued for processing and the value of the `status` property is set to `Processing`. Additionally, GET status calls return
     * `Processing` until completed.
     *
     *
     * **Note**: A `transactionId` is required for this call to work correctly. When the envelope is created, the status is `Processing` and an `envelopeId`
     * is not returned in the response. To get the `envelopeId`, use a GET envelope query by using the
     * [transactionId](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/create/#envelopeDefinition) or by checking the Connect notification.
     */
    asynchronous?: string;
    /**
     * Contains a URL for retrieving the attachments that are associated with the envelope.
     */
    attachmentsUri?: string;
    /**
     * When **true**, marks all of the documents in the envelope as authoritative copies.
     *
     * **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level,
     * but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
     */
    authoritativeCopy?: string;
    /**
     * The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
     * If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
     */
    authoritativeCopyDefault?: string;
    /**
     * When set to **true**, autonavigation is set for the recipient.
     *
     */
    autoNavigation?: string;
    /**
     * The id of the brand.
     */
    brandId?: string;
    /**
     * When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
     */
    brandLock?: string;
    /**
     * The URI for retrieving certificate information.
     */
    certificateUri?: string;
    /**
     * Specifies the date and time this item was completed.
     */
    completedDateTime?: string;

    copyRecipientData?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status
     * but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: /* An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administators
        to group and manage envelopes.  */ AccountCustomFields;
    /**
     * The URI for retrieving custom fields.
     */
    customFieldsUri?: string;
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deletedDateTime?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * When set to **true**, responsive documents are disabled for the envelope.
     */
    disableResponsiveDocument?: string;
    /**
     * The URI for retrieving all of the documents associated with the envelope as a single PDF file.
     */
    documentsCombinedUri?: string;
    /**
     * The URI for retrieving all of the documents associated with the envelope as separate files.
     */
    documentsUri?: string;
    /**
     * This is the same as the email body. If specified it is included in the email body for all envelope recipients.
     */
    emailBlurb?: string;
    /**
     * A complex element that allows  the sender to override some envelope email setting information. This can be used to override the Reply
     * To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent.
     *
     * When the emailSettings information is used for an envelope, it only applies to that envelope.
     *
     * **IMPORTANT**: The `emailSettings` information is not returned in the GET method for envelope status. Use GET /email_settings to return information about the email settings.
     */
    emailSettings?: EmailSettings;
    /**
     * The subject line of the email message that is sent to all recipients.
     *
     * For information about adding merge field information to the email subject, see [Template Email Subject Merge
     * Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
     *
     */
    emailSubject?: string;
    /**
     * When set to **true**, the signer is allowed to print the document and sign it on paper.
     */
    enableWetSign?: string;
    /**
     * When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or
     * informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using
     * this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this
     * setting when an envelope is sent.
     *
     * **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.
     *
     * [docviz]: /esign/restapi/Envelopes/EnvelopeDocumentVisibility
     */
    enforceSignerVisibility?: string;
    /**
     * An array of attachment objects that provide information about the attachments that are associated with the envelope.
     */
    envelopeAttachments?: /* Contains information about an attachment. */ Attachment[];
    /**
     * An array containing information about the documents that are included in the envelope.
     */
    envelopeDocuments?: /* This object contains details about the envelope document. */ EnvelopeDocument[];
    /**
     * The envelope's GUID.
     *
     * Example: `93be49ab-afa0-4adf-933c-f752070d71ec`
     */
    envelopeId?: string;
    /**
     * When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
     * After a document or attachment is stamped with an Envelope ID,
     * the ID is seen by all recipients
     * and becomes a permanent part of the document
     * and cannot be removed.
     */
    envelopeIdStamping?: string;
    /**
     * Reserved for DocuSign.
     */
    envelopeLocation?: string;
    /**
     * Metadata that indicates whether the `envelope` property is editable.
     *
     */
    envelopeMetadata?: EnvelopeMetadata;
    /**
     * The URI for retrieving the envelope or envelopes.
     */
    envelopeUri?: string;
    /**
     * An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
     */
    expireAfter?: string;
    /**
     * The date and time the envelope is set to expire.
     */
    expireDateTime?: string;
    /**
     * When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`).
     * Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used.
     * If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
     */
    expireEnabled?: string;
    /**
     * May contain an external identifier for the envelope.
     */
    externalEnvelopeId?: string;
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * When set to **true**, indicates that users have added comments to the envelope.
     */
    hasComments?: string;
    /**
     * Specifies if the `EnvelopeFormData` associated with any forms in the envelope has changed.
     */
    hasFormDataChanged?: string;
    /**
     * When set to **true**, indicates that a .wav file used for voice authentication is included in the envelope.
     */
    hasWavFile?: string;
    /**
     * Reserved for DocuSign.
     */
    holder?: string;
    /**
     * The date and time the envelope was initially sent.
     */
    initialSentDateTime?: string;
    /**
     * When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
     */
    is21CFRPart11?: string;
    /**
     * When set to **true**, indicates that the envelope is a dynamic envelope.
     */
    isDynamicEnvelope?: string;
    /**
     * When set to **true**, indicates that the envelope is a signature-provided envelope.
     */
    isSignatureProviderEnvelope?: string;
    /**
     * The date and time that the item was last modified.
     */
    lastModifiedDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    location?: string;
    /**
     * Provides lock information about an envelope that a user has locked.
     */
    lockInformation?: /* This section provides information about envelope locks. */ EnvelopeLocks;
    /**
     * When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope.
     *
     * Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes.
     *
     * However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
     */
    messageLock?: string;
    /**
     * A complex element that specifies the notification options for the envelope. It consists of:
     *
     * * useAccountDefaults - When set to **true**, the account default notification settings are used for the envelope.
     * * reminders - A complex element that specifies reminder settings for the envelope. It consists of:
     *
     *    * reminderEnabled - When set to **true**, a reminder message is sent to the recipient.
     *    * reminderDelay - An interger that sets the number of days after the recipient receives the envelope that reminder emails are sent to the recipient.
     *    * reminderFrequency - An interger that sets the interval, in days, between reminder emails.
     *
     * * expirations - A complex element that specifies the expiration settings for the envelope. It consists of:
     *
     *    * expireEnabled - When set to **true**, the envelope expires (is no longer available for signing) in the set number of days.
     * If false, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
     *    * expireAfter - An integer that sets the number of days the envelope is active.
     *    * expireWarn - An integer that sets the number of days before envelope expiration that an expiration warning email is sent to the recipient. If set to 0 (zero),
     * no warning email is sent.
     *
     */
    notification?: /* A complex element that specifies the notification settings for the envelope. */ Notification;
    /**
     * The URI for retrieving notifications.
     */
    notificationUri?: string;
    /**
     * Information about any PowerForms that are included in the envelope.
     */
    powerForm?: /* Contains details about a PowerForm. */ PowerForm;
    /**
     * The date that a purge was completed.
     */
    purgeCompletedDate?: string;
    /**
     * The date that a purge was requested.
     */
    purgeRequestDate?: string;
    /**
     * Shows the current purge state for the envelope. The possible values are:
     *
     * * `unpurged`: There has been no successful request to purge documents.
     * * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
     * * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
     * * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
     * * `documents_purged`: The envelope documents have been successfully purged.
     * * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.
     *
     *
     */
    purgeState?: string;
    /**
     * An array of recipient objects that provides details about the recipients of the envelope.
     */
    recipients?: /* Envelope recipients */ EnvelopeRecipients;
    /**
     * When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
     */
    recipientsLock?: string;
    /**
     * Contains a URI for an endpoint that you can use to retrieve the recipients.
     */
    recipientsUri?: string;
    /**
     * Information about the sender of the envelope.
     */
    sender?: UserInfo;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * When set to **true**, recipients can sign on a mobile device.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerCanSignOnMobile?: string;
    /**
     * Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
     */
    signingLocation?: string;
    /**
     * Indicates the envelope status. Valid values are:
     *
     * * `completed`: The envelope has been completed and all tags have been signed.
     * * `created`: The envelope is created as a draft. It can be modified and sent later.
     * * `declined`: The envelope has been declined by the recipients.
     * * `delivered`: The envelope has been delivered to the recipients.
     * * `sent`: The envelope is sent to the recipients.
     * * `signed`: The envelope has been signed by the recipients.
     * * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
     *
     */
    status?: string;
    /**
     * The data and time that the status changed.
     */
    statusChangedDateTime?: string;
    /**
     * The DateTime that the envelope changed status (i.e. was created or sent.)
     */
    statusDateTime?: string;
    /**
     * The URI for retrieving the templates.
     */
    templatesUri?: string;
    /**
     *  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days.
     * It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times.
     * The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet
     * connection was lost before the envelope status was returned.
     */
    transactionId?: string;
    /**
     * When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting.
     * When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients.
     *
     * If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not
     * returned in responses when getting envelope information.
     */
    useDisclosure?: string;
    /**
     * The date and time the envelope or template was voided.
     */
    voidedDateTime?: string;
    /**
     * The reason the envelope or template was voided.
     */
    voidedReason?: string;
}
/**
 * Result set for the Envelopes: listStatusChanges method
 */
export interface EnvelopesInformation {
    /**
     * A token returned by an earlier API call that you can use with a new call to resume a search query at the point where it left off.  This token system enhances the performance of the API.
     */
    continuationToken?: string;
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * Set of envelope information
     */
    envelopes?: Envelope[];
    /**
     * Array of envelope statuses and transaction IDs in the result set.
     */
    envelopeTransactionStatuses?: EnvelopeTransactionStatus[];
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * The last time that a query was performed.
     */
    lastQueriedDateTime?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

/**
 * This object describes errors that occur. It is only valid for responses and ignored in requests.
 */
export interface ErrorDetails {
    /**
     * The code associated with the error condition.
     */
    errorCode?: string;
    /**
     * A brief message describing the error condition.
     */
    message?: string;
}

/**
 * Register a Connect webhook for a specific envelope
 */
export interface EventNotification {
    /**
     * A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property.
     *
     * To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
     */
    envelopeEvents?: /* For which envelope events should your webhook be called? */ EnvelopeEvent[];

    eventData?: ConnectEventData;
    /**
     * When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes.
     */
    includeCertificateOfCompletion?: string;
    /**
     * When set to **true**, the Connect service will digitally sign the XML data. The signature will be included in the XML message.
     */
    includeCertificateWithSoap?: string;
    /**
     * When set to **true**, the Document Fields associated with the envelope's documents are included in the notification messages.
     * Document Fields are optional custom name-value pairs added to documents using the API.
     */
    includeDocumentFields?: string;
    /**
     * When set to **true**, the XML webhook messages will include the envelope's PDF documents. Including the PDF documents will greatly increase
     * the size of the notification messages. Ensure that your listener can handle incoming messages that are 25MB or larger.
     */
    includeDocuments?: string;
    /**
     * When set to **true**, if the envelope is voided, the Connect Service notification will include the void reason, as entered by the person that voided the envelope.
     */
    includeEnvelopeVoidReason?: string;

    includeHMAC?: string;
    /**
     * When set to **true**, Connect will include the sender account as Custom Field in the data.
     */
    includeSenderAccountAsCustomField?: string;
    /**
     * When set to **true**, the envelope's time zone information is included in the webhook messages.
     */
    includeTimeZone?: string;
    /**
     * When set to **true**, the webhook messages are logged. They can be viewed on the DocuSign Administration Web Tool in the Connect section. Logged messages can also be
     * downloaded via the [ConnectEvents resource](https://developers.docusign.com/esign-rest-api/reference/Connect/ConnectEvents).
     */
    loggingEnabled?: string;
    /**
     * An array of recipient event statuses that will trigger Connect to send notifications to your webhook listener at the url endpoint specified in the `url` property.
     *
     * To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
     */
    recipientEvents?: RecipientEvent[];
    /**
     * When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures.
     */
    requireAcknowledgment?: string;
    /**
     * When set to **true**, Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol.
     */
    signMessageWithX509Cert?: string;
    /**
     * The namespace of the SOAP interface.
     *
     * The namespace value must be set if useSoapexport interface is set to true.
     */
    soapNameSpace?: string;
    /**
     * The endpoint to which webhook notification messages are sent via an HTTPS POST request. The url must start with https. The customer's web server must use an SSL/TLS
     * certificate whose CA is in the Microsoft list of trusted CAs. Self-signed certificates are not ok. Free certificates from Let's Encrypt can be used.
     */
    url?: string;
    /**
     * When set to **true**, the notifications are sent to your endpoint as SOAP requests.
     */
    useSoapInterface?: string;
}

/**
 * Information about the result of an event.
 */
export interface EventResult {
    /**
     * Date/time of the event.
     */
    eventTimestamp?: string;
    /**
     * Reason for failure, if the event failed.
     */
    failureDescription?: string;
    /**
     * Event status.
     */
    status?: string;
    /**
     * Failure status code, if the event failed.
     */
    vendorFailureStatusCode?: string;
}

/**
 * A complex element that specifies the expiration settings for the envelope.
 */
export interface Expirations {
    /**
     * An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
     */
    expireAfter?: string;
    /**
     * When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter`
     * to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting,
     * the DocuSign default value of 120 days is used.
     */
    expireEnabled?: string;
    /**
     * An integer that specifying the number of days before the envelope expires that an expiration warning email is sent to the recipient. If set to 0 (zero), no warning email is sent.
     */
    expireWarn?: string;
}

export interface ExternalClaim {
    /**
     * The UNIX epoch time at which the claim was acquired from the external provider.
     */
    acquiredTime?: string;
    /**
     * The name of the external claim being requested.
     */
    claimName?: string;
    /**
     * The claim provider's client ID from which the claim is being requested.
     */
    provider?: string;
    /**
     * The value provided for the external claim.
     */
    value?: string;
}

export interface ExternalDocServiceErrorDetails {
    /**
     * Reserved: TBD
     */
    authenticationUrl?: string;
    /**
     * A code associated with the error condition.
     */
    errorCode?: string;

    message?: string;
}

/**
 * A complex object specifying the external document sources.
 */
export interface ExternalDocumentSources {
    /**
     * The account is enabled to allow external documents to be attached from BoxNet.
     */
    boxnetEnabled?: string;
    /**
     * Metadata indicating whether the `boxnetEnabled` property is editable.
     */
    boxnetMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The account is enabled to allow external documents to be attached from DropBox.
     */
    dropboxEnabled?: string;
    /**
     * Metadata indicating whether the `dropboxEnabled` property is editable.
     */
    dropboxMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The account is enabled to allow external documents to be attached from Google Drive.
     */
    googleDriveEnabled?: string;
    /**
     * Metadata indicating whether the `googleDriveEnabled` property is editable.
     */
    googleDriveMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The account is enabled to allow external documents to be attached from OneDrive.
     */
    oneDriveEnabled?: string;
    /**
     * Metadata indicating whether the `oneDriveEnabled` property is editable.
     */
    oneDriveMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The account is enabled to allow external documents to be attached from Salesforce.
     */
    salesforceEnabled?: string;
    /**
     * Metadata indicating whether the `salesforceEnabled` property is editable.
     */
    salesforceMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}

/**
 * This object contains information about a file or folder in cloud storage.
 */
export interface ExternalFile {
    /**
     * The UTC date and time that the file or folder was last modified.
     */
    date?: string;
    /**
     * The storage provider's id for the file or folder.
     */
    id?: string;
    /**
     * The file extension for a file.
     *
     * **Note**: If the item is a folder, this value is null.
     */
    img?: string;
    /**
     * The full name of a file.
     */
    name?: string;
    /**
     * The size of the file. The file size limit varies based on the cloud storage provider.
     */
    size?: string;
    /**
     * When set to **true**, DocuSign supports the file type for upload.
     */
    supported?: string;
    /**
     * The type of cloud storage item. Valid values are:
     *
     * - `file`
     * - `folder`
     */
    type?: string;
    /**
     * The URI for the file or folder.
     */
    uri?: string;
}

export interface ExternalFolder {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: ExternalDocServiceErrorDetails;
    /**
     * A unique ID for the Salesforce object.
     */
    id?: string;

    items?: /* This object contains information about a file or folder in cloud storage. */ ExternalFile[];

    name?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface FavoriteTemplates {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;

    favoriteTemplates?: FavoriteTemplatesContentItem[];

    templatesUpdatedCount?: number; // int32
}

export interface FavoriteTemplatesContentItem {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;

    favoritedDate?: string;
    /**
     * The id of the template.
     */
    templateId?: string;
}

export interface FavoriteTemplatesInfo {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;

    favoriteTemplates?: FavoriteTemplatesContentItem[];

    templatesUpdatedCount?: number; // int32
}

export interface FeatureAvailableMetadata {
    availabilty?: string;

    featureName?: string;
}

/**
 * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
 */
export interface FeatureSet {
    /**
     * Reserved for DocuSign.
     */
    currencyFeatureSetPrices?: /* Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only. */ CurrencyFeatureSetPrice[];
    /**
     * Reserved for DocuSign.
     */
    envelopeFee?: string;
    /**
     * Reserved for DocuSign.
     */
    featureSetId?: string;
    /**
     * Reserved for DocuSign.
     */
    fixedFee?: string;
    /**
     * Reserved for DocuSign.
     */
    is21CFRPart11?: string;
    /**
     * Reserved for DocuSign.
     */
    isActive?: string;
    /**
     * When set to **true**, the feature set is actively enabled as part of the plan.
     */
    isEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    name?: string;
    /**
     * Reserved for DocuSign.
     */
    seatFee?: string;
}

export interface FileType {
    fileExtension?: string;
    /**
     * The mime-type of a file type listed in a fileTypes collection.
     */
    mimeType?: string;
}

export interface FileTypeList {
    /**
     * A collection of file types.
     */
    fileTypes?: FileType[];
}

/**
 * Use this object to create a filtered view of the items in a folder.
 */
export interface Filter {
    /**
     * When set to **true**, the current user needs to take action on the item.
     */
    actionRequired?: string;
    /**
     * The number of days a sent envelope remains active before it expires.
     */
    expires?: string;
    /**
     * Filters for any combination of folder ids and folder types. The possible folder types are:
     *
     * - `awaiting_my_signature`
     * - `completed`
     * - `draft`
     * - `drafts`
     * - `expiring_soon`
     * - `inbox`
     * - `out_for_signature`
     * - `recyclebin`
     * - `sentitems`
     * - `waiting_for_others`
     */
    folderIds?: string;
    /**
     * The UTC DateTime of the beginning of a date range. If no value is provided, the default search is the previous 30 days.
     */
    fromDateTime?: string;
    /**
     * When set to **true**, the item is a template.
     */
    isTemplate?: string;
    /**
     * (Optional) The order in which to sort the results.
     *
     * Valid values are:
     *
     *
     * * `asc`: Ascending order.
     * * `desc`: Descending order.
     */
    order?: string;
    /**
     * The field used to sort the results.
     *
     * Example: `Created`
     */
    orderBy?: string;
    /**
     * Reserved for DocuSign.
     */
    searchTarget?: string;
    /**
     * A free text search field for searching across the items in a folder. The search looks for the text that you enter in the recipient names and emails,
     * envelope custom fields, sender name, and subject.
     */
    searchText?: string;
    /**
     * The status of the envelope. By default, all statuses are returned.
     *
     * For details, see [Envelope Status Code Descriptions](https://developers.docusign.com/esign-rest-api/guides/status-and-error-codes#envelope-status-code-descriptions).
     */
    status?: string;
    /**
     * The UTC DateTime of the end of a date range. If no value is provided, the default search is to the current date.
     */
    toDateTime?: string;
}

/**
 * A tab that displays the recipient's first name. This tab
 * takes the recipient's name as entered in the recipient
 * information, splits it into sections based on spaces and
 * uses the first section as the first name.
 *
 */
export interface FirstName {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc.
     * will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property
     * that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * This object contains details about a folder.
 */
export interface Folder {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An object used to present a filtered view of the items in a folder.
     */
    filter?: /* Use this object to create a filtered view of the items in a folder. */ Filter;
    /**
     * The id of the folder.
     */
    folderId?: string;
    /**
     * A list of envelopes and templates that the folder contains.
     */
    folderItems?: /* Information about folder item results. */ FolderItemV2[];
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * When set to **true**, the current user has access to the folder.
     */
    hasAccess?: string;
    /**
     * When set to **true**, the folder has subfolders.
     */
    hasSubFolders?: string;
    /**
     * The number of items in the folder.
     */
    itemCount?: string;
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * Information about the user who owns the folder.
     */
    owner?: UserInfo;
    /**
     * The id of the parent folder, or the special value `root` for the root folder.
     */
    parentFolderId?: string;
    /**
     * The URI of the parent folder.
     */
    parentFolderUri?: string;
    /**
     * The number of subfolders.
     */
    subFolderCount?: string;
    /**
     * The type of folder. Possible values include:
     *
     * - `draft`
     * - `inbox`
     * - `normal` (a system-generated folder)
     * - `recyclebin`
     * - `sentitems`
     * - `custom` (a custom folder created by a user)
     */
    type?: string;
    /**
     * The URI for the folder.
     */
    uri?: string;
}

/**
 * Results from a folder item request.
 */
export interface FolderItemResponse {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * A list of the envelopes in the specified folder or folders.
     */
    folderItems?: /* Information about folder item results. */ FolderItemV2[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result.
     */
    totalRows?: string;
}

/**
 * Information about folder item results.
 */
export interface FolderItemV2 {
    /**
     * If the item is an envelope, this is the UTC DateTime when the envelope was completed.
     */
    completedDateTime?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;
    /**
     * If the item is an envelope, this is the id of the envelope.
     */
    envelopeId?: string;
    /**
     * If the item is an envelope, this is the URI for retrieving it.
     */
    envelopeUri?: string;
    /**
     * The date and time the envelope is set to expire.
     */
    expireDateTime?: string;
    /**
     * The id of the folder.
     */
    folderId?: string;
    /**
     * If the item is a subfolder, this is the URI for retrieving it.
     */
    folderUri?: string;
    /**
     * When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
     */
    is21CFRPart11?: string;
    /**
     * The name of the user who owns the folder.
     */
    ownerName?: string;
    /**
     * An array of recipient objects that provides details about the recipients of the envelope.
     */
    recipients?: /* Envelope recipients */ EnvelopeRecipients;
    /**
     * Contains a URI for an endpoint that you can use to retrieve the recipients.
     */
    recipientsUri?: string;
    /**
     * The name of the sender's company.
     */
    senderCompany?: string;
    /**
     * The sender's email address.
     */
    senderEmail?: string;
    /**
     * The sender's name.
     */
    senderName?: string;
    /**
     * The sender's id.
     */
    senderUserId?: string;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * The status of the item.
     */
    status?: string;
    /**
     * The subject of the envelope.
     */
    subject?: string;
    /**
     * The id of the template.
     */
    templateId?: string;
    /**
     * The URI for retrieving the template.
     */
    templateUri?: string;
}

export interface FolderItemsResponse {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * An array containing PowerForm data.
     */
    envelopes?: /*  This object describes an envelope. */ EnvelopeSummary[];
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface FolderSharedItem {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The id of the folder.
     */
    folderId?: string;
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * Information about the user who owns the folder.
     */
    owner?: UserInfo;
    /**
     * The id of the parent folder.
     */
    parentFolderId?: string;
    /**
     * The URI for the parent folder.
     */
    parentFolderUri?: string;
    /**
     * Indicates how the folder is shared. Valid values are:
     *
     * - `not_shared`
     * - `shared_to`
     */
    shared?: string;
    /**
     * A list of groups that share the folder.
     */
    sharedGroups?: /* Information about items shared among groups. */ MemberGroupSharedItem[];
    /**
     * A list of users that share the folder.
     */
    sharedUsers?: /* Information about a shared item. */ UserSharedItem[];
    /**
     * A URI containing the user ID.
     */
    uri?: string;
    /**
     * Information about the user associated with the folder.
     */
    user?: UserInfo;
}

/**
 * Information for a folder request.
 */
export interface FoldersRequest {
    /**
     * A comma-separated list of envelope IDs.
     */
    envelopeIds?: string[];
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     *  The id of the folder that the envelope is being moved from.
     */
    fromFolderId?: string;
}

export interface FoldersResponse {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * An array containing PowerForm data.
     */
    envelopes?: /*  This object describes an envelope. */ EnvelopeSummary[];
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}
/**
 * A complex element that has up to four Question/Answer pairs for forgotten password information.
 */
export interface ForgottenPasswordInformation {
    /**
     * The answer to the first forgotten password challenge question.
     */
    forgottenPasswordAnswer1?: string;
    /**
     * The answer to the second forgotten password challenge question.
     */
    forgottenPasswordAnswer2?: string;
    /**
     * The answer to the third forgotten password challenge question.
     */
    forgottenPasswordAnswer3?: string;
    /**
     * The answer to the fourth forgotten password challenge question.
     */
    forgottenPasswordAnswer4?: string;
    /**
     * The first challenge question presented to a user who has forgotten their password.
     */
    forgottenPasswordQuestion1?: string;
    /**
     * The second challenge question presented to a user who has forgotten their password.
     */
    forgottenPasswordQuestion2?: string;
    /**
     * The third challenge question presented to a user who has forgotten their password.
     */
    forgottenPasswordQuestion3?: string;
    /**
     * The fourth challenge question presented to a user who has forgotten their password.
     */
    forgottenPasswordQuestion4?: string;
}

export interface FormDataItem {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The selected value in a list.
     */
    listSelectedValue?: string;
    /**
     * The name of the form field.
     */
    name?: string;
    /**
     * The initial value associated with the form field.
     */
    originalValue?: string;
    /**
     * The current value associated with the form field.
     */
    value?: string;
}
/**
 * The value of a formula tab is calculated
 * from the values of other
 * number or date tabs in the document.
 * When the recipient completes the underlying fields,
 * the formula tab calculates and displays the result.
 *
 * The `formula` property of the tab
 * contains the references
 * to the underlying tabs.
 * See [Calculated Fields][calculatedfields]
 * in the DocuSign Support Center
 * to learn more about formulas.
 *
 * If a formula tab contains
 * a `paymentDetails` property,
 * the tab is considered a payment item.
 * See [Requesting Payments Along with Signatures][paymentguide]
 * in the DocuSign Support Center
 * to learn more about payments.
 *
 * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
 * [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
 *
 */
export interface FormulaTab {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible
     * (the characters are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console.
     * The information on the downloaded document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * Metadata that indicates whether the `concealValueOnDocument` property is editable.
     */
    concealValueOnDocumentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used,
     * the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data.
     * If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * Metadata that indicates whether the `disableAutoSize` property is editable.
     */
    disableAutoSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property
     * that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the formula
     * for calculating the value of
     * this tab.
     *
     * Use a tab's `tabLabel`,
     * enclosed in brackets,
     * to refer to it.
     *
     * For example,
     * you want to present the total cost
     * of two items, tax included.
     *
     * The cost of each item is stored
     * in number tabs labeled Item1 and Item2.
     * The tax rate is in a number tab
     * labeled TaxRate.
     *
     * The formula string for this property
     * would be:
     * `([Item1] + [Item2]) * (1 + [TaxRate])`
     *
     * See [Calculated Fields][calculatedfields]
     * in the DocuSign Support Center
     * to learn more about formulas.
     *
     * Maximum Length: 2000 characters
     *
     * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *
     */
    formula?: string;
    /**
     * Metadata indicating if the sender can edit the `formula` property.
     */
    formulaMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * If this is a regular formula (no `paymentDetails` property is present):
     *
     * * **true**: The tab is hidden.
     * * **false**: The tab is shown.
     *
     * If the formula is payment item (a `paymentDetails` property is present):
     *
     * * **true**: The tab is displayed as a payment.
     * * **false**: The tab is displayed as a regular formula.
     *
     */
    hidden?: string;
    /**
     * Metadata that indicates whether the `hidden` property is editable.
     */
    hiddenMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number.
     */
    isPaymentAmount?: string;
    /**
     * Metadata that indicates whether the `isPaymentAmount` property is editable.
     */
    isPaymentAmountMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional value that describes the maximum length of the property when the property is a string.
     */
    maxLength?: string;
    /**
     * Metadata that indicates whether the `maxLength` property is editable.
     */
    maxLengthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The initial value of the tab when it was sent to the recipient.
     */
    originalValue?: string;
    /**
     * Metadata that indicates whether the `originalValue` property is editable.
     */
    originalValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates
     * that this formula tab
     * is a payment item.
     * See [Requesting Payments Along with Signatures][paymentguide]
     * in the DocuSign Support Center
     * to learn more about payments.
     *
     * [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    paymentDetails?: PaymentDetails;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there
     * is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a
     * different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and shared is true, information must be entered in this field to complete the envelope.
     */
    requireAll?: string;
    /**
     * Metadata that indicates whether the `requireAll` property is editable.
     */
    requireAllMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The number of decimal places to round to.
     */
    roundDecimalPlaces?: string;
    /**
     * Metadata that indicates whether the `roundDecimalPlaces` property is editable.
     */
    roundDecimalPlacesMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender must populate the tab before an envelope can be sent using the template.
     *
     * This value tab can only be changed by modifying (PUT) the template.
     *
     * Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
     */
    senderRequired?: string;
    /**
     * Metadata that indicates whether the `senderRequired` property is editable.
     */
    senderRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * Metadata that indicates whether the `validationMessage` property is editable.
     */
    validationMessageMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A regular expression used to validate input for the tab.
     */
    validationPattern?: string;
    /**
     * Metadata that indicates whether the `validationPattern` property is editable.
     */
    validationPatternMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}
/**
 * A tab that displays the recipient's full name.
 *
 */
export interface FullName {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property
     * that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId`
     * must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface GraphicsContext {
    /**
     * The fill color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color
     * name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
     */
    fillColor?: string;
    /**
     * The line color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a
     * [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
     */
    lineColor?: string;
    /**
     * The line weight or thickness to use for the overlay.
     */
    lineWeight?: string;
}
/**
 * This object contains information about a group.
 */
export interface Group {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The DocuSign group ID for the group.
     */
    groupId?: string;
    /**
     * The name of the group.
     */
    groupName?: string;
    /**
     * The group type. Possible values include:
     *
     * - `adminstrators`
     * - `everyone`
     * - `customGroup`
     * - `sharedSigningGroup`
     *
     * <!-- More? To do -->
     */
    groupType?: string;
    /**
     * The ID of the permission profile associated with the group. Possible values include:
     *
     * - `2301416` (for the `DocuSign Viewer` profile)
     * - `2301415` (for the `DocuSign Sender` profile)
     * - `2301414` (for the `Account Administrator` profile)
     */
    permissionProfileId?: string;
    /**
     * A list of the users in the group.
     */
    users?: UserInfo[];
    /**
     * The total number of users in the group.
     */
    usersCount?: string;
}
/**
 * If your account includes multiple signing brands, you can use the groups functionality to assign different brands to different groups. This resource enables you to manage group brands.
 */
export interface GroupBrands {
    /**
     * A list of brands.
     */
    brands?: /* Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope. */ Brand[];
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    recipientBrandIdDefault?: string;
    /**
     * The brand that envelope senders see when a brand is not explicitly set.
     */
    senderBrandIdDefault?: string;
}

export interface GroupInformation {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * A collection group objects containing information about the groups.
     */
    groups?: /* This object contains information about a group. */ Group[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

/**
 * Groups' users
 */
export interface GroupUsers {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
    /**
     * An array of `userInfo` objects containing information about the users in the group.
     */
    users?: UserInfo[];
}

/**
 * Group information
 */
export interface Groups {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * A collection group objects containing information about the groups.
     */
    groups?: /* This object contains information about a group. */ Group[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

/**
 * A complex object specifying ID check configuration.
 */
export interface IdCheckConfiguration {
    /**
     * A list of ID check security steps, each specifying an authorization type.
     */
    authSteps?: IdCheckSecurityStep[];
    /**
     * Boolean that specifies whether the signature is the default signature for the user.
     */
    isDefault?: string;
    /**
     * The name of the signature.
     */
    name?: string;
}

/**
 * A complex element that contains input information related to a recipient ID check.
 */
export interface IdCheckInformationInput {
    /**
     * An object that specifies recipient address information and how it is displayed.
     */
    addressInformationInput?: AddressInformationInput;
    /**
     * An object that specifies recipient date of birth information and how it is displayed.
     */
    dobInformationInput?: DobInformationInput;
    /**
     * An object that specifies the last four digits of the recipient's Social Security Number (SSN).
     */
    ssn4InformationInput?: Ssn4InformationInput;
    /**
     * An object that specifies the recipient's Social Security Number (SSN) information. Note that ssn9 information cannot be returned in a response.
     */
    ssn9InformationInput?: Ssn9InformationInput;
}

export interface IdCheckSecurityStep {
    /**
     * Type of authorization used for the security check.
     */
    authType?: string;
}

/**
 * Identity Verification enables you to verify a signer's identity before they can access a document. The `IdentityVerifications` resource provides a method that enables
 * you to list the workflows that are available to an account.
 */
export interface IdentityVerifications {
    identityVerification?: /* Specifies an Identity Verification workflow. */ AccountIdentityVerificationWorkflow[];
}

/**
 * Contains information about an in-person recipient. This is a DocuSign user,
 * acting as a Signing Host,
 * who is in the same physical location as the signer.
 * To learn about the fields used
 * for the eNotary feature,
 * see the [EnvelopeRecipients resource][resource].
 *
 * [resource]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
 *
 */
export interface InPersonSigner {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Metadata that indicates whether the `accessCode` property is editable. Read only.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
     */
    addAccessCodeToEmail?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * When set to **true**, autonavigation is set for the recipient.
     *
     */
    autoNavigation?: string;
    /**
     * When set to **true**, specifies that the signer can perform the signing ceremony offline.
     */
    canSignOffline?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the
     * user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**,
     * an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * Indicates the number of times that the recipient has been through a signing completion.
     *
     * If this number is greater than `0` for a signing group, only the user who previously completed may sign again.
     */
    completedCount?: string;
    /**
     * The reason why the recipient was created (for example, `sender`). Read only.
     */
    creationReason?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not
     * used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * The reason the recipient declined the document. Read only.
     */
    declinedReason?: string;
    /**
     * When set to **true**,
     * this is the default recipient for the envelope.
     * This option is used when creating an envelope from a template.
     *
     */
    defaultRecipient?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient.
     * For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * The signer's email address in an eNotary flow.
     *
     * Use only when `inPersonSigningType` is `notary`.
     * For regular in-person-signer flow, use `signerEmail` instead.
     *
     */
    email?: string;
    /**
     * Metadata that indicates whether the `email` property is editable. Read only.
     */
    emailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients, the other recipients will
     * inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign,
     * just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions.
     * When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by
     * the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded
     * signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending
     * application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,
     * the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use.
     * In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.)
     * to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process
     * for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`,
     * `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are
     * enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property
     * must be set to **true** for the envelope to use this.
     *
     * When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative
     * role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope,
     * unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients,
     * unless they are specifically excluded using this setting when an envelope is sent.
     */
    excludedDocuments?: string[];
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The email address of the signing host.
     * This is the DocuSign user that is hosting the in-person signing session.
     *
     * Required when `inPersonSigningType` is `inPersonSigner`.
     * For eNotary flow, use `email` instead.
     *
     * Maximum Length: 100 characters.
     *
     */
    hostEmail?: string;
    /**
     * Metadata that indicates whether the `hostEmail` property is editable.
     */
    hostEmailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the signing host.
     * This is the DocuSign user that is hosting the in-person signing session.
     *
     * Required when `inPersonSigningType` is `inPersonSigner`.
     * For eNotary flow, use `name` instead.
     *
     * Maximum Length: 100 characters.
     *
     */
    hostName?: string;
    /**
     * Metadata that indicates whether the `hostName` property is editable.
     */
    hostNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication
     * types appear in the web console sending export interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $.
     * To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a
     * phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the
     * default settings for the recipient's account.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * Specifies whether the envelope uses the eNotary feature.
     * Valid values:
     *
     * * `inPersonSigner`: The envelope uses the normal in-person signing flow.
     * * `notary`: The envelope uses the eNotary in-person signing flow.
     *
     */
    inPersonSigningType?: string;
    /**
     * Metadata that indicates whether the `inPersonSigningType` property is editable.
     */
    inPersonSigningTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * The signer's full legal name in an eNotary flow.
     *
     * Required when `inPersonSigningType` is `notary`.
     * For a regular in-person-signer flow, use `signerName` instead.
     *
     * Maximum Length: 100 characters.
     *
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Information about the notary host. The following information is required when using the eNotary in-person signing flow:
     *
     * - `name`: The name of the notary.
     * - `email`: The email address of the notary.
     * - `recipientId`: A unique ID number for the notary signing host.
     */
    notaryHost?: NotaryHost;
    /**
     * A note sent to the in-person signer in the signing email.
     * This note is visible only to this recipient.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * Metadata that indicates whether the `note` property is editable. Read only.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details. It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     */
    phoneAuthentication?: RecipientPhoneAuthentication;
    /**
     * Reserved for DocuSign.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Information about the recipient's authentication status. Read only.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature
     * (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    recipientSignatureProviders?: RecipientSignatureProvider[];
    /**
     * When set to **true**, specifies that the recipient creates the tabs.
     */
    recipientSuppliesTabs?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign,
     * initial, date, or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information,
     * add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     */
    requireIdLookup?: string;
    /**
     * Metadata that indicates whether the `requireIdLookup` property is editable. Read only.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.
     *
     * This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders`
     * parameter for other types of digital certificates.
     *
     * Set this parameter to `safe` to use a SAFE-BioPharma certificate.
     *
     * The signer must be enrolled in the SAFE program to sign with a SAFE certificate.
     */
    requireSignerCertificate?: string;
    /**
     * When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
     */
    requireSignOnPaper?: string;
    /**
     * When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.
     */
    requireUploadSignature?: string;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
     *
     * Used only with recipient types In Person Signers and Signers.
     */
    signatureInfo?: RecipientSignatureInformation;
    /**
     * Reserved for DocuSign.
     */
    signedDateTime?: string;
    /**
     * The in-person signer's email address.
     *
     * Required when `inPersonSigningType` is `inPersonSigner`.
     * For eNotary flow, use `email` instead.
     *
     * Maximum Length: 100 characters.
     *
     *
     */
    signerEmail?: string;
    /**
     * Metadata that indicates if the sender can edit the in-person signer's email address.
     */
    signerEmailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The signer's first name.
     */
    signerFirstName?: string;
    /**
     * Metadata that indicates if the `signerFirstName` property is editable.
     */
    signerFirstNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The signer's last name.
     */
    signerLastName?: string;
    /**
     * Metadata that indicates whether the `signerLastName` property is editable.
     */
    signerLastNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The in-person signer's full legal name.
     *
     * Required when `inPersonSigningType` is `inPersonSigner`.
     * For eNotary flow, use `name` instead.
     *
     * Maximum Length: 100 characters.
     *
     */
    signerName?: string;
    /**
     * Metadata that indicates whether the `signerName` property is editable.
     */
    signerNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each
     * signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once).
     */
    signInEachLocation?: string;
    /**
     * Metadata that indicates whether the `signInEachLocation` property is editable. Read only.
     */
    signInEachLocationMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Not applicable. You cannot use a signing group for an in-person signer.
     */
    signingGroupId?: string;
    /**
     * Not applicable.
     */
    signingGroupIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Not applicable.
     */
    signingGroupName?: string;
    /**
     * Not applicable.
     */
    signingGroupUsers?: UserInfo[];
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the element `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * The recipient's status. Read only.
     *
     * Possible values:
     *
     * - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the
     * bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
     * - `declined`: The recipient declined to sign the document(s) in the envelope.
     * - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
     * - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's
     * status automatically switches to `completed`.
     */
    status?: string;
    /**
     * The code associated with the recipient's status. Read only.
     */
    statusCode?: string;
    /**
     * When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
     */
    suppressEmails?: string;
    /**
     * A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data.
     * They may also display data to the recipients.
     */
    tabs?: EnvelopeRecipientTabs;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * The total number of tabs in the documents. Read only.
     */
    totalTabCount?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}

/**
 * A tab that allows the recipient to initial the document. May
 * be optional.
 *
 */
export interface InitialHere {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used,
     * the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property
     * that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient does not need to complete this tab to complete the signing process.
     */
    optional?: string;
    /**
     * Metadata that indicates whether the `optional` property is editable.
     */
    optionalMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
     */
    scaleValue?: string;
    /**
     * Metadata that indicates whether the `scaleValue` property is editable.
     */
    scaleValueMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface InlineTemplate {
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise
     * not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: /* An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administators to
        group and manage envelopes.  */ AccountCustomFields;
    /**
     * A complex element that contains details about the documents associated with the envelope.
     */
    documents?: /* A document object. */ Document[];
    /**
     * A container used to send documents to recipients. The envelope carries information about the sender and timestamps to indicate the progress of the delivery procedure.
     * It can contain collections of Documents, Tabs and Recipients.
     */
    envelope?: Envelope;
    /**
     * An array of recipient objects that provides details about the recipients of the envelope.
     */
    recipients?: /* Envelope recipients */ EnvelopeRecipients;
    /**
     * Specifies the order in which templates are overlaid.
     */
    sequence?: string;
}

export interface IntegratedUserInfoList {
    allUsersSelected?: string;
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
    /**
     * User management information.
     */
    users?: UserInfo[];
}

/**
 * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for
 * recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
 */
export interface Intermediary {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Metadata that indicates whether the `accessCode` property is editable. Read only.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
     */
    addAccessCodeToEmail?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating
     * the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**,
     * an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group,
     * only the user who previously completed may sign again. Read only.
     */
    completedCount?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise
     * not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * The reason the recipient declined the document. Read only.
     */
    declinedReason?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient.
     * For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * The recipient's email address. Notification of the document to sign is sent to this email address.
     *
     * Maximum length: 100 characters.
     */
    email?: string;
    /**
     * Metadata that indicates whether the `email` property is editable. Read only.
     */
    emailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients,
     * the other recipients will inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign,
     * just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions.
     * When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated
     * by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an
     * embedded signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending
     * application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,
     * the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use.
     * In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.)
     * to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing
     * process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are:
     * `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope.
     * The merge fields are enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility`
     * property must be set to **true** for the envelope to use this.
     *
     * When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative
     * role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they
     * are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are
     * specifically excluded using this setting when an envelope is sent.
     */
    excludedDocuments?: string[];
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The recipient's first name. Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * Metadata that indicates whether the `firstame` property is editable. Read only.
     */
    firstNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    fullName?: string;
    /**
     * Reserved for DocuSign.
     */
    fullNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types
     * appear in the web console sending export interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $.
     * To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a
     * phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as
     * the default settings for the recipient's account.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * The recipient's last name.
     */
    lastName?: string;
    /**
     * Metadata that indicates whether the `lastName` property is editable. Read only.
     */
    lastNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * The full legal name of the recipient. Maximum Length: 100 characters.
     *
     * **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A note sent to the recipient in the signing email.
     * This note is unique to this recipient.
     * In the user interface,
     * it appears near the upper left corner
     * of the document
     * on the signing screen.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * Metadata that indicates whether the `note` property is editable. Read only.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     *
     *
     */
    phoneAuthentication?: RecipientPhoneAuthentication;
    /**
     * Reserved for DocuSign.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Information about the recipient's authentication status. Read only.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign,
     * initial, date, or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change
     * the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     */
    requireIdLookup?: string;
    /**
     * Metadata that indicates whether the `requireIdLookup` property is editable. Read only.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    signedDateTime?: string;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend
     * that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a
     * second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * Metadata that indicates whether the `signingGroupId` property is editable. Read only.
     */
    signingGroupIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
    /**
     * A complex type that contains information about users in the signing group.
     */
    signingGroupUsers?: UserInfo[];
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the element `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * The recipient's status. Read only.
     *
     * Possible values:
     *
     * - `autoresponded`: The recipientÃ¢ÂÂs email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about
     * the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
     * - `declined`: The recipient declined to sign the document(s) in the envelope.
     * - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
     * - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status
     * automatically switches to `completed`.
     *
     */
    status?: string;
    /**
     * The code associated with the recipient's status. Read only.
     */
    statusCode?: string;
    /**
     * When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
     */
    suppressEmails?: string;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * The total number of tabs in the documents. Read only.
     */
    totalTabCount?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}

/**
 * Invoices
 */
export interface Invoices {
    /**
     * Reserved: TBD
     */
    amount?: string;
    /**
     * Reserved: TBD
     */
    balance?: string;
    /**
     * Reserved: TBD
     */
    dueDate?: string;
    /**
     * Reserved: TBD
     */
    invoiceId?: string;
    /**
     * Reserved: TBD
     */
    invoiceItems?: /* Contains information about an item on a billing invoice. */ BillingInvoiceItem[];
    /**
     * Reserved: TBD
     */
    invoiceNumber?: string;
    /**
     * Contains a URI for an endpoint that you can use to retrieve invoice information.
     */
    invoiceUri?: string;

    nonTaxableAmount?: string;

    pdfAvailable?: string;

    taxableAmount?: string;
}

export interface Jurisdiction {
    allowSystemCreatedSeal?: string;

    allowUserUploadedSeal?: string;

    commissionIdInSeal?: string;

    county?: string;

    countyInSeal?: string;

    enabled?: string;

    jurisdictionId?: string;

    name?: string;

    notaryPublicInSeal?: string;

    stateNameInSeal?: string;
}

/**
 * A tab that displays the recipient's last name. This tab
 * takes the recipient's name as entered in the recipient
 * information, splits it into sections based on spaces and
 * uses the last section as the last name.
 *
 */
export interface LastName {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId`
     * must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * This tab offers a list of options to choose from.
 * The `listItems`
 * property contains a list of
 * [`listItem`](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/listItem)
 * objects to specify the selectable options.
 *
 */
export interface List {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property
     * for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used,
     * the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property
     * that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The list of values that can be selected by senders. The list values are separated by semi-colons. Example: [one;two;three;four]
     *
     * Maximum Length of listItems:  2048 characters.
     * Maximum Length of items in the list: 100 characters.
     *
     */
    listItems?: ListItem[];
    /**
     * The value in the list that is selected by default.
     */
    listSelectedValue?: string;
    /**
     * Metadata that indicates whether the `listSelectedValue` property is editable.
     */
    listSelectedValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and shared is true, information must be entered in this field to complete the envelope.
     */
    requireAll?: string;
    /**
     * Metadata that indicates whether the `requireAll` property is editable.
     */
    requireAllMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender must populate the tab before an envelope can be sent using the template.
     *
     * This value tab can only be changed by modifying (PUT) the template.
     *
     * Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
     */
    senderRequired?: string;
    /**
     * Metadata that indicates whether the `senderRequired` property is editable.
     */
    senderRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The value to use when the item is selected.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * This object represents a list custom field from which envelope creators and senders can select custom data.
 */
export interface ListCustomField {
    /**
     * If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
     */
    configurationType?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The id of the custom field.
     */
    fieldId?: string;
    /**
     * An array of strings that represents the options in a list.
     *
     * Maximum length: 2048 characters, but each individual option string can only be a maximum of 100 characters.
     */
    listItems?: string[];
    /**
     * The name of the custom field.
     */
    name?: string;
    /**
     * When set to **true**, senders are required to select an option from the list before they can send the envelope.
     */
    required?: string;
    /**
     * When set to **true**, the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope.
     */
    show?: string;
    /**
     * The value of the custom field. This is the value that the user who creates or sends the envelope selects from the list.
     */
    value?: string;
}

/**
 * One of the selectable items
 * in the `listItems` property
 * of a [`list`](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/list) tab.
 */
export interface ListItem {
    /**
     * When set to **true**, indicates that this item is the default selection shown to a signer.
     *
     * Only one selection can be set as the default.
     */
    selected?: string;
    /**
     * Metadata that indicates whether the `selected` property is editable.
     */
    selectedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the text that is shown in the dropdown list.
     */
    text?: string;

    textMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value that is used when the list item is selected.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface LocalePolicy {
    addressFormat?: string;

    addressFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    allowRegion?: string;

    calendarType?: string;

    calendarTypeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    cultureName?: string;

    cultureNameMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The currency code for the account, based on the [ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).
     */
    currencyCode?: string;
    /**
     * Metadata that indicates whether the `currencyCode` property is editable.
     */
    currencyCodeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    currencyNegativeFormat?: string;

    currencyNegativeFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    currencyPositiveFormat?: string;

    currencyPositiveFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    customDateFormat?: string;

    customSignDateFormat?: string;

    customSignTimeFormat?: string;

    customTimeFormat?: string;

    dateFormat?: string;

    dateFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    effectiveAddressFormat?: string;

    effectiveCalendarType?: string;

    effectiveCurrencyCode?: string;

    effectiveCurrencyNegativeFormat?: string;

    effectiveCurrencyPositiveFormat?: string;

    effectiveCustomDateFormat?: string;

    effectiveCustomTimeFormat?: string;

    effectiveDateFormat?: string;

    effectiveInitialFormat?: string;

    effectiveNameFormat?: string;

    effectiveTimeFormat?: string;

    effectiveTimeZone?: string;

    initialFormat?: string;

    initialFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    nameFormat?: string;

    nameFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The format for the signature date. Valid values are:
     *
     * - `d/M/yyyy`
     * - `dd-MM-yy`
     * - `dd-MMM-yy`
     * - `dd-MM-yyyy`
     * - `dd.MM.yyyy`
     * - `dd-MMM-yyyy`
     * - `dd MMMM yyyy`
     * - `M/d/yyyy`
     * - `MM-dd-yyyy`
     * - `MM/dd/yyyy`
     * - `MM/dd/yy`
     * - `MMM-dd-yyyy`
     * - `MMM d, yyyy`
     * - `MMMM d, yyyy`
     * - `yyyy-MM-dd`
     * - `yyyy-MMM-dd`
     * - `yyyy/MM/dd`
     * - `yyyy MMMM d`
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signDateFormat?: string;
    /**
     * Metadata that indicates whether the `signDateFormat` property is editable.
     *
     */
    signDateFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The format for the signature time. Valid values are:
     *
     * - `none`
     * - `HH:mm`
     * - `h:mm`
     * - `HH:mm:ss`
     * - `h:mm:ss`
     *
     */
    signTimeFormat?: string;
    /**
     * Metadata that indicates whether the `signTimeFormat` property is editable.
     *
     */
    signTimeFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    timeFormat?: string;

    timeFormatMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    timeZone?: string;

    timeZoneMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}

export interface LocalePolicyTab {
    addressFormat?: string;

    calendarType?: string;

    cultureName?: string;

    currencyNegativeFormat?: string;

    currencyPositiveFormat?: string;

    customDateFormat?: string;

    customTimeFormat?: string;

    dateFormat?: string;

    initialFormat?: string;

    nameFormat?: string;

    timeFormat?: string;

    timeZone?: string;
}

export interface LockInformation {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The number of seconds to lock the envelope for editing.  This value must be greater than `0` seconds.
     */
    lockDurationInSeconds?: string;
    /**
     * The human-readable name of the application that is locking the envelope or template. This value displays to the user in error messages when lock conflicts occur.
     */
    lockedByApp?: string;
    /**
     * A complex type containing information about the user that has the envelope or template locked.
     */
    lockedByUser?: UserInfo;
    /**
     * The date and time that the lock expires.
     */
    lockedUntilDateTime?: string;
    /**
     * A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock.
     */
    lockToken?: string;
    /**
     * The type of lock.  Currently `edit` is the only supported type.
     */
    lockType?: string;
    /**
     * When set to **true**, a scratchpad is used to edit information.
     *
     */
    useScratchPad?: string;
}
/**
 * This request object contains information about the lock that you want to create or update.
 */
export interface LockRequest {
    /**
     * The number of seconds to lock the envelope for editing.  This value must be greater than `0` seconds.
     */
    lockDurationInSeconds?: string;
    /**
     * The human-readable name of the application that is locking the envelope or template. This value displays to the user in error messages when lock conflicts occur.
     */
    lockedByApp?: string;
    /**
     * The type of lock.  Currently `edit` is the only supported type.
     */
    lockType?: string;
    /**
     * The [password for the template](https://support.docusign.com/en/guides/ndse-user-guide-template-passwords). If you are using a lock for a template that
     * has a password or an envelope that is based on a template that has a password, you must enter the `templatePassword` to save the changes.
     */
    templatePassword?: string;
    /**
     * When set to **true**, a scratchpad is used to edit information.
     *
     */
    useScratchPad?: string;
}

export interface LoginAccount {
    /**
     * The account ID associated with the envelope.
     */
    accountId?: string;
    /**
     * The GUID associated with the account ID.
     */
    accountIdGuid?: string;
    /**
     * The URL that should be used for successive calls to this account. It includes the protocal (https), the DocuSign server where the account is located,
     * and the account number. Use this Url to make API calls against this account. Many of the API calls provide Uri's that are relative to this baseUrl.
     */
    baseUrl?: string;
    /**
     * The email address for the user.
     */
    email?: string;
    /**
     * This value is true if this is the default account for the user, otherwise false is returned.
     */
    isDefault?: string;
    /**
     * A list of settings on the acccount that indicate what features are available.
     */
    loginAccountSettings?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
    /**
     * A list of user-level settings that indicate what user-specific features are available.
     */
    loginUserSettings?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
    /**
     * The name associated with the account.
     */
    name?: string;
    /**
     * An optional descirption of the site that hosts the account.
     */
    siteDescription?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
    /**
     * The name of this user as defined by the account.
     */
    userName?: string;
}

export interface LoginInformation {
    /**
     * Contains a token that can be used for authentication in API calls instead of using the user name and password.
     */
    apiPassword?: string;
    /**
     * The list of accounts that authenticating user is a member of.
     */
    loginAccounts?: LoginAccount[];
}

export interface MatchBox {
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Specifies the page number on which the tab is located.
     * Must be 1 for supplemental documents.
     *
     */
    pageNumber?: string;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
}

/**
 * Information about items shared among groups.
 */
export interface MemberGroupSharedItem {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The group sharing the item.
     */
    group?: /* This object contains information about a group. */ Group;
    /**
     * How the item is shared. One of:
     *
     *
     * - `not_shared`: The item is not shared.
     *
     * - `shared_to`: The item is shared.
     */
    shared?: string;
}

/**
 * Information about shared items.
 */
export interface MemberSharedItems {
    /**
     * List of information about shared envelopes.
     */
    envelopes?: /* Information about the shared item. */ SharedItem[];
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * List of information about shared folders.
     */
    folders?: FolderSharedItem[];
    /**
     * List of information about shared templates.
     */
    templates?: /* Information about shared templates. */ TemplateSharedItem[];
    /**
     * Information about the user requesting sharing information.
     */
    user?: UserInfo;
}

/**
 * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
 */
export interface MergeField {
    /**
     * When **true**, the sender can modify the value of the `mergeField` tab during the sending process.
     */
    allowSenderToEdit?: string;
    /**
     * Metadata that indicates if the sender can edit the `allowSenderToEdit` property.
     */
    allowSenderToEditMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
     */
    configurationType?: string;
    /**
     * Metadata that indicates if the sender can edit the `configurationType` property.
     */
    configurationTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Sets the object associated with the custom tab. Currently this is the Salesforce object.
     */
    path?: string;
    /**
     * Reserved for DocuSign.
     */
    pathExtended?: PathExtendedElement[];
    /**
     * Reserved for DocuSign.
     */
    pathExtendedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `path` property is editable.
     *
     */
    pathMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the row number in a Salesforce table that the merge field value corresponds to.
     */
    row?: string;
    /**
     * Metadata that indicates whether the `row` property is editable.
     *
     */
    rowMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When **true**, data entered into the merge field during Signing will update the mapped Salesforce field.
     */
    writeBack?: string;
    /**
     * Metadata that indicates if the sender can edit the `writeBack` property.
     */
    writeBackMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface MobileNotifierConfiguration {
    deviceId?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The Platform of the client application
     */
    platform?: string;
}

export interface MobileNotifierConfigurationInformation {
    mobileNotifierConfigurations?: MobileNotifierConfiguration[];
}

/**
 * Describes information
 * about the `total` of a payment.
 *
 */
export interface Money {
    /**
     * The total payment amount
     * in the currency's base unit.
     * For example, for USD
     * the base currency is one cent.
     *
     */
    amountInBaseUnit?: string;
    /**
     * The three-letter
     * [ISO 4217][ISO4217] currency code for the payment.
     *
     * For example:
     *
     * * AUD Australian dollar
     * * CAD Canadian dollar
     * * EUR Euro
     * * GBP Great Britain pound
     * * USD United States dollar
     *
     * This is a read-only property.
     *
     * [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
     *
     */
    currency?: string;
    /**
     * The payment amount as displayed
     * in the `currency`.
     *
     * For example, if the payment amount
     * is USD 12.59,
     * the `amountInBaseUnit` is 1259 (cents),
     * and the displayed amount is `$12.59 USD`.
     *
     * This is a read-only property.
     *
     */
    displayAmount?: string;
}

/**
 * A name-value pair that describes an item and provides a value for the item.
 */
export interface NameValue {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The name of the item.
     */
    name?: string;
    /**
     * The initial value of the item.
     */
    originalValue?: string;
    /**
     * The current value of the item.
     */
    value?: string;
}

export interface NewAccountDefinition {
    /**
     * The account name for the new account.
     */
    accountName?: string;
    /**
     * The list of
     * [account settings][accountsettings]
     * that determine
     * the features available for the account.
     * Note that some features are determined
     * by the plan used to create the account and cannot be overridden.
     *
     * [accountsettings]: https://developers.docusign.com/esign-rest-api/reference/Accounts/Accounts/create/#account-settings
     *
     */
    accountSettings?: /* Contains account settings information. Used in requests to set property values. Used in responses to report property values. */ AccountSettingsInformation;
    /**
     * A complex type that contains the following information for the new account: `Street1`, `Street2`, `City`, `State`, `Zip`, `Phone`, and `Fax`.
     */
    addressInformation?: /* Contains information about the address associated with the account. */ AccountAddress;
    /**
     * A complex type that has information about the credit card used to pay for this account.
     */
    creditCardInformation?: /* This object contains information about a credit card that is associated with an account. */ CreditCardInformation;
    /**
     * Information about the bank that processes direct debits for the payment plan.
     */
    directDebitProcessorInformation?: /* Contains information about a bank that processes a customer's direct debit payments. */ DirectDebitProcessorInformation;
    /**
     * The Distributor Code that you received from DocuSign.
     */
    distributorCode?: string;
    /**
     * The password for the `distributorCode`.
     */
    distributorPassword?: string;
    /**
     * Reserved for DocuSign.
     */
    envelopePartitionId?: string;
    /**
     * A complex type with the initial user information for the new account. Note that some user information is set internally based on the plan and cannot be overridden.
     */
    initialUser?: UserInformation;
    /**
     * The payment method used for the billing plan. Valid values are:
     *
     * - `NotSupported`
     * - `CreditCard`
     * - `PurchaseOrder`
     * - `Premium`
     * - `Freemium`
     * - `FreeTrial`
     * - `AppStore`
     * - `DigitalExternal`
     * - `DirectDebit`
     */
    paymentMethod?: string;
    /**
     * Information about the entity that processes payments for the billing plan.
     */
    paymentProcessorInformation?: PaymentProcessorInformation;
    /**
     * An object used to identify the features and attributes of the account being created.
     */
    planInformation?: /* An object used to identify the features and attributes of the account being created. */ PlanInformation;
    /**
     * A complex type that contains properties for entering referral and discount information.
     */
    referralInformation?: ReferralInformation;
    /**
     * Contains properties that map a DocuSign user to a social account such as Facebook or Yahoo.
     */
    socialAccountInformation?: SocialAccountInformation;
}

export interface NewAccountSummary {
    /**
     * The account ID associated with the envelope.
     */
    accountId?: string;
    /**
     * The GUID associated with the account ID.
     */
    accountIdGuid?: string;
    /**
     * The account name for the new account.
     */
    accountName?: string;
    /**
     * Contains a token that can be used for authentication in API calls instead of using the user name and password.
     */
    apiPassword?: string;
    /**
     * The URL that should be used for successive calls to this account. It includes the protocal (https), the DocuSign server where the account is located,
     * and the account number. Use this Url to make API calls against this account. Many of the API calls provide Uri's that are relative to this baseUrl.
     */
    baseUrl?: string;

    billingPlanPreview?: /* Information used to provide a preview of a billing plan. */ BillingPlanPreview;
    /**
     * Specifies the user ID of the new user.
     */
    userId?: string;
}

/**
 * object representing a new user.
 */
export interface NewUser {
    /**
     * Contains a token that can be used for authentication in API calls instead of using the user name and password.
     */
    apiPassword?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;

    email?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The ID of the permission profile. Possible values include:
     *
     * - `2301416` (for the `DocuSign Viewer` profile)
     * - `2301415` (for the `DocuSign Sender` profile)
     * - `2301414` (for the `Account Administrator` profile)
     *
     * In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
     */
    permissionProfileId?: string;
    /**
     * The name of the account permission profile.
     *
     * Example: `Account Administrator`
     */
    permissionProfileName?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
    /**
     * Specifies the user ID for the new user.
     */
    userId?: string;
    /**
     * The name of the user.
     */
    userName?: string;
    /**
     * Status of the user's account. One of:
     *
     * - `ActivationRequired`
     * - `ActivationSent`
     * - `Active`
     * - `Closed`
     * - `Disabled`
     *
     */
    userStatus?: string;
}

export interface NewUsersDefinition {
    /**
     * A list of one or more new users.
     */
    newUsers?: UserInformation[];
}

/**
 * object representing a summary of data for new users.
 */
export interface NewUsersSummary {
    /**
     * A list of one or more new users.
     */
    newUsers?: /* object representing a new user. */ NewUser[];
}

/**
 * A tab that alerts notary recipients that
 * they must take action on the page.
 * Only one notarize tab can appear on a page.
 */
export interface Notarize {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The page number being accessed.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface Notary {
    /**
     * The creation date of the account in UTC timedate format.
     */
    createdDate?: string;

    enabled?: string;

    searchable?: string;

    userInfo?: UserInformation;
}

/**
 * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
 *
 * It describes information about the notary host.
 * The following information is required
 * when using the eNotary in-person signing flow:
 *
 * * `name`: Specifies the notary's full legal name.
 * * `email`: Specifies the notary's email address.
 * * `recipientId`: A unique ID number for the notary signing host.
 *
 */
export interface NotaryHost {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Metadata that indicates whether the `accessCode` property is editable. Read only.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
     */
    addAccessCodeToEmail?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app.
     * Authenticating the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**,
     * an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group,
     * only the user who previously completed may sign again. Read only.
     */
    completedCount?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status
     * but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * The reason the recipient declined the document. Read only.
     */
    declinedReason?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient.
     * For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * The notary's email address.
     *
     * Maximum Length: 100 characters.
     *
     */
    email?: string;
    /**
     * Metadata that indicates whether the `email` property is editable. Read only.
     */
    emailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients, the other recipients will
     * inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign,
     * just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions.
     * When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated
     * by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded
     * signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending
     * application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,
     * the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use.
     * In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.)
     * to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process
     * for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`,
     * `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are
     * enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;

    hostRecipientId?: string;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication
     * types appear in the web console sending export interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $.
     * To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a
     * phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default
     * settings for the recipient's account.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * The notary's full legal name.
     *
     * Maximum Length: 100 characters.
     *
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A note sent to the notary in the signing email.
     * This note is visible only to this notary.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * Metadata that indicates whether the `note` property is editable. Read only.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details. It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     *
     *
     */
    phoneAuthentication?: RecipientPhoneAuthentication;
    /**
     * Reserved for DocuSign.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Information about the recipient's authentication status. Read only.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add
     * information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order,
     * set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     */
    requireIdLookup?: string;
    /**
     * Metadata that indicates whether the `requireIdLookup` property is editable. Read only.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    signedDateTime?: string;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     * For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients.
     * However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * Metadata that indicates whether the `signingGroupId` property is editable. Read only.
     */
    signingGroupIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
    /**
     * A complex type that contains information about users in the signing group.
     */
    signingGroupUsers?: UserInfo[];
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the element `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * The recipient's status. Read only.
     *
     * Possible values:
     *
     * - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the
     * bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
     * - `declined`: The recipient declined to sign the document(s) in the envelope.
     * - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
     * - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status
     * automatically switches to `completed`.
     */
    status?: string;
    /**
     * The code associated with the recipient's status. Read only.
     */
    statusCode?: string;
    /**
     * When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
     */
    suppressEmails?: string;
    /**
     * A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data.
     * They may also display data to the recipients.
     */
    tabs?: EnvelopeRecipientTabs;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * The total number of tabs in the documents. Read only.
     */
    totalTabCount?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}

export interface NotaryJournal {
    /**
     * The creation date of the account in UTC timedate format.
     */
    createdDate?: string;

    documentName?: string;

    jurisdiction?: Jurisdiction;

    notaryJournalId?: string;

    notaryJournalMetaData?: NotaryJournalMetaData;
    /**
     * The in-person signer's full legal name.
     *
     * Required when `inPersonSigningType` is `inPersonSigner`.
     * For eNotary flow, use `name` instead.
     *
     * Maximum Length: 100 characters.
     *
     */
    signerName?: string;
}

export interface NotaryJournalCredibleWitness {
    /**
     * The user's address.
     */
    address?: string;

    name?: string;

    signatureImage?: string;
}

export interface NotaryJournalList {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;

    notaryJournals?: NotaryJournal[];
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface NotaryJournalMetaData {
    comment?: string;

    credibleWitnesses?: NotaryJournalCredibleWitness[];

    signatureImage?: string;

    signerIdType?: string;
}

export interface NotaryJournals {
    /**
     * The creation date of the account in UTC timedate format.
     */
    createdDate?: string;

    documentName?: string;

    jurisdiction?: Jurisdiction;

    notaryJournalId?: string;

    notaryJournalMetaData?: NotaryJournalMetaData;
    /**
     * The in-person signer's full legal name.
     *
     * Required when `inPersonSigningType` is `inPersonSigner`.
     * For eNotary flow, use `name` instead.
     *
     * Maximum Length: 100 characters.
     *
     */
    signerName?: string;
}

export interface NotaryJurisdiction {
    commissionExpiration?: string;

    commissionId?: string;

    county?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;

    jurisdiction?: Jurisdiction;

    registeredName?: string;

    sealType?: string;
}

export interface NotaryJurisdictionList {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;

    notaryJurisdictions?: NotaryJurisdiction[];
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface NotaryResult {
    jurisdictions?: Jurisdiction[];

    notary?: Notary;
}

/**
 * A tab that displays additional information, in the form of a
 * note, for the recipient.
 *
 */
export interface Note {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property
     * for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * A complex element that specifies the notification settings for the envelope.
 */
export interface Notification {
    /**
     * A complex element that specifies the expiration settings for the envelope.
     */
    expirations?: /* A complex element that specifies the expiration settings for the envelope. */ Expirations;
    /**
     * A complex element that specifies reminder settings for the envelope
     */
    reminders?: /* A complex element that specifies reminder settings for the envelope. */ Reminders;
    /**
     * When set to **true**, the account default notification settings are used for the envelope, overriding the reminders and expirations settings. When set to **false**,
     * the reminders and expirations settings specified in this request are used.
     */
    useAccountDefaults?: string;
}

/**
 * Contains details about the default notification settings for the envelope notifications that senders and signers receive.
 */
export interface NotificationDefaultSettings {
    /**
     *
     * An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true,
     * the user will receive those types of email notifications from DocuSign.
     *
     * The user inherits the default account sender email notification settings when the user is created. The email notifications are:
     *
     * * envelopeComplete
     * * changedSigner
     * * senderEnvelopeDeclined
     * * withdrawnConsent
     * * recipientViewed
     * * deliveryFailed
     *
     */
    senderEmailNotifications?: /* Contains the settings for the email notifications that senders receive about the envelopes that they send. */ SenderEmailNotifications;
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives
     * those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    signerEmailNotifications?: /* An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is
        set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
        */ SignerEmailNotifications;
}

/**
 * The `NotificationDefaults` resource provides methods that enable you to manage the default notifications for envelopes.
 */
export interface NotificationDefaults {
    /**
     * The default notification settings for envelopes sent by using the console.
     */
    apiEmailNotifications?: /* Contains details about the default notification settings for the envelope notifications that senders and signers receive. */ NotificationDefaultSettings;
    /**
     * The default notification settings for envelopes sent by using the API.
     */
    emailNotifications?: /* Contains details about the default notification settings for the envelope notifications that senders and signers receive. */ NotificationDefaultSettings;
}

/**
 * A tab that allows the recipient to enter numbers and decimal
 * (.) points.
 *
 */
export interface Number {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property
     * for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are
     * hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document
     * remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * Metadata that indicates whether the `concealValueOnDocument` property is editable.
     */
    concealValueOnDocumentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the
     * custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as
     * much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * Metadata that indicates whether the `disableAutoSize` property is editable.
     */
    disableAutoSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that
     * specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the formula
     * for calculating the value of
     * this tab.
     *
     * Use a tab's `tabLabel`,
     * enclosed in brackets,
     * to refer to it.
     *
     * For example,
     * you want to present the total cost
     * of two items, tax included.
     *
     * The cost of each item is stored
     * in number tabs labeled Item1 and Item2.
     * The tax rate is in a number tab
     * labeled TaxRate.
     *
     * The formula string for this property
     * would be:
     * `([Item1] + [Item2]) * (1 + [TaxRate])`
     *
     * See [Calculated Fields][calculatedfields]
     * in the DocuSign Support Center
     * to learn more about formulas.
     *
     * Maximum Length: 2000 characters
     *
     * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *
     */
    formula?: string;
    /**
     * Metadata indicating if the sender can edit the `formula` property.
     */
    formulaMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number.
     */
    isPaymentAmount?: string;
    /**
     * Metadata that indicates whether the `isPaymentAmount` property is editable.
     */
    isPaymentAmountMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional value that describes the maximum length of the property when the property is a string.
     */
    maxLength?: string;
    /**
     * Metadata that indicates whether the `maxLength` property is editable.
     */
    maxLengthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The initial value of the tab when it was sent to the recipient.
     */
    originalValue?: string;
    /**
     * Metadata that indicates whether the `originalValue` property is editable.
     */
    originalValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and shared is true, information must be entered in this field to complete the envelope.
     */
    requireAll?: string;
    /**
     * Metadata that indicates whether the `requireAll` property is editable.
     */
    requireAllMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender must populate the tab before an envelope can be sent using the template.
     *
     * This value tab can only be changed by modifying (PUT) the template.
     *
     * Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
     */
    senderRequired?: string;
    /**
     * Metadata that indicates whether the `senderRequired` property is editable.
     */
    senderRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * Metadata that indicates whether the `validationMessage` property is editable.
     */
    validationMessageMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A regular expression used to validate input for the tab.
     */
    validationPattern?: string;
    /**
     * Metadata that indicates whether the `validationPattern` property is editable.
     */
    validationPatternMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface OauthAccess {
    /**
     * Access token information.
     */
    access_token?: string;
    /**
     * A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size.
     */
    data?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];

    expires_in?: string;

    refresh_token?: string;
    /**
     * Must be set to "api".
     */
    scope?: string;

    token_type?: string;
}

export interface OcrRequest {
    ocrLanguage?: string;

    pageSelection?: string;

    setPageOrientation?: string;

    showFrames?: string;

    showText?: string;

    skipPagesHavingExistingExtractableText?: string;
}

/**
 * Description of a page of a document.
 */
export interface Page {
    /**
     * The number of dots per inch used for the page image.
     */
    dpi?: string;
    /**
     * If an error occurs, this property describes the error.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The height of the page in pixels.
     */
    height?: string;
    /**
     * The number of image bytes.
     */
    imageBytes?: string;
    /**
     * The MIME type.
     */
    mimeType?: string;
    /**
     * The id of the page.
     */
    pageId?: string;
    /**
     * The sequence of the page in the document, or page number.
     */
    sequence?: string;
    /**
     * The width of the page in pixels.
     */
    width?: string;
}

export interface PageImages {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * An array of page objects.
     */
    pages?: /* Description of a page of a document. */ Page[];
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface PageRequest {
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * Sets the direction the page image is rotated. The possible settings are: left or right
     */
    rotate?: string;
}

export interface PageSize {
    pageHeight?: string;

    pageWidth?: string;
}

export interface PathExtendedElement {
    name?: string;

    type?: string;

    typeName?: string;
}

export interface PayPalLegacySettings {
    /**
     * The three-letter
     * [ISO 4217][ISO4217] currency code for the payment.
     *
     * For example:
     *
     * * AUD Australian dollar
     * * CAD Canadian dollar
     * * EUR Euro
     * * GBP Great Britain pound
     * * USD United States dollar
     *
     * This is a read-only property.
     *
     * [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
     *
     */
    currency?: string;

    partner?: string;
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * The name of the user.
     */
    userName?: string;

    vendor?: string;
}

/**
 * When a formula tab
 * has a `paymentDetails` property,
 * the formula tab
 * is a payment item.
 * See [Requesting Payments Along with Signatures][paymentguide]
 * in the DocuSign Support Center
 * to learn more about payments.
 *
 * [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
 *
 */
export interface PaymentDetails {
    /**
     * An array of accepted payment methods:
     *
     * * `CreditCard`
     * * `ApplePay`
     * * `AndroidPay`
     * * `BankAccount`
     *
     * For example, if you only accept credit cards and ACH transfers, you would set this property to:
     *
     * `'["BankAccount", "CreditCard"]'`
     *
     * Do not specify `BankAccount` (ACH) if you are also using in-person signing.
     *
     */
    allowedPaymentMethods?: string[];
    /**
     * The GUID set by the payment gateway (such as Stripe) that identifies a transaction. The `chargeId` is created when authorizing a payment and must be referenced when completing a payment.
     */
    chargeId?: string;
    /**
     * Specifies the three-letter
     * [ISO 4217][ISO4217] currency code for the payment.
     *
     * Supported currencies are:
     *
     * * AUD: Australian dollar
     * * CAD: Canadian dollar
     * * EUR: Euro
     * * GBP: Great Britain pound
     * * USD: United States dollar
     *
     * Specifying any other ISO 4217 code for payments is an error.
     *
     * [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
     *
     */
    currencyCode?: string;
    /**
     * Metadata that indicates whether the `currencyCode` property is editable.
     */
    currencyCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The customer ID.
     */
    customerId?: string;
    /**
     * This is a sender-defined field that passes any extra metadata about the payment that will show up in the Authorize.net transaction under **Description**
     * in the merchant gateway portal. The custom metadata will be recorded in downloaded Authorize.net reports.
     *
     * The following example shows what the **Description** field of the transaction will look like:
     *
     * `<envelopeID>, <customMetadata>`
     */
    customMetadata?: string;
    /**
     * A sender-defined field that specifies whether custom metadata is required for the transaction. When set to **true**, custom metadata is required.
     * This property only applies if you are using an Authorize.net payment gateway account.
     */
    customMetadataRequired?: boolean;
    /**
     * A GUID that identifies the payment gateway
     * connected to the sender's DocuSign account.
     *
     * There is no public API
     * for connecting payment gateway accounts
     * You must connect and manage payment gateway accounts
     * through the DocuSign Admin console
     * and through your chosen payment gateway.
     *
     * You can get the gateway account ID
     * in the Payments section
     * of the DocuSign Admin console.
     *
     *
     * [paymentgateways]:  https://support.docusign.com/en/guides/managing-payment-gateways
     *
     */
    gatewayAccountId?: string;
    /**
     * Metadata that indicates whether the `gatewayAccountId` property is editable.
     */
    gatewayAccountIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Display name of the gateway connected to sender's Docusign account.
     *
     * Possible values are: Stripe, Braintree, Authorize.Net.
     */
    gatewayDisplayName?: string;
    /**
     * Name of the gateway connected to sender's DocuSign account.
     *
     * Possible values are:
     *
     * * `Stripe`
     * * `Braintree`
     * * `AuthorizeDotNet`
     */
    gatewayName?: string;
    /**
     * A payment formula can have
     * one or more line items
     * that provide detail about
     * individual items in a payment request.
     *
     * The list of line items
     * are returned as metadata
     * to the payment gateway.
     *
     */
    lineItems?: PaymentLineItem[];
    /**
     * This property specifies how the signer's collected payment details will be used.
     *
     * Possible values:
     *
     * - `authorize`: The payment details will be used to collect payment. This is the default value.
     * - `save`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway.
     * - `save_and_authorize`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway and will also be used to collect payment.
     */
    paymentOption?: string;
    /**
     * The payment source ID.
     */
    paymentSourceId?: string;
    /**
     * This read-only property describes the status of a payment.
     *
     * * `new`<br>
     *   This is a new payment request.
     *   The envelope has been created,
     *   but no payment authorizations have been made.
     *
     * * `auth_complete`<br>
     *   A recipient has entered their credit card information,
     *   but the envelope has not been completed.
     *   The card has not been charged.
     *
     * * `payment_complete`<br>
     *   The recipient's card has been charged.
     *
     * * `payment_capture_failed`<br>
     *   Final charge failed.
     *   This can happen when too much time
     *   passes between authorizing the payment
     *   and completing the document.
     *
     * * `future_payment_saved` <br>
     * The recipient's payment method has been saved to the sender's payment gateway.
     *
     */
    status?: string;
    /**
     * This read-only property
     * is a currency-formatted string
     * that represents the total
     * of all the line items.
     * The total is available
     * only after the document is completed,
     * which is when all recipients have paid and
     * have completed all required fields.
     *
     */
    total?: Money;
}

/**
 * This object contains details about a payment gateway account.
 */
export interface PaymentGatewayAccount {
    /**
     * When **true**, the sender can pass custom metadata about the payment to the payment gateway. You pass in this metadata on an EnvelopeRecipientTab, in the `customMetadata`
     * property under `paymentDetails`.
     *
     * For example, this property is set to **true** for the Authorize.net gateway by default. As a result, the extra metadata that you send displays for the Authorize.net transaction
     * in the merchant gateway portal under **Description**.
     *
     * **Note**: This property is read only and cannot be changed.
     */
    allowCustomMetadata?: boolean;
    /**
     * This property contains metadata about the payment gateway account's configuration such as the API key, `userId`, and `merchantId` details.
     */
    config?: PaymentGatewayAccountSetting;
    /**
     * A user-defined name for a connected gateway account.
     *
     * This name is used in the Admin panel in the list of connected accounts and in Tagger in the payment gateway selector.
     *
     * The human-readable version of `paymentGatewayAccountId`.
     */
    displayName?: string;
    /**
     * When **true**, the payment gateway account is enabled.
     */
    isEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    isLegacy?: string;
    /**
     * The UTC DateTime that the payment gateway account was last updated.
     */
    lastModified?: string;
    /**
     * Payment gateway used by the connected gateway account.
     * This is the name used by the API.
     * For a human-readable version use `paymentGatewayDisplayName`.
     *
     * Possible values are:
     *
     * * `Stripe`
     * * `Braintree`
     * * `AuthorizeDotNet`
     */
    paymentGateway?: string;
    /**
     * A GUID that identifies the payment gateway account. For a human-readable version use `displayName`.
     */
    paymentGatewayAccountId?: string;
    /**
     * The display name of the payment gateway that the connected gateway account uses.
     * This is the human-readable version of `paymentGateway`.
     *
     * Possible values are:
     *
     * * Stripe
     * * Braintree
     * * Authorize.Net
     */
    paymentGatewayDisplayName?: string;
    /**
     * Reserved for DocuSign.
     */
    payPalLegacySettings?: PayPalLegacySettings;
    /**
     * A list of ISO 4217 currency codes for the currencies that the payment gateway account supports.
     *
     * Examples:
     *
     * - `USD`
     * - `CAD`
     * - `EUR`
     * - `HKD`
     */
    supportedCurrencies?: string[];
    /**
     * An array of paymentMethodWithOptions objects that specify the payment methods that are available for the gateway.
     */
    supportedPaymentMethods?: string[];
    /**
     * An array of `paymentMethodWithOptions` objects that specify the payment methods that are available for the gateway, as well as the payment options that are compatible with
     * each payment method.
     */
    supportedPaymentMethodsWithOptions?: /* This object contains information about a payment method that the gateway accepts and the payment options that are compatible with it.
     */ PaymentMethodWithOptions[];
}

export interface PaymentGatewayAccountSetting {
    apiFields?: string;

    authorizationCode?: string;

    credentialStatus?: string;

    merchantId?: string;
}

/**
 * Information about a connected payment gateway account.
 */
export interface PaymentGatewayAccounts {
    /**
     * When **true**, the sender can pass custom metadata about the payment to the payment gateway. You pass in this metadata on an EnvelopeRecipientTab, in the `customMetadata`
     * property under `paymentDetails`.
     *
     * For example, this property is set to **true** for the Authorize.net gateway by default. As a result, the extra metadata that you send displays for the Authorize.net
     * transaction in the merchant gateway portal under **Description**.
     *
     * **Note**: This property is read only and cannot be changed.
     */
    allowCustomMetadata?: boolean;
    /**
     * This property contains metadata about the payment gateway account's configuration such as the API key, `userId`, and `merchantId` details.
     */
    config?: PaymentGatewayAccountSetting;
    /**
     * A user-defined name for a connected gateway account.
     *
     * This name is used in the Admin panel in the list of connected accounts and in Tagger in the payment gateway selector.
     *
     * The human-readable version of `paymentGatewayAccountId`.
     */
    displayName?: string;
    /**
     * When **true**, the payment gateway account is enabled.
     */
    isEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    isLegacy?: string;
    /**
     * The UTC DateTime that the payment gateway account was last updated.
     */
    lastModified?: string;
    /**
     * Payment gateway used by the connected gateway account.
     * This is the name used by the API.
     * For a human-readable version use `paymentGatewayDisplayName`.
     *
     * Possible values are:
     *
     * * `Stripe`
     * * `Braintree`
     * * `AuthorizeDotNet`
     */
    paymentGateway?: string;
    /**
     * A GUID that identifies the payment gateway account. For a human-readable version use `displayName`.
     */
    paymentGatewayAccountId?: string;
    /**
     * The display name of the payment gateway that the connected gateway account uses.
     * This is the human-readable version of `paymentGateway`.
     *
     * Possible values are:
     *
     * * Stripe
     * * Braintree
     * * Authorize.Net
     */
    paymentGatewayDisplayName?: string;
    /**
     * Reserved for DocuSign.
     */
    payPalLegacySettings?: PayPalLegacySettings;
    /**
     * A list of ISO 4217 currency codes for the currencies that the payment gateway account supports.
     *
     * Examples:
     *
     * - `USD`
     * - `CAD`
     * - `EUR`
     * - `HKD`
     */
    supportedCurrencies?: string[];
    /**
     * An array of paymentMethodWithOptions objects that specify the payment methods that are available for the gateway.
     */
    supportedPaymentMethods?: string[];
    /**
     * An array of `paymentMethodWithOptions` objects that specify the payment methods that are available for the gateway, as well as the payment options that are compatible
     * with each payment method.
     */
    supportedPaymentMethodsWithOptions?: /* This object contains information about a payment method that the gateway accepts and the payment options that are compatible with it.
     */ PaymentMethodWithOptions[];
}

/**
 * Holds information about connected payment accounts.
 */
export interface PaymentGatewayAccountsInfo {
    /**
     * A list of payment gateway accounts.
     */
    paymentGatewayAccounts?: /* This object contains details about a payment gateway account. */ PaymentGatewayAccount[];
}

/**
 * A line item describes details
 * about an individual line item
 * in a payment request.
 *
 *
 */
export interface PaymentLineItem {
    /**
     * This is a the `tabLabel`
     * that specifies the amount paid
     * for the line items.
     *
     *
     */
    amountReference?: string;
    /**
     * A sender-defined description of the line item.
     *
     */
    description?: string;
    /**
     * This is the sender-defined
     * SKU, inventory number, or other item code
     * for the line item.
     *
     */
    itemCode?: string;
    /**
     * This is a sender-defined
     * product name, service name,
     * or other designation for the line item.
     *
     */
    name?: string;
}

/**
 * This object contains information about a payment method that the gateway accepts and the payment options that are compatible with it.
 */
export interface PaymentMethodWithOptions {
    /**
     * The payment options that are compatible with the payment method in the `type` property.
     *
     * Possible values are:
     *
     * - `save`
     * - `save_and_authorize`
     * - `authorize`
     */
    supportedOptions?: string[];
    /**
     * The name of a payment method that the gateway accepts.
     *
     * Possible values are:
     *
     * - `CreditCard`
     * - `ApplePay`
     * - `AndroidPay`
     * - `BankAccount`
     * - `PayPal`
     */
    type?: string;
}

export interface PaymentProcessorInformation {
    /**
     * The mailing address associated with the payment processor.
     */
    address?: /* Contains address information. */ AddressInformation;
    /**
     * The id of the billing agreement.
     */
    billingAgreementId?: string;
    /**
     * The email address associated with the payment processor.
     */
    email?: string;
}

/**
 * Payments
 */
export interface Payments {
    /**
     * Reserved: TBD
     */
    amount?: string;
    /**
     * A sender-defined description of the line item.
     *
     */
    description?: string;

    paymentDate?: string;

    paymentId?: string;
    /**
     * When set to **true**, a PDF version of the invoice is available.
     *
     * To get the PDF, make the call again and change "Accept:" in the header to "Accept: application/pdf".
     */
    paymentNumber?: string;
}

/**
 * This object defines the account permissions for a profile that you can apply to a group of users.
 */
export interface PermissionProfile {
    /**
     * The username of the user who last modified the permission profile.
     */
    modifiedByUsername?: string;
    /**
     * The date and time when the permission profile was last modified.
     */
    modifiedDateTime?: string;
    /**
     * The ID of the permission profile. Possible values include:
     *
     * - `2301416` (for the `DocuSign Viewer` profile)
     * - `2301415` (for the `DocuSign Sender` profile)
     * - `2301414` (for the `Account Administrator` profile)
     *
     * In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
     */
    permissionProfileId?: string;
    /**
     * The name of the account permission profile.
     *
     * Example: `Account Administrator`
     */
    permissionProfileName?: string;
    /**
     * This object specifies the permissions that are associated with the account permission profile.
     */
    settings?: /* This object defines account permissions for users who are associated with the account permission profile.  */ AccountRoleSettings;
    /**
     * The total number of users in the group associated with the account permission profile.
     */
    userCount?: string;
    /**
     * A list of user objects containing information about the users who are associated with the account permission profile.
     */
    users?: UserInformation[];
}

/**
 * Contains details about the permission profiles associated with an account.
 */
export interface PermissionProfileInformation {
    /**
     * A complex type containing a collection of permission profiles.
     */
    permissionProfiles?: /* This object defines the account permissions for a profile that you can apply to a group of users. */ PermissionProfile[];
}

/**
 * An object used to identify the features and attributes of the account being created.
 */
export interface PlanInformation {
    /**
     * Reserved for DocuSign.
     */
    addOns?: /* Contains information about add ons. */ AddOn[];
    /**
     * Specifies the ISO currency code for the account.
     */
    currencyCode?: string;
    /**
     * Reserved for DocuSign.
     */
    freeTrialDaysOverride?: string;
    /**
     * Reserved for DocuSign.
     */
    planFeatureSets?: /* This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only. */ FeatureSet[];
    /**
     * DocuSign's id for the account plan.
     */
    planId?: string;

    recipientDomains?: RecipientDomain[];
}

export interface PolyLine {
    x1?: string;

    x2?: string;

    y1?: string;

    y2?: string;
}

/**
 * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
 */
export interface PolyLineOverlay {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property
     * for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains details about the style used for the strike through graphic.
     */
    graphicsContext?: GraphicsContext;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The type of overlay to use. The API currently supports only the `outline` overlay type.
     */
    overlayType?: string;
    /**
     * Metadata that indicates whether the `overlayType` property is editable.
     *
     */
    overlayTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number being accessed.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of `polyLine` objects that contain x- and y-coordinates representing the locations of the lines.
     */
    polyLines?: PolyLine[];
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, indicates that the tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * Contains details about a PowerForm.
 */
export interface PowerForm {
    /**
     * The id of the user who created the PowerForm.
     */
    createdBy?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;
    /**
     * The body of the email message sent to the recipients.
     *
     * Maximum length: 10000 characters.
     */
    emailBody?: string;
    /**
     * The subject line of the email message that is sent to all recipients.
     *
     * For information about adding merge field information to the email subject, see
     * [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
     *
     */
    emailSubject?: string;
    /**
     * An array containing PowerForm data.
     */
    envelopes?: Envelope[];
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The instructions that display on the landing page for the first recipient. These instructions are important if the recipient accesses the PowerForm
     * by a method other than email. If instructions are entered, they display as an introduction after the recipient accesses the PowerForm.  Limit: 2000 characters.
     */
    instructions?: string;
    /**
     * When **true**, indicates that the PowerForm is active and can be sent to recipients. This is the default value.
     *
     * When **false**, the PowerForm cannot be emailed or accessed by a recipient, even if they arrive at the PowerForm URL.
     *
     * If a recipient attempts to sign an inactive PowerForm, an error message informs the recipient that the document is not active and suggests that they contact the sender.
     *
     */
    isActive?: string;
    /**
     * The UTC DateTime when the PowerForm was last used.
     */
    lastUsed?: string;
    /**
     * The length of time before the same recipient can sign the same PowerForm. This property is used in combination with the `limitUseIntervalUnits` property.
     */
    limitUseInterval?: string;
    /**
     * When **true**, the `limitUseInterval` is enabled.
     */
    limitUseIntervalEnabled?: string;
    /**
     * The units associated with the `limitUseInterval`. Valid values are:
     *
     * - `minutes`
     * - `hours
     * - `days`
     * - `weeks`
     * - `months`
     *
     * For example, to limit a recipient to signing once per year, set the `limitUseInterval` to 365 and the `limitUseIntervalUnits` to `days`.
     *
     */
    limitUseIntervalUnits?: string;
    /**
     * When set to **true**, you can set a maximum number of uses for the PowerForm.
     */
    maxUseEnabled?: string;
    /**
     * The name of the PowerForm.
     */
    name?: string;
    /**
     * The id of the PowerForm.
     */
    powerFormId?: string;
    /**
     * The URL for the PowerForm.
     */
    powerFormUrl?: string;
    /**
     * An array of recipient objects that provides details about the recipients of the envelope.
     */
    recipients?: /* **Note**: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`),
        and omit personal details such as `email`. */ PowerFormRecipient[];
    /**
     * The sender's name.
     */
    senderName?: string;
    /**
     * The id of the sender.
     */
    senderUserId?: string;
    /**
     * The signing mode to use. Valid values are:
     *
     * - `email`: Verifies the recipient's identity using email authentication before the recipient can sign a document. The recipient enters their email address and then clicks
     * **Begin Signing** to begin the signing process. The system then sends an email message with a validation code for the PowerForm to the recipient.
     * If the recipient does not provide a valid email address, they cannot open and sign the document.
     * - `direct`: Does not require any verification. After a recipient enters their email address and clicks **Begin Signing**, a new browser tab opens
     * and the recipient can immediately begin the signing process. Because the recipient's identity is not verified by using email authentication,
     * we strongly recommend that you only use the `direct` signing mode when the PowerForm is accessible behind a secure portal where the recipient's
     * identity is already authenticated, or where another form of authentication is specified for the recipient in the DocuSign template (for example,
     * an access code, phone authentication, or ID check).
     *
     * **Note**: In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`.
     */
    signingMode?: string;
    /**
     * The id of the template used to create the PowerForm.
     */
    templateId?: string;
    /**
     * The name of the template used to create the PowerForm.
     */
    templateName?: string;
    /**
     * The number of times the PowerForm has been used.
     */
    timesUsed?: string;
    /**
     * The URI for the PowerForm.
     */
    uri?: string;
    /**
     * The number of times the PowerForm can still be used.
     */
    usesRemaining?: string;
}

/**
 * Data that recipients have entered in PowerForm fields.
 */
export interface PowerFormData {
    /**
     * The envelope ID of the envelope status that failed to post.
     */
    envelopeId?: string;
    /**
     * An array of powerform recipients.
     */
    recipients?: PowerFormFormDataRecipient[];
}

export interface PowerFormFormDataEnvelope {
    /**
     * The envelope's GUID.
     *
     * Example: `93be49ab-afa0-4adf-933c-f752070d71ec`
     */
    envelopeId?: string;
    /**
     * An array of recipient objects that provides details about the recipients of the envelope.
     */
    recipients?: PowerFormFormDataRecipient[];
}

export interface PowerFormFormDataRecipient {
    email?: string;

    formData?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
    /**
     * The name of the recipient.
     */
    name?: string;
    /**
     * The unique id for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
     */
    recipientId?: string;
}

/**
 * **Note**: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`),
 * and omit personal details such as `email`.
 */
export interface PowerFormRecipient {
    /**
     * (Optional) The access code that the recipient must enter to access the PowerForm.
     *
     * Maximum Length: 50 characters. The code must also conform to the account's access code format setting.
     *
     * If blank but the signer accessCode property is set in the envelope, then that value is used.
     *
     * If blank and the signer accessCode property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * When **true**, the `accessCode` property is locked and cannot be edited.
     */
    accessCodeLocked?: string;
    /**
     * When **true**, the recipient must enter the `accessCode` to access the PowerForm.
     */
    accessCodeRequired?: string;
    /**
     * The email address of the recipient.
     *
     * **Note**: For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.
     */
    email?: string;
    /**
     * When **true**, the recipient's email address is locked and cannot be edited.
     */
    emailLocked?: string;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses.
     * The names of these authentication types appear in the web console sending export interface in the Identify list for a recipient.
     * This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $.
     * To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to
     * add a phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Indicates if authentication is configured for the account. Valid values are:
     *
     * - `always`: Authentication checks are performed on every envelope.
     * - `never`: Authentication checks are not performed on any envelopes.
     * - `optional:` Authentication is configurable per envelope.
     */
    idCheckRequired?: string;
    /**
     * The name of the PowerForm recipient.
     *
     * **Note**: For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.
     */
    name?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed.
     * They don't need to sign, initial, date, or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information,
     * add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * The role associated with the recipient (for example, `Member`).
     *
     * This property is required when you are working with template recipients and PowerForm recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * When **true**, the template used to create the PowerForm requires ID lookup for the recipient.
     */
    templateRequiresIdLookup?: string;
    /**
     * When **true**, the `userName` property for the recipient is locked and cannot be edited.
     */
    userNameLocked?: string;
}

/**
 * This object includes information about the users who have sent PowerForms.
 */
export interface PowerFormSendersResponse {
    /**
     * The last index position in the result set.
     */
    endPosition?: number; // int32
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * An array of `userInfo` objects containing information about users who have sent PowerForms.
     */
    powerFormSenders?: UserInfo[];
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: number; // int32
    /**
     * The starting index position of the current result set.
     */
    startPosition?: number; // int32
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: number; // int32
}

/**
 * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
 */
export interface PowerForms {
    /**
     * The id of the user who created the PowerForm. This property is returned in a response only when you set the `include_created_by` query parameter to **true**.
     */
    createdBy?: string;
    /**
     * The date and time that the PowerForm was created.
     */
    createdDateTime?: string;
    /**
     * For a PowerForm that is sent by email, this is the body of the email message sent to the recipients.
     *
     * Maximum length: 10000 characters.
     */
    emailBody?: string;
    /**
     * Sets the envelope name for the envelopes that the PowerForm generates. One option is to make this property the same as the subject from the template.
     *
     * You can customize the subject line to include a recipient's name or email address by using merge fields. For information about adding merge fields to the email subject,
     * see [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
     *
     */
    emailSubject?: string;
    /**
     * An array of envelope objects that contain information about the envelopes that are associated with the PowerForm.
     */
    envelopes?: Envelope[];
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The instructions that display on the landing page for the first recipient. These instructions are important if the recipient
     * accesses the PowerForm by a method other than email. When you include instructions, they display as an introduction after the recipient accesses the PowerForm.
     */
    instructions?: string;
    /**
     * When **true**, indicates that the PowerForm is active and can be sent to recipients. This is the default value.
     *
     *
     * When **false**, the PowerForm cannot be emailed or accessed by a recipient, even if they arrive at the PowerForm URL.
     *
     * If a recipient attempts to sign an inactive PowerForm, an error message informs the recipient that the document is not active and suggests that they contact the sender.
     */
    isActive?: string;
    /**
     * The date and time that the PowerForm was last used.
     */
    lastUsed?: string;
    /**
     * The length of time before the same recipient can sign the same PowerForm again. This property is used in combination with the `limitUseIntervalUnits` property.
     */
    limitUseInterval?: string;
    /**
     * When **true**, the `limitUseInterval` is enabled.
     */
    limitUseIntervalEnabled?: string;
    /**
     * The units associated with the `limitUseInterval`. Valid values are:
     *
     * - `minutes`
     * - `hours`
     * - `days`
     * - `weeks`
     * - `months`
     *
     * For example, to limit a recipient to signing once per year, set the `limitUseInterval` to 365 and the `limitUseIntervalUnits` to `days`.
     *
     */
    limitUseIntervalUnits?: string;
    /**
     * When set to **true**, you can set a maximum number of uses for the PowerForm.
     */
    maxUseEnabled?: string;
    /**
     * The name of the PowerForm.
     */
    name?: string;
    /**
     * The id of the PowerForm.
     */
    powerFormId?: string;
    /**
     * The URL for the PowerForm.
     */
    powerFormUrl?: string;
    /**
     * An array of `powerFormRecipient` objects.
     *
     * **Note**: For self-service documents where you do not know who the recipients are in advance, you can enter generic information for the `role`
     * property and leave other details (such as `name` and `email`) blank.
     */
    recipients?: /* **Note**: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`),
        and omit personal details such as `email`. */ PowerFormRecipient[];
    /**
     * The name of the sender.
     *
     * **Note**: The default sender for a PowerForm is the PowerForm Administrator who created it.
     */
    senderName?: string;
    /**
     * The id of the sender.
     */
    senderUserId?: string;
    /**
     * The signing method to use. Valid values are:
     *
     * - `email`: This mode verifies the recipient's identity by using email authentication before the recipient can sign a document.
     *
     * - `direct`: This mode does not require any verification. We recommend that you use this signing method only when another form of authentication is in use.
     *
     * **Note**: In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`.
     *
     * For more information about signing modes, see the [overview of the Create method](https://developers.docusign.com/esign-rest-api/reference/PowerForms/PowerForms/create).
     */
    signingMode?: string;
    /**
     * The id of the template used to create the PowerForm.
     */
    templateId?: string;
    /**
     * The name of the template used to create the PowerForm.
     */
    templateName?: string;
    /**
     * The number of times the PowerForm has been used.
     */
    timesUsed?: string;
    /**
     * The URI for the PowerForm.
     */
    uri?: string;
    /**
     * The number of times that the PowerForm can still be used. If no use limit is set, the value is `Unlimited`.
     */
    usesRemaining?: string;
}

export interface PowerFormsFormDataResponse {
    /**
     * An array containing PowerForm data.
     */
    envelopes?: PowerFormFormDataEnvelope[];
}

export interface PowerFormsRequest {
    /**
     * An array of PowerForm objects.
     */
    powerForms?: /* Contains details about a PowerForm. */ PowerForm[];
}

/**
 * A list of PowerForms.
 */
export interface PowerFormsResponse {
    /**
     * The last index position in the result set.
     */
    endPosition?: number; // int32
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * An array of PowerForm objects.
     */
    powerForms?: /* Contains details about a PowerForm. */ PowerForm[];
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: number; // int32
    /**
     * The starting index position of the current result set.
     */
    startPosition?: number; // int32
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: number; // int32
}

export interface ProofServiceResourceToken {
    ResourceToken?: string;
}

export interface ProofServiceViewLink {
    ViewLink?: string;
}

/**
 * Metadata about a property.
 */
export interface PropertyMetadata {
    /**
     * An array of option strings supported by this setting.
     */
    options?: string[];
    /**
     * Indicates whether the property is editable. Valid values are:
     *
     * - `editable`
     * - `read_only`
     */
    rights?: string;
}

export interface Province {
    isoCode?: string;

    name?: string;
}

export interface ProvisioningInformation {
    defaultConnectionId?: string;

    defaultPlanId?: string;
    /**
     * The code that identifies the billing plan groups and plans for the new account.
     */
    distributorCode?: string;
    /**
     * The password for the `distributorCode`.
     */
    distributorPassword?: string;

    passwordRuleText?: string;

    planPromotionText?: string;

    purchaseOrderOrPromAllowed?: string;
}

export interface PurchasedEnvelopesInformation {
    /**
     * The total amount of the purchase.
     */
    amount?: string;
    /**
     * The AppName of the client application.
     */
    appName?: string;
    /**
     * The currency code for the account, based on the [ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).
     */
    currencyCode?: string;
    /**
     * The Platform of the client application
     */
    platform?: string;
    /**
     * The Product ID from the AppStore.
     */
    productId?: string;
    /**
     * The quantity of envelopes to add to the account.
     */
    quantity?: string;
    /**
     * The encrypted Base64 encoded receipt data.
     */
    receiptData?: string;
    /**
     * The name of the AppStore.
     */
    storeName?: string;
    /**
     * Specifies the Transaction ID from the AppStore.
     */
    transactionId?: string;
}

/**
 * One of the selectable radio buttons
 * in the `radios` property
 * of a [`radioGroup`](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radioGroup) tab.
 *
 */
export interface Radio {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the page number on which the tab is located.
     * Must be 1 for supplemental documents.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the radio button is selected.
     */
    selected?: string;
    /**
     * Metadata that indicates whether the `selected` property is editable.
     */
    selectedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The status of the item.
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * This group tab is used to place radio buttons on a document.
 * The `radios` property
 * contains a list of
 * [`radio`](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radio)
 * objects  associated with the group. Only one radio button can
 * be selected in a group.
 *
 */
export interface RadioGroup {
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.
     */
    groupName?: string;
    /**
     * Metadata that indicates whether the `groupName` property is editable.
     */
    groupNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the locations and status for radio buttons that are grouped together.
     */
    radios?: Radio[];
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and shared is true, information must be entered in this field to complete the envelope.
     */
    requireAll?: string;
    /**
     * Metadata that indicates whether the `requireAll` property is editable.
     */
    requireAllMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `tooltip` property is editable.
     */
    tooltipMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface RecipientAttachment {
    /**
     * The unique identifier for the attachment.
     */
    attachmentId?: string;
    /**
     * Specifies the type of the attachment for the recipient. Possible values are:
     *
     * - `.htm`
     * - `.xml`
     */
    attachmentType?: string;
    /**
     * A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size.
     */
    data?: string;
    /**
     * An optional label for the attachment.
     */
    label?: string;
    /**
     * The name of the attachment.
     */
    name?: string;
    /**
     * The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl`
     * property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads.
     */
    remoteUrl?: string;
}

export interface RecipientDomain {
    active?: string;

    domainCode?: string;

    domainName?: string;

    recipientDomainId?: string;
}

export interface RecipientEmailNotification {
    /**
     * The body of the email message.
     */
    emailBody?: string;
    /**
     * Metadata that indicates whether the `emailBody` property can be edited.
     */
    emailBodyMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The subject line for the email notification.
     */
    emailSubject?: string;
    /**
     * Metadata that indicates whether the `emailSubject` property can be edited.
     */
    emailSubjectMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The language to use for the standard email format and signing view for a recipient.
     *
     * For example, in the recipient's email notification, this setting affects elements such as the standard introductory text describing the request to sign.
     * It also determines the language used for buttons and tabs in both the email notification and the signing experience.
     *
     * **Note**: This setting affects only DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject` of the notification is not translated,
     * and appears exactly as you enter it.
     *
     *  To retrieve the possible values, use the [Accounts::listSupportedLanguages][ListLang] method.
     *
     * [ListLang]: ./esign/restapi/Accounts/Accounts/listSupportedLanguages/
     */
    supportedLanguage?: string;
    /**
     * Metadata that indicates whether the `supportedLanguage` property can be edited.
     */
    supportedLanguageMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface RecipientEvent {
    /**
     * reserved
     */
    includeDocuments?: string;
    /**
     * Send a webhook notification for the following recipient statuses: Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
     */
    recipientEventStatusCode?: string;
}

export interface RecipientFormData {
    /**
     * The date and time the recipient declined the envelope.
     */
    DeclinedTime?: string;
    /**
     * The date and time the recipient viewed the documents in the envelope in the DocuSign signing UI.
     */
    DeliveredTime?: string;
    /**
     * The recipient's email address.
     */
    email?: string;
    /**
     * An array of form data objects.
     */
    formData?: FormDataItem[];
    /**
     * The name of the recipient.
     */
    name?: string;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The date and time the envelope was sent to the recipient.
     */
    SentTime?: string;
    /**
     * The date and time the recipient signed the documents.
     */
    SignedTime?: string;
}

export interface RecipientIdentityInputOption {
    name?: string;

    phoneNumberList?: RecipientIdentityPhoneNumber[];

    valueType?: string;
}

export interface RecipientIdentityPhoneNumber {
    /**
     * The three-letter code for the user's country.
     */
    countryCode?: string;

    extension?: string;

    number?: string;
}

/**
 * Specifies ID Verification applied on an envelope by workflow ID. See the [list](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list)
 * method in the [IdentityVerifications](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications)
 * resource for more information on how to retrieve workflow IDs available for an account. This can be used in addition to other
 * [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
 */
export interface RecipientIdentityVerification {
    inputOptions?: RecipientIdentityInputOption[];
    /**
     * ID of the Identity Verification worklow used to verify recipients' identity. </br> This ID must match one of the [workflowId]
     * (https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list#accountIdentityVerificationWorkflow) available to your account.
     */
    workflowId?: string;
}

/**
 * This response object contains a list of recipients.
 */
export interface RecipientNamesResponse {
    /**
     * When set to **true**, the email address is used by more than one user.
     */
    multipleUsers?: string;
    /**
     * The names of the recipients associated with the email address.
     */
    recipientNames?: string[];
    /**
     * When set to **true**, new names cannot be added to the email address.
     */
    reservedRecipientEmail?: string;
}

/**
 * A complex type that contains the elements:
 *
 * * `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
 * * `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
 * * `recordVoicePrint`: Reserved for DocuSign.
 * * `validateRecipProvidedNumber`: Reserved for DocuSign.
 */
export interface RecipientPhoneAuthentication {
    /**
     * Boolean. When set to **true**, the recipient can supply a phone number their choice.
     */
    recipMayProvideNumber?: string;
    /**
     * Metadata that indicates whether the `recipMayProvideNumber` property can be edited.
     */
    recipMayProvideNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    recordVoicePrint?: string;
    /**
     * Reserved for DocuSign.
     */
    recordVoicePrintMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array containing a list of phone numbers that the recipient can use for SMS text authentication.
     */
    senderProvidedNumbers?: string[];
    /**
     * Metadata that indicates whether the `senderProvidedNumbers` property can be edited.
     */
    senderProvidedNumbersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     *  Reserved for DocuSign.
     */
    validateRecipProvidedNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    validateRecipProvidedNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * This request object contains the information necessary to create a recipient preview.
 */
export interface RecipientPreviewRequest {
    /**
     * A unique identifier of the authentication event executed by the client application.
     */
    assertionId?: string;
    /**
     * A sender-generated value that indicates the date and time that the signer was authenticated.
     */
    authenticationInstant?: string;
    /**
     * Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer.
     *
     * Choose a value from this list:
     * * Biometric
     * * Email
     * * HTTPBasicAuth
     * * Kerberos
     * * KnowledgeBasedAuth
     * * None
     * * PaperDocuments
     * * Password
     * * RSASecureID
     * * SingleSignOn_CASiteminder
     * * SingleSignOn_InfoCard
     * * SingleSignOn_MicrosoftActiveDirectory
     * * SingleSignOn_Other
     * * SingleSignOn_Passport
     * * SingleSignOn_SAML
     * * Smartcard
     * * SSLMutualAuth
     * * X509Certificate
     *
     * This information is included in the Certificate of Completion.
     */
    authenticationMethod?: string;
    /**
     * Only used if `pingUrl` is specified. This is the interval, in seconds, between pings on the `pingUrl`.  The default is `300` seconds. Valid values are 60-1200 seconds.
     */
    pingFrequency?: string;
    /**
     * The client URL that the DocuSign Signing experience should ping to indicate to the client that Signing is active. An HTTP GET call is executed against the client.
     * The response from the client is ignored. The intent is for the client to reset its session timer when the request is received.
     */
    pingUrl?: string;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The URL to which the sender should be redirected after viewing the preview.
     */
    returnUrl?: string;
    /**
     * The domain in which the user authenticated.
     */
    securityDomain?: string;
    /**
     * Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your
     * content is not embedded into unauthorized pages or frames.
     *
     * Valid values are:
     *
     * - `deny`: The page cannot be displayed in a frame.
     * - `same_origin`: The page can only be displayed in a frame on the same origin as the page itself.
     * - `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property.
     */
    xFrameOptions?: string;
    /**
     * When the value of `xFrameOptions` is `allow_from`, this property specifies the origin on which the page is allowed to display in a frame. If the value of `xFrameOptions`
     * is `allow_from`, you must include a value for this property.
     */
    xFrameOptionsAllowFromUrl?: string;
}

export interface RecipientProofFile {
    isInProofFile?: string;
}

/**
 * Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.
 */
export interface RecipientSMSAuthentication {
    /**
     * An array containing a list of phone numbers that the recipient can use for SMS text authentication.
     */
    senderProvidedNumbers?: string[];
    /**
     * Metadata that indicates whether the `senderProvidedNumbers` property can be edited.
     */
    senderProvidedNumbersMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
 *
 * Used only with recipient types In Person Signers and Signers.
 */
export interface RecipientSignatureInformation {
    /**
     * Specifies the font style for the user's signature.
     */
    fontStyle?: string;
    /**
     * Specifies the user's signature in initials format.
     */
    signatureInitials?: string;
    /**
     * Specifies the user's signature name.
     */
    signatureName?: string;
}

/**
 * An Electronic or Standards Based Signature (digital signature) provider for the signer to use.
 * [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
 *
 */
export interface RecipientSignatureProvider {
    /**
     * By default, electronic seals apply on all documents in an envelope. If any of the documents has a `signHere` tab,
     * then a visual representation of the electronic seal will show up in the final document. If not, the electronic seal will be visible
     * in the metadata but not in the content of the document.
     *
     * To apply electronic seals on specific documents only, you must enable the  `sealDocumentsWithTabsOnly` parameter.
     * In this case, Electronic Seal applies only on documents that have `signHere` tabs set for the Electronic Seal recipient. Other documents won't be sealed.
     */
    sealDocumentsWithTabsOnly?: string;
    /**
     * Indicates the name of the electronic seal to apply on documents.
     *
     */
    sealName?: string;
    /**
     * The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use.
     * For details, see [the current provider list](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
     * You can also retrieve the list by using the
     * [AccountSignatureProviders::List](https://developers.docusign.com/esign-rest-api/reference/Accounts/AccountSignatureProviders/list/) method.
     *
     * Example: `universalsignaturepen_default`
     *
     *
     */
    signatureProviderName?: string;
    /**
     * Metadata that indicates whether the `signatureProviderName` property is editable.
     *
     */
    signatureProviderNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Not applicable for this object.
     */
    signatureProviderOptions?: RecipientSignatureProviderOptions;
}

/**
 * Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.]
 * (https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
 */
export interface RecipientSignatureProviderOptions {
    /**
     * Reserved for DocuSign.
     */
    cpfNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    cpfNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A pre-shared secret that the signer must enter to complete the signing process. Eg last six digits of the signer's government ID or Social Security number.
     * Or a newly created pre-shared secret for the transaction. Note: some signature providers may require an exact (case-sensitive) match if alphabetic characters
     * are included in the field.
     */
    oneTimePassword?: string;
    /**
     * Metadata that indicates whether the `oneTimePassword` property is editable.
     */
    oneTimePasswordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The role or capacity of the signing recipient. Examples: Manager, Approver, etc.
     */
    signerRole?: string;
    /**
     * Metadata that indicates whether the `signerRole` property is editable.
     */
    signerRoleMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The mobile phone number used to send the recipient an access code for the signing ceremony. Format: a string starting with +, then the country code
     * followed by the full mobile phone number without any spaces or special characters. Omit leading zeroes before a city code.
     * Examples: +14155551234, +97235551234, +33505551234.
     */
    sms?: string;
    /**
     * Metadata that indicates whether the `sms` property is editable.
     */
    smsMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * The recipient details that are returned after you update the recipient.
 */
export interface RecipientUpdateResponse {
    /**
     * When you use the query parameter `combine_same_order_recipients` on the PUT Recipients call, the `recipientUpdateResponse` returns this property.
     * When set to **true**, it indicates that the recipient has been combined or merged with a matching recipient. Recipient matching occurs as part of template matching,
     * and is based on Recipient Role and Routing Order.
     */
    combined?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be
     * unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * All of the tabs associated with the recipient.
     */
    tabs?: EnvelopeRecipientTabs;
}

/**
 * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
 */
export interface RecipientViewRequest {
    /**
     * A unique identifier of the authentication event executed by the client application.
     */
    assertionId?: string;
    /**
     * A sender-generated value that indicates the date and time that the signer was authenticated.
     */
    authenticationInstant?: string;
    /**
     * Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer.
     *
     * Choose a value from this list:
     * * Biometric
     * * Email
     * * HTTPBasicAuth
     * * Kerberos
     * * KnowledgeBasedAuth
     * * None
     * * PaperDocuments
     * * Password
     * * RSASecureID
     * * SingleSignOn_CASiteminder
     * * SingleSignOn_InfoCard
     * * SingleSignOn_MicrosoftActiveDirectory
     * * SingleSignOn_Other
     * * SingleSignOn_Passport
     * * SingleSignOn_SAML
     * * Smartcard
     * * SSLMutualAuth
     * * X509Certificate
     *
     * This information is included in the Certificate of Completion.
     */
    authenticationMethod?: string;
    /**
     * A sender-created value. If provided, the recipient is treated as an embedded (captive) recipient or signer.
     *
     * Use your application's client ID (user ID) for the recipient. Doing so enables the details of your application's authentication of
     * the recipient to be connected to the recipient's signature if the signature is disputed or repudiated.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * (Required) Specifies the email of the recipient. You can use either `email` and `userName` or `userId` to identify the recipient.
     */
    email?: string;
    /**
     * Only used if `pingUrl` is specified. This is the interval, in seconds, between pings on the `pingUrl`.  The default is `300` seconds. Valid values are 60-1200 seconds.
     */
    pingFrequency?: string;
    /**
     * The client URL that the DocuSign Signing experience should ping to indicate to the client that Signing is active. An HTTP GET call is executed against the client.
     * The response from the client is ignored. The intent is for the client to reset its session timer when the request is received.
     */
    pingUrl?: string;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * (Optional) The URL to which the user should be redirected
     * after the signing session has ended.
     * DocuSign redirects to the URL
     * and includes an `event` query parameter
     * that can be used by your application.
     *
     * Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.
     *
     * Possible `event` parameter values include:
     *
     * * `access_code_failed`: Recipient used incorrect access code.
     * * `cancel`: Recipient canceled the signing operation,
     *   possibly by using the **Finish Later** option.
     * * `decline`: Recipient declined to sign.
     * * `exception`: A system error occurred during the signing process.
     * * `fax_pending`: Recipient has a fax pending.
     * * `id_check_failed`: Recipient failed an ID check.
     * * `session_timeout`: The session timed out. An account can control this timeout by using the **Signer Session Timeout** option.
     * * `signing_complete`: The recipient completed the signing ceremony.
     * * `ttl_expired`: The Time To Live token for the envelope has expired.
     *   After being successfully invoked, these tokens expire
     *   after 5 minutes or if the envelope is voided.
     * * `viewing_complete`: The recipient completed viewing an envelope
     *   that is in a read-only/terminal state,
     *   such as completed, declined, or voided.
     *
     * Ensure that you include `https://` in the URL to prevent the redirect from failing on certain browsers.
     *
     */
    returnUrl?: string;
    /**
     * The domain in which the user authenticated.
     */
    securityDomain?: string;
    /**
     * The user ID of the recipient. You can use either the user ID or email and user name to identify the recipient.
     *
     * If `userId` is used and a `clientUserId` is provided, the value in the `userId` property must match a `recipientId` (which you can retrieve with a GET
     * recipients call) for the envelope.
     *
     * If a `userId` is used and a `clientUserId` is not provided, the `userId` must match the user ID of the authenticating user.
     */
    userId?: string;
    /**
     * The username of the recipient. You can use either `email` and `userName` or `userId` to identify the recipient.
     */
    userName?: string;
    /**
     * Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your content is not embedded into
     * unauthorized pages or frames.
     *
     * Valid values are:
     *
     * - `deny`: The page cannot be displayed in a frame.
     * - `same_origin`: The page can only be displayed in a frame on the same origin as the page itself.
     * - `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property.
     */
    xFrameOptions?: string;
    /**
     * When the value of `xFrameOptions` is `allow_from`, this property specifies the origin on which the page is allowed to display in a frame.
     * If the value of `xFrameOptions` is `allow_from`, you must include a value for this property.
     */
    xFrameOptionsAllowFromUrl?: string;
}

export interface Recipients {
    /**
     * A list of agent recipients assigned to the documents.
     */
    agents?: /* Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the
        agent in routing order. */ Agent[];
    /**
     * A list of carbon copy recipients assigned to the documents.
     */
    carbonCopies?: /* Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial,
        date or add information to any of the documents.  */ CarbonCopy[];
    /**
     * A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient
     * does not need to sign, initial, date, or add information to any of the documents.
     */
    certifiedDeliveries?: CertifiedDelivery[];
    /**
     * The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent
     * to that recipient, but he or she has not completed the required actions.
     */
    currentRoutingOrder?: string;
    /**
     * A list of users who can edit the envelope.
     */
    editors?: /* A complex type defining the management and access rights of a recipient assigned as an editor on the envelope.
        Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature.
        This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients.
        Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients. */ Editor[];
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction.
     * The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
     */
    inPersonSigners?: InPersonSigner[];
    /**
     * Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the
     * routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
     */
    intermediaries?: Intermediary[];
    /**
     * The number of recipients in the envelope.
     */
    recipientCount?: string;
    /**
     * A list of electronic seals to apply to documents.
     */
    seals?: SealSign[];
    /**
     * A list of signers on the envelope.
     */
    signers?: Signer[];
    /**
     * A list of signers who act as witnesses on the envelope.
     */
    witnesses?: /* A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified
        signers have signed the documents in the envelope. */ Witness[];
}

/**
 * This is the response that the API returns after you update recipients.
 */
export interface RecipientsUpdateSummary {
    /**
     * An array of `recipientUpdateResults` objects that contain details about the recipients.
     */
    recipientUpdateResults?: /* The recipient details that are returned after you update the recipient. */ RecipientUpdateResponse[];
}

/**
 * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information
 * (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods,
 * saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
 *
 * ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
 */
export interface ReferralInformation {
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the
     * referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount,
     * saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId,
     * promoCode, groupMemberId, idType, and industry.
     *
     * ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     *
     */
    advertisementId?: string;
    /**
     * When set to **true**, customer support is provided as part of the account plan.
     */
    enableSupport?: string;
    /**
     * An optional external id for the referral.
     */
    externalOrgId?: string;

    groupMemberId?: string;

    idType?: string;
    /**
     * The number of seats (users) included in the plan.
     */
    includedSeats?: string;
    /**
     * The name of the industry associated with the referral.
     *
     * Example: `Accounting`
     */
    industry?: string;

    planStartMonth?: string;

    promoCode?: string;

    publisherId?: string;

    referralCode?: string;
    /**
     * The name of the referrer.
     */
    referrerName?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountAmount?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountFixedAmount?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountPercent?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountPeriods?: string;
    /**
     * Reserved for DocuSign.
     */
    saleDiscountSeatPriceOverride?: string;

    shopperId?: string;
}

/**
 * A complex element that specifies reminder settings for the envelope.
 */
export interface Reminders {
    /**
     * An integer specifying the number of days after the recipient receives the envelope that reminder emails are sent to the recipient.
     */
    reminderDelay?: string;
    /**
     * When set to **true**, the envelope expires and is no longer available for signing after the specified number of days. When **false**,
     * the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
     */
    reminderEnabled?: string;
    /**
     * An integer specifying the interval in days between reminder emails.
     */
    reminderFrequency?: string;
}

/**
 * Request logs
 */
export interface RequestLogs {
    /**
     *  When set to **true**, enables API request logging for the user.
     */
    apiRequestLogging?: string;
    /**
     * Specifies the maximum number of API requests to log.
     */
    apiRequestLogMaxEntries?: string;
    /**
     * Indicates the remaining number of API requests that can be logged.
     */
    apiRequestLogRemainingEntries?: string;
}

export interface ResourceInformation {
    resources?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
}

/**
 * API resource information
 */
export interface Resources {
    resources?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
}

/**
 * This resource is used to create a responsive preview of all of the documents in an envelope.
 */
export interface ResponsiveHtmlPreview {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: string[];
}

/**
 * The request body for the EnvelopeViews::createSender method.
 */
export interface ReturnUrlRequest {
    /**
     * (Optional) The URL to which the user should be redirected after the sending session is complete.
     *
     * Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.
     */
    returnUrl?: string;
}

/**
 * Set of information related to the electronic seal used by the Trust Service Provider (TSP).
 */
export interface Seal {
    /**
     * Electronic seal configuration  properties
     */
    configuration?: {
        [name: string]: string;
    };
    /**
     * Electronic Seal identifier
     */
    sealIdentifier?: string;
}

export interface SealIdentifier {
    /**
     * The user-friendly display name for a seal.
     */
    sealDisplayName?: string;
    /**
     * The name of a seal.
     */
    sealName?: string;
}

/**
 * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person.
 * Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic
 * seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender.
 * The sender is therefore the person authorizing usage of the electronic seal in the flow.
 *
 * Example:
 *
 * ```json
 * "recipients": {
 *       "seals": [
 *         {
 *           "recipientId": "1",
 *           "routingOrder" : 1,
 *           "recipientSignatureProviders": [
 *             {
 *               "sealName": "52e9d968-13be-42ca-a6fe-4682bc45c106"
 *             }
 *       	]
 *     	}
 *   	]
 * 	},
 *     .
 *     .
 *     .
 * ```
 * For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
 */
export interface SealSign {
    /**
     * Not applicable.
     */
    accessCode?: string;
    /**
     * Not applicable.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Not applicable.
     */
    addAccessCodeToEmail?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * Not applicable.
     */
    clientUserId?: string;
    /**
     * Not applicable.
     */
    completedCount?: string;
    /**
     * Not applicable.
     */
    customFields?: string[];
    /**
     * Not applicable.
     */
    declinedDateTime?: string;
    /**
     * Not applicable.
     */
    declinedReason?: string;
    /**
     * Not applicable.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * Not applicable.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * Not applicable.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Not applicable.
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Not applicable.
     */
    idCheckConfigurationName?: string;
    /**
     * Not applicable.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Not applicable.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * Not applicable.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * Not applicable.
     */
    name?: string;
    /**
     * Not applicable.
     */
    note?: string;
    /**
     * Not applicable.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Not applicable.
     */
    phoneAuthentication?: RecipientPhoneAuthentication;
    /**
     * Not applicable.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Not applicable.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * (Required) The `recipientId` used when the envelope or template was created.
     *
     * This is a local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * (Required) Indicates which electronic seal to apply on documents when creating an envelope.
     */
    recipientSignatureProviders?: RecipientSignatureProvider[];
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial,
     * date, or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the
     * routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Not applicable.
     */
    requireIdLookup?: string;
    /**
     * Not applicable.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * (Optional, default: 1)
     * Specifies the routing order of the electronic seal in the envelope.
     * The routing order assigned to your electronic seal cannot be shared with another recipient.
     * It is recommended that you set a routing order for your electronic seals.
     *
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Not applicable.
     */
    sentDateTime?: string;
    /**
     * Not applicable.
     */
    signedDateTime?: string;
    /**
     * Not applicable.
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * The recipient's status. Read only.
     *
     * Possible values:
     *
     * - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders
     * about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
     * - `declined`: The recipient declined to sign the document(s) in the envelope.
     * - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
     * - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing,
     * after which the recipient's status automatically switches to `completed`.
     */
    status?: string;
    /**
     * The code associated with the recipient's status. Read only.
     */
    statusCode?: string;
    /**
     * Not applicable.
     */
    suppressEmails?: string;
    /**
     * A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data.
     * They may also display data to the recipients.
     */
    tabs?: EnvelopeRecipientTabs;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Not applicable.
     */
    totalTabCount?: string;
    /**
     * Not applicable.
     */
    userId?: string;
}

/**
 * This object contains information about a seat discount.
 */
export interface SeatDiscount {
    /**
     * Reserved for DocuSign.
     */
    beginSeatCount?: string;
    /**
     * The percent of the discount.
     *
     * Example: `"0.00"`
     */
    discountPercent?: string;
    /**
     * Reserved for DocuSign.
     */
    endSeatCount?: string;
}

/**
 * Contains the settings for the email notifications that senders receive about the envelopes that they send.
 */
export interface SenderEmailNotifications {
    /**
     * When set to **true**, the sender receives an email notification if the signer changes.
     */
    changedSigner?: string;
    /**
     * When set to **true**, the user receives only comments that mention their own user name.
     */
    commentsOnlyPrivateAndMention?: string;
    /**
     * When set to **true**, the user receives all comments.
     */
    commentsReceiveAll?: string;
    /**
     * When set to **true**, the sender receives an email notification if envelope delivery fails.
     */
    deliveryFailed?: string;
    /**
     * When set to **true**, the user receives an email notification when the envelope has been completed.
     */
    envelopeComplete?: string;
    /**
     * When set to **true**, the user receives an email notification if offline signing failed.
     */
    offlineSigningFailed?: string;
    /**
     * When set to **true**, the user receives an email notification when a document purge occurs.
     */
    purgeDocuments?: string;
    /**
     * When set to **true**, the sender receives notification that a recipient viewed the envelope.
     */
    recipientViewed?: string;
    /**
     * When set to **true**, the sender receives notification that the envelope was declined.
     */
    senderEnvelopeDeclined?: string;
    /**
     * When set to **true**, the user receives an email notification if consent is withdrawn.
     */
    withdrawnConsent?: string;
}

export interface ServerTemplate {
    sequence?: string;
    /**
     * The unique identifier of the template. If this is not provided, DocuSign will generate a value.
     */
    templateId?: string;
}

export interface ServiceInformation {
    /**
     * Reserved: TBD
     */
    buildBranch?: string;
    /**
     * Reserved: TBD
     */
    buildBranchDeployedDateTime?: string;
    /**
     * Reserved: TBD
     */
    buildSHA?: string;
    /**
     * Reserved: TBD
     */
    buildVersion?: string;

    linkedSites?: string[];

    serviceVersions?: ServiceVersion[];
}

export interface ServiceVersion {
    /**
     * The version of the rest API.
     */
    version?: string;

    versionUrl?: string;
}

/**
 * API service information
 */
export interface Services {
    /**
     * Reserved: TBD
     */
    buildBranch?: string;
    /**
     * Reserved: TBD
     */
    buildBranchDeployedDateTime?: string;
    /**
     * Reserved: TBD
     */
    buildSHA?: string;
    /**
     * Reserved: TBD
     */
    buildVersion?: string;

    linkedSites?: string[];

    serviceVersions?: ServiceVersion[];
}

/**
 * Metadata that indicates whether a property is editable and describes setting-specific options.
 */
export interface SettingsMetadata {
    /**
     * When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
     */
    is21CFRPart11?: string;
    /**
     * An array of option strings supported by this setting.
     */
    options?: string[];
    /**
     * Indicates whether the property is editable. Valid values are:
     *
     * - `editable`
     * - `read_only`
     */
    rights?: string;
    /**
     * Reserved for DocuSign.
     */
    uiHint?: string;
    /**
     * Reserved for DocuSign.
     */
    uiOrder?: string;
    /**
     * Reserved for DocuSign.
     */
    uiType?: string;
}

/**
 * Information about the shared item.
 */
export interface SharedItem {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * How the item is shared. One of:
     *
     * - `not_shared`
     * - `shared_to`
     * - `shared_from`
     * - `shared_to_and_from`
     */
    shared?: string;
    /**
     * Information about the user who owns the shared item.
     */
    user?: UserInfo;
}

/**
 * A tab that allows the recipient to sign a document. May be
 * optional.
 *
 */
export interface SignHere {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the
     * `anchorString` property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`,
     * etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an
     * [anchor tab][AnchorTab] to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not.
     * When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`,
     * the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**,  the tab contains a visual representation for an electronic seal in a document.
     */
    isSealSignTab?: string;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient does not need to complete this tab to complete the signing process.
     */
    optional?: string;
    /**
     * Metadata that indicates whether the `optional` property is editable.
     */
    optionalMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the page number on which the tab is located.
     * Must be 1 for supplemental documents.
     *
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId`
     * must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
     */
    scaleValue?: string;
    /**
     * Metadata that indicates whether the `scaleValue` property is editable.
     */
    scaleValueMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;

    stamp?: Stamp;
    /**
     * The type of stamp. Valid values are:
     *
     * - `signature`: A signature image. This is the default value.
     * - `stamp`: A stamp image.
     * - null
     */
    stampType?: string;
    /**
     * Metadata that indicates whether the `stampType` property is editable.
     */
    stampTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     *
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the vertical offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required.
     * May be zero.
     *
     * <div class="highlight highlight-attention">
     * <p markdown="1">
     * The `signHere` tab appears 21 points *lower*
     * than the value you provide here.
     * To align the tab as expected,
     * subtract 21 from the expected y-value.
     * </p>
     * <p>
     * See [Sign Here Tab Alignment](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#sign-here-tab-alignment)
     * </p>
     * </div>
     *
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface SignatureProperties {
    /**
     * Specifies the preferred handler that should be used to validate the signature.
     */
    filter?: string;
    /**
     * Indicates the format of the data that the stream contains.
     */
    subFilter?: string;
}

/**
 * Contains additional information that a specific signature provider requires.
 */
export interface SignatureProviderRequiredOption {
    /**
     * Reserved for DocuSign.
     */
    requiredSignatureProviderOptionIds?: string[];
    /**
     * Reserved for DocuSign.
     */
    signerType?: string;
}

/**
 * This object contains information about the type of signature.
 */
export interface SignatureType {
    /**
     * When **true**, the signature type is the default type.
     */
    isDefault?: string;
    /**
     * The type of signature. Valid values are:
     *
     * - `electronic`: Indicates an **electronic** signature that is used by common law countries such as the United States, United Kingdom, and Australia.
     * This is the default signature type that DocuSign uses.
     * - `universal`: Indicates a **digital** signature that is accepted by both common law and civil law countries. To use digital signatures,
     * you must use the [DocuSign Signature Appliance](https://developers.docusign.com/dsa-api).
     *
     * For more information, see [Standards Based Signatures](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
     */
    type?: string;
}

/**
 * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial,
 * date, or add data to form fields on a document.
 */
export interface Signer {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Metadata that indicates whether the `accessCode` property is editable. Read only.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
     */
    addAccessCodeToEmail?: string;
    /**
     * Optional element. When set to **true**, the agent recipient associated with this recipient can change the recipient's pre-populated email address.
     * This element is only active if enabled for the account.
     */
    agentCanEditEmail?: string;
    /**
     * Optional. When set to **true**, the agent recipient associated with this recipient can change the recipient's pre-populated name.
     * This element is only active if enabled for the account.
     */
    agentCanEditName?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * When set to **true**, autonavigation is set for the recipient.
     *
     */
    autoNavigation?: string;
    /**
     * Reserved for DocuSign.
     */
    bulkRecipientsUri?: string;
    /**
     * When set to **true**, specifies that the signer can perform the signing ceremony offline.
     */
    canSignOffline?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app.
     * Authenticating the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to
     *  **true**, an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group,
     * only the user who previously completed may sign again. Read only.
     */
    completedCount?: string;
    /**
     * The reason why the item was created.
     */
    creationReason?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope
     * status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * The reason the recipient declined the document. Read only.
     */
    declinedReason?: string;
    /**
     * When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
     */
    defaultRecipient?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient.
     * For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * The recipient's email address. The system sends notifications about the documents to sign to this address. Maximum length: 100 characters.
     */
    email?: string;
    /**
     * Metadata that indicates whether the `email` property is editable. Read only.
     */
    emailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients,
     * the other recipients will inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email
     * from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign,
     * to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request
     * a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated
     * by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is
     * identical to an embedded signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the
     * sending application before the embedded signing or viewing process is initiated. However, when the sending application sets
     * `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process,
     * bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you
     * use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing
     * process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are:
     * `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope.
     * The merge fields are enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility`
     * property must be set to **true** for the envelope to use this.
     *
     * When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an
     * administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope,
     * unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients,
     * unless they are specifically excluded using this setting when an envelope is sent.
     */
    excludedDocuments?: string[];
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The recipient's first name. Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * Metadata that indicates whether the `firstame` property is editable. Read only.
     */
    firstNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    fullName?: string;
    /**
     * Reserved for DocuSign.
     */
    fullNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses.
     * The names of these authentication types appear in the web console sending export interface in the Identify list for a recipient.
     * This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $.
     * To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add
     * a phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * Specifies the ID Verification workflow applied on an envelope by workflow ID. <br/>See the
     * [list](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list) method in the
     *  [IdentityVerifications](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications)
     * resource for more information on how to retrieve workflow IDs available for an account.
     * <br/>This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
     *  <br/>Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients' identity by verifying their
     * ID while ID Check relies on data available on public records (such as current and former address).
     */
    identityVerification?: /* Specifies ID Verification applied on an envelope by workflow ID. See the
        [list](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list) method in the
        [IdentityVerifications](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications) resource for more information
        on how to retrieve workflow IDs available for an account. This can be used in addition to other
        [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.  */ RecipientIdentityVerification;
    /**
     * When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the
     * default settings for the recipient's account.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * Reserved for DocuSign.
     *
     */
    isBulkRecipient?: string;
    /**
     * Reserved for DocuSign.
     */
    isBulkRecipientMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The recipient's last name.
     */
    lastName?: string;
    /**
     * Metadata that indicates whether the `lastName` property is editable. Read only.
     */
    lastNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * The full legal name of the recipient. Maximum Length: 100 characters.
     *
     * **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A note sent to the recipient in the signing email.
     * This note is unique to this recipient.
     * In the user interface,
     * it appears near the upper left corner
     * of the document
     * on the signing screen.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * Metadata that indicates whether the `note` property is editable. Read only.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     *
     *
     */
    phoneAuthentication?: RecipientPhoneAuthentication;

    proofFile?: RecipientProofFile;
    /**
     * Reserved for DocuSign.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Information about the recipient's authentication status. Read only.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId`
     * must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature
     * (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    recipientSignatureProviders?: RecipientSignatureProvider[];
    /**
     * When set to **true**, specifies that the recipient creates the tabs.
     */
    recipientSuppliesTabs?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign,
     * initial, date, or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or
     * change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     */
    requireIdLookup?: string;
    /**
     * Metadata that indicates whether the `requireIdLookup` property is editable. Read only.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.
     *
     * This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders`
     * parameter for other types of digital certificates.
     *
     * Set this parameter to `safe` to use a SAFE-BioPharma certificate.
     *
     * The signer must be enrolled in the SAFE program to sign with a SAFE certificate.
     */
    requireSignerCertificate?: string;
    /**
     * When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
     */
    requireSignOnPaper?: string;
    /**
     * When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.
     */
    requireUploadSignature?: string;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
     *
     * Used only with recipient types In Person Signers and Signers.
     */
    signatureInfo?: RecipientSignatureInformation;
    /**
     * Reserved for DocuSign.
     */
    signedDateTime?: string;
    /**
     * When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and
     * initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once).
     */
    signInEachLocation?: string;
    /**
     * Metadata that indicates whether the `signInEachLocation` property is editable. Read only.
     */
    signInEachLocationMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     * For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients.
     * However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * Metadata that indicates whether the `signingGroupId` property is editable. Read only.
     */
    signingGroupIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
    /**
     * A complex type that contains information about users in the signing group.
     */
    signingGroupUsers?: UserInfo[];
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the element `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * Specifies the status of the recipient at the time of the request. Read only. Possible values are:
     *
     * - `created`: The recipient is in a draft state. This is only associated with draft envelopes (envelopes with a created status).
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing web site. This is not an email delivery of the documents in an envelope.
     * - `signed`; The recipient has completed (performed all required interactions, such as signing or entering data) all required tags in an envelope.
     * This is a temporary state during processing, after which the recipient is automatically moved to completed.
     * - `declined`: The recipient declined to sign the documents in the envelope.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `faxpending`: The recipient has finished signing and the system is waiting a fax attachment by the recipient before completing their signing step.
     * - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used by the DocuSign webapp (also known as
     * the DocuSign console) to inform senders about the auto-responded email.
     *
     */
    status?: string;
    /**
     * Reserved for DocuSign.
     */
    statusCode?: string;
    /**
     * When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
     */
    suppressEmails?: string;
    /**
     * The tabs to assign to the recipient. [More information](https://developers.docusign.com/esign-rest-api/guides/concepts/tabs).
     */
    tabs?: EnvelopeRecipientTabs;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * The total number of tabs in the documents. Read only.
     */
    totalTabCount?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}

/**
 * A tab that allows the recipient to attach supporting
 * documents to an envelope.
 *
 */
export interface SignerAttachment {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` p
     * roperty for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`,
     * the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient does not need to complete this tab to complete the signing process.
     */
    optional?: string;
    /**
     * Metadata that indicates whether the `optional` property is editable.
     */
    optionalMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
     */
    scaleValue?: string;
    /**
     * Metadata that indicates whether the `scaleValue` property is editable.
     */
    scaleValueMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     *
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true,
 * the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
 */
export interface SignerEmailNotifications {
    /**
     * When set to **true**, the user receives agent notification emails.
     */
    agentNotification?: string;
    /**
     * When set to **true**, the user receives notifications of carbon copy deliveries.
     */
    carbonCopyNotification?: string;
    /**
     * When set to **true**, the user receives notifications of certified deliveries.
     */
    certifiedDeliveryNotification?: string;
    /**
     * When set to **true**, the user receives only comments that mention their own user name.
     */
    commentsOnlyPrivateAndMention?: string;
    /**
     * When set to **true**, the user receives all comments.
     */
    commentsReceiveAll?: string;
    /**
     * When set to **true**, the user receives notification that document markup has been activated.
     */
    documentMarkupActivation?: string;
    /**
     * When set to **true**, the user receives notification that the envelope has been activated.
     */
    envelopeActivation?: string;
    /**
     * When set to **true**, the user receives an email notification when the envelope has been completed.
     */
    envelopeComplete?: string;
    /**
     * When set to **true**, the user receives notification that the envelope has been corrected.
     */
    envelopeCorrected?: string;
    /**
     * When set to **true**, the user receives notification that the envelope has been declined.
     */
    envelopeDeclined?: string;
    /**
     * When set to **true**, the user receives notification that the envelope has been voided.
     */
    envelopeVoided?: string;
    /**
     * Reserved for DocuSign.
     */
    faxReceived?: string;
    /**
     * When set to **true**, the user receives an email notification if offline signing failed.
     */
    offlineSigningFailed?: string;
    /**
     * When set to **true**, the user receives an email notification when a document purge occurs.
     */
    purgeDocuments?: string;
    /**
     * When set to **true**, the user receives notification that the envelope has been reassigned.
     */
    reassignedSigner?: string;
    /**
     * When set to **true**, the user receives notification that he or she is a member of the signing group.
     */
    whenSigningGroupMember?: string;
}

/**
 * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group
 * sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
 */
export interface SigningGroup {
    /**
     * The UTC DateTime when the signing group was created. Read only.
     */
    created?: string;
    /**
     * The name of the user who created the signing group.
     */
    createdBy?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The email address for the signing group. You can use a group email address to email all of the group members at the same time.
     */
    groupEmail?: string;
    /**
     * The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.
     */
    groupName?: string;
    /**
     * The group type. Possible values include:
     *
     * - `adminstrators`
     * - `everyone`
     * - `customGroup`
     * - `sharedSigningGroup`
     *
     * <!-- More? To do -->
     */
    groupType?: string;
    /**
     * The UTC DateTime when the signing group was last modified. Read only.
     */
    modified?: string;
    /**
     * The user id (GUID) of the user who last modified this user record.
     */
    modifiedBy?: string;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     * For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients.
     * However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * User management information.
     */
    users?: SigningGroupUser[];
}

export interface SigningGroupInformation {
    /**
     * A collection group objects containing information about the groups.
     */
    groups?: SigningGroup[];
}

export interface SigningGroupUser {
    email?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The name of the group member.
     *
     * Maximum Length: 100 characters.
     */
    userName?: string;
}

/**
 * Signing groups' users
 */
export interface SigningGroupUsers {
    /**
     * User management information.
     */
    users?: SigningGroupUser[];
}

/**
 * Signing groups
 */
export interface SigningGroups {
    /**
     * The UTC DateTime when the workspace user authorization was created.
     */
    created?: string;
    /**
     * The name of the user who created the signing group.
     */
    createdBy?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The email address for the signing group. You can use a group email address to email all of the group members at the same time.
     */
    groupEmail?: string;
    /**
     * The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.
     */
    groupName?: string;
    /**
     * The group type. Possible values include:
     *
     * - `adminstrators`
     * - `everyone`
     * - `customGroup`
     * - `sharedSigningGroup`
     *
     * <!-- More? To do -->
     */
    groupType?: string;
    /**
     * The date and time that the signing group was last modified.
     */
    modified?: string;
    /**
     * The user id (GUID) of the user who last modified this user record.
     */
    modifiedBy?: string;
    /**
     * When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each
     * signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
     */
    signingGroupId?: string;
    /**
     * User management information.
     */
    users?: SigningGroupUser[];
}

export interface SmartContractInformation {
    code?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
}

export interface SmartSection {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property
     * for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc.
     * will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When **true**, the `startAnchor` and `endAnchor` for the Smart Section must match both the case and the content of the strings in the HTML.
     */
    caseSensitive?: boolean;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object defines how the HTML section inside the `startAnchor` and `endAnchor` displays.
     */
    displaySettings?: /* These properties define how a Smart Section displays. A Smart Section is a type of display section. */ SmartSectionDisplaySettings;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.
     *
     * **Note**: A start anchor, an end anchor, or both are required.
     */
    endAnchor?: string;
    /**
     * The last index position in the result set.
     */
    endPosition?: SmartSectionAnchorPosition;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The type of overlay to draw on the document. The following overlay types are supported:
     *
     * - `line`
     * - `outline`
     *
     */
    overlayType?: string;
    /**
     * Metadata that indicates whether the `overlayType` property is editable.
     */
    overlayTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number being accessed.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When **true**, removes the end anchor string for the Smart Section from the HTML, preventing it from displaying.
     */
    removeEndAnchor?: boolean;
    /**
     * When **true**, removes the start anchor string for the Smart Section from the HTML, preventing it from displaying.
     */
    removeStartAnchor?: boolean;
    /**
     * When **true**, the tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of
     * the document will be used by default.
     *
     * **Note**: A start anchor, an end anchor, or both are required.
     */
    startAnchor?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: SmartSectionAnchorPosition;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface SmartSectionAnchorPosition {
    /**
     * The page number being accessed.
     */
    pageNumber?: number; // int32
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: number; // double
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: number; // double
}

export interface SmartSectionCollapsibleDisplaySettings {
    arrowClosed?: string;

    arrowColor?: string;

    arrowLocation?: string;

    arrowOpen?: string;

    arrowSize?: string;

    arrowStyle?: string;

    containerStyle?: string;

    labelStyle?: string;

    onlyArrowIsClickable?: boolean;

    outerLabelAndArrowStyle?: string;
}
/**
 * These properties define how a Smart Section displays. A Smart Section is a type of display section.
 */
export interface SmartSectionDisplaySettings {
    /**
     * Specifies the valid CSS-formatted styles to use on responsive table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column` types.
     */
    cellStyle?: string;
    /**
     * This object defines the appearance and function of a collapsible section or item.
     */
    collapsibleSettings?: SmartSectionCollapsibleDisplaySettings;
    /**
     * Indicates the display type. Must be one of the following enum values:
     *
     * - **inline**: Leaves the HTML where it is in the document. This allows for adding a label or presenting on a separate page.
     * - **collapsible**: The HTML in the section may be expanded or collapsed. By default, the section is expanded.
     * - **collapsed**: The HTML in the section may be expanded or collapsed. By default, the section is collapsed.
     * - **responsive_table**: Converts the section into a responsive table. Note that this style is applied only on HTML tables that fall within the `startAnchor`
     * and `endAnchor` positions.
     * - **responsive_table_single_column**: Converts the section into a responsive, single-column table. Note that this style is applied only on HTML tables that
     * fall within the `startAnchor` and `endAnchor` positions. The table is converted to a single column in which each column becomes a row and is stacked.
     * - **print_only**: Prevents this portion of the HTML from displaying in the responsive signing view.
     */
    display?: string;
    /**
     * The label for the display section.
     */
    displayLabel?: string;
    /**
     * The position on the page where the display section appears.
     */
    displayOrder?: number; // int32
    /**
     * The number of the page on which the display section appears.
     */
    displayPageNumber?: number; // int32
    /**
     * When **true**, the `displayLabel` is hidden when the display section is expanded and the display section is no longer collapsible. This property is valid only
     * when the value of the `display` property is `collapsed`.
     */
    hideLabelWhenOpened?: boolean;
    /**
     * Specifies the valid CSS-formatted styles to use on inline display sections. This property is valid only when the value of the `display` property is `inline`.
     */
    inlineOuterStyle?: string;
    /**
     * The label for the display section when it is expanded from a collapsed state. This label displays only on the first opening and is only valid with the value
     * of the `display` property is `collapsed`.
     */
    labelWhenOpened?: string;

    preLabel?: string;
    /**
     * When **true** and the section is expanded, the position of the section close is scrolled to the top of the screen. This property is only valid when the
     * value of the `display` property is `collapsed`.
     */
    scrollToTopWhenOpened?: boolean;
    /**
     * Specifies the valid CSS-formatted styles to use on responsive tables. This property is valid only when the value of the `display` property is
     * `responsive_table` or `responsive_table_single_column`.
     */
    tableStyle?: string;
}

export interface SocialAccountInformation {
    email?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The social account provider (Facebook, Yahoo, etc.)
     */
    provider?: string;
    /**
     * The ID provided by the Socal Account.
     */
    socialId?: string;
    /**
     * The name of the user.
     */
    userName?: string;
}

export interface SocialAuthentication {
    /**
     * Reserved for DocuSign.
     */
    authentication?: string;
}

/**
 * A one-line field that allows the recipient to enter a Social
 * Security Number. The SSN can be typed with or without
 * dashes. It uses the same parameters as a Text tab, with the
 * validation message and pattern set for SSN information.
 *
 */
export interface Ssn {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`,
     * etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     *  To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is
     * not visible (the characters are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console.
     * The information on the downloaded document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * Metadata that indicates whether the `concealValueOnDocument` property is editable.
     */
    concealValueOnDocumentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data.
     * If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * Metadata that indicates whether the `disableAutoSize` property is editable.
     */
    disableAutoSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the
     * `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional value that describes the maximum length of the property when the property is a string.
     */
    maxLength?: string;
    /**
     * Metadata that indicates whether the `maxLength` property is editable.
     */
    maxLengthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The initial value of the tab when it was sent to the recipient.
     */
    originalValue?: string;
    /**
     * Metadata that indicates whether the `originalValue` property is editable.
     */
    originalValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and shared is true, information must be entered in this field to complete the envelope.
     */
    requireAll?: string;
    /**
     * Metadata that indicates whether the `requireAll` property is editable.
     */
    requireAllMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender must populate the tab before an envelope can be sent using the template.
     *
     * This value tab can only be changed by modifying (PUT) the template.
     *
     * Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
     */
    senderRequired?: string;
    /**
     * Metadata that indicates whether the `senderRequired` property is editable.
     */
    senderRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     *
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * Metadata that indicates whether the `validationMessage` property is editable.
     */
    validationMessageMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A regular expression used to validate input for the tab.
     */
    validationPattern?: string;
    /**
     * Metadata that indicates whether the `validationPattern` property is editable.
     */
    validationPatternMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface Ssn4InformationInput {
    /**
     * Specifies the display level for the recipient. Valid values are:
     * * `ReadOnly`
     * * `Editable`
     * * `DoNotDisplay`
     */
    displayLevelCode?: string;
    /**
     * A Boolean value that specifies whether the information must be returned in the response.
     */
    receiveInResponse?: string;
    /**
     * The last four digits of the recipient's Social Security Number (SSN).
     */
    ssn4?: string;
}

export interface Ssn9InformationInput {
    /**
     * Specifies the display level for the recipient. Valid values are:
     * * `ReadOnly`
     * * `Editable`
     * * `DoNotDisplay`
     */
    displayLevelCode?: string;
    /**
     * The recipient's full Social Security Number (SSN).
     */
    ssn9?: string;
}

export interface Stamp {
    /**
     * The UTC date and time when the user adopted the signature.
     */
    adoptedDateTime?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;

    customField?: string;
    /**
     * Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area.
     * The stamp is superimposed on top of this central area.
     *
     * This property contains the following information about the central rectangle:
     *
     * - `DateAreaX`: The X axis position of the top-left corner.
     * - `DateAreaY`: The Y axis position of the top-left corner.
     * - `DateAreaWidth`: The width of the rectangle.
     * - `DateAreaHeight`: The height of the rectangle.
     */
    dateStampProperties?: DateStampProperties;
    /**
     * When set to **true**, users may not resize the stamp.
     */
    disallowUserResizeStamp?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Optionally specify an external identifier for the user's signature.
     */
    externalID?: string;

    imageBase64?: string;
    /**
     * Specificies the type of image. Valid values are:
     *
     * - `signature_image`
     * - `initials_image`
     */
    imageType?: string;
    /**
     * The date and time that the item was last modified.
     */
    lastModifiedDateTime?: string;
    /**
     * The phonetic spelling of the `signatureName`.
     */
    phoneticName?: string;
    /**
     * Specifies the user's signature name.
     */
    signatureName?: string;
    /**
     * The format of a stamp. Valid values are:
     *
     * - `NameHanko`: The stamp represents only the signer's name.
     * - `NameDateHanko`: The stamp represents the signer's name and the date.
     */
    stampFormat?: string;
    /**
     * The URI for retrieving the image of the user's stamp.
     */
    stampImageUri?: string;
    /**
     * The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
     */
    stampSizeMM?: string;
    /**
     * The status of the item.
     */
    status?: string;
}

/**
 * A list of supported languages.
 */
export interface SupportedLanguages {
    /**
     * A list of languages that you can use for a recipient's language setting. These are the languages that you can set for the standard email format
     * and signing view for each recipient.
     *
     * For example, in the recipient's email notification, this setting affects elements such as the standard introductory text describing the request to sign.
     * It also determines the language used for buttons and tabs in both the email notification and the signing experience.
     *
     * **Note**: Setting a language for a recipient affects only the DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject`
     * of the notification is not translated, and appears exactly as you enter it.
     *
     * Example:
     *
     * ```
     * {
     *     "languages": [
     *         {
     *             "name": "Arabic (ar)",
     *             "value": "ar"
     *         },
     *         {
     *             "name": "Bulgarian (bg)",
     *             "value": "bg"
     *         },
     *         .
     *         .
     *         .
     * }
     * ```
     */
    languages?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
}

export interface TabAccountSettings {
    /**
     * When set to **true**, account users can set a tab order for the signing process.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowTabOrder?: string;
    /**
     * Metadata that indicates whether the `allowTabOrder` property is editable.
     *
     */
    allowTabOrderMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, approve and decline tabs are enabled.
     */
    approveDeclineTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `approveDeclineTabs` property is editable.
     *
     */
    approveDeclineTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, [calculated fields](https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields) are enabled for tabs.
     */
    calculatedFieldsEnabled?: string;
    /**
     * Metadata that indicates whether the `calculatedFields` property is editable.
     *
     */
    calculatedFieldsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, checkbox tabs are enabled.
     */
    checkboxTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `checkBoxTabs` property is editable.
     */
    checkBoxTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, regular expressions are enabled for tabs that contain data fields.
     */
    dataFieldRegexEnabled?: string;
    /**
     * Metadata that indicates whether the `dataFieldRegex` property is editable.
     *
     */
    dataFieldRegexMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, setting character limits for input fields is enabled.
     */
    dataFieldSizeEnabled?: string;
    /**
     * Metadata that indicates whether the `dataFieldSize` property is editable.
     *
     */
    dataFieldSizeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    drawTabsEnabled?: string;

    drawTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    firstLastEmailTabsEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    firstLastEmailTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, list tabs are enabled.
     */
    listTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `listTabs` property is editable.
     *
     */
    listTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, note tabs are enabled.
     */
    noteTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `noteTabs` property is editable.
     *
     */
    noteTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, radio button tabs are enabled.
     */
    radioTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `radioTabs` property is editable.
     *
     */
    radioTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, saving custom tabs is enabled.
     */
    savingCustomTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `savingCustomTabs` property is editable.
     *
     */
    savingCustomTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    senderToChangeTabAssignmentsEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    senderToChangeTabAssignmentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, shared custom tabs are enabled.
     */
    sharedCustomTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `sharedCustomTabs` property is editable.
     *
     */
    sharedCustomTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, [data
     * labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    tabDataLabelEnabled?: string;
    /**
     * Metadata that indicates whether the `tabDataLabel` property is editable.
     *
     */
    tabDataLabelMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    tabLocationEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    tabLocationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, tab locking is enabled.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    tabLockingEnabled?: string;
    /**
     * Metadata that indicates whether the `tabLocking` property is editable.
     *
     */
    tabLockingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    tabScaleEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    tabScaleMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, text formatting (such as font type, font size,
     * font color, bold, italic, and underline) is enabled for tabs that
     * support formatting.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    tabTextFormattingEnabled?: string;
    /**
     * Metadata that indicates whether the `tabTextFormatting` property is editable.
     *
     */
    tabTextFormattingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, text tabs are enabled.
     */
    textTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `textTabs` property is editable.
     *
     */
    textTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}

export interface TabGroup {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the
     * `anchorString` property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`,
     * etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship`
     * will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A unique identifier for a tab group. To assign a tab to the `tabGroup`, you assign the `TabGroupLabel` to the `tab.TabGroupLabels` array.
     */
    groupLabel?: string;
    /**
     * Metadata that indicates whether the `groupLabel` property is editable.
     */
    groupLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The rule that is selected by default when a user is adding validation for a tab group in the UI.
     */
    groupRule?: string;
    /**
     * Metadata that indicates whether the `groupRule` property is editable.
     */
    groupRuleMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The maximum number of tabs within the `tabGroup` that should be checked, populated, or signed. This property is used for validation.
     */
    maximumAllowed?: string;
    /**
     * Metadata that indicates whether the `maximumAllowed` property is editable.
     */
    maximumAllowedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The minimum number of of tabs within the `tabGroup` that should be checked, populated, or signed. This property is used for validation.
     */
    minimumRequired?: string;
    /**
     * Metadata that indicates whether the `minimumRequired` property is editable.
     */
    minimumRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number being accessed.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The scope of the tab group. Possible values are:
     *
     * - `document`
     * - `envelope` (default)
     */
    tabScope?: string;
    /**
     * Metadata that indicates whether the `tabScope` property is editable.
     */
    tabScopeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * Metadata that indicates whether the `validationMessage` property is editable.
     */
    validationMessageMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface TabMetadata {
    /**
     * An optional string that is used to auto-match tabs to strings located in the documents of an envelope.
     */
    anchor?: string;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString`
     * property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab]
     * to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible
     * (the characters are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console.
     * The information on the downloaded document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * The user name of the DocuSign user who created this object.
     */
    createdByDisplayName?: string;
    /**
     * The userId of the DocuSign user who created this object.
     */
    createdByUserId?: string;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data.
     * If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * When set to **true**, the custom tab is editable. Otherwise the custom tab cannot be modified.
     */
    editable?: string;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * When set to **true**, the tab is included in e-mails related to the envelope on which it exists. This applies to only specific tabs.
     */
    includedInEmail?: string;
    /**
     * The original value of the tab.
     */
    initialValue?: string;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;

    items?: string[];
    /**
     * The UTC date and time that the comment was last updated.
     *
     * **Note**: This can only be done by the creator.
     */
    lastModified?: string;
    /**
     * The User Name of the DocuSign user who last modified this object.
     */
    lastModifiedByDisplayName?: string;
    /**
     * The userId of the DocuSign user who last modified this object.
     */
    lastModifiedByUserId?: string;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;

    maximumLength?: string;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    name?: string;
    /**
     * If the custom tab is for a payment request, this is the external code for the item associated with the charge. For example, this might be your product id.
     *
     * Example: `SHAK1`
     *
     * Maximum Length: 100 characters.
     */
    paymentItemCode?: string;
    /**
     * If the custom tab is for a payment request, this is the description of the item associated with the charge.
     *
     * Example: `The Danish play by Shakespeare`
     *
     * Maximum Length: 100 characters.
     */
    paymentItemDescription?: string;
    /**
     * If the custom tab is for a payment request, this is the name of the item associated with the charge.
     *
     * Maximum Length: 100 characters.
     *
     * Example: `Hamlet`
     */
    paymentItemName?: string;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
     */
    scaleValue?: string;
    /**
     * When set to **true**, the radio button is selected.
     */
    selected?: string;
    /**
     * When **true**, the tab is shared.
     */
    shared?: string;
    /**
     * The type of stamp. Valid values are:
     *
     * - `signature`: A signature image. This is the default value.
     * - `stamp`: A stamp image.
     * - null
     */
    stampType?: string;
    /**
     * Metadata that indicates whether the `stampType` property is editable.
     */
    stampTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;

    type?: string;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * A regular expression used to validate input for the tab.
     */
    validationPattern?: string;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
}

export interface TabMetadataList {
    /**
     * A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data.
     * They may also display data to the recipients.
     */
    tabs?: TabMetadata[];
}

/**
 * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing.
 * Tabs can also display data to the recipients.
 */
export interface Tabs {
    /**
     * A list of
     * [Approve tabs][approve].
     *
     * An Approve tab enables
     * the recipient to approve documents without
     * placing a signature or initials on the document. If the
     * recipient clicks the tab during the signing process, the
     * recipient is considered to have signed the document. No
     * information is shown on the document of the approval, but it
     * is recorded as a signature in the envelope history.
     * The value of an approve tab can't be set.
     *
     * [approve]:		      https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/approve
     *
     */
    approveTabs?: Approve[];
    /**
     * A list of
     * [Checkbox tabs][checkbox].
     *
     *
     * A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
     *
     *
     * [checkbox]:  https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/checkbox
     *
     */
    checkboxTabs?: Checkbox[];
    /**
     * An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document,
     * they can add a comment to the document and control who else can see the comment. This value can't be set.
     */
    commentThreadTabs?: CommentThread[];
    /**
     * A list of
     * [Company tabs][company].
     *
     *
     * A Company tab displays a field for the name of the recipient's company. This value can't be set.
     *
     *
     *
     * [company]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
     *
     */
    companyTabs?: Company[];
    /**
     * A list of
     * [Date Signed tabs][dateSigned].
     *
     *
     * A Date Signed tab displays the date that the recipient signed the document. This value can't be set.
     *
     * [dateSigned]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/dateSigned
     *
     */
    dateSignedTabs?: DateSigned[];
    /**
     * A list of
     * [Date tabs][date].
     *
     * A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY,
     * but this format is not enforced. The system retains the format that the recipient enters.
     *
     * **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.
     *
     *
     * [date]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/date
     *
     */
    dateTabs?: Date[];
    /**
     * A list of
     * [Decline tabs][decline].
     *
     * A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided.
     * The value of this tab can't be set.
     *
     *
     * [decline]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/decline
     *
     */
    declineTabs?: Decline[];
    drawTabs?: Draw[];
    /**
     * A list of
     * [Email Address tabs][emailAddress].
     *
     * An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.
     *
     *
     * [emailAddress]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/emailAddress
     *
     */
    emailAddressTabs?: EmailAddress[];
    /**
     * A list of
     * [Email tabs][email].
     *
     * An Email tab enables the recipient to enter an email address.
     * This is a one-line field that checks that a valid email
     * address is entered. It uses the same parameters as a Text
     * tab, with the validation message and pattern set for email
     * information. This value can be set.
     *
     * When getting information that includes
     * this tab type, the original value of the tab when the
     * associated envelope was sent is included in the response.
     *
     * [email]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/email
     *
     */
    emailTabs?: Email[];
    /**
     * A list of
     * [Envelope ID tabs][envelopeId].
     *
     * An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.
     *
     *
     * [envelopeId]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
     *
     */
    envelopeIdTabs?: EnvelopeId[];
    /**
     * A list of
     * [First Name tabs][firstName].
     *
     * A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces.
     * This value can't be set.
     *
     *
     * [firstName]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
     *
     */
    firstNameTabs?: FirstName[];
    /**
     * A list of [Formula tabs][formulaTab].
     *
     * The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields,
     * the Formula tab calculates and displays the result. This value can be set.
     *
     * The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].
     *
     * If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see
     * [Requesting Payments Along with Signatures][paymentguide].
     *
     * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     * [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     * [formulaTab]:	    	https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/formulaTab
     *
     */
    formulaTabs?: FormulaTab[];
    /**
     * A list of
     * [Full Name tabs][fullName].
     *
     * A Full Name tab displays the recipient's full name. This value can't be set.
     *
     *
     * [fullName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/fullName
     *
     */
    fullNameTabs?: FullName[];
    /**
     * A list of
     * [Initial Here tabs][initialHere].
     *
     * This type of tab enables the recipient to initial the document. May be optional. This value can't be set.
     *
     * [initialHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/initialHere
     *
     */
    initialHereTabs?: InitialHere[];
    /**
     * A list of
     * [Last Name tabs][lastName].
     *
     * A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces.
     * This value can't be set.
     *
     *
     * [lastName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/lastName
     *
     */
    lastNameTabs?: LastName[];
    /**
     * A list of [List tabs][list].
     * A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.
     * [list]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/list
     */
    listTabs?: List[];
    /**
     * A list of  [Notarize tabs][notarize].
     *
     * A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.
     *
     * **Note**: Only one notarize tab can appear on a page.
     *
     * [notarize]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/notarize
     *
     */
    notarizeTabs?: Notarize[];
    /**
     * A list of
     * [Note tabs][note].
     *
     * A Note tab displays additional information to the recipient in the form of a note. This value can be set.
     *
     * [note]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/note
     *
     */
    noteTabs?: Note[];
    /**
     * A list of
     * [Number tabs][number].
     * A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.
     * [number]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/number
     */
    numberTabs?: // tslint:disable-next-line: ban-types
    Number[];
    /**
     * This type of tab enables the recipient to strike through document text. This value can't be set.
     */
    polyLineOverlayTabs?: PolyLineOverlay[];
    /**
     * A list of [Radio Group tabs][radioGroup].
     * A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
     * buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
     * [radioGroup]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radioGroup
     */
    radioGroupTabs?: RadioGroup[];
    /**
     * A list of
     * [Signer Attachment tabs][signerAttachment].
     *
     * This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.
     *
     *
     * [signerAttachment]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signerAttachment
     *
     */
    signerAttachmentTabs?: SignerAttachment[];
    /**
     * A list of
     * [Sign Here tabs][signHere].
     *
     * This type of tab enables the recipient to sign a document. May be optional. This value can't be set.
     *
     * [signHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signHere
     *
     */
    signHereTabs?: SignHere[];
    /**
     * A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.
     *
     * Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.
     *
     * **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
     */
    smartSectionTabs?: SmartSection[];
    /**
     * A list of
     * [SSN tabs][ssn].
     *
     * An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
     * dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
     *
     *
     * [ssn]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/ssn
     *
     */
    ssnTabs?: Ssn[];
    /**
     * An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`,
     * you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroups?: TabGroup[];
    /**
     * A list of
     * [Text tabs][text].
     *
     * A text tab enables the recipient to enter free text. This value can be set.
     *
     * [text]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/text
     *
     */
    textTabs?: Text[];
    /**
     * A list of
     * [Title tabs][title].
     *
     * A Title tab displays the recipient's title.  This value can't be set.
     *
     *
     * [title]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/title
     *
     */
    titleTabs?: Title[];
    /**
     * A list of
     * [View tabs][view].
     *
     * A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.
     *
     * [view]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/view
     *
     */
    viewTabs?: /* This tab is used with the Approve tab to handle supplemental documents. */ View[];
    /**
     * A list of
     * [Zip tabs][zip].
     *
     * A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format),
     * and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.
     * This value can be set.
     *
     *
     * [zip]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/zip
     *
     */
    zipTabs?: Zip[];
}

export interface TabsBlob {
    /**
     * When set to **true**, account users can set a tab order for the signing process.
     *
     * **Note**: Only Admin users can change this setting.
     */
    allowTabOrder?: string;
    /**
     * Metadata that indicates whether the `allowTabOrder` property is editable.
     *
     */
    allowTabOrderMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, approve and decline tabs are enabled.
     */
    approveDeclineTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `approveDeclineTabs` property is editable.
     *
     */
    approveDeclineTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, [calculated fields](https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields) are enabled for tabs.
     */
    calculatedFieldsEnabled?: string;
    /**
     * Metadata that indicates whether the `calculatedFields` property is editable.
     *
     */
    calculatedFieldsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, checkbox tabs are enabled.
     */
    checkboxTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `checkBoxTabs` property is editable.
     */
    checkBoxTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, regular expressions are enabled for tabs that contain data fields.
     */
    dataFieldRegexEnabled?: string;
    /**
     * Metadata that indicates whether the `dataFieldRegex` property is editable.
     *
     */
    dataFieldRegexMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, setting character limits for input fields is enabled.
     */
    dataFieldSizeEnabled?: string;
    /**
     * Metadata that indicates whether the `dataFieldSize` property is editable.
     *
     */
    dataFieldSizeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;

    drawTabsEnabled?: string;

    drawTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    firstLastEmailTabsEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    firstLastEmailTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, list tabs are enabled.
     */
    listTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `listTabs` property is editable.
     *
     */
    listTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, note tabs are enabled.
     */
    noteTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `noteTabs` property is editable.
     *
     */
    noteTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, radio button tabs are enabled.
     */
    radioTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `radioTabs` property is editable.
     *
     */
    radioTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, saving custom tabs is enabled.
     */
    savingCustomTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `savingCustomTabs` property is editable.
     *
     */
    savingCustomTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    senderToChangeTabAssignmentsEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    senderToChangeTabAssignmentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, shared custom tabs are enabled.
     */
    sharedCustomTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `sharedCustomTabs` property is editable.
     *
     */
    sharedCustomTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, [data
     * labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    tabDataLabelEnabled?: string;
    /**
     * Metadata that indicates whether the `tabDataLabel` property is editable.
     *
     */
    tabDataLabelMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    tabLocationEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    tabLocationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, tab locking is enabled.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    tabLockingEnabled?: string;
    /**
     * Metadata that indicates whether the `tabLocking` property is editable.
     *
     */
    tabLockingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    tabScaleEnabled?: string;
    /**
     * Reserved for DocuSign.
     */
    tabScaleMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, text formatting (such as font type, font size,
     * font color, bold, italic, and underline) is enabled for tabs that
     * support formatting.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    tabTextFormattingEnabled?: string;
    /**
     * Metadata that indicates whether the `tabTextFormatting` property is editable.
     *
     */
    tabTextFormattingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, text tabs are enabled.
     */
    textTabsEnabled?: string;
    /**
     * Metadata that indicates whether the `textTabs` property is editable.
     *
     */
    textTabsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}

/**
 * Template bulk recipients
 */
export interface TemplateBulkRecipients {
    /**
     * A complex type containing information about the bulk recipients in the response.
     */
    bulkRecipients?: BulkRecipient[];
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

/**
 * A template custom field enables you to prepopulate custom metadata for all new envelopes that are created by using a specific template.
 * You can then use the custom data for sorting, organizing, searching, and other downstream processes.
 */
export interface TemplateCustomFields {
    /**
     * An array of list custom fields.
     */
    listCustomFields?: /* This object represents a list custom field from which envelope creators and senders can select custom data. */ ListCustomField[];
    /**
     * An array of text custom fields.
     */
    textCustomFields?: /* This object represents a free text custom field where envelope creators and senders can enter custom data. */ TextCustomField[];
}

/**
 * Template document fields
 */
export interface TemplateDocumentFields {
    /**
     * The array of name/value custom data strings to add to a document. Custom document field information is returned in the status,
     * but otherwise is not used by DocuSign. The array contains the following elements:
     *
     * * `name` - A string that can be a maximum of 50 characters.
     * * `value` - A string that can be a maximum of 200 characters.
     *
     * **Important**: If you are using XML, the name/value pair is contained in a `nameValue` element.
     *
     */
    documentFields?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
}

export interface TemplateDocumentHtmlDefinitions {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: DocumentHtmlDefinitionOriginal[];
}

/**
 * This resource is used to create a responsive preview of a specific template document.
 */
export interface TemplateDocumentResponsiveHtmlPreview {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: string[];
}

export interface TemplateDocumentTabs {
    /**
     * A list of
     * [Approve tabs][approve].
     *
     * An Approve tab enables
     * the recipient to approve documents without
     * placing a signature or initials on the document. If the
     * recipient clicks the tab during the signing process, the
     * recipient is considered to have signed the document. No
     * information is shown on the document of the approval, but it
     * is recorded as a signature in the envelope history.
     * The value of an approve tab can't be set.
     *
     * [approve]:		      https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/approve
     *
     */
    approveTabs?: Approve[];
    /**
     * A list of
     * [Checkbox tabs][checkbox].
     *
     *
     * A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
     *
     *
     * [checkbox]:  https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/checkbox
     *
     */
    checkboxTabs?: Checkbox[];
    /**
     * An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document,
     * they can add a comment to the document and control who else can see the comment. This value can't be set.
     */
    commentThreadTabs?: CommentThread[];
    /**
     * A list of
     * [Company tabs][company].
     *
     *
     * A Company tab displays a field for the name of the recipient's company. This value can't be set.
     *
     *
     *
     * [company]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
     *
     */
    companyTabs?: Company[];
    /**
     * A list of
     * [Date Signed tabs][dateSigned].
     *
     *
     * A Date Signed tab displays the date that the recipient signed the document. This value can't be set.
     *
     * [dateSigned]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/dateSigned
     *
     */
    dateSignedTabs?: DateSigned[];
    /**
     * A list of
     * [Date tabs][date].
     *
     * A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY,
     * but this format is not enforced. The system retains the format that the recipient enters.
     *
     * **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.
     *
     *
     * [date]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/date
     *
     */
    dateTabs?: Date[];
    /**
     * A list of
     * [Decline tabs][decline].
     *
     * A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided.
     * The value of this tab can't be set.
     *
     *
     * [decline]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/decline
     *
     */
    declineTabs?: Decline[];

    drawTabs?: Draw[];
    /**
     * A list of
     * [Email Address tabs][emailAddress].
     *
     * An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.
     *
     *
     * [emailAddress]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/emailAddress
     *
     */
    emailAddressTabs?: EmailAddress[];
    /**
     * A list of
     * [Email tabs][email].
     *
     * An Email tab enables the recipient to enter an email address.
     * This is a one-line field that checks that a valid email
     * address is entered. It uses the same parameters as a Text
     * tab, with the validation message and pattern set for email
     * information. This value can be set.
     *
     * When getting information that includes
     * this tab type, the original value of the tab when the
     * associated envelope was sent is included in the response.
     *
     * [email]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/email
     *
     */
    emailTabs?: Email[];
    /**
     * A list of
     * [Envelope ID tabs][envelopeId].
     *
     * An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.
     *
     *
     * [envelopeId]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
     *
     */
    envelopeIdTabs?: EnvelopeId[];
    /**
     * A list of
     * [First Name tabs][firstName].
     *
     * A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces.
     * This value can't be set.
     *
     *
     * [firstName]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
     *
     */
    firstNameTabs?: FirstName[];
    /**
     * A list of [Formula tabs][formulaTab].
     *
     * The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields,
     * the Formula tab calculates and displays the result. This value can be set.
     *
     * The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].
     *
     * If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see
     * [Requesting Payments Along with Signatures][paymentguide].
     *
     * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     * [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     * [formulaTab]:	    	https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/formulaTab
     *
     */
    formulaTabs?: FormulaTab[];
    /**
     * A list of
     * [Full Name tabs][fullName].
     *
     * A Full Name tab displays the recipient's full name. This value can't be set.
     *
     *
     * [fullName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/fullName
     *
     */
    fullNameTabs?: FullName[];
    /**
     * A list of
     * [Initial Here tabs][initialHere].
     *
     * This type of tab enables the recipient to initial the document. May be optional. This value can't be set.
     *
     * [initialHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/initialHere
     *
     */
    initialHereTabs?: InitialHere[];
    /**
     * A list of
     * [Last Name tabs][lastName].
     *
     * A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces.
     * This value can't be set.
     *
     *
     * [lastName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/lastName
     *
     */
    lastNameTabs?: LastName[];
    /**
     * A list of [List tabs][list].
     * A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.
     * [list]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/list
     */
    listTabs?: List[];
    /**
     * A list of  [Notarize tabs][notarize].
     *
     * A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.
     *
     * **Note**: Only one notarize tab can appear on a page.
     *
     * [notarize]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/notarize
     *
     */
    notarizeTabs?: Notarize[];
    /**
     * A list of
     * [Note tabs][note].
     *
     * A Note tab displays additional information to the recipient in the form of a note. This value can be set.
     *
     * [note]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/note
     *
     */
    noteTabs?: Note[];
    /**
     * A list of
     * [Number tabs][number].
     * A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.
     * [number]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/number
     */
    // tslint:disable-next-line: ban-types
    numberTabs?: Number[];
    /**
     * This type of tab enables the recipient to strike through document text. This value can't be set.
     */
    polyLineOverlayTabs?: PolyLineOverlay[];
    /**
     * A list of [Radio Group tabs][radioGroup].
     *
     * A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
     * buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
     * [radioGroup]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radioGroup
     *
     */
    radioGroupTabs?: RadioGroup[];
    /**
     * A list of
     * [Signer Attachment tabs][signerAttachment].
     *
     * This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.
     * [signerAttachment]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signerAttachment
     */
    signerAttachmentTabs?: SignerAttachment[];
    /**
     * A list of
     * [Sign Here tabs][signHere].
     *
     * This type of tab enables the recipient to sign a document. May be optional. This value can't be set.
     *
     * [signHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signHere
     *
     */
    signHereTabs?: SignHere[];
    /**
     * A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.
     *
     * Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.
     *
     * **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
     */
    smartSectionTabs?: SmartSection[];
    /**
     * A list of
     * [SSN tabs][ssn].
     *
     * An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
     * dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
     *
     *
     * [ssn]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/ssn
     *
     */
    ssnTabs?: Ssn[];
    /**
     * An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroups?: TabGroup[];
    /**
     * A list of
     * [Text tabs][text].
     *
     * A text tab enables the recipient to enter free text. This value can be set.
     *
     * [text]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/text
     *
     */
    textTabs?: Text[];
    /**
     * A list of
     * [Title tabs][title].
     *
     * A Title tab displays the recipient's title.  This value can't be set.
     *
     *
     * [title]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/title
     *
     */
    titleTabs?: Title[];
    /**
     * A list of
     * [View tabs][view].
     *
     * A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.
     *
     * [view]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/view
     *
     */
    viewTabs?: /* This tab is used with the Approve tab to handle supplemental documents. */ View[];
    /**
     * A list of
     * [Zip tabs][zip].
     *
     * A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes.
     * It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.
     *
     *
     * [zip]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/zip
     *
     */
    zipTabs?: Zip[];
}

/**
 * Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example,
 * if the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the
 * documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates.
 * It is not available for PowerForms.
 *
 * **Note**: Before you use Document Visibility, you should be aware of the following information:
 *
 * - Document Visibility must be enabled for your account by your DocuSign administrator.
 * - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document.
 * - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents,
 * or page images.
 * - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.
 *
 * The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information,
 * see [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
 */
export interface TemplateDocumentVisibility {
    /**
     * An array of `documentVisibility` objects that specifies which documents are visible to which recipients.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
}

/**
 * A list of `documentVisibility` objects that specify whether the documents associated with a template are visible to recipients.
 */
export interface TemplateDocumentVisibilityList {
    /**
     * An array of `documentVisibility` objects that specifies which documents are visible to which recipients.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
}

/**
 * Template documents
 */
export interface TemplateDocuments {
    /**
     * An array of document objects that contain information about the documents associated with the template.
     */
    templateDocuments?: /* This object contains details about the envelope document. */ EnvelopeDocument[];
    /**
     * The id of the template. If a value is not provided, DocuSign generates a value.
     */
    templateId?: string;
}

export interface TemplateDocumentsResult {
    /**
     * An array of document objects that contain information about the documents associated with the template.
     */
    templateDocuments?: /* This object contains details about the envelope document. */ EnvelopeDocument[];
    /**
     * The id of the template.
     */
    templateId?: string;
}

export interface TemplateHtmlDefinitions {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: DocumentHtmlDefinitionOriginal[];
}

export interface TemplateInformation {
    /**
     * An array of `templateSummary` objects that contain information about templates.
     */
    templates?: /* Summary of a template request. */ TemplateSummary[];
}
/**
 * This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
 */
export interface TemplateLocks {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Sets the time, in seconds, until the lock expires when there is no activity on the envelope.
     *
     * If no value is entered, then the default value of 300 seconds is used. The maximum value is 1,800 seconds.
     *
     * The lock duration can be extended.
     *
     */
    lockDurationInSeconds?: string;
    /**
     * Specifies the friendly name of  the application that is locking the envelope.
     */
    lockedByApp?: string;
    /**
     * A complex type containing information about the user that has the envelope or template locked.
     */
    lockedByUser?: UserInfo;
    /**
     * The date and time that the lock expires.
     */
    lockedUntilDateTime?: string;
    /**
     * A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock.
     */
    lockToken?: string;
    /**
     * The type of lock.  Currently `edit` is the only supported type.
     */
    lockType?: string;
    /**
     * When set to **true**, a scratchpad is used to edit information.
     *
     */
    useScratchPad?: string;
}

export interface TemplateMatch {
    documentEndPage?: string;
    documentStartPage?: string;
    matchPercentage?: string;
}

export interface TemplateNotificationRequest {
    /**
     * A complex element that specifies the expiration settings for the envelope.
     */
    expirations?: /* A complex element that specifies the expiration settings for the envelope. */ Expirations;
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * A complex element that specifies reminder settings for the envelope
     */
    reminders?: /* A complex element that specifies reminder settings for the envelope. */ Reminders;
    /**
     * When set to **true**, the account default notification settings are used for the envelope, overriding the reminders and expirations settings.
     * When set to **false**, the reminders and expirations settings specified in this request are used.
     */
    useAccountDefaults?: string;
}

/**
 * Template tabs
 */
export interface TemplateRecipientTabs {
    /**
     * A list of
     * [Approve tabs][approve].
     *
     * An Approve tab enables
     * the recipient to approve documents without
     * placing a signature or initials on the document. If the
     * recipient clicks the tab during the signing process, the
     * recipient is considered to have signed the document. No
     * information is shown on the document of the approval, but it
     * is recorded as a signature in the envelope history.
     * The value of an approve tab can't be set.
     *
     * [approve]:		      https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/approve
     */
    approveTabs?: Approve[];
    /**
     * A list of
     * [Checkbox tabs][checkbox].
     * A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
     * [checkbox]:  https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/checkbox
     */
    checkboxTabs?: Checkbox[];
    /**
     * An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a
     * document, they can add a comment to the document and control who else can see the comment. This value can't be set.
     */
    commentThreadTabs?: CommentThread[];
    /**
     * A list of
     * [Company tabs][company].
     * A Company tab displays a field for the name of the recipient's company. This value can't be set.
     * [company]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
     */
    companyTabs?: Company[];
    /**
     * A list of
     * [Date Signed tabs][dateSigned].
     * A Date Signed tab displays the date that the recipient signed the document. This value can't be set.
     * [dateSigned]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/dateSigned
     */
    dateSignedTabs?: DateSigned[];
    /**
     * A list of
     * [Date tabs][date].
     *
     * A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY,
     * but this format is not enforced. The system retains the format that the recipient enters.
     *
     * **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.
     * [date]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/date
     */
    dateTabs?: Date[];
    /**
     * A list of
     * [Decline tabs][decline].
     * A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided.
     * The value of this tab can't be set.
     * [decline]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/decline
     */
    declineTabs?: Decline[];

    drawTabs?: Draw[];
    /**
     * A list of
     * [Email Address tabs][emailAddress].
     * An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.
     */
    emailAddressTabs?: EmailAddress[];
    /**
     * A list of
     * [Email tabs][email].
     *
     * An Email tab enables the recipient to enter an email address.
     * This is a one-line field that checks that a valid email
     * address is entered. It uses the same parameters as a Text
     * tab, with the validation message and pattern set for email
     * information. This value can be set.
     *
     * When getting information that includes
     * this tab type, the original value of the tab when the
     * associated envelope was sent is included in the response.
     *
     * [email]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/email
     */
    emailTabs?: Email[];
    /**
     * A list of
     * [Envelope ID tabs][envelopeId].
     *
     * An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.
     *
     *
     * [envelopeId]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
     *
     */
    envelopeIdTabs?: EnvelopeId[];
    /**
     * A list of
     * [First Name tabs][firstName].
     *
     * A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces.
     * This value can't be set.
     *
     *
     * [firstName]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
     *
     */
    firstNameTabs?: FirstName[];
    /**
     * A list of [Formula tabs][formulaTab].
     *
     * The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields,
     * the Formula tab calculates and displays the result. This value can be set.
     *
     * The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].
     *
     * If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see
     * [Requesting Payments Along with Signatures][paymentguide].
     *
     * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     * [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     * [formulaTab]:	    	https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/formulaTab
     *
     */
    formulaTabs?: FormulaTab[];
    /**
     * A list of
     * [Full Name tabs][fullName].
     *
     * A Full Name tab displays the recipient's full name. This value can't be set.
     *
     *
     * [fullName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/fullName
     *
     */
    fullNameTabs?: FullName[];
    /**
     * A list of
     * [Initial Here tabs][initialHere].
     *
     * This type of tab enables the recipient to initial the document. May be optional. This value can't be set.
     *
     * [initialHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/initialHere
     *
     */
    initialHereTabs?: InitialHere[];
    /**
     * A list of
     * [Last Name tabs][lastName].
     *
     * A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the
     * recipient information on spaces. This value can't be set.
     *
     *
     * [lastName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/lastName
     *
     */
    lastNameTabs?: LastName[];
    /**
     * A list of [List tabs][list].
     * A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.
     * [list]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/list
     */
    listTabs?: List[];
    /**
     * A list of  [Notarize tabs][notarize].
     *
     * A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.
     *
     * **Note**: Only one notarize tab can appear on a page.
     *
     * [notarize]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/notarize
     *
     */
    notarizeTabs?: Notarize[];
    /**
     * A list of
     * [Note tabs][note].
     *
     * A Note tab displays additional information to the recipient in the form of a note. This value can be set.
     *
     * [note]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/note
     *
     */
    noteTabs?: Note[];
    /**
     * A list of
     * [Number tabs][number].
     * A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.
     * [number]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/number
     */
    // tslint:disable-next-line: ban-types
    numberTabs?: Number[];
    /**
     * This type of tab enables the recipient to strike through document text. This value can't be set.
     */
    polyLineOverlayTabs?: PolyLineOverlay[];
    /**
     * A list of [Radio Group tabs][radioGroup].
     * A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
     * buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
     * [radioGroup]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radioGroup
     */
    radioGroupTabs?: RadioGroup[];
    /**
     * A list of
     * [Signer Attachment tabs][signerAttachment].
     * This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.
     * [signerAttachment]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signerAttachment
     */
    signerAttachmentTabs?: SignerAttachment[];
    /**
     * A list of
     * [Sign Here tabs][signHere].
     * This type of tab enables the recipient to sign a document. May be optional. This value can't be set.
     * [signHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signHere
     */
    signHereTabs?: SignHere[];
    /**
     * A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.
     * Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.
     * **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
     */
    smartSectionTabs?: SmartSection[];
    /**
     * A list of
     * [SSN tabs][ssn].
     *
     * An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
     * dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
     *
     *
     * [ssn]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/ssn
     *
     */
    ssnTabs?: Ssn[];
    /**
     * An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroups?: TabGroup[];
    /**
     * A list of
     * [Text tabs][text].
     *
     * A text tab enables the recipient to enter free text. This value can be set.
     *
     * [text]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/text
     *
     */
    textTabs?: Text[];
    /**
     * A list of
     * [Title tabs][title].
     *
     * A Title tab displays the recipient's title.  This value can't be set.
     *
     *
     * [title]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/title
     *
     */
    titleTabs?: Title[];
    /**
     * A list of
     * [View tabs][view].
     *
     * A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.
     *
     * [view]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/view
     *
     */
    viewTabs?: /* This tab is used with the Approve tab to handle supplemental documents. */ View[];
    /**
     * A list of
     * [Zip tabs][zip].
     *
     * A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes.
     * It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.
     *
     *
     * [zip]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/zip
     *
     */
    zipTabs?: Zip[];
}

/**
 * Template recipients
 */
export interface TemplateRecipients {
    /**
     * A list of agent recipients assigned to the documents.
     */
    agents?: /* Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after
        the agent in routing order. */ Agent[];
    /**
     * A list of carbon copy recipients assigned to the documents.
     */
    carbonCopies?: /* Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial,
        date or add information to any of the documents.  */ CarbonCopy[];
    /**
     * A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign,
     * initial, date, or add information to any of the documents.
     */
    certifiedDeliveries?: CertifiedDelivery[];
    /**
     * The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient,
     * but he or she has not completed the required actions.
     */
    currentRoutingOrder?: string;
    /**
     * A complex type defining the management and access rights of a recipient assigned assigned as an editor on the document.
     */
    editors?: /* A complex type defining the management and access rights of a recipient assigned as an editor on the envelope.
        Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature.
        This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally,
        this recipient can edit signature/initial tabs and text tabs for the remaining recipients. */ Editor[];
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction.
     * The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
     */
    inPersonSigners?: InPersonSigner[];
    /**
     * Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order
     * (until subsequent Agents, Editors or Intermediaries recipient types are added).
     */
    intermediaries?: /* Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to,
        add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added. */ Intermediary[];
    /**
     * The number of recipients in the envelope.
     */
    recipientCount?: string;
    /**
     * Specifies one or more electronic seals to apply on documents. For more information on Electronic Seals ,
     * see https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals
     */
    seals?: SealSign[];
    /**
     * A list of signers on the envelope.
     */
    signers?: Signer[];
    /**
     * A list of signers who act as witnesses on the envelope.
     */
    witnesses?: /* A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers
        have signed the documents in the envelope. */ Witness[];
}

/**
 * This resource is used to create a responsive preview of all of the documents associated with a template.
 */
export interface TemplateResponsiveHtmlPreview {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    htmlDefinitions?: string[];
}

export interface TemplateRole {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating
     * the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**,
     * an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
     */
    defaultRecipient?: string;
    /**
     * Specifies the email associated with a role name.
     */
    email?: string;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients,
     * the other recipients will inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign,
     * just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign,
     * to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL)
     * must request a recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign.
     * The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this.
     * In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application.
     * DocuSign expects that senders will follow their own processes for establishing the recipient's identity.
     * In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated.
     * However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or
     * viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, D
     * ocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.)
     * to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard
     * signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are:
     * `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope.
     * The merge fields are enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * Specifies the full legal name of the signer in person signer template roles.
     *
     * Maximum Length: 100 characters.
     */
    inPersonSignerName?: string;
    /**
     * Specifies the recipient's name.
     */
    name?: string;
    /**
     * The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature
     * (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    recipientSignatureProviders?: RecipientSignatureProvider[];
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     * For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients.
     * However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value,
     * such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or
     * enter data. They may also display data to the recipients.
     */
    tabs?: EnvelopeRecipientTabs;
}

/**
 * Information about shared templates.
 */
export interface TemplateSharedItem {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Information about the user who owns the template.
     */
    owner?: UserInfo;
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * How the template is shared. One of:
     *
     * - `not_shared`
     * - `shared_to`
     *
     */
    shared?: string;
    /**
     * List of groups that share the template.
     */
    sharedGroups?: /* Information about items shared among groups. */ MemberGroupSharedItem[];
    /**
     * List of users that share the template.
     */
    sharedUsers?: /* Information about a shared item. */ UserSharedItem[];
    /**
     * The unique identifier of the template. If this is not provided, DocuSign will generate a value.
     */
    templateId?: string;
    /**
     * The name of the shared template.
     */
    templateName?: string;
}

/**
 * Summary of a template request.
 */
export interface TemplateSummary {
    /**
     * Reserved for DocuSign.
     */
    applied?: string;
    /**
     * Specifies the document ID number that the tab is placed on. This must refer to an existing document's id attribute.
     */
    documentId?: string;
    /**
     * The name of the document.
     */
    documentName?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The name of the template.
     */
    name?: string;
    /**
     * The unique identifier of the template. If this is not provided, DocuSign will generate a value.
     */
    templateId?: string;

    templateMatch?: TemplateMatch;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
}

export interface TemplateTabs {
    /**
     * A list of
     * [Approve tabs][approve].
     *
     * An Approve tab enables
     * the recipient to approve documents without
     * placing a signature or initials on the document. If the
     * recipient clicks the tab during the signing process, the
     * recipient is considered to have signed the document. No
     * information is shown on the document of the approval, but it
     * is recorded as a signature in the envelope history.
     * The value of an approve tab can't be set.
     *
     * [approve]:		      https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/approve
     *
     */
    approveTabs?: Approve[];
    /**
     * A list of
     * [Checkbox tabs][checkbox].
     *
     *
     * A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
     *
     *
     * [checkbox]:  https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/checkbox
     *
     */
    checkboxTabs?: Checkbox[];
    /**
     * An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document,
     * they can add a comment to the document and control who else can see the comment. This value can't be set.
     */
    commentThreadTabs?: CommentThread[];
    /**
     * A list of
     * [Company tabs][company].
     *
     *
     * A Company tab displays a field for the name of the recipient's company. This value can't be set.
     *
     *
     *
     * [company]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
     *
     */
    companyTabs?: Company[];
    /**
     * A list of
     * [Date Signed tabs][dateSigned].
     *
     *
     * A Date Signed tab displays the date that the recipient signed the document. This value can't be set.
     *
     * [dateSigned]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/dateSigned
     *
     */
    dateSignedTabs?: DateSigned[];
    /**
     * A list of
     * [Date tabs][date].
     *
     * A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY,
     * but this format is not enforced. The system retains the format that the recipient enters.
     *
     * **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.
     *
     *
     * [date]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/date
     *
     */
    dateTabs?: Date[];
    /**
     * A list of
     * [Decline tabs][decline].
     *
     * A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided.
     * The value of this tab can't be set.
     *
     *
     * [decline]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/decline
     *
     */
    declineTabs?: Decline[];

    drawTabs?: Draw[];
    /**
     * A list of
     * [Email Address tabs][emailAddress].
     *
     * An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.
     *
     *
     * [emailAddress]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/emailAddress
     *
     */
    emailAddressTabs?: EmailAddress[];
    /**
     * A list of
     * [Email tabs][email].
     *
     * An Email tab enables the recipient to enter an email address.
     * This is a one-line field that checks that a valid email
     * address is entered. It uses the same parameters as a Text
     * tab, with the validation message and pattern set for email
     * information. This value can be set.
     *
     * When getting information that includes
     * this tab type, the original value of the tab when the
     * associated envelope was sent is included in the response.
     *
     * [email]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/email
     *
     */
    emailTabs?: Email[];
    /**
     * A list of
     * [Envelope ID tabs][envelopeId].
     *
     * An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.
     *
     *
     * [envelopeId]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
     *
     */
    envelopeIdTabs?: EnvelopeId[];
    /**
     * A list of
     * [First Name tabs][firstName].
     *
     * A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces.
     * This value can't be set.
     *
     *
     * [firstName]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
     *
     */
    firstNameTabs?: FirstName[];
    /**
     * A list of [Formula tabs][formulaTab].
     *
     * The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields,
     * the Formula tab calculates and displays the result. This value can be set.
     *
     * The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].
     *
     * If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments
     * Along with Signatures][paymentguide].
     *
     * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     * [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     * [formulaTab]:	    	https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/formulaTab
     *
     */
    formulaTabs?: FormulaTab[];
    /**
     * A list of
     * [Full Name tabs][fullName].
     *
     * A Full Name tab displays the recipient's full name. This value can't be set.
     *
     *
     * [fullName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/fullName
     *
     */
    fullNameTabs?: FullName[];
    /**
     * A list of
     * [Initial Here tabs][initialHere].
     *
     * This type of tab enables the recipient to initial the document. May be optional. This value can't be set.
     *
     * [initialHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/initialHere
     *
     */
    initialHereTabs?: InitialHere[];
    /**
     * A list of
     * [Last Name tabs][lastName].
     *
     * A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces.
     * This value can't be set.
     *
     *
     * [lastName]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/lastName
     *
     */
    lastNameTabs?: LastName[];
    /**
     * A list of [List tabs][list].
     * A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.
     * [list]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/list
     */
    listTabs?: List[];
    /**
     * A list of  [Notarize tabs][notarize].
     *
     * A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.
     *
     * **Note**: Only one notarize tab can appear on a page.
     *
     * [notarize]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/notarize
     *
     */
    notarizeTabs?: Notarize[];
    /**
     * A list of
     * [Note tabs][note].
     *
     * A Note tab displays additional information to the recipient in the form of a note. This value can be set.
     *
     * [note]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/note
     *
     */
    noteTabs?: Note[];
    /**
     * A list of
     * [Number tabs][number].
     *
     * A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.
     * [number]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/number
     */
    // tslint:disable-next-line: ban-types
    numberTabs?: Number[];
    /**
     * This type of tab enables the recipient to strike through document text. This value can't be set.
     */
    polyLineOverlayTabs?: PolyLineOverlay[];
    /**
     * A list of [Radio Group tabs][radioGroup].
     * A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
     * buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
     * [radioGroup]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radioGroup
     */
    radioGroupTabs?: RadioGroup[];
    /**
     * A list of
     * [Signer Attachment tabs][signerAttachment].
     *
     * This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.
     *
     *
     * [signerAttachment]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signerAttachment
     *
     */
    signerAttachmentTabs?: SignerAttachment[];
    /**
     * A list of
     * [Sign Here tabs][signHere].
     *
     * This type of tab enables the recipient to sign a document. May be optional. This value can't be set.
     *
     * [signHere]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/signHere
     *
     */
    signHereTabs?: SignHere[];
    /**
     * A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.
     *
     * Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.
     *
     * **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
     */
    smartSectionTabs?: SmartSection[];
    /**
     * A list of
     * [SSN tabs][ssn].
     *
     * An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
     * dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
     *
     *
     * [ssn]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/ssn
     *
     */
    ssnTabs?: Ssn[];
    /**
     * An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroups?: TabGroup[];
    /**
     * A list of
     * [Text tabs][text].
     *
     * A text tab enables the recipient to enter free text. This value can be set.
     *
     * [text]: https://developers.docusign.com/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/text
     *
     */
    textTabs?: Text[];
    /**
     * A list of
     * [Title tabs][title].
     *
     * A Title tab displays the recipient's title.  This value can't be set.
     *
     *
     * [title]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/title
     *
     */
    titleTabs?: Title[];
    /**
     * A list of
     * [View tabs][view].
     *
     * A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.
     *
     * [view]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/view
     *
     */
    viewTabs?: /* This tab is used with the Approve tab to handle supplemental documents. */ View[];
    /**
     * A list of
     * [Zip tabs][zip].
     *
     * A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes.
     * It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.
     *
     *
     * [zip]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/zip
     *
     */
    zipTabs?: Zip[];
}

export interface TemplateUpdateSummary {
    /**
     * An object that describes the status of the bulk send envelopes.
     */
    bulkEnvelopeStatus?: BulkEnvelopeStatus;
    /**
     * The envelope ID of the envelope status that failed to post.
     */
    envelopeId?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;

    listCustomFieldUpdateResults?: /* This object represents a list custom field from which envelope creators and senders can select custom data. */ ListCustomField[];
    /**
     * Provides lock information about an envelope that a user has locked.
     */
    lockInformation?: /* This section provides information about envelope locks. */ EnvelopeLocks;
    /**
     * Shows the current purge state for the envelope. The possible values are:
     *
     * * `unpurged`: There has been no successful request to purge documents.
     * * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
     * * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
     * * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
     * * `documents_purged`: The envelope documents have been successfully purged.
     * * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.
     */
    purgeState?: string;
    /**
     * An array of `recipientUpdateResults` objects that contain details about the recipients.
     */
    recipientUpdateResults?: /* The recipient details that are returned after you update the recipient. */ RecipientUpdateResponse[];

    tabUpdateResults?: EnvelopeRecipientTabs;

    textCustomFieldUpdateResults?: /* This object represents a free text custom field where envelope creators and senders can enter custom data. */ TextCustomField[];
}

/**
 * A TemplateView contains a URL that you can embed in your application to generate a template view that uses the DocuSign user export interface (UI).
 */
export interface TemplateViews {
    /**
     * The URL that you navigate to in order to start the view.
     */
    url?: string;
}

/**
 * Template management
 */
export interface Templates {
    /**
     * Reserved for DocuSign.
     */
    accessControlListBase64?: string;
    /**
     * When set to **true**, indicates that comments are allowed on the envelope.
     */
    allowComments?: string;
    /**
     * When set to **true**, the Document Markup feature is enabled.
     *
     * **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
     */
    allowMarkup?: string;
    /**
     * When **true**, the recipient can redirect an envelope to a more appropriate recipient.
     */
    allowReassign?: string;
    /**
     * When set to **true**, recipients can view the history of the envelope.
     */
    allowViewHistory?: string;
    /**
     * Deprecated. This feature has been replaced by signing groups.
     */
    anySigner?: string;
    /**
     * When **true**, the envelope is queued for processing and the value of the `status` property is set to `Processing`.
     * Additionally, GET status calls return `Processing` until completed.
     *
     *
     * **Note**: A `transactionId` is required for this call to work correctly. When the envelope is created,
     * the status is `Processing` and an `envelopeId` is not returned in the response. To get the `envelopeId`,
     * use a GET envelope query by using the [transactionId](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/create/#envelopeDefinition)
     * or by checking the Connect notification.
     */
    asynchronous?: string;
    /**
     * Contains a URL for retrieving the attachments that are associated with the envelope.
     */
    attachmentsUri?: string;
    /**
     * When **true**, marks all of the documents in the envelope as authoritative copies.
     *
     * **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level,
     * but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
     */
    authoritativeCopy?: string;
    /**
     * The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
     * If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
     */
    authoritativeCopyDefault?: string;
    /**
     * By default, templates that have been used within
     * the last 60 days are included in auto-matching.
     *
     * By explicitly setting `autoMatch`,
     * you can permanently include or exclude the template
     * in auto matching.
     *
     * When **true** the template is included in auto-matching
     * regardless of when it was last used.
     *
     * When **false** the template is never included in auto-matching.
     */
    autoMatch?: string;
    /**
     * If **true**, the template has been explicitly included in or excluded from auto-matching. The default is false.
     * This is a read-only property.
     */
    autoMatchSpecifiedByUser?: string;
    /**
     * When set to **true**, autonavigation is set for the recipient.
     *
     */
    autoNavigation?: string;
    /**
     * The id of the brand.
     */
    brandId?: string;
    /**
     * When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
     */
    brandLock?: string;
    /**
     * The URI for retrieving certificate information.
     */
    certificateUri?: string;
    /**
     * Specifies the date and time this item was completed.
     */
    completedDateTime?: string;

    copyRecipientData?: string;
    /**
     * The UTC DateTime when the workspace user authorization was created.
     */
    created?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient.
     * This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: /* An `accountCustomField` is an envelope custom field that you set at the account level.
          Applying custom fields enables account administators to group and manage envelopes.  */ AccountCustomFields;
    /**
     * The URI for retrieving custom fields.
     */
    customFieldsUri?: string;
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deletedDateTime?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * A sender-defined description of the line item.
     *
     */
    description?: string;
    /**
     * When set to **true**, responsive documents are disabled for the envelope.
     */
    disableResponsiveDocument?: string;
    /**
     * A complex element that contains details about the documents associated with the envelope.
     */
    documents?: /* A document object. */ Document[];
    /**
     * The URI for retrieving all of the documents associated with the envelope as a single PDF file.
     */
    documentsCombinedUri?: string;
    /**
     * The URI for retrieving all of the documents associated with the envelope as separate files.
     */
    documentsUri?: string;
    /**
     * This is the same as the email body. If the sender enters an email blurb, it is included in the email body for all envelope recipients.
     */
    emailBlurb?: string;
    /**
     * A complex type that contains email settings.
     */
    emailSettings?: EmailSettings;
    /**
     * The subject line of the email message that is sent to all recipients.
     *
     * For information about adding merge field information to the email subject,
     * see [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
     *
     */
    emailSubject?: string;
    /**
     * When set to **true**, the signer is allowed to print the document and sign it on paper.
     */
    enableWetSign?: string;
    /**
     * When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries)
     * or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using
     * this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients,
     * unless they are specifically excluded by using this setting when an envelope is sent.
     *
     * **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.
     *
     * [docviz]: /esign/restapi/Envelopes/EnvelopeDocumentVisibility
     */
    enforceSignerVisibility?: string;
    /**
     * An array of attachment objects that provide information about the attachments that are associated with the envelope.
     */
    envelopeAttachments?: /* Contains information about an attachment. */ Attachment[];
    /**
     * An array containing information about the documents that are included in the envelope.
     */
    envelopeDocuments?: /* This object contains details about the envelope document. */ EnvelopeDocument[];
    /**
     * The envelope ID of the envelope status that failed to post.
     */
    envelopeId?: string;
    /**
     * When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
     * After a document or attachment is stamped with an Envelope ID,
     * the ID is seen by all recipients
     * and becomes a permanent part of the document
     * and cannot be removed.
     */
    envelopeIdStamping?: string;
    /**
     * Reserved for DocuSign.
     */
    envelopeLocation?: string;
    /**
     * Provides information about the features and services that are enabled for the envelope,
     * including the Correct feature, the Advanced Correct feature, and DocuSign eNotary service.
     */
    envelopeMetadata?: EnvelopeMetadata;
    /**
     * The URI for retrieving the envelope or envelopes.
     */
    envelopeUri?: string;
    /**
     * An integer specifying the number of days that a sent envelope remains active before it expires.
     * A negative number in a response indicates that the envelope has already expired.
     */
    expireAfter?: string;
    /**
     * The date and time the envelope is set to expire.
     */
    expireDateTime?: string;
    /**
     * When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`).
     * Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used.
     * If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
     */
    expireEnabled?: string;
    /**
     * May contain an external identifier for the envelope.
     */
    externalEnvelopeId?: string;

    favoritedByMe?: string;
    /**
     * The unique identifier for the folder that the template belongs to.
     */
    folderId?: string;
    /**
     * An array of folder IDs that the template is in.
     */
    folderIds?: string[];
    /**
     * The name of the folder the template belongs to.
     */
    folderName?: string;
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * When set to **true**, indicates that users have added comments to the envelope.
     */
    hasComments?: string;
    /**
     * Specifies if the `EnvelopeFormData` associated with any forms in the template has changed.
     */
    hasFormDataChanged?: string;
    /**
     * When set to **true**, indicates that the template includes a .wav file.
     */
    hasWavFile?: string;
    /**
     * Reserved for DocuSign.
     */
    holder?: string;
    /**
     * The date and time the envelope that used the template was initially sent.
     */
    initialSentDateTime?: string;
    /**
     * When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
     */
    is21CFRPart11?: string;
    /**
     * When set to **true**, indicates that the envelope is a dynamic envelope.
     */
    isDynamicEnvelope?: string;
    /**
     * When set to **true**, indicates that the envelope is a signature-provided envelope.
     */
    isSignatureProviderEnvelope?: string;
    /**
     * The UTC date and time that the comment was last updated.
     *
     * **Note**: This can only be done by the creator.
     */
    lastModified?: string;
    /**
     * The userId of the user who last modified the template.
     */
    lastModifiedBy?: UserInfo;
    /**
     * The date and time the template was last modified.
     */
    lastModifiedDateTime?: string;
    /**
     * The date and time the template was last used.
     */
    lastUsed?: string;
    /**
     * Reserved for DocuSign.
     */
    location?: string;
    /**
     * Provides lock information about an envelope that a user has locked.
     */
    lockInformation?: /* This section provides information about envelope locks. */ EnvelopeLocks;
    /**
     * When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope.
     *
     * Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes.
     *
     * However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
     */
    messageLock?: string;
    /**
     * The name of the template.
     */
    name?: string;
    /**
     * The user's new password.
     */
    newPassword?: string;
    /**
     * A complex element that specifies the notification options for envelopes that use the template.
     */
    notification?: /* A complex element that specifies the notification settings for the envelope. */ Notification;
    /**
     * The URI for retrieving notifications.
     */
    notificationUri?: string;
    /**
     * The owner of the template.
     */
    owner?: UserInfo;
    /**
     * An integer value specifying the number of document pages in the template.
     */
    pageCount?: string;
    /**
     * The password for editing the template.
     */
    password?: string;
    /**
     * If **true**, a password is required to edit the template.
     */
    passwordProtected?: string;
    /**
     * A PowerForm objects that contain information about any PowerForms that are included in the template.
     */
    powerForm?: /* Contains details about a PowerForm. */ PowerForm;
    /**
     * An array of PowerForm objects that contain information about any PowerForms that are included in the template.
     */
    powerForms?: /* Contains details about a PowerForm. */ PowerForm[];
    /**
     * The date that a purge was completed.
     */
    purgeCompletedDate?: string;
    /**
     * The date that a purge was requested.
     */
    purgeRequestDate?: string;
    /**
     * Shows the current purge state for the envelope. The possible values are:
     *
     * * `unpurged`: There has been no successful request to purge documents.
     * * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
     * * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
     * * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
     * * `documents_purged`: The envelope documents have been successfully purged.
     * * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.
     */
    purgeState?: string;
    /**
     * An array of recipient objects.
     */
    recipients?: /* Envelope recipients */ EnvelopeRecipients;
    /**
     * When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
     */
    recipientsLock?: string;
    /**
     * Contains a URI for an endpoint that you can use to retrieve the recipients.
     */
    recipientsUri?: string;
    /**
     * Information about the sender.
     */
    sender?: UserInfo;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * When **true**, indicates the template is shared with the **Everyone** group,
     * and is shared with all users on the account.
     *
     * If **false**, the template is only shared with the **Administrator** group.
     *
     */
    shared?: string;
    /**
     * When set to **true**, recipients can sign on a mobile device.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    signerCanSignOnMobile?: string;
    /**
     * Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
     */
    signingLocation?: string;
    /**
     * Indicates the envelope status. Valid values are:
     *
     * * `sent` - The envelope is sent to the recipients.
     * * `created` - The envelope is saved as a draft and can be modified and sent later.
     */
    status?: string;
    /**
     * The data and time that the status changed.
     */
    statusChangedDateTime?: string;
    /**
     * The DateTime that the envelope changed status (i.e. was created or sent.)
     */
    statusDateTime?: string;
    /**
     * The id of the template.
     */
    templateId?: string;
    /**
     * The URI for retrieving the templates.
     */
    templatesUri?: string;
    /**
     *  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used
     * for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status
     * (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
     */
    transactionId?: string;
    /**
     * Contains a URI that you can use to retreve the template.
     */
    uri?: string;
    /**
     * When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting.
     * When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients.
     *
     * If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not
     * returned in responses when getting envelope information.
     */
    useDisclosure?: string;
    /**
     * The date and time the envelope or template was voided.
     */
    voidedDateTime?: string;
    /**
     * The reason the envelope or template was voided.
     */
    voidedReason?: string;
}

/**
 * A tab that allows the recipient to enter any type of text.
 *
 */
export interface Text {
    anchorAllowWhiteSpaceInCharacters?: string;
    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**,
     * the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match.
     * When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field,
     * but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console.
     * The information on the downloaded document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * Metadata that indicates whether the `concealValueOnDocument` property is editable.
     */
    concealValueOnDocumentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data.
     * If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * Metadata that indicates whether the `disableAutoSize` property is editable.
     */
    disableAutoSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a
     * `documentId` property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render.
     * The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the formula
     * for calculating the value of
     * this tab.
     *
     * Use a tab's `tabLabel`,
     * enclosed in brackets,
     * to refer to it.
     *
     * For example,
     * you want to present the total cost
     * of two items, tax included.
     *
     * The cost of each item is stored
     * in number tabs labeled Item1 and Item2.
     * The tax rate is in a number tab
     * labeled TaxRate.
     *
     * The formula string for this property
     * would be:
     * `([Item1] + [Item2]) * (1 + [TaxRate])`
     *
     * See [Calculated Fields][calculatedfields]
     * in the DocuSign Support Center
     * to learn more about formulas.
     *
     * Maximum Length: 2000 characters
     *
     * [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *
     */
    formula?: string;
    /**
     * Metadata indicating if the sender can edit the `formula` property.
     */
    formulaMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number.
     */
    isPaymentAmount?: string;
    /**
     * Metadata that indicates whether the `isPaymentAmount` property is editable.
     */
    isPaymentAmountMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional value that describes the maximum length of the property when the property is a string.
     */
    maxLength?: string;
    /**
     * Metadata that indicates whether the `maxLength` property is editable.
     */
    maxLengthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The initial value of the tab when it was sent to the recipient.
     */
    originalValue?: string;
    /**
     * Metadata that indicates whether the `originalValue` property is editable.
     */
    originalValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and shared is true, information must be entered in this field to complete the envelope.
     */
    requireAll?: string;
    /**
     * Metadata that indicates whether the `requireAll` property is editable.
     */
    requireAllMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender must populate the tab before an envelope can be sent using the template.
     *
     * This value tab can only be changed by modifying (PUT) the template.
     *
     * Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
     */
    senderRequired?: string;
    /**
     * Metadata that indicates whether the `senderRequired` property is editable.
     */
    senderRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * Metadata that indicates whether the `validationMessage` property is editable.
     */
    validationMessageMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A regular expression used to validate input for the tab.
     */
    validationPattern?: string;
    /**
     * Metadata that indicates whether the `validationPattern` property is editable.
     */
    validationPatternMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * This object represents a free text custom field where envelope creators and senders can enter custom data.
 */
export interface TextCustomField {
    /**
     * If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
     */
    configurationType?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The id of the custom field.
     */
    fieldId?: string;
    /**
     * The name of the custom field.
     */
    name?: string;
    /**
     * When set to **true**, senders are required to enter or select information for the field before they can send the envelope.
     */
    required?: string;
    /**
     * When set to **true**, the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope.
     */
    show?: string;
    /**
     * The value of the custom field. The user who creates or sends the envelope provides this value. Maximum length: 100 characters.
     */
    value?: string;
}

/**
 * A tab that displays the recipient's title.
 *
 */
export interface Title {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the
     * `anchorString` property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc.
     * will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible
     * (the characters are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console.
     * The information on the downloaded document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * Metadata that indicates whether the `concealValueOnDocument` property is editable.
     */
    concealValueOnDocumentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data.
     * If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * Metadata that indicates whether the `disableAutoSize` property is editable.
     */
    disableAutoSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId`
     * property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`,
     * the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional value that describes the maximum length of the property when the property is a string.
     */
    maxLength?: string;
    /**
     * Metadata that indicates whether the `maxLength` property is editable.
     */
    maxLengthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The initial value of the tab when it was sent to the recipient.
     */
    originalValue?: string;
    /**
     * Metadata that indicates whether the `originalValue` property is editable.
     */
    originalValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     *
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * A complex element consisting of:
 *
 * * lastSentDateTime - the date and time the user last sent an envelope.
 * * lastSignedDateTime - the date and time the user last signed an envelope.
 * * sentCount - the number of envelopes the user has sent.
 * * signedCount - the number of envelopes the user has signed.
 */
export interface UsageHistory {
    /**
     * The date and time the user last sent an envelope.
     */
    lastSentDateTime?: string;
    /**
     * The date and time the user last signed an envelope.
     */
    lastSignedDateTime?: string;
    /**
     * The number of envelopes the user has sent.
     */
    sentCount?: string;
    /**
     * The number of envelopes the user has signed.
     */
    signedCount?: string;
}

/**
 * Describes which account management capabilities a user has.
 */
export interface UserAccountManagementGranularInformation {
    /**
     * **True** if the user can manage account security settings.
     */
    canManageAccountSecuritySettings?: string;

    canManageAccountSecuritySettingsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * **True** if the user can manage account settings.
     */
    canManageAccountSettings?: string;

    canManageAccountSettingsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * **True** if the user can manage administrators.
     */
    canManageAdmins?: string;
    /**
     * Metadata that indicates whether the `canManageAdmins` property is editable.
     *
     */
    canManageAdminsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * **True** if the user can manage reporting.
     */
    canManageReporting?: string;

    canManageReportingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * **True** if the user can manage sharing.
     */
    canManageSharing?: string;
    /**
     * Metadata that indicates whether the `canManageSharing` property is editable.
     *
     */
    canManageSharingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * **True** if the user can manage signing groups.
     */
    canManageSigningGroups?: string;

    canManageSigningGroupsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * **True** if the user can manage users.
     */
    canManageUsers?: string;
    /**
     * Metadata that indicates whether the `canManageUsers` property is editable.
     *
     */
    canManageUsersMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}

/**
 * Users' custom settings
 */
export interface UserCustomSettings {
    /**
     * The name/value pair information for the user custom setting.
     */
    customSettings?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
}

export interface UserInfo {
    /**
     * The external account number (int) or account ID GUID.
     */
    accountId?: string;
    /**
     * The name on the account.
     */
    accountName?: string;
    /**
     * Access code provided to the user to activate the account.
     */
    activationAccessCode?: string;

    email?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Boolean value that indicates whether the user is currently logged in or not.
     */
    loginStatus?: string;
    /**
     * The user's membership ID.
     */
    membershipId?: string;
    /**
     * When set to **true**, specifies that an activation email be sent to the user.
     */
    sendActivationEmail?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
    /**
     * The name of the user.
     */
    userName?: string;
    /**
     * Status of the user's account. One of:
     *
     * - `ActivationRequired`
     * - `ActivationSent`
     * - `Active`
     * - `Closed`
     * - `Disabled`
     *
     */
    userStatus?: string;
    /**
     * The type of user, for example `CompanyUser`.
     */
    userType?: string;
}

export interface UserInfoList {
    /**
     * An array of `userInfo` objects containing information about the users in the group.
     */
    users?: UserInfo[];
}

export interface UserInformation {
    /**
     * Access code provided to the user to activate the account.
     */
    activationAccessCode?: string;
    /**
     * The name of the user's company.
     */
    company?: string;
    /**
     * object representing the user's custom Connect configuration.
     */
    connectConfigurations?: ConnectUserObject[];
    /**
     * The three-letter code for the user's country.
     */
    countryCode?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;
    /**
     * The name/value pair information for the user custom setting.
     */
    customSettings?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
    /**
     * The default account ID associated with the user.
     */
    defaultAccountId?: string;

    email?: string;
    /**
     * Boolean value that specifies whether the user is enabled for updates from DocuSign Connect.
     */
    enableConnectForUser?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The user's first name.
     * Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * A complex element containing up to four Question/Answer pairs for forgotten password information.
     */
    forgottenPasswordInfo?: /* A complex element that has up to four Question/Answer pairs for forgotten password information. */ ForgottenPasswordInformation;
    /**
     * A list of the group information for groups to add the user to.
     * Use [UserGroups::listGroups](https://developers.docusign.com/esign-rest-api/reference/UserGroups/Groups/list) to get information about groups.
     *
     * When setting a user's group, only the `groupId` is required.
     *
     */
    groupList?: /* This object contains information about a group. */ Group[];
    /**
     * Specifies the email for the signing host. It is a Required element for In Person Signers recipient Type.
     * Maximum Length: 100 characters.
     */
    homeAddress?: /* Contains address information. */ AddressInformation;
    /**
     * The URI for retrieving the image of the user's initials.
     */
    initialsImageUri?: string;
    /**
     * Determines if the feature set is actively set as part of the plan.
     */
    isAdmin?: string;
    /**
     * When set to **true**, National Association of Realtors (NAR) signature logos are enabled for the user.
     */
    isNAREnabled?: string;
    /**
     * The user's job title.
     */
    jobTitle?: string;
    /**
     * The date and time when the user last logged in to the system.
     */
    lastLogin?: string;

    lastName?: string;
    /**
     * Boolean value that indicates whether the user is currently logged in or not.
     */
    loginStatus?: string;
    /**
     * The user's middle name.
     * Limit: 50 characters.
     */
    middleName?: string;
    /**
     * The user's encrypted password hash.
     */
    password?: string;
    /**
     * If password expiration is enabled, the date-time when the user's password expires.
     */
    passwordExpiration?: string;
    /**
     * The ID of the permission profile. Possible values include:
     *
     * - `2301416` (for the `DocuSign Viewer` profile)
     * - `2301415` (for the `DocuSign Sender` profile)
     * - `2301414` (for the `Account Administrator` profile)
     *
     * In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
     */
    permissionProfileId?: string;
    /**
     * The name of the account permission profile.
     *
     * Example: `Account Administrator`
     */
    permissionProfileName?: string;
    /**
     * The URL for retrieving the user's profile image.
     */
    profileImageUri?: string;
    /**
     * When set to **true**, specifies that an activation email be sent to the user.
     */
    sendActivationEmail?: string;
    /**
     * When set to **true**, specifies that an additional activation email be sent if user's log on fails before the account is activated.
     */
    sendActivationOnInvalidLogin?: string;
    /**
     * An endpoint URI that you can use to retrieve the user's signature image.
     */
    signatureImageUri?: string;

    subscribe?: string;
    /**
     * The suffix for the user's name, such as Jr, IV, PhD, etc.
     *
     * Limit: 50 characters.
     */
    suffixName?: string;
    /**
     * The title of the user.
     */
    title?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
    /**
     * The date and time that the user was added to the account.
     */
    userAddedToAccountDateTime?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
    /**
     * The name of the user.
     */
    userName?: string;
    /**
     * The date and time that the user's profile was last modified.
     */
    userProfileLastModifiedDate?: string;
    /**
     * The collection of settings representing the actions a user can perform. See [userSettingsInformation]
     * (https://developers.docusign.com/esign-rest-api/reference/Users/Users/get#userSettingsInformation) for available settings.
     */
    userSettings?: UserSettingsInformation;
    /**
     * Status of the user's account. One of:
     *
     * - `ActivationRequired`
     * - `ActivationSent`
     * - `Active`
     * - `Closed`
     * - `Disabled`
     *
     */
    userStatus?: string;
    /**
     * The type of user, for example `CompanyUser`.
     */
    userType?: string;

    workAddress?: /* Contains address information. */ AddressInformation;
}

/**
 * Contains a list of account users.
 */
export interface UserInformationList {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
    /**
     * User management information.
     */
    users?: UserInformation[];
}

export interface UserPasswordInformation {
    /**
     * The user's current password to be changed.
     */
    currentPassword?: string;
    /**
     * The user's email address for the associated account.
     */
    email?: string;
    /**
     * A complex element containing up to four Question/Answer pairs for forgotten password information.
     */
    forgottenPasswordInfo?: /* A complex element that has up to four Question/Answer pairs for forgotten password information. */ ForgottenPasswordInformation;
    /**
     * The user's new password.
     */
    newPassword?: string;
}

/**
 * Contains details about the password rules for a user.
 */
export interface UserPasswordRules {
    /**
     * Contains details about the password rules for the user.
     */
    passwordRules?: AccountPasswordRules;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}

export interface UserProfile {
    /**
     * The user's address.
     */
    address?: /* Contains address information. */ AddressInformation;
    /**
     * Indicates the authentication methods that the user uses. These properties cannot be modified by the PUT operation.
     */
    authenticationMethods?: /* Contains information about the method used for authentication. */ AuthenticationMethod[];
    /**
     * The name of the user's company.
     */
    companyName?: string;
    /**
     *  When set to **true**, the user's company and title information display on the ID card.
     */
    displayOrganizationInfo?: string;
    /**
     * When set to **true**, the user's address and phone number display on the ID card.
     */
    displayPersonalInfo?: string;
    /**
     * When set to **true**, the user's ID card can be viewed from signed documents and envelope history.
     */
    displayProfile?: string;
    /**
     * When set to **true**, the user's usage information displays on the ID card.
     */
    displayUsageHistory?: string;
    /**
     * The URL for retrieving the user's profile image.
     */
    profileImageUri?: string;
    /**
     * The title of the user.
     */
    title?: string;
    /**
     * A complex element consisting of:
     *
     * - `lastSentDateTime`: The date and time the user last sent an envelope.
     * - `lastSignedDateTime`: The date and time the user last signed an envelope.
     * - `sentCount`: The number of envelopes the user has sent.
     * - `signedCount`: The number of envelopes the user has signed.
     *
     */
    usageHistory?: UsageHistory;

    userDetails?: UserInformation;
    /**
     * The date and time that the user's profile was last modified.
     */
    userProfileLastModifiedDate?: string;
}

/**
 * Users' profiles
 */
export interface UserProfiles {
    /**
     * The user's address.
     */
    address?: /* Contains address information. */ AddressInformation;
    /**
     * Indicates the authentication methods that the user uses. These properties cannot be modified by the PUT operation.
     */
    authenticationMethods?: /* Contains information about the method used for authentication. */ AuthenticationMethod[];
    /**
     * The name of the user's company.
     */
    companyName?: string;
    /**
     *  When set to **true**, the user's company and title information display on the ID card.
     */
    displayOrganizationInfo?: string;
    /**
     * When set to **true**, the user's address and phone number display on the ID card.
     */
    displayPersonalInfo?: string;
    /**
     * When set to **true**, the user's ID card can be viewed from signed documents and envelope history.
     */
    displayProfile?: string;
    /**
     * When set to **true**, the user's usage information displays on the ID card.
     */
    displayUsageHistory?: string;
    /**
     * The URL for retrieving the user's profile image.
     */
    profileImageUri?: string;
    /**
     * The user's job title.
     *
     * Limit: 100 characters.
     */
    title?: string;
    /**
     * A complex element consisting of:
     *
     * - `lastSentDateTime`: The date and time the user last sent an envelope.
     * - `lastSignedDateTime`: The date and time the user last signed an envelope.
     * - `sentCount`: The number of envelopes the user has sent.
     * - `signedCount`: The number of envelopes the user has signed.
     *
     */
    usageHistory?: UsageHistory;
    /**
     * Detailed information about the user.
     */
    userDetails?: UserInformation;
    /**
     * The date and time that the user's profile was last modified.
     */
    userProfileLastModifiedDate?: string;
}

/**
 * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
 * - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
 * - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
 * - `options`: The values supported for this setting (not all settings have this element)
 */
export interface UserSettingsInformation {
    /**
     * Describes which account management capabilities a user has.
     */
    accountManagementGranular?: /* Describes which account management capabilities a user has. */ UserAccountManagementGranularInformation;
    /**
     * Reserved for DocuSign.
     */
    adminOnly?: string;
    /**
     * Reserved for DocuSign.
     */
    adminOnlyMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the API returns suggested tabs for documents for this user.
     */
    allowAutoTagging?: string;
    /**
     * When set to **true**, this user can participate in envelope transfers on the account.
     */
    allowEnvelopeTransferTo?: string;
    /**
     * Reserved for DocuSign.
     */
    allowEnvelopeTransferToMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, this user can create [electronic seal recipients][eseal].
     *
     * [eseal]: /esign/restapi//Envelopes/EnvelopeRecipients#seal-recipient
     */
    allowEsealRecipients?: string;
    /**
     * Metadata about the `allowEsealRecipientsMetadata` property.
     */
    allowEsealRecipientsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true** and this user is an administrator, they can view all of the envelopes generated from PowerForms. The default value is **false**.
     */
    allowPowerFormsAdminToAccessAllPowerFormEnvelope?: string;
    /**
     * Metadata about the `allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata` property.
     */
    allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, this user can set the language used in the standard email format for a recipient when creating an envelope.
     */
    allowRecipientLanguageSelection?: string;
    /**
     * Metadata for allowRecipientLanguageSelection.
     */
    allowRecipientLanguageSelectionMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, this user can send envelopes "on behalf of" other users through the API.
     */
    allowSendOnBehalfOf?: string;
    /**
     * Metadata for allowSendOnBehalfOf.
     */
    allowSendOnBehalfOfMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can include supplemental documents.
     */
    allowSupplementalDocuments?: string;
    /**
     * Metadata that indicates whether the `allowSupplementalDocuments` property is editable.
     */
    allowSupplementalDocumentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     *
     */
    anchorTagVersionedPlacementEnabled?: string;
    /**
     * When **true**, indicates that this user can send envelope-specific API requests on the account.
     */
    apiAccountWideAccess?: string;
    /**
     * Metadata for apiAccountWideAccess.
     */
    apiAccountWideAccessMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can export authoritative copy for the account.
     */
    apiCanExportAC?: string;
    /**
     * Metadata about the `apiCanExportACMetadata` property.
     */
    apiCanExportACMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can use the bulk send feature for the account.
     */
    bulkSend?: string;
    /**
     * Metadata that indicates whether the `bulkSend` property is editable.
     *
     */
    bulkSendMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    canChargeAccount?: string;
    /**
     * Reserved for DocuSign.
     */
    canChargeAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When true, this user can edit the shared address book for the account.
     */
    canEditSharedAddressbook?: string;
    /**
     * Metadata about the `canEditSharedAddressbookMetadata` property.
     */
    canEditSharedAddressbookMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, this user can lock envelopes.
     */
    canLockEnvelopes?: string;
    /**
     * Metadata about the `canLockEnvelopes` property.
     */
    canLockEnvelopesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user is an administrator for the account.
     */
    canManageAccount?: string;
    /**
     * Metadata about the `canManageAccountMetadata` property.
     */
    canManageAccountMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    canManageDistributor?: string;
    /**
     * Metadata about the `canManageDistributor` property.
     */
    canManageDistributorMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can manage templates for the account.
     */
    canManageTemplates?: string;
    /**
     * Metadata about the `canManageTemplates` property.
     */
    canManageTemplatesMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can send API requests on the account.
     */
    canSendAPIRequests?: string;
    /**
     * Metadata about the `canSendAPIRequests` property.
     */
    canSendAPIRequestsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can send envelopes on the account.
     */
    canSendEnvelope?: string;
    /**
     * Metadata about the `canSendEnvelope` property.
     */
    canSendEnvelopeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can sign envelopes.
     */
    canSignEnvelope?: string;
    /**
     * Metadata about the `canSignEnvelope` property.
     */
    canSignEnvelopeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, this user can use a scratchpad to edit information.
     */
    canUseScratchpad?: string;
    /**
     * Metadata about the `canUseScratchpad` property.
     */
    canUseScratchpadMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    canUseSmartContracts?: string;
    /**
     * Reserved for DocuSign.
     */
    canUseSmartContractsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user is prohibited from uploading documents during sending.
     */
    disableDocumentUpload?: string;
    /**
     * Metadata that indicates whether the `disableDocumentUpload` property is editable.
     *
     */
    disableDocumentUploadMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can access the **Other Actions** menu.
     */
    disableOtherActions?: string;
    /**
     * Metadata that indicates whether the `disableOtherActions` property is editable.
     *
     */
    disableOtherActionsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    enableDSPro?: string;
    /**
     * Metadata that indicates whether the `enableDSPro` property is editable.
     *
     */
    enableDSProMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account can define the routing
     * order of recipients for envelopes sent by using the DocuSign API.
     *
     * **Note**: Only SysAdmin users can change this setting.
     */
    enableSequentialSigningAPI?: string;
    /**
     * Metadata that indicates whether the `enableSequentialSigningAPI` property is editable.
     *
     */
    enableSequentialSigningAPIMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the account can define the routing order
     * of recipients for envelopes sent by using the DocuSign application.
     *
     * **Note**: Only SysAdmin users can change this setting.
     *
     */
    enableSequentialSigningUI?: string;
    /**
     * Metadata that indicates whether the `enableSequentialSigningUI` property is editable.
     *
     */
    enableSequentialSigningUIMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user can use the signing attachments feature.
     */
    enableSignerAttachments?: string;
    /**
     * Metadata that indicates whether the `enableSignerAttachments` property is editable.
     *
     */
    enableSignerAttachmentsMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, a user can override the default default account setting for the Sign on Paper option, which specifies whether signers can sign
     * documents on paper as an option to signing electronically.
     *
     * **Note**: Only Admin users can change this setting.
     */
    enableSignOnPaperOverride?: string;
    /**
     * Metadata that indicates whether the `enableSignOnPaperOverride` property is editable.
     *
     */
    enableSignOnPaperOverrideMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    enableTransactionPoint?: string;
    /**
     * Reserved for DocuSign.
     */
    enableTransactionPointMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, Vaulting is enabled for the account.
     */
    enableVaulting?: string;
    /**
     * Metadata that indicates whether the `enableVaulting` property is editable.
     *
     */
    enableVaultingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **false**, this user can apply tabs to documents during the sending experience.
     */
    expressSendOnly?: string;
    /**
     * The user's locale code. Valid values are:
     * - `zh_CN`
     * - `zh_TW`
     * - `nl`
     * - `en`
     * - `fr`
     * - `de`
     * - `it`
     * - `ja`
     * - `ko`
     * - `pt`
     * - `pt_BR`
     * - `ru`
     * - `es`
     */
    locale?: string;
    /**
     * Metadata about the `locale` property.
     */
    localeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicy;
    /**
     * When set to **true**, this user can create and manage [Clickwraps](https://developers.docusign.com/click-api).
     */
    manageClickwrapsMode?: string;
    /**
     * Metadata about the `manageClickwrapsMode` property.
     */
    manageClickwrapsModeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The user id (GUID) of the user who last modified this user record.
     */
    modifiedBy?: string;
    /**
     * Metadata about the `modifiedBy` property.
     */
    modifiedByMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The date on which this user record was last modified.
     */
    modifiedDate?: string;
    /**
     * Metadata about the `modifiedDate` property.
     */
    modifiedDateMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Note referencing the page that modified this user record.
     */
    modifiedPage?: string;
    /**
     * Metadata about the `modifiedPage` property.
     */
    modifiedPageMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    newSendUI?: string;
    /**
     * Metadata about the `newSendUI` property.
     */
    newSendUIMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Indicates the Power Form mode setting for the user:
     * - `none`
     * - `admin`
     * - `user`
     */
    powerFormMode?: string;
    /**
     * Metadata about the `powerFormMode` property.
     */
    powerFormModeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user receives notifications when envelopes are viewed.
     */
    recipientViewedNotification?: string;
    /**
     * Metadata about the `recipientViewedNotification` property.
     */
    recipientViewedNotificationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Information about the seals associated with this user.
     */
    sealIdentifiers?: SealIdentifier[];
    /**
     * Sets how self-signed documents are presented to the email recipients.
     * Valid values are:
     *
     * - `include_pdf`: A PDF of the completed document is attached to the email.
     * - `include_link`: A secure link to the self-signed documents is included
     *    in the email.
     *
     * **Note**: Only Admin users can change this setting.
     *
     */
    selfSignedRecipientEmailDocument?: string;
    /**
     * Metadata that indicates whether the `selfSignedRecipientEmailDocument` property is editable.
     *
     */
    selfSignedRecipientEmailDocumentMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     *
     * An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true,
     * the user will receive those types of email notifications from DocuSign.
     *
     * The user inherits the default account sender email notification settings when the user is created. The email notifications are:
     *
     * * envelopeComplete
     * * changedSigner
     * * senderEnvelopeDeclined
     * * withdrawnConsent
     * * recipientViewed
     * * deliveryFailed
     *
     */
    senderEmailNotifications?: /* Contains the settings for the email notifications that senders receive about the envelopes that they send. */ SenderEmailNotifications;
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true,
     * the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    signerEmailNotifications?: /* An array of email notifications that specifies the email the user receives when they are a sender.
        When the specific email notification is set to true, the user receives those types of email notifications from DocuSign.
        The user inherits the default account sender email notification settings when the user is created. */ SignerEmailNotifications;
    /**
     * When **true**, this user gets supplemental documents when downloading documents.
     */
    supplementalDocumentIncludeInDownload?: string;
    /**
     * When **true**, this user must accept supplemental documents.
     */
    supplementalDocumentsMustAccept?: string;
    /**
     * Metadata that indicates whether the `supplementalDocumentsMustAccept` property is editable.
     *
     */
    supplementalDocumentsMustAcceptMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user must both view and accept supplemental documents.
     */
    supplementalDocumentsMustRead?: string;
    /**
     * Metadata that indicates whether the `supplementalDocumentsMustRead` property is editable.
     *
     */
    supplementalDocumentsMustReadMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, this user must view supplemental documents.
     */
    supplementalDocumentsMustView?: string;
    /**
     * Metadata that indicates whether the `supplementalDocumentsMustView` property is editable.
     *
     */
    supplementalDocumentsMustViewMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, a new template is created each time the user sends an envelope.
     */
    templateActiveCreation?: string;
    /**
     * Metadata about the `templateActiveCreation` property.
     */
    templateActiveCreationMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the system notifies this user before applying a matching template.
     */
    templateApplyNotify?: string;
    /**
     * Metadata about the `templateApplyNotify` property.
     */
    templateApplyNotifyMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When set to **true**, the system automatically applies a matching template to a document if only one template matches.
     * If there are multiple matches, it displays a list of matches to select from.
     */
    templateAutoMatching?: string;
    /**
     * Metadata about the `templateAutoMatching` property.
     */
    templateAutoMatchingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Percentage used when matching templates.
     */
    templateMatchingSensitivity?: string;
    /**
     * Metadata about the `tempalteMatchingSensitivity` property.
     */
    templateMatchingSensitivityMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When **true**, users see template matching functionality.
     */
    templatePageLevelMatching?: string;
    /**
     * Metadata about the `templatePageLevelMatching` property.
     */
    templatePageLevelMatchingMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * When true, daylight savings time is in effect for this user's time zone.
     */
    timezoneDST?: string;
    /**
     * Metadata about the `timezoneDST` property.
     */
    timezoneDSTMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The custom DateTime format setting for this user.
     */
    timezoneMask?: string;
    /**
     * Metadata about the `timezoneMask` property.
     */
    timezoneMaskMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * The timezone offset for the user. Valid values:
     * - `tz_01_afghanistan`
     * - `tz_02_alaskan`
     * - `tz_03_arab`
     * - `tz_04_arabian`
     * - `tz_05_arabic`
     * - `tz_06_argentina`
     * - `tz_07_atlantic`
     * - `tz_08_aus_central`
     * - `tz_09_aus_eastern`
     * - `tz_10_azerbaijan`
     * - `tz_11_azores`
     * - `tz_12_bangladesh`
     * - `tz_13_canada_central`
     * - `tz_14_cape_verde`
     * - `tz_15_caucasus`
     * - `tz_16_central_australia`
     * - `tz_17_central_america`
     * - `tz_18_central_asia`
     * - `tz_19_central_brazilian`
     * - `tz_20_central_europe`
     * - `tz_21_central_european`
     * - `tz_22_central_pacific`
     * - `tz_23_central`
     * - `tz_24_central_mexico`
     * - `tz_25_china`
     * - `tz_26_dateline`
     * - `tz_27_east_africa`
     * - `tz_28_east_australia`
     * - `tz_29_east_europe`
     * - `tz_30_east_south_america`
     * - `tz_31_eastern`
     * - `tz_32_egypt`
     * - `tz_33_ekaterinburg`
     * - `tz_34_fiji`
     * - `tz_35_fli`
     * - `tz_36_georgian`
     * - `tz_37_gmt`
     * - `tz_38_greenland`
     * - `tz_39_greenwich`
     * - `tz_40_gtb`
     * - `tz_41_hawaiian`
     * - `tz_42_india`
     * - `tz_43_iran`
     * - `tz_44_israel`
     * - `tz_45_jordan`
     * - `tz_46_kaliningrad`
     * - `tz_47_kamchatka`
     * - `tz_48_korea`
     * - `tz_49_magadan`
     * - `tz_50_mauritius`
     * - `tz_51_mid_atlantic`
     * - `tz_52_middle_east`
     * - `tz_53_montevideo`
     * - `tz_54_morocco`
     * - `tz_55_mountain`
     * - `tz_56_mountain_mexico`
     * - `tz_57_myanmar`
     * - `tz_58_north_central_asia`
     * - `tz_59_namibia`
     * - `tz_60_nepal`
     * - `tz_61_new_zealand`
     * - `tz_62_new_foundland`
     * - `tz_63_north_asia_east`
     * - `tz_64_north_asia`
     * - `tz_65_pacific_sa`
     * - `tz_66_pacific`
     * - `tz_67_pacific_mexico`
     * - `tz_68_pakistan`
     * - `tz_69_paraguay`
     * - `tz_70_romance`
     * - `tz_71_russian`
     * - `tz_72_sa_eastern`
     * - `tz_73_sa_pacific`
     * - `tz_74_sa_western`
     * - `tz_75_samoa`
     * - `tz_76_se_asia`
     * - `tz_77_singapore`
     * - `tz_78_south_africa`
     * - `tz_79_sriLanka`
     * - `tz_80_syria`
     * - `tz_81_taipei`
     * - `tz_82_tasmania`
     * - `tz_83_tokyo`
     * - `tz_84_tonga`
     * - `tz_85_turkey`
     * - `tz_86_ulaanbaatar`
     * - `tz_87_us_eastern`
     * - `tz_88_us_mountain`
     * - `tz_89_venezuela`
     * - `tz_90_vladivostok`
     * - `tz_91_west_australia`
     * - `tz_92_west_central_africa`
     * - `tz_93_west_europe`
     * - `tz_94_west_asia`
     * - `tz_95_west_pacific`
     * - `tz_96_yakutsk`
     */
    timezoneOffset?: string;
    /**
     * Metadata about the `timezoneOffset` property.
     */
    timezoneOffsetMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    timezoneSendingPref?: string;
    /**
     * Reserved for DocuSign.
     */
    timezoneSendingPrefMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    timezoneSigningPref?: string;
    /**
     * Reserved for DocuSign.
     */
    timezoneSigningPrefMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    transactionPointSiteNameURL?: string;
    /**
     * Reserved for DocuSign.
     */
    transactionPointSiteNameURLMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Reserved for DocuSign.
     */
    transactionPointUserName?: string;
    /**
     * Reserved for DocuSign.
     */
    transactionPointUserNameMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
    /**
     * Indicates the specified Vaulting mode:
     * - `none`
     * - `estored`
     * - `electronic_original`
     */
    vaultingMode?: string;
    /**
     * Metadata about the `vaultingMode` property.
     */
    vaultingModeMetadata?: /* Metadata that indicates whether a property is editable and describes setting-specific options. */ SettingsMetadata;
}

/**
 * Information about a shared item.
 */
export interface UserSharedItem {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * How the item is shared. One of:
     *
     * - `not_shared`
     * - `shared_to`
     * - `shared_from`
     * - `shared_to_and_from`
     *
     */
    shared?: string;
    /**
     * The user whose sharing information is being requested.
     */
    user?: UserInfo;
}

export interface UserSignature {
    /**
     * The UTC date and time when the user adopted the signature.
     */
    adoptedDateTime?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;

    customField?: string;
    /**
     * Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area.
     * The stamp is superimposed on top of this central area.
     *
     * This property contains the following information about the central rectangle:
     *
     * - `DateAreaX`: The X axis position of the top-left corner.
     * - `DateAreaY`: The Y axis position of the top-left corner.
     * - `DateAreaWidth`: The width of the rectangle.
     * - `DateAreaHeight`: The height of the rectangle.
     */
    dateStampProperties?: DateStampProperties;
    /**
     * When set to **true**, users may not resize the stamp.
     */
    disallowUserResizeStamp?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Optionally specify an external identifier for the user's signature.
     */
    externalID?: string;
    /**
     * A Base64-encoded representation of the signature image.
     */
    imageBase64?: string;
    /**
     * Specificies the type of image. Valid values are:
     *
     * - `signature_image`
     * - `initials_image`
     */
    imageType?: string;
    /**
     * The ID of the user's initials image.
     */
    initials150ImageId?: string;
    /**
     * The URI for retrieving the image of the user's initials.
     */
    initialsImageUri?: string;
    /**
     * Boolean that specifies whether the signature is the default signature for the user.
     */
    isDefault?: string;
    /**
     * The date and time that the item was last modified.
     */
    lastModifiedDateTime?: string;
    /**
     * The National Association of Realtors (NAR) membership ID for a user who is a realtor.
     */
    nrdsId?: string;
    /**
     * The realtor's last name.
     */
    nrdsLastName?: string;
    /**
     * The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:
     *
     * - `Active`
     * - `Inactive`
     * - `Terminate`
     * - `Provisional`
     * - `Deceased`
     * - `Suspend`
     * - `Unknown`
     */
    nrdsStatus?: string;
    /**
     * The phonetic spelling of the `signatureName`.
     */
    phoneticName?: string;
    /**
     * The ID of the user's signature image.
     */
    signature150ImageId?: string;
    /**
     * The font to use for the signature.
     */
    signatureFont?: string;
    /**
     * The ID of the signature being accessed.
     */
    signatureId?: string;
    /**
     * An endpoint URI that you can use to retrieve the user's signature image.
     */
    signatureImageUri?: string;
    /**
     * Specifies the user's signature in initials format.
     */
    signatureInitials?: string;
    /**
     * Specifies the user's signature name.
     */
    signatureName?: string;
    /**
     * The rights that the user has to the signature. Valid values are:
     *
     * - `none`
     * - `read`
     * - `admin`
     */
    signatureRights?: string;
    /**
     * Specifies the type of signature.
     */
    signatureType?: string;
    /**
     * The format of a stamp. Valid values are:
     *
     * - `NameHanko`: The stamp represents only the signer's name.
     * - `NameDateHanko`: The stamp represents the signer's name and the date.
     */
    stampFormat?: string;
    /**
     * The URI for retrieving the image of the user's stamp.
     */
    stampImageUri?: string;
    /**
     * The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
     */
    stampSizeMM?: string;
    /**
     * The type of stamp. Valid values are:
     *
     * - `signature`: A signature image. This is the default value.
     * - `stamp`: A stamp image.
     * - null
     */
    stampType?: string;
    /**
     * The status of the item.
     */
    status?: string;
}

export interface UserSignatureDefinition {
    /**
     * Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area.
     * The stamp is superimposed on top of this central area.
     *
     * This property contains the following information about the central rectangle:
     *
     * - `DateAreaX`: The X axis position of the top-left corner.
     * - `DateAreaY`: The Y axis position of the top-left corner.
     * - `DateAreaWidth`: The width of the rectangle.
     * - `DateAreaHeight`: The height of the rectangle.
     */
    dateStampProperties?: DateStampProperties;
    /**
     * When set to **true**, users may not resize the stamp.
     */
    disallowUserResizeStamp?: string;
    /**
     * Optionally specify an external identifier for the user's signature.
     */
    externalID?: string;
    /**
     * Specificies the type of image. Valid values are:
     *
     * - `signature_image`
     * - `initials_image`
     */
    imageType?: string;
    /**
     * Boolean that specifies whether the signature is the default signature for the user.
     */
    isDefault?: string;
    /**
     * The National Association of Realtors (NAR) membership ID for a user who is a realtor.
     */
    nrdsId?: string;
    /**
     * The realtor's last name.
     */
    nrdsLastName?: string;
    /**
     * The phonetic spelling of the `signatureName`.
     */
    phoneticName?: string;
    /**
     * The font to use for the signature.
     */
    signatureFont?: string;
    /**
     * Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name,
     * and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name.
     * Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.
     */
    signatureId?: string;
    /**
     * Specifies the user's signature in initials format.
     */
    signatureInitials?: string;
    /**
     * Specifies the user's signature name.
     */
    signatureName?: string;
    /**
     * The format of a stamp. Valid values are:
     *
     * - `NameHanko`: The stamp represents only the signer's name.
     * - `NameDateHanko`: The stamp represents the signer's name and the date.
     */
    stampFormat?: string;
    /**
     * The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
     */
    stampSizeMM?: string;
}

/**
 * Users' signatures
 */
export interface UserSignatures {
    /**
     * The UTC date and time when the user adopted the signature.
     */
    adoptedDateTime?: string;
    /**
     * The UTC date and time when the user created the signature.
     */
    createdDateTime?: string;
    /**
     * Serialized information about any custom [eHanko stamps](https://support.docusign.com/en/articles/Sending-and-Signing-with-eHanko)
     * that have been ordered from an eHanko provider, including the order status, purchase order id, time created, and time modified.
     */
    customField?: string;
    /**
     * Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area.
     * The stamp is superimposed on top of this central area.
     *
     * This property contains the following information about the central rectangle:
     *
     * - `DateAreaX`: The X axis position of the top-left corner.
     * - `DateAreaY`: The Y axis position of the top-left corner.
     * - `DateAreaWidth`: The width of the rectangle.
     * - `DateAreaHeight`: The height of the rectangle.
     */
    dateStampProperties?: DateStampProperties;
    /**
     * When set to **true**, users may not resize the stamp.
     */
    disallowUserResizeStamp?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * An external ID for the signature or stamp.
     *
     * **Note**: If a recipient uses a stamp instead of a signature, this is the stamp vendor's serial number for the stamp.
     */
    externalID?: string;
    /**
     * A Base64-encoded representation of the signature image.
     */
    imageBase64?: string;
    /**
     * The format of the signature image, such as:
     *
     * - `GIF`
     * - `PNG`
     * - `JPG`
     * - `PDF`
     * - `BMP`
     */
    imageType?: string;
    /**
     * The ID of the user's initials image.
     */
    initials150ImageId?: string;
    /**
     * The URI for retrieving the image of the user's initials.
     */
    initialsImageUri?: string;
    /**
     * Boolean that specifies whether the signature is the default signature for the user.
     */
    isDefault?: string;
    /**
     * The UTC date and time when the signature was last modified.
     */
    lastModifiedDateTime?: string;
    /**
     * The National Association of Realtors (NAR) membership ID for a user who is a realtor.
     */
    nrdsId?: string;
    /**
     * The realtor's last name.
     */
    nrdsLastName?: string;
    /**
     * The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:
     *
     * - `Active`
     * - `Inactive`
     * - `Terminate`
     * - `Provisional`
     * - `Deceased`
     * - `Suspend`
     * - `Unknown`
     */
    nrdsStatus?: string;
    /**
     * The phonetic spelling of the `signatureName`.
     */
    phoneticName?: string;
    /**
     * The ID of the user's signature image.
     */
    signature150ImageId?: string;
    /**
     * The font type to use for the signature if the signature is not drawn. The following font types are supported:
     *
     * - `1_DocuSign`
     * - `2_DocuSign`
     * - `3_DocuSign`
     * - `4_DocuSign`
     * - `5_DocuSign`
     * - `6_DocuSign`
     * - `7_DocuSign`
     * - `8_DocuSign`
     * - `Mistral`
     * - `Rage Italic`
     *
     */
    signatureFont?: string;
    /**
     * The ID associated with the signature name. You can use this property in the URI in place of the signature name. This enables the use of special
     * characters (such as "&", "<", and ">") in a signature name.
     *
     * **Note**: When you update a signature, its signature ID might change. In that case you need to use `signatureName` to get the new `signatureId`.
     */
    signatureId?: string;
    /**
     * An endpoint URI that you can use to retrieve the user's signature image.
     */
    signatureImageUri?: string;
    /**
     *  The initials associated with the signature.
     */
    signatureInitials?: string;
    /**
     * Specifies the user's signature name.
     */
    signatureName?: string;
    /**
     * The rights that the user has to the signature. Valid values are:
     *
     * - `none`
     * - `read`
     * - `admin`
     */
    signatureRights?: string;
    /**
     * Specifies the type of signature. Possible values include:
     *
     * - `RubberStamp`: A DocuSign pre-formatted signature style. This is the default value.
     * - `Imported`: A signature image that the user uploaded.
     * - `Drawn`: A freehand drawing of the user's signature and initials.
     */
    signatureType?: string;
    /**
     * The format of a stamp. Valid values are:
     *
     * - `NameHanko`: The stamp represents only the signer's name.
     * - `NameDateHanko`: The stamp represents the signer's name and the date.
     */
    stampFormat?: string;
    /**
     * The URI for retrieving the image of the user's stamp.
     */
    stampImageUri?: string;
    /**
     * The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
     */
    stampSizeMM?: string;
    /**
     * The type of stamp. Valid values are:
     *
     * - `signature`: A signature image. This is the default value.
     * - `stamp`: A stamp image.
     * - null
     */
    stampType?: string;
    /**
     * The status of the item.
     */
    status?: string;
}

export interface UserSignaturesInformation {
    /**
     * An array of  `userSignature` objects.
     */
    userSignatures?: UserSignature[];
}

export interface UserSocialIdResult {
    /**
     * Contains properties that map a DocuSign user to a social account such as Facebook or Yahoo.
     */
    socialAccountInformation?: SocialAccountInformation[];
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
}

/**
 * The Users resource enables you to create and manage account users.
 */
export interface Users {
    /**
     * The activation code a new user must enter when activating their account.
     */
    activationAccessCode?: string;
    /**
     * The name of the user's company.
     */
    company?: string;
    /**
     * object representing the user's custom Connect configuration.
     */
    connectConfigurations?: ConnectUserObject[];
    /**
     * The three-letter code for the user's country.
     */
    countryCode?: string;
    /**
     * The UTC DateTime when the item was created.
     */
    createdDateTime?: string;
    /**
     * The name/value pair information for the user custom setting.
     */
    customSettings?: /* A name-value pair that describes an item and provides a value for the item. */ NameValue[];
    /**
     * The default account ID associated with the user.
     */
    defaultAccountId?: string;
    /**
     * The user's email address.
     */
    email?: string;
    /**
     * Boolean value that specifies whether the user is enabled for updates from DocuSign Connect.
     */
    enableConnectForUser?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The user's first name.
     * Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * A complex element containing up to four Question/Answer pairs for forgotten password information.
     */
    forgottenPasswordInfo?: /* A complex element that has up to four Question/Answer pairs for forgotten password information. */ ForgottenPasswordInformation;
    /**
     * A list of the group information for groups to add the user to.
     * Use [UserGroups::listGroups](https://developers.docusign.com/esign-rest-api/reference/UserGroups/Groups/list) to get information about groups.
     *
     * When setting a user's group, only the `groupId` is required.
     *
     */
    groupList?: /* This object contains information about a group. */ Group[];
    /**
     * The user's physical home address.
     */
    homeAddress?: /* Contains address information. */ AddressInformation;
    /**
     * The URI for retrieving the image of the user's initials.
     */
    initialsImageUri?: string;
    /**
     * Determines if the feature set is actively set as part of the plan.
     */
    isAdmin?: string;
    /**
     * When set to **true**, National Association of Realtors (NAR) signature logos are enabled for the user.
     */
    isNAREnabled?: string;
    /**
     * The date and time when the user last logged in to the system.
     */
    lastLogin?: string;
    /**
     * The user's last name.
     * Maximum Length: 50 characters.
     */
    lastName?: string;
    /**
     * Shows the current status of the user's password. Possible values are:
     *
     * * password_reset
     * * password_active
     * * password_expired
     * * password_locked
     * * password_reset_failed
     *
     */
    loginStatus?: string;
    /**
     * The user's middle name.
     * Limit: 50 characters.
     */
    middleName?: string;
    /**
     * The user's password.
     */
    password?: string;
    /**
     * If password expiration is enabled, the date-time when the user's password expires.
     */
    passwordExpiration?: string;
    /**
     * The id of the permission profile associated with the user.
     */
    permissionProfileId?: string;
    /**
     * The name of the permission profile associated with the user.
     */
    permissionProfileName?: string;
    /**
     * The URL for retrieving the user's profile image.
     */
    profileImageUri?: string;
    /**
     * When set to **true**, specifies that an activation email be sent to the user.
     */
    sendActivationEmail?: string;
    /**
     * When set to **true**, specifies that an additional activation email be sent if user's log on fails before the account is activated.
     */
    sendActivationOnInvalidLogin?: string;
    /**
     * An endpoint URI that you can use to retrieve the user's signature image.
     */
    signatureImageUri?: string;

    subscribe?: string;
    /**
     * The suffix for the user's name, such as Jr, IV, PhD, etc.
     *
     * Limit: 50 characters.
     */
    suffixName?: string;
    /**
     * The salutation for the user, such as Ms, Dr, Capt., etc.
     *
     * Limit: 10 characters.
     */
    title?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
    /**
     * The date and time that the user was added to the account.
     */
    userAddedToAccountDateTime?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
    /**
     * The user's full name.
     * <!--
     * `title` + `firstName` + `middleName` + `lastName` + `suffixName`
     * -->
     */
    userName?: string;
    /**
     * The date and time that the user's profile was last modified.
     */
    userProfileLastModifiedDate?: string;
    /**
     * The collection of settings representing the actions a user can perform.
     * See [userSettingsInformation](https://developers.docusign.com/esign-rest-api/reference/Users/Users/get#userSettingsInformation) for available settings.
     */
    userSettings?: UserSettingsInformation;
    /**
     * Status of the user's account. One of:
     *
     * - `ActivationRequired`
     * - `ActivationSent`
     * - `Active`
     * - `Closed`
     * - `Disabled`
     *
     */
    userStatus?: string;
    /**
     * The type of user, for example `CompanyUser`.
     */
    userType?: string;
    /**
     * The user's physical work address.
     */
    workAddress?: /* Contains address information. */ AddressInformation;
}

export interface UsersResponse {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
    /**
     * User management information.
     */
    users?: UserInfo[];
}

/**
 * This tab is used with the Approve tab to handle supplemental documents.
 */
export interface View {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an
     * anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`,
     * etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text to display on the button.
     */
    buttonText?: string;
    /**
     * Metadata that indicates whether the `buttonText` property is editable.
     */
    buttonTextMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used,
     * the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas.
     * The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies
     * the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`,
     * the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique id for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient must click the **View** button for the supporting document prior to completing the signing process.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient must read through the document.
     */
    requiredRead?: string;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
     * `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

export interface ViewUrl {
    /**
     * The endpoint to which webhook notification messages are sent via an HTTP/S POST request. For the DocuSign production platform, the url must start with
     * https. For the demo platform, either http or https is ok.
     */
    url?: string;
}

export interface Watermark {
    displayAngle?: string;

    enabled?: string;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * A unique ID for the Salesforce object.
     */
    id?: string;

    imageBase64?: string;

    transparency?: string;

    watermarkText?: string;
}

/**
 * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed
 * the documents in the envelope.
 */
export interface Witness {
    /**
     * If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.
     *
     * Maximum Length: 50 characters and it must conform to the account's access code format setting.
     *
     * If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
     *
     * If blank and the signer `accessCode` property is not set, then the access code is not required.
     */
    accessCode?: string;
    /**
     * Metadata that indicates whether the `accessCode` property is editable. Read only.
     */
    accessCodeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode`
     * on the recipient.
     */
    addAccessCodeToEmail?: string;
    /**
     * Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address.
     * This element is only active if enabled for the account.
     */
    agentCanEditEmail?: string;
    /**
     * Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name.
     *  This element is only active if enabled for the account.
     */
    agentCanEditName?: string;

    allowSystemOverrideForLockedRecipient?: string;
    /**
     * When set to **true**, autonavigation is set for the recipient.
     *
     */
    autoNavigation?: string;
    /**
     * Reserved for DocuSign.
     */
    bulkRecipientsUri?: string;
    /**
     * When set to **true**, specifies that the signer can perform the signing ceremony offline.
     */
    canSignOffline?: string;
    /**
     * Specifies whether the recipient is embedded or remote.
     *
     * If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app.
     * Authenticating the user is the responsibility of your app when you use embedded signing.
     *
     * Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to
     * **true**, an error is generated on sending.
     *
     * Maximum length: 100 characters.
     */
    clientUserId?: string;
    /**
     * Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for
     * a signing group, only the user who previously completed may sign again. Read only.
     */
    completedCount?: string;
    /**
     * The reason why the recipient was created (for example, `sender`). Read only.
     */
    creationReason?: string;
    /**
     * An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status
     * but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.
     */
    customFields?: string[];
    /**
     * The date and time the recipient declined the document. Read only.
     */
    declinedDateTime?: string;
    /**
     * The reason the recipient declined the document. Read only.
     */
    declinedReason?: string;
    /**
     * When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
     */
    defaultRecipient?: string;
    /**
     * The date and time that the envelope was delivered to the recipient. Read only.
     */
    deliveredDateTime?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethod?: string;
    /**
     * Reserved for DocuSign.
     */
    deliveryMethodMetadata?: /* Metadata about a property. */ PropertyMetadata;

    designatorId?: string;

    designatorIdGuid?: string;
    /**
     * A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient.
     * For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility`
     * property must be set to **true**.
     */
    documentVisibility?: /* This object configures a recipient's read/write access to a document. */ DocumentVisibility[];
    /**
     * The recipient's email address.
     */
    email?: string;
    /**
     * Metadata that indicates whether the `email` property is editable. Read only.
     */
    emailMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional complex type that sets a specific email subject and body for this recipient's notification email.
     *
     * **Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients,
     * the other recipients will inherit the this value from the top-level `emailSubject` and `emailBlurb`.
     */
    emailNotification?: RecipientEmailNotification;
    /**
     * Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email
     * from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign,
     * to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a
     * recipient token to launch a signing session.
     *
     * If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing
     * action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways
     * the process is identical to an embedded signing or viewing operation launched by a partner.
     *
     * It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending
     * application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes
     * through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets
     * `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending
     * application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal
     * DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
     *
     * If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard
     * signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge
     * fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for
     * the recipient or envelope. The merge fields are enclosed in double brackets.
     *
     * *Example*:
     *
     * `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     */
    embeddedRecipientStartURL?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility`
     * property must be set to **true** for the envelope to use this.
     *
     * When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document.
     * Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or
     * Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent.
     * Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
     */
    excludedDocuments?: string[];
    /**
     * Reserved for DocuSign.
     */
    faxNumber?: string;
    /**
     * Reserved for DocuSign.
     */
    faxNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The recipient's first name. Maximum Length: 50 characters.
     */
    firstName?: string;
    /**
     * Metadata that indicates whether the `firstame` property is editable. Read only.
     */
    firstNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    fullName?: string;
    /**
     * Reserved for DocuSign.
     */
    fullNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The name of the authentication check to use. This value must match one of the authentication types that the account uses.
     * The names of these authentication types appear in the web console sending export interface in the Identify list for a recipient.
     * This setting overrides any default authentication setting. Valid values are:
     *
     * - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA).
     * You provide the phone number to use for 2FA in the `phoneAuthentication` object.
     * - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
     * - `ID Check $`: The  recipient must answer detailed security questions.
     *
     * **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list,
     * these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS,
     * you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
     */
    idCheckConfigurationName?: string;
    /**
     * Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.
     */
    idCheckConfigurationNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An object that contains input information related to a recipient ID check.
     */
    idCheckInformationInput?: /* A complex element that contains input information related to a recipient ID check. */ IdCheckInformationInput;
    /**
     * Specifies the ID Verification workflow applied on an envelope by workflow ID.
     * <br/>See the [list](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list)
     * method in the [IdentityVerifications](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications)
     * resource for more information on how to retrieve workflow IDs available for an account. <br/>This can be used in addition to other
     * [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
     * <br/>Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients' identity by verifying their
     * ID while ID Check relies on data available on public records (such as current and former address).
     */
    identityVerification?: RecipientIdentityVerification;
    /**
     * When set to **true** and the envelope recipient creates a DocuSign account after signing,
     * the Manage Account Email Notification settings are used as the default settings for the recipient's account.
     */
    inheritEmailNotificationConfiguration?: string;
    /**
     * Reserved for DocuSign.
     *
     */
    isBulkRecipient?: string;
    /**
     * Reserved for DocuSign.
     */
    isBulkRecipientMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The recipient's last name.
     */
    lastName?: string;
    /**
     * Metadata that indicates whether the `lastName` property is editable. Read only.
     */
    lastNameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientPhoneAuthEditable?: string;
    /**
     * Reserved for DocuSign.
     */
    lockedRecipientSmsEditable?: string;
    /**
     * The full legal name of the recipient. Maximum Length: 100 characters.
     *
     * **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A note sent to the recipient in the signing email.
     * This note is unique to this recipient.
     * In the user interface,
     * it appears near the upper left corner
     * of the document
     * on the signing screen.
     *
     * Maximum Length: 1000 characters.
     *
     */
    note?: string;
    /**
     * Metadata that indicates whether the `note` property is editable. Read only.
     */
    noteMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When `idCheckConfigurationName` is set to `Phone Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the following elements:
     *
     * * `recipMayProvideNumber`: Boolean. When set to **true**, the recipient can use whatever phone number they choose.
     * * `senderProvidedNumbers`: ArrayOfStrings.  A list of phone numbers the recipient can use.
     * * `recordVoicePrint`: Reserved for DocuSign.
     * * `validateRecipProvidedNumber`: Reserved for DocuSign.
     *
     *
     */
    phoneAuthentication?: RecipientPhoneAuthentication;

    proofFile?: RecipientProofFile;
    /**
     * Reserved for DocuSign.
     */
    recipientAttachments?: RecipientAttachment[];
    /**
     * Information about the recipient's authentication status. Read only.
     */
    recipientAuthenticationStatus?: /* A complex element that contains information about a user's authentication status. */ AuthenticationStatus;
    /**
     * Metadata about the features that are supported for the recipient type. Read only.
     */
    recipientFeatureMetadata?: FeatureAvailableMetadata[];
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique,
     * but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature
     * (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    recipientSignatureProviders?: RecipientSignatureProvider[];
    /**
     * When set to **true**, specifies that the recipient creates the tabs.
     */
    recipientSuppliesTabs?: string;
    /**
     * The recipient type, as specified by the following values:
     * - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
     * - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents.
     * This type of recipient can be used in any routing order.
     * - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign,
     * initial, date, or add information to any of the documents.
     * - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order,
     * set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
     * - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
     * - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
     * - `seal`: Electronic seal recipients represent legal entities.
     * - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
     * - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    recipientType?: string;
    /**
     * Metadata that indicates whether the `recipientType` property is editable. Read only.
     */
    recipientTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     */
    requireIdLookup?: string;
    /**
     * Metadata that indicates whether the `requireIdLookup` property is editable. Read only.
     */
    requireIdLookupMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.
     *
     * This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders`
     * parameter for other types of digital certificates.
     *
     * Set this parameter to `safe` to use a SAFE-BioPharma certificate.
     *
     * The signer must be enrolled in the SAFE program to sign with a SAFE certificate.
     */
    requireSignerCertificate?: string;
    /**
     * When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
     */
    requireSignOnPaper?: string;
    /**
     * When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.
     */
    requireUploadSignature?: string;
    /**
     * Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
     */
    roleName?: string;
    /**
     * Specifies the routing order of the recipient in the envelope.
     */
    routingOrder?: string;
    /**
     * Metadata that indicates whether the `routingOrder` property is editable. Read only.
     */
    routingOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The UTC DateTime when the envelope was sent. Read only.
     */
    sentDateTime?: string;
    /**
     * Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
     *
     * Used only with recipient types In Person Signers and Signers.
     */
    signatureInfo?: RecipientSignatureInformation;
    /**
     * Reserved for DocuSign.
     */
    signedDateTime?: string;
    /**
     * When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab
     * (instead of adopting a signature/initial style or only drawing a signature/initial once).
     */
    signInEachLocation?: string;
    /**
     * Metadata that indicates whether the `signInEachLocation` property is editable. Read only.
     */
    signInEachLocationMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
     *
     * **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason,
     * we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However,
     * you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.
     */
    signingGroupId?: string;
    /**
     * Metadata that indicates whether the `signingGroupId` property is editable. Read only.
     */
    signingGroupIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional. The name of the signing group.
     *
     * Maximum Length: 100 characters.
     */
    signingGroupName?: string;
    /**
     * A complex type that contains information about users in the signing group.
     */
    signingGroupUsers?: UserInfo[];
    /**
     * When `idCheckConfigurationName` is set to `SMS Auth $`, you use this complex type to provide the recipient authentication method details.
     * It contains the element `senderProvidedNumbers`, which is an array of phone numbers that the recipient can use for SMS text authentication.
     *
     *
     */
    smsAuthentication?: RecipientSMSAuthentication;
    /**
     * Deprecated.
     */
    socialAuthentications?: SocialAuthentication[];
    /**
     * The recipient's status. Read only.
     *
     * Possible values:
     *
     * - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email.
     * This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
     * - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
     * - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
     * - `declined`: The recipient declined to sign the document(s) in the envelope.
     * - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
     * - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
     * - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
     * - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing,
     * after which the recipient's status automatically switches to `completed`.
     */
    status?: string;
    /**
     * The code associated with the recipient's status. Read only.
     */
    statusCode?: string;
    /**
     * When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
     */
    suppressEmails?: string;
    /**
     * A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial,
     * or enter data. They may also display data to the recipients.
     */
    tabs?: EnvelopeRecipientTabs;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * The total number of tabs in the documents. Read only.
     */
    totalTabCount?: string;
    /**
     * The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account,
     * `userId` can represent another user whom the Administrator is accessing.
     *
     */
    userId?: string;
    /**
     * The person or party for whom the recipient is a witness.
     */
    witnessFor?: string;
    /**
     * The GUID of the person or party for whom the recipient is a witness.
     */
    witnessForGuid?: string;
}

/**
 * A DocuSign workspace is a collaboration area for sharing files and data.
 */
export interface Workspace {
    /**
     * The id of the account to bill.
     */
    billableAccountId?: string;

    callerInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * The UTC DateTime when the workspace user authorization was created.
     */
    created?: string;
    /**
     * Details about the user who created the workspace.
     */
    createdByInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * The UTC date and time that the comment was last updated.
     *
     * **Note**: This can only be done by the creator.
     */
    lastModified?: string;
    /**
     * Details about the user who last modified the workspace.
     */
    lastModifiedByInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * Information about the settings for the workspace.
     */
    settings?: /* This object provides information about the settings for the workspace. */ WorkspaceSettings;
    /**
     * The status of the item.
     */
    status?: string;
    /**
     * The relative URL for accessing the workspace.
     */
    workspaceBaseUrl?: string;
    /**
     * Text describing the purpose of the workspace.
     */
    workspaceDescription?: string;
    /**
     * The id of the workspace.
     */
    workspaceId?: string;
    /**
     * The name of the workspace.
     */
    workspaceName?: string;
    /**
     * The relative URI for accessing the workspace.
     */
    workspaceUri?: string;
}

/**
 * This object's properties describe the contents of a workspace folder.
 */
export interface WorkspaceFolderContents {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The folder from which to return items. You can enter either the folder name or folder ID.
     */
    folder?: /* This object represents an item in a workspace, which can be either a file or folder. */ WorkspaceItem;
    /**
     * A list of workspace items.
     */
    items?: /* This object represents an item in a workspace, which can be either a file or folder. */ WorkspaceItem[];

    parentFolders?: /* This object represents an item in a workspace, which can be either a file or folder. */ WorkspaceItem[];
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
    /**
     * The id of the workspace.
     */
    workspaceId?: string;
}

/**
 * This object represents an item in a workspace, which can be either a file or folder.
 */
export interface WorkspaceItem {
    callerAuthorization?: /* Provides properties that describe user authorization to a workspace. */ WorkspaceUserAuthorization;
    /**
     * If the item is a file, this property specifies the content type of the file.
     */
    contentType?: string;
    /**
     * The UTC DateTime when the workspace user authorization was created.
     */
    created?: string;
    /**
     * The id of the user who created the workspace item.
     */
    createdById?: string;
    /**
     * Details about the user who created the workspace item.
     */
    createdByInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * The file extension of a file item.
     */
    extension?: string;
    /**
     * The size of the file in bytes.
     */
    fileSize?: string;
    /**
     * The URI for retrieving the file.
     */
    fileUri?: string;
    /**
     * A unique ID for the Salesforce object.
     */
    id?: string;
    /**
     *  When **true**, the item is public.
     */
    isPublic?: string;
    /**
     * The UTC date and time that the comment was last updated.
     *
     * **Note**: This can only be done by the creator.
     */
    lastModified?: string;
    /**
     * The id of the user who last modified the item.
     */
    lastModifiedById?: string;
    /**
     * Details about the user who last modified the workspace item.
     */
    lastModifiedByInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * The name of the file or folder.
     */
    name?: string;
    /**
     * The number of pages in a file.
     */
    pageCount?: string;
    /**
     * The id of the parent folder, or the special value `root` for the root folder.
     */
    parentFolderId?: string;
    /**
     * The URI of the parent folder.
     */
    parentFolderUri?: string;
    /**
     * A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content of a file.
     * DocuSign compares this value to its own computation. If the two values are not equal, the original content and received content are not the same and the upload is refused.
     */
    sha256?: string;
    /**
     * The height of the thumbnail image.
     */
    thumbHeight?: string;

    thumbnail?: /* Description of a page of a document. */ Page;
    /**
     * The width of the thumbnail image.
     */
    thumbWidth?: string;

    type?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;

    userAuthorization?: /* Provides properties that describe user authorization to a workspace. */ WorkspaceUserAuthorization;
}

/**
 * An array of objects that describe the items in a workspace.
 */
export interface WorkspaceItemList {
    /**
     * A list of workspace items.
     */
    items?: /* This object represents an item in a workspace, which can be either a file or folder. */ WorkspaceItem[];
}

/**
 * This object contains information about a file or folder in a workspace.
 */
export interface WorkspaceItems {
    /**
     * An object that describes the caller's workspace permissions.
     */
    callerAuthorization?: /* Provides properties that describe user authorization to a workspace. */ WorkspaceUserAuthorization;
    /**
     * If the item is a file, this property specifies the content type of the file.
     */
    contentType?: string;
    /**
     * The UTC DateTime when the workspace item was created.
     */
    created?: string;
    /**
     * The id of the user who created the workspace item.
     */
    createdById?: string;
    /**
     * Details about the user who created the workspace item.
     */
    createdByInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * The file extension of a file item.
     */
    extension?: string;
    /**
     * The size of the file in bytes.
     */
    fileSize?: string;
    /**
     * The URI for retrieving the file.
     */
    fileUri?: string;
    /**
     * The id of the workspace item.
     */
    id?: string;
    /**
     *  When **true**, the item is public.
     */
    isPublic?: string;
    /**
     * The UTC DateTime that the item was last modified.
     */
    lastModified?: string;
    /**
     * The id of the user who last modified the item.
     */
    lastModifiedById?: string;
    /**
     * Details about the user who last modified the workspace item.
     */
    lastModifiedByInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * The name of the file or folder.
     */
    name?: string;
    /**
     * The number of pages in a file.
     */
    pageCount?: string;
    /**
     * The id of the parent folder, or the special value `root` for the root folder.
     */
    parentFolderId?: string;
    /**
     * The URI of the parent folder.
     */
    parentFolderUri?: string;
    /**
     * A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content of a file.
     * DocuSign compares this value to its own computation. If the two values are not equal, the original content and received content are not the same and the upload is refused.
     */
    sha256?: string;
    /**
     * The height of the thumbnail image.
     */
    thumbHeight?: string;

    thumbnail?: /* Description of a page of a document. */ Page;
    /**
     * The width of the thumbnail image.
     */
    thumbWidth?: string;
    /**
     * The type of workspace item. Valid values are:
     *
     * - `file`
     * - `folder`
     */
    type?: string;
    /**
     * A URI containing the user ID.
     */
    uri?: string;
    /**
     * An object that describes the user's workspace permissions.
     */
    userAuthorization?: /* Provides properties that describe user authorization to a workspace. */ WorkspaceUserAuthorization;
}

/**
 * This object contains a list of available workspaces.
 */
export interface WorkspaceList {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
    /**
     * A list of workspaces.
     */
    workspaces?: /* A DocuSign workspace is a collaboration area for sharing files and data. */ Workspace[];
}

/**
 * This object provides information about the settings for the workspace.
 */
export interface WorkspaceSettings {
    /**
     * When **true**, commenting on the documents in the workspace is allowed.
     */
    commentsAllowed?: string;
}

/**
 * This object represents the workspace user. This property is only returned in response to user specific GET call.
 */
export interface WorkspaceUser {
    /**
     * The account ID associated with the workspace user.
     */
    accountId?: string;
    /**
     * The name on the account.
     */
    accountName?: string;
    /**
     * The UTC DateTime when the user joined the workspace.
     */
    activeSince?: string;
    /**
     * The UTC DateTime when the workspace user was created.
     */
    created?: string;
    /**
     * The id of the user who created this workspace user.
     */
    createdById?: string;
    /**
     * The workspace user's email address.
     */
    email?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The text of the workspace invitation email message sent to the user.
     */
    invitationEmailBlurb?: string;
    /**
     * The subject line of the workspace invitation email message sent to the user.
     */
    invitationEmailSubject?: string;
    /**
     * The UTC DateTime that the workspace user was last modified.
     */
    lastModified?: string;
    /**
     * The id of the user who last modified the workspace user.
     */
    lastModifiedById?: string;
    /**
     * Filters the results by user status.
     * You can specify a comma-separated
     * list of the following statuses:
     *
     * * ActivationRequired
     * * ActivationSent
     * * Active
     * * Closed
     * * Disabled
     */
    status?: string;

    type?: string;
    /**
     * The id of the workspace user.
     */
    userId?: string;
    /**
     * The name of workspace user.
     */
    userName?: string;
    /**
     * The id of the workspace.
     */
    workspaceId?: string;
    /**
     * The URL for accessing the workspace user.
     */
    workspaceUserBaseUrl?: string;
    /**
     * The id of the workspace user.
     */
    workspaceUserId?: string;
    /**
     * The URI for accessing the workspace user.
     */
    workspaceUserUri?: string;
}

/**
 * Provides properties that describe user authorization to a workspace.
 */
export interface WorkspaceUserAuthorization {
    /**
     * When set to **true**, the workspace user can delete items from the workspace.
     */
    canDelete?: string;
    /**
     * When set to **true**, the workspace user can move the items in the workspace.
     */
    canMove?: string;
    /**
     * When set to **true**, the workspace user can create transactions from the workspace.
     */
    canTransact?: string;
    /**
     * When set to **true**, the workspace user can view the items in the workspace.
     */
    canView?: string;
    /**
     * The UTC DateTime when the workspace user authorization was created.
     */
    created?: string;
    /**
     * The id of the user who created the workspace user authorization.
     */
    createdById?: string;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The UTC DateTime when the workspace user authorization was last modified.
     */
    modified?: string;
    /**
     * The id of the user who last modified the workspace user authorization.
     */
    modifiedById?: string;
    /**
     * The id of the workspace user.
     */
    workspaceUserId?: string;
    /**
     * An object that provides details about the workspace user.
     */
    workspaceUserInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
}

/**
 * A DocuSign workspace is a collaboration area for sharing files and data.
 */
export interface Workspaces {
    /**
     * The id of the account to bill.
     */
    billableAccountId?: string;

    callerInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * The UTC DateTime when the workspace user authorization was created.
     */
    created?: string;
    /**
     * Details about the user who created the workspace.
     */
    createdByInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * The UTC date and time that the comment was last updated.
     *
     * **Note**: This can only be done by the creator.
     */
    lastModified?: string;
    /**
     * Details about the user who last modified the workspace.
     */
    lastModifiedByInformation?: /* This object represents the workspace user. This property is only returned in response to user specific GET call.  */ WorkspaceUser;
    /**
     * Information about the settings for the workspace.
     */
    settings?: /* This object provides information about the settings for the workspace. */ WorkspaceSettings;
    /**
     * The status of the workspace. Valid values are:
     *
     * - `active`
     * - `closed`
     */
    status?: string;
    /**
     * The relative URL for accessing the workspace.
     */
    workspaceBaseUrl?: string;
    /**
     * Text describing the purpose of the workspace.
     */
    workspaceDescription?: string;
    /**
     * The id of the workspace.
     */
    workspaceId?: string;
    /**
     * The name of the workspace.
     */
    workspaceName?: string;
    /**
     * The relative URI for accessing the workspace.
     */
    workspaceUri?: string;
}

/**
 * A tab that allows the recipient to enter a ZIP code. The ZIP
 * code can be five digits or nine digits in the ZIP+4 format.
 * The zip code can be typed with or without dashes. It uses
 * the same parameters as a Text tab, with the validation
 * message and pattern set for ZIP code information.
 *
 */
export interface Zip {
    anchorAllowWhiteSpaceInCharacters?: string;

    anchorAllowWhiteSpaceInCharactersMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are placed. When **true**,
     * the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.
     *
     * For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc.
     * will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     */
    anchorCaseSensitive?: string;
    /**
     * Metadata that indicates whether the `anchorCaseSensitive` property is editable.
     */
    anchorCaseSensitiveMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
     *
     * - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
     * - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorHorizontalAlignment?: string;
    /**
     * Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.
     */
    anchorHorizontalAlignmentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
     */
    anchorIgnoreIfNotPresent?: string;
    /**
     * Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.
     */
    anchorIgnoreIfNotPresentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created.
     * The default value is **false**.
     *
     * For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**,
     * if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
     *
     * This functionality uses the following rules:
     *
     * - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
     *
     *   $~><|^+=
     *
     *   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
     *
     * - Strings embedded in other strings are ignored during the matching process.
     *
     * - In words that have dashes, the parts separated by dashes are treated as distinct words.
     *
     *   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.
     *
     * - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
     *
     * - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
     *
     *   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
     *
     * - Unlike punctuation, numbers are not ignored when finding anchor words.
     *
     *   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
     *
     *
     * **Note**: You can only specify the value of this property in POST requests.
     *
     * [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace
     *
     */
    anchorMatchWholeWord?: string;
    /**
     * Metadata that indicates whether the `anchorMatchWholeWord` property is editable.
     */
    anchorMatchWholeWordMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the string to find in the document and use as the basis for tab placement.
     */
    anchorString?: string;
    /**
     * Metadata that indicates whether the `anchorString` property is editable.
     */
    anchorStringMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersion?: string;
    /**
     * Reserved for DocuSign.
     */
    anchorTabProcessorVersionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the units of the X and Y offset. Units may be pixels, millimeters, centimeters, or inches.
     */
    anchorUnits?: string;
    /**
     * Metadata that indicates whether the `anchorUnits` property is editable.
     */
    anchorUnitsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorXOffset?: string;
    /**
     * Metadata that indicates whether the `anchorXOffset` property is editable.
     */
    anchorXOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
     *
     * **Note**: When you provide an x- and y-coordinate for the sign here tab, the tab appears 21 points lower than the value you provide for the y-coordinate.
     * To align the tab as expected, subtract 21 from the expected y-value.
     */
    anchorYOffset?: string;
    /**
     * Metadata that indicates whether the `anchorYOffset` property is editable.
     */
    anchorYOffsetMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is bold.
     */
    bold?: string;
    /**
     * Metadata that indicates whether the `bold` property is editable.
     */
    boldMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field,
     * but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
     *
     * When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console.
     * The information on the downloaded document remains masked by asterisks.
     *
     * This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     */
    concealValueOnDocument?: string;
    /**
     * Metadata that indicates whether the `concealValueOnDocument` property is editable.
     */
    concealValueOnDocumentMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
     */
    conditionalParentLabel?: string;
    /**
     * Metadata that indicates whether the `conditionalParentLabel` property is editable.
     */
    conditionalParentLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * For conditional fields, this is the value of the parent tab that controls the tab's visibility.
     *
     * If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
     *
     */
    conditionalParentValue?: string;
    /**
     * Metadata that indicates whether the `conditionalParentValue` property is editable.
     */
    conditionalParentValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient.
     * When used, the new tab inherits all the custom tab properties.
     */
    customTabId?: string;
    /**
     * Metadata that indicates whether the `customTabId` property is editable.
     */
    customTabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data.
     * If disabled users will only be able enter as much data as the text box can hold. By default this is false.
     * This property only affects single line text boxes.
     */
    disableAutoSize?: string;
    /**
     * Metadata that indicates whether the `disableAutoSize` property is editable.
     */
    disableAutoSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647.
     * The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope.
     * Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     */
    documentId?: string;
    /**
     * Metadata that indicates whether the `documentId` property is editable.
     */
    documentIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    errorDetails?: /* This object describes errors that occur. It is only valid for responses and ignored in requests. */ ErrorDetails;
    /**
     * The font to be used for the tab value. Supported fonts include:
     *
     * - Default
     * - Arial
     * - ArialNarrow
     * - Calibri
     * - CourierNew
     * - Garamond
     * - Georgia
     * - Helvetica
     * - LucidaConsole
     * - MSGothic
     * - MSMincho
     * - OCR-A
     * - Tahoma
     * - TimesNewRoman
     * - Trebuchet
     * - Verdana
     *
     */
    font?: string;
    /**
     * The font color to use for the information in the tab. Possible values are:
     *
     * - Black
     * - BrightBlue
     * - BrightRed
     * - DarkGreen
     * - DarkRed
     * - Gold
     * - Green
     * - NavyBlue
     * - Purple
     * - White
     *
     */
    fontColor?: string;
    /**
     * Metadata that indicates whether the `fontColor` property is editable.
     */
    fontColorMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `font` property is editable.
     */
    fontMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The font size used for the information in the tab. Possible values are:
     *
     * - Size7
     * - Size8
     * - Size9
     * - Size10
     * - Size11
     * - Size12
     * - Size14
     * - Size16
     * - Size18
     * - Size20
     * - Size22
     * - Size24
     * - Size26
     * - Size28
     * - Size36
     * - Size48
     * - Size72
     */
    fontSize?: string;
    /**
     * Metadata that indicates whether the `fontSize` property is editable.
     */
    fontSizeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
     */
    formOrder?: string;
    /**
     * Metadata that indicates whether the `formOrder` property is editable.
     */
    formOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
     */
    formPageLabel?: string;
    /**
     * Metadata that indicates whether the `formPageLabel` property is editable.
     */
    formPageLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An integer specifying the order in which to present the guided form pages.
     */
    formPageNumber?: string;
    /**
     * Metadata that indicates whether the `fromPageNumber` property is editable.
     */
    formPageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The height of the tab in pixels.
     */
    height?: string;
    /**
     * Metadata that indicates whether the `height` property is editable.
     */
    heightMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is italic.
     */
    italic?: string;
    /**
     * Metadata that indicates whether the `italic` property is editable.
     */
    italicMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Reserved for DocuSign.
     */
    localePolicy?: LocalePolicyTab;
    /**
     * When set to **true**, the signer cannot change the data of the custom tab.
     */
    locked?: string;
    /**
     * Metadata that indicates whether the `locked` property is editable.
     */
    lockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An optional value that describes the maximum length of the property when the property is a string.
     */
    maxLength?: string;
    /**
     * Metadata that indicates whether the `maxLength` property is editable.
     */
    maxLengthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Contains the information necessary to map the tab to a field in SalesForce.
     */
    mergeField?: /* Contains information for transfering values between Salesforce data fields and DocuSign Tabs. */ MergeField;

    mergeFieldXml?: string;
    /**
     * The name of the tab. For example, `Sign Here` or `Initial Here`.
     */
    name?: string;
    /**
     * Metadata that indicates whether the `name` property is editable. Read only.
     */
    nameMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The initial value of the tab when it was sent to the recipient.
     */
    originalValue?: string;
    /**
     * Metadata that indicates whether the `originalValue` property is editable.
     */
    originalValueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The page number on which the tab is located. For supplemental documents, this value must be `1`.
     */
    pageNumber?: string;
    /**
     * Metadata that indicates whether the `pageNumber` property is editable.
     */
    pageNumberMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A local reference that senders use to map recipients to other objects, such as specific document tabs.
     * Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes.
     * For example, many envelopes assign the first recipient a `recipientId` of `1`.
     */
    recipientId?: string;
    /**
     * The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes,
     * they will have a different GUID for each one. Read only.
     */
    recipientIdGuid?: string;
    /**
     * Metadata that indicates whether the `recipientIdGuid` property is editable.
     */
    recipientIdGuidMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Metadata that indicates whether the `recipientId` property is editable.
     */
    recipientIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true** and shared is true, information must be entered in this field to complete the envelope.
     */
    requireAll?: string;
    /**
     * Metadata that indicates whether the `requireAll` property is editable.
     */
    requireAllMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the signer is required to fill out this tab.
     */
    required?: string;
    /**
     * Metadata that indicates whether the `required` property is editable.
     */
    requiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
     */
    requireInitialOnSharedChange?: string;
    /**
     * Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.
     */
    requireInitialOnSharedChangeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender must populate the tab before an envelope can be sent using the template.
     *
     * This value tab can only be changed by modifying (PUT) the template.
     *
     * Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
     */
    senderRequired?: string;
    /**
     * Metadata that indicates whether the `senderRequired` property is editable.
     */
    senderRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, this custom tab is shared.
     */
    shared?: string;
    /**
     * Metadata that indicates whether the `shared` property is editable.
     */
    sharedMetadata?: /* Metadata about a property. */ PropertyMetadata;

    smartContractInformation?: SmartContractInformation;
    /**
     * The status of the tab. Possible values are:
     *
     * - `active`: The tab is active, but the recipient has not yet interacted with it.
     * - `signed`: The recipient signed the tab.
     * - `declined`: The recipient declined the envelope.
     * - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
     *
     */
    status?: string;
    /**
     * Metadata that indicates whether the `status` property is editable.
     */
    statusMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
     */
    tabGroupLabels?: string[];
    /**
     * Metadata that indicates whether the `tabGroupLabels` property is editable.
     */
    tabGroupLabelsMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The unique identifier for the tab.
     */
    tabId?: string;
    /**
     * Metadata that indicates whether the `tabId` property is editable.
     */
    tabIdMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The label associated with the tab. This value may be an empty string.
     * If no value is provided, the tab type is used as the value.
     *
     * Maximum Length: 500 characters.
     *
     */
    tabLabel?: string;
    /**
     * Metadata that indicates whether the `tabLabel` property is editable.
     */
    tabLabelMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A positive integer that sets the order the tab is navigated to during signing.
     *
     * Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest.
     * If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
     */
    tabOrder?: string;
    /**
     * Metadata that indicates whether the `tabOrder` property is editable.
     */
    tabOrderMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Indicates the type of tab (for example, `signHere` or `initialHere`).
     */
    tabType?: string;
    /**
     * Metadata that indicates whether the `tabType` property is editable.
     */
    tabTypeMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     */
    templateLocked?: string;
    /**
     * Metadata that indicates whether the `templateLocked` property is editable.
     */
    templateLockedMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     */
    templateRequired?: string;
    /**
     * Metadata that indicates whether the `templateRequired` property is editable.
     */
    templateRequiredMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The text of a tooltip that appears when a user hovers over a form field or tab.
     */
    tooltip?: string;
    /**
     * Metadata that indicates whether the `toolTip` property is editable.
     */
    toolTipMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, the information in the tab is underlined.
     */
    underline?: string;
    /**
     * Metadata that indicates whether the `underline` property is editable.
     */
    underlineMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * When set to **true**, ZIP+4 format is used.
     */
    useDash4?: string;
    /**
     * Metadata that indicates whether the `useDash4` property is editable.
     */
    useDash4Metadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The message displayed if the custom tab fails input validation (either custom of embedded).
     */
    validationMessage?: string;
    /**
     * Metadata that indicates whether the `validationMessage` property is editable.
     */
    validationMessageMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * A regular expression used to validate input for the tab.
     */
    validationPattern?: string;
    /**
     * Metadata that indicates whether the `validationPattern` property is editable.
     */
    validationPatternMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * Specifies the value of the tab.
     */
    value?: string;
    /**
     * Metadata that indicates whether the `value` property is editable.
     */
    valueMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * The width of the tab in pixels.
     */
    width?: string;
    /**
     * Metadata that indicates whether the `width` property is editable.
     */
    widthMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This property indicates the horizontal offset of the object on the page.
     * DocuSign uses 72 DPI when determining position.
     * Required. May be zero.
     *
     */
    xPosition?: string;
    /**
     * Metadata that indicates whether the `xPosition` property is editable.
     */
    xPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
    /**
     * This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
     */
    yPosition?: string;
    /**
     * Metadata that indicates whether the `yPosition` property is editable.
     */
    yPositionMetadata?: /* Metadata about a property. */ PropertyMetadata;
}

/**
 * Folder management
 */
export interface Folders {
    /**
     * The last index position in the result set.
     */
    endPosition?: string;
    /**
     * A list of envelopes in this folder.
     */
    envelopes?: /*  This object describes an envelope. */ EnvelopeSummary[];
    /**
     * A list of folder objects.
     */
    folders?: /* This object contains details about a folder. */ Folder[];
    /**
     * The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
     */
    nextUri?: string;
    /**
     * The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
     */
    previousUri?: string;
    /**
     * The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
     */
    resultSetSize?: string;
    /**
     * The starting index position of the current result set.
     */
    startPosition?: string;
    /**
     * The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
     */
    totalSetSize?: string;
}

export interface EnvelopesFilters {
    acStatus?: string;
    continuationToken?: string;
    count?: string;
    customField?: string;
    email?: string;
    envelopeIds?: string;
    exclude?: string;
    folderIds?: string;
    folderTypes?: string;
    fromDate?: string;
    fromToStatus?: string;
    include?: string;
    includePurgeInformation?: string;
    intersectingFolderIds?: string;
    lastQueriedDate?: string;
    order?: string;
    orderBy?: string;
    powerformids?: string;
    queryBudget?: string;
    requesterDateFormat?: string;
    searchText?: string;
    startPosition?: string;
    status?: string;
    toDate?: string;
    transactionIds?: string;
    userFilter?: string;
    userId?: string;
    userName?: string;
}

export interface DocumentOptions {
    certificate?: string;
    documentsByUserid?: string;
    encrypt?: string;
    language?: string;
    recipientId?: string;
    sharedUserId?: string;
    showChanges?: string;
    watermark?: string;
}
