// Type definitions for Ignite UI 19.1
// Project: https://github.com/IgniteUI/ignite-ui
// Definitions by: Ignite UI <https://github.com/IgniteUI>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

interface DataSourceSettingsPaging {
	/**
	 * Paging is not enabled by default
	 *
	 */
	enabled?: boolean;

	/**
	 * Type for the paging operation
	 *
	 *
	 * Valid values:
	 * "local" Data is paged client-side.
	 * "remote" A remote request is done and URL params encoded
	 */
	type?: string;

	/**
	 * Number of records on each page
	 *
	 */
	pageSize?: number;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size
	 *
	 */
	pageSizeUrlKey?: string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index
	 *
	 */
	pageIndexUrlKey?: string;

	/**
	 * Current page index
	 *
	 */
	pageIndex?: number;

	/**
	 * Whether when a new page of data is requested we should append the new data to the existing data
	 *
	 */
	appendPage?: boolean;

	/**
	 * Option for DataSourceSettingsPaging
	 */
	[optionName: string]: any;
}

interface DataSourceSettingsFiltering {
	/**
	 * Filtering type.
	 *
	 * Valid values:
	 * "remote" Parameters will be encoded and it's up to the backend to interpred them from the response.
	 * "local" The data will be filtered automatically client-side
	 */
	type?: string;

	/**
	 * Enables or disables case sensitive filtering on the data. Works only for local filtering
	 *
	 */
	caseSensitive?: boolean;

	/**
	 * If the type of paging/sorting/filtering is local and applyToAllData is true, filtering will be performed on the whole data source that's present locally, otherwise only on the current dataView. if type is remote, this setting doesn't have any effect.
	 *
	 */
	applyToAllData?: boolean;

	/**
	 * Can point to either a string or a function object. The parameters that are passed are 1) the data array to be filtered, 2) the filtering expression definitions. Should return an array of the filtered data
	 *
	 */
	customFunc?: any;

	/**
	 * Url key that will be encoded in the request if remote filtering is performed. Default value of null implies OData-style URL encoding. Please see http://www.odata.org/developers/protocols/uri-conventions for details
	 *
	 */
	filterExprUrlKey?: string;

	/**
	 * Url key that will be encoded in the request, specifying if the filtering logic will be AND or OR
	 *
	 */
	filterLogicUrlKey?: string;

	/**
	 * Data will be initially filtered accordingly, directly after dataBind()
	 *
	 */
	defaultFields?: any[];

	/**
	 * A list of expression objects, containing the following key-value pairs: fieldName, expression (search string), condition , and logic (AND/OR)
	 *
	 */
	expressions?: any[];

	/**
	 * An "SQL-like' encoded expressions string. Takes precedence over "expressions". Example: col2 > 100; col2 LIKE %test%
	 *
	 */
	exprString?: string;

	/**
	 * An object containing custom defined filtering conditions as objects.
	 *
	 */
	customConditions?: any;

	/**
	 * Option for DataSourceSettingsFiltering
	 */
	[optionName: string]: any;
}

interface DataSourceSettingsSorting {
	/**
	 * Sorting direction
	 *
	 *
	 * Valid values:
	 * "none"
	 * "asc"
	 * "desc"
	 */
	defaultDirection?: string;

	/**
	 * When defaultDirection is different than "none", and defaultFields is specified, data will be initially sorted accordingly, directly after dataBind()
	 *
	 */
	defaultFields?: any[];

	/**
	 * If the sorting type is local and applyToAllData is true, sorting will be performed on the whole data source that's present locally, otherwise only on the current dataView. If sorting type is remote, this setting doesn't have any effect.
	 *
	 */
	applyToAllData?: boolean;

	/**
	 * Custom sorting function that can point to either a string or a function object. When the function is called, the following arguments are passed: data array, fields (array of field definitions) , direction ("asc" or "desc"). The function should return a sorted data array
	 *
	 */
	customFunc?: any;

	/**
	 * Custom comparison sorting function. Accepts the following arguments: fields, schema, booleand value whether sorting is ascending , convert function(please check option for customConvertFunc) and returns a value 0 indicating that values are equal, 1 indicating that val1 > val2 and -1 indicating that val1 < val2
	 *
	 */
	compareFunc?: any;

	/**
	 * Custom data value conversion function(called from sorting function). Accepts a value of the data cell and column key and should return the converted value
	 *
	 */
	customConvertFunc?: any;

	/**
	 * Specifies whether sorting will be applied locally or remotely (via a remote request)
	 *
	 *
	 * Valid values:
	 * "remote"
	 * "local"
	 */
	type?: string;

	/**
	 * Specifies if sorting will be case sensitive or not. Works only for local sorting
	 *
	 */
	caseSensitive?: boolean;

	/**
	 * URL param name which specifies how sorting expressions will be encoded in the URL. Default is null and uses OData conventions
	 *
	 */
	sortUrlKey?: string;

	/**
	 * URL param value for ascending type of sorting. Default is null and uses OData conventions
	 *
	 */
	sortUrlAscValueKey?: string;

	/**
	 * URL param value for descending type of sorting. Default is null and uses OData conventions
	 *
	 */
	sortUrlDescValueKey?: string;

	/**
	 * A list of sorting expressions , consisting of the following keys (and their respective values): fieldName, direction and compareFunc (optional)
	 *
	 */
	expressions?: any[];

	/**
	 * Takes precedence over experssions, an "SQL-like" encoded expressions string  : see sort(). Example col2 > 100 ORDER BY asc
	 *
	 */
	exprString?: string;

	/**
	 * Option for DataSourceSettingsSorting
	 */
	[optionName: string]: any;
}

interface DataSourceSettingsGroupby {
	/**
	 * Default collapse state
	 *
	 */
	defaultCollapseState?: boolean;

	/**
	 * The name of the property that determines whether a record from the group data view is a group record.
	 *
	 */
	groupRecordKey?: string;

	/**
	 * The name of the property that determines whether a record from the group data view is a summary group record.
	 *
	 */
	groupSummaryRecordKey?: string;

	/**
	 * Array of objects containing the summaries for each field.
	 * Each summary object has the following format { field:"fieldName", summaryFunctions: [] }, where the summaryFunctions arrays can contain either a summary name (avg, sum, count etc.) or a custom function for caclulating a custom summary.
	 *
	 */
	summaries?: any[];

	/**
	 * Specifies the postion for the summaries for each field inside each group.
	 *
	 *
	 * Valid values:
	 * "top" One summary row will be displayed at the top for each group
	 * "bottom"  One summary row will be displayed at the bottom for each group
	 * "both" Two summary rows will be be display for each group. One on the top and one on the bottom.
	 */
	summariesPosition?: string;

	/**
	 * . Specifies how paging should be applied when there is at least one grouped column
	 *
	 *
	 * Valid values:
	 * "allRecords" Paging is applied for all records - data and non-data records(like group-by records)
	 * "dataRecordsOnly" Paging is applied ONLY for data records. Non-data records are disregarded in paging calculations.
	 */
	pagingMode?: string;

	/**
	 * Option for DataSourceSettingsGroupby
	 */
	[optionName: string]: any;
}

interface DataSourceSettingsSummaries {
	/**
	 * Specifies whether summaries will be applied locally or remotely (via a remote request)
	 *
	 *
	 * Valid values:
	 * "remote" A remote request is done and URL params encoded
	 * "local" Data is paged client-side.
	 */
	type?: string;

	/**
	 * Url key for retrieving data from response - used only when summaries are remote
	 *
	 */
	summaryExprUrlKey?: string;

	/**
	 * Key for retrieving data from the summaries response - used only when summaries are remote
	 *
	 */
	summariesResponseKey?: string;

	/**
	 * Determines when the summary values are calculated
	 *
	 *
	 * Valid values:
	 * "priortofilteringandpaging"
	 * "afterfilteringbeforepaging"
	 * "afterfilteringandpaging"
	 */
	summaryExecution?: string;

	/**
	 * A list of column settings that specifies custom summaries options per column basis
	 *
	 */
	columnSettings?: any[];

	/**
	 * Option for DataSourceSettingsSummaries
	 */
	[optionName: string]: any;
}

interface DataSourceSettings {
	/**
	 * Setting this is only necessary when the data source is set to a table in string format. we need to create an invisible dummy data container in the body and append the table data to it
	 *
	 */
	id?: string;

	/**
	 * This is the property in the dataView where actual resulting records will be put. (So the dataView will not be array but an object if this is defined), after the potential data source transformation
	 *
	 */
	outputResultsName?: string;

	/**
	 * Callback function to call when data binding is complete
	 *
	 */
	callback?: Function;

	/**
	 * Object on which to invoke the callback function
	 *
	 */
	callee?: any;

	/**
	 * This is the normalized (transformed) resulting data, after it's fetched from the data source
	 *
	 */
	data?: any[];

	/**
	 * This is the source of data - non normalized. Can be an array, can be reference to some JSON object, can be a DOM element for a HTML TABLE, or a function
	 *
	 */
	dataSource?: any;

	/**
	 * Client-side dataBinding event. Can be a string pointing to a function name, or an object pointing to a function
	 *
	 */
	dataBinding?: any;

	/**
	 * Client-side dataBound event. Can be a string pointing to a function name, or an object pointing to a function
	 *
	 */
	dataBound?: any;

	/**
	 * Specifies the HTTP verb to be used to issue the request
	 *
	 */
	requestType?: string;

	/**
	 * Type of the data source
	 *
	 *
	 * Valid values:
	 * "json" Specifies that the data source is an already evaluated JSON (JavaScript object/array) or a string that can be evaluated to JSON
	 * "xml" Specifies that the data source is a XML Document object or a string that can be evaluated to XML
	 * "unknown" Specifies that the data source is of unknown type. In that case it will be analyzed and automatically detected if possible
	 * "array" Specifies that the data source is a simple array of objects.
	 * "function" Specifies that the data source points to a function. During data binding the function will be called and the result will be assumed to be an array of objects
	 * "htmlTableString" Specifies that the data source points to a string that represents a HTML table
	 * "htmlTableId" Specifies that the data source points to an ID of a HTML Table element that's loaded on the page
	 * "htmlTableDom" The data source points to a DOM object that is of TABLE type
	 * "invalid" Set whenever data source is analyzed (in case its type is unknown) and the type cannot be detected
	 * "remoteUrl" Specifies that the data source points to a remote URL, from which data will be retrieved using an AJAX call ($.ajax)
	 * "htmlListDom" The data source points to a DOM object that is of UL/OL type
	 * "htmlSelectDom" The data source points to a DOM object that is of SELECT type
	 * "empty"
	 */
	type?: string;

	/**
	 * A schema object that defines which fields from the data to bind to
	 *
	 */
	schema?: any;

	/**
	 * The unique field identifier
	 *
	 */
	primaryKey?: string;

	/**
	 * Property in the response which specifies the total number of records in the backend (this is needed for paging)
	 *
	 */
	responseTotalRecCountKey?: string;

	/**
	 * Property in the response which specifies where the data records array will be held (if the response is wrapped)
	 *
	 */
	responseDataKey?: string;

	/**
	 * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType
	 *
	 *
	 * Valid values:
	 * "json"
	 * "xml"
	 * "html"
	 * "script"
	 * "jsonp"
	 * "text"
	 */
	responseDataType?: string;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	responseContentType?: string;

	/**
	 * If set to false will disable transformations on schema, even if it is defined locally in the javascript code
	 *
	 */
	localSchemaTransform?: boolean;

	/**
	 * Event that is fired before URL parameters are encoded. Can point to a function name or the function object itself
	 *
	 */
	urlParamsEncoding?: any;

	/**
	 * Event that is fired after URL parameters are encoded (When a remote request is done). Can point to a function name or the function object itself
	 *
	 */
	urlParamsEncoded?: any;

	/**
	 * Settings related to built-in paging functionality
	 *
	 */
	paging?: DataSourceSettingsPaging;

	/**
	 * Settings related to built-in filtering functionality
	 *
	 */
	filtering?: DataSourceSettingsFiltering;

	/**
	 * Settings related to built-in sorting functionality
	 *
	 */
	sorting?: DataSourceSettingsSorting;

	/**
	 * Settings related to built-in group by functionality
	 *
	 */
	groupby?: DataSourceSettingsGroupby;

	/**
	 * Settings related to built-in summaries functionality
	 *
	 */
	summaries?: DataSourceSettingsSummaries;

	/**
	 * *** IMPORTANT DEPRECATED ***
	 * A list of field definitions specifying the schema of the data source.
	 * Field objects description: {name, [type], [xpath]}
	 *
	 */
	fields?: any[];

	/**
	 * If true, will serialize the transaction log of updated values - if any - whenever commit is performed via a remote request.
	 *
	 */
	serializeTransactionLog?: boolean;

	/**
	 * If set to true, the following behavior will take place:
	 * if a new row is added, and then deleted, there will be no transaction added to the log
	 * if an edit is made to a row or cell, then the value is brought back to its original value, the transaction should be removed
	 * Note: This option takes effect only when autoCommit is set to false.
	 *
	 */
	aggregateTransactions?: boolean;

	/**
	 * If auto commit is true, data will be automatically commited to the data source, once a value or a batch of values are updated via saveChanges()
	 *
	 */
	autoCommit?: boolean;

	/**
	 * Specifies an update remote URL, to which an AJAX request will be made as soon as saveChages() is called.
	 *
	 */
	updateUrl?: string;

	/**
	 * A function to call when row is added.
	 * Function takes first argument item and second argument dataSource.
	 * Use item.row to obtain reference to the added row.
	 * Use item.rowId to get the row ID.
	 * Use dataSource to obtain reference to $.ig.DataSource.
	 *
	 */
	rowAdded?: Function;

	/**
	 * A function to call when row is updated (edited).
	 * Function takes first argument item and second argument dataSource.
	 * Use item.rowIndex to get the row index.
	 * Use item.newRow to obtain reference to the updated row.
	 * Use item.oldRow to obtain reference to the row that was updated.
	 * Use dataSource to obtain reference to $.ig.DataSource.
	 *
	 */
	rowUpdated?: Function;

	/**
	 * A function to call when row is inserted.
	 * Function takes first argument item and second argument dataSource.
	 * Use item.row to obtain reference to the inserted row.
	 * Use item.rowId to get the row ID.
	 * Use item.rowIndex to get the row index.
	 * Use dataSource to obtain reference to $.ig.DataSource.
	 *
	 */
	rowInserted?: Function;

	/**
	 * A function to call when row is deleted.
	 * Use item.row to obtain reference to the deleted row.
	 * Use item.rowId to get the row ID.
	 * Use item.rowIndex to get the row index.
	 * Use dataSource to obtain reference to $.ig.DataSource.
	 *
	 */
	rowDeleted?: Function;

	/**
	 * Option for DataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class DataSource {
	constructor(settings: DataSourceSettings);

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
DataSource: typeof Infragistics.DataSource;
}

declare namespace Infragistics {
class TypeParser {
	toStr(obj: Object): void;

	/**
	 * L.A. 18 June 2012 Fixing bug #113265 Column 'date' shows empty values as 'NaN'
	 *
	 * @param obj
	 */
	toDate(obj: Object): void;
	toTime(obj: Object): void;
	toNumber(obj: Object): void;
	toBool(obj: Object): void;
	isNullOrUndefined(obj: Object): void;
	empty(): void;
	num(): void;
}
}

interface DataSchemaSchemaFields {
	/**
	 * Name of the field
	 */
	name?: string;

	/**
	 * data type of the fieldstring
	 * number
	 * bool
	 * date
	 * time
	 * object
	 *
	 *
	 * Valid values:
	 * "time"
	 */
	type?: string|number|boolean|Date|Object;

	/**
	 * The XPath expression to map the node to the field
	 */
	xpath?: string;

	/**
	 * This option is applicable only for fields with fieldDataType="object". Reference to a function (string or function) that can be used for complex data extraction from the data records, whose return value will be used for all data operations associated with this field.
	 */
	mapper?: string|Function;

	/**
	 * ParamType="function" optional="true" formatter function which accepts three parameters: val - value of the field; record - data source record; field - field definition; and return the formatted string. Formatter function is used when filtering by all fields.
	 */
	formatter?: any;

	/**
	 * Option for DataSchemaSchemaFields
	 */
	[optionName: string]: any;
}

interface DataSchemaSchema {
	/**
	 * A list of field definitions specifying the schema of the data source. Field objects description: {name, [type], [xpath]}
	 * returnType="array"
	 */
	fields?: DataSchemaSchemaFields;

	/**
	 * This is the property (path) in the data source where the records are located.
	 */
	searchField?: string;

	/**
	 * This is the property in the resulting object where actual resulting records will be put. (So the result will not be array but an object if this is defined), after the potential data source transformation
	 */
	outputResultsName?: string;

	/**
	 * This is the property (xpath) in the data source where the child records of a record are located. Used in XML binding.
	 */
	childDataProperty?: string;

	/**
	 * Option for DataSchemaSchema
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class DataSchema {
	constructor(schema: DataSchemaSchema);

	/**
	 * Performs a transformation on the schema so that the resulting data matches the schema
	 *
	 * @param data the data to transform
	 */
	transform(data: Object): Object;

	/**
	 * Specifies if the object is null, undefined, or an empty string
	 *
	 * @param o the object to check for being empty
	 */
	isEmpty(o: Object): Object;

	/**
	 * Specifies if the object has custom properties or not
	 *
	 * @param obj the object to check for presence or lack of custom properties
	 */
	isObjEmpty(obj: Object): Object;

	/**
	 * A list of field definitions specifying the schema of the data source.
	 * Field objects description: {fieldName, [fieldDataType], [fieldXPath]}
	 */
	fields(): any[];
}
}
interface IgniteUIStatic {
DataSchema: typeof Infragistics.DataSchema;
}

declare namespace Infragistics {
class RemoteDataSource {
	constructor(settings: DataSourceSettings);

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
RemoteDataSource: typeof Infragistics.RemoteDataSource;
}

interface JSONDataSourceSettings {
	/**
	 * Type of the data source.
	 */
	type?: string;

	/**
	 * Option for JSONDataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class JSONDataSource {
	constructor(settings: JSONDataSourceSettings);

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
JSONDataSource: typeof Infragistics.JSONDataSource;
}

interface RESTDataSourceSettingsRestSettingsCreate {
	/**
	 * Specifies a remote URL to which create requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
	 */
	url?: string;

	/**
	 * Specifies a remote URL template. Use ${id} in place of the resource id.
	 */
	template?: string;

	/**
	 * Specifies whether create requests will be sent in batches
	 */
	batch?: boolean;

	/**
	 * Option for RESTDataSourceSettingsRestSettingsCreate
	 */
	[optionName: string]: any;
}

interface RESTDataSourceSettingsRestSettingsUpdate {
	/**
	 * Specifies a remote URL to which update requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
	 */
	url?: string;

	/**
	 * Specifies a remote URL template. Use ${id} in place of the resource id.
	 */
	template?: string;

	/**
	 * Specifies whether update requests will be sent in batches
	 */
	batch?: boolean;

	/**
	 * Option for RESTDataSourceSettingsRestSettingsUpdate
	 */
	[optionName: string]: any;
}

interface RESTDataSourceSettingsRestSettingsRemove {
	/**
	 * Specifies a remote URL to which remove requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
	 */
	url?: string;

	/**
	 * Specifies a remote URL template. Use ${id} in place of the resource id.
	 */
	template?: string;

	/**
	 * Specifies whether update requests will be sent in batches
	 */
	batch?: boolean;

	/**
	 * Option for RESTDataSourceSettingsRestSettingsRemove
	 */
	[optionName: string]: any;
}

interface RESTDataSourceSettingsRestSettings {
	/**
	 * Settings for create requests
	 */
	create?: RESTDataSourceSettingsRestSettingsCreate;

	/**
	 * Settings for update requests
	 */
	update?: RESTDataSourceSettingsRestSettingsUpdate;

	/**
	 * Settings for remove requests
	 */
	remove?: RESTDataSourceSettingsRestSettingsRemove;

	/**
	 * Specifies whether the ids of the removed resources are send through the request URI
	 */
	encodeRemoveInRequestUri?: boolean;

	/**
	 * Specifies a custom function to serialize content sent to the server. It should accept a single object or an array of objects and return a string. If not specified, JSON.stringify() will be used.
	 */
	contentSerializer?: Function;

	/**
	 * Specifies the content type of the request
	 */
	contentType?: string;

	/**
	 * Option for RESTDataSourceSettingsRestSettings
	 */
	[optionName: string]: any;
}

interface RESTDataSourceSettings {
	/**
	 * Settings related to REST compliant update routine
	 */
	restSettings?: RESTDataSourceSettingsRestSettings;

	/**
	 * Option for RESTDataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class RESTDataSource {
	constructor(settings: RESTDataSourceSettings);

	/**
	 * Posts to the restSettings urls using $.ajax, by serializing the changes as url params.
	 *
	 * @param success
	 * @param error
	 */
	saveChanges(success: Object, error: Object): void;

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
RESTDataSource: typeof Infragistics.RESTDataSource;
}

interface JSONPDataSourceSettings {
	/**
	 * Override the callback function name in a jsonp request. Sets option jsonp in $.ajax functionbool Setting the jsonp option to false prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation
	 *
	 */
	jsonp?: string|boolean;

	/**
	 * Specify the callback function name for a JSONP request. Sets option jsonpCallback in $.ajax function
	 */
	jsonpCallback?: string|Function;

	/**
	 * Type of the data source.
	 */
	type?: string;

	/**
	 * Option for JSONPDataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class JSONPDataSource {
	constructor(settings: JSONPDataSourceSettings);

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
JSONPDataSource: typeof Infragistics.JSONPDataSource;
}

declare namespace Infragistics {
class XmlDataSource {
	constructor(settings: DataSourceSettings);

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
XmlDataSource: typeof Infragistics.XmlDataSource;
}

interface FunctionDataSourceSettings {
	/**
	 * Type of the data source.
	 */
	type?: string;

	/**
	 * Option for FunctionDataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class FunctionDataSource {
	constructor(settings: FunctionDataSourceSettings);

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
FunctionDataSource: typeof Infragistics.FunctionDataSource;
}

interface HtmlTableDataSourceSettings {
	/**
	 * Type of the data source.
	 */
	type?: string;

	/**
	 * Option for HtmlTableDataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class HtmlTableDataSource {
	constructor(settings: HtmlTableDataSourceSettings);

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
HtmlTableDataSource: typeof Infragistics.HtmlTableDataSource;
}

declare namespace Infragistics {
class ArrayDataSource {
	constructor(settings: DataSourceSettings);

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
ArrayDataSource: typeof Infragistics.ArrayDataSource;
}

interface MashupDataSourceMashupSettings {
	/**
	 * Indicates whether to ignore records that have no corresponding data in all of the provided data sources.
	 */
	ignorePartialRecords?: boolean;

	/**
	 * An array of $.ig.DataSource instances holding the disperse data.
	 */
	dataSource?: any[];

	/**
	 * Option for MashupDataSourceMashupSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class MashupDataSource {
	constructor(mashupSettings: MashupDataSourceMashupSettings);

	constructor(settings: DataSourceSettings);

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId Not used in $.ig.DataSource
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Data binds to the current data source.
	 */
	dataBind(): void;

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath Not used in $.ig.DataSource
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: string): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
	 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * example 3: [{filterAllFields: true, expr: "abc", fields: [name: "Description", type: "string"]}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 * To [filter by text](ig.datasource#methods:filterByText) "fieldExpressions" should have only one object with the following schema:
	 * {filterAllFields: <type="bool" should be set to true>, expr: <type="string" the text to search for>, fields: <type="array" an array of [fields](ig.dataschema#options:schema.fields) to search in>}
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalFilter(): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
MashupDataSource: typeof Infragistics.MashupDataSource;
}

interface HierarchicalDataSourceSettingsPaging {
	/**
	 * Option for HierarchicalDataSourceSettingsPaging
	 */
	[optionName: string]: any;
}

interface HierarchicalDataSourceSettingsSorting {
	/**
	 * Option for HierarchicalDataSourceSettingsSorting
	 */
	[optionName: string]: any;
}

interface HierarchicalDataSourceSettingsFiltering {
	/**
	 * Option for HierarchicalDataSourceSettingsFiltering
	 */
	[optionName: string]: any;
}

interface HierarchicalDataSourceSettingsSchema {
	/**
	 * Option for HierarchicalDataSourceSettingsSchema
	 */
	[optionName: string]: any;
}

interface HierarchicalDataSourceSettings {
	autogenerate?: boolean;
	initialDataBindDepth?: number;
	maxDataBindDepth?: number;
	defaultChildrenDataProperty?: string;
	callback?: any;
	callee?: any;
	data?: any[];
	dataSource?: any;
	dataBinding?: any;
	dataBound?: any;

	/**
	 * Other options
	 */
	type?: string;
	responseDataType?: any;
	responseContentType?: any;
	localSchemaTransform?: boolean;
	urlParamsEncoding?: any;
	urlParamsEncoded?: any;
	requestType?: string;
	odata?: boolean;
	paging?: HierarchicalDataSourceSettingsPaging;
	sorting?: HierarchicalDataSourceSettingsSorting;
	filtering?: HierarchicalDataSourceSettingsFiltering;

	/**
	 * All of the rest - paging, sorting, filtering, can be defined in the layouts definition, which will "override" the parent defs
	 * IMPORTANT:  if there is no paging, sorting or filtering, an instance of $.ig.DataSource won't be created for child row islands
	 */
	schema?: HierarchicalDataSourceSettingsSchema;

	/**
	 * Option for HierarchicalDataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class HierarchicalDataSource {
	constructor(settings: HierarchicalDataSourceSettings);
	dataBind(callback: Object, callee: Object): void;
	root(): void;
	dataAt(path: Object, keyspath: Object): void;
}
}
interface IgniteUIStatic {
HierarchicalDataSource: typeof Infragistics.HierarchicalDataSource;
}

interface TreeHierarchicalDataSourceSettingsTreeDSFiltering {
	/**
	 * Specifies from which data bound level to be applied filtering - 0 is the first level
	 */
	fromLevel?: number;

	/**
	 * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
	 */
	toLevel?: number;

	/**
	 * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don't match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don't match filtering conditions
	 */
	displayMode?: any;

	/**
	 * Filtering data source specific property - name of property in dataRecord object - indicates whether dataRow matches filtering conditions. It is used ONLY when filtering is applied.
	 */
	matchFiltering?: string;

	/**
	 * Option for TreeHierarchicalDataSourceSettingsTreeDSFiltering
	 */
	[optionName: string]: any;
}

interface TreeHierarchicalDataSourceSettingsTreeDSSorting {
	/**
	 * Specifies from which data bound level to be applied sorting - 0 is the first level
	 */
	fromLevel?: number;

	/**
	 * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
	 */
	toLevel?: number;

	/**
	 * Option for TreeHierarchicalDataSourceSettingsTreeDSSorting
	 */
	[optionName: string]: any;
}

interface TreeHierarchicalDataSourceSettingsTreeDSPaging {
	/**
	 * Sets gets paging mode.
	 *
	 * Valid values:
	 * "allLevels" includes all visible records in paging.
	 */
	mode?: string;

	/**
	 * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is 'rootLevelOnly' then the context row always shows the value of the contextRowRootText option.
	 *
	 *
	 * Valid values:
	 * "none" Does not render the contextual row
	 * "parent" Renders a read-only representation of the immediate parent row
	 * "breadcrumb" Renders a read-only breadcrumb trail representing the full path through all ancestors
	 */
	contextRowMode?: string;

	/**
	 * Option for TreeHierarchicalDataSourceSettingsTreeDSPaging
	 */
	[optionName: string]: any;
}

interface TreeHierarchicalDataSourceSettingsTreeDS {
	/**
	 * Property name of the array of child data in a hierarchical data source.
	 */
	childDataKey?: string;

	/**
	 * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
	 */
	foreignKey?: string;

	/**
	 * Specifies the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
	 */
	initialExpandDepth?: number;

	/**
	 * Specifies if data is loaded on demand from a remote server. Default is false.
	 */
	enableRemoteLoadOnDemand?: boolean;

	/**
	 * Specifies a remote URL as a data source, from which data will be retrieved using an AJAX call ($.ajax)
	 */
	dataSourceUrl?: string;

	/**
	 * Specifies a custom function to be called when the remote request for data has finished.
	 */
	requestDataCallback?: Function;

	/**
	 * Specifies a custom function to be called when the remote request for data has finished successfully.
	 */
	requestDataSuccessCallback?: Function;

	/**
	 * Specifies a custom function to be called when the remote request for data has finished with an error.
	 */
	requestDataErrorCallback?: Function;

	/**
	 * *** IMPORTANT DEPRECATED *** Use the expandedKey option instead.
	 * The name of the property that keeps track of the expansion state of a data item. Defaults to __ig_options.expanded.
	 */
	propertyExpanded?: string;

	/**
	 * *** IMPORTANT DEPRECATED *** Use the dataLevelKey option instead.
	 * The name of the property that keeps track of the level in the hierarchy.Defaults to __ig_options.dataLevel.
	 */
	propertyDataLevel?: string;

	/**
	 * The name of the property that keeps track of the expansion state of a data item. Defaults to __ig_options.expanded.
	 */
	expandedKey?: string;

	/**
	 * The name of the property that keeps track of the level in the hierarchy.Defaults to __ig_options.dataLevel.
	 */
	dataLevelKey?: string;

	/**
	 * If set to TRUE it is expected that the source of data is normalized and transformed(has set dataLevel and expansion state). The source of data is used as flatDataView. Usually used when the paging is remote and paging mode is allLevels, or features are remote(and the processing of the returned result should be made on the server)
	 *
	 */
	initialFlatDataView?: boolean;

	/**
	 * Specifies a custom function to be called when requesting data to the server - usually when expanding/collapsing record. If set the function should return the encoded URL. It takes as parameters: data record(type: object), expand - (type: bool).
	 *
	 */
	customEncodeUrlFunc?: Function;

	/**
	 * If true save expansion states in internal list and send it to the server. Applying to one of the main constraint of the REST architecture  Stateless Interactions - client specific data(like expansion states) should NOT be stored on the server
	 *
	 */
	persistExpansionStates?: boolean;

	/**
	 * Configure datasource filtering settings.
	 */
	filtering?: TreeHierarchicalDataSourceSettingsTreeDSFiltering;

	/**
	 * Configure datasource sorting settings.
	 */
	sorting?: TreeHierarchicalDataSourceSettingsTreeDSSorting;

	/**
	 * Configure datasource paging settings.
	 */
	paging?: TreeHierarchicalDataSourceSettingsTreeDSPaging;

	/**
	 * Option for TreeHierarchicalDataSourceSettingsTreeDS
	 */
	[optionName: string]: any;
}

interface TreeHierarchicalDataSourceSettings {
	/**
	 * Configure tree datasource specific settings
	 */
	treeDS?: TreeHierarchicalDataSourceSettingsTreeDS;

	/**
	 * Option for TreeHierarchicalDataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class TreeHierarchicalDataSource {
	constructor(settings: TreeHierarchicalDataSourceSettings);

	/**
	 * Data binds to the current data source
	 * databinding works using the following workflow:
	 * 1. fire the databinding event
	 * 2. based on the data source type (see analyzeDataSource()), do the following:
	 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
	 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
	 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
	 * if no paging/sorting/filtering are enabled, use just this._data to save space
	 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
	 * if the data source is invalid, throw an exception
	 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
	 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
	 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
	 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
	 * 6. fire the databound event
	 *
	 * @param callback callback function
	 * @param callee callee object on which the callback will be executed. If none is specified, will assume global execution context
	 */
	dataBind(callback?: string, callee?: Object): void;

	/**
	 * Gets the passed record's parent records
	 *
	 * @param dataRow the child record.
	 * @param ds the data source in which to search for the related parent records.
	 */
	getParentRowsForRow(dataRow: Object, ds?: Object): Object;

	/**
	 * Gets the current data bound depth of the tree grid hierarchy.
	 */
	getDataBoundDepth(): void;

	/**
	 * Gets/Sets whether the data source has been transformed from flat to hierarchical
	 *
	 * @param isTransformed Determines if the data source is marked as transformed or not.
	 */
	isTransformedToHierarchicalData(isTransformed?: boolean): void;

	/**
	 * Transforms flat data to hierararchical data and returns the result
	 *
	 * @param data The flat data that will be transformed to hierarchical
	 */
	transformToHierarchicalData(data: Object): Object;

	/**
	 * This processes the passed data for the specified level and applies the schema transformation to it.
	 *
	 * @param data The data to be processed and transformed
	 * @param level The level to which the data belongs to. If this is not set it defaults to 0.
	 * @param suppressTransformation Determines whether the data should go through schema transformation. If true schema transofrmatin will not be applied.
	 */
	processDataPerLevel(data: Object, level?: number, suppressTransformation?: boolean): Object;

	/**
	 * Returnschild data transformed to flat data
	 *
	 * @param record The data record whose data is transformed and returned as flat
	 * @param level The level. If not set defaults to 0.
	 */
	getFlatDataForRecord(record: Object, level?: number): Object;

	/**
	 * Generates flat data.
	 * Returns an object that contains the generated flat data, the flat visible data, records count and visible records count.
	 *
	 * @param data The data record whose data is transformed.
	 * @param level The level from which to start recursively generating the flat data. If not set defaults to 0.
	 */
	generateFlatData(data: Object, level?: number): Object;

	/**
	 * Generates a flat data view from the current (hierarchical)data
	 */
	generateFlatDataView(): void;

	/**
	 * Returns the current flat data view
	 */
	flatDataView(): Object;

	/**
	 * Returns flat visible data.
	 */
	getVisibleFlatData(): Object;

	/**
	 * Returns flat data(without taking into account visible/expansion state).
	 */
	getFlatData(): Object;

	/**
	 * Returns total records count(without taking into account visible/expansion state).
	 */
	getFlatDataCount(): number;

	/**
	 * Sets the expanded/collapsed state of a row by its index
	 *
	 * @param index The index of the row.
	 * @param expanded If true then the row will be expanded. Otherwise it will be collapsed.
	 * @param callbackArgs Specifies a custom function to be called when the state of the row is changed.
	 */
	setExpandedStateByRowIndex(index: number, expanded: boolean, callbackArgs: Function): void;

	/**
	 * Sets the expanded state of a row by its primary key
	 *
	 * @param rowId The id of the row.
	 * @param expanded If true the row will be expanded. Otherwise it will be collapsed.
	 * @param callbackArgs Specifies a custom function to be called when the state of the row is changed.
	 */
	setExpandedStateByPrimaryKey(rowId: string, expanded: boolean, callbackArgs: Function): void;

	/**
	 * Gets whether the row with the specified id is expanded.Returns true if the row is expanded or false if it's not.
	 *
	 * @param rowId //The id of the row.
	 */
	getExpandStateById(rowId: string): boolean;

	/**
	 * Toggles the row's state by the row's id.
	 *
	 * @param rowId The id of the row.
	 * @param callbackArgs Specifies a custom function to be called when the state of the row is changed.
	 */
	toggleRow(rowId: string, callbackArgs: Function): void;

	/**
	 * Sorts the data source locally. The result (sorted data) can be obtained by calling dataView().
	 * Remote filtering can be performed by just calling dataBind() and setting the settings.sorting.expressions
	 * multi-column sorting can be enabled by setting keepSortState to true.
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sort(fields: Object, direction: string): void;

	/**
	 * Sorts the given data recursively
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param data the data array that will be sorted.
	 * @param level the level to which the data belongs to
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sortDataRecursive(data: Object, level: number, fields: Object, direction: string): void;

	/**
	 * Sorts the passed data and returns the sorted result.
	 *
	 * @param data the data to be sorted
	 *
	 * fields => an array of fields object definitions:
	 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
	 *
	 * @param fields an array of fields object definitions
	 * @param direction asc / desc direction
	 */
	sortData(data: Object, fields: Object, direction: string): void;

	/**
	 * Returns the total number of records in the local data source
	 */
	totalLocalRecordsCount(): number;

	/**
	 * Returns the total number of pages
	 */
	pageCount(): number;

	/**
	 * Returns the total number of match filtering records in the data source.
	 * When the dataSource is remote and filtering is applied then it is taken value
	 * of property "filtering.countRecords" in metatadata - if set. If it is not set returns totalRecordsCount
	 */
	getFilteringMatchRecordsCount(): number;

	/**
	 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
	 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
	 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
	 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
	 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
	 * if expr is detected to be a regular expression, the "cond" part is skipped
	 *
	 * @param fieldExpressions a list of field expression definitions
	 * @param boolLogic boolean logic. Accepted values are AND and OR.
	 * @param keepFilterState if keepFilterState is set to true, it will not discard previous filtering expressions
	 * @param fieldExpressionsOnStrings
	 */
	filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;

	/**
	 * Gets the count of the filtered records in the dataView
	 */
	getFilteredRecordsCountFromDataView(): number;

	/**
	 * Gets the count of the filtered records
	 */
	getFilteredRecordsCount(): number;

	/**
	 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging.
	 */
	clearLocalFilter(): void;

	/**
	 * Gets whether the flat data view should be generated by calling the generateFlatDataView method.
	 */
	shouldCallGenerateFlatDataView(): void;

	/**
	 * Clears __matchFiltering property from the data record objects in the filtered data source. The __matchFiltering property determines whether a record matches the specified filtering condition.
	 *
	 * @param data the array of data objects to be cleared. If not set the current filtered data array is used.
	 */
	clearMatchFiltering(data?: Object): void;

	/**
	 * Gets the path of a record by the record or the record's key
	 *
	 * @param record
	 */
	getPathBy(record: Object): string;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings)
	 *
	 * @param key Primary key of the record
	 * @param ds the data source in which to search for the record. When not set it will use the current data source.
	 * @param objPath path to the object. Example: {path: '5/1'}
	 */
	findRecordByKey(key: Object, ds?: string, objPath?: Object): Object;

	/**
	 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
	 *
	 * @param key primary key of the record
	 * @param origDs
	 */
	removeRecordByKey(key: Object, origDs: Object): void;

	/**
	 * Deletes a row from the data source.
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	deleteRow(rowId: Object, autoCommit: boolean): Object;

	/**
	 * Gets the chilren records by the parent record's key in the passed data source
	 *
	 * @param key primary key of the record
	 * @param ds the data source
	 */
	getChildrenByKey(key: Object, ds: Object): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param rowIndex row index at which to be insert the new row
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 * @param parentRowId the value of the primary key of the parent row(if any)
	 */
	insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;

	/**
	 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
	 *
	 * @param fields a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
	 */
	fields(fields?: Object): Object;

	/**
	 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
	 */
	analyzeDataSource(): string;

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
	 */
	dataView(): any[];

	/**
	 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
	 */
	data(): Object;

	/**
	 * Returns transformed data according to transformed execution:
	 * 1. Before paging and filtering
	 * 2. After filtering before paging
	 * 3. After filtering and paging
	 *
	 * @param transformedExecution
	 */
	transformedData(transformedExecution: Object): Object;

	/**
	 * Returns summaries data
	 */
	dataSummaries(): Object;

	/**
	 * Gets/sets the schema definition.
	 *
	 * @param s a schema object
	 * @param t type of the data source. See settings.type
	 */
	schema(s?: Object, t?: string): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param p object holding all paging settings. See settings.paging
	 */
	pagingSettings(p?: Object): Object;

	/**
	 * Gets/sets a list of filtering settings
	 *
	 * @param f object holding all filtering settings. See settings.filtering
	 */
	filterSettings(f?: Object): void;

	/**
	 * Gets/sets a list of paging settings
	 *
	 * @param s object holding all sorting settings. See settings.sorting
	 */
	sortSettings(s?: Object): Object;

	/**
	 * Gets/sets a list of summaries settings.
	 *
	 * @param s object holding all summaries settings. See settings.summaries
	 */
	summariesSettings(s?: Object): void;

	/**
	 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
	 *
	 * @param ds
	 */
	dataSource(ds?: Object): Object;

	/**
	 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
	 *
	 * @param t
	 * @return json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
	 */
	type(t?: Object): string;

	/**
	 * Removes a record from the data source at specific index.
	 *
	 * @param index index of record
	 * @param origDs
	 */
	removeRecordByIndex(index: number, origDs: Object): void;

	/**
	 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
	 *
	 * @param rowId the rowId - row key (string) or index (number)
	 * @param colId the column id - column key (string) or index (number)
	 * @param val The new value
	 * @param autoCommit if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
	 */
	setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;

	/**
	 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param rowId the record key - primaryKey (string) or index (number)
	 * @param rowObject the new record data.
	 * @param autoCommit if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
	 */
	addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;

	/**
	 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	addNode(data: Object): void;

	/**
	 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
	 *
	 * @param data the transaction data
	 */
	removeNode(data: Object): void;

	/**
	 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
	 *
	 * @param t a transaction object
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Update the data source with every transaction from the log
	 *
	 * @param id Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
	 */
	commit(id?: number): void;

	/**
	 * Clears the transaction log without updating anything in the data source
	 *
	 * @param id Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
	 */
	rollback(id?: Object): void;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
	 */
	transactionsAsString(): string;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
	 *
	 * @param fieldName the fieldName - name of the field
	 * @param record the record from which to get it
	 */
	getCellValue(fieldName: string, record: Object): Object;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets or sets summaries data.
	 * If key or dsObj are not set then returns summaries data.
	 * Takes summary data from passed argument dsObj(using argument key)
	 *
	 * @param key response key to take summary data(for example "Metadata.Summaries")
	 * @param dsObj data source object - usually contains information about data records and metadata(holds info about summaries)
	 */
	summariesResponse(key?: string, dsObj?: Object): Object;

	/**
	 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
	 */
	filteredData(): any[];

	/**
	 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
	 */
	clearLocalSorting(): void;

	/**
	 * Filters the data source locally by text. If "fields" parameter is set search is performed only in the listed fields otherwise all fields are searched.
	 *
	 * @param expression a text to search for. Multiple search texts should be separated by space. When multiple search texts are provided all of them should be presented in the search fields (bool logic "and" is applied).
	 * @param fields an array of fields that will be searched.
	 */
	filterByText(expression: string, fields?: any[]): void;

	/**
	 * Applicable only when the data source is bound to remote data.
	 * Gets / sets the total number of records in the data source.
	 * If data binding is remote, and there's paging or filtering enabled,
	 * the actual total number of records may not
	 * match the number of records that exists on the client
	 *
	 * @param count the total number of records
	 * @param key
	 * @param dsObj
	 * @param context
	 */
	totalRecordsCount(count?: number, key?: Object, dsObj?: Object, context?: Object): number;

	/**
	 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
	 *
	 * @param hasCount specifies if the data source contains a property that denotes the total number of records in the server-side backend
	 */
	hasTotalRecordsCount(hasCount: boolean): void;

	/**
	 * Returns metadata object for the specified key
	 *
	 * @param key Primary key of the record
	 */
	metadata(key: string): Object;

	/**
	 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
	 *
	 * @param index the page index. If none is specified, returns the current page index.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
	 *
	 * @param value the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
	 */
	persistedPageIndex(value?: number): number;

	/**
	 * Sets the page index to be equal to the previous page index and rebinds the data source
	 */
	prevPage(): void;

	/**
	 * Sets the page index to be equal to the next page index and rebinds the data source
	 */
	nextPage(): void;

	/**
	 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
	 *
	 * @param s the page size.
	 */
	pageSize(s?: number): number;

	/**
	 * For internal use
	 *
	 * @param dirty
	 */
	pageSizeDirty(dirty: Object): void;

	/**
	 * Returns a list of records for the specified page. Implies that paging is enabled.
	 *
	 * @param p the page index for which records will be returned
	 */
	recordsForPage(p: number): void;

	/**
	 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
	 *
	 * @param tableDOM TABLE dom element to transform
	 */
	tableToObject(tableDOM: Element): Object;

	/**
	 * Parses the string and returns an evaluated JSON object
	 *
	 * @param s the JSON as string.
	 */
	stringToJSONObject(s: string): void;

	/**
	 * Parses a string and returns a XML Document
	 *
	 * @param s the XML represented as a string
	 */
	stringToXmlObject(s: string): void;

	/**
	 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
	 */
	groupByData(): any[];

	/**
	 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
	 */
	visibleGroupByData(): any[];

	/**
	 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
	 */
	groupByDataView(): any[];

	/**
	 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
	 *
	 * @param id data-id attribute of the respective group row in the DOM
	 * @param collapsed if true the record should be collapsed, otherwise expanded
	 */
	toggleGroupByRecord(id: string, collapsed: boolean): void;

	/**
	 * Check whether the specified gorupby record is collapsed
	 *
	 * @param gbRec id of the grouped record OR grouped record
	 */
	isGroupByRecordCollapsed(gbRec: Object): boolean;

	/**
	 * Check whether grouping is applied for the specified sorting expressions.
	 *
	 * @param exprs array of sorting expressions. If not set check expressions defined in sorting settings
	 */
	isGroupByApplied(exprs?: any[]): boolean;
}
}
interface IgniteUIStatic {
TreeHierarchicalDataSource: typeof Infragistics.TreeHierarchicalDataSource;
}

declare namespace Infragistics {
class DvCommonWidget {
	option(key: Object, value: Object): void;
}
}

interface SimpleTextMarkerTemplateSettings {
	padding?: number;
	getText?: any;
	backgroundColor?: string;
	borderColor?: string;
	borderThickness?: number;
	textColor?: string;
	font?: any;

	/**
	 * Option for SimpleTextMarkerTemplateSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class SimpleTextMarkerTemplate {
	constructor(requireThis: boolean);

	constructor(settings: SimpleTextMarkerTemplateSettings);
	getText(item: Object, textDelegate: Object): void;
	measure(measureInfo: Object): void;
	render(renderInfo: Object): void;
}
}
interface IgniteUIStatic {
SimpleTextMarkerTemplate: typeof Infragistics.SimpleTextMarkerTemplate;
}

interface ShapeDataSourceSettings {
	/**
	 * The unique identifier.
	 */
	id?: string;

	/**
	 * The Uri of the .shp portion of the Shapefile.
	 */
	shapefileSource?: string;

	/**
	 * The Uri of the .dbf portion of the Shapefile.
	 */
	databaseSource?: string;

	/**
	 * Callback function to call when data binding is complete.
	 */
	callback?: Function;

	/**
	 * Object on which to invoke the callback function.
	 */
	callee?: any;

	/**
	 * Callback function to call to allow shape records to be transformed.
	 * paramType="object" the shape record to be transformed.
	 */
	transformRecord?: Function;

	/**
	 * Callback function to call to allow points in the shape records to be transformed.
	 * paramType="object" the point to be transformed in place. The object will look like { x: value, y: value2 }
	 */
	transformPoint?: Function;

	/**
	 * Callback function to call to allow the bounds of the shape data source to be transformed.
	 * paramType="object" the bounds of the shape datasource to be transformed in place. The object will look like { top: value, left: value, width: value, height: value }
	 */
	transformBounds?: Function;

	/**
	 * Callback function to call when the import process has been completed
	 * paramType="object" the ShapeDataSource instance
	 */
	importCompleted?: Function;

	/**
	 * Option for ShapeDataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class ShapeDataSource {
	constructor(settings: ShapeDataSourceSettings);

	/**
	 * Loads to the current data source
	 */
	dataBind(): void;

	/**
	 * Returns true if data is loaded
	 */
	isBound(): boolean;
	dataView(): void;

	/**
	 * Returns the current converter instance
	 */
	converter(): Object;
}
}
interface IgniteUIStatic {
ShapeDataSource: typeof Infragistics.ShapeDataSource;
}

interface TriangulationDataSourceSettings {
	/**
	 * The unique identifier.
	 */
	id?: string;

	/**
	 * A Uri specifying the location of the Itf file.
	 */
	source?: string;

	/**
	 * The TriangulationSource which is typically created after importing the Itf from the Source Uri.
	 */
	triangulationSource?: string;

	/**
	 * Callback function to call when data binding is complete
	 */
	callback?: Function;

	/**
	 * Object on which to invoke the callback function
	 */
	callee?: any;

	/**
	 * Option for TriangulationDataSourceSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class TriangulationDataSource {
	constructor(settings: TriangulationDataSourceSettings);

	/**
	 * Loads to the current data source
	 */
	dataBind(): void;

	/**
	 * Returns true if data is loaded
	 */
	isBound(): boolean;
	dataView(): void;

	/**
	 * Returns the current converter instance
	 */
	converter(): Object;
}
}
interface IgniteUIStatic {
TriangulationDataSource: typeof Infragistics.TriangulationDataSource;
}

interface GridExcelExporterCallbacks {
	/**
	 * A function to call after the cell is exported.
	 * Function takes arguments sender and args.
	 * Use args.columnKey to get the igGrid column key of the cell.
	 * Use args.columnIndex to get the igGrid column index of the cell.
	 * Use args.cellValue to get the igGrid cell value.
	 * Use args.rowId to get key or index of row.
	 * Use args.xlRow to get reference to the worksheet row.
	 * Use args.grid to get reference to the igGrid widget.
	 *
	 */
	cellExported?: Function;

	/**
	 * Cancel="true" A function to call before the cell is exported.
	 * Function takes arguments sender and args.
	 * Use args.columnKey to get the igGrid column key of the cell.
	 * Use args.columnIndex to get the igGrid column index of the cell.
	 * Use args.cellValue to get or set the igGrid cell value.
	 * Use args.rowId to get key or index of row.
	 * Use args.xlRow to get reference to the worksheet row.
	 * Use args.grid to get reference to the igGrid widget.
	 * Return false in order to cancel exporting the cell.
	 *
	 */
	cellExporting?: Function;

	/**
	 * A function to call when exporting fails.
	 * Use error to obtain reference of the error object.
	 *
	 */
	error?: Function;

	/**
	 * A function to call before the Excel file is downloaded.
	 * Function takes arguments sender and args.
	 * Use args.grid to get reference to the igGrid widget.
	 * Use args.workbook to get reference to the Excel workbook.
	 * Use args.worksheet to get reference to the Excel worksheet.
	 * Return false in order to cancel downloading the file.
	 *
	 */
	exportEnding?: Function;

	/**
	 * Cancel="true" A function to call before exporting starts.
	 * Function takes arguments sender and args.
	 * Use args.grid to get reference to igGrid widget.
	 * Return false in order to cancel exporting.
	 *
	 */
	exportStarting?: Function;

	/**
	 * A function to call after a header cell is exported.
	 * Function takes arguments sender and args.
	 * Use args.headerText to get the igGrid column header text.
	 * Use args.columnKey to get the igGrid column key.
	 * Use args.columnIndex to get the igGrid column index.
	 *
	 */
	headerCellExported?: Function;

	/**
	 * A function to call before the header cell is exported.
	 * Function takes arguments sender and args.
	 * Use args.headerText to get or set the igGrid column header text.
	 * Use args.columnKey to get the igGrid column key.
	 * Use args.columnIndex to get the igGrid column index.
	 * Return false in order to cancel exporting the cell.
	 *
	 */
	headerCellExporting?: Function;

	/**
	 * Cancel="true" A function to call after the row is exported.
	 * Function takes arguments sender and args.
	 * Use args.rowId to get key or index of row.
	 * Use args.element to get row TR element.
	 * Use args.xlRow to get reference to the worksheet row.
	 * Use args.grid to get reference to the igGrid widget.
	 * Note: When exporting igHierarchicalGrid this callback is available only for the root grid rows.
	 *
	 */
	rowExported?: Function;

	/**
	 * A function to call before the row is exported.
	 * Function takes arguments sender and args.
	 * Use args.rowId to get key or index of row.
	 * Use args.element to get row TR element.
	 * Use args.xlRow to get reference to the worksheet row.
	 * Use args.grid to get reference to the igGrid widget.
	 * Return false in order to cancel exporting the row.
	 * Note: When exporting igHierarchicalGrid this callback is available only for the root grid rows.
	 *
	 */
	rowExporting?: Function;

	/**
	 * A function to call when saving the file succeeds.
	 * Use data to get the reference of saved object.
	 *
	 */
	success?: Function;

	/**
	 * A function to call after the summary is exported.
	 * Function takes arguments sender and args.
	 * Use args.headerText to get the igGrid column header text.
	 * Use args.columnKey to get the igGrid column key.
	 * Use args.columnIndex to get the igGrid column index.
	 * Use args.summary to get a reference to the summary object.
	 * Use args.xlRowIndex to get the Excel worksheet row index.
	 *
	 */
	summaryExported?: Function;

	/**
	 * A function to call before the summary is exported.
	 * Function takes arguments sender and args.
	 * Use args.headerText to get the igGrid column header text.
	 * Use args.columnKey to get the igGrid column key.
	 * Use args.columnIndex to get the igGrid column index.
	 * Use args.summary to get a reference to the summary object.
	 * Use args.xlRowIndex to get reference to worksheet row index.
	 * Return false in order to cancel exporting the summary.
	 *
	 */
	summaryExporting?: Function;

	/**
	 * Option for GridExcelExporterCallbacks
	 */
	[optionName: string]: any;
}

interface GridExcelExporterSettingsGridFeatureOptions {
	/**
	 * Indicates whether fixed columns will be applied in the exported table. This is set to none by default, but will change to applied if column fixing feature is defined in the igGrid.
	 *
	 *
	 * Valid values:
	 * "none" No column fixing will be applied in the excel document.
	 * "applied" Column fixing will be applied in the excel document.
	 */
	columnfixing?: string;

	/**
	 * Indicates whether filtering will be applied in the exported table. this is set to none by default, but will change to applied if filtering feature is defined in the igGrid.
	 *
	 *
	 * Valid values:
	 * "none" No filtering will be applied in the excel document.
	 * "applied" Filtering will be applied in the excel document.
	 * "filteredRowsOnly" Filtering will be exported in the excel document.
	 */
	filtering?: string;

	/**
	 * Indicates whether hidden columns will be removed from the exported table. This is set to none by default, but will change to applied if hiding feature is defined in the igGrid.
	 *
	 *
	 * Valid values:
	 * "none" All hidden columns will be exported to the excel document.
	 * "applied" Hidden columns will be exported as hidden in the excel document.
	 * "visibleColumnsOnly" Only visible columns will be exported.
	 */
	hiding?: string;

	/**
	 * Indicates whether the rows on the current page or entire data will exported.
	 *
	 *
	 * Valid values:
	 * "currentPage" Only current page will be exported to the excel document.
	 * "allRows" All pages will be exported to the excel document.
	 */
	paging?: string;

	/**
	 * Indicates whether sorting will be applied in the exported table. This is set_ to none by default, but will change to applied if sorting feature is defined in the igGrid.
	 *
	 *
	 * Valid values:
	 * "none" No sorting will be applied in the excel document.
	 * "applied" Sorting will be applied in the excel document.
	 */
	sorting?: string;

	/**
	 * Indicates whether summaries will be added in the exported table. This is set to none by default, but will change to applied if summaries feature is defined in the igGrid.
	 *
	 *
	 * Valid values:
	 * "none" No summaries will be exported to the excel document.
	 * "applied" Summaries will be exported to the excel document.
	 */
	summaries?: string;

	/**
	 * Option for GridExcelExporterSettingsGridFeatureOptions
	 */
	[optionName: string]: any;
}

interface GridExcelExporterSettings {
	/**
	 * An array of strings containing the keys for the columns that will not be exported.
	 *
	 */
	columnsToSkip?: any[];

	/**
	 * Indicates whether all sublevel data will be exported, or only data under expanded rows.
	 *
	 *
	 * Valid values:
	 * "allRows" All sublevel data will be exported.
	 * "expandedRows" Only data under expanded rows will be exported.
	 */
	dataExportMode?: string;

	/**
	 * Specifies the name of the excel file that will be generated.
	 *
	 */
	fileName?: string;

	/**
	 * List of export settings which can be used with Grid Excel exporter
	 */
	gridFeatureOptions?: GridExcelExporterSettingsGridFeatureOptions;

	/**
	 * Indicates whether excel table styles will be the same as grid styles. This is set to applied by default. Custom grid themes are not supported.
	 *
	 *
	 * Valid values:
	 * "none" The styles from the grid are not applied to the table region.
	 * "applied" The styles from the grid are applied to the table region.
	 */
	gridStyling?: string;

	/**
	 * List of strings containing the keys for the worksheet columns which will not be applied any filtering
	 *
	 */
	skipFilteringOn?: any[];

	/**
	 * Specifies the excel table style region. The following table styles are available:
	 * TableStyleMedium[1-28]
	 * TableStyleLight[1-21]
	 * TableStyleDark[1-11]
	 *
	 */
	tableStyle?: string;

	/**
	 * Specifies the worksheet name where the igGrid will be exported.
	 *
	 */
	worksheetName?: string;

	/**
	 * Option for GridExcelExporterSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class GridExcelExporter {
	constructor(callbacks: GridExcelExporterCallbacks);

	constructor(settings: GridExcelExporterSettings);

	/**
	 * Exports the provided igGrid to Excel document.
	 *
	 * @param grid jQuery element of the igGrid.
	 * @param userSettings Settings for exporting the grid.
	 * @param userCallbacks Callbacks for the events.
	 */
	exportGrid(grid: Object, userSettings: Object, userCallbacks: Object): void;
}
}
interface IgniteUIStatic {
GridExcelExporter: typeof Infragistics.GridExcelExporter;
}

interface OlapXmlaDataSourceOptionsRequestOptions {
	/**
	 * The value is applied to XmlHttpRequest.withCredentials if supported by the user agent.
	 *                 Setting this property to true will allow IE8/IE9 to make authenticated cross-origin requests to tusted domains through XmlHttpRequest instead of XDomainRequest
	 *                 and will prompt the user for credentials.
	 */
	withCredentials?: boolean;

	/**
	 * A callback to be invoked right before the request is send to the server. Extends beforeSend callback of jQuery.ajax's options object.
	 */
	beforeSend?: Function;

	/**
	 * Option for OlapXmlaDataSourceOptionsRequestOptions
	 */
	[optionName: string]: any;
}

interface OlapXmlaDataSourceOptionsMdxSettings {
	/**
	 * Optional="true" a value indicating whether a NON EMPTY clause is present on ROWS axis. Default value is true
	 */
	nonEmptyOnRows?: boolean;

	/**
	 * Optional="true" a value indicating whether a NON EMPTY clause is present on COLUMNS axis. Default value is true
	 */
	nonEmptyOnColumns?: boolean;

	/**
	 * Optional="true" a value indicating whether a members' set expressions on ROWS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
	 */
	addCalculatedMembersOnRows?: boolean;

	/**
	 * Optional="true" a value indicating whether a members' set expressions on COLUMNS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
	 */
	addCalculatedMembersOnColumns?: boolean;

	/**
	 * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on ROWS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
	 */
	dimensionPropertiesOnRows?: any[];

	/**
	 * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on COLUMNS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
	 */
	dimensionPropertiesOnColumns?: any[];

	/**
	 * Option for OlapXmlaDataSourceOptionsMdxSettings
	 */
	[optionName: string]: any;
}

interface OlapXmlaDataSourceOptions {
	/**
	 * Optional="false" The URL of the XMLA server.
	 */
	serverUrl?: string;

	/**
	 * The catalog name.
	 */
	catalog?: string;

	/**
	 * The name of the cube in the data source.
	 */
	cube?: string;

	/**
	 * The name of the measure group in the data source.
	 */
	measureGroup?: string;

	/**
	 * A list of measure names separated by comma (,). These will be the measures of the data source.
	 */
	measures?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
	 */
	filters?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
	 */
	rows?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
	 */
	columns?: string;

	/**
	 * An object containing information about how the request to the XMLA server should be processed.
	 */
	requestOptions?: OlapXmlaDataSourceOptionsRequestOptions;

	/**
	 * Enables/disables caching of the XMLA result object.
	 */
	enableResultCache?: boolean;

	/**
	 * Additional properties sent with every discover request.
	 *             The object is treated as a key/value store where each property name is used as the key and the property value as the value.
	 */
	discoverProperties?: any;

	/**
	 * Additional properties sent with every execute request.
	 *             The object is treated as a key/value store where each property name is used as the key and the property value as the value.
	 */
	executeProperties?: any;

	/**
	 * Optional="true" a javascript object containing information about how the request to the xmla server should be processed
	 */
	mdxSettings?: OlapXmlaDataSourceOptionsMdxSettings;

	/**
	 * Specifies if the data is to be served by a XMLA remote provider.
	 */
	isRemote?: boolean;

	/**
	 * Option for OlapXmlaDataSourceOptions
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class OlapXmlaDataSource {
	constructor(options: OlapXmlaDataSourceOptions);

	/**
	 * Initializes the data source and returns a promise that will be resolved once the data source is initialized.
	 *             The promise's result will be the metadata tree for the catalog/cube/measureGroup specified in the settings or null if the settings do not provide a valid cube initialization data.
	 *             The data source is not functional until it has been initialized and all other methods other than initialize() will throw an error if isInitialized() returns false.
	 */
	initialize(): Object;

	/**
	 * Retrieves the initialization state of the data source.
	 */
	isInitialized(): boolean;

	/**
	 * Indicates whether the data source is modified.
	 */
	isModified(): boolean;

	/**
	 * Indicates whether the update() method execution is in progress.
	 */
	isUpdating(): boolean;

	/**
	 * Retrieves the currently loaded catalogs in the data source.
	 */
	catalogs(): any[];

	/**
	 * Retrieves the current catalog in the data source.
	 */
	catalog(): Object;

	/**
	 * Sets the current catalog for the data source and updates the cubes() and catalog() properties.
	 *
	 * @param catalogName the name of the catalog.
	 */
	setCatalog(catalogName: string): Object;

	/**
	 * Retrieves the currently loaded cubes in the data source.
	 */
	cubes(): any[];

	/**
	 * Retrieves the current cube in the data source.
	 */
	cube(): Object;

	/**
	 * Sets the current cube for the data source and updates the cube(), measureGroup() and metadataTree() properties.
	 *
	 * @param cubeName the name of the cube.
	 */
	setCube(cubeName: string): Object;

	/**
	 * Retrieves the currently loaded measure groups in the data source.
	 */
	measureGroups(): any[];

	/**
	 * Retrieves the current measureGroup in the data source.
	 */
	measureGroup(): Object;

	/**
	 * Sets the current measure group for the data source and updates the measureGroup() and metadataTree() properties.
	 *             Even though the catalogs/cubes/measureGroups items are cascading(e.g. in order to load the cubes a catalog has to be set) in order to construct the metadata tree a measure group is not required as it just filters the resulting metadata.
	 *             Once setCube(cubeName) is called the metadata tree would be loaded and the measureGroup() property would be filled with the default '(All)' measure group which indicates that no measure group is selected.
	 *
	 * @param measureGroupName the name of the measure group.
	 */
	setMeasureGroup(measureGroupName: string): Object;

	/**
	 * Returns the fully loaded metadata tree.
	 */
	metadataTree(): Object;

	/**
	 * Adds a hierarchy to the rows of the pivot grid.
	 *
	 * @param rowItem An object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid rows.
	 */
	addRowItem(rowItem: Object): void;

	/**
	 * Removes a hierarchy or the measure list from the rows of the pivot grid.
	 *
	 * @param rowItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "rows".
	 */
	removeRowItem(rowItem: Object): void;

	/**
	 * Adds a hierarchy to the columns of the pivot grid.
	 *
	 * @param columnItem an object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid columns.
	 */
	addColumnItem(columnItem: Object): void;

	/**
	 * Removes a hierarchy or the measure list from the columns of the pivot grid.
	 *
	 * @param columnItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "columns".
	 */
	removeColumnItem(columnItem: Object): void;

	/**
	 * Adds a hierarchy to the filter axis of the pivot grid.
	 *
	 * @param filterItem an object of type $.ig.Hierarchy which is the hierarchy to add.
	 */
	addFilterItem(filterItem: Object): void;

	/**
	 * Removes a hierarchy from the filter axis of the pivot grid.
	 *
	 * @param filterItem an object of type $.ig.Hierarchy which is the hierarchy to remove.
	 */
	removeFilterItem(filterItem: Object): void;

	/**
	 * Adds a measure to the measures of the pivot grid.
	 *
	 * @param measureItem an object of type $.ig.Measure which is the measure to add.
	 */
	addMeasureItem(measureItem: Object): void;

	/**
	 * Removes a measure from the measures of the pivot grid.
	 *
	 * @param measureItem An object of type $.ig.Measure which is the measure to remove.
	 */
	removeMeasureItem(measureItem: Object): void;

	/**
	 * Sets the index at which the measure list will be positioned in the rows/columns it resides.
	 *
	 * @param index the index where measure list to appear.
	 */
	setMeasureListIndex(index: number): void;

	/**
	 * Sets the location of the measure list.
	 *
	 * @param location accepted values are 'rows' and 'columns'.
	 */
	setMeasureListLocation(location: Object): void;

	/**
	 * Sets a tuple member to be expanded next time the update() method is called.
	 *             Calling this method on an already expanded member does nothing.
	 *
	 * @param axisName the name of the axis for the tuple.
	 * @param tupleIndex the index of the tuple in the axis.
	 * @param memberIndex the index of the member in the tuple.
	 */
	expandTupleMember(axisName: string, tupleIndex: number, memberIndex: number): void;

	/**
	 * Sets a tuple member to be collapsed next time the update() method is called.
	 *             Calling this method on an already collapsed member does nothing.
	 *
	 * @param axisName the name of the axis for the tuple.
	 * @param tupleIndex the index of the tuple in the axis.
	 * @param memberIndex the index of the member in the tuple.
	 */
	collapseTupleMember(axisName: string, tupleIndex: number, memberIndex: number): void;

	/**
	 * Returns the items in the row axis.
	 */
	rowAxis(): any[];

	/**
	 * Returns the items in the column axis.
	 */
	columnAxis(): any[];

	/**
	 * Returns the items in the filter axis.
	 */
	filters(): any[];

	/**
	 * Returns the items in the measures axis.
	 */
	measures(): any[];

	/**
	 * Returns the result from the last update or null if the last update was unsuccessful.
	 */
	result(): Object;

	/**
	 * Clears all pending changes since last time the update() method is called.
	 */
	clearPendingChanges(): void;

	/**
	 * Performs an update with the list of pending changes and updates the data source result.
	 */
	update(): Object;

	/**
	 * Gets the first element of the specified elementType which matches the specified predicate or null if there is no such element found.
	 *
	 * @param predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
	 * @param elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
	 */
	getCoreElement(predicate: Function, elementType: Object): Object;

	/**
	 * Gets an array with elements of the specified elementType which match the specified predicate or empty array if there is no such element found.
	 *
	 * @param predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
	 * @param elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
	 */
	getCoreElements(predicate: Function, elementType: Object): Object;

	/**
	 * Returns $.ig.Dimension object for the specified unique name.
	 *
	 * @param dimensionUniqueName the unique name of the searched dimension object.
	 */
	getDimension(dimensionUniqueName: string): Object;

	/**
	 * Returns $.ig.Hierarchy object for the specified unique name.
	 *
	 * @param hierarchyUniqueName the unique name of the searched hierarchy object.
	 */
	getHierarchy(hierarchyUniqueName: string): Object;

	/**
	 * Returns $.ig.Level object for the specified unique name.
	 *
	 * @param levelUniqueName the unique name of the searched level object.
	 */
	getLevel(levelUniqueName: string): Object;

	/**
	 * Returns $.ig.Measure object for the specified unique name.
	 *
	 * @param measureUniqueName the unique name of the searched measure object.
	 */
	getMeasure(measureUniqueName: string): Object;

	/**
	 * Returns $.ig.MeasureList object available when operates with more than one $.ig.Measure object.
	 */
	getMeasureList(): Object;

	/**
	 * Returns an array of strings with the unique names of selected for given hierarchy filter members.
	 *
	 * @param hierarchyUniqueName the unique name of the hierarchy whose active filter members are returned.
	 */
	getFilterMemberNames(hierarchyUniqueName: string): any[];

	/**
	 * Adds a member to list of filter members that will be present in result.
	 *             If a member of given hierarchy is added to this filter list then only those members which are present in this filter list will be present for that hierarchy in the result.
	 *
	 * @param hierarchyUniqueName the unique name of the hierarchy this member belongs to.
	 * @param memberUniqueName the unique name of the member to be added.
	 */
	addFilterMember(hierarchyUniqueName: string, memberUniqueName: string): void;

	/**
	 * Removes a member from the list of filter members that will be present in result.
	 *
	 * @param hierarchyUniqueName the unique name of the hierarchy this member belongs to.
	 * @param memberUniqueName the unique name of the member to be removed.
	 */
	removeFilterMember(hierarchyUniqueName: string, memberUniqueName: string): void;

	/**
	 * Removes all members from the list of filter members and the filter for the specified hierarchy is cleared.
	 *
	 * @param hierarchyUniqueName the unique name of the hierarchy which filter members to be cleared.
	 */
	removeAllFilterMembers(hierarchyUniqueName: string): void;

	/**
	 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given level filter member.
	 *
	 * @param levelUniqueName the unique name of the member whose active filter members are returned.
	 */
	getMembersOfLevel(levelUniqueName: string): void;

	/**
	 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given hierarchy filter member.
	 *
	 * @param hierarchyUniqueName the unique name of the member whose active filter members are returned.
	 */
	getMembersOfHierarchy(hierarchyUniqueName: string): void;

	/**
	 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects that are children of the current member.
	 *
	 * @param memberUniqueName the unique name of the member whose active filter members are returned.
	 */
	getMembersOfMember(memberUniqueName: string): void;
}
}
interface IgniteUIStatic {
OlapXmlaDataSource: typeof Infragistics.OlapXmlaDataSource;
}

interface OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure {
	/**
	 * Optional="false" A unique name for the measure.
	 */
	name?: string;

	/**
	 * A caption for the measure.
	 */
	caption?: string;

	/**
	 * Optional="false" An aggregator function called when each cell is evaluated.
	 *                                 Returns a value for the cell. If the returned value is null, no cell will be created in for the data source result.
	 */
	aggregator?: Function;

	/**
	 * The path used when displaying the measure in the user interface. Nested folders are indicated by a backslash (\).
	 */
	displayFolder?: string;

	/**
	 * Option for OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure
	 */
	[optionName: string]: any;
}

interface OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension {
	/**
	 * A unique name for the measures dimension.
	 *                             The default value is "Measures". This name is used to create the names of dimensions using the following pattern:
	 *                             [<measuresDimensionMetadata.name>].[<measureMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the measures dimension.
	 *                             The default value is "Measures".
	 */
	caption?: string;

	/**
	 * An array of measure metadata objects.
	 */
	measures?: OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure[];

	/**
	 * Option for OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension
	 */
	[optionName: string]: any;
}

interface OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel {
	/**
	 * Optional="false" A name for the level.
	 *                                     The unique name of the level is formed using the following pattern:
	 *                                     {<hierarchy.uniqueName>}.[<levelMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the level.
	 */
	caption?: string;

	/**
	 * A function called for each item of the data source array when level members are created.
	 *                                     Based on the item parameter the function should return a value that will form the $.ig.Member’s name and caption.
	 */
	memberProvider?: Function;

	/**
	 * Option for OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel
	 */
	[optionName: string]: any;
}

interface OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie {
	/**
	 * Optional="false" A name for the hierarchy.
	 *                                 The unique name of the hierarchy is formed using the following pattern:
	 *                                 [<parentDimension.name>].[<hierarchyMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the hierarchy.
	 */
	caption?: string;

	/**
	 * The path to be used when displaying the hierarchy in the user interface.
	 *                                 Nested folders are indicated by a backslash (\).
	 *                                 The folder hierarchy will appear under parent dimension node.
	 */
	displayFolder?: string;

	/**
	 * An array of level metadata objects.
	 */
	levels?: OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel[];

	/**
	 * Option for OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie
	 */
	[optionName: string]: any;
}

interface OlapFlatDataSourceOptionsMetadataCubeDimension {
	/**
	 * Optional="false" A unique name for the dimension.
	 */
	name?: string;

	/**
	 * A caption for the dimension.
	 */
	caption?: string;

	/**
	 * An array of hierarchy metadata objects.
	 */
	hierarchies?: OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie[];

	/**
	 * Option for OlapFlatDataSourceOptionsMetadataCubeDimension
	 */
	[optionName: string]: any;
}

interface OlapFlatDataSourceOptionsMetadataCube {
	/**
	 * Optional="false" A unique name for the cube.
	 */
	name?: string;

	/**
	 * A caption for the cube.
	 */
	caption?: string;

	/**
	 * An object providing information about the measures' root node.
	 */
	measuresDimension?: OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension;

	/**
	 * An array of dimension metadata objects.
	 */
	dimensions?: OlapFlatDataSourceOptionsMetadataCubeDimension[];

	/**
	 * Option for OlapFlatDataSourceOptionsMetadataCube
	 */
	[optionName: string]: any;
}

interface OlapFlatDataSourceOptionsMetadata {
	/**
	 * Optional="false" Metadata used for the creation of the cube.
	 */
	cube?: OlapFlatDataSourceOptionsMetadataCube;

	/**
	 * Option for OlapFlatDataSourceOptionsMetadata
	 */
	[optionName: string]: any;
}

interface OlapFlatDataSourceOptions {
	/**
	 * Optional="true" Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
	 */
	dataSource?: any;

	/**
	 * Optional="true" Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.
	 */
	dataSourceUrl?: string;

	/**
	 * Optional="true" Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * Optional="true" Specifies the name of the property in which data records are held if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Optional="true" Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	responseDataType?: string;

	/**
	 * A list of measure names separated by comma (,). These will be the measures of the data source.
	 */
	measures?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
	 */
	filters?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
	 */
	rows?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
	 */
	columns?: string;

	/**
	 * Optional="false" An object containing processing instructions for the $.ig.DataSource data.
	 */
	metadata?: OlapFlatDataSourceOptionsMetadata;

	/**
	 * Option for OlapFlatDataSourceOptions
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class OlapFlatDataSource {
	constructor(options: OlapFlatDataSourceOptions);

	/**
	 * Initializes the data source and returns a promise that will be resolved once the data source is initialized.
	 *             The promise's result will be the metadata tree for the catalog/cube/measureGroup specified in the settings or null if the settings do not provide a valid cube initialization data.
	 *             The data source is not functional until it has been initialized and all other methods other than initialize() will throw an error if isInitialized() returns false.
	 */
	initialize(): Object;

	/**
	 * Retrieves the initialization state of the data source.
	 */
	isInitialized(): boolean;

	/**
	 * Indicates whether the data source is modified.
	 */
	isModified(): boolean;

	/**
	 * Indicates whether the update() method execution is in progress.
	 */
	isUpdating(): boolean;

	/**
	 * Retrieves the currently loaded cubes in the data source.
	 */
	cubes(): any[];

	/**
	 * Retrieves the current cube in the data source.
	 */
	cube(): Object;

	/**
	 * Sets the current cube for the data source and updates the cube(), measureGroup() and metadataTree() properties.
	 *
	 * @param cubeName the name of the cube.
	 */
	setCube(cubeName: string): Object;

	/**
	 * Returns the fully loaded metadata tree.
	 */
	metadataTree(): Object;

	/**
	 * Adds a hierarchy to the rows of the pivot grid.
	 *
	 * @param rowItem An object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid rows.
	 */
	addRowItem(rowItem: Object): void;

	/**
	 * Removes a hierarchy or the measure list from the rows of the pivot grid.
	 *
	 * @param rowItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "rows".
	 */
	removeRowItem(rowItem: Object): void;

	/**
	 * Adds a hierarchy to the columns of the pivot grid.
	 *
	 * @param columnItem an object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid columns.
	 */
	addColumnItem(columnItem: Object): void;

	/**
	 * Removes a hierarchy or the measure list from the columns of the pivot grid.
	 *
	 * @param columnItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "columns".
	 */
	removeColumnItem(columnItem: Object): void;

	/**
	 * Adds a hierarchy to the filter axis of the pivot grid.
	 *
	 * @param filterItem an object of type $.ig.Hierarchy which is the hierarchy to add.
	 */
	addFilterItem(filterItem: Object): void;

	/**
	 * Removes a hierarchy from the filter axis of the pivot grid.
	 *
	 * @param filterItem an object of type $.ig.Hierarchy which is the hierarchy to remove.
	 */
	removeFilterItem(filterItem: Object): void;

	/**
	 * Adds a measure to the measures of the pivot grid.
	 *
	 * @param measureItem an object of type $.ig.Measure which is the measure to add.
	 */
	addMeasureItem(measureItem: Object): void;

	/**
	 * Removes a measure from the measures of the pivot grid.
	 *
	 * @param measureItem An object of type $.ig.Measure which is the measure to remove.
	 */
	removeMeasureItem(measureItem: Object): void;

	/**
	 * Sets the index at which the measure list will be positioned in the rows/columns it resides.
	 *
	 * @param index the index where measure list to appear.
	 */
	setMeasureListIndex(index: number): void;

	/**
	 * Sets the location of the measure list.
	 *
	 * @param location accepted values are 'rows' and 'columns'.
	 */
	setMeasureListLocation(location: Object): void;

	/**
	 * Sets a tuple member to be expanded next time the update() method is called.
	 *             Calling this method on an already expanded member does nothing.
	 *
	 * @param axisName the name of the axis for the tuple.
	 * @param tupleIndex the index of the tuple in the axis.
	 * @param memberIndex the index of the member in the tuple.
	 */
	expandTupleMember(axisName: string, tupleIndex: number, memberIndex: number): void;

	/**
	 * Sets a tuple member to be collapsed next time the update() method is called.
	 *             Calling this method on an already collapsed member does nothing.
	 *
	 * @param axisName the name of the axis for the tuple.
	 * @param tupleIndex the index of the tuple in the axis.
	 * @param memberIndex the index of the member in the tuple.
	 */
	collapseTupleMember(axisName: string, tupleIndex: number, memberIndex: number): void;

	/**
	 * Returns the items in the row axis.
	 */
	rowAxis(): any[];

	/**
	 * Returns the items in the column axis.
	 */
	columnAxis(): any[];

	/**
	 * Returns the items in the filter axis.
	 */
	filters(): any[];

	/**
	 * Returns the items in the measures axis.
	 */
	measures(): any[];

	/**
	 * Returns the result from the last update or null if the last update was unsuccessful.
	 */
	result(): Object;

	/**
	 * Clears all pending changes since last time the update() method is called.
	 */
	clearPendingChanges(): void;

	/**
	 * Performs an update with the list of pending changes and updates the data source result.
	 */
	update(): Object;

	/**
	 * Gets the first element of the specified elementType which matches the specified predicate or null if there is no such element found.
	 *
	 * @param predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
	 * @param elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
	 */
	getCoreElement(predicate: Function, elementType: Object): Object;

	/**
	 * Gets an array with elements of the specified elementType which match the specified predicate or empty array if there is no such element found.
	 *
	 * @param predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
	 * @param elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
	 */
	getCoreElements(predicate: Function, elementType: Object): Object;

	/**
	 * Returns $.ig.Dimension object for the specified unique name.
	 *
	 * @param dimensionUniqueName the unique name of the searched dimension object.
	 */
	getDimension(dimensionUniqueName: string): Object;

	/**
	 * Returns $.ig.Hierarchy object for the specified unique name.
	 *
	 * @param hierarchyUniqueName the unique name of the searched hierarchy object.
	 */
	getHierarchy(hierarchyUniqueName: string): Object;

	/**
	 * Returns $.ig.Level object for the specified unique name.
	 *
	 * @param levelUniqueName the unique name of the searched level object.
	 */
	getLevel(levelUniqueName: string): Object;

	/**
	 * Returns $.ig.Measure object for the specified unique name.
	 *
	 * @param measureUniqueName the unique name of the searched measure object.
	 */
	getMeasure(measureUniqueName: string): Object;

	/**
	 * Returns $.ig.MeasureList object available when operates with more than one $.ig.Measure object.
	 */
	getMeasureList(): Object;

	/**
	 * Returns an array of strings with the unique names of selected for given hierarchy filter members.
	 *
	 * @param hierarchyUniqueName the unique name of the hierarchy whose active filter members are returned.
	 */
	getFilterMemberNames(hierarchyUniqueName: string): any[];

	/**
	 * Adds a member to list of filter members that will be present in result.
	 *             If a member of given hierarchy is added to this filter list then only those members which are present in this filter list will be present for that hierarchy in the result.
	 *
	 * @param hierarchyUniqueName the unique name of the hierarchy this member belongs to.
	 * @param memberUniqueName the unique name of the member to be added.
	 */
	addFilterMember(hierarchyUniqueName: string, memberUniqueName: string): void;

	/**
	 * Removes a member from the list of filter members that will be present in result.
	 *
	 * @param hierarchyUniqueName the unique name of the hierarchy this member belongs to.
	 * @param memberUniqueName the unique name of the member to be removed.
	 */
	removeFilterMember(hierarchyUniqueName: string, memberUniqueName: string): void;

	/**
	 * Removes all members from the list of filter members and the filter for the specified hierarchy is cleared.
	 *
	 * @param hierarchyUniqueName the unique name of the hierarchy which filter members to be cleared.
	 */
	removeAllFilterMembers(hierarchyUniqueName: string): void;

	/**
	 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given level filter member.
	 *
	 * @param levelUniqueName the unique name of the level whose active filter members are returned.
	 */
	getMembersOfLevel(levelUniqueName: string): void;

	/**
	 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given hierarchy filter member.
	 *
	 * @param hierarchyUniqueName the unique name of the hierarchy whose active filter members are returned.
	 */
	getMembersOfHierarchy(hierarchyUniqueName: string): void;

	/**
	 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects that are children of the current member.
	 *
	 * @param memberUniqueName the unique name of the member whose active filter members are returned.
	 */
	getMembersOfMember(memberUniqueName: string): void;
}
}
interface IgniteUIStatic {
OlapFlatDataSource: typeof Infragistics.OlapFlatDataSource;
}

declare namespace Infragistics {
class OlapMetadataTreeItem {
	/**
	 * Returns the OLAP metadata item that this tree item represents which is an object of type $.ig.Cube, $.ig.Dimension, $.ig.Hierarchy, $.ig.Measure, $.ig.Level.
	 */
	item(): Object;

	/**
	 * Returns the metadata tree item type which is a value from the $.ig.MetadataTreeItemType enumeration.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.cube = 0;
	 *             Item type for the cube tree items. Contain an item() of type $.ig.Cube.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.dimension = 1;
	 *             Item type for the dimension tree items. Contain an item() of type $.ig.Dimension.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.group = 2;
	 *             Item type for the group tree items. Does not have item().
	 *
	 *             $.ig.MetadataTreeItemType.prototype.userDefinedHierarchy = 3;
	 *             Item type for the userDefinedHierarchy tree items. Contain an item() of type $.ig.Hierarchy.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.systemEnabledHierarchy = 4;
	 *             Item type for the systemEnabledHierarchy tree items. Contain an item() of type $.ig.Hierarchy.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.parentChildHierarchy = 5;
	 *             Item type for the parentChildHierarchy tree items. Contain an item() of type $.ig.Hierarchy.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.measure = 6;
	 *             Item type for the measure tree items. Contain an item() of type $.ig.Measure.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.level1 = 7;
	 *             Item type for the level1 tree items. Contain an item() of type $.ig.Level.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.level2 = 8;
	 *             Item type for the level2 tree items. Contain an item() of type $.ig.Level.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.level3 = 9;
	 *             Item type for the level3 tree items. Contain an item() of type $.ig.Level.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.level4 = 10;
	 *             Item type for the level4 tree items. Contain an item() of type $.ig.Level.
	 *
	 *             $.ig.MetadataTreeItemType.prototype.level5 = 11;
	 *             Item type for the level5 tree items. Contain an item() of type $.ig.Level.
	 */
	type(): number;

	/**
	 * Returns the caption text that should be displayed for this tree item.
	 */
	caption(): string;

	/**
	 * Returns the children ot this tree item.
	 */
	children(): Object;
}
}

interface OlapResultViewOptions {
	/**
	 * Optional="false" an object of type $.ig.OlapResult which represents the full cached result.
	 */
	result?: any;

	/**
	 * Optional="false" an object of type $.ig.OlapResult which represents the visible part of the result.
	 */
	visibleResult?: any;

	/**
	 * Optional="false" a value indicating whether the result has one or more hierarchies in the columns.
	 */
	hasColumns?: boolean;

	/**
	 * Optional="false" a value indicating whether the result has one or more hierarchies in the rows.
	 */
	hasRows?: boolean;

	/**
	 * Option for OlapResultViewOptions
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class OlapResultView {
	constructor(options: OlapResultViewOptions);

	/**
	 * Creates a new $.ig.OlapResultView object with result object having the same structure as the original one and new visibleResult where the tuples which appear as children under specified tuple and member index are no longer present.
	 *
	 * @param axisName
	 * @param tupleIndex
	 * @param memberIndex
	 */
	collapseTupleMember(axisName: Object, tupleIndex: Object, memberIndex: Object): Object;

	/**
	 * Creates a $.ig.OlapResultView view object with result object having the same structure as the original one and new visibleResult where the tuples which appear as children under specified tuple and member index are accessible as part of the visibleResult.
	 *
	 * @param axisName
	 * @param tupleIndex
	 * @param memberIndex
	 */
	expandTupleMember(axisName: Object, tupleIndex: Object, memberIndex: Object): Object;

	/**
	 * Creates a new $.ig.OlapResultView object as the axis specified by axisName of the original result object is extended with the tuples of the same axis found into supplied partialResult object.
	 *
	 * @param partialResult
	 * @param axisName
	 */
	extend(partialResult: Object, axisName: Object): Object;
}
}
interface IgniteUIStatic {
OlapResultView: typeof Infragistics.OlapResultView;
}

interface OlapTableViewOptionsViewSettings {
	/**
	 * Optional="false" a value indicating whether parent for columns is in front of its children.
	 *                 If set to true the query set sorts members in a level in their natural order. Their natural order is the default ordering of the members along the hierarchy when no other sort conditions are specified.
	 *                 Child members immediately follow their parent members.
	 *                 If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 */
	isParentInFrontForColumns?: boolean;

	/**
	 * Optional="false" a value indicating whether parent for rows is in front of its children.
	 *                 If set to true the query set sorts members in a level in their natural order. Their natural order is the default ordering of the members along the hierarchy when no other sort conditions are specified.
	 *                 Child members immediately follow their parent members.
	 *                 If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 */
	isParentInFrontForRows?: boolean;

	/**
	 * Optional="false" value indicating wheter the column headers should be arranged for compact header layout - each hieararchy is in a single row.
	 */
	compactColumnHeaders?: boolean;

	/**
	 * Optional="false" value indicating wheter the row headers should be arranged for compact header layout - each hieararchy is in a single row.
	 */
	compactRowHeaders?: boolean;

	/**
	 * Option for OlapTableViewOptionsViewSettings
	 */
	[optionName: string]: any;
}

interface OlapTableViewOptions {
	/**
	 * Optional="false" an object of type $.ig.OlapResult.
	 */
	result?: any;

	/**
	 * Optional="false" a value indicating whether the result has one or more hierarchies in the columns.
	 */
	hasColumns?: boolean;

	/**
	 * Optional="false" a value indicating whether the result has one or more hierarchies in the rows.
	 */
	hasRows?: boolean;

	/**
	 * Optional="false" an object containing the table view configuration options as properties.
	 */
	viewSettings?: OlapTableViewOptionsViewSettings;

	/**
	 * Option for OlapTableViewOptions
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class OlapTableView {
	constructor(options: OlapTableViewOptions);

	/**
	 * Initializes the table view object as its rowHeaders, columnHeaders and resultCells are created for the result object the table view is related to.
	 *             Applies the items from the columnSortDirections and levelDortDirections to produce the sorted result.
	 */
	initialize(): void;

	/**
	 * Returns the configuration object this table view is created with.
	 */
	viewSettings(): Object;

	/**
	 * Gets or sets the column sort direction items, which will be applied when the $.ig.OlapTableView is initialized.
	 *             - tupleIndex (number): specifies the index of the tuple, which corresponds to a column in the column axis.
	 *             - sortDirection (string: ascending|descending): indicates the sort direction for the column. The allowed values are 'ascending' (default) and 'descending'.
	 *             - comparer (function): an optional function, which will be used to compare the cells from the column. The function should return a number:
	 *             1. If Cell1 <  Cell2, return a value lower than 0.
	 *             2. If Cell1 == Cell2, return 0.
	 *             3. If Cell1 > Cell2, return a value greater than 0.
	 *
	 * @param columnSortDirections an array of objects, which have the following properties:
	 */
	columnSortDirections(columnSortDirections?: any[]): any[];

	/**
	 * Returns the column sort direction items, which were applied during the $.ig.OlapTableView initialization.
	 */
	appliedColumnSortDirections(): any[];

	/**
	 * Gets or sets the level sort direction items, which will be applied when the $.ig.OlapTableView is
	 *             - levelUniqueName (string): the name of the level to be sorted.
	 *             - sortDirection (string: ascending|descending): indicates the sort direction for the level. The allowed values are 'ascending' (default) and 'descending'.
	 *             - sortBehavior (string:alphabetical|system): indicates the type of sorting to be applied. The allowed values are 'alphabetical' (default) and 'system'.
	 *
	 * @param levelSortDirections an array of objects, which have the following properties:
	 */
	levelSortDirections(levelSortDirections?: any[]): any[];

	/**
	 * Returns the level sort direction items, which were applied during the $.ig.OlapTableView initialization.
	 */
	appliedLevelSortDirections(): any[];

	/**
	 * Returns a javascript object, which maps the applied level sort directions to the axis name, hierarchy index in the axis and the level depth.
	 *             It is used internally to determine, which $.ig.OlapTableViewHeaderCell needs to display a sorting indicator in the user interface.
	 */
	appliedSortDirectionsMap(): Object;

	/**
	 * Returns the table row headers.
	 */
	rowHeaders(): any[];

	/**
	 * Returns the table column headers.
	 */
	columnHeaders(): any[];

	/**
	 * Returns the table result cells ordered as if the grid is iterated row by row.
	 */
	resultCells(): any[];

	/**
	 * Returns the sorted $.ig.OlapResult object.
	 */
	result(): Object;
}
}
interface IgniteUIStatic {
OlapTableView: typeof Infragistics.OlapTableView;
}

declare namespace Infragistics {
class OlapTableViewHeaderCell {
	/**
	 * Returns the caption for the header cell.
	 */
	caption(): string;

	/**
	 * Returns the expaned state for the header cell.
	 */
	isExpanded(): boolean;

	/**
	 * Indicates whether the header cell can be expanded.
	 */
	isExpanable(): boolean;

	/**
	 * Returns the row index for the header cell.
	 */
	rowIndex(): number;

	/**
	 * Returns the row span for the header cell.
	 */
	rowSpan(): number;

	/**
	 * Returns the column index for the header cell.
	 */
	columnIndex(): number;

	/**
	 * Returns the column span for the header cell.
	 */
	columnSpan(): number;

	/**
	 * Returns the name of the axis this header cell is related to.
	 */
	axisName(): string;

	/**
	 * Returns the index of tuple in the axis this header cell is related to.
	 */
	tupleIndex(): number;

	/**
	 * Returns the index of the axis member in the tuple this header cell is related to.
	 */
	memberIndex(): number;
}
}

declare namespace Infragistics {
class OlapTableViewResultCell {
	/**
	 * Returns the value provided by $.ig.Cell object.
	 */
	value(): Object;

	/**
	 * Returns the formmated value to be displayed by the data cell.
	 */
	formattedValue(): string;

	/**
	 * Returns the ordinal of this cell used to determine its position into the data cells' grid.
	 */
	cellOrdinal(): number;

	/**
	 * Returns the index of $.ig.Cell object in $.ig.OlapResult object.
	 */
	resultCellIndex(): number;
}
}

declare namespace Infragistics {
class Catalog {
	/**
	 * Returns the name of the catalog.
	 *
	 * @param value
	 */
	name(value: Object): string;

	/**
	 * Returns the unique name of the catalog.
	 *
	 * @param value
	 */
	uniqueName(value: Object): string;

	/**
	 * Returns the caption of the catalog used when displaying the name of the catalog to the user.
	 *
	 * @param value
	 */
	caption(value: Object): string;

	/**
	 * Returns the description of the catalog which is a human-readable description of the catalog
	 *
	 * @param value
	 */
	description(value: Object): string;
}
}

declare namespace Infragistics {
class Cube {
	/**
	 * Returns the name of the cube.
	 *
	 * @param value
	 */
	name(value: Object): string;

	/**
	 * Returns the unique name of the cube.
	 *
	 * @param value
	 */
	uniqueName(value: Object): string;

	/**
	 * Returns the caption of the cube used when displaying the name of the cube to the user.
	 *
	 * @param value
	 */
	caption(value: Object): string;

	/**
	 * Returns a user-friendly description of the cube.
	 *
	 * @param value
	 */
	description(value: Object): string;

	/**
	 * Returns the type of the cube which is a value from the $.ig.CubeType enumeration.
	 *
	 *             $.ig.CubeType.prototype.cube = 0;
	 *             $.ig.CubeType.prototype.dimension = 1;
	 *             $.ig.CubeType.prototype.unknown = 2;
	 *
	 * @param value
	 */
	cubeType(value: Object): number;

	/**
	 * Returns the date and time on which the cube was last processed.
	 *
	 * @param value
	 */
	lastProcessed(value: Object): Object;

	/**
	 * Returns the date and time on which the cube was last updated.
	 *
	 * @param value
	 */
	lastUpdated(value: Object): Object;
}
}

declare namespace Infragistics {
class Dimension {
	/**
	 * Returns the name of the dimension.
	 *
	 * @param value
	 */
	name(value: Object): string;

	/**
	 * Returns the unique name of the dimension.
	 *
	 * @param value
	 */
	uniqueName(value: Object): string;

	/**
	 * Returns the caption of the dimension used when displaying the name of the dimension to the user.
	 *
	 * @param value
	 */
	caption(value: Object): string;

	/**
	 * Returns a user-friendly description of the dimension.
	 *
	 * @param value
	 */
	description(value: Object): string;

	/**
	 * Returns the type of the dimension which is a value from the $.ig.DimensionType enumeration.
	 *
	 *             $.ig.DimensionType.prototype.unknown = 0;
	 *             $.ig.DimensionType.prototype.time = 1;
	 *             $.ig.DimensionType.prototype.measure = 2;
	 *             $.ig.DimensionType.prototype.other = 3;
	 *             $.ig.DimensionType.prototype.quantitative = 5;
	 *             $.ig.DimensionType.prototype.accounts = 6;
	 *             $.ig.DimensionType.prototype.customers = 7;
	 *             $.ig.DimensionType.prototype.products = 8;
	 *             $.ig.DimensionType.prototype.scenario = 9;
	 *             $.ig.DimensionType.prototype.utility = 10;
	 *             $.ig.DimensionType.prototype.currency = 11;
	 *             $.ig.DimensionType.prototype.rates = 12;
	 *             $.ig.DimensionType.prototype.channel = 13;
	 *             $.ig.DimensionType.prototype.promotion = 14;
	 *             $.ig.DimensionType.prototype.organization = 15;
	 *             $.ig.DimensionType.prototype.billOfMaterials = 16;
	 *             $.ig.DimensionType.prototype.geography = 17;
	 *
	 * @param value
	 */
	dimensionType(value: Object): number;
}
}

declare namespace Infragistics {
class Hierarchy {
	/**
	 * Returns the name of the hierarchy.
	 *
	 * @param value
	 */
	name(value: Object): string;

	/**
	 * Returns the unique name of the hierarchy.
	 *
	 * @param value
	 */
	uniqueName(value: Object): string;

	/**
	 * Returns the caption of the hierarchy used when displaying the name of the hierarchy to the user.
	 *
	 * @param value
	 */
	caption(value: Object): string;

	/**
	 * Returns a user-friendly description of the hierarchy.
	 *
	 * @param value
	 */
	description(value: Object): string;

	/**
	 * Returns the unique name of the default member for the hierarchy.
	 *
	 * @param value
	 */
	defaultMember(value: Object): string;

	/**
	 * Returns the unique name of the 'All' member for the hierarchy.
	 *
	 * @param value
	 */
	allMember(value: Object): string;

	/**
	 * Returns the unique name of the dimension that contains the hierarchy.
	 *
	 * @param value
	 */
	dimensionUniqueName(value: Object): string;

	/**
	 * Returns the source of the hierarchy which is a value from the $.ig.HierarchyOrigin enumeration.
	 *
	 *             $.ig.HierarchyOrigin.prototype.userDefined = 1;
	 *             Identifies user defined hierarchies.
	 *
	 *             $.ig.HierarchyOrigin.prototype.systemEnabled = 2;
	 *             Identifies attribute hierarchies.
	 *
	 *             $.ig.HierarchyOrigin.prototype.systemInternal = 4;
	 *             Identifies attributes with no attribute .
	 *
	 * @param value
	 */
	hierarchyOrigin(value: Object): number;

	/**
	 * Returns the hierarchy display folder path to be used when displaying the hierarchy in the user interface.
	 *             Folder names will be separated by a semicolon (;). Nested folders are indicated by a backslash (\).
	 *
	 * @param value
	 */
	hierarchyDisplayFolder(value: Object): string;
}
}

declare namespace Infragistics {
class Measure {
	/**
	 * Returns the name of the measure.
	 *
	 * @param value
	 */
	name(value: Object): string;

	/**
	 * Returns the unique name of the measure.
	 *
	 * @param value
	 */
	uniqueName(value: Object): string;

	/**
	 * Returns the caption of the measure used when displaying the name of the measure to the user.
	 *
	 * @param value
	 */
	caption(value: Object): string;

	/**
	 * Returns a user-friendly description of the measure.
	 *
	 * @param value
	 */
	description(value: Object): string;

	/**
	 * Returns the name of the measure group this measure belongs to.
	 *
	 * @param value
	 */
	measureGroupName(value: Object): string;

	/**
	 * Returns the aggregator type that identifies how a measure was derived. It is a value from the $.ig.AggregatorType enumeration.
	 *
	 *             $.ig.AggregatorType.prototype.unknown = 0;
	 *             The aggregated function is undefined.
	 *
	 *             $.ig.AggregatorType.prototype.sum = 1;
	 *             The aggregated function adds all values.
	 *
	 *             $.ig.AggregatorType.prototype.count = 2;
	 *             The aggregated function will count the number of the values.
	 *
	 *             $.ig.AggregatorType.prototype.min = 3;
	 *             The aggregated function will returns the smallest value.
	 *
	 *             $.ig.AggregatorType.prototype.max = 4;
	 *             The aggregated function will returns the largest value.
	 *
	 *             $.ig.AggregatorType.prototype.average = 5;
	 *             The aggregated function will returns the average of cells value.
	 *
	 *             $.ig.AggregatorType.prototype.variance = 6;
	 *             The aggregated function will estimates variance based on the sample.
	 *
	 *             $.ig.AggregatorType.prototype.std = 7;
	 *             The aggregated function will estimates the standart deviation based on sample.
	 *
	 *             $.ig.AggregatorType.prototype.distinctCount = 8;
	 *             The aggregated function will returns the number of distinct, nonempty tuples in a set.
	 *
	 *             $.ig.AggregatorType.prototype.none = 9;
	 *             No aggregation performed.
	 *
	 *             $.ig.AggregatorType.prototype.averageOfChildren = 10;
	 *             The aggregated function will returns the average of the measure's children.
	 *
	 *             $.ig.AggregatorType.prototype.firstNonEmpty = 13;
	 *             The aggregated function will returns the measure's first nonempty member.
	 *
	 *             $.ig.AggregatorType.prototype.lastNonEmpty = 14;
	 *             The aggregated function will returns the measure's last nonempty member.
	 *
	 *             $.ig.AggregatorType.prototype.byAccount = 15;
	 *             Aggregated by the aggregation function associated with the specified account type of an attribute in an account dimension.
	 *
	 *             $.ig.AggregatorType.prototype.calculated = 127;
	 *             The aggregated function will returns the result derived from a formula.
	 *
	 * @param value
	 */
	aggregatorType(value: Object): number;

	/**
	 * Returns the default format string for the measure.
	 *
	 * @param value
	 */
	defaultFormatString(value: Object): string;

	/**
	 * Returns the measure display folder path to be used when displaying the measure in the user interface.
	 *             Folder names will be separated by a semicolon (;). Nested folders are indicated by a backslash (\).
	 *
	 * @param value
	 */
	measureDisplayFolder(value: Object): string;
}
}

declare namespace Infragistics {
class Level {
	/**
	 * Returns the name of the level.
	 *
	 * @param value
	 */
	name(value: Object): string;

	/**
	 * Returns the unique name of the level.
	 *
	 * @param value
	 */
	uniqueName(value: Object): string;

	/**
	 * Returns the caption of the level used when displaying the name of the level to the user.
	 *
	 * @param value
	 */
	caption(value: Object): string;

	/**
	 * Returns a user-friendly description of the level.
	 *
	 * @param value
	 */
	description(value: Object): string;

	/**
	 * Returns the distance of the level from the root of the level. Root level is zero (0)
	 *
	 * @param value
	 */
	depth(value: Object): number;

	/**
	 * Returns the unique name of the hierarchy that contains the level.
	 *
	 * @param value
	 */
	hierarchyUniqueName(value: Object): string;

	/**
	 * Returns the unique name of the dimension that contains the level.
	 *
	 * @param value
	 */
	dimensionUniqueName(value: Object): string;

	/**
	 * Returns the count of all members in the level.
	 *
	 * @param value
	 */
	membersCount(value: Object): number;

	/**
	 * Returns a value that defines how the level was sourced.
	 *
	 * @param value
	 */
	levelOrigin(value: Object): number;

	/**
	 * Returns the ID of the attribute that the level is sorted on.
	 *
	 * @param value
	 */
	levelOrderingProperty(value: Object): number;
}
}

declare namespace Infragistics {
class MeasureGroup {
	/**
	 * Returns the name of the measure group.
	 *
	 * @param value
	 */
	name(value: Object): string;

	/**
	 * Returns the caption of the measure group used when displaying the name of the measure group to the user.
	 *
	 * @param value
	 */
	caption(value: Object): string;

	/**
	 * Returns a user-friendly description of the measure group.
	 *
	 * @param value
	 */
	description(value: Object): string;

	/**
	 * Returns the name of the catalog to which this measure group belongs.
	 *
	 * @param value
	 */
	catalogName(value: Object): string;

	/**
	 * Returns the name of the cube to which this measure group belongs
	 *
	 * @param value
	 */
	cubeName(value: Object): string;
}
}

declare namespace Infragistics {
class MeasureList {
	/**
	 * Returns the caption of the measure list used when displaying the name of the measure list to the user.
	 *
	 * @param value
	 */
	caption(value: Object): string;

	/**
	 * Returns an array of $.ig.Measure objects this measure list is grouping.
	 *
	 * @param value
	 */
	measures(value: Object): any[];
}
}

declare namespace Infragistics {
class OlapResult {
	/**
	 * Returns a value indicating whether the result object contains any data.
	 *
	 * @param value
	 */
	isEmpty(value: Object): boolean;

	/**
	 * Returns an array of $.ig.OlapResultAxis objects this result is built on.
	 *
	 * @param value
	 */
	axes(value: Object): any[];

	/**
	 * Returns an array of $.ig.OlapResultCell objects which hold the result data.
	 *
	 * @param value
	 */
	cells(value: Object): any[];
}
}

interface OlapResultAxisOptions {
	/**
	 * Optional="false" array of $.ig.OlapResultTuple objects which form the axis.
	 */
	tuples?: any[];

	/**
	 * Optional="false" the count of the $.ig.OlapResultAxisMember objects of each tuple.
	 */
	tupleSize?: number;

	/**
	 * Option for OlapResultAxisOptions
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class OlapResultAxis {
	constructor(options: OlapResultAxisOptions);

	/**
	 * Returns an array of $.ig.OlapResultTuple objects which form the axis.
	 */
	tuples(): any[];

	/**
	 * Returns the count of the $.ig.OlapResultAxisMember objects of each tuple.
	 */
	tupleSize(): number;
}
}
interface IgniteUIStatic {
OlapResultAxis: typeof Infragistics.OlapResultAxis;
}

interface OlapResultTupleOptions {
	/**
	 * Optional="false" array of $.ig.OlapResultAxisMember objects which form the tuple object.
	 */
	members?: any[];

	/**
	 * Option for OlapResultTupleOptions
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class OlapResultTuple {
	constructor(options: OlapResultTupleOptions);

	/**
	 * Returns an array of $.ig.OlapResultTuple objects which form the axis.
	 */
	members(): any[];
}
}
interface IgniteUIStatic {
OlapResultTuple: typeof Infragistics.OlapResultTuple;
}

declare namespace Infragistics {
class OlapResultAxisMember {
	/**
	 * Returns the unique name of the axis member.
	 *
	 * @param value
	 */
	uniqueName(value: Object): string;

	/**
	 * Returns the caption of the axis member used when displaying the name of the axis member to the user.
	 *
	 * @param value
	 */
	caption(value: Object): string;

	/**
	 * Returns the unique name of the level this member belongs to.
	 *
	 * @param value
	 */
	levelUniqueName(value: Object): string;

	/**
	 * Returns the unique name of the hierarchy that contains the level.
	 *
	 * @param value
	 */
	hierarchyUniqueName(value: Object): string;

	/**
	 * Returns the distance of member parent level from the root of the level. Root level is zero (0)
	 *
	 * @param value
	 */
	levelNumber(value: Object): number;

	/**
	 * A bitmap of the information projected by childCount, drilledDown and parentSameAsPrev properties.
	 *
	 * @param value
	 */
	displayInfo(value: Object): number;

	/**
	 * Returns the count of children members this member has.
	 *
	 * @param value
	 */
	childCount(value: Object): number;

	/**
	 * Returns a value that indicates whether at least one child of this member appears on the axis, immediately following all occurrences of that member. This can be used by applications to display a "+" or a "-" next to the member.
	 *
	 * @param value
	 */
	drilledDown(value: Object): boolean;

	/**
	 * Returns a value that indicates whether the parent of this member is the same as the parent of the member preceding all occurrences of the current member.
	 *
	 * @param value
	 */
	parentSameAsPrev(value: Object): boolean;

	/**
	 * Returns a key value map of the members' properties. By default only 'PARENT_UNIQUE_NAME' and 'CHILDREN_CARDINALITY' properties are available.
	 *
	 * @param value
	 */
	properties(value: Object): Object;
}
}

declare namespace Infragistics {
class OlapResultCell {
	/**
	 * Returns the position of the cell when cells are iterated row by row.
	 *
	 * @param value
	 */
	cellOrdinal(value: Object): number;

	/**
	 * Returns a key value map of the cell's properties. Currently only 'Value' and 'FmtValue' properties are available.
	 *
	 * @param value
	 */
	properties(value: Object): Object;
}
}

interface IgTemplatingRegExp {
	/**
	 * Option for IgTemplatingRegExp
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class igTemplating {
	constructor(regExp: IgTemplatingRegExp);

	/**
	 * Populates the given template with the provided data. If data is a function that requires arguments, the arguments need to be provided as an array following the data. tmpl(template, data[, args])
	 *
	 * @param template Specifies the template string
	 * @param data Specifies the data to be templated in the template. If function is provided, then it has to be object or array returning function, possible receiving arguments array which can be specified as the third parameter
	 * @param args If function is provided as the second parameter, then this parameter is the arguments for the function.
	 */
	tmpl(template: string, data: Object, args?: any[]): string;
	clearTmplCache(): void;
}
}
interface IgniteUIStatic {
igTemplating: typeof Infragistics.igTemplating;
}

interface DataBindingEvent {
	(event: Event, ui: DataBindingEventUIParam): void;
}

interface DataBindingEventUIParam {
	/**
	 * Used to obtain reference to chart widget.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to instance of $.ig.DataSource.
	 */
	dataSource?: any;
}

interface DataBoundEvent {
	(event: Event, ui: DataBoundEventUIParam): void;
}

interface DataBoundEventUIParam {
	/**
	 * Used to obtain reference to chart widget.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to array actual data which is displayed by chart.
	 */
	data?: any;

	/**
	 * Used to obtain reference to instance of $.ig.DataSource.
	 */
	dataSource?: any;
}

interface UpdateTooltipEvent {
	(event: Event, ui: UpdateTooltipEventUIParam): void;
}

interface UpdateTooltipEventUIParam {
	/**
	 * Used to obtain reference to chart widget.
	 */
	owner?: any;

	/**
	 * Used to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 */
	text?: any;

	/**
	 * Used to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 */
	item?: any;

	/**
	 * Used to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 */
	x?: any;

	/**
	 * Used to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 */
	y?: any;

	/**
	 * Used to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	element?: any;
}

interface HideTooltipEvent {
	(event: Event, ui: HideTooltipEventUIParam): void;
}

interface HideTooltipEventUIParam {
	/**
	 * Used to obtain reference to chart widget.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to item.
	 */
	item?: any;

	/**
	 * Used to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	element?: any;
}

interface IgBaseChart {
	/**
	 * The width of the chart.
	 */
	width?: number;

	/**
	 * The height of the chart.
	 */
	height?: number;

	/**
	 * Gets sets template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 */
	tooltipTemplate?: string;

	/**
	 * Gets sets maximum number of displayed records in chart.
	 */
	maxRecCount?: number;

	/**
	 * Gets sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	dataSource?: any;

	/**
	 * Gets sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	dataSourceType?: string;

	/**
	 * Gets sets url which is used for sending JSON on request for remote data.
	 */
	dataSourceUrl?: string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	responseTotalRecCountKey?: string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	updateTooltip?: UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	hideTooltip?: HideTooltipEvent;

	/**
	 * Option for igBaseChart
	 */
	[optionName: string]: any;
}
interface IgBaseChartMethods {
	/**
	 * Find index of item within actual data used by chart.
	 *
	 * @param item The reference to item.
	 */
	findIndexOfItem(item: Object): number;

	/**
	 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
	 *
	 * @param index Index of data item.
	 */
	getDataItem(index: Object): Object;

	/**
	 * Get reference of actual data used by chart.
	 */
	getData(): any[];

	/**
	 * Adds a new item to the data source and notifies the chart.
	 *
	 * @param item The item that we want to add to the data source.
	 */
	addItem(item: Object): Object;

	/**
	 * Inserts a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that we want to insert in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 */
	insertItem(item: Object, index: number): Object;

	/**
	 * Deletes an item from the data source and notifies the chart.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 */
	removeItem(index: number): Object;

	/**
	 * Updates an item in the data source and notifies the chart.
	 *
	 * @param index The index of the item in the data source that we want to change.
	 * @param item The new item object that will be set in the data source.
	 */
	setItem(index: number, item: Object): Object;

	/**
	 * Notifies the chart that an item has been set in an associated data source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source that has been changed.
	 * @param newItem the new item that has been set in the collection.
	 * @param oldItem the old item that has been overwritten in the collection.
	 */
	notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;

	/**
	 * Notifies the chart that the items have been cleared from an associated data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 */
	notifyClearItems(dataSource: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source where the new item has been inserted.
	 * @param newItem the new item that has been set in the collection.
	 */
	notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source from where the old item has been removed.
	 * @param oldItem the old item that has been removed from the collection.
	 */
	notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;

	/**
	 * Get reference to chart object.
	 */
	chart(): Object;

	/**
	 * Binds data to the chart
	 */
	dataBind(): void;

	/**
	 * Destroys widget.
	 */
	destroy(): void;

	/**
	 * Forces any pending deferred work to render on the chart before continuing
	 */
	flush(): void;
}
interface JQuery {
	data(propertyName: "igBaseChart"): IgBaseChartMethods;
}

interface JQuery {
	igBaseChart(methodName: "findIndexOfItem", item: Object): number;
	igBaseChart(methodName: "getDataItem", index: Object): Object;
	igBaseChart(methodName: "getData"): any[];
	igBaseChart(methodName: "addItem", item: Object): Object;
	igBaseChart(methodName: "insertItem", item: Object, index: number): Object;
	igBaseChart(methodName: "removeItem", index: number): Object;
	igBaseChart(methodName: "setItem", index: number, item: Object): Object;
	igBaseChart(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
	igBaseChart(methodName: "notifyClearItems", dataSource: Object): Object;
	igBaseChart(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
	igBaseChart(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
	igBaseChart(methodName: "chart"): Object;
	igBaseChart(methodName: "dataBind"): void;
	igBaseChart(methodName: "destroy"): void;
	igBaseChart(methodName: "flush"): void;

	/**
	 * The width of the chart.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "width"): number;

	/**
	 * The width of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "width", optionValue: number): void;

	/**
	 * The height of the chart.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "height"): number;

	/**
	 * The height of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "height", optionValue: number): void;

	/**
	 * Gets  template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 */
	igBaseChart(optionLiteral: 'option', optionName: "tooltipTemplate"): string;

	/**
	 * Sets template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 *
	 * @optionValue New value to be set.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;

	/**
	 * Gets  maximum number of displayed records in chart.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "maxRecCount"): number;

	/**
	 * Sets maximum number of displayed records in chart.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "maxRecCount", optionValue: number): void;

	/**
	 * Gets  a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 *
	 * @optionValue New value to be set.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Gets  url which is used for sending JSON on request for remote data.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets url which is used for sending JSON on request for remote data.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "updateTooltip"): UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "updateTooltip", optionValue: UpdateTooltipEvent): void;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "hideTooltip"): HideTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igBaseChart(optionLiteral: 'option', optionName: "hideTooltip", optionValue: HideTooltipEvent): void;
	igBaseChart(options: IgBaseChart): JQuery;
	igBaseChart(optionLiteral: 'option', optionName: string): any;
	igBaseChart(optionLiteral: 'option', options: IgBaseChart): JQuery;
	igBaseChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igBaseChart(methodName: string, ...methodParams: any[]): any;
}
interface IgBulletGraphRange {
	/**
	 * Gets or sets the name of the range.
	 */
	name?: string;

	/**
	 * Gets or sets the brush to use to fill the range.
	 */
	brush?: string;

	/**
	 * Gets or sets the outline to use when rendering the range.
	 */
	outline?: string;

	/**
	 * Gets or sets the value at which the range starts along the scale.
	 */
	startValue?: number;

	/**
	 * Gets or sets the value at which the range ends along the scale.
	 */
	endValue?: number;

	/**
	 * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the inner edge of the range.
	 * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
	 */
	innerStartExtent?: number;

	/**
	 * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the inner edge of the range.
	 * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
	 */
	innerEndExtent?: number;

	/**
	 * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the outer edge of the range.
	 * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
	 */
	outerStartExtent?: number;

	/**
	 * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the outer edge of the range.
	 * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
	 */
	outerEndExtent?: number;

	/**
	 * Gets or sets the stroke thickness to use when rendering this range's outline.
	 */
	strokeThickness?: number;

	/**
	 * Option for IgBulletGraphRange
	 */
	[optionName: string]: any;
}

interface FormatLabelEvent {
	(event: Event, ui: FormatLabelEventUIParam): void;
}

interface FormatLabelEventUIParam {
	/**
	 * Used to obtain reference to the bullet graph widget.
	 */
	owner?: any;

	/**
	 * Used to obtain the minimum value of the bullet graph scale.
	 */
	actualMinimumValue?: any;

	/**
	 * Used to obtain the maximum value of the bullet graph scale.
	 */
	actualMaximumValue?: any;

	/**
	 * Used to obtain the value on the the bullet graph scale associated with the label.
	 */
	value?: any;

	/**
	 * Used to obtain the string value of the label.
	 */
	label?: any;
}

interface AlignLabelEvent {
	(event: Event, ui: AlignLabelEventUIParam): void;
}

interface AlignLabelEventUIParam {
	/**
	 * Used to obtain reference to gauge widget.
	 */
	owner?: any;

	/**
	 * Used to obtain the minimum value of the bullet graph scale.
	 */
	actualMinimumValue?: any;

	/**
	 * Used to obtain the maximum value of the bullet graph scale.
	 */
	actualMaximumValue?: any;

	/**
	 * Used to obtain the value on the the bullet graph scale associated with the label.
	 */
	value?: any;

	/**
	 * Used to obtain the string value of the label.
	 */
	label?: any;

	/**
	 * Used to obtain the width of the label.
	 */
	width?: any;

	/**
	 * Used to obtain the height of the label.
	 */
	height?: any;

	/**
	 * Used to obtain the X offset of the label on the bullet graph scale.
	 */
	offsetX?: any;

	/**
	 * Used to obtain the Y offset of the label on the bullet graph scale.
	 */
	offsetY?: any;
}

interface IgBulletGraph {
	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * Gets or sets the scale ranges to render on the bullet graph.
	 */
	ranges?: IgBulletGraphRange[];

	/**
	 * Gets or sets the ranges' tooltip template.
	 */
	rangeToolTipTemplate?: string;

	/**
	 * Gets or sets the value's tooltip template.
	 */
	valueToolTipTemplate?: string;

	/**
	 * Gets or sets the target value's tooltip template.
	 */
	targetValueToolTipTemplate?: string;

	/**
	 * Gets or sets the orientation of the scale.
	 *
	 * Valid values:
	 * "horizontal" The scale has a horizontal orientation.
	 * "vertical" The scale has a vertical orientation.
	 */
	orientation?: string;

	/**
	 * Gets or sets the background brush for the scale.
	 */
	scaleBackgroundBrush?: string;

	/**
	 * Gets or sets the background outline for the scale.
	 */
	scaleBackgroundOutline?: string;

	/**
	 * Gets or sets the background outline thickness for the scale.
	 */
	scaleBackgroundThickness?: number;

	/**
	 * Gets or sets a collection of brushes to be used as the palette for bullet graph ranges.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	rangeBrushes?: any;

	/**
	 * Gets or sets a collection of brushes to be used as the palette for bullet graph outlines.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	rangeOutlines?: any;

	/**
	 * Gets or sets the minimum value of the scale.
	 */
	minimumValue?: number;

	/**
	 * Gets or sets the maximum value of the scale.
	 */
	maximumValue?: number;

	/**
	 * Gets or sets the value indicated by the target value bar.
	 */
	targetValue?: number;

	/**
	 * Gets or sets the name used for the target value. The name is displayed in the default target value tooltip.
	 */
	targetValueName?: string;

	/**
	 * Gets or sets the value at which the bar ends.
	 */
	value?: number;

	/**
	 * Gets or sets the name used for actual value.
	 */
	valueName?: string;

	/**
	 * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	rangeInnerExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	rangeOuterExtent?: number;

	/**
	 * Gets or sets the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	valueInnerExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	valueOuterExtent?: number;

	/**
	 * Gets or sets the interval to use for the scale.
	 */
	interval?: number;

	/**
	 * A value to start adding tickmarks, added to the scale's MinimumValue.
	 */
	ticksPostInitial?: number;

	/**
	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
	 */
	ticksPreTerminal?: number;

	/**
	 * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
	 */
	labelInterval?: number;

	/**
	 * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
	 * Values further from zero than 1 can be used to hide the labels of the bullet graph.
	 */
	labelExtent?: number;

	/**
	 * A value to start adding labels, added to the scale's MinimumValue.
	 */
	labelsPostInitial?: number;

	/**
	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
	 */
	labelsPreTerminal?: number;

	/**
	 * Gets or sets the number of minor tickmarks to place between major tickmarks.
	 */
	minorTickCount?: number;

	/**
	 * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	tickStartExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	tickEndExtent?: number;

	/**
	 * Gets or sets the stroke thickness to use when rendering ticks.
	 */
	tickStrokeThickness?: number;

	/**
	 * Gets or sets the brush to use for the major tickmarks.
	 */
	tickBrush?: string;

	/**
	 * Gets or sets the brush to use for the label font.
	 */
	fontBrush?: string;

	/**
	 * Gets or sets the brush to use for the actual value element.
	 */
	valueBrush?: string;

	/**
	 * Gets or sets the brush to use for the outline of actual value element.
	 */
	valueOutline?: string;

	/**
	 * Gets or sets the stroke thickness to use when rendering single actual value element.
	 */
	valueStrokeThickness?: number;

	/**
	 * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	minorTickStartExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	minorTickEndExtent?: number;

	/**
	 * Gets or sets the stroke thickness to use when rendering minor ticks.
	 */
	minorTickStrokeThickness?: number;

	/**
	 * Gets or sets the brush to use for the minor tickmarks.
	 */
	minorTickBrush?: string;

	/**
	 * Gets or sets a value indicating whether the scale is inverted.
	 * When the scale is inverted the direction in which the scale values increase is right to left.
	 */
	isScaleInverted?: boolean;

	/**
	 * Gets or sets the brush to use to fill the backing of the bullet graph.
	 */
	backingBrush?: string;

	/**
	 * Gets or sets the brush to use for the outline of the backing.
	 */
	backingOutline?: string;

	/**
	 * Gets or sets the stroke thickness of the backing outline.
	 */
	backingStrokeThickness?: number;

	/**
	 * Gets or sets the inner extent of the bullet graph backing.
	 */
	backingInnerExtent?: number;

	/**
	 * Gets or sets the outer extent of the bullet graph backing.
	 */
	backingOuterExtent?: number;

	/**
	 * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	scaleStartExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	scaleEndExtent?: number;

	/**
	 * Gets or sets the brush to use when rendering the fill of the comparative marker.
	 */
	targetValueBrush?: string;

	/**
	 * Get or sets the breadth of the target value element.
	 */
	targetValueBreadth?: number;

	/**
	 * Gets or sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	targetValueInnerExtent?: number;

	/**
	 * Gets or sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	targetValueOuterExtent?: number;

	/**
	 * Gets or sets the brush to use when rendering the outline of the target value.
	 */
	targetValueOutline?: string;

	/**
	 * Gets or sets the stroke thickness of the outline of the target value bar.
	 */
	targetValueStrokeThickness?: number;

	/**
	 * Gets or sets the number of milliseconds over which changes to the bullet graph should be animated.
	 */
	transitionDuration?: number;

	/**
	 * Gets or sets the time in milliseconds that tooltip appearance is delayed with.
	 */
	showToolTipTimeout?: number;

	/**
	 * Gets or sets a value indicating whether tooltips are enabled.
	 */
	showToolTip?: boolean;

	/**
	 * Gets or sets the font.
	 */
	font?: string;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is raised when a label of the bullet graph is formatted.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the bullet graph widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 */
	formatLabel?: FormatLabelEvent;

	/**
	 * Event which is raised when a label of the bullet graph is aligned along the scale.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 * Use ui.width to obtain the width of the label.
	 * Use ui.height to obtain the height of the label.
	 * Use ui.offsetX to obtain the X offset of the label on the bullet graph scale.
	 * Use ui.offsetY to obtain the Y offset of the label on the bullet graph scale.
	 */
	alignLabel?: AlignLabelEvent;

	/**
	 * Option for igBulletGraph
	 */
	[optionName: string]: any;
}
interface IgBulletGraphMethods {
	/**
	 * Returns a string containing the names of all the ranges delimited with a \n symbol.
	 */
	getRangeNames(): void;

	/**
	 * Adds a new range to the bullet graph.
	 *
	 * @param value The range object to be added.
	 */
	addRange(value: Object): void;

	/**
	 * Removes a range from the bullet graph.
	 *
	 * @param value A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
	 */
	removeRange(value: Object): void;

	/**
	 * Updates the specified range of the bullet graph.
	 *
	 * @param value The range object to be updated.
	 */
	updateRange(value: Object): void;

	/**
	 * Returns information about how the bullet graph is rendered.
	 */
	exportVisualData(): Object;

	/**
	 * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
	 */
	flush(): void;

	/**
	 * Destroys widget.
	 */
	destroy(): void;

	/**
	 * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
	 */
	styleUpdated(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igBulletGraph"): IgBulletGraphMethods;
}

interface JQuery {
	igBulletGraph(methodName: "getRangeNames"): void;
	igBulletGraph(methodName: "addRange", value: Object): void;
	igBulletGraph(methodName: "removeRange", value: Object): void;
	igBulletGraph(methodName: "updateRange", value: Object): void;
	igBulletGraph(methodName: "exportVisualData"): Object;
	igBulletGraph(methodName: "flush"): void;
	igBulletGraph(methodName: "destroy"): void;
	igBulletGraph(methodName: "styleUpdated"): void;
	igBulletGraph(methodName: "changeLocale", $container: Object): void;
	igBulletGraph(methodName: "changeGlobalLanguage"): void;
	igBulletGraph(methodName: "changeGlobalRegional"): void;

	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igBulletGraph(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igBulletGraph(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igBulletGraph(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igBulletGraph(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets  the scale ranges to render on the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "ranges"): IgBulletGraphRange[];

	/**
	 * Sets the scale ranges to render on the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "ranges", optionValue: IgBulletGraphRange[]): void;

	/**
	 * Gets  the ranges' tooltip template.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeToolTipTemplate"): string;

	/**
	 * Sets the ranges' tooltip template.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeToolTipTemplate", optionValue: string): void;

	/**
	 * Gets  the value's tooltip template.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueToolTipTemplate"): string;

	/**
	 * Sets the value's tooltip template.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueToolTipTemplate", optionValue: string): void;

	/**
	 * Gets  the target value's tooltip template.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueToolTipTemplate"): string;

	/**
	 * Sets the target value's tooltip template.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueToolTipTemplate", optionValue: string): void;

	/**
	 * Gets  the orientation of the scale.
	 */

	igBulletGraph(optionLiteral: 'option', optionName: "orientation"): string;

	/**
	 * Sets the orientation of the scale.
	 *
	 * @optionValue New value to be set.
	 */

	igBulletGraph(optionLiteral: 'option', optionName: "orientation", optionValue: string): void;

	/**
	 * Gets  the background brush for the scale.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleBackgroundBrush"): string;

	/**
	 * Sets the background brush for the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleBackgroundBrush", optionValue: string): void;

	/**
	 * Gets  the background outline for the scale.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleBackgroundOutline"): string;

	/**
	 * Sets the background outline for the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleBackgroundOutline", optionValue: string): void;

	/**
	 * Gets  the background outline thickness for the scale.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleBackgroundThickness"): number;

	/**
	 * Sets the background outline thickness for the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleBackgroundThickness", optionValue: number): void;

	/**
	 * Gets  a collection of brushes to be used as the palette for bullet graph ranges.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeBrushes"): any;

	/**
	 * Sets a collection of brushes to be used as the palette for bullet graph ranges.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeBrushes", optionValue: any): void;

	/**
	 * Gets  a collection of brushes to be used as the palette for bullet graph outlines.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeOutlines"): any;

	/**
	 * Sets a collection of brushes to be used as the palette for bullet graph outlines.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeOutlines", optionValue: any): void;

	/**
	 * Gets  the minimum value of the scale.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minimumValue"): number;

	/**
	 * Sets the minimum value of the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minimumValue", optionValue: number): void;

	/**
	 * Gets  the maximum value of the scale.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "maximumValue"): number;

	/**
	 * Sets the maximum value of the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "maximumValue", optionValue: number): void;

	/**
	 * Gets  the value indicated by the target value bar.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValue"): number;

	/**
	 * Sets the value indicated by the target value bar.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValue", optionValue: number): void;

	/**
	 * Gets  the name used for the target value. The name is displayed in the default target value tooltip.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueName"): string;

	/**
	 * Sets the name used for the target value. The name is displayed in the default target value tooltip.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueName", optionValue: string): void;

	/**
	 * Gets  the value at which the bar ends.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "value"): number;

	/**
	 * Sets the value at which the bar ends.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "value", optionValue: number): void;

	/**
	 * Gets  the name used for actual value.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueName"): string;

	/**
	 * Sets the name used for actual value.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueName", optionValue: string): void;

	/**
	 * Gets  the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeInnerExtent"): number;

	/**
	 * Sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeInnerExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeOuterExtent"): number;

	/**
	 * Sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "rangeOuterExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueInnerExtent"): number;

	/**
	 * Sets the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueInnerExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueOuterExtent"): number;

	/**
	 * Sets the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueOuterExtent", optionValue: number): void;

	/**
	 * Gets  the interval to use for the scale.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "interval"): number;

	/**
	 * Sets the interval to use for the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "interval", optionValue: number): void;

	/**
	 * A value to start adding tickmarks, added to the scale's MinimumValue.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "ticksPostInitial"): number;

	/**
	 * A value to start adding tickmarks, added to the scale's MinimumValue.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "ticksPostInitial", optionValue: number): void;

	/**
	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "ticksPreTerminal"): number;

	/**
	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "ticksPreTerminal", optionValue: number): void;

	/**
	 * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "labelInterval"): number;

	/**
	 * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "labelInterval", optionValue: number): void;

	/**
	 * Gets  the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
	 * Values further from zero than 1 can be used to hide the labels of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "labelExtent"): number;

	/**
	 * Sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
	 * Values further from zero than 1 can be used to hide the labels of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "labelExtent", optionValue: number): void;

	/**
	 * A value to start adding labels, added to the scale's MinimumValue.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "labelsPostInitial"): number;

	/**
	 * A value to start adding labels, added to the scale's MinimumValue.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "labelsPostInitial", optionValue: number): void;

	/**
	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "labelsPreTerminal"): number;

	/**
	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "labelsPreTerminal", optionValue: number): void;

	/**
	 * Gets  the number of minor tickmarks to place between major tickmarks.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickCount"): number;

	/**
	 * Sets the number of minor tickmarks to place between major tickmarks.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickCount", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "tickStartExtent"): number;

	/**
	 * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "tickStartExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "tickEndExtent"): number;

	/**
	 * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "tickEndExtent", optionValue: number): void;

	/**
	 * Gets  the stroke thickness to use when rendering ticks.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "tickStrokeThickness"): number;

	/**
	 * Sets the stroke thickness to use when rendering ticks.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "tickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the brush to use for the major tickmarks.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "tickBrush"): string;

	/**
	 * Sets the brush to use for the major tickmarks.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "tickBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the label font.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "fontBrush"): string;

	/**
	 * Sets the brush to use for the label font.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "fontBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the actual value element.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueBrush"): string;

	/**
	 * Sets the brush to use for the actual value element.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the outline of actual value element.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueOutline"): string;

	/**
	 * Sets the brush to use for the outline of actual value element.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueOutline", optionValue: string): void;

	/**
	 * Gets  the stroke thickness to use when rendering single actual value element.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueStrokeThickness"): number;

	/**
	 * Sets the stroke thickness to use when rendering single actual value element.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "valueStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickStartExtent"): number;

	/**
	 * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickStartExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickEndExtent"): number;

	/**
	 * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickEndExtent", optionValue: number): void;

	/**
	 * Gets  the stroke thickness to use when rendering minor ticks.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickStrokeThickness"): number;

	/**
	 * Sets the stroke thickness to use when rendering minor ticks.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the brush to use for the minor tickmarks.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickBrush"): string;

	/**
	 * Sets the brush to use for the minor tickmarks.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "minorTickBrush", optionValue: string): void;

	/**
	 * Gets  a value indicating whether the scale is inverted.
	 * When the scale is inverted the direction in which the scale values increase is right to left.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "isScaleInverted"): boolean;

	/**
	 * Sets a value indicating whether the scale is inverted.
	 * When the scale is inverted the direction in which the scale values increase is right to left.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "isScaleInverted", optionValue: boolean): void;

	/**
	 * Gets  the brush to use to fill the backing of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingBrush"): string;

	/**
	 * Sets the brush to use to fill the backing of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the outline of the backing.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingOutline"): string;

	/**
	 * Sets the brush to use for the outline of the backing.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingOutline", optionValue: string): void;

	/**
	 * Gets  the stroke thickness of the backing outline.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingStrokeThickness"): number;

	/**
	 * Sets the stroke thickness of the backing outline.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the inner extent of the bullet graph backing.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingInnerExtent"): number;

	/**
	 * Sets the inner extent of the bullet graph backing.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingInnerExtent", optionValue: number): void;

	/**
	 * Gets  the outer extent of the bullet graph backing.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingOuterExtent"): number;

	/**
	 * Sets the outer extent of the bullet graph backing.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "backingOuterExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleStartExtent"): number;

	/**
	 * Sets the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleStartExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleEndExtent"): number;

	/**
	 * Sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "scaleEndExtent", optionValue: number): void;

	/**
	 * Gets  the brush to use when rendering the fill of the comparative marker.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueBrush"): string;

	/**
	 * Sets the brush to use when rendering the fill of the comparative marker.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueBrush", optionValue: string): void;

	/**
	 * Get  the breadth of the target value element.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueBreadth"): number;

	/**
	 * Get or sets the breadth of the target value element.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueBreadth", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueInnerExtent"): number;

	/**
	 * Sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueInnerExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueOuterExtent"): number;

	/**
	 * Sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueOuterExtent", optionValue: number): void;

	/**
	 * Gets  the brush to use when rendering the outline of the target value.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueOutline"): string;

	/**
	 * Sets the brush to use when rendering the outline of the target value.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueOutline", optionValue: string): void;

	/**
	 * Gets  the stroke thickness of the outline of the target value bar.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueStrokeThickness"): number;

	/**
	 * Sets the stroke thickness of the outline of the target value bar.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "targetValueStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the number of milliseconds over which changes to the bullet graph should be animated.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "transitionDuration"): number;

	/**
	 * Sets the number of milliseconds over which changes to the bullet graph should be animated.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;

	/**
	 * Gets  the time in milliseconds that tooltip appearance is delayed with.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "showToolTipTimeout"): number;

	/**
	 * Sets the time in milliseconds that tooltip appearance is delayed with.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "showToolTipTimeout", optionValue: number): void;

	/**
	 * Gets  a value indicating whether tooltips are enabled.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "showToolTip"): boolean;

	/**
	 * Sets a value indicating whether tooltips are enabled.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "showToolTip", optionValue: boolean): void;

	/**
	 * Gets  the font.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "font"): string;

	/**
	 * Sets the font.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "font", optionValue: string): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igBulletGraph(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igBulletGraph(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is raised when a label of the bullet graph is formatted.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the bullet graph widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "formatLabel"): FormatLabelEvent;

	/**
	 * Event which is raised when a label of the bullet graph is formatted.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the bullet graph widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 *
	 * @optionValue Define event handler function.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "formatLabel", optionValue: FormatLabelEvent): void;

	/**
	 * Event which is raised when a label of the bullet graph is aligned along the scale.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 * Use ui.width to obtain the width of the label.
	 * Use ui.height to obtain the height of the label.
	 * Use ui.offsetX to obtain the X offset of the label on the bullet graph scale.
	 * Use ui.offsetY to obtain the Y offset of the label on the bullet graph scale.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "alignLabel"): AlignLabelEvent;

	/**
	 * Event which is raised when a label of the bullet graph is aligned along the scale.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 * Use ui.width to obtain the width of the label.
	 * Use ui.height to obtain the height of the label.
	 * Use ui.offsetX to obtain the X offset of the label on the bullet graph scale.
	 * Use ui.offsetY to obtain the Y offset of the label on the bullet graph scale.
	 *
	 * @optionValue Define event handler function.
	 */
	igBulletGraph(optionLiteral: 'option', optionName: "alignLabel", optionValue: AlignLabelEvent): void;
	igBulletGraph(options: IgBulletGraph): JQuery;
	igBulletGraph(optionLiteral: 'option', optionName: string): any;
	igBulletGraph(optionLiteral: 'option', options: IgBulletGraph): JQuery;
	igBulletGraph(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igBulletGraph(methodName: string, ...methodParams: any[]): any;
}
interface PropertyChangedEvent {
	(event: Event, ui: PropertyChangedEventUIParam): void;
}

interface PropertyChangedEventUIParam {}

interface SeriesAddedEvent {
	(event: Event, ui: SeriesAddedEventUIParam): void;
}

interface SeriesAddedEventUIParam {}

interface SeriesRemovedEvent {
	(event: Event, ui: SeriesRemovedEventUIParam): void;
}

interface SeriesRemovedEventUIParam {}

interface SeriesPointerEnterEvent {
	(event: Event, ui: SeriesPointerEnterEventUIParam): void;
}

interface SeriesPointerEnterEventUIParam {}

interface SeriesPointerLeaveEvent {
	(event: Event, ui: SeriesPointerLeaveEventUIParam): void;
}

interface SeriesPointerLeaveEventUIParam {}

interface SeriesPointerMoveEvent {
	(event: Event, ui: SeriesPointerMoveEventUIParam): void;
}

interface SeriesPointerMoveEventUIParam {}

interface SeriesPointerDownEvent {
	(event: Event, ui: SeriesPointerDownEventUIParam): void;
}

interface SeriesPointerDownEventUIParam {}

interface SeriesPointerUpEvent {
	(event: Event, ui: SeriesPointerUpEventUIParam): void;
}

interface SeriesPointerUpEventUIParam {}

interface CalloutStyleUpdatingEvent {
	(event: Event, ui: CalloutStyleUpdatingEventUIParam): void;
}

interface CalloutStyleUpdatingEventUIParam {}

interface IgCategoryChart {
	/**
	 * Gets or sets the id of a template element to use for tooltips, or markup representing the tooltip template.
	 */
	tooltipTemplate?: any;

	/**
	 * Gets or sets the names of tooltip templates
	 */
	tooltipTemplates?: any;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Gets or sets the left margin of chart title
	 */
	titleLeftMargin?: number;

	/**
	 * Gets or sets the right margin of chart title
	 */
	titleRightMargin?: number;

	/**
	 * Gets or sets the top margin of chart title
	 */
	titleTopMargin?: number;

	/**
	 * Gets or sets the bottom margin of chart title
	 */
	titleBottomMargin?: number;

	/**
	 * Gets or sets the left margin of chart subtitle
	 */
	subtitleLeftMargin?: number;

	/**
	 * Gets or sets the top margin of chart subtitle
	 */
	subtitleTopMargin?: number;

	/**
	 * Gets or sets the right margin of chart subtitle
	 */
	subtitleRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of chart subtitle
	 */
	subtitleBottomMargin?: number;

	/**
	 * Gets or sets color of chart subtitle
	 */
	subtitleTextColor?: string;

	/**
	 * Gets or sets color of chart title
	 */
	titleTextColor?: string;

	/**
	 * Gets or sets the left margin of the chart content.
	 */
	leftMargin?: number;

	/**
	 * Gets or sets the top margin of the chart content.
	 */
	topMargin?: number;

	/**
	 * Gets or sets the right margin of the chart content.
	 */
	rightMargin?: number;

	/**
	 * Gets or sets the bottom margin around the chart content.
	 */
	bottomMargin?: number;

	/**
	 * Gets or sets the duration used for animating series plots when the data is changing
	 */
	transitionDuration?: number;

	/**
	 * Gets or sets the easing function used for animating series plots when the data is changing.
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 */
	transitionEasingFunction?: any;

	/**
	 * Gets or sets a function for creating wrapped tooltip
	 */
	createWrappedTooltip?: any;

	/**
	 * Gets or sets the widget of this control
	 */
	widget?: any;

	/**
	 * Gets or sets CSS font property for the chart subtitle
	 */
	subtitleTextStyle?: string;

	/**
	 * Gets or sets CSS font property for the chart title
	 */
	titleTextStyle?: string;

	/**
	 * Gets or sets a collection of data items used to generate the chart.
	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
	 * Additionally, if the objects in the list implement the IEnumerable interface,
	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
	 * Databinding can be further configured by attributing the data item classes
	 * with the DataSeriesMemberIntentAttribute.
	 */
	itemsSource?: any;

	/**
	 * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
	 */
	includedProperties?: any;

	/**
	 * Gets or sets a set of property paths that should be excluded from consideration by the category chart.
	 */
	excludedProperties?: any;

	/**
	 * Gets or sets the palette of brushes to use for coloring the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	brushes?: any;

	/**
	 * Gets or sets the palette of brushes to use for outlines on the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	outlines?: any;

	/**
	 * Gets or sets the legend to connect this chart to.
	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
	 */
	legend?: any;

	/**
	 * Gets or sets whether the chart can be horizontally zoomed through user interactions.
	 */
	isHorizontalZoomEnabled?: boolean;

	/**
	 * Gets or sets whether the chart can be vertically zoomed through user interactions.
	 */
	isVerticalZoomEnabled?: boolean;

	/**
	 * Gets or sets whether the chart can highlight series through user interactions.
	 * This property applies to Category Chart and Financial Chart controls.
	 */
	isSeriesHighlightingEnabled?: boolean;

	/**
	 * Gets or sets the rectangle representing the current scroll and zoom state of the chart.
	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	windowRect?: any;

	/**
	 * Gets or sets text to display above the plot area.
	 */
	title?: string;

	/**
	 * Gets or sets text to display below the Title, above the plot area.
	 */
	subtitle?: string;

	/**
	 * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	titleAlignment?: string;

	/**
	 * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	subtitleAlignment?: string;

	/**
	 * Gets or sets the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
	 *
	 *
	 * Valid values:
	 * "linearInterpolate" Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
	 * "dontPlot" Do not plot the unknown value on the chart.
	 */
	unknownValuePlotting?: string;

	/**
	 * Gets or sets the rendering resolution for all series in this chart.
	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
	 */
	resolution?: number;

	/**
	 * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
	 */
	thickness?: number;

	/**
	 * Gets or sets the marker shapes used for indicating location of data points in this chart.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 */
	markerTypes?: any;

	/**
	 * Gets or sets the palette of brushes used for rendering fill area of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	markerBrushes?: any;

	/**
	 * Gets or sets the palette of brushes used for rendering outlines of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	markerOutlines?: any;

	/**
	 * Gets or sets the maximum number of markers displyed in the plot area of the chart.
	 */
	markerMaxCount?: number;

	/**
	 * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
	 */
	animateSeriesWhenAxisRangeChanges?: boolean;

	/**
	 * Gets or sets the palette of brushes to used for coloring trend lines in this chart.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	trendLineBrushes?: any;

	/**
	 * Gets or sets the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
	 *
	 *
	 * Valid values:
	 * "none" No trend line will be displayed.
	 * "linearFit" Linear fit.
	 * "quadraticFit" Quadratic polynomial fit.
	 * "cubicFit" Cubic polynomial fit.
	 * "quarticFit" Quartic polynomial fit.
	 * "quinticFit" Quintic polynomial fit.
	 * "logarithmicFit" Logarithmic fit.
	 * "exponentialFit" Exponential fit.
	 * "powerLawFit" Powerlaw fit.
	 * "simpleAverage" Simple moving average.
	 * "exponentialAverage" Exponential moving average.
	 * "modifiedAverage" Modified moving average.
	 * "cumulativeAverage" Cumulative moving average.
	 * "weightedAverage" Weighted moving average.
	 */
	trendLineType?: string;

	/**
	 * Gets or sets the thickness of the trend lines in this chart.
	 * This property applies only to these chart types: point, line, spline, and bubble
	 */
	trendLineThickness?: number;

	/**
	 * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
	 */
	alignsGridLinesToPixels?: boolean;
	trendLinePeriod?: number;

	/**
	 * Gets or sets the style of tooltip to be displayed.
	 *
	 * Valid values:
	 * "default" Display default tooltip for each series in the chart.
	 * "item" Display individual tooltips for all series in the chart.
	 * "category" Display combined tooltip for all series in the chart.
	 * "none" Display no tooltips in the chart.
	 */
	toolTipType?: string;

	/**
	 * Gets or sets the crosshairs to be displayed.
	 *
	 * Valid values:
	 * "default" Display default number of crosshair lines in the chart.
	 * "none" Display no crosshair lines in the chart.
	 * "horizontal" Display horizontal line of crosshairs in the chart.
	 * "vertical" Display vertical line of crosshairs in the chart.
	 * "both" Display both horizontal and vertical lines of crosshairs in the chart.
	 */
	crosshairsDisplayMode?: string;

	/**
	 * Gets or sets whether crosshairs will snap to the nearest data point.
	 */
	crosshairsSnapToData?: boolean;

	/**
	 * Gets or sets whether annotations are shown along the axis for crosshair values
	 */
	crosshairsAnnotationEnabled?: boolean;

	/**
	 * Gets or sets whether annotations for the final value of each series is displayed on the axis.
	 */
	finalValueAnnotationsVisible?: boolean;

	/**
	 * Gets or sets if callouts should be displayed.
	 */
	calloutsVisible?: boolean;

	/**
	 * Gets or sets if event annotations should be displayed.
	 */
	calloutStyleUpdatingEventEnabled?: boolean;

	/**
	 * Gets or sets the collection of callout data to be annotated.
	 */
	calloutsItemsSource?: any;

	/**
	 * Gets or sets the member path of the X data for the callouts.
	 */
	calloutsXMemberPath?: string;

	/**
	 * Gets or sets the member path of the Y data for the callouts.
	 */
	calloutsYMemberPath?: string;

	/**
	 * Gets or sets the member path of the label data for the callouts.
	 */
	calloutsLabelMemberPath?: string;

	/**
	 * Gets or sets the member path of the content data for the callouts.
	 */
	calloutsContentMemberPath?: string;

	/**
	 * Gets or sets function which takes an context object and returns a formatted label for the X-axis.
	 */
	xAxisFormatLabel?: any;

	/**
	 * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.
	 */
	yAxisFormatLabel?: any;

	/**
	 * Gets or sets the left margin of labels on the X-axis
	 */
	xAxisLabelLeftMargin?: number;

	/**
	 * Gets or sets the top margin of labels on the X-axis
	 */
	xAxisLabelTopMargin?: number;

	/**
	 * Gets or sets the right margin of labels on the X-axis
	 */
	xAxisLabelRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of labels on the X-axis
	 */
	xAxisLabelBottomMargin?: number;

	/**
	 * Gets or sets the left margin of labels on the Y-axis
	 */
	yAxisLabelLeftMargin?: number;

	/**
	 * Gets or sets the top margin of labels on the Y-axis
	 */
	yAxisLabelTopMargin?: number;

	/**
	 * Gets or sets the right margin of labels on the Y-axis
	 */
	yAxisLabelRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of labels on the Y-axis
	 */
	yAxisLabelBottomMargin?: number;

	/**
	 * Gets or sets color of labels on the X-axis
	 */
	xAxisLabelTextColor?: string;

	/**
	 * Gets or sets color of labels on the Y-axis
	 */
	yAxisLabelTextColor?: string;

	/**
	 * Gets or sets the margin around a title on the X-axis
	 */
	xAxisTitleMargin?: number;

	/**
	 * Gets or sets the margin around a title on the Y-axis
	 */
	yAxisTitleMargin?: number;

	/**
	 * Gets or sets the left margin of a title on the X-axis
	 */
	xAxisTitleLeftMargin?: number;

	/**
	 * Gets or sets the left margin of a title on the Y-axis
	 */
	yAxisTitleLeftMargin?: number;

	/**
	 * Gets or sets the top margin of a title on the X-axis
	 */
	xAxisTitleTopMargin?: number;

	/**
	 * Gets or sets the top margin of a title on the Y-axis
	 */
	yAxisTitleTopMargin?: number;

	/**
	 * Gets or sets the right margin of a title on the X-axis
	 */
	xAxisTitleRightMargin?: number;

	/**
	 * Gets or sets the right margin of a title on the Y-axis
	 */
	yAxisTitleRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of a title on the X-axis
	 */
	xAxisTitleBottomMargin?: number;

	/**
	 * Gets or sets the bottom margin of a title on the Y-axis
	 */
	yAxisTitleBottomMargin?: number;

	/**
	 * Gets or sets color of title on the X-axis
	 */
	xAxisTitleTextColor?: string;

	/**
	 * Gets or sets color of title on the Y-axis
	 */
	yAxisTitleTextColor?: string;

	/**
	 * Gets or sets CSS font property for labels on X-axis
	 */
	xAxisLabelTextStyle?: string;

	/**
	 * Gets or sets CSS font property for labels on Y-axis
	 */
	yAxisLabelTextStyle?: string;

	/**
	 * Gets or sets CSS font property for title on X-axis
	 */
	xAxisTitleTextStyle?: string;

	/**
	 * Gets or sets CSS font property for title on Y-axis
	 */
	yAxisTitleTextStyle?: string;

	/**
	 * Gets or sets the format for labels along the X-axis.
	 */
	xAxisLabel?: any;

	/**
	 * Gets or sets the property or string from which the labels are derived.
	 */
	yAxisLabel?: any;

	/**
	 * Gets or sets the color to apply to major gridlines along the X-axis.
	 */
	xAxisMajorStroke?: string;

	/**
	 * Gets or sets the color to apply to major gridlines along the Y-axis.
	 */
	yAxisMajorStroke?: string;

	/**
	 * Gets or sets the thickness to apply to major gridlines along the X-axis.
	 */
	xAxisMajorStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to major gridlines along the Y-axis.
	 */
	yAxisMajorStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to minor gridlines along the X-axis.
	 */
	xAxisMinorStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to minor gridlines along the Y-axis.
	 */
	yAxisMinorStrokeThickness?: number;

	/**
	 * Gets or sets the color to apply to stripes along the X-axis.
	 */
	xAxisStrip?: string;

	/**
	 * Gets or sets the color to apply to stripes along the Y-axis.
	 */
	yAxisStrip?: string;

	/**
	 * Gets or sets the color to apply to the X-axis line.
	 */
	xAxisStroke?: string;

	/**
	 * Gets or sets the color to apply to the Y-axis line.
	 */
	yAxisStroke?: string;

	/**
	 * Gets or sets the thickness to apply to the X-axis line.
	 */
	xAxisStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to the Y-axis line.
	 */
	yAxisStrokeThickness?: number;

	/**
	 * Gets or sets the length of tickmarks along the X-axis.
	 */
	xAxisTickLength?: number;

	/**
	 * Gets or sets the length of tickmarks along the Y-axis.
	 */
	yAxisTickLength?: number;

	/**
	 * Gets or sets the color to apply to tickmarks along the X-axis.
	 */
	xAxisTickStroke?: string;

	/**
	 * Gets or sets the color to apply to tickmarks along the Y-axis.
	 */
	yAxisTickStroke?: string;

	/**
	 * Gets or sets the thickness to apply to tickmarks along the X-axis.
	 */
	xAxisTickStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to tickmarks along the Y-axis.
	 */
	yAxisTickStrokeThickness?: number;

	/**
	 * Gets or sets the Text to display below the X-axis.
	 */
	xAxisTitle?: string;

	/**
	 * Gets or sets the Text to display to the left of the Y-axis.
	 */
	yAxisTitle?: string;

	/**
	 * Gets or sets the color to apply to minor gridlines along the X-axis.
	 */
	xAxisMinorStroke?: string;

	/**
	 * Gets or sets the color to apply to minor gridlines along the Y-axis.
	 */
	yAxisMinorStroke?: string;

	/**
	 * Gets or sets the angle of rotation for labels along the X-axis.
	 */
	xAxisLabelAngle?: number;

	/**
	 * Gets or sets the angle of rotation for labels along the Y-axis.
	 */
	yAxisLabelAngle?: number;

	/**
	 * Gets or sets the distance between the X-axis and the bottom of the chart.
	 */
	xAxisExtent?: number;

	/**
	 * Gets or sets the distance between the Y-axis and the left edge of the chart.
	 */
	yAxisExtent?: number;

	/**
	 * Gets or sets the angle of rotation for the X-axis title.
	 */
	xAxisTitleAngle?: number;

	/**
	 * Gets or sets the angle of rotation for the Y-axis title.
	 */
	yAxisTitleAngle?: number;

	/**
	 * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
	 */
	xAxisInverted?: boolean;

	/**
	 * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
	 */
	yAxisInverted?: boolean;

	/**
	 * Gets or sets Horizontal alignment of the X-axis title.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	xAxisTitleAlignment?: string;

	/**
	 * Gets or sets Vertical alignment of the Y-axis title.
	 *
	 * Valid values:
	 * "top" Align the item to the top
	 * "center" Center the item
	 * "bottom" Align the item to the bottom
	 * "stretch" Stretch the item to the full height
	 */
	yAxisTitleAlignment?: string;

	/**
	 * Gets or sets Horizontal alignment of X-axis labels.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	xAxisLabelHorizontalAlignment?: string;

	/**
	 * Gets or sets Horizontal alignment of Y-axis labels.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	yAxisLabelHorizontalAlignment?: string;

	/**
	 * Gets or sets Vertical alignment of X-axis labels.
	 *
	 * Valid values:
	 * "top" Align the item to the top
	 * "center" Center the item
	 * "bottom" Align the item to the bottom
	 * "stretch" Stretch the item to the full height
	 */
	xAxisLabelVerticalAlignment?: string;

	/**
	 * Gets or sets Vertical alignment of Y-axis labels.
	 *
	 * Valid values:
	 * "top" Align the item to the top
	 * "center" Center the item
	 * "bottom" Align the item to the bottom
	 * "stretch" Stretch the item to the full height
	 */
	yAxisLabelVerticalAlignment?: string;

	/**
	 * Gets or sets Visibility of X-axis labels.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	xAxisLabelVisibility?: string;

	/**
	 * Gets or sets Visibility of Y-axis labels.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	yAxisLabelVisibility?: string;

	/**
	 * The location of Y-axis labels, relative to the plot area.
	 *
	 * Valid values:
	 * "outsideTop" Places the axis labels at the top, outside of the plotting area.
	 * "outsideBottom" Places the axis labels at the bottom, outside of the plotting area
	 * "outsideLeft" Places the axis labels to the left, outside of the plotting area.
	 * "outsideRight" Places the axis labels to the right, outside of the plotting area.
	 * "insideTop" Places the axis labels inside the plotting area above the axis line.
	 * "insideBottom" Places the axis labels inside the plotting area below the axis line.
	 * "insideLeft" Places the axis labels inside the plotting area and to the left of the axis line.
	 * "insideRight" Places the axis labels inside the plotting area and to the right of the axis line.
	 */
	yAxisLabelLocation?: string;

	/**
	 * Gets or sets the duration used for animating series plots when the chart is loading into view
	 */
	transitionInDuration?: number;

	/**
	 * Gets or sets the easing function used for animating series plots when the chart is loading into view
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 */
	transitionInEasingFunction?: any;

	/**
	 * Gets or sets the type of chart series to generate from the data.
	 *
	 * Valid values:
	 * "line" Specifies category line series with markers at each data point
	 * "area" Specifies category area series
	 * "column" Specifies category column chart with vertical rectangles at each data point
	 * "point" Specifies category point chart with markers at each data point
	 * "stepLine" Specifies category step line chart
	 * "stepArea" Specifies category step area chart
	 * "spline" Specifies category spline line series with markers at each data point
	 * "splineArea" Specifies category spline area series
	 * "waterfall" Specifies category waterfall chart
	 * "auto" Specifies automatic selection of chart type based on suggestions from Data Adapter
	 */
	chartType?: string;

	/**
	 * Gets or sets the behavior for markers in each series which are placed too close together for the current view, resulting in a collision.
	 *
	 * Valid values:
	 * "none" Collision avoidance is disabled.
	 * "omit" Items colliding with other items will be hidden from view.
	 */
	markerCollisionAvoidance?: string;

	/**
	 * Gets or sets whether animation of series plots is enabled when the chart is loading into view
	 */
	isTransitionInEnabled?: boolean;

	/**
	 * Gets or sets the method that determines how to animate series plots when the chart is loading into view
	 *
	 * Valid values:
	 * "auto" Series transitions in an automatically chosen based on type of series and its orientation
	 * "fromZero" Series transitions in from the reference value of the value axis.
	 * "sweepFromLeft" Series sweeps in from the left
	 * "sweepFromRight" Series sweeps in from the right
	 * "sweepFromTop" Series sweeps in from the top.
	 * "sweepFromBottom" Series sweeps in from the bottom.
	 * "sweepFromCenter" Series sweeps in from the center.
	 * "accordionFromLeft" Series accordions in from the left.
	 * "accordionFromRight" Series accordions in from the right.
	 * "accordionFromTop" Series accordions in from the top.
	 * "accordionFromBottom" Series accordions in from the bottom.
	 * "expand" Series expands from the value midpoints.
	 * "sweepFromCategoryAxisMinimum" Series sweeps in from the category axis minimum.
	 * "sweepFromCategoryAxisMaximum" Series sweeps in from the category axis maximum.
	 * "sweepFromValueAxisMinimum" Series sweeps in from the value axis minimum.
	 * "sweepFromValueAxisMaximum" Series sweeps in from the value axis maximum.
	 * "accordionFromCategoryAxisMinimum" Series accordions in from the category axis minimum.
	 * "accordionFromCategoryAxisMaximum" Series accordions in from the category axis maximum.
	 * "accordionFromValueAxisMinimum" Series accordions in from the value axis minimum.
	 * "accordionFromValueAxisMaximum" Series accordions in from the value axis maximum.
	 */
	transitionInMode?: string;

	/**
	 * Gets or sets the arrival speed used for animating series plots when the chart is loading into view
	 *
	 * Valid values:
	 * "auto" A speed type is automatically selected.
	 * "normal" All speeds are normal, data points will arrive at the same time.
	 * "valueScaled" Data points will arrive later if their value is further from the start point.
	 * "indexScaled" Data points will arrive later if their index is further from the axis origin.
	 * "random" Data points will arrive at random times.
	 */
	transitionInSpeedType?: string;

	/**
	 * Gets or sets the frequency of displayed labels along the X-axis.
	 * Gets or sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
	 */
	xAxisInterval?: number;

	/**
	 * Gets or sets the frequency of displayed minor lines along the X-axis.
	 * Gets or sets the set value is a factor that determines how the minor lines will be displayed.
	 */
	xAxisMinorInterval?: number;

	/**
	 * Gets or sets the amount of space between adjacent categories for the X-axis.
	 * The gap is silently clamped to the range [0, 1] when used.
	 */
	xAxisGap?: number;

	/**
	 * Gets or sets the amount of overlap between adjacent categories for the X-axis.
	 * Gets or sets the overlap is silently clamped to the range [-1, 1] when used.
	 */
	xAxisOverlap?: number;

	/**
	 * Gets or sets the distance between each label and grid line along the Y-axis.
	 */
	yAxisInterval?: number;

	/**
	 * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
	 */
	yAxisIsLogarithmic?: boolean;

	/**
	 * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.
	 * This property is effective only when YAxisIsLogarithmic is true.
	 */
	yAxisLogarithmBase?: number;

	/**
	 * Gets or sets the data value corresponding to the minimum value of the Y-axis.
	 */
	yAxisMinimumValue?: number;

	/**
	 * Gets or sets the data value corresponding to the maximum value of the Y-axis.
	 */
	yAxisMaximumValue?: number;

	/**
	 * Gets or sets the frequency of displayed minor lines along the Y-axis.
	 */
	yAxisMinorInterval?: number;

	/**
	 * Gets or sets the palette used for coloring negative items of Waterfall chart type.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	negativeBrushes?: any;

	/**
	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	negativeOutlines?: any;

	/**
	 * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.
	 */
	yAxisAbbreviateLargeNumbers?: boolean;

	/**
	 * Gets or sets whether the category should be highlighted when hovered
	 */
	isCategoryHighlightingEnabled?: boolean;

	/**
	 * Gets or sets whether the item should be highlighted when hovered
	 */
	isItemHighlightingEnabled?: boolean;

	/**
	 * The width of the chart.
	 */
	width?: number;

	/**
	 * The height of the chart.
	 */
	height?: number;

	/**
	 * Gets sets maximum number of displayed records in chart.
	 */
	maxRecCount?: number;

	/**
	 * Gets sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	dataSource?: any;

	/**
	 * Gets sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	dataSourceType?: string;

	/**
	 * Gets sets url which is used for sending JSON on request for remote data.
	 */
	dataSourceUrl?: string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	responseTotalRecCountKey?: string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Event raised when a property value is changed on this chart
	 */
	propertyChanged?: PropertyChangedEvent;

	/**
	 * Event raised when a series is initialized and added to this chart.
	 */
	seriesAdded?: SeriesAddedEvent;

	/**
	 * Event raised when a series is removed from this chart.
	 */
	seriesRemoved?: SeriesRemovedEvent;

	/**
	 * Occurs when the pointer enters a Series.
	 */
	seriesPointerEnter?: SeriesPointerEnterEvent;

	/**
	 * Occurs when the pointer leaves a Series.
	 */
	seriesPointerLeave?: SeriesPointerLeaveEvent;

	/**
	 * Occurs when the pointer moves over a Series.
	 */
	seriesPointerMove?: SeriesPointerMoveEvent;

	/**
	 * Occurs when the pointer is pressed down over a Series.
	 */
	seriesPointerDown?: SeriesPointerDownEvent;

	/**
	 * Occurs when the pointer is released over a Series.
	 */
	seriesPointerUp?: SeriesPointerUpEvent;

	/**
	 * Occurs when the style of a callout is updated.
	 */
	calloutStyleUpdating?: CalloutStyleUpdatingEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	updateTooltip?: UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	hideTooltip?: HideTooltipEvent;

	/**
	 * Option for igCategoryChart
	 */
	[optionName: string]: any;
}
interface IgCategoryChartMethods {
	destroy(): void;
	id(): void;
	exportVisualData(): void;

	/**
	 * Find index of item within actual data used by chart.
	 *
	 * @param item The reference to item.
	 */
	findIndexOfItem(item: Object): number;

	/**
	 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
	 *
	 * @param index Index of data item.
	 */
	getDataItem(index: Object): Object;

	/**
	 * Get reference of actual data used by chart.
	 */
	getData(): any[];

	/**
	 * Adds a new item to the data source and notifies the chart.
	 *
	 * @param item The item that we want to add to the data source.
	 */
	addItem(item: Object): Object;

	/**
	 * Inserts a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that we want to insert in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 */
	insertItem(item: Object, index: number): Object;

	/**
	 * Deletes an item from the data source and notifies the chart.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 */
	removeItem(index: number): Object;

	/**
	 * Updates an item in the data source and notifies the chart.
	 *
	 * @param index The index of the item in the data source that we want to change.
	 * @param item The new item object that will be set in the data source.
	 */
	setItem(index: number, item: Object): Object;

	/**
	 * Notifies the chart that an item has been set in an associated data source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source that has been changed.
	 * @param newItem the new item that has been set in the collection.
	 * @param oldItem the old item that has been overwritten in the collection.
	 */
	notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;

	/**
	 * Notifies the chart that the items have been cleared from an associated data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 */
	notifyClearItems(dataSource: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source where the new item has been inserted.
	 * @param newItem the new item that has been set in the collection.
	 */
	notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source from where the old item has been removed.
	 * @param oldItem the old item that has been removed from the collection.
	 */
	notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;

	/**
	 * Get reference to chart object.
	 */
	chart(): Object;

	/**
	 * Binds data to the chart
	 */
	dataBind(): void;

	/**
	 * Forces any pending deferred work to render on the chart before continuing
	 */
	flush(): void;
}
interface JQuery {
	data(propertyName: "igCategoryChart"): IgCategoryChartMethods;
}

interface JQuery {
	igCategoryChart(methodName: "destroy"): void;
	igCategoryChart(methodName: "id"): void;
	igCategoryChart(methodName: "exportVisualData"): void;
	igCategoryChart(methodName: "findIndexOfItem", item: Object): number;
	igCategoryChart(methodName: "getDataItem", index: Object): Object;
	igCategoryChart(methodName: "getData"): any[];
	igCategoryChart(methodName: "addItem", item: Object): Object;
	igCategoryChart(methodName: "insertItem", item: Object, index: number): Object;
	igCategoryChart(methodName: "removeItem", index: number): Object;
	igCategoryChart(methodName: "setItem", index: number, item: Object): Object;
	igCategoryChart(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
	igCategoryChart(methodName: "notifyClearItems", dataSource: Object): Object;
	igCategoryChart(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
	igCategoryChart(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
	igCategoryChart(methodName: "chart"): Object;
	igCategoryChart(methodName: "dataBind"): void;
	igCategoryChart(methodName: "flush"): void;

	/**
	 * Gets  the id of a template element to use for tooltips, or markup representing the tooltip template.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "tooltipTemplate"): any;

	/**
	 * Sets the id of a template element to use for tooltips, or markup representing the tooltip template.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: any): void;

	/**
	 * Gets  the names of tooltip templates
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "tooltipTemplates"): any;

	/**
	 * Sets the names of tooltip templates
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "tooltipTemplates", optionValue: any): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Gets  the left margin of chart title
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleLeftMargin"): number;

	/**
	 * Sets the left margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of chart title
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleRightMargin"): number;

	/**
	 * Sets the right margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleRightMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of chart title
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleTopMargin"): number;

	/**
	 * Sets the top margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleTopMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of chart title
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleBottomMargin"): number;

	/**
	 * Sets the bottom margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleBottomMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of chart subtitle
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleLeftMargin"): number;

	/**
	 * Sets the left margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of chart subtitle
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleTopMargin"): number;

	/**
	 * Sets the top margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of chart subtitle
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleRightMargin"): number;

	/**
	 * Sets the right margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of chart subtitle
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleBottomMargin"): number;

	/**
	 * Sets the bottom margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleBottomMargin", optionValue: number): void;

	/**
	 * Gets  color of chart subtitle
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleTextColor"): string;

	/**
	 * Sets color of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleTextColor", optionValue: string): void;

	/**
	 * Gets  color of chart title
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleTextColor"): string;

	/**
	 * Sets color of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleTextColor", optionValue: string): void;

	/**
	 * Gets  the left margin of the chart content.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "leftMargin"): number;

	/**
	 * Sets the left margin of the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "leftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of the chart content.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "topMargin"): number;

	/**
	 * Sets the top margin of the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "topMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of the chart content.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "rightMargin"): number;

	/**
	 * Sets the right margin of the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "rightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin around the chart content.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "bottomMargin"): number;

	/**
	 * Sets the bottom margin around the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "bottomMargin", optionValue: number): void;

	/**
	 * Gets  the duration used for animating series plots when the data is changing
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "transitionDuration"): number;

	/**
	 * Sets the duration used for animating series plots when the data is changing
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;

	/**
	 * Gets  the easing function used for animating series plots when the data is changing.
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "transitionEasingFunction"): any;

	/**
	 * Sets the easing function used for animating series plots when the data is changing.
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "transitionEasingFunction", optionValue: any): void;

	/**
	 * Gets  a function for creating wrapped tooltip
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "createWrappedTooltip"): any;

	/**
	 * Sets a function for creating wrapped tooltip
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "createWrappedTooltip", optionValue: any): void;

	/**
	 * Gets  the widget of this control
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "widget"): any;

	/**
	 * Sets the widget of this control
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "widget", optionValue: any): void;

	/**
	 * Gets  CSS font property for the chart subtitle
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleTextStyle"): string;

	/**
	 * Sets CSS font property for the chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitleTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for the chart title
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleTextStyle"): string;

	/**
	 * Sets CSS font property for the chart title
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "titleTextStyle", optionValue: string): void;

	/**
	 * Gets  a collection of data items used to generate the chart.
	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
	 * Additionally, if the objects in the list implement the IEnumerable interface,
	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
	 * Databinding can be further configured by attributing the data item classes
	 * with the DataSeriesMemberIntentAttribute.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "itemsSource"): any;

	/**
	 * Sets a collection of data items used to generate the chart.
	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
	 * Additionally, if the objects in the list implement the IEnumerable interface,
	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
	 * Databinding can be further configured by attributing the data item classes
	 * with the DataSeriesMemberIntentAttribute.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "itemsSource", optionValue: any): void;

	/**
	 * Gets  a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "includedProperties"): any;

	/**
	 * Sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "includedProperties", optionValue: any): void;

	/**
	 * Gets  a set of property paths that should be excluded from consideration by the category chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "excludedProperties"): any;

	/**
	 * Sets a set of property paths that should be excluded from consideration by the category chart.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "excludedProperties", optionValue: any): void;

	/**
	 * Gets  the palette of brushes to use for coloring the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "brushes"): any;

	/**
	 * Sets the palette of brushes to use for coloring the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "brushes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes to use for outlines on the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "outlines"): any;

	/**
	 * Sets the palette of brushes to use for outlines on the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "outlines", optionValue: any): void;

	/**
	 * Gets  the legend to connect this chart to.
	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "legend"): any;

	/**
	 * Sets the legend to connect this chart to.
	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "legend", optionValue: any): void;

	/**
	 * Gets  whether the chart can be horizontally zoomed through user interactions.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isHorizontalZoomEnabled"): boolean;

	/**
	 * Sets whether the chart can be horizontally zoomed through user interactions.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isHorizontalZoomEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether the chart can be vertically zoomed through user interactions.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isVerticalZoomEnabled"): boolean;

	/**
	 * Sets whether the chart can be vertically zoomed through user interactions.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isVerticalZoomEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether the chart can highlight series through user interactions.
	 * This property applies to Category Chart and Financial Chart controls.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isSeriesHighlightingEnabled"): boolean;

	/**
	 * Sets whether the chart can highlight series through user interactions.
	 * This property applies to Category Chart and Financial Chart controls.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isSeriesHighlightingEnabled", optionValue: boolean): void;

	/**
	 * Gets  the rectangle representing the current scroll and zoom state of the chart.
	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "windowRect"): any;

	/**
	 * Sets the rectangle representing the current scroll and zoom state of the chart.
	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
	 * The provided object should have numeric properties called left, top, width and height.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "windowRect", optionValue: any): void;

	/**
	 * Gets  text to display above the plot area.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "title"): string;

	/**
	 * Sets text to display above the plot area.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "title", optionValue: string): void;

	/**
	 * Gets  text to display below the Title, above the plot area.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitle"): string;

	/**
	 * Sets text to display below the Title, above the plot area.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "subtitle", optionValue: string): void;

	/**
	 * Gets  horizontal alignment which determines the title position, relative to the left and right edges of the control.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "titleAlignment"): string;

	/**
	 * Sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "titleAlignment", optionValue: string): void;

	/**
	 * Gets  horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "subtitleAlignment"): string;

	/**
	 * Sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "subtitleAlignment", optionValue: string): void;

	/**
	 * Gets  the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
	 *
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "unknownValuePlotting"): string;

	/**
	 * Sets the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "unknownValuePlotting", optionValue: string): void;

	/**
	 * Gets  the rendering resolution for all series in this chart.
	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "resolution"): number;

	/**
	 * Sets the rendering resolution for all series in this chart.
	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "resolution", optionValue: number): void;

	/**
	 * Gets  the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "thickness"): number;

	/**
	 * Sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "thickness", optionValue: number): void;

	/**
	 * Gets  the marker shapes used for indicating location of data points in this chart.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "markerTypes"): any;

	/**
	 * Sets the marker shapes used for indicating location of data points in this chart.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "markerTypes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes used for rendering fill area of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "markerBrushes"): any;

	/**
	 * Sets the palette of brushes used for rendering fill area of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "markerBrushes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes used for rendering outlines of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "markerOutlines"): any;

	/**
	 * Sets the palette of brushes used for rendering outlines of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "markerOutlines", optionValue: any): void;

	/**
	 * Gets  the maximum number of markers displyed in the plot area of the chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "markerMaxCount"): number;

	/**
	 * Sets the maximum number of markers displyed in the plot area of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "markerMaxCount", optionValue: number): void;

	/**
	 * Gets  whether the series animations should be allowed when a range change has been detected on an axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges"): boolean;

	/**
	 * Sets whether the series animations should be allowed when a range change has been detected on an axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges", optionValue: boolean): void;

	/**
	 * Gets  the palette of brushes to used for coloring trend lines in this chart.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "trendLineBrushes"): any;

	/**
	 * Sets the palette of brushes to used for coloring trend lines in this chart.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "trendLineBrushes", optionValue: any): void;

	/**
	 * Gets  the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
	 *
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "trendLineType"): string;

	/**
	 * Sets the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "trendLineType", optionValue: string): void;

	/**
	 * Gets  the thickness of the trend lines in this chart.
	 * This property applies only to these chart types: point, line, spline, and bubble
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "trendLineThickness"): number;

	/**
	 * Sets the thickness of the trend lines in this chart.
	 * This property applies only to these chart types: point, line, spline, and bubble
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "trendLineThickness", optionValue: number): void;

	/**
	 * Gets  a value indicating whether grid and tick lines are aligned to device pixels.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "alignsGridLinesToPixels"): boolean;

	/**
	 * Sets a value indicating whether grid and tick lines are aligned to device pixels.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "alignsGridLinesToPixels", optionValue: boolean): void;
	igCategoryChart(optionLiteral: 'option', optionName: "trendLinePeriod"): number;
	igCategoryChart(optionLiteral: 'option', optionName: "trendLinePeriod", optionValue: number): void;

	/**
	 * Gets  the style of tooltip to be displayed.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "toolTipType"): string;

	/**
	 * Sets the style of tooltip to be displayed.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "toolTipType", optionValue: string): void;

	/**
	 * Gets  the crosshairs to be displayed.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "crosshairsDisplayMode"): string;

	/**
	 * Sets the crosshairs to be displayed.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "crosshairsDisplayMode", optionValue: string): void;

	/**
	 * Gets  whether crosshairs will snap to the nearest data point.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "crosshairsSnapToData"): boolean;

	/**
	 * Sets whether crosshairs will snap to the nearest data point.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "crosshairsSnapToData", optionValue: boolean): void;

	/**
	 * Gets  whether annotations are shown along the axis for crosshair values
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "crosshairsAnnotationEnabled"): boolean;

	/**
	 * Sets whether annotations are shown along the axis for crosshair values
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "crosshairsAnnotationEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether annotations for the final value of each series is displayed on the axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "finalValueAnnotationsVisible"): boolean;

	/**
	 * Sets whether annotations for the final value of each series is displayed on the axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "finalValueAnnotationsVisible", optionValue: boolean): void;

	/**
	 * Gets  if callouts should be displayed.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsVisible"): boolean;

	/**
	 * Sets if callouts should be displayed.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsVisible", optionValue: boolean): void;

	/**
	 * Gets  if event annotations should be displayed.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutStyleUpdatingEventEnabled"): boolean;

	/**
	 * Sets if event annotations should be displayed.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutStyleUpdatingEventEnabled", optionValue: boolean): void;

	/**
	 * Gets  the collection of callout data to be annotated.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsItemsSource"): any;

	/**
	 * Sets the collection of callout data to be annotated.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsItemsSource", optionValue: any): void;

	/**
	 * Gets  the member path of the X data for the callouts.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsXMemberPath"): string;

	/**
	 * Sets the member path of the X data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsXMemberPath", optionValue: string): void;

	/**
	 * Gets  the member path of the Y data for the callouts.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsYMemberPath"): string;

	/**
	 * Sets the member path of the Y data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsYMemberPath", optionValue: string): void;

	/**
	 * Gets  the member path of the label data for the callouts.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsLabelMemberPath"): string;

	/**
	 * Sets the member path of the label data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsLabelMemberPath", optionValue: string): void;

	/**
	 * Gets  the member path of the content data for the callouts.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsContentMemberPath"): string;

	/**
	 * Sets the member path of the content data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutsContentMemberPath", optionValue: string): void;

	/**
	 * Gets  function which takes an context object and returns a formatted label for the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisFormatLabel"): any;

	/**
	 * Sets function which takes an context object and returns a formatted label for the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisFormatLabel", optionValue: any): void;

	/**
	 * Gets  function which takes a context object and returns a formatted label for the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisFormatLabel"): any;

	/**
	 * Sets function which takes a context object and returns a formatted label for the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisFormatLabel", optionValue: any): void;

	/**
	 * Gets  the left margin of labels on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelLeftMargin"): number;

	/**
	 * Sets the left margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of labels on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelTopMargin"): number;

	/**
	 * Sets the top margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of labels on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelRightMargin"): number;

	/**
	 * Sets the right margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of labels on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelBottomMargin"): number;

	/**
	 * Sets the bottom margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelBottomMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of labels on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelLeftMargin"): number;

	/**
	 * Sets the left margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of labels on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelTopMargin"): number;

	/**
	 * Sets the top margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of labels on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelRightMargin"): number;

	/**
	 * Sets the right margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of labels on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelBottomMargin"): number;

	/**
	 * Sets the bottom margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelBottomMargin", optionValue: number): void;

	/**
	 * Gets  color of labels on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelTextColor"): string;

	/**
	 * Sets color of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelTextColor", optionValue: string): void;

	/**
	 * Gets  color of labels on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelTextColor"): string;

	/**
	 * Sets color of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelTextColor", optionValue: string): void;

	/**
	 * Gets  the margin around a title on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleMargin"): number;

	/**
	 * Sets the margin around a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleMargin", optionValue: number): void;

	/**
	 * Gets  the margin around a title on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleMargin"): number;

	/**
	 * Sets the margin around a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of a title on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleLeftMargin"): number;

	/**
	 * Sets the left margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of a title on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleLeftMargin"): number;

	/**
	 * Sets the left margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of a title on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleTopMargin"): number;

	/**
	 * Sets the top margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleTopMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of a title on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleTopMargin"): number;

	/**
	 * Sets the top margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of a title on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleRightMargin"): number;

	/**
	 * Sets the right margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleRightMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of a title on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleRightMargin"): number;

	/**
	 * Sets the right margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of a title on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleBottomMargin"): number;

	/**
	 * Sets the bottom margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleBottomMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of a title on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleBottomMargin"): number;

	/**
	 * Sets the bottom margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleBottomMargin", optionValue: number): void;

	/**
	 * Gets  color of title on the X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleTextColor"): string;

	/**
	 * Sets color of title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleTextColor", optionValue: string): void;

	/**
	 * Gets  color of title on the Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleTextColor"): string;

	/**
	 * Sets color of title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleTextColor", optionValue: string): void;

	/**
	 * Gets  CSS font property for labels on X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelTextStyle"): string;

	/**
	 * Sets CSS font property for labels on X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for labels on Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelTextStyle"): string;

	/**
	 * Sets CSS font property for labels on Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for title on X-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleTextStyle"): string;

	/**
	 * Sets CSS font property for title on X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for title on Y-axis
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleTextStyle"): string;

	/**
	 * Sets CSS font property for title on Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleTextStyle", optionValue: string): void;

	/**
	 * Gets  the format for labels along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabel"): any;

	/**
	 * Sets the format for labels along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabel", optionValue: any): void;

	/**
	 * Gets  the property or string from which the labels are derived.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabel"): any;

	/**
	 * Sets the property or string from which the labels are derived.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabel", optionValue: any): void;

	/**
	 * Gets  the color to apply to major gridlines along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMajorStroke"): string;

	/**
	 * Sets the color to apply to major gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMajorStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to major gridlines along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMajorStroke"): string;

	/**
	 * Sets the color to apply to major gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMajorStroke", optionValue: string): void;

	/**
	 * Gets  the thickness to apply to major gridlines along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMajorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to major gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMajorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to major gridlines along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMajorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to major gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMajorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to minor gridlines along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMinorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to minor gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMinorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to minor gridlines along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMinorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to minor gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMinorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the color to apply to stripes along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisStrip"): string;

	/**
	 * Sets the color to apply to stripes along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisStrip", optionValue: string): void;

	/**
	 * Gets  the color to apply to stripes along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisStrip"): string;

	/**
	 * Sets the color to apply to stripes along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisStrip", optionValue: string): void;

	/**
	 * Gets  the color to apply to the X-axis line.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisStroke"): string;

	/**
	 * Sets the color to apply to the X-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to the Y-axis line.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisStroke"): string;

	/**
	 * Sets the color to apply to the Y-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisStroke", optionValue: string): void;

	/**
	 * Gets  the thickness to apply to the X-axis line.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to the X-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to the Y-axis line.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to the Y-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the length of tickmarks along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTickLength"): number;

	/**
	 * Sets the length of tickmarks along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTickLength", optionValue: number): void;

	/**
	 * Gets  the length of tickmarks along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTickLength"): number;

	/**
	 * Sets the length of tickmarks along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTickLength", optionValue: number): void;

	/**
	 * Gets  the color to apply to tickmarks along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTickStroke"): string;

	/**
	 * Sets the color to apply to tickmarks along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTickStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to tickmarks along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTickStroke"): string;

	/**
	 * Sets the color to apply to tickmarks along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTickStroke", optionValue: string): void;

	/**
	 * Gets  the thickness to apply to tickmarks along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTickStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to tickmarks along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to tickmarks along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTickStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to tickmarks along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the Text to display below the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitle"): string;

	/**
	 * Sets the Text to display below the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitle", optionValue: string): void;

	/**
	 * Gets  the Text to display to the left of the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitle"): string;

	/**
	 * Sets the Text to display to the left of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitle", optionValue: string): void;

	/**
	 * Gets  the color to apply to minor gridlines along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMinorStroke"): string;

	/**
	 * Sets the color to apply to minor gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMinorStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to minor gridlines along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMinorStroke"): string;

	/**
	 * Sets the color to apply to minor gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMinorStroke", optionValue: string): void;

	/**
	 * Gets  the angle of rotation for labels along the X-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelAngle"): number;

	/**
	 * Sets the angle of rotation for labels along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelAngle", optionValue: number): void;

	/**
	 * Gets  the angle of rotation for labels along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelAngle"): number;

	/**
	 * Sets the angle of rotation for labels along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelAngle", optionValue: number): void;

	/**
	 * Gets  the distance between the X-axis and the bottom of the chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisExtent"): number;

	/**
	 * Sets the distance between the X-axis and the bottom of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisExtent", optionValue: number): void;

	/**
	 * Gets  the distance between the Y-axis and the left edge of the chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisExtent"): number;

	/**
	 * Sets the distance between the Y-axis and the left edge of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisExtent", optionValue: number): void;

	/**
	 * Gets  the angle of rotation for the X-axis title.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleAngle"): number;

	/**
	 * Sets the angle of rotation for the X-axis title.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleAngle", optionValue: number): void;

	/**
	 * Gets  the angle of rotation for the Y-axis title.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleAngle"): number;

	/**
	 * Sets the angle of rotation for the Y-axis title.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleAngle", optionValue: number): void;

	/**
	 * Gets  whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisInverted"): boolean;

	/**
	 * Sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisInverted", optionValue: boolean): void;

	/**
	 * Gets  whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisInverted"): boolean;

	/**
	 * Sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisInverted", optionValue: boolean): void;

	/**
	 * Gets  Horizontal alignment of the X-axis title.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleAlignment"): string;

	/**
	 * Sets Horizontal alignment of the X-axis title.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "xAxisTitleAlignment", optionValue: string): void;

	/**
	 * Gets  Vertical alignment of the Y-axis title.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleAlignment"): string;

	/**
	 * Sets Vertical alignment of the Y-axis title.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisTitleAlignment", optionValue: string): void;

	/**
	 * Gets  Horizontal alignment of X-axis labels.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelHorizontalAlignment"): string;

	/**
	 * Sets Horizontal alignment of X-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelHorizontalAlignment", optionValue: string): void;

	/**
	 * Gets  Horizontal alignment of Y-axis labels.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelHorizontalAlignment"): string;

	/**
	 * Sets Horizontal alignment of Y-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelHorizontalAlignment", optionValue: string): void;

	/**
	 * Gets  Vertical alignment of X-axis labels.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelVerticalAlignment"): string;

	/**
	 * Sets Vertical alignment of X-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelVerticalAlignment", optionValue: string): void;

	/**
	 * Gets  Vertical alignment of Y-axis labels.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelVerticalAlignment"): string;

	/**
	 * Sets Vertical alignment of Y-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelVerticalAlignment", optionValue: string): void;

	/**
	 * Gets  Visibility of X-axis labels.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelVisibility"): string;

	/**
	 * Sets Visibility of X-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "xAxisLabelVisibility", optionValue: string): void;

	/**
	 * Gets  Visibility of Y-axis labels.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelVisibility"): string;

	/**
	 * Sets Visibility of Y-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelVisibility", optionValue: string): void;

	/**
	 * The location of Y-axis labels, relative to the plot area.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelLocation"): string;

	/**
	 * The location of Y-axis labels, relative to the plot area.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLabelLocation", optionValue: string): void;

	/**
	 * Gets  the duration used for animating series plots when the chart is loading into view
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "transitionInDuration"): number;

	/**
	 * Sets the duration used for animating series plots when the chart is loading into view
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "transitionInDuration", optionValue: number): void;

	/**
	 * Gets  the easing function used for animating series plots when the chart is loading into view
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "transitionInEasingFunction"): any;

	/**
	 * Sets the easing function used for animating series plots when the chart is loading into view
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "transitionInEasingFunction", optionValue: any): void;

	/**
	 * Gets  the type of chart series to generate from the data.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "chartType"): string;

	/**
	 * Sets the type of chart series to generate from the data.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "chartType", optionValue: string): void;

	/**
	 * Gets  the behavior for markers in each series which are placed too close together for the current view, resulting in a collision.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "markerCollisionAvoidance"): string;

	/**
	 * Sets the behavior for markers in each series which are placed too close together for the current view, resulting in a collision.
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "markerCollisionAvoidance", optionValue: string): void;

	/**
	 * Gets  whether animation of series plots is enabled when the chart is loading into view
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isTransitionInEnabled"): boolean;

	/**
	 * Sets whether animation of series plots is enabled when the chart is loading into view
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isTransitionInEnabled", optionValue: boolean): void;

	/**
	 * Gets  the method that determines how to animate series plots when the chart is loading into view
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "transitionInMode"): string;

	/**
	 * Sets the method that determines how to animate series plots when the chart is loading into view
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "transitionInMode", optionValue: string): void;

	/**
	 * Gets  the arrival speed used for animating series plots when the chart is loading into view
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "transitionInSpeedType"): string;

	/**
	 * Sets the arrival speed used for animating series plots when the chart is loading into view
	 *
	 * @optionValue New value to be set.
	 */

	igCategoryChart(optionLiteral: 'option', optionName: "transitionInSpeedType", optionValue: string): void;

	/**
	 * Gets  the frequency of displayed labels along the X-axis.
	 * Gets  the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisInterval"): number;

	/**
	 * Sets the frequency of displayed labels along the X-axis.
	 *  sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisInterval", optionValue: number): void;

	/**
	 * Gets  the frequency of displayed minor lines along the X-axis.
	 * Gets  the set value is a factor that determines how the minor lines will be displayed.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMinorInterval"): number;

	/**
	 * Sets the frequency of displayed minor lines along the X-axis.
	 *  sets the set value is a factor that determines how the minor lines will be displayed.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisMinorInterval", optionValue: number): void;

	/**
	 * Gets  the amount of space between adjacent categories for the X-axis.
	 * The gap is silently clamped to the range [0, 1] when used.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisGap"): number;

	/**
	 * Sets the amount of space between adjacent categories for the X-axis.
	 * The gap is silently clamped to the range [0, 1] when used.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisGap", optionValue: number): void;

	/**
	 * Gets  the amount of overlap between adjacent categories for the X-axis.
	 * Gets  the overlap is silently clamped to the range [-1, 1] when used.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisOverlap"): number;

	/**
	 * Sets the amount of overlap between adjacent categories for the X-axis.
	 *  sets the overlap is silently clamped to the range [-1, 1] when used.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "xAxisOverlap", optionValue: number): void;

	/**
	 * Gets  the distance between each label and grid line along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisInterval"): number;

	/**
	 * Sets the distance between each label and grid line along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisInterval", optionValue: number): void;

	/**
	 * Gets  whether the Y-axis should use a logarithmic scale instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisIsLogarithmic"): boolean;

	/**
	 * Sets whether the Y-axis should use a logarithmic scale instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisIsLogarithmic", optionValue: boolean): void;

	/**
	 * Gets  the base value to use in the log function when mapping the position of data items along the Y-axis.
	 * This property is effective only when YAxisIsLogarithmic is true.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLogarithmBase"): number;

	/**
	 * Sets the base value to use in the log function when mapping the position of data items along the Y-axis.
	 * This property is effective only when YAxisIsLogarithmic is true.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisLogarithmBase", optionValue: number): void;

	/**
	 * Gets  the data value corresponding to the minimum value of the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMinimumValue"): number;

	/**
	 * Sets the data value corresponding to the minimum value of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMinimumValue", optionValue: number): void;

	/**
	 * Gets  the data value corresponding to the maximum value of the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMaximumValue"): number;

	/**
	 * Sets the data value corresponding to the maximum value of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMaximumValue", optionValue: number): void;

	/**
	 * Gets  the frequency of displayed minor lines along the Y-axis.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMinorInterval"): number;

	/**
	 * Sets the frequency of displayed minor lines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisMinorInterval", optionValue: number): void;

	/**
	 * Gets  the palette used for coloring negative items of Waterfall chart type.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "negativeBrushes"): any;

	/**
	 * Sets the palette used for coloring negative items of Waterfall chart type.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "negativeBrushes", optionValue: any): void;

	/**
	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "negativeOutlines"): any;

	/**
	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "negativeOutlines", optionValue: any): void;

	/**
	 * Gets  whether the large numbers on the Y-axis labels are abbreviated.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisAbbreviateLargeNumbers"): boolean;

	/**
	 * Sets whether the large numbers on the Y-axis labels are abbreviated.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "yAxisAbbreviateLargeNumbers", optionValue: boolean): void;

	/**
	 * Gets  whether the category should be highlighted when hovered
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isCategoryHighlightingEnabled"): boolean;

	/**
	 * Sets whether the category should be highlighted when hovered
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isCategoryHighlightingEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether the item should be highlighted when hovered
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isItemHighlightingEnabled"): boolean;

	/**
	 * Sets whether the item should be highlighted when hovered
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "isItemHighlightingEnabled", optionValue: boolean): void;

	/**
	 * The width of the chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "width"): number;

	/**
	 * The width of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "width", optionValue: number): void;

	/**
	 * The height of the chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "height"): number;

	/**
	 * The height of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "height", optionValue: number): void;

	/**
	 * Gets  maximum number of displayed records in chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "maxRecCount"): number;

	/**
	 * Sets maximum number of displayed records in chart.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "maxRecCount", optionValue: number): void;

	/**
	 * Gets  a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Gets  url which is used for sending JSON on request for remote data.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets url which is used for sending JSON on request for remote data.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Event raised when a property value is changed on this chart
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "propertyChanged"): PropertyChangedEvent;

	/**
	 * Event raised when a property value is changed on this chart
	 *
	 * @optionValue Define event handler function.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "propertyChanged", optionValue: PropertyChangedEvent): void;

	/**
	 * Event raised when a series is initialized and added to this chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesAdded"): SeriesAddedEvent;

	/**
	 * Event raised when a series is initialized and added to this chart.
	 *
	 * @optionValue Define event handler function.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesAdded", optionValue: SeriesAddedEvent): void;

	/**
	 * Event raised when a series is removed from this chart.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesRemoved"): SeriesRemovedEvent;

	/**
	 * Event raised when a series is removed from this chart.
	 *
	 * @optionValue Define event handler function.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesRemoved", optionValue: SeriesRemovedEvent): void;

	/**
	 * Occurs when the pointer enters a Series.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerEnter"): SeriesPointerEnterEvent;

	/**
	 * Occurs when the pointer enters a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerEnter", optionValue: SeriesPointerEnterEvent): void;

	/**
	 * Occurs when the pointer leaves a Series.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerLeave"): SeriesPointerLeaveEvent;

	/**
	 * Occurs when the pointer leaves a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerLeave", optionValue: SeriesPointerLeaveEvent): void;

	/**
	 * Occurs when the pointer moves over a Series.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerMove"): SeriesPointerMoveEvent;

	/**
	 * Occurs when the pointer moves over a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerMove", optionValue: SeriesPointerMoveEvent): void;

	/**
	 * Occurs when the pointer is pressed down over a Series.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerDown"): SeriesPointerDownEvent;

	/**
	 * Occurs when the pointer is pressed down over a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerDown", optionValue: SeriesPointerDownEvent): void;

	/**
	 * Occurs when the pointer is released over a Series.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerUp"): SeriesPointerUpEvent;

	/**
	 * Occurs when the pointer is released over a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "seriesPointerUp", optionValue: SeriesPointerUpEvent): void;

	/**
	 * Occurs when the style of a callout is updated.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutStyleUpdating"): CalloutStyleUpdatingEvent;

	/**
	 * Occurs when the style of a callout is updated.
	 *
	 * @optionValue New value to be set.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "calloutStyleUpdating", optionValue: CalloutStyleUpdatingEvent): void;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "updateTooltip"): UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "updateTooltip", optionValue: UpdateTooltipEvent): void;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "hideTooltip"): HideTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igCategoryChart(optionLiteral: 'option', optionName: "hideTooltip", optionValue: HideTooltipEvent): void;
	igCategoryChart(options: IgCategoryChart): JQuery;
	igCategoryChart(optionLiteral: 'option', optionName: string): any;
	igCategoryChart(optionLiteral: 'option', options: IgCategoryChart): JQuery;
	igCategoryChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igCategoryChart(methodName: string, ...methodParams: any[]): any;
}
interface IgDataChartCrosshairPoint {
	/**
	 * The x coordinate.
	 */
	x?: number;

	/**
	 * The y coordinate.
	 */
	y?: number;

	/**
	 * Option for IgDataChartCrosshairPoint
	 */
	[optionName: string]: any;
}

interface IgDataChartLegend {
	/**
	 * The name of the element to turn into a legend.
	 */
	element?: string;

	/**
	 * Type of the legend.
	 *
	 * Valid values:
	 * "item" Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.
	 * "legend" Specify the legend as legend. It is supported by all types of series in the igDataChart control.
	 */
	type?: string;

	/**
	 * The width of the legend.
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * The height of the legend.null will stretch vertically to fit data, no other height are defined.
	 *
	 *
	 * Valid values:
	 * "null"
	 */
	height?: string|number;

	/**
	 * Option for IgDataChartLegend
	 */
	[optionName: string]: any;
}

interface IgDataChartAxes {
	/**
	 * Type of the axis.
	 *
	 * Valid values:
	 * "numericX" Specify the axis as numeric X axis. Useful for displaying scatter, category and financial price series.
	 * "numericY" Specify the axis as numeric Y axis.Useful for displaying scatter, category and financial price series.
	 * "categoryX" Specify the axis as category X axis. Useful for displaying scatter, category and financial price series.
	 * "categoryDateTimeX" Specify the axis as category datetime X axis. Useful for displaying category and financial price series with date based data.
	 * "categoryY" Specify the axis as category Y axis. Useful for displaying scatter, category and financial price series.
	 * "categoryAngle" Specify the axis as category angle axis. Useful for displaying polar and radial categories.
	 * "numericAngle" Specify the axis as numeric angle axis. Useful for displaying polar and radial series.
	 * "numericRadius" Specify the axis as numeric radius axis. Useful for displaying polar and radial series.
	 * "time" Specify the axis as time X axis. Useful for displaying date based data with time breaks.
	 */
	type?: string;

	/**
	 * The unique identifier of the axis.
	 */
	name?: string;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 */
	dataSource?: any;

	/**
	 * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Set to true in order to have an existing axis removed from the chart, by name
	 */
	remove?: boolean;

	/**
	 * Specifies the location to display the axis labels for this axis.
	 *
	 * Valid values:
	 * "outsideTop" The labels should have an outside top position.
	 * "outsideBottom" The labels should have an outside bottom position.
	 * "outsideLeft" The labels should have an outside left position.
	 * "outsideRight" The labels should have an outside right position.
	 * "insideTop" The labels should have an inside top position.
	 * "insideBottom" The labels should have an inside bottom position.
	 * "insideLeft" The labels should have an inside left position.
	 * "insideRight" The labels should have an inside right position.
	 */
	labelLocation?: string;

	/**
	 * Specifies whether the labels are visible.
	 *
	 * Valid values:
	 * "visible" The labels should be visisble for this axis.
	 * "collapsed" The labels should not be visible for this axis.
	 */
	labelVisibility?: string;

	/**
	 * Specifies the extent of the area dedicated to the labels for this axis. If unspecified, this value is auto-calculated.
	 */
	labelExtent?: number;

	/**
	 * Specifies the angle that labels on the axis should be rotated
	 */
	labelAngle?: number;

	/**
	 * Overrides the style of the text used for the axis labels.
	 */
	labelTextStyle?: string;

	/**
	 * Overrides the color of the text used for the axis labels.
	 */
	labelTextColor?: string;

	/**
	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
	 */
	formatLabel?: any;

	/**
	 * Gets or sets the Stroke property.
	 */
	stroke?: string;

	/**
	 * Gets or sets the StrokeThickness property.
	 */
	strokeThickness?: number;

	/**
	 * Gets or sets the Strip property.
	 */
	strip?: string;

	/**
	 * Gets or sets the MajorStroke property.
	 */
	majorStroke?: string;

	/**
	 * Gets or sets the MajorStrokeThickness property.
	 */
	majorStrokeThickness?: number;

	/**
	 * Gets or sets the MinorStroke property.
	 */
	minorStroke?: string;

	/**
	 * Gets or sets the MinorStrokeThickness property.
	 */
	minorStrokeThickness?: number;

	/**
	 * Gets or sets the IsInverted property.
	 */
	isInverted?: boolean;

	/**
	 * Gets or sets the CrossingAxis property.
	 */
	crossingAxis?: string;

	/**
	 * Gets or sets the CrossingValue property.
	 */
	crossingValue?: any;

	/**
	 * Gets or sets the coercion methods to use when loading data from data sources.
	 * Should be specified before setting any member paths, if being used. Setting it later
	 * will not cause data to be reimported into the chart.
	 */
	coercionMethods?: any;

	/**
	 * Gets or sets the label mapping property to use for axis labels.
	 */
	label?: any;

	/**
	 * Gets or sets the amount of space between adjacent categories for the current axis object.
	 * The gap is silently clamped to the range [0, 1] when used.
	 */
	gap?: number;

	/**
	 * Gets or sets the amount of overlap between adjacent categories for the current axis object.
	 * The overlap is silently clamped to the range [-1, 1] when used.
	 */
	overlap?: number;

	/**
	 * Indicates the angle in degress that the chart's 0th angle should be offset.
	 */
	startAngleOffset?: number;

	/**
	 * Gets or sets the frequency of displayed labels.
	 * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
	 */
	interval?: number;

	/**
	 * Gets or sets the axis display type. Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point.
	 *
	 * Valid values:
	 * "continuous" Points occur at even intervals, even where data is not present at a given point.
	 * "discrete" Points occur when data is present, possibly at uneven intervals.
	 */
	displayType?: string;

	/**
	 * Gets or sets whether the data assigned to the date time axis should be considered pre-sorted by date/time.
	 */
	isDataPreSorted?: boolean;

	/**
	 * Gets or sets the axis MinimumValue.
	 *
	 *
	 * Valid values:
	 * "number" The minimum value can be set to be a number when the axis is of numeric type
	 * "date" The minimum value can be set to be a date object when [type](ui.igDataChart#options:axes.type) option is set to "categoryDateTimeX"
	 */
	minimumValue?: number|Date;

	/**
	 * Gets or sets the axis MaximumValue.
	 *
	 *
	 * Valid values:
	 * "number" The maximum value can be set to be a number when the axis is of numeric type
	 * "date" The maximum value can be set to be a date object when [type](ui.igDataChart#options:axes.type) option is set to "categoryDateTimeX"
	 */
	maximumValue?: number|Date;

	/**
	 * Gets or sets the DateTime mapping property for the CategoryDateTimeXAxis.
	 */
	dateTimeMemberPath?: string;

	/**
	 * Gets or sets the ReferenceValue property.
	 */
	referenceValue?: number;

	/**
	 * Gets or sets the IsLogarithmic property.
	 */
	isLogarithmic?: boolean;

	/**
	 * Gets or sets the LogarithmBase property.
	 */
	logarithmBase?: number;

	/**
	 * Defines the percentage of the maximum radius extent to use as the maximum radius. Should be
	 * a value between 0.0 and 1.0.
	 */
	radiusExtentScale?: number;

	/**
	 * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
	 * a value between 0.0 and 1.0.
	 */
	innerRadiusExtentScale?: number;

	/**
	 * The title to display for the component.
	 */
	title?: string;

	/**
	 * The css font property to use for the title.
	 */
	titleTextStyle?: string;

	/**
	 * The margin to display around the title of the axis.
	 */
	titleMargin?: number;

	/**
	 * the horizontal alignment to use for the title.
	 *
	 * Valid values:
	 * "left" left aligns the title.
	 * "center" center aligns the title.
	 * "right" right aligns the title.
	 */
	titleHorizontalAlignment?: string;

	/**
	 * the vertical alignment to use for the title.
	 *
	 * Valid values:
	 * "center" center aligns the title.
	 */
	titleVerticalAlignment?: string;

	/**
	 * the position to use for the title.
	 *
	 * Valid values:
	 * "auto" the title is positioned automatically.
	 * "left" the title is positioned on the left of the labels, if applicable.
	 * "right" the title is positioned on the right of the labels, if applicable.
	 * "top" the title is positioned on the top of the labels, if applicable.
	 * "bottom" the title is positioned on the bottom of the labels, if applicable.
	 */
	titlePosition?: string;

	/**
	 * The top margin to use for the title.
	 */
	titleTopMargin?: number;

	/**
	 * The left margin to use for the title.
	 */
	titleLeftMargin?: number;

	/**
	 * The right margin to use for the title.
	 */
	titleRightMargin?: number;

	/**
	 * The bottom margin to use for the title.
	 */
	titleBottomMargin?: number;

	/**
	 * the horizontal alignment to use for the labels. Only applicable to vertical axes.
	 *
	 * Valid values:
	 * "left" left aligns the labels.
	 * "center" center aligns the labels.
	 * "right" right aligns the labels.
	 */
	labelHorizontalAlignment?: string;

	/**
	 * the vertical alignment to use for the labels. Only applicable to horizontal axes.
	 *
	 * Valid values:
	 * "top" top aligns the labels.
	 * "center" center aligns the labels.
	 * "bottom" bottom aligns the labels.
	 */
	labelVerticalAlignment?: string;

	/**
	 * The margin to use for the labels.
	 */
	labelMargin?: number;

	/**
	 * The top margin to use for the labels.
	 */
	labelTopMargin?: number;

	/**
	 * The left margin to use for the labels.
	 */
	labelLeftMargin?: number;

	/**
	 * The right margin to use for the labels.
	 */
	labelRightMargin?: number;

	/**
	 * The bottom margin to use for the labels.
	 */
	labelBottomMargin?: number;

	/**
	 * Sets whether or not to show the first label on the axis.
	 */
	showFirstLabel?: boolean;

	/**
	 * The angle to use for the axis title.
	 */
	titleAngle?: number;

	/**
	 * The length of the tickmarks to display for this axis.
	 */
	tickLength?: number;

	/**
	 * The stroke thickness to use for the tickmarks.
	 */
	tickStrokeThickness?: number;

	/**
	 * The color to use for the tickmarks.
	 */
	tickStroke?: any;

	/**
	 * Gets or sets whether the cateogory axis should use clustering display mode even if no series are present that would force clustering mode.
	 */
	useClusteringMode?: boolean;

	/**
	 * Gets or sets whether to use more advanced heuristics when determining the initial number of labels to render, before resolving collisions, etc.
	 */
	useEnhancedIntervalManagement?: boolean;

	/**
	 * Gets or sets the mininum desired characters to be displayed for horizontal axes when using advanced label heuristics. -1 will attempt to adjust the interval to precisely fit the horizontal labels.
	 */
	enhancedIntervalMinimumCharacters?: number;

	/**
	 * Option for IgDataChartAxes
	 */
	[optionName: string]: any;
}

interface IgDataChartSeriesLegend {
	/**
	 * The name of the element to turn into a legend.
	 */
	element?: string;

	/**
	 * Type of the legend.
	 *
	 * Valid values:
	 * "item" Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.
	 * "legend" Specify the legend as legend. It is supported by all types of series in the igDataChart control.
	 */
	type?: string;

	/**
	 * The width of the legend.
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined
	 */
	width?: string|number;

	/**
	 * The height of the legend.null will stretch vertically to fit data, no other height are defined
	 *
	 *
	 * Valid values:
	 * "null"
	 */
	height?: string|number;

	/**
	 * Option for IgDataChartSeriesLegend
	 */
	[optionName: string]: any;
}

interface IgDataChartSeries {
	/**
	 * Type of the series.
	 *
	 * Valid values:
	 * "area" Specify the series as Area series.
	 * "bar" Specify the series as Bar series.
	 * "column" Specify the series as Column series.
	 * "line" Specify the series as Line series.
	 * "rangeArea" Specify the series as Range Area series.
	 * "rangeColumn" Specify the series as Range Column series.
	 * "splineArea" Specify the series as Spline Area series.
	 * "spline" Specify the series as Spline series.
	 * "stepArea" Specify the series as Step Area series.
	 * "stepLine" Specify the series as Step Line series.
	 * "waterfall" Specify the series as Waterfall series.
	 * "financial" Specify the series as Financial series.
	 * "typicalPriceIndicator" Specify the series as Typical Price Indicator series.
	 * "point" Specify the series as Point series.
	 * "polarSplineArea" Specify the series as Polar Spline Area series.
	 * "polarSpline" Specify the series as Polar Spline series.
	 * "polarArea" Specify the series as Polar Area series.
	 * "polarLine" Specify the series as Polar Line series.
	 * "polarScatter" Specify the series as Polar Scatter series.
	 * "radialColumn" Specify the series as Radial Column series.
	 * "radialLine" Specify the series as Radial Line series.
	 * "radialPie" Specify the series as Radial Pie series.
	 * "radialArea" Specify the series as Radial Area series.
	 * "scatter" Specify the series as Scatter series.
	 * "scatterLine" Specify the series as Scatter Line series.
	 * "scatterSpline" Specify the series as Scatter Spline series.
	 * "scatterArea" Specify the series as Scatter Area series.
	 * "scatterContour" Specify the series as Scatter Contour series.
	 * "scatterPolygon" Specify the series as Scatter Polygon series.
	 * "scatterPolyline" Specify the series as Scatter Polyline series.
	 * "bubble" Specify the series as Bubble series.
	 * "absoluteVolumeOscillatorIndicator" Specify the series as Absolute Volume Oscillator Indicator series.
	 * "averageTrueRangeIndicator" Specify the series as Average True Range Indicator series.
	 * "accumulationDistributionIndicator" Specify the series as Accumulation Distribution Indicator series
	 * "averageDirectionalIndexIndicator" Specify the series as Average Directional Index Indicator series.
	 * "bollingerBandWidthIndicator" Specify the series as Bollinger Band Width Indicator series.
	 * "chaikinOscillatorIndicator" Specify the series as Chaikin Oscillator Indicator series.
	 * "chaikinVolatilityIndicator" Specify the series as Chaikin Volitility Indicator series.
	 * "commodityChannelIndexIndicator" Specify the series as Commodity Channel Index Indicator series.
	 * "detrendedPriceOscillatorIndicator" Specify the series as Detrended Price Oscillator Indicator series.
	 * "easeOfMovementIndicator" Specify the series as Ease Of Movement Indicator series.
	 * "fastStochasticOscillatorIndicator" Specify the series as Fast Stochastic Oscillator Indicator series.
	 * "forceIndexIndicator" Specify the series as Force Index Indicator series.
	 * "fullStochasticOscillatorIndicator" Specify the series as Full Stochastic Oscillator Indicator series.
	 * "marketFacilitationIndexIndicator" Specify the series as Market Facilitation Index Indicator series.
	 * "massIndexIndicator" Specify the series as Mass Index Indicator series.
	 * "medianPriceIndicator" Specify the series as Median Price Indicator series.
	 * "moneyFlowIndexIndicator" Specify the series as Money Flow Index Indicator series.
	 * "movingAverageConvergenceDivergenceIndicator" Specify the series as Moving Average Convergence Divergence Indicator series.
	 * "negativeVolumeIndexIndicator" Specify the series as Negative Volume Index Indicator series.
	 * "onBalanceVolumeIndicator" Specify the series as On Balance Volume Indicator series.
	 * "percentagePriceOscillatorIndicator" Specify the series as Percentage Price Oscillator Indicator series.
	 * "percentageVolumeOscillatorIndicator" Specify the series as Percentage Volume Oscillator Indicator series.
	 * "positiveVolumeIndexIndicator" Specify the series as Positive Volume Index Indicator series.
	 * "priceVolumeTrendIndictor" Specify the series as Price Volume Trend Indictor series.
	 * "rateOfChangeAndMomentumIndicator" Specify the series as Rate Of Change And Momentum Indicator series.
	 * "relativeStrengthIndexIndicator" Specify the series as Relative Strength Index Indicator series.
	 * "slowStochasticOscillatorIndicator" Specify the series as Slow Stochastic Oscillator Indicator series.
	 * "standardDeviationIndicator" Specify the series as Standard Deviation Indicator series.
	 * "stochRSIIndicator" Specify the series as Stoch RSI Indicator series.
	 * "trixIndicator" Specify the series as Trix Indicator series.
	 * "ultimateOscillatorIndicator" Specify the series as Ultimate Oscillator Indicator series.
	 * "weightedCloseIndicator" Specify the series as Weighted Close Indicator series.
	 * "williamsPercentRIndicator" Specify the series as Williams Percent R Indicator series.
	 * "bollingerBandsOverlay" Specify the series as Bollinger Bands Overlay series.
	 * "priceChannelOverlay" Specify the series as Price Channel Overlay series.
	 * "customIndicator" Specify the series as Custom Indicator series.
	 * "stackedBar" Specify the series as Stacked Bar series.
	 * "stacked100Bar" Specify the series as Stacked 100 Bar series.
	 * "stackedArea" Specify the series as Stacked Area series.
	 * "stacked100Area" Specify the series as Stacked 100 Area series.
	 * "stackedColumn" Specify the series as Stacked Column series.
	 * "stacked100Column" Specify the series as Stacked 100 Column series.
	 * "stackedLine" Specify the series as Stacked Line series.
	 * "stacked100Line" Specify the series as Stacked 100 Line series.
	 * "stackedSpline" Specify the series as Stacked Spline series.
	 * "stacked100Spline" Specify the series as Stacked 100 Spline series.
	 * "stackedSplineArea" Specify the series as Stacked Spline Area series.
	 * "stacked100SplineArea" Specify the series as Stacked 100 Spline Area series.
	 * "crosshairLayer" Specify the series as a crosshair layer.
	 * "categoryHighlightLayer" Specify the series as a category highlight layer.
	 * "categoryItemHighlightLayer" Specify the series as a category item highlight layer.
	 * "itemToolTipLayer" Specify the series as an item tooltip layer.
	 * "categoryToolTipLayer" Specify the series as a category tooltip layer.
	 */
	type?: string;

	/**
	 * The unique identifier of the series.
	 */
	name?: string;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 */
	dataSource?: any;

	/**
	 * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Set to true in order to have an existing series removed from the chart, by name
	 */
	remove?: boolean;

	/**
	 * Whether the chart should render a tooltip.
	 */
	showTooltip?: boolean;

	/**
	 * The name of template or the template itself that chart tooltip will use to render.
	 */
	tooltipTemplate?: string;

	/**
	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
	 */
	legend?: IgDataChartSeriesLegend;

	/**
	 * Gets or sets the legend item visibility for the current series object.
	 *
	 * Valid values:
	 * "visible" The legend item should be visible.
	 * "collapsed" The legend item should not be visible.
	 */
	legendItemVisibility?: string;

	/**
	 * Gets or sets the LegendItemBadgeTemplate property.
	 * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
	 * the series object itself.
	 * The provided object should have properties called render and optionally measure.
	 * These are functions which will be called that will be called to handle the user specified custom rendering.
	 * measure will be passed an object that looks like this:
	 * {
	 * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 * width: [if value is present, specifies the available width, user may set to desired width for content],
	 * height: [if value is present, specifies the available height, user may set to desired height for content],
	 * isConstant: [user should set to true if desired with and height will always be the same for this template],
	 * data: [if present, represents the contextual data for this template]
	 * }
	 * render will be passed an object that looks like this:
	 * {
	 * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 * xPosition: [if present, specifies the x position at which to render the content],
	 * yPosition: [if present, specifies the y position at which to render the content],
	 * availableWidth: [if present, specifies the available width in which to render the content],
	 * availableHeight: [if present, specifies the available height in which to render the content],
	 * data: [if present, specifies the data that is in context for this content],
	 * isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
	 * }
	 */
	legendItemBadgeTemplate?: any;

	/**
	 * Gets or sets the LegendItemTemplate property.
	 * The legend item control content is created according to the LegendItemTemplate on-demand by
	 * the series object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	legendItemTemplate?: any;

	/**
	 * Gets or sets the DiscreteLegendItemTemplate property.
	 * The legend item control content is created according to the DiscreteLegendItemTemplate on-demand by
	 * the series object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	discreteLegendItemTemplate?: any;

	/**
	 * Gets or sets the duration of the current series's morph.
	 */
	transitionDuration?: number;

	/**
	 * Provides an easing function to use for the transitions. This should either be a well known name of an easing function (The only currently supported name is cubic), or it should be a function that takes a number and returns the output with the function applied.
	 */
	transitionEasingFunction?: any;

	/**
	 * Gets or sets the current series object's rendering resolution.
	 */
	resolution?: number;

	/**
	 * Gets or sets the Title property.
	 * The legend item control is created according to the Title on-demand by
	 * the series object itself.
	 */
	title?: string;

	/**
	 * Gets or sets the brush to use for the series.
	 */
	brush?: string;

	/**
	 * Gets or sets the brush to use for the outline of the series.
	 * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.
	 */
	outline?: string;

	/**
	 * Gets or sets the width of the current series object's line thickness.
	 */
	thickness?: number;

	/**
	 * Gets or gets the coercion methods to use when loading data from data sources.
	 * Should be specified before setting any member paths, if being used. Setting it later
	 * will not cause data to be reimported into the chart.
	 */
	coercionMethods?: any;

	/**
	 * Gets or sets the marker type for the current series object. If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
	 *
	 * Valid values:
	 * "unset" Marker hasn't been set.
	 * "none" No markerItems.
	 * "automatic" Automatic marker shape.
	 * "circle" Circle marker shape.
	 * "triangle" Flat-top triangle marker shape.
	 * "pyramid" Flat-base triangle marker shape.
	 * "square" Square marker shape.
	 * "diamond" Diamond marker shape.
	 * "pentagon" Pentagon marker shape.
	 * "hexagon" Hexagon marker shape.
	 * "tetragram" Four-pointed star marker shape.
	 * "pentagram" Five-pointed star marker shape.
	 * "hexagram" Six-pointed star marker shape.
	 */
	markerType?: string;

	/**
	 * Gets or sets the MarkerTemplate for the current series object.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	markerTemplate?: any;

	/**
	 * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
	 */
	markerBrush?: string;

	/**
	 * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
	 */
	markerOutline?: string;

	/**
	 * Gets or sets the effective x-axis for the current object.
	 */
	xAxis?: string;

	/**
	 * Gets or sets the effective y-axis for the current object.
	 */
	yAxis?: string;

	/**
	 * Gets or sets the value mapping property for the current series object.
	 */
	xMemberPath?: string;

	/**
	 * Gets or sets the value mapping property for the current series object.
	 */
	yMemberPath?: string;

	/**
	 * Gets or sets the trend type for the current scatter series.
	 *
	 * Valid values:
	 * "none" No trendline should display.
	 * "linearFit" Linear fit.
	 * "quadraticFit" Quadratic polynomial fit.
	 * "cubicFit" Cubic polynomial fit.
	 * "quarticFit" Quartic polynomial fit.
	 * "quinticFit" Quintic polynomial fit.
	 * "logarithmicFit" Logarithmic fit.
	 * "exponentialFit" Exponential fit.
	 * "powerLawFit" Powerlaw fit.
	 * "simpleAverage" Simple moving average.
	 * "exponentialAverage" Exponential moving average.
	 * "modifiedAverage" Modified moving average.
	 * "cumulativeAverage" Cumulative moving average.
	 * "weightedAverage" Weighted moving average.
	 */
	trendLineType?: string;

	/**
	 * Gets or sets the brush to use to draw the trend line.
	 */
	trendLineBrush?: string;

	/**
	 * Gets or sets the thickness of the current scatter series object's trend line.
	 */
	trendLineThickness?: number;

	/**
	 * Gets or sets the moving average period for the current scatter series object.
	 * The typical, and initial, value for trend line period is 7.
	 */
	trendLinePeriod?: number;

	/**
	 * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.
	 */
	trendLineZIndex?: number;

	/**
	 * Gets or sets the maximum number of markerItems displayed by the current series.
	 * If more than the specified number of markerItems are visible, the series will automatically
	 * choose a representative set.
	 */
	maximumMarkers?: number;

	/**
	 * Determines how unknown values will be plotted on the chart. Null and Double.NaN are two examples of unknown values.
	 *
	 * Valid values:
	 * "linearInterpolate" Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
	 * "dontPlot" Do not plot the unknown value on the chart.
	 */
	unknownValuePlotting?: string;

	/**
	 * Gets or sets the radius mapping property for the current series object.
	 */
	radiusMemberPath?: string;

	/**
	 * Gets or sets the radius size scale for the bubbles.
	 */
	radiusScale?: any;

	/**
	 * Gets or sets the Label mapping property for the current series object.
	 */
	labelMemberPath?: string;

	/**
	 * Gets or sets the fill mapping property for the current series object.
	 */
	fillMemberPath?: string;

	/**
	 * Gets or sets the brush scale for the marker brush.
	 */
	fillScale?: any;

	/**
	 * Gets the effective angle axis for the current series object.
	 */
	angleAxis?: string;

	/**
	 * Gets the effective value axis for the current series object.
	 */
	valueAxis?: string;

	/**
	 * Gets or sets whether to clip the series to the bounds.
	 * Setting this to true can effect performance.
	 */
	clipSeriesToBounds?: boolean;

	/**
	 * Gets or sets the item path that provides the values for the current series.
	 */
	valueMemberPath?: string;

	/**
	 * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
	 */
	radiusX?: number;

	/**
	 * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
	 */
	radiusY?: number;

	/**
	 * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
	 */
	angleMemberPath?: number;

	/**
	 * Gets the effective radius axis for the current series object.
	 */
	radiusAxis?: string;

	/**
	 * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian
	 * spiral based interpolation.
	 */
	useCartesianInterpolation?: boolean;

	/**
	 * Gets or sets the brush to use for negative portions of the series.
	 */
	negativeBrush?: string;

	/**
	 * Gets or sets the type of spline to be rendered.
	 *
	 * Valid values:
	 * "natural" Calculates the spline using a natural spline calculation formula.
	 * "clamped" Calculated the spline using a clamped spline calculation formula.
	 */
	splineType?: string;

	/**
	 * Gets or sets the value mapping property for the current series object.
	 */
	lowMemberPath?: string;

	/**
	 * Gets or sets the value mapping property for the current series object.
	 */
	highMemberPath?: string;

	/**
	 * Gets or sets the open mapping property for the current series object.
	 */
	openMemberPath?: string;

	/**
	 * Gets or sets the close mapping property for the current series object.
	 */
	closeMemberPath?: string;

	/**
	 * Gets or sets the volume mapping property for the current series object.
	 */
	volumeMemberPath?: string;

	/**
	 * Gets or sets the display for the current FinancialIndicator object.
	 *
	 * Valid values:
	 * "candlestick" Displays prices as a Japanese Candlestick.
	 * "OHLC" Displays prices as an OHLC bar.
	 */
	displayType?: string;

	/**
	 * Gets or sets the number of values to hide at the beginning of the indicator.
	 */
	ignoreFirst?: number;

	/**
	 * Gets or sets the moving average period for the current AverageDirectionalIndexIndicator object.
	 * The typical, and initial, value for AverageDirectionalIndexIndicator periods is 14.
	 */
	period?: number;

	/**
	 * Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
	 * The typical, and initial, value for short AVO periods is 10.
	 */
	shortPeriod?: number;

	/**
	 * Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
	 * The typical, and initial, value for long AVO periods is 30.
	 */
	longPeriod?: number;

	/**
	 * Gets or sets the MarkerCollisionAvoidance
	 *
	 * Valid values:
	 * "none" No collision avoidance is attempted.
	 * "omit" Markers that collide will be omitted.
	 * "fade" Markers that collide will be faded in opacity.
	 * "omitAndShift" Markers that collide may be shifted or omitted.
	 */
	markerCollisionAvoidance?: string;

	/**
	 * Sets or Gets whether to increase marker fidelity for extreme data shapes that have lots of Y variation over short X intervals.
	 */
	useHighMarkerFidelity?: boolean;

	/**
	 * Gets or sets whether to use use brute force mode.
	 */
	useBruteForce?: boolean;

	/**
	 * Gets or sets whether to progressively load the data into the chart.
	 */
	progressiveLoad?: boolean;

	/**
	 * Gets or sets whether the chart reacts to mouse move events.
	 */
	mouseOverEnabled?: boolean;

	/**
	 * Gets or sets whether to use squares when halting a render traversal rather than the shape of the coalesced area.
	 */
	useSquareCutoffStyle?: boolean;

	/**
	 * Gets or sets the density value that maps to the minimum heat color.
	 */
	heatMinimum?: number;

	/**
	 * Gets or sets the value that maps to the maximum heat color.
	 */
	heatMaximum?: number;

	/**
	 * Gets or sets the minimum heat color for the density scale.
	 */
	heatMinimumColor?: any;

	/**
	 * Gets or sets the maximum heat color for the density scale.
	 */
	heatMaximumColor?: any;

	/**
	 * Gets or sets the series for stacked charts. It should contain array of series objects. Each item in array should represent a series with  and it may have most options supported by top-level series object, such as xAxis, yAxis, valueMemberPath, etc.
	 */
	series?: any[];

	/**
	 * Gets or sets whether drop shadow should be enabled for this series.
	 */
	isDropShadowEnabled?: boolean;

	/**
	 * Gets or sets whether drop shadow is applied to the whole series visual or to each of the individual shapes forming the series.
	 */
	useSingleShadow?: boolean;

	/**
	 * Gets or sets the color to use for the drop shadow.
	 */
	shadowColor?: any;

	/**
	 * Gets or sets the blur amount to use for the drop shadow.
	 */
	shadowBlur?: number;

	/**
	 * Gets or sets the x offset amount to use for the drop shadow.
	 */
	shadowOffsetX?: number;

	/**
	 * Gets or sets the y offset amount to use for the drop shadow.
	 */
	shadowOffsetY?: number;

	/**
	 * Gets or sets if the series should play a transition in animation when the data source is assigned. Note: Transitions are not currently supported for stacked series.
	 */
	isTransitionInEnabled?: boolean;

	/**
	 * Gets or sets the speed to transition in the series data points.
	 *
	 * Valid values:
	 * "auto" A speed type is automatically selected.
	 * "normal" All speeds are normal, data points will arrive at the same time.
	 * "valueScaled" Data points will arrive later if their value is further from the start point.
	 * "indexScaled" Data points will arrive later if their index is further from the axis origin.
	 * "random" Data points will arrive at random times.
	 */
	transitionInSpeedType?: string;

	/**
	 * Gets or sets the method to transition in the series. Note: Transitions are not currently supported for stacked series.
	 *
	 * Valid values:
	 * "auto" Series transitions in an automatically chosen way.
	 * "fromZero" Series transitions in from the reference value of the value axis.
	 * "sweepFromLeft" Series sweeps in from the left.
	 * "sweepFromRight" Series sweeps in from the right.
	 * "sweepFromTop" Series sweeps in from the top.
	 * "sweepFromBottom" Series sweeps in from the bottom.
	 * "sweepFromCenter" Series sweeps in from the center.
	 * "accordionFromLeft" Series accordions in from the left.
	 * "accordionFromRight" Series accordions in from the right.
	 * "accordionFromTop" Series accordions in from the top.
	 * "accordionFromBottom" Series accordions in from the bottom.
	 * "expand" Series expands from the value midpoints.
	 * "sweepFromCategoryAxisMinimum" Series sweeps in from the category axis minimum.
	 * "sweepFromCategoryAxisMaximum" Series sweeps in from the category axis maximum.
	 * "sweepFromValueAxisMinimum" Series sweeps in from the value axis minimum.
	 * "sweepFromValueAxisMaximum" Series sweeps in from the value axis maximum.
	 * "accordionFromCategoryAxisMinimum" Series accordions in from the category axis minimum.
	 * "accordionFromCategoryAxisMaximum" Series accordions in from the category axis maximum.
	 * "accordionFromValueAxisMinimum" Series accordions in from the value axis minimum.
	 * "accordionFromValueAxisMaximum" Series accordions in from the value axis maximum.
	 */
	transitionInMode?: string;

	/**
	 * Gets or sets the duration of the current series's transition in morph in milliseconds.
	 */
	transitionInDuration?: number;

	/**
	 * Gets or sets the corner radius to use for the series, if applicable.
	 */
	radius?: number;

	/**
	 * Gets or sets the opacity modifier to apply to the area fill shape of the series, if applicable.
	 */
	areaFillOpacity?: number;

	/**
	 * Gets or sets whether the series should expect that its data source members need to be called as functions to get their values.
	 */
	expectFunctions?: boolean;

	/**
	 * Gets or sets whether the hover layer should use interpolation to position itself relative the closest values.
	 */
	useInterpolation?: boolean;

	/**
	 * Gets or sets whether the hover layer should skip unknown values when trying to find the closest values.
	 */
	skipUnknownValues?: boolean;

	/**
	 * Gets or sets whether the vertical crosshair portion of the layer should be visible.
	 *
	 * Valid values:
	 * "visible" the vertical crosshair portion of the layer should be visible.
	 * "collapsed" the vertical crosshair portion of the layer should not be visible.
	 */
	verticalLineVisibility?: string;

	/**
	 * Gets or sets whether the horizontal crosshair portion of the layer should be visible.
	 *
	 * Valid values:
	 * "visible" the horizontal crosshair portion of the layer should be visible.
	 * "collapsed" the horizontal crosshair portion of the layer should not be visible.
	 */
	horizontalLineVisibility?: string;

	/**
	 * Gets or sets the name of the target series for the layer, if desired. Setting the target series will scope the layer to target just that series.
	 */
	targetSeries?: string;

	/**
	 * Gets or sets the name of the target axis for the layer, if desired. Setting the target axis will scope the layer to target just that axis.
	 */
	targetAxis?: string;

	/**
	 * Gets or sets whether a custom category style is allowed. Setting this to true will case the assigningCategoryStyle event to get fired, if provided.
	 */
	isCustomCategoryStyleAllowed?: boolean;

	/**
	 * Gets or sets whether a custom category marker style is allowed. Setting this to true will case the assigningCategoryMarkerStyle event to get fired, if provided.
	 */
	isCustomCategoryMarkerStyleAllowed?: boolean;

	/**
	 * Gets or sets value that is used to determine positioning logic for data items which have been consolidated into a single visual element.
	 *
	 * Valid values:
	 * "maximum" Consolidated items will be positioned using their maximum value.
	 * "minimum" Consolidated items will be positioned using their minimum value.
	 * "median" Consolidated items will be positioned at the midpoint of the range.
	 * "relativeMinimum" Consolidated items will be positioned using the value nearest to the reference value of the corresponding axis.
	 * "relativeMaximum" Consolidated items will be positioned using the value farthest from the reference value of the corresponding axis.
	 */
	consolidatedColumnVerticalPosition?: string;

	/**
	 * Gets or sets whether highlighting should be enabled for the series, if supported.
	 */
	isHighlightingEnabled?: boolean;

	/**
	 * Gets or sets the width to use for the highlight region if highlighting items in a grid aligned series (line, spline, etc), with a banded shape.
	 */
	bandHighlightWidth?: number;

	/**
	 * Gets or sets which type of highlight shape to use when highlighting items.
	 *
	 * Valid values:
	 * "auto" use an automatic highlight type for this series.
	 * "marker" use a marker highlight type for this series.
	 * "shape" use a shape highlight type for this series.
	 */
	highlightType?: string;

	/**
	 * Gets or sets the Position to apply to the tooltip containers.
	 *
	 * Valid values:
	 * "auto" use an automatic position for the category tooltips.
	 * "outsideStart" position the category tooltip at the outside start of the value axis.
	 * "insideStart" position the category tooltip at the inside start of the value axis.
	 * "insideEnd" position the category tooltip at the inside end of the value axis.
	 * "outsideEnd" position the category tooltip at the outside end of the value axis.
	 */
	tooltipPosition?: string;

	/**
	 * Sets the position a cursor position to use instead of the current mouse cursor position for displaying the annotations in this layer.
	 * Should be an object with an x and a y property in world coordinates (ranging from 0 to 1)
	 */
	cursorPosition?: any;

	/**
	 * Sets if the presence of this layer should disable the default crosshair behavior of the chart, if present.
	 */
	isDefaultCrosshairDisabled?: boolean;

	/**
	 * Sets if the current layer should take up a brush/ordering index in the series collection to derive its color automatically.
	 */
	useIndex?: boolean;

	/**
	 * Sets if the current layer should have an entry in the legend of the chart. By default annotation layers are not present in the legend.
	 */
	useLegend?: boolean;

	/**
	 * Sets whether the order of the fragment series should be reversed in the legend. Note: Reversing the legend order is only supported on stacked series.
	 */
	reverseLegendOrder?: boolean;

	/**
	 * Gets or sets which type of hit testing the series should use.
	 *
	 * Valid values:
	 * "auto" automatically decide the appropriate hit test mode for the series.
	 * "computational" use a computational based approach to determine whether the series has been hit. This uses loose bounding boxes, in some cases, and can range in time complexity between O(1) and O(log n) to find a hit. This decreases frame render time compared to color encoded.
	 * "colorEncoded" use a color encoded off screen buffer for hit testing. This can have extremely rare false positives where the wrong series is hit (this is due to our inability to disable anti-aliasing in our color buffer), but should always be O(1) time for determining a hit series. This increases frame render time, however. Consider using this if hit testing time is degrading performance.
	 */
	hitTestMode?: string;

	/**
	 * Gets or sets the brush that specifies how the backgrounds for the callouts of the layer are painted.
	 */
	calloutBackground?: string;

	/**
	 * Gets or sets the strategy to use for avoiding collisions between the callouts in this layer. Leave unset for an automatic value.
	 *
	 * Valid values:
	 * "auto" automatically decide the collision strategy.
	 * "simulatedAnnealing" use a simulated annealing based collision strategy. This is higher quality, but takes longer, and is performed time-sliced in the background until an acceptable quality is reached.
	 * "greedy" use a greedy algorithm to avoid collisions. This is cheap and predictable, but of comparatively low quality.
	 * "greedyCenterOfMass" use a greedy algorithm with localized center of mass hints to avoid collisions. This is relatively cheap to perform, compared to the simulated annealing approach, but is of comparatively lower quality.
	 */
	calloutCollisionMode?: string;

	/**
	 * Gets or sets the brush that specifies how the leader lines for the callouts of the layer are painted.
	 */
	calloutLeaderBrush?: string;

	/**
	 * Gets or sets the brush that specifies how the outlines for the callouts of the layer are painted.
	 */
	calloutOutline?: string;

	/**
	 * Gets or sets the left padding to use withing the callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	calloutPaddingLeft?: number;

	/**
	 * Gets or sets the top padding to use withing the callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	calloutPaddingTop?: number;

	/**
	 * Gets or sets the right padding to use withing the callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	calloutPaddingRight?: number;

	/**
	 * Gets or sets the bottom padding to use withing the callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	calloutPaddingBottom?: number;

	/**
	 * Gets or sets the padding to add to the callout positioning. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	calloutPositionPadding?: number;

	/**
	 * Gets or sets the stroke thickness for the callout backing. Leave unset for an automatic value.
	 */
	calloutStrokeThickness?: number;

	/**
	 * Gets or sets the color to use for the callout text. Leave unset for an automatic value.
	 */
	calloutTextColor?: string;

	/**
	 * Gets or sets the content mapping property for the callouts.
	 */
	contentMemberPath?: string;

	/**
	 * Gets or sets whether to allow the callouts to be variable distances from the target points, for suppporting collision modes.
	 */
	isCalloutOffsettingEnabled?: boolean;

	/**
	 * Gets or sets the key mapping property for the callouts.
	 */
	keyMemberPath?: string;

	/**
	 * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.
	 */
	axisAnnotationBackground?: string;

	/**
	 * Gets or sets the color to use for the x axis annotation backing. Leave unset for an automatic value.
	 */
	xAxisAnnotationBackground?: string;

	/**
	 * Gets or sets the color to use for the y axis annotation backing. Leave unset for an automatic value.
	 */
	yAxisAnnotationBackground?: string;

	/**
	 * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.
	 */
	axisAnnotationOutline?: string;

	/**
	 * Gets or sets the color to use for the x axis annotation outline. Leave unset for an automatic value.
	 */
	xAxisAnnotationOutline?: string;

	/**
	 * Gets or sets the color to use for the y axis annotation outline. Leave unset for an automatic value.
	 */
	yAxisAnnotationOutline?: string;

	/**
	 * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.
	 */
	axisAnnotationTextColor?: string;

	/**
	 * Gets or sets the color to use for the x axis annotation text. Leave unset for an automatic value.
	 */
	xAxisAnnotationTextColor?: string;

	/**
	 * Gets or sets the color to use for the y axis annotation text. Leave unset for an automatic value.
	 */
	yAxisAnnotationTextColor?: string;

	/**
	 * Gets or sets the left padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	axisAnnotationPaddingLeft?: number;

	/**
	 * Gets or sets the left padding to use withing the x axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	xAxisAnnotationPaddingLeft?: number;

	/**
	 * Gets or sets the left padding to use withing the y axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	yAxisAnnotationPaddingLeft?: number;

	/**
	 * Gets or sets the top padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	axisAnnotationPaddingTop?: number;

	/**
	 * Gets or sets the top padding to use withing the x axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	xAxisAnnotationPaddingTop?: number;

	/**
	 * Gets or sets the top padding to use withing the y axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	yAxisAnnotationPaddingTop?: number;

	/**
	 * Gets or sets the right padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	axisAnnotationPaddingRight?: number;

	/**
	 * Gets or sets the right padding to use withing the x axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	xAxisAnnotationPaddingRight?: number;

	/**
	 * Gets or sets the right padding to use withing the y axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	yAxisAnnotationPaddingRight?: number;

	/**
	 * Gets or sets the bottom padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	axisAnnotationPaddingBottom?: number;

	/**
	 * Gets or sets the bottom padding to use withing the x axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	xAxisAnnotationPaddingBottom?: number;

	/**
	 * Gets or sets the bottom padding to use withing the y axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
	 */
	yAxisAnnotationPaddingBottom?: number;

	/**
	 * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.
	 */
	axisAnnotationStrokeThickness?: number;

	/**
	 * Gets or sets the stroke thickness for the x axis annotation backing. Leave unset for an automatic value.
	 */
	xAxisAnnotationStrokeThickness?: number;

	/**
	 * Gets or sets the stroke thickness for the y axis annotation backing. Leave unset for an automatic value.
	 */
	yAxisAnnotationStrokeThickness?: number;

	/**
	 * Gets or sets the stroke thickness for the y axis annotation backing. Leave unset for an automatic value.
	 *
	 * Valid values:
	 * "auto" a mode is selected automatically
	 * "finalVisible" displays the last value visible.
	 * "finalVisibleInterpolated" displays an interploated last value for when the series leaves view.
	 * "final" displays the last value in the series, whether visible or not.
	 */
	finalValueSelectionMode?: string;

	/**
	 * Gets or sets the color to use for the horizontal line. Leave null for an automatic value.
	 */
	horizontalLineStroke?: string;

	/**
	 * Gets or sets the color to use for the vertical line. Leave null for an automatic value.
	 */
	verticalLineStroke?: string;

	/**
	 * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
	 */
	isAxisAnnotationEnabled?: boolean;

	/**
	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the axis annotation.
	 */
	axisAnnoationFormatLabel?: any;

	/**
	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the x axis annotation.
	 */
	xAxisAnnoationFormatLabel?: any;

	/**
	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the y axis annotation.
	 */
	yAxisAnnoationFormatLabel?: any;

	/**
	 * Gets or sets the precision to use displaying values for interpolated crosshair positions.
	 */
	axisAnnotationInterpolatedValuePrecision?: number;

	/**
	 * Gets or sets the precision to use displaying values for interpolated crosshair positions.
	 */
	xAxisAnnotationInterpolatedValuePrecision?: number;

	/**
	 * Gets or sets the precision to use displaying values for interpolated crosshair positions.
	 */
	yAxisAnnotationInterpolatedValuePrecision?: number;

	/**
	 * Sets or gets a function which lets you modify or provide the content for an automatically created callout.
	 */
	calloutContentUpdating?: any;

	/**
	 * Sets or gets a function which lets you modify or provide the associated series for a data source provided callout.
	 */
	calloutSeriesSelecting?: any;

	/**
	 * Sets or gets a function which lets you modify or provide the label for an automatically created callout.
	 */
	calloutLabelUpdating?: any;

	/**
	 * Option for IgDataChartSeries
	 */
	[optionName: string]: any;
}

interface TooltipShowingEvent {
	(event: Event, ui: TooltipShowingEventUIParam): void;
}

interface TooltipShowingEventUIParam {
	/**
	 * Used to get reference to tooltip DOM element.
	 */
	element?: any;

	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;
}

interface TooltipShownEvent {
	(event: Event, ui: TooltipShownEventUIParam): void;
}

interface TooltipShownEventUIParam {
	/**
	 * Used to get reference to tooltip DOM element.
	 */
	element?: any;

	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;
}

interface TooltipHidingEvent {
	(event: Event, ui: TooltipHidingEventUIParam): void;
}

interface TooltipHidingEventUIParam {
	/**
	 * Used to get reference to tooltip DOM element.
	 */
	element?: any;

	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;
}

interface TooltipHiddenEvent {
	(event: Event, ui: TooltipHiddenEventUIParam): void;
}

interface TooltipHiddenEventUIParam {
	/**
	 * Used to get reference to tooltip DOM element.
	 */
	element?: any;

	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;
}

interface BrowserNotSupportedEvent {
	(event: Event, ui: BrowserNotSupportedEventUIParam): void;
}

interface BrowserNotSupportedEventUIParam {}

interface SeriesCursorMouseMoveEvent {
	(event: Event, ui: SeriesCursorMouseMoveEventUIParam): void;
}

interface SeriesCursorMouseMoveEventUIParam {
	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get mouse X position.
	 */
	positionX?: any;

	/**
	 * Used to get mouse Y position.
	 */
	positionY?: any;
}

interface SeriesMouseLeftButtonDownEvent {
	(event: Event, ui: SeriesMouseLeftButtonDownEventUIParam): void;
}

interface SeriesMouseLeftButtonDownEventUIParam {
	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get mouse X position.
	 */
	positionX?: any;

	/**
	 * Used to get mouse Y position.
	 */
	positionY?: any;
}

interface SeriesMouseLeftButtonUpEvent {
	(event: Event, ui: SeriesMouseLeftButtonUpEventUIParam): void;
}

interface SeriesMouseLeftButtonUpEventUIParam {
	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get mouse X position.
	 */
	positionX?: any;

	/**
	 * Used to get mouse Y position.
	 */
	positionY?: any;
}

interface SeriesMouseMoveEvent {
	(event: Event, ui: SeriesMouseMoveEventUIParam): void;
}

interface SeriesMouseMoveEventUIParam {
	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get mouse X position.
	 */
	positionX?: any;

	/**
	 * Used to get mouse Y position.
	 */
	positionY?: any;
}

interface SeriesMouseEnterEvent {
	(event: Event, ui: SeriesMouseEnterEventUIParam): void;
}

interface SeriesMouseEnterEventUIParam {
	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get mouse X position.
	 */
	positionX?: any;

	/**
	 * Used to get mouse Y position.
	 */
	positionY?: any;
}

interface SeriesMouseLeaveEvent {
	(event: Event, ui: SeriesMouseLeaveEventUIParam): void;
}

interface SeriesMouseLeaveEventUIParam {
	/**
	 * Used to get reference to current series item object.
	 */
	item?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get mouse X position.
	 */
	positionX?: any;

	/**
	 * Used to get mouse Y position.
	 */
	positionY?: any;
}

interface WindowRectChangedEvent {
	(event: Event, ui: WindowRectChangedEventUIParam): void;
}

interface WindowRectChangedEventUIParam {
	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get new height value.
	 */
	newHeight?: any;

	/**
	 * Used to get new left value.
	 */
	newLeft?: any;

	/**
	 * Used to get new top value.
	 */
	newTop?: any;

	/**
	 * Used to get new top value.
	 */
	newWidth?: any;

	/**
	 * Used to get old height value.
	 */
	oldHeight?: any;

	/**
	 * Used to get old left value.
	 */
	oldLeft?: any;

	/**
	 * Used to get old top value.
	 */
	oldTop?: any;

	/**
	 * Used to get old top value.
	 */
	oldWidth?: any;
}

interface GridAreaRectChangedEvent {
	(event: Event, ui: GridAreaRectChangedEventUIParam): void;
}

interface GridAreaRectChangedEventUIParam {
	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get new height value.
	 */
	newHeight?: any;

	/**
	 * Used to get new left value.
	 */
	newLeft?: any;

	/**
	 * Used to get new top value.
	 */
	newTop?: any;

	/**
	 * Used to get new top value.
	 */
	newWidth?: any;

	/**
	 * Used to get old height value.
	 */
	oldHeight?: any;

	/**
	 * Used to get old left value.
	 */
	oldLeft?: any;

	/**
	 * Used to get old top value.
	 */
	oldTop?: any;

	/**
	 * Used to get old top value.
	 */
	oldWidth?: any;
}

interface RefreshCompletedEvent {
	(event: Event, ui: RefreshCompletedEventUIParam): void;
}

interface RefreshCompletedEventUIParam {
	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;
}

interface AxisRangeChangedEvent {
	(event: Event, ui: AxisRangeChangedEventUIParam): void;
}

interface AxisRangeChangedEventUIParam {
	/**
	 * Used to get reference to current chart axis object.
	 */
	axis?: any;

	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get new maximum value.
	 */
	newMaximumValue?: any;

	/**
	 * Used to get new minimum value.
	 */
	newMinimumValue?: any;

	/**
	 * Used to get old maximum value.
	 */
	oldMaximumValue?: any;

	/**
	 * Used to get old minimum value.
	 */
	oldMinimumValue?: any;
}

interface TypicalBasedOnEvent {
	(event: Event, ui: TypicalBasedOnEventUIParam): void;
}

interface TypicalBasedOnEventUIParam {
	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get the number of positions that should be calculated from the start.
	 */
	count?: any;

	/**
	 * Used to get the beginning position that should be calculated from.
	 */
	position?: any;

	/**
	 * Used to get the supporting calculations to use in the calculation.
	 */
	supportingCalculations?: any;

	/**
	 * Used to get the data to use for the calculation.
	 */
	dataSource?: any;

	/**
	 * Used to specify which columns changing will invalidate the series and cause it to be recalculated.
	 */
	basedOn?: any;
}

interface ProgressiveLoadStatusChangedEvent {
	(event: Event, ui: ProgressiveLoadStatusChangedEventUIParam): void;
}

interface ProgressiveLoadStatusChangedEventUIParam {
	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get current status.
	 */
	currentStatus?: any;
}

interface AssigningCategoryStyleEvent {
	(event: Event, ui: AssigningCategoryStyleEventUIParam): void;
}

interface AssigningCategoryStyleEventUIParam {
	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get the start index for the current items.
	 */
	startIndex?: any;

	/**
	 * Used to get the end index for the current items.
	 */
	endIndex?: any;

	/**
	 * Used to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
	 */
	hasDateRange?: any;
	startDate?: any;
	endDate?: any;

	/**
	 * Used to get all the items associated with the event (only if necessary).
	 */
	getItems?: any;

	/**
	 * Used to get or set the fill to use for the current item.
	 */
	fill?: any;

	/**
	 * Used to get or set the stroke to use for the current item.
	 */
	stroke?: any;

	/**
	 * Used to get or set the opacity to use for the current item.
	 */
	opacity?: any;

	/**
	 * Used to set if the default highlighting behavior should not run, given that you are handling it in this event.
	 */
	highlightingHandled?: any;

	/**
	 * Used to get the maximum highlighted progress across all series.
	 */
	maxAllSeriesHighlightingProgress?: any;

	/**
	 * Used to get the sum of highlighting progtess across all series.
	 */
	sumAllSeriesHighlightingProgress?: any;
}

interface AssigningCategoryMarkerStyleEvent {
	(event: Event, ui: AssigningCategoryMarkerStyleEventUIParam): void;
}

interface AssigningCategoryMarkerStyleEventUIParam {
	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get the start index for the current items.
	 */
	startIndex?: any;

	/**
	 * Used to get the end index for the current items.
	 */
	endIndex?: any;

	/**
	 * Used to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
	 */
	hasDateRange?: any;
	startDate?: any;
	endDate?: any;

	/**
	 * Used to get all the items associated with the event (only if necessary).
	 */
	getItems?: any;

	/**
	 * Used to get or set the fill to use for the current item.
	 */
	fill?: any;

	/**
	 * Used to get or set the stroke to use for the current item.
	 */
	stroke?: any;

	/**
	 * Used to get or set the opacity to use for the current item.
	 */
	opacity?: any;

	/**
	 * Used to set if the default highlighting behavior should not run, given that you are handling it in this event.
	 */
	highlightingHandled?: any;

	/**
	 * Used to get the maximum highlighted progress across all series.
	 */
	maxAllSeriesHighlightingProgress?: any;

	/**
	 * Used to get the sum of highlighting progtess across all series.
	 */
	sumAllSeriesHighlightingProgress?: any;
}

interface IgDataChart {
	/**
	 * Gets or sets whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
	 */
	isPagePanningAllowed?: boolean;

	/**
	 * The channel name to use to sync this chart with other charts.
	 */
	syncChannel?: string;

	/**
	 * Whether the chart should be synchronized vertically
	 */
	synchronizeVertically?: boolean;

	/**
	 * Whether the chart should be synchronized horizontally
	 */
	synchronizeHorizontally?: boolean;

	/**
	 * Gets or sets the cross hair point (in world coordinates)
	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
	 * case the relevant crosshair line is hidden.
	 */
	crosshairPoint?: IgDataChartCrosshairPoint;

	/**
	 * A rectangle representing the portion of the chart currently in view.
	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	windowRect?: any;

	/**
	 * Gets or sets the current Chart's horizontal zoomability.  This option is deprecated - please use `isHorizontalZoomEnabled` instead.
	 */
	horizontalZoomable?: boolean;

	/**
	 * Gets or sets the current Chart's vertical zoomability.  This option is deprecated - please use `isVerticalZoomEnabled` instead.
	 */
	verticalZoomable?: boolean;

	/**
	 * Gets or sets the current Chart's horizontal zoomability.
	 */
	isHorizontalZoomEnabled?: boolean;

	/**
	 * Gets or sets the current Chart's vertical zoomability.
	 */
	isVerticalZoomEnabled?: boolean;

	/**
	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
	 *
	 *
	 * Valid values:
	 * "deferred" Defer the view update until after the user action is complete.
	 * "immediate" Update the view immediately while the user action is happening.
	 */
	windowResponse?: string;

	/**
	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
	 * Decrease this value if you want to allow for further zooming into the viewer.
	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
	 */
	windowRectMinWidth?: number;

	/**
	 * The visibility of the OverviewPlusDetailPane.
	 *
	 * Valid values:
	 * "visible" The overview pane should be visible.
	 * "collapsed" The overview pane should not be visible.
	 */
	overviewPlusDetailPaneVisibility?: string;

	/**
	 * Gets or sets the current Chart's crosshair visibility override.  Note: setting this property does not affect the mobile browser version of the chart.
	 *
	 * Valid values:
	 * "visible" Crosshair should be visible.
	 * "collapsed" Crosshair should not be visible.
	 */
	crosshairVisibility?: string;

	/**
	 * Gets or sets the brush used as the background for the current Chart object's plot area.
	 */
	plotAreaBackground?: string;

	/**
	 * Gets or sets the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
	 *
	 * Valid values:
	 * "none" User gesture will not change the state of the chart.
	 * "dragZoom" User gesture will start a drag rectangle to zoom the chart.
	 * "dragPan" User gesture will start a pan action to move the chart's window.
	 */
	defaultInteraction?: string;

	/**
	 * Gets or sets the current Chart's DragModifier property.
	 *
	 * Valid values:
	 * "none" No modifier key is set.
	 * "alt" The modifier is set to alt key.
	 * "control" The modifier is set to control key.
	 * "shift" The modifier is set to shift key.
	 */
	dragModifier?: string;

	/**
	 * Gets or sets the current Chart's PanModifier property.
	 *
	 * Valid values:
	 * "none" No modifier key is set.
	 * "alt" The modifier is set to alt key.
	 * "control" The modifier is set to control key.
	 * "shift" The modifier is set to shift key.
	 */
	panModifier?: string;

	/**
	 * Gets or sets the preview rectangle.
	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
	 * strokePath is hidden.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	previewRect?: any;

	/**
	 * A number between 0 and 1 determining the position of the horizontal scroll.
	 * This property is effectively a shortcut to the X position of the WindowRect property.
	 */
	windowPositionHorizontal?: number;

	/**
	 * A number between 0 and 1 determining the position of the vertical scroll.
	 * This property is effectively a shortcut to the Y position of the WindowRect property.
	 */
	windowPositionVertical?: number;

	/**
	 * A number between 0 and 1 determining the scale of the horizontal zoom.
	 * This property is effectively a shortcut to the Width of the WindowRect property.
	 */
	windowScaleHorizontal?: number;

	/**
	 * A number between 0 and 1 determining the scale of the vertical zoom.
	 * This property is effectively a shortcut to the Height of the WindowRect property.
	 */
	windowScaleVertical?: number;

	/**
	 * Gets or sets the template to use for circle markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of circle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	circleMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for triangle markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of triangle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	triangleMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for pyramid markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of pyramid.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	pyramidMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for square markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of square.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	squareMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for diamond markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of diamond.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	diamondMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for pentagon markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of pentagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	pentagonMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for hexagon markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of hexagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	hexagonMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for tetragram markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of tetragram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	tetragramMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for pentragram markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of pentagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	pentagramMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for hexagram markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of hexagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	hexagramMarkerTemplate?: any;

	/**
	 * Sets or gets the top margin to use around the chart content in the canvas.
	 */
	topMargin?: number;

	/**
	 * Sets or gets the left margin to use around the chart content in the canvas.
	 */
	leftMargin?: number;

	/**
	 * Sets or gets the right margin to use around the chart content in the canvas.
	 */
	rightMargin?: number;

	/**
	 * Sets or gets the bottom margin to use around the chart content in the canvas.
	 */
	bottomMargin?: number;

	/**
	 * Sets or gets the automatic width to add when automatically adding margins to the chart.
	 */
	autoMarginWidth?: number;

	/**
	 * Sets or gets the automatic height to add when automatically adding margins to the chart.
	 */
	autoMarginHeight?: number;

	/**
	 * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
	 */
	isSquare?: boolean;

	/**
	 * Gets or sets the GridMode property.
	 *
	 * Valid values:
	 * "none" No chart grid.
	 * "beforeSeries" Chart grid should be rendered before or in front of the data series.
	 * "behindSeries" Chart grid should be rendered behind or in back of the data series.
	 */
	gridMode?: string;

	/**
	 * Gets or sets the Brushes property.
	 * The brushes property defines the palette from which automatically assigned series brushes are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	brushes?: any;

	/**
	 * Gets or sets the MarkerBrushes property.
	 * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	markerBrushes?: any;

	/**
	 * Gets or sets the Outlines property.
	 * The outlines property defines the palette from which automatically assigned series outlines are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	outlines?: any;

	/**
	 * Gets or sets the MarkerOutlines property.
	 * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	markerOutlines?: any;

	/**
	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
	 */
	size?: any;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 */
	dataSource?: any;

	/**
	 * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Set to true in order to disable any interactions with the plot surface.
	 */
	isSurfaceInteractionDisabled?: boolean;

	/**
	 * Set to true in order to override the default behavior in which series do not animate if an axis range changes
	 */
	animateSeriesWhenAxisRangeChanges?: boolean;

	/**
	 * The title to display for the component.
	 */
	title?: string;

	/**
	 * The subtitle to display for the component.
	 */
	subtitle?: string;

	/**
	 * The css font property to use for the title.
	 */
	titleTextStyle?: string;

	/**
	 * The top margin to use for the title.
	 */
	titleTopMargin?: number;

	/**
	 * The left margin to use for the title.
	 */
	titleLeftMargin?: number;

	/**
	 * The right margin to use for the title.
	 */
	titleRightMargin?: number;

	/**
	 * The bottom margin to use for the title.
	 */
	titleBottomMargin?: number;

	/**
	 * The css font property to use for the title.
	 */
	subtitleTextStyle?: string;

	/**
	 * The top margin to use for the subtitle.
	 */
	subtitleTopMargin?: number;

	/**
	 * The left margin to use for the subtitle.
	 */
	subtitleLeftMargin?: number;

	/**
	 * The right margin to use for the subtitle.
	 */
	subtitleRightMargin?: number;

	/**
	 * The bottom margin to use for the subtitle.
	 */
	subtitleBottomMargin?: number;

	/**
	 * The color to use for the title.
	 */
	titleTextColor?: any;

	/**
	 * The color to use for the subtitle.
	 */
	subtitleTextColor?: any;

	/**
	 * the horizontal alignment to use for the title.
	 *
	 * Valid values:
	 * "left" left aligns the title.
	 * "center" center aligns the title.
	 * "right" right aligns the title.
	 */
	titleHorizontalAlignment?: string;

	/**
	 * the horizontal alignment to use for the subtitle.
	 *
	 * Valid values:
	 * "left" left aligns the subtitle.
	 * "center" center aligns the subtitle.
	 * "right" right aligns the subtitle.
	 */
	subtitleHorizontalAlignment?: string;

	/**
	 * The length, in milliseconds of the highlighting transition.
	 */
	highlightingTransitionDuration?: number;

	/**
	 * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
	 */
	useTiledZooming?: boolean;

	/**
	 * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
	 */
	preferHigherResolutionTiles?: boolean;

	/**
	 * Gets or sets the scaling value used by the main canvas rendering context to apply a scale transform to it.
	 */
	pixelScalingRatio?: number;

	/**
	 * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
	 */
	zoomTileCacheSize?: number;

	/**
	 * Gets or sets which type of hit testing the series should use.
	 *
	 * Valid values:
	 * "auto" automatically decide the appropriate hit test mode for the series.
	 * "computational" use a computational based approach to determine which series has been hit. This uses loose bounding boxes, in some cases, and can range in time complexity between O(1) and O(log n) to find a hit. This decreases frame render time compared to color encoded.
	 * "colorEncoded" use a color encoded off screen buffer for hit testing. This can have extremely rare false positives where the wrong series is hit (this is due to our inability to disable anti-aliasing in our color buffer), but should always be O(1) time for determining a hit series. This increases frame render time, however. Consider using this if hit testing time is degrading performance.
	 * "mixed" let each series decide which hit testing mode to use individually based on their own hit test mode.
	 * "mixedFavoringComputational" let each series decide which hit testing mode to use individually based on their own hit test mode, but evaluate all computational hits before evaluating any color encoding hits.
	 */
	contentHitTestMode?: string;

	/**
	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
	 */
	legend?: IgDataChartLegend;

	/**
	 * An array of axis objects
	 */
	axes?: IgDataChartAxes[];

	/**
	 * An array of series objects
	 */
	series?: IgDataChartSeries[];

	/**
	 * The swatch used to style this widget
	 */
	theme?: string;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipShowing?: TooltipShowingEvent;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipShown?: TooltipShownEvent;

	/**
	 * Event fired when the mouse has left a series and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipHiding?: TooltipHidingEvent;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipHidden?: TooltipHiddenEvent;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 */
	browserNotSupported?: BrowserNotSupportedEvent;

	/**
	 * Occurs when the cursors are moved over a series in this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesCursorMouseMove?: SeriesCursorMouseMoveEvent;

	/**
	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseLeftButtonDown?: SeriesMouseLeftButtonDownEvent;

	/**
	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseLeftButtonUp?: SeriesMouseLeftButtonUpEvent;

	/**
	 * Occurs when the left mouse pointer moves while over an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseMove?: SeriesMouseMoveEvent;

	/**
	 * Occurs when the left mouse pointer enters an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseEnter?: SeriesMouseEnterEvent;

	/**
	 * Occurs when the left mouse pointer leaves an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseLeave?: SeriesMouseLeaveEvent;

	/**
	 * Occurs just after the current Chart's window rectangle is changed.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 */
	windowRectChanged?: WindowRectChangedEvent;

	/**
	 * Occurs just after the current Chart's grid area rectangle is changed.
	 * The grid area may change as the result of the Chart being resized, or
	 * of an axis being added or changing size, possibly in another Chart.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 */
	gridAreaRectChanged?: GridAreaRectChangedEvent;

	/**
	 * Raised when the chart's processing for an update has completed.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 */
	refreshCompleted?: RefreshCompletedEvent;

	/**
	 * Event fired when the range of and axis on the chart changes.
	 * Function takes arguments evt and ui.
	 * Use ui.axis to get reference to current chart axis object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.newMaximumValue to get new maximum value.
	 * Use ui.newMinimumValue to get new minimum value.
	 * Use ui.oldMaximumValue to get old maximum value.
	 * Use ui.oldMinimumValue to get old minimum value.
	 */
	axisRangeChanged?: AxisRangeChangedEvent;

	/**
	 * Handle this event in order to specify which columns the Typical price calculation is based on.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.count to get the number of positions that should be calculated from the start.
	 * Use ui.position to get the beginning position that should be calculated from.
	 * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
	 * Use ui.dataSource to get the data to use for the calculation.
	 * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
	 */
	typicalBasedOn?: TypicalBasedOnEvent;

	/**
	 * Event fired when the progressive loading state of the series has changed.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.currentStatus to get current status.
	 */
	progressiveLoadStatusChanged?: ProgressiveLoadStatusChangedEvent;

	/**
	 * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.startIndex to get the start index for the current items.
	 * Use ui.endIndex to get the end index for the current items.
	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
	 * Use ui.startDate if ui.hasDateRange is true.
	 * Use ui.endDate if ui.hasDateRange is true.
	 * Use ui.getItems to get all the items associated with the event (only if necessary).
	 * Use ui.fill to get or set the fill to use for the current item.
	 * Use ui.stroke to get or set the stroke to use for the current item.
	 * Use ui.opacity to get or set the opacity to use for the current item.
	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
	 */
	assigningCategoryStyle?: AssigningCategoryStyleEvent;

	/**
	 * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.startIndex to get the start index for the current items.
	 * Use ui.endIndex to get the end index for the current items.
	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
	 * Use ui.startDate if ui.hasDateRange is true.
	 * Use ui.endDate if ui.hasDateRange is true.
	 * Use ui.getItems to get all the items associated with the event (only if necessary).
	 * Use ui.fill to get or set the fill to use for the current item.
	 * Use ui.stroke to get or set the stroke to use for the current item.
	 * Use ui.opacity to get or set the opacity to use for the current item.
	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
	 */
	assigningCategoryMarkerStyle?: AssigningCategoryMarkerStyleEvent;

	/**
	 * Option for igDataChart
	 */
	[optionName: string]: any;
}
interface IgDataChartMethods {
	option(): void;

	/**
	 * Returns the element holding the chart.
	 */
	widget(): void;

	/**
	 * Returns the ID of parent element holding the chart.
	 */
	id(): string;

	/**
	 * Exports the chart to a PNG image.
	 *
	 * @param width The width of the image.
	 * @param height The height of the image.
	 */
	exportImage(width?: Object, height?: Object): Object;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;

	/**
	 * Notify the chart that styles it draws colors from may have been updated.
	 */
	styleUpdated(): Object;

	/**
	 * Resets the zoom level of the chart to default.
	 */
	resetZoom(): Object;

	/**
	 * Adds a new item to the data source and notifies the chart.
	 *
	 * @param item The item that we want to add to the data source.
	 * @param targetName The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
	 */
	addItem(item: Object, targetName: string): void;

	/**
	 * Inserts a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that we want to insert in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 * @param targetName The name of the series or axis bound to the data source.
	 */
	insertItem(item: Object, index: number, targetName: string): void;

	/**
	 * Deletes an item from the data source and notifies the chart.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 * @param targetName The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
	 */
	removeItem(index: number, targetName: string): void;

	/**
	 * Updates an item in the data source and notifies the chart.
	 *
	 * @param index The index of the item in the data source that we want to change.
	 * @param item The new item object that will be set in the data source.
	 * @param targetName The name of the series or axis bound to the data source.
	 */
	setItem(index: number, item: Object, targetName: string): void;

	/**
	 * Notifies the chart that an item has been set in an associated data source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source that has been changed.
	 * @param newItem the new item that has been set in the collection.
	 * @param oldItem the old item that has been overwritten in the collection.
	 */
	notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;

	/**
	 * Notifies the chart that the items have been cleared from an associated data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 */
	notifyClearItems(dataSource: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source where the new item has been inserted.
	 * @param newItem the new item that has been set in the collection.
	 */
	notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source from where the old item has been removed.
	 * @param oldItem the old item that has been removed from the collection.
	 */
	notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;

	/**
	 * Notifies the target axis or series that it should scroll the requested data item into view.
	 *
	 * @param targetName The name of the axis or series notify.
	 * @param item The data item to bring into view, if possible.
	 */
	scrollIntoView(targetName: string, item: Object): Object;

	/**
	 * Notifies the target axis that it should scale the requested value into chart space from axis space.
	 * For example you can use this method if you want to find where value 50 of the x axis stands scaled to chart's width.
	 *
	 * @param targetName The name of the axis to notify.
	 * @param unscaledValue The value in axis space to translate into chart space.
	 */
	scaleValue(targetName: string, unscaledValue: number): number;

	/**
	 * Notifies the target axis that it should unscale the requested value into axis space from chart space.
	 * For example you can use this method if you want to find what is the value of x axis unscaled from 0 width of the chart.
	 *
	 * @param targetName The name of the axis to notify.
	 * @param scaledValue The value in chart space to translate into axis space.
	 */
	unscaleValue(targetName: string, scaledValue: number): number;

	/**
	 * For the target axis, if using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.
	 *
	 * @param targetName The name of the axis to notify.
	 */
	resetCachedEnhancedInterval(targetName: string): Object;

	/**
	 * Notifies the target series that something that affects its visual properties has changed and the visual output needs a repaint.
	 *
	 * @param targetName The name of the series to notify.
	 */
	notifyVisualPropertiesChanged(targetName: string): Object;

	/**
	 * Forces any pending deferred work to render on the chart before continuing
	 */
	flush(): void;

	/**
	 * Exports visual data from the chart to aid in unit testing
	 */
	exportVisualData(): void;

	/**
	 * Gets the actual minimum value of the target numeric or date time axis
	 *
	 * @param targetName The name of the axis from which to get the minimum value.
	 */
	getActualMinimumValue(targetName: string): void;

	/**
	 * Gets the actual maximum value of the target numeric or date time axis
	 *
	 * @param targetName The name of the axis from which to get the maximum value.
	 */
	getActualMaximumValue(targetName: string): void;

	/**
	 * Gets the actual interval of the target numeric or date time axis
	 *
	 * @param targetName The name of the axis from which to get the interval.
	 */
	getActualInterval(targetName: string): void;

	/**
	 * Creates a print preview page with the chart, hiding all other elements on the page.
	 */
	print(): void;

	/**
	 * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
	 *
	 * @param targetName The name of the series to render.
	 * @param animate Whether the change should be animated, if possible.
	 */
	renderSeries(targetName: string, animate: boolean): void;

	/**
	 * Gets the item item index associated with the specified world position.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 */
	getItemIndex(targetName: string, worldPoint: Object): number;

	/**
	 * Gets the item that is the best match for the specified world coordinates.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 */
	getItem(targetName: string, worldPoint: Object): Object;

	/**
	 * For a category plotted series, gets the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
	 *
	 * @param targetName The name of the series to target.
	 */
	getItemSpan(targetName: string): number;

	/**
	 * If possible, will return the best available main value of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesValue(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;

	/**
	 * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 */
	getSeriesValueBoundingBox(targetName: string, worldPoint: Object): Object;

	/**
	 * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for the world position provided.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 */
	getSeriesValueFineGrainedBoundingBoxes(targetName: string, worldPoint: Object): Object;

	/**
	 * If possible, will return the best available main value position of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesValuePosition(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;

	/**
	 * If possible, will return the best available main value position of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesValuePositionFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;

	/**
	 * If possible, will return the best available main value of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesValueFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;

	/**
	 * If possible, will return the best available value bounding box within the series that has the best value match for the given series pixel coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
	 */
	getSeriesValueBoundingBoxFromSeriesPixel(targetName: string, seriesPoint: Object): Object;

	/**
	 * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for series pixel position provided.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
	 */
	getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel(targetName: string, worldPoint: Object): Object;

	/**
	 * If possible, will return the best available high value of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesHighValue(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;

	/**
	 * If possible, will return the best available high value position of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesHighValuePosition(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;

	/**
	 * If possible, will return the best available high value position of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesHighValuePositionFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;

	/**
	 * If possible, will return the best available high value of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesHighValueFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;

	/**
	 * If possible, will return the best available low value of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesLowValue(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;

	/**
	 * If possible, will return the best available low value position of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesLowValuePosition(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;

	/**
	 * If possible, will return the best available low value position of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesLowValuePositionFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;

	/**
	 * If possible, will return the best available low value of the series for a given world coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
	 * @param useInterpolation If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
	 * @param skipUnknowns If true, unknown values should be skipped.
	 */
	getSeriesLowValueFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;

	/**
	 * Gets the item item index associated with the specified series pixel coordinate.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
	 */
	getItemIndexFromSeriesPixel(targetName: string, seriesPoint: Object): number;

	/**
	 * Gets the item that is the best match for the specified world coordinates.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
	 */
	getItemFromSeriesPixel(targetName: string, seriesPoint: Object): Object;

	/**
	 * Gets the category offset for a series, if applicable.
	 *
	 * @param targetName The name of the series to target.
	 */
	getSeriesOffsetValue(targetName: string): number;

	/**
	 * Gets the category width for a series, if applicable.
	 *
	 * @param targetName The name of the series to target.
	 */
	getSeriesCategoryWidth(targetName: string): number;

	/**
	 * Replays the transition in animation for a series, if applicable.
	 *
	 * @param targetName The name of the series to target.
	 */
	replayTransitionIn(targetName: string): Object;

	/**
	 * Simulates a hover interaction over a given point in the viewport of a series.
	 *
	 * @param targetName The name of the series to target.
	 * @param seriesPoint The point at which to hover. Should have an x property with type number and a y property with type number.
	 */
	simulateHover(targetName: string, seriesPoint: Object): Object;

	/**
	 * Moves the cursor point of the target annotation layer to the desired world coordinates.
	 *
	 * @param targetName The name of the series to target.
	 * @param worldPoint The point to which to move the cursor. Should have an x property with type number and a y property with type number.
	 */
	moveCursorPoint(targetName: string, worldPoint: Object): Object;

	/**
	 * Manually starts a tiled zoom if one isn't already running.
	 */
	startTiledZoomingIfNecessary(): void;

	/**
	 * Manually ends a tiled zoom if one is running.
	 */
	endTiledZoomingIfRunning(): void;

	/**
	 * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
	 */
	clearTileZoomCache(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igDataChart"): IgDataChartMethods;
}

interface IgPieChartLegend {
	/**
	 * The name of the element to turn into a legend.
	 */
	element?: string;

	/**
	 * Type of the legend.
	 *
	 * Valid values:
	 * "item" Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.
	 * "legend" Specify the legend as legend. It is supported by all types of series in the igDataChart control.
	 */
	type?: string;

	/**
	 * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: number;

	/**
	 * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: number;

	/**
	 * Option for IgPieChartLegend
	 */
	[optionName: string]: any;
}

interface SliceClickEvent {
	(event: Event, ui: SliceClickEventUIParam): void;
}

interface SliceClickEventUIParam {
	/**
	 * Used to get reference to chart object.
	 */
	chart?: any;

	/**
	 * Used to get reference to slice object.
	 */
	slice?: any;
}

interface LabelClickEvent {
	(event: Event, ui: LabelClickEventUIParam): void;
}

interface LabelClickEventUIParam {
	/**
	 * Used to get reference to the slice object.
	 */
	item?: any;

	/**
	 * Used to determine whether or not the label click should fire slice click event.
	 */
	allowSliceClick?: any;
}

interface SelectedItemChangingEvent {
	(event: Event, ui: SelectedItemChangingEventUIParam): void;
}

interface SelectedItemChangingEventUIParam {
	/**
	 * Used to get a reference to the current selected data item.
	 */
	oldItem?: any;

	/**
	 * Used to get a reference to the newly selected data item.
	 */
	newItem?: any;

	/**
	 * Used to stop the selected item from changing.
	 */
	cancel?: any;
}

interface SelectedItemChangedEvent {
	(event: Event, ui: SelectedItemChangedEventUIParam): void;
}

interface SelectedItemChangedEventUIParam {
	/**
	 * Used to get a reference to the previous selected data item.
	 */
	oldItem?: any;

	/**
	 * Used to get a reference to the current selected data item.
	 */
	newItem?: any;
}

interface SelectedItemsChangingEvent {
	(event: Event, ui: SelectedItemsChangingEventUIParam): void;
}

interface SelectedItemsChangingEventUIParam {
	/**
	 * Used to get a reference to the current selected data items.
	 */
	oldItems?: any;

	/**
	 * Used to get a reference to the newly selected data items.
	 */
	newItems?: any;

	/**
	 * Used to stop the selected items from changing.
	 */
	cancel?: any;
}

interface SelectedItemsChangedEvent {
	(event: Event, ui: SelectedItemsChangedEventUIParam): void;
}

interface SelectedItemsChangedEventUIParam {
	/**
	 * Used to get a reference to the previous selected data items.
	 */
	oldItems?: any;

	/**
	 * Used to get a reference to the current selected data items.
	 */
	newItems?: any;
}

interface IgPieChart {
	/**
	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 */
	dataSource?: any;

	/**
	 * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Gets or Sets the property name that contains the values.  This option is deprecated - please use `dataValue` instead.
	 */
	valueMemberPath?: string;

	/**
	 * Gets or sets the property name that contains the labels.  This option is deprecated - please use `dataLabel` instead.
	 */
	labelMemberPath?: string;

	/**
	 * Gets or sets the property name that contains the legend labels.
	 */
	legendLabelMemberPath?: string;

	/**
	 * Gets or Sets the property name that contains the values.
	 */
	dataValue?: string;

	/**
	 * Gets or sets the property name that contains the labels.
	 */
	dataLabel?: string;

	/**
	 * Gets or sets the position of chart labels.
	 *
	 *
	 * Valid values:
	 * "none" No labels will be displayed.
	 * "center" Labels will be displayed in the center.
	 * "insideEnd" Labels will be displayed inside and by the edge of the container.
	 * "outsideEnd" Labels will be displayed outside the container.
	 * "bestFit" Labels will automatically decide their location.
	 */
	labelsPosition?: string;

	/**
	 * Gets or sets the color for labels rendered outside of the pie chart.  If no color is provided then
	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
	 */
	labelOuterColor?: string;

	/**
	 * Gets or sets the color for labels rendered inside of the pie chart.  If no color is provided then
	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
	 */
	labelInnerColor?: string;

	/**
	 * Gets or sets the type of selection the pie chart allows.
	 *
	 *
	 * Valid values:
	 * "single" A single slice is allowed to be selected.
	 * "multiple" Multiple slices are allowed to be selected.
	 * "manual" Slices can only be selected programmatically.
	 */
	selectionMode?: string;

	/**
	 * Gets or sets the currently selected data item.  If a different data item is provided the pie chart
	 *             will select the slice associated with the new item.
	 */
	selectedItem?: any;

	/**
	 * Gets or sets the currently selected data items.  Adding or removing data items from this array will
	 *             select or deselect the slices associated with those items.
	 */
	selectedItems?: any[];

	/**
	 * Gets or sets whether the leader lines are visible.
	 *
	 *
	 * Valid values:
	 * "visible"
	 * "collapsed"
	 */
	leaderLineVisibility?: string;

	/**
	 * Gets or sets what type of leader lines will be used for the outside end labels.
	 *
	 *
	 * Valid values:
	 * "straight"
	 * "arc"
	 * "spline"
	 */
	leaderLineType?: string;

	/**
	 * Gets or sets the margin between a label and the end of its leader line.
	 */
	leaderLineMargin?: number;

	/**
	 * Gets or sets the threshold value that determines if slices are grouped into the Others slice.
	 */
	othersCategoryThreshold?: number;

	/**
	 * Gets or sets the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
	 * Use context.item to get the item associated with the slice, if any.
	 * Use context.outline to get the outline brush used to paint the slice.
	 * Use context.itemLabel to get the label object that would be used for the slice.
	 * Use context.percentValue to see the percentage value that is associated with the slice.
	 * Use context.isOthersSlice to tell if the associated slice is the others slice.
	 * Should return a string value that should be used for the label.
	 */
	formatLabel?: Function;

	/**
	 * Gets or sets a style object that can be used to override the style settings on the others category slice.
	 */
	othersCategoryStyle?: any;

	/**
	 * Gets or sets whether to use numeric or percent-based threshold value.
	 *
	 * Valid values:
	 * "number" Data value is compared directly to the value of OthersCategoryThreshold.
	 * "percent" Data value is compared to OthersCategoryThreshold as a percentage of the total.
	 */
	othersCategoryType?: string;

	/**
	 * Gets or sets the label of the Others slice.
	 */
	othersCategoryText?: string;

	/**
	 * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
	 */
	explodedRadius?: number;

	/**
	 * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.
	 */
	radiusFactor?: number;

	/**
	 * Gets or sets whether the slices can be selected.
	 */
	allowSliceSelection?: boolean;

	/**
	 * Gets or sets whether the slices can be exploded.
	 */
	allowSliceExplosion?: boolean;

	/**
	 * Gets or sets the collection of exploded slice indices.
	 * Should be an array of integers that indicate the indexes of the slices to explode.
	 */
	explodedSlices?: any[];

	/**
	 * Sets the collection of selected slice indices.
	 *             Should be an array of integers that indicate the indexes of the slices to select.
	 */
	selectedSlices?: any[];

	/**
	 * Whether the chart should render a tooltip.
	 */
	showTooltip?: boolean;

	/**
	 * The name of template or the template itself that chart tooltip will use to render.
	 */
	tooltipTemplate?: string;

	/**
	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
	 */
	legend?: IgPieChartLegend;

	/**
	 * Gets or sets the pixel amount, by which the labels are offset from the edge of the slices.
	 */
	labelExtent?: number;

	/**
	 * Gets or sets the starting angle of the chart.
	 * The default zero value is equivalent to 3 o'clock.
	 */
	startAngle?: number;

	/**
	 * Gets or sets the rotational direction of the chart.
	 *
	 *
	 * Valid values:
	 * "counterclockwise"
	 * "clockwise"
	 */
	sweepDirection?: string;

	/**
	 * Gets or sets the style used when a slice is selected.
	 */
	selectedStyle?: any;

	/**
	 * Gets or sets the Brushes property.
	 * The brushes property defines the palette from which automatically assigned slice brushes are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	brushes?: any;

	/**
	 * Gets or sets the Outlines property.
	 * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	outlines?: any;

	/**
	 * Gets or sets the LegendItemTemplate property.
	 * The legend item control content is created according to the LegendItemTemplate on-demand by
	 * the chart object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	legendItemTemplate?: any;

	/**
	 * Gets or sets the LegendItemBadgeTemplate property.
	 * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
	 * the chart object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	legendItemBadgeTemplate?: any;

	/**
	 * Overrides the style used for text in the pie chart.
	 */
	textStyle?: string;

	/**
	 * The swatch used to style this widget
	 */
	theme?: string;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 */
	tooltipShowing?: TooltipShowingEvent;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 */
	tooltipShown?: TooltipShownEvent;

	/**
	 * Event fired when the mouse has left an element and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 */
	tooltipHiding?: TooltipHidingEvent;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 */
	tooltipHidden?: TooltipHiddenEvent;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 */
	browserNotSupported?: BrowserNotSupportedEvent;

	/**
	 * Raised when the slice is clicked.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.slice to get reference to slice object.
	 * Use ui.slice.item to get reference to current pie chart item.
	 * Use ui.slice.isExploded to get is the slice exploded.
	 * Use ui.slice.isSelected to get is the slice selected.
	 */
	sliceClick?: SliceClickEvent;

	/**
	 * Raised when a slice's label is clicked.
	 *             Function takes arguments evt and ui.
	 *             Use ui.item to get reference to the slice object.
	 *             Use ui.allowSliceClick to determine whether or not the label click should fire slice click event.
	 */
	labelClick?: LabelClickEvent;

	/**
	 * Event fired when the selectedItem option is about to change.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItem to get a reference to the current selected data item.
	 *             Use ui.newItem to get a reference to the newly selected data item.
	 *             Use ui.cancel to stop the selected item from changing.
	 */
	selectedItemChanging?: SelectedItemChangingEvent;

	/**
	 * Event fired when the selectedItem option has changed.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItem to get a reference to the previous selected data item.
	 *             Use ui.newItem to get a reference to the current selected data item.
	 */
	selectedItemChanged?: SelectedItemChangedEvent;

	/**
	 * Event fired when the selectedItems array is about to change.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItems to get a reference to the current selected data items.
	 *             Use ui.newItems to get a reference to the newly selected data items.
	 *             Use ui.cancel to stop the selected items from changing.
	 */
	selectedItemsChanging?: SelectedItemsChangingEvent;

	/**
	 * Event fired when the selectedItems array has changed.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItems to get a reference to the previous selected data items.
	 *             Use ui.newItems to get a reference to the current selected data items.
	 */
	selectedItemsChanged?: SelectedItemsChangedEvent;

	/**
	 * Option for igPieChart
	 */
	[optionName: string]: any;
}
interface IgPieChartMethods {
	option(): void;

	/**
	 * Adds a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that will be added to the data source.
	 */
	addItem(item: Object): void;

	/**
	 * Inserts a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that will be inserted in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 */
	insertItem(item: Object, index: number): void;

	/**
	 * Deletes an item from the data source and notifies the chart.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 */
	removeItem(index: number): void;

	/**
	 * Updates an item in the data source and notifies the chart.
	 *
	 * @param index The index in the data source that we want to change.
	 * @param item the new item that we want to set in the data source.
	 */
	setItem(index: number, item: Object): void;

	/**
	 * Exports the chart to a PNG image.
	 *
	 * @param width The width of the image.
	 * @param height The height of the image.
	 */
	exportImage(width?: Object, height?: Object): Object;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;

	/**
	 * Returns the ID of parent element holding the chart.
	 */
	id(): string;

	/**
	 * Returns the element holding the chart.
	 */
	widget(): void;

	/**
	 * Creates a print preview page with the chart, hiding all other elements on the page.
	 */
	print(): void;

	/**
	 * Exports visual data from the pie chart to aid in unit testing
	 */
	exportVisualData(): void;

	/**
	 * Returns data that the pie chart is bound to.
	 */
	getData(): Object;

	/**
	 * Forces any pending deferred work to render on the chart before continuing
	 */
	flush(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igPieChart"): IgPieChartMethods;
}

interface JQuery {
	igDataChart(methodName: "option"): void;
	igDataChart(methodName: "widget"): void;
	igDataChart(methodName: "id"): string;
	igDataChart(methodName: "exportImage", width?: Object, height?: Object): Object;
	igDataChart(methodName: "destroy"): void;
	igDataChart(methodName: "styleUpdated"): Object;
	igDataChart(methodName: "resetZoom"): Object;
	igDataChart(methodName: "addItem", item: Object, targetName: string): void;
	igDataChart(methodName: "insertItem", item: Object, index: number, targetName: string): void;
	igDataChart(methodName: "removeItem", index: number, targetName: string): void;
	igDataChart(methodName: "setItem", index: number, item: Object, targetName: string): void;
	igDataChart(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
	igDataChart(methodName: "notifyClearItems", dataSource: Object): Object;
	igDataChart(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
	igDataChart(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
	igDataChart(methodName: "scrollIntoView", targetName: string, item: Object): Object;
	igDataChart(methodName: "scaleValue", targetName: string, unscaledValue: number): number;
	igDataChart(methodName: "unscaleValue", targetName: string, scaledValue: number): number;
	igDataChart(methodName: "resetCachedEnhancedInterval", targetName: string): Object;
	igDataChart(methodName: "notifyVisualPropertiesChanged", targetName: string): Object;
	igDataChart(methodName: "flush"): void;
	igDataChart(methodName: "exportVisualData"): void;
	igDataChart(methodName: "getActualMinimumValue", targetName: string): void;
	igDataChart(methodName: "getActualMaximumValue", targetName: string): void;
	igDataChart(methodName: "getActualInterval", targetName: string): void;
	igDataChart(methodName: "print"): void;
	igDataChart(methodName: "renderSeries", targetName: string, animate: boolean): void;
	igDataChart(methodName: "getItemIndex", targetName: string, worldPoint: Object): number;
	igDataChart(methodName: "getItem", targetName: string, worldPoint: Object): Object;
	igDataChart(methodName: "getItemSpan", targetName: string): number;
	igDataChart(methodName: "getSeriesValue", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
	igDataChart(methodName: "getSeriesValueBoundingBox", targetName: string, worldPoint: Object): Object;
	igDataChart(methodName: "getSeriesValueFineGrainedBoundingBoxes", targetName: string, worldPoint: Object): Object;
	igDataChart(methodName: "getSeriesValuePosition", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
	igDataChart(methodName: "getSeriesValuePositionFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
	igDataChart(methodName: "getSeriesValueFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
	igDataChart(methodName: "getSeriesValueBoundingBoxFromSeriesPixel", targetName: string, seriesPoint: Object): Object;
	igDataChart(methodName: "getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel", targetName: string, worldPoint: Object): Object;
	igDataChart(methodName: "getSeriesHighValue", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
	igDataChart(methodName: "getSeriesHighValuePosition", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
	igDataChart(methodName: "getSeriesHighValuePositionFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
	igDataChart(methodName: "getSeriesHighValueFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
	igDataChart(methodName: "getSeriesLowValue", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
	igDataChart(methodName: "getSeriesLowValuePosition", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
	igDataChart(methodName: "getSeriesLowValuePositionFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
	igDataChart(methodName: "getSeriesLowValueFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
	igDataChart(methodName: "getItemIndexFromSeriesPixel", targetName: string, seriesPoint: Object): number;
	igDataChart(methodName: "getItemFromSeriesPixel", targetName: string, seriesPoint: Object): Object;
	igDataChart(methodName: "getSeriesOffsetValue", targetName: string): number;
	igDataChart(methodName: "getSeriesCategoryWidth", targetName: string): number;
	igDataChart(methodName: "replayTransitionIn", targetName: string): Object;
	igDataChart(methodName: "simulateHover", targetName: string, seriesPoint: Object): Object;
	igDataChart(methodName: "moveCursorPoint", targetName: string, worldPoint: Object): Object;
	igDataChart(methodName: "startTiledZoomingIfNecessary"): void;
	igDataChart(methodName: "endTiledZoomingIfRunning"): void;
	igDataChart(methodName: "clearTileZoomCache"): void;
	igDataChart(methodName: "changeLocale", $container: Object): void;
	igDataChart(methodName: "changeGlobalLanguage"): void;
	igDataChart(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets  whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isPagePanningAllowed"): boolean;

	/**
	 * Sets whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isPagePanningAllowed", optionValue: boolean): void;

	/**
	 * The channel name to use to sync this chart with other charts.
	 */
	igDataChart(optionLiteral: 'option', optionName: "syncChannel"): string;

	/**
	 * The channel name to use to sync this chart with other charts.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "syncChannel", optionValue: string): void;

	/**
	 * Whether the chart should be synchronized vertically
	 */
	igDataChart(optionLiteral: 'option', optionName: "synchronizeVertically"): boolean;

	/**
	 * Whether the chart should be synchronized vertically
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "synchronizeVertically", optionValue: boolean): void;

	/**
	 * Whether the chart should be synchronized horizontally
	 */
	igDataChart(optionLiteral: 'option', optionName: "synchronizeHorizontally"): boolean;

	/**
	 * Whether the chart should be synchronized horizontally
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "synchronizeHorizontally", optionValue: boolean): void;

	/**
	 * Gets  the cross hair point (in world coordinates)
	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
	 * case the relevant crosshair line is hidden.
	 */
	igDataChart(optionLiteral: 'option', optionName: "crosshairPoint"): IgDataChartCrosshairPoint;

	/**
	 * Sets the cross hair point (in world coordinates)
	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
	 * case the relevant crosshair line is hidden.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "crosshairPoint", optionValue: IgDataChartCrosshairPoint): void;

	/**
	 * A rectangle representing the portion of the chart currently in view.
	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowRect"): any;

	/**
	 * A rectangle representing the portion of the chart currently in view.
	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
	 * The provided object should have numeric properties called left, top, width and height.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowRect", optionValue: any): void;

	/**
	 * Gets  the current Chart's horizontal zoomability.  This option is deprecated - please use `isHorizontalZoomEnabled` instead.
	 */
	igDataChart(optionLiteral: 'option', optionName: "horizontalZoomable"): boolean;

	/**
	 * Sets the current Chart's horizontal zoomability.  This option is deprecated - please use `isHorizontalZoomEnabled` instead.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "horizontalZoomable", optionValue: boolean): void;

	/**
	 * Gets  the current Chart's vertical zoomability.  This option is deprecated - please use `isVerticalZoomEnabled` instead.
	 */
	igDataChart(optionLiteral: 'option', optionName: "verticalZoomable"): boolean;

	/**
	 * Sets the current Chart's vertical zoomability.  This option is deprecated - please use `isVerticalZoomEnabled` instead.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "verticalZoomable", optionValue: boolean): void;

	/**
	 * Gets  the current Chart's horizontal zoomability.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isHorizontalZoomEnabled"): boolean;

	/**
	 * Sets the current Chart's horizontal zoomability.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isHorizontalZoomEnabled", optionValue: boolean): void;

	/**
	 * Gets  the current Chart's vertical zoomability.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isVerticalZoomEnabled"): boolean;

	/**
	 * Sets the current Chart's vertical zoomability.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isVerticalZoomEnabled", optionValue: boolean): void;

	/**
	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
	 *
	 */

	igDataChart(optionLiteral: 'option', optionName: "windowResponse"): string;

	/**
	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "windowResponse", optionValue: string): void;

	/**
	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
	 * Decrease this value if you want to allow for further zooming into the viewer.
	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowRectMinWidth"): number;

	/**
	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
	 * Decrease this value if you want to allow for further zooming into the viewer.
	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowRectMinWidth", optionValue: number): void;

	/**
	 * The visibility of the OverviewPlusDetailPane.
	 */

	igDataChart(optionLiteral: 'option', optionName: "overviewPlusDetailPaneVisibility"): string;

	/**
	 * The visibility of the OverviewPlusDetailPane.
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "overviewPlusDetailPaneVisibility", optionValue: string): void;

	/**
	 * Gets  the current Chart's crosshair visibility override.  Note: setting this property does not affect the mobile browser version of the chart.
	 */

	igDataChart(optionLiteral: 'option', optionName: "crosshairVisibility"): string;

	/**
	 * Sets the current Chart's crosshair visibility override.  Note: setting this property does not affect the mobile browser version of the chart.
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "crosshairVisibility", optionValue: string): void;

	/**
	 * Gets  the brush used as the background for the current Chart object's plot area.
	 */
	igDataChart(optionLiteral: 'option', optionName: "plotAreaBackground"): string;

	/**
	 * Sets the brush used as the background for the current Chart object's plot area.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "plotAreaBackground", optionValue: string): void;

	/**
	 * Gets  the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
	 */

	igDataChart(optionLiteral: 'option', optionName: "defaultInteraction"): string;

	/**
	 * Sets the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "defaultInteraction", optionValue: string): void;

	/**
	 * Gets  the current Chart's DragModifier property.
	 */

	igDataChart(optionLiteral: 'option', optionName: "dragModifier"): string;

	/**
	 * Sets the current Chart's DragModifier property.
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "dragModifier", optionValue: string): void;

	/**
	 * Gets  the current Chart's PanModifier property.
	 */

	igDataChart(optionLiteral: 'option', optionName: "panModifier"): string;

	/**
	 * Sets the current Chart's PanModifier property.
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "panModifier", optionValue: string): void;

	/**
	 * Gets  the preview rectangle.
	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
	 * strokePath is hidden.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	igDataChart(optionLiteral: 'option', optionName: "previewRect"): any;

	/**
	 * Sets the preview rectangle.
	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
	 * strokePath is hidden.
	 * The provided object should have numeric properties called left, top, width and height.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "previewRect", optionValue: any): void;

	/**
	 * A number between 0 and 1 determining the position of the horizontal scroll.
	 * This property is effectively a shortcut to the X position of the WindowRect property.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowPositionHorizontal"): number;

	/**
	 * A number between 0 and 1 determining the position of the horizontal scroll.
	 * This property is effectively a shortcut to the X position of the WindowRect property.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowPositionHorizontal", optionValue: number): void;

	/**
	 * A number between 0 and 1 determining the position of the vertical scroll.
	 * This property is effectively a shortcut to the Y position of the WindowRect property.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowPositionVertical"): number;

	/**
	 * A number between 0 and 1 determining the position of the vertical scroll.
	 * This property is effectively a shortcut to the Y position of the WindowRect property.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowPositionVertical", optionValue: number): void;

	/**
	 * A number between 0 and 1 determining the scale of the horizontal zoom.
	 * This property is effectively a shortcut to the Width of the WindowRect property.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowScaleHorizontal"): number;

	/**
	 * A number between 0 and 1 determining the scale of the horizontal zoom.
	 * This property is effectively a shortcut to the Width of the WindowRect property.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowScaleHorizontal", optionValue: number): void;

	/**
	 * A number between 0 and 1 determining the scale of the vertical zoom.
	 * This property is effectively a shortcut to the Height of the WindowRect property.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowScaleVertical"): number;

	/**
	 * A number between 0 and 1 determining the scale of the vertical zoom.
	 * This property is effectively a shortcut to the Height of the WindowRect property.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowScaleVertical", optionValue: number): void;

	/**
	 * Gets  the template to use for circle markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of circle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "circleMarkerTemplate"): any;

	/**
	 * Sets the template to use for circle markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of circle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "circleMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for triangle markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of triangle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "triangleMarkerTemplate"): any;

	/**
	 * Sets the template to use for triangle markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of triangle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "triangleMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for pyramid markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of pyramid.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "pyramidMarkerTemplate"): any;

	/**
	 * Sets the template to use for pyramid markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of pyramid.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "pyramidMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for square markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of square.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "squareMarkerTemplate"): any;

	/**
	 * Sets the template to use for square markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of square.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "squareMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for diamond markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of diamond.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "diamondMarkerTemplate"): any;

	/**
	 * Sets the template to use for diamond markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of diamond.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "diamondMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for pentagon markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of pentagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "pentagonMarkerTemplate"): any;

	/**
	 * Sets the template to use for pentagon markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of pentagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "pentagonMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for hexagon markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of hexagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "hexagonMarkerTemplate"): any;

	/**
	 * Sets the template to use for hexagon markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of hexagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "hexagonMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for tetragram markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of tetragram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "tetragramMarkerTemplate"): any;

	/**
	 * Sets the template to use for tetragram markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of tetragram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "tetragramMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for pentragram markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of pentagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "pentagramMarkerTemplate"): any;

	/**
	 * Sets the template to use for pentragram markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of pentagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "pentagramMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for hexagram markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of hexagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igDataChart(optionLiteral: 'option', optionName: "hexagramMarkerTemplate"): any;

	/**
	 * Sets the template to use for hexagram markers on the chart.
	 * Defines the marker template used for
	 * series with a marker type of hexagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "hexagramMarkerTemplate", optionValue: any): void;

	/**
	 * Sets or gets the top margin to use around the chart content in the canvas.
	 */
	igDataChart(optionLiteral: 'option', optionName: "topMargin"): number;

	/**
	 * Sets or gets the top margin to use around the chart content in the canvas.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "topMargin", optionValue: number): void;

	/**
	 * Sets or gets the left margin to use around the chart content in the canvas.
	 */
	igDataChart(optionLiteral: 'option', optionName: "leftMargin"): number;

	/**
	 * Sets or gets the left margin to use around the chart content in the canvas.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "leftMargin", optionValue: number): void;

	/**
	 * Sets or gets the right margin to use around the chart content in the canvas.
	 */
	igDataChart(optionLiteral: 'option', optionName: "rightMargin"): number;

	/**
	 * Sets or gets the right margin to use around the chart content in the canvas.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "rightMargin", optionValue: number): void;

	/**
	 * Sets or gets the bottom margin to use around the chart content in the canvas.
	 */
	igDataChart(optionLiteral: 'option', optionName: "bottomMargin"): number;

	/**
	 * Sets or gets the bottom margin to use around the chart content in the canvas.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "bottomMargin", optionValue: number): void;

	/**
	 * Sets or gets the automatic width to add when automatically adding margins to the chart.
	 */
	igDataChart(optionLiteral: 'option', optionName: "autoMarginWidth"): number;

	/**
	 * Sets or gets the automatic width to add when automatically adding margins to the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "autoMarginWidth", optionValue: number): void;

	/**
	 * Sets or gets the automatic height to add when automatically adding margins to the chart.
	 */
	igDataChart(optionLiteral: 'option', optionName: "autoMarginHeight"): number;

	/**
	 * Sets or gets the automatic height to add when automatically adding margins to the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "autoMarginHeight", optionValue: number): void;

	/**
	 * Gets  whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isSquare"): boolean;

	/**
	 * Sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isSquare", optionValue: boolean): void;

	/**
	 * Gets  the GridMode property.
	 */

	igDataChart(optionLiteral: 'option', optionName: "gridMode"): string;

	/**
	 * Sets the GridMode property.
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "gridMode", optionValue: string): void;

	/**
	 * Gets  the Brushes property.
	 * The brushes property defines the palette from which automatically assigned series brushes are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igDataChart(optionLiteral: 'option', optionName: "brushes"): any;

	/**
	 * Sets the Brushes property.
	 * The brushes property defines the palette from which automatically assigned series brushes are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "brushes", optionValue: any): void;

	/**
	 * Gets  the MarkerBrushes property.
	 * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igDataChart(optionLiteral: 'option', optionName: "markerBrushes"): any;

	/**
	 * Sets the MarkerBrushes property.
	 * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "markerBrushes", optionValue: any): void;

	/**
	 * Gets  the Outlines property.
	 * The outlines property defines the palette from which automatically assigned series outlines are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igDataChart(optionLiteral: 'option', optionName: "outlines"): any;

	/**
	 * Sets the Outlines property.
	 * The outlines property defines the palette from which automatically assigned series outlines are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "outlines", optionValue: any): void;

	/**
	 * Gets  the MarkerOutlines property.
	 * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igDataChart(optionLiteral: 'option', optionName: "markerOutlines"): any;

	/**
	 * Sets the MarkerOutlines property.
	 * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "markerOutlines", optionValue: any): void;

	/**
	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igDataChart(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igDataChart(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
	 */
	igDataChart(optionLiteral: 'option', optionName: "size"): any;

	/**
	 * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "size", optionValue: any): void;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 */
	igDataChart(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
	 */
	igDataChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	igDataChart(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
	 */
	igDataChart(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Set to true in order to disable any interactions with the plot surface.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isSurfaceInteractionDisabled"): boolean;

	/**
	 * Set to true in order to disable any interactions with the plot surface.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "isSurfaceInteractionDisabled", optionValue: boolean): void;

	/**
	 * Set to true in order to override the default behavior in which series do not animate if an axis range changes
	 */
	igDataChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges"): boolean;

	/**
	 * Set to true in order to override the default behavior in which series do not animate if an axis range changes
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges", optionValue: boolean): void;

	/**
	 * The title to display for the component.
	 */
	igDataChart(optionLiteral: 'option', optionName: "title"): string;

	/**
	 * The title to display for the component.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "title", optionValue: string): void;

	/**
	 * The subtitle to display for the component.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitle"): string;

	/**
	 * The subtitle to display for the component.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitle", optionValue: string): void;

	/**
	 * The css font property to use for the title.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleTextStyle"): string;

	/**
	 * The css font property to use for the title.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleTextStyle", optionValue: string): void;

	/**
	 * The top margin to use for the title.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleTopMargin"): number;

	/**
	 * The top margin to use for the title.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleTopMargin", optionValue: number): void;

	/**
	 * The left margin to use for the title.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleLeftMargin"): number;

	/**
	 * The left margin to use for the title.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleLeftMargin", optionValue: number): void;

	/**
	 * The right margin to use for the title.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleRightMargin"): number;

	/**
	 * The right margin to use for the title.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleRightMargin", optionValue: number): void;

	/**
	 * The bottom margin to use for the title.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleBottomMargin"): number;

	/**
	 * The bottom margin to use for the title.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleBottomMargin", optionValue: number): void;

	/**
	 * The css font property to use for the title.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleTextStyle"): string;

	/**
	 * The css font property to use for the title.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleTextStyle", optionValue: string): void;

	/**
	 * The top margin to use for the subtitle.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleTopMargin"): number;

	/**
	 * The top margin to use for the subtitle.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleTopMargin", optionValue: number): void;

	/**
	 * The left margin to use for the subtitle.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleLeftMargin"): number;

	/**
	 * The left margin to use for the subtitle.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleLeftMargin", optionValue: number): void;

	/**
	 * The right margin to use for the subtitle.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleRightMargin"): number;

	/**
	 * The right margin to use for the subtitle.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleRightMargin", optionValue: number): void;

	/**
	 * The bottom margin to use for the subtitle.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleBottomMargin"): number;

	/**
	 * The bottom margin to use for the subtitle.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleBottomMargin", optionValue: number): void;

	/**
	 * The color to use for the title.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleTextColor"): any;

	/**
	 * The color to use for the title.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "titleTextColor", optionValue: any): void;

	/**
	 * The color to use for the subtitle.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleTextColor"): any;

	/**
	 * The color to use for the subtitle.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "subtitleTextColor", optionValue: any): void;

	/**
	 * The horizontal alignment to use for the title.
	 */

	igDataChart(optionLiteral: 'option', optionName: "titleHorizontalAlignment"): string;

	/**
	 * The horizontal alignment to use for the title.
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "titleHorizontalAlignment", optionValue: string): void;

	/**
	 * The horizontal alignment to use for the subtitle.
	 */

	igDataChart(optionLiteral: 'option', optionName: "subtitleHorizontalAlignment"): string;

	/**
	 * The horizontal alignment to use for the subtitle.
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "subtitleHorizontalAlignment", optionValue: string): void;

	/**
	 * The length, in milliseconds of the highlighting transition.
	 */
	igDataChart(optionLiteral: 'option', optionName: "highlightingTransitionDuration"): number;

	/**
	 * The length, in milliseconds of the highlighting transition.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "highlightingTransitionDuration", optionValue: number): void;

	/**
	 * Whether the series viewer should use cached tiles during zooms rather than the default live content.
	 */
	igDataChart(optionLiteral: 'option', optionName: "useTiledZooming"): boolean;

	/**
	 * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "useTiledZooming", optionValue: boolean): void;

	/**
	 * Whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
	 */
	igDataChart(optionLiteral: 'option', optionName: "preferHigherResolutionTiles"): boolean;

	/**
	 * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "preferHigherResolutionTiles", optionValue: boolean): void;

	/**
	 * Gets  the scaling value used by the main canvas rendering context to apply a scale transform to it.
	 */
	igDataChart(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used by the main canvas rendering context to apply a scale transform to it.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * The maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
	 */
	igDataChart(optionLiteral: 'option', optionName: "zoomTileCacheSize"): number;

	/**
	 * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "zoomTileCacheSize", optionValue: number): void;

	/**
	 * Gets  which type of hit testing the series should use.
	 */

	igDataChart(optionLiteral: 'option', optionName: "contentHitTestMode"): string;

	/**
	 * Sets which type of hit testing the series should use.
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "contentHitTestMode", optionValue: string): void;

	/**
	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
	 */
	igDataChart(optionLiteral: 'option', optionName: "legend"): IgDataChartLegend;

	/**
	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "legend", optionValue: IgDataChartLegend): void;

	/**
	 * An array of axis objects
	 */
	igDataChart(optionLiteral: 'option', optionName: "axes"): IgDataChartAxes[];

	/**
	 * An array of axis objects
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "axes", optionValue: IgDataChartAxes[]): void;

	/**
	 * An array of series objects
	 */
	igDataChart(optionLiteral: 'option', optionName: "series"): IgDataChartSeries[];

	/**
	 * An array of series objects
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "series", optionValue: IgDataChartSeries[]): void;

	/**
	 * The swatch used to style this widget
	 */
	igDataChart(optionLiteral: 'option', optionName: "theme"): string;

	/**
	 * The swatch used to style this widget
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "theme", optionValue: string): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igDataChart(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igDataChart(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igDataChart(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDataChart(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igDataChart(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;

	/**
	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igDataChart(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igDataChart(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igDataChart(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;

	/**
	 * Event fired when the mouse has left a series and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igDataChart(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;

	/**
	 * Event fired when the mouse has left a series and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igDataChart(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igDataChart(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igDataChart(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 */
	igDataChart(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 *
	 * @optionValue Define event handler function.
	 */
	igDataChart(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;

	/**
	 * Occurs when the cursors are moved over a series in this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesCursorMouseMove"): SeriesCursorMouseMoveEvent;

	/**
	 * Occurs when the cursors are moved over a series in this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesCursorMouseMove", optionValue: SeriesCursorMouseMoveEvent): void;

	/**
	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeftButtonDown"): SeriesMouseLeftButtonDownEvent;

	/**
	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeftButtonDown", optionValue: SeriesMouseLeftButtonDownEvent): void;

	/**
	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeftButtonUp"): SeriesMouseLeftButtonUpEvent;

	/**
	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeftButtonUp", optionValue: SeriesMouseLeftButtonUpEvent): void;

	/**
	 * Occurs when the left mouse pointer moves while over an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseMove"): SeriesMouseMoveEvent;

	/**
	 * Occurs when the left mouse pointer moves while over an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseMove", optionValue: SeriesMouseMoveEvent): void;

	/**
	 * Occurs when the left mouse pointer enters an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseEnter"): SeriesMouseEnterEvent;

	/**
	 * Occurs when the left mouse pointer enters an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseEnter", optionValue: SeriesMouseEnterEvent): void;

	/**
	 * Occurs when the left mouse pointer leaves an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeave"): SeriesMouseLeaveEvent;

	/**
	 * Occurs when the left mouse pointer leaves an element of this chart.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeave", optionValue: SeriesMouseLeaveEvent): void;

	/**
	 * Occurs just after the current Chart's window rectangle is changed.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowRectChanged"): WindowRectChangedEvent;

	/**
	 * Occurs just after the current Chart's window rectangle is changed.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "windowRectChanged", optionValue: WindowRectChangedEvent): void;

	/**
	 * Occurs just after the current Chart's grid area rectangle is changed.
	 * The grid area may change as the result of the Chart being resized, or
	 * of an axis being added or changing size, possibly in another Chart.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 */
	igDataChart(optionLiteral: 'option', optionName: "gridAreaRectChanged"): GridAreaRectChangedEvent;

	/**
	 * Occurs just after the current Chart's grid area rectangle is changed.
	 * The grid area may change as the result of the Chart being resized, or
	 * of an axis being added or changing size, possibly in another Chart.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "gridAreaRectChanged", optionValue: GridAreaRectChangedEvent): void;

	/**
	 * Raised when the chart's processing for an update has completed.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 */
	igDataChart(optionLiteral: 'option', optionName: "refreshCompleted"): RefreshCompletedEvent;

	/**
	 * Raised when the chart's processing for an update has completed.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "refreshCompleted", optionValue: RefreshCompletedEvent): void;

	/**
	 * Event fired when the range of and axis on the chart changes.
	 * Function takes arguments evt and ui.
	 * Use ui.axis to get reference to current chart axis object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.newMaximumValue to get new maximum value.
	 * Use ui.newMinimumValue to get new minimum value.
	 * Use ui.oldMaximumValue to get old maximum value.
	 * Use ui.oldMinimumValue to get old minimum value.
	 */
	igDataChart(optionLiteral: 'option', optionName: "axisRangeChanged"): AxisRangeChangedEvent;

	/**
	 * Event fired when the range of and axis on the chart changes.
	 * Function takes arguments evt and ui.
	 * Use ui.axis to get reference to current chart axis object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.newMaximumValue to get new maximum value.
	 * Use ui.newMinimumValue to get new minimum value.
	 * Use ui.oldMaximumValue to get old maximum value.
	 * Use ui.oldMinimumValue to get old minimum value.
	 *
	 * @optionValue Define event handler function.
	 */
	igDataChart(optionLiteral: 'option', optionName: "axisRangeChanged", optionValue: AxisRangeChangedEvent): void;

	/**
	 * Handle this event in order to specify which columns the Typical price calculation is based on.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.count to get the number of positions that should be calculated from the start.
	 * Use ui.position to get the beginning position that should be calculated from.
	 * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
	 * Use ui.dataSource to get the data to use for the calculation.
	 * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
	 */
	igDataChart(optionLiteral: 'option', optionName: "typicalBasedOn"): TypicalBasedOnEvent;

	/**
	 * Handle this event in order to specify which columns the Typical price calculation is based on.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.count to get the number of positions that should be calculated from the start.
	 * Use ui.position to get the beginning position that should be calculated from.
	 * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
	 * Use ui.dataSource to get the data to use for the calculation.
	 * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
	 *
	 * @optionValue New value to be set.
	 */
	igDataChart(optionLiteral: 'option', optionName: "typicalBasedOn", optionValue: TypicalBasedOnEvent): void;

	/**
	 * Event fired when the progressive loading state of the series has changed.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.currentStatus to get current status.
	 */
	igDataChart(optionLiteral: 'option', optionName: "progressiveLoadStatusChanged"): ProgressiveLoadStatusChangedEvent;

	/**
	 * Event fired when the progressive loading state of the series has changed.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.currentStatus to get current status.
	 *
	 * @optionValue Define event handler function.
	 */
	igDataChart(optionLiteral: 'option', optionName: "progressiveLoadStatusChanged", optionValue: ProgressiveLoadStatusChangedEvent): void;

	/**
	 * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.startIndex to get the start index for the current items.
	 * Use ui.endIndex to get the end index for the current items.
	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
	 * Use ui.startDate if ui.hasDateRange is true.
	 * Use ui.endDate if ui.hasDateRange is true.
	 * Use ui.getItems to get all the items associated with the event (only if necessary).
	 * Use ui.fill to get or set the fill to use for the current item.
	 * Use ui.stroke to get or set the stroke to use for the current item.
	 * Use ui.opacity to get or set the opacity to use for the current item.
	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
	 */
	igDataChart(optionLiteral: 'option', optionName: "assigningCategoryStyle"): AssigningCategoryStyleEvent;

	/**
	 * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.startIndex to get the start index for the current items.
	 * Use ui.endIndex to get the end index for the current items.
	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
	 * Use ui.startDate if ui.hasDateRange is true.
	 * Use ui.endDate if ui.hasDateRange is true.
	 * Use ui.getItems to get all the items associated with the event (only if necessary).
	 * Use ui.fill to get or set the fill to use for the current item.
	 * Use ui.stroke to get or set the stroke to use for the current item.
	 * Use ui.opacity to get or set the opacity to use for the current item.
	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
	 *
	 * @optionValue Define event handler function.
	 */
	igDataChart(optionLiteral: 'option', optionName: "assigningCategoryStyle", optionValue: AssigningCategoryStyleEvent): void;

	/**
	 * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.startIndex to get the start index for the current items.
	 * Use ui.endIndex to get the end index for the current items.
	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
	 * Use ui.startDate if ui.hasDateRange is true.
	 * Use ui.endDate if ui.hasDateRange is true.
	 * Use ui.getItems to get all the items associated with the event (only if necessary).
	 * Use ui.fill to get or set the fill to use for the current item.
	 * Use ui.stroke to get or set the stroke to use for the current item.
	 * Use ui.opacity to get or set the opacity to use for the current item.
	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
	 */
	igDataChart(optionLiteral: 'option', optionName: "assigningCategoryMarkerStyle"): AssigningCategoryMarkerStyleEvent;

	/**
	 * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.startIndex to get the start index for the current items.
	 * Use ui.endIndex to get the end index for the current items.
	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
	 * Use ui.startDate if ui.hasDateRange is true.
	 * Use ui.endDate if ui.hasDateRange is true.
	 * Use ui.getItems to get all the items associated with the event (only if necessary).
	 * Use ui.fill to get or set the fill to use for the current item.
	 * Use ui.stroke to get or set the stroke to use for the current item.
	 * Use ui.opacity to get or set the opacity to use for the current item.
	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
	 *
	 * @optionValue Define event handler function.
	 */
	igDataChart(optionLiteral: 'option', optionName: "assigningCategoryMarkerStyle", optionValue: AssigningCategoryMarkerStyleEvent): void;
	igDataChart(options: IgDataChart): JQuery;
	igDataChart(optionLiteral: 'option', optionName: string): any;
	igDataChart(optionLiteral: 'option', options: IgDataChart): JQuery;
	igDataChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igDataChart(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igPieChart(methodName: "option"): void;
	igPieChart(methodName: "addItem", item: Object): void;
	igPieChart(methodName: "insertItem", item: Object, index: number): void;
	igPieChart(methodName: "removeItem", index: number): void;
	igPieChart(methodName: "setItem", index: number, item: Object): void;
	igPieChart(methodName: "exportImage", width?: Object, height?: Object): Object;
	igPieChart(methodName: "destroy"): void;
	igPieChart(methodName: "id"): string;
	igPieChart(methodName: "widget"): void;
	igPieChart(methodName: "print"): void;
	igPieChart(methodName: "exportVisualData"): void;
	igPieChart(methodName: "getData"): Object;
	igPieChart(methodName: "flush"): void;
	igPieChart(methodName: "changeLocale", $container: Object): void;
	igPieChart(methodName: "changeGlobalLanguage"): void;
	igPieChart(methodName: "changeGlobalRegional"): void;

	/**
	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igPieChart(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igPieChart(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igPieChart(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igPieChart(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
	 */
	igPieChart(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Gets or Sets the property name that contains the values.  This option is deprecated - please use `dataValue` instead.
	 */
	igPieChart(optionLiteral: 'option', optionName: "valueMemberPath"): string;

	/**
	 * Sets the property name that contains the values.  This option is deprecated - please use `dataValue` instead.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "valueMemberPath", optionValue: string): void;

	/**
	 * Gets  the property name that contains the labels.  This option is deprecated - please use `dataLabel` instead.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelMemberPath"): string;

	/**
	 * Sets the property name that contains the labels.  This option is deprecated - please use `dataLabel` instead.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelMemberPath", optionValue: string): void;

	/**
	 * Gets  the property name that contains the legend labels.
	 */
	igPieChart(optionLiteral: 'option', optionName: "legendLabelMemberPath"): string;

	/**
	 * Sets the property name that contains the legend labels.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "legendLabelMemberPath", optionValue: string): void;

	/**
	 * Gets or Sets the property name that contains the values.
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataValue"): string;

	/**
	 * Sets the property name that contains the values.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataValue", optionValue: string): void;

	/**
	 * Gets  the property name that contains the labels.
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataLabel"): string;

	/**
	 * Sets the property name that contains the labels.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "dataLabel", optionValue: string): void;

	/**
	 * Gets  the position of chart labels.
	 *
	 */

	igPieChart(optionLiteral: 'option', optionName: "labelsPosition"): string;

	/**
	 * Sets the position of chart labels.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPieChart(optionLiteral: 'option', optionName: "labelsPosition", optionValue: string): void;

	/**
	 * Gets  the color for labels rendered outside of the pie chart.  If no color is provided then
	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelOuterColor"): string;

	/**
	 * Sets the color for labels rendered outside of the pie chart.  If no color is provided then
	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelOuterColor", optionValue: string): void;

	/**
	 * Gets  the color for labels rendered inside of the pie chart.  If no color is provided then
	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelInnerColor"): string;

	/**
	 * Sets the color for labels rendered inside of the pie chart.  If no color is provided then
	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelInnerColor", optionValue: string): void;

	/**
	 * Gets  the type of selection the pie chart allows.
	 *
	 */

	igPieChart(optionLiteral: 'option', optionName: "selectionMode"): string;

	/**
	 * Sets the type of selection the pie chart allows.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPieChart(optionLiteral: 'option', optionName: "selectionMode", optionValue: string): void;

	/**
	 * Gets  the currently selected data item.  If a different data item is provided the pie chart
	 *             will select the slice associated with the new item.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItem"): any;

	/**
	 * Sets the currently selected data item.  If a different data item is provided the pie chart
	 *             will select the slice associated with the new item.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItem", optionValue: any): void;

	/**
	 * Gets  the currently selected data items.  Adding or removing data items from this array will
	 *             select or deselect the slices associated with those items.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItems"): any[];

	/**
	 * Sets the currently selected data items.  Adding or removing data items from this array will
	 *             select or deselect the slices associated with those items.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItems", optionValue: any[]): void;

	/**
	 * Gets  whether the leader lines are visible.
	 *
	 */

	igPieChart(optionLiteral: 'option', optionName: "leaderLineVisibility"): string;

	/**
	 * Sets whether the leader lines are visible.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPieChart(optionLiteral: 'option', optionName: "leaderLineVisibility", optionValue: string): void;

	/**
	 * Gets  what type of leader lines will be used for the outside end labels.
	 *
	 */

	igPieChart(optionLiteral: 'option', optionName: "leaderLineType"): string;

	/**
	 * Sets what type of leader lines will be used for the outside end labels.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPieChart(optionLiteral: 'option', optionName: "leaderLineType", optionValue: string): void;

	/**
	 * Gets  the margin between a label and the end of its leader line.
	 */
	igPieChart(optionLiteral: 'option', optionName: "leaderLineMargin"): number;

	/**
	 * Sets the margin between a label and the end of its leader line.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "leaderLineMargin", optionValue: number): void;

	/**
	 * Gets  the threshold value that determines if slices are grouped into the Others slice.
	 */
	igPieChart(optionLiteral: 'option', optionName: "othersCategoryThreshold"): number;

	/**
	 * Sets the threshold value that determines if slices are grouped into the Others slice.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "othersCategoryThreshold", optionValue: number): void;

	/**
	 * Gets  the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
	 * Use context.item to get the item associated with the slice, if any.
	 * Use context.outline to get the outline brush used to paint the slice.
	 * Use context.itemLabel to get the label object that would be used for the slice.
	 * Use context.percentValue to see the percentage value that is associated with the slice.
	 * Use context.isOthersSlice to tell if the associated slice is the others slice.
	 * Should return a string value that should be used for the label.
	 */
	igPieChart(optionLiteral: 'option', optionName: "formatLabel"): Function;

	/**
	 * Sets the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
	 * Use context.item to get the item associated with the slice, if any.
	 * Use context.outline to get the outline brush used to paint the slice.
	 * Use context.itemLabel to get the label object that would be used for the slice.
	 * Use context.percentValue to see the percentage value that is associated with the slice.
	 * Use context.isOthersSlice to tell if the associated slice is the others slice.
	 * Should return a string value that should be used for the label.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "formatLabel", optionValue: Function): void;

	/**
	 * Gets  a style object that can be used to override the style settings on the others category slice.
	 */
	igPieChart(optionLiteral: 'option', optionName: "othersCategoryStyle"): any;

	/**
	 * Sets a style object that can be used to override the style settings on the others category slice.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "othersCategoryStyle", optionValue: any): void;

	/**
	 * Gets  whether to use numeric or percent-based threshold value.
	 */

	igPieChart(optionLiteral: 'option', optionName: "othersCategoryType"): string;

	/**
	 * Sets whether to use numeric or percent-based threshold value.
	 *
	 * @optionValue New value to be set.
	 */

	igPieChart(optionLiteral: 'option', optionName: "othersCategoryType", optionValue: string): void;

	/**
	 * Gets  the label of the Others slice.
	 */
	igPieChart(optionLiteral: 'option', optionName: "othersCategoryText"): string;

	/**
	 * Sets the label of the Others slice.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "othersCategoryText", optionValue: string): void;

	/**
	 * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
	 */
	igPieChart(optionLiteral: 'option', optionName: "explodedRadius"): number;

	/**
	 * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "explodedRadius", optionValue: number): void;

	/**
	 * Gets  the scaling factor of the chart's radius. Value between 0 and 1.
	 */
	igPieChart(optionLiteral: 'option', optionName: "radiusFactor"): number;

	/**
	 * Sets the scaling factor of the chart's radius. Value between 0 and 1.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "radiusFactor", optionValue: number): void;

	/**
	 * Gets  whether the slices can be selected.
	 */
	igPieChart(optionLiteral: 'option', optionName: "allowSliceSelection"): boolean;

	/**
	 * Sets whether the slices can be selected.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "allowSliceSelection", optionValue: boolean): void;

	/**
	 * Gets  whether the slices can be exploded.
	 */
	igPieChart(optionLiteral: 'option', optionName: "allowSliceExplosion"): boolean;

	/**
	 * Sets whether the slices can be exploded.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "allowSliceExplosion", optionValue: boolean): void;

	/**
	 * Gets  the collection of exploded slice indices.
	 * Should be an array of integers that indicate the indexes of the slices to explode.
	 */
	igPieChart(optionLiteral: 'option', optionName: "explodedSlices"): any[];

	/**
	 * Sets the collection of exploded slice indices.
	 * Should be an array of integers that indicate the indexes of the slices to explode.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "explodedSlices", optionValue: any[]): void;

	/**
	 * Sets the collection of selected slice indices.
	 *             Should be an array of integers that indicate the indexes of the slices to select.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedSlices"): any[];

	/**
	 * Sets the collection of selected slice indices.
	 *             Should be an array of integers that indicate the indexes of the slices to select.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedSlices", optionValue: any[]): void;

	/**
	 * Whether the chart should render a tooltip.
	 */
	igPieChart(optionLiteral: 'option', optionName: "showTooltip"): boolean;

	/**
	 * Whether the chart should render a tooltip.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "showTooltip", optionValue: boolean): void;

	/**
	 * The name of template or the template itself that chart tooltip will use to render.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipTemplate"): string;

	/**
	 * The name of template or the template itself that chart tooltip will use to render.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;

	/**
	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
	 */
	igPieChart(optionLiteral: 'option', optionName: "legend"): IgPieChartLegend;

	/**
	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "legend", optionValue: IgPieChartLegend): void;

	/**
	 * Gets  the pixel amount, by which the labels are offset from the edge of the slices.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelExtent"): number;

	/**
	 * Sets the pixel amount, by which the labels are offset from the edge of the slices.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelExtent", optionValue: number): void;

	/**
	 * Gets  the starting angle of the chart.
	 * The default zero value is equivalent to 3 o'clock.
	 */
	igPieChart(optionLiteral: 'option', optionName: "startAngle"): number;

	/**
	 * Sets the starting angle of the chart.
	 * The default zero value is equivalent to 3 o'clock.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "startAngle", optionValue: number): void;

	/**
	 * Gets  the rotational direction of the chart.
	 *
	 */

	igPieChart(optionLiteral: 'option', optionName: "sweepDirection"): string;

	/**
	 * Sets the rotational direction of the chart.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPieChart(optionLiteral: 'option', optionName: "sweepDirection", optionValue: string): void;

	/**
	 * Gets  the style used when a slice is selected.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedStyle"): any;

	/**
	 * Sets the style used when a slice is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedStyle", optionValue: any): void;

	/**
	 * Gets  the Brushes property.
	 * The brushes property defines the palette from which automatically assigned slice brushes are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igPieChart(optionLiteral: 'option', optionName: "brushes"): any;

	/**
	 * Sets the Brushes property.
	 * The brushes property defines the palette from which automatically assigned slice brushes are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "brushes", optionValue: any): void;

	/**
	 * Gets  the Outlines property.
	 * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igPieChart(optionLiteral: 'option', optionName: "outlines"): any;

	/**
	 * Sets the Outlines property.
	 * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "outlines", optionValue: any): void;

	/**
	 * Gets  the LegendItemTemplate property.
	 * The legend item control content is created according to the LegendItemTemplate on-demand by
	 * the chart object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igPieChart(optionLiteral: 'option', optionName: "legendItemTemplate"): any;

	/**
	 * Sets the LegendItemTemplate property.
	 * The legend item control content is created according to the LegendItemTemplate on-demand by
	 * the chart object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "legendItemTemplate", optionValue: any): void;

	/**
	 * Gets  the LegendItemBadgeTemplate property.
	 * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
	 * the chart object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igPieChart(optionLiteral: 'option', optionName: "legendItemBadgeTemplate"): any;

	/**
	 * Sets the LegendItemBadgeTemplate property.
	 * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
	 * the chart object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "legendItemBadgeTemplate", optionValue: any): void;

	/**
	 * Overrides the style used for text in the pie chart.
	 */
	igPieChart(optionLiteral: 'option', optionName: "textStyle"): string;

	/**
	 * Overrides the style used for text in the pie chart.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "textStyle", optionValue: string): void;

	/**
	 * The swatch used to style this widget
	 */
	igPieChart(optionLiteral: 'option', optionName: "theme"): string;

	/**
	 * The swatch used to style this widget
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "theme", optionValue: string): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igPieChart(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igPieChart(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igPieChart(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPieChart(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;

	/**
	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 *
	 * @optionValue Define event handler function.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 *
	 * @optionValue Define event handler function.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;

	/**
	 * Event fired when the mouse has left an element and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;

	/**
	 * Event fired when the mouse has left an element and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 *
	 * @optionValue Define event handler function.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current pie chart item.
	 * Use ui.chart to get reference to chart object.
	 *
	 * @optionValue Define event handler function.
	 */
	igPieChart(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 */
	igPieChart(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 *
	 * @optionValue Define event handler function.
	 */
	igPieChart(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;

	/**
	 * Raised when the slice is clicked.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.slice to get reference to slice object.
	 * Use ui.slice.item to get reference to current pie chart item.
	 * Use ui.slice.isExploded to get is the slice exploded.
	 * Use ui.slice.isSelected to get is the slice selected.
	 */
	igPieChart(optionLiteral: 'option', optionName: "sliceClick"): SliceClickEvent;

	/**
	 * Raised when the slice is clicked.
	 * Function takes arguments evt and ui.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.slice to get reference to slice object.
	 * Use ui.slice.item to get reference to current pie chart item.
	 * Use ui.slice.isExploded to get is the slice exploded.
	 * Use ui.slice.isSelected to get is the slice selected.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "sliceClick", optionValue: SliceClickEvent): void;

	/**
	 * Raised when a slice's label is clicked.
	 *             Function takes arguments evt and ui.
	 *             Use ui.item to get reference to the slice object.
	 *             Use ui.allowSliceClick to determine whether or not the label click should fire slice click event.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelClick"): LabelClickEvent;

	/**
	 * Raised when a slice's label is clicked.
	 *             Function takes arguments evt and ui.
	 *             Use ui.item to get reference to the slice object.
	 *             Use ui.allowSliceClick to determine whether or not the label click should fire slice click event.
	 *
	 * @optionValue New value to be set.
	 */
	igPieChart(optionLiteral: 'option', optionName: "labelClick", optionValue: LabelClickEvent): void;

	/**
	 * Event fired when the selectedItem option is about to change.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItem to get a reference to the current selected data item.
	 *             Use ui.newItem to get a reference to the newly selected data item.
	 *             Use ui.cancel to stop the selected item from changing.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItemChanging"): SelectedItemChangingEvent;

	/**
	 * Event fired when the selectedItem option is about to change.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItem to get a reference to the current selected data item.
	 *             Use ui.newItem to get a reference to the newly selected data item.
	 *             Use ui.cancel to stop the selected item from changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItemChanging", optionValue: SelectedItemChangingEvent): void;

	/**
	 * Event fired when the selectedItem option has changed.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItem to get a reference to the previous selected data item.
	 *             Use ui.newItem to get a reference to the current selected data item.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItemChanged"): SelectedItemChangedEvent;

	/**
	 * Event fired when the selectedItem option has changed.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItem to get a reference to the previous selected data item.
	 *             Use ui.newItem to get a reference to the current selected data item.
	 *
	 * @optionValue Define event handler function.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItemChanged", optionValue: SelectedItemChangedEvent): void;

	/**
	 * Event fired when the selectedItems array is about to change.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItems to get a reference to the current selected data items.
	 *             Use ui.newItems to get a reference to the newly selected data items.
	 *             Use ui.cancel to stop the selected items from changing.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItemsChanging"): SelectedItemsChangingEvent;

	/**
	 * Event fired when the selectedItems array is about to change.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItems to get a reference to the current selected data items.
	 *             Use ui.newItems to get a reference to the newly selected data items.
	 *             Use ui.cancel to stop the selected items from changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItemsChanging", optionValue: SelectedItemsChangingEvent): void;

	/**
	 * Event fired when the selectedItems array has changed.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItems to get a reference to the previous selected data items.
	 *             Use ui.newItems to get a reference to the current selected data items.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItemsChanged"): SelectedItemsChangedEvent;

	/**
	 * Event fired when the selectedItems array has changed.
	 *             Function takes arguments evt and ui.
	 *             Use ui.oldItems to get a reference to the previous selected data items.
	 *             Use ui.newItems to get a reference to the current selected data items.
	 *
	 * @optionValue Define event handler function.
	 */
	igPieChart(optionLiteral: 'option', optionName: "selectedItemsChanged", optionValue: SelectedItemsChangedEvent): void;
	igPieChart(options: IgPieChart): JQuery;
	igPieChart(optionLiteral: 'option', optionName: string): any;
	igPieChart(optionLiteral: 'option', options: IgPieChart): JQuery;
	igPieChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igPieChart(methodName: string, ...methodParams: any[]): any;
}
interface LegendItemMouseLeftButtonDownEvent {
	(event: Event, ui: LegendItemMouseLeftButtonDownEventUIParam): void;
}

interface LegendItemMouseLeftButtonDownEventUIParam {
	/**
	 * Used to get reference to current legend object.
	 */
	legend?: any;

	/**
	 * Used to get reference to chart owner object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series owner object.
	 */
	series?: any;

	/**
	 * Used to get legend item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series owner brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get reference to chart item related to event.
	 */
	item?: any;
}

interface LegendItemMouseLeftButtonUpEvent {
	(event: Event, ui: LegendItemMouseLeftButtonUpEventUIParam): void;
}

interface LegendItemMouseLeftButtonUpEventUIParam {
	/**
	 * Used to get reference to current legend object.
	 */
	legend?: any;

	/**
	 * Used to get reference to chart owner object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series owner object.
	 */
	series?: any;

	/**
	 * Used to get legend item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series owner brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get reference to chart item related to event.
	 */
	item?: any;
}

interface LegendItemMouseEnterEvent {
	(event: Event, ui: LegendItemMouseEnterEventUIParam): void;
}

interface LegendItemMouseEnterEventUIParam {
	/**
	 * Used to get reference to current legend object.
	 */
	legend?: any;

	/**
	 * Used to get reference to chart owner object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series owner object.
	 */
	series?: any;

	/**
	 * Used to get legend item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series owner brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get reference to chart item related to event.
	 */
	item?: any;
}

interface LegendItemMouseLeaveEvent {
	(event: Event, ui: LegendItemMouseLeaveEventUIParam): void;
}

interface LegendItemMouseLeaveEventUIParam {
	/**
	 * Used to get reference to current legend object.
	 */
	legend?: any;

	/**
	 * Used to get reference to chart owner object.
	 */
	chart?: any;

	/**
	 * Used to get reference to current series owner object.
	 */
	series?: any;

	/**
	 * Used to get legend item brush.
	 */
	actualItemBrush?: any;

	/**
	 * Used to get series owner brush.
	 */
	actualSeriesBrush?: any;

	/**
	 * Used to get reference to chart item related to event.
	 */
	item?: any;
}

interface IgChartLegend {
	/**
	 * Type of the legend.
	 *
	 * Valid values:
	 * "item" Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.
	 * "legend" Specify the legend as legend. It is supported by all types of series in the igDataChart control.
	 * "scale" Specify the legend as a scale legend. It displays a color/size scale for the bubble series.
	 */
	type?: string;

	/**
	 * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * The swatch used to style this widget
	 */
	theme?: string;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 */
	legendItemMouseLeftButtonDown?: LegendItemMouseLeftButtonDownEvent;

	/**
	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 */
	legendItemMouseLeftButtonUp?: LegendItemMouseLeftButtonUpEvent;

	/**
	 * Occurs when the left mouse pointer enters an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 */
	legendItemMouseEnter?: LegendItemMouseEnterEvent;

	/**
	 * Occurs when the left mouse pointer leaves an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 */
	legendItemMouseLeave?: LegendItemMouseLeaveEvent;

	/**
	 * Option for igChartLegend
	 */
	[optionName: string]: any;
}
interface IgChartLegendMethods {
	exportVisualData(): void;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;

	/**
	 * Returns the element holding the legend.
	 */
	widget(): void;

	/**
	 * Returns the ID of the DOM element holding the legend.
	 */
	id(): string;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igChartLegend"): IgChartLegendMethods;
}

interface JQuery {
	igChartLegend(methodName: "exportVisualData"): void;
	igChartLegend(methodName: "destroy"): void;
	igChartLegend(methodName: "widget"): void;
	igChartLegend(methodName: "id"): string;
	igChartLegend(methodName: "changeLocale", $container: Object): void;
	igChartLegend(methodName: "changeGlobalLanguage"): void;
	igChartLegend(methodName: "changeGlobalRegional"): void;

	/**
	 * Type of the legend.
	 */

	igChartLegend(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Type of the legend.
	 *
	 * @optionValue New value to be set.
	 */

	igChartLegend(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igChartLegend(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igChartLegend(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igChartLegend(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igChartLegend(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * The swatch used to style this widget
	 */
	igChartLegend(optionLiteral: 'option', optionName: "theme"): string;

	/**
	 * The swatch used to style this widget
	 *
	 * @optionValue New value to be set.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "theme", optionValue: string): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igChartLegend(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igChartLegend(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igChartLegend(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igChartLegend(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeftButtonDown"): LegendItemMouseLeftButtonDownEvent;

	/**
	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 *
	 * @optionValue New value to be set.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeftButtonDown", optionValue: LegendItemMouseLeftButtonDownEvent): void;

	/**
	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeftButtonUp"): LegendItemMouseLeftButtonUpEvent;

	/**
	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 *
	 * @optionValue New value to be set.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeftButtonUp", optionValue: LegendItemMouseLeftButtonUpEvent): void;

	/**
	 * Occurs when the left mouse pointer enters an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseEnter"): LegendItemMouseEnterEvent;

	/**
	 * Occurs when the left mouse pointer enters an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 *
	 * @optionValue New value to be set.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseEnter", optionValue: LegendItemMouseEnterEvent): void;

	/**
	 * Occurs when the left mouse pointer leaves an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeave"): LegendItemMouseLeaveEvent;

	/**
	 * Occurs when the left mouse pointer leaves an element of this legend.
	 * Function takes arguments evt and ui.
	 * Use ui.legend to get reference to current legend object.
	 * Use ui.chart to get reference to chart owner object.
	 * Use ui.series to get reference to current series owner object.
	 * Use ui.actualItemBrush to get legend item brush.
	 * Use ui.actualSeriesBrush to get series owner brush.
	 * Use ui.item to get reference to chart item related to event.
	 *
	 * @optionValue New value to be set.
	 */
	igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeave", optionValue: LegendItemMouseLeaveEvent): void;
	igChartLegend(options: IgChartLegend): JQuery;
	igChartLegend(optionLiteral: 'option', optionName: string): any;
	igChartLegend(optionLiteral: 'option', options: IgChartLegend): JQuery;
	igChartLegend(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igChartLegend(methodName: string, ...methodParams: any[]): any;
}
interface ColorSelectedEvent {
	(event: Event, ui: ColorSelectedEventUIParam): void;
}

interface ColorSelectedEventUIParam {
	/**
	 * Used to get a reference to the color object.
	 */
	color?: any;
}

interface IgColorPicker {
	/**
	 * Gets/Sets the default colors. Default colors are the ones displayed in the upper table of the color picker.
	 *             The array should contain arrays that contain the color values for every next row.
	 *
	 */
	colors?: string;

	/**
	 * Gets/Sets the standard colors. Standard colors are the ones displayed in the color picker bottom,
	 *             visually separated from the default colors. The array should contain the color values.
	 *
	 */
	standardColors?: any[];

	/**
	 * The event is fired when a color is selected.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.color to get a reference to the color object.
	 */
	colorSelected?: ColorSelectedEvent;

	/**
	 * Option for igColorPicker
	 */
	[optionName: string]: any;
}
interface IgColorPickerMethods {
	/**
	 * Gets a reference to the div element of the color table
	 */
	colorTable(): Object;

	/**
	 * Gets a reference to the div element with the default or custom colors table.
	 */
	customColorTable(): Object;

	/**
	 * Returns the div element with the standard color table.
	 */
	standardColorsTable(): Object;

	/**
	 * Gets the color for an element from the color picker in RGB format.
	 *
	 * @param $element A jQuery element in the color picker from which the color will be retrieved.
	 */
	colorFromElement($element: Object): string;

	/**
	 * Returns the hexademical string of the currently selected color in the color picker. Returns null if no color is selected.
	 * @return string|null Returns the selected color if available. Null if no color is selected.
	 */
	selectedColor(): string;

	/**
	 * Select a color.
	 *
	 * @param color The #RGB value of the color to be selected.
	 */
	selectColor(color: string): Object;
}
interface JQuery {
	data(propertyName: "igColorPicker"): IgColorPickerMethods;
}

interface JQuery {
	igColorPicker(methodName: "colorTable"): Object;
	igColorPicker(methodName: "customColorTable"): Object;
	igColorPicker(methodName: "standardColorsTable"): Object;
	igColorPicker(methodName: "colorFromElement", $element: Object): string;
	igColorPicker(methodName: "selectedColor"): string;
	igColorPicker(methodName: "selectColor", color: string): Object;

	/**
	 * Gets/Sets the default colors. Default colors are the ones displayed in the upper table of the color picker.
	 *             The array should contain arrays that contain the color values for every next row.
	 *
	 */
	igColorPicker(optionLiteral: 'option', optionName: "colors"): string;

	/**
	 * /Sets the default colors. Default colors are the ones displayed in the upper table of the color picker.
	 *             The array should contain arrays that contain the color values for every next row.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igColorPicker(optionLiteral: 'option', optionName: "colors", optionValue: string): void;

	/**
	 * Gets/Sets the standard colors. Standard colors are the ones displayed in the color picker bottom,
	 *             visually separated from the default colors. The array should contain the color values.
	 *
	 */
	igColorPicker(optionLiteral: 'option', optionName: "standardColors"): any[];

	/**
	 * /Sets the standard colors. Standard colors are the ones displayed in the color picker bottom,
	 *             visually separated from the default colors. The array should contain the color values.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igColorPicker(optionLiteral: 'option', optionName: "standardColors", optionValue: any[]): void;

	/**
	 * The event is fired when a color is selected.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.color to get a reference to the color object.
	 */
	igColorPicker(optionLiteral: 'option', optionName: "colorSelected"): ColorSelectedEvent;

	/**
	 * The event is fired when a color is selected.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.color to get a reference to the color object.
	 *
	 * @optionValue New value to be set.
	 */
	igColorPicker(optionLiteral: 'option', optionName: "colorSelected", optionValue: ColorSelectedEvent): void;
	igColorPicker(options: IgColorPicker): JQuery;
	igColorPicker(optionLiteral: 'option', optionName: string): any;
	igColorPicker(optionLiteral: 'option', options: IgColorPicker): JQuery;
	igColorPicker(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igColorPicker(methodName: string, ...methodParams: any[]): any;
}
interface ClickEvent {
	(event: Event, ui: ClickEventUIParam): void;
}

interface ClickEventUIParam {
	/**
	 * Used to get a reference the igSplitButton element.
	 */
	item?: any;
}

interface ExpandedEvent {
	(event: Event, ui: ExpandedEventUIParam): void;
}

interface ExpandedEventUIParam {
	/**
	 * Used to get a reference the igSplitButton.
	 */
	owner?: any;
}

interface ExpandingEvent {
	(event: Event, ui: ExpandingEventUIParam): void;
}

interface ExpandingEventUIParam {
	/**
	 * Used to get a reference the igSplitButton.
	 */
	owner?: any;
}

interface CollapsedEvent {
	(event: Event, ui: CollapsedEventUIParam): void;
}

interface CollapsedEventUIParam {
	/**
	 * Used to get a reference the igSplitButton.
	 */
	owner?: any;
}

interface CollapsingEvent {
	(event: Event, ui: CollapsingEventUIParam): void;
}

interface CollapsingEventUIParam {
	/**
	 * Used to get a reference the igSplitButton.
	 */
	owner?: any;
}

interface IgColorPickerSplitButton {
	/**
	 * Button items.
	 *
	 */
	items?: any[];

	/**
	 * Gets/sets the button default color value.
	 *
	 */
	defaultColor?: string;

	/**
	 * If this option is set to true, the igColorPickerSplitButton will be rendered with an icon.
	 *
	 */
	hasDefaultIcon?: boolean;

	/**
	 * Default button item name.
	 *
	 */
	defaultItemName?: string;

	/**
	 * Specifies whether the default button will be switched when another button is selected.
	 *
	 */
	swapDefaultEnabled?: boolean;

	/**
	 * Event fired when the button is clicked.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.item to get a reference the igSplitButton element.
	 */
	click?: ClickEvent;

	/**
	 * Event fired after the button is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	expanded?: ExpandedEvent;

	/**
	 * Event fired before a button item is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	expanding?: ExpandingEvent;

	/**
	 * Event fired after the button is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	collapsed?: CollapsedEvent;

	/**
	 * Event fired before a button item is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	collapsing?: CollapsingEvent;

	/**
	 * Option for igColorPickerSplitButton
	 */
	[optionName: string]: any;
}
interface IgColorPickerSplitButtonMethods {
	/**
	 * Sets the color of the split button
	 *
	 * @param color The color value to be set.
	 */
	setColor(color: string): Object;

	/**
	 * Collapse the widget.
	 *
	 * @param e
	 */
	collapse(e: Object): Object;

	/**
	 * Expands the widget.
	 *
	 * @param e
	 */
	expand(e: Object): Object;

	/**
	 * Destroys the widget.
	 */
	destroy(): Object;

	/**
	 * Switch to given igToolbar button.
	 *
	 * @param button . The button jQuery element.
	 */
	switchToButton(button: Object): void;
	widget(): void;

	/**
	 * Toggle widget state between collapsed and expanded.
	 *
	 * @param e The igSplitButton to be expanded/collapsed.
	 */
	toggle(e: Object): Object;
}
interface JQuery {
	data(propertyName: "igColorPickerSplitButton"): IgColorPickerSplitButtonMethods;
}

interface JQuery {
	igColorPickerSplitButton(methodName: "setColor", color: string): Object;
	igColorPickerSplitButton(methodName: "collapse", e: Object): Object;
	igColorPickerSplitButton(methodName: "expand", e: Object): Object;
	igColorPickerSplitButton(methodName: "destroy"): Object;
	igColorPickerSplitButton(methodName: "switchToButton", button: Object): void;
	igColorPickerSplitButton(methodName: "widget"): void;
	igColorPickerSplitButton(methodName: "toggle", e: Object): Object;

	/**
	 * Button items.
	 *
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "items"): any[];

	/**
	 * Button items.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "items", optionValue: any[]): void;

	/**
	 * Gets/ the button default color value.
	 *
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "defaultColor"): string;

	/**
	 * /sets the button default color value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "defaultColor", optionValue: string): void;

	/**
	 * If this option is set to true, the igColorPickerSplitButton will be rendered with an icon.
	 *
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "hasDefaultIcon"): boolean;

	/**
	 * If this option is set to true, the igColorPickerSplitButton will be rendered with an icon.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "hasDefaultIcon", optionValue: boolean): void;

	/**
	 * Default button item name.
	 *
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "defaultItemName"): string;

	/**
	 * Default button item name.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "defaultItemName", optionValue: string): void;

	/**
	 * Gets whether the default button will be switched when another button is selected.
	 *
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "swapDefaultEnabled"): boolean;

	/**
	 * Sets whether the default button will be switched when another button is selected.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "swapDefaultEnabled", optionValue: boolean): void;

	/**
	 * Event fired when the button is clicked.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.item to get a reference the igSplitButton element.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "click"): ClickEvent;

	/**
	 * Event fired when the button is clicked.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.item to get a reference the igSplitButton element.
	 *
	 * @optionValue Define event handler function.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "click", optionValue: ClickEvent): void;

	/**
	 * Event fired after the button is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "expanded"): ExpandedEvent;

	/**
	 * Event fired after the button is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "expanded", optionValue: ExpandedEvent): void;

	/**
	 * Event fired before a button item is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "expanding"): ExpandingEvent;

	/**
	 * Event fired before a button item is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "expanding", optionValue: ExpandingEvent): void;

	/**
	 * Event fired after the button is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "collapsed"): CollapsedEvent;

	/**
	 * Event fired after the button is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "collapsed", optionValue: CollapsedEvent): void;

	/**
	 * Event fired before a button item is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "collapsing"): CollapsingEvent;

	/**
	 * Event fired before a button item is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igColorPickerSplitButton(optionLiteral: 'option', optionName: "collapsing", optionValue: CollapsingEvent): void;
	igColorPickerSplitButton(options: IgColorPickerSplitButton): JQuery;
	igColorPickerSplitButton(optionLiteral: 'option', optionName: string): any;
	igColorPickerSplitButton(optionLiteral: 'option', options: IgColorPickerSplitButton): JQuery;
	igColorPickerSplitButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igColorPickerSplitButton(methodName: string, ...methodParams: any[]): any;
}
interface IgComboLocale {
	/**
	 * Gets/Sets text of list item for condition when [filteringType](ui.igcombo#options:filteringType) option is enabled and no match was found.
	 *
	 */
	noMatchFoundText?: any;

	/**
	 * Gets/Sets title for html element which represent the drop-down button.
	 *
	 */
	dropDownButtonTitle?: any;

	/**
	 * Gets/Sets title for html element which represent the clear button.
	 *
	 */
	clearButtonTitle?: any;

	/**
	 * Gets/Sets value that is displayed when input field is empty.
	 *
	 */
	placeHolder?: any;

	/**
	 * Option for IgComboLocale
	 */
	[optionName: string]: any;
}

interface IgComboLoadOnDemandSettings {
	/**
	 * Gets/Sets option to enable load on demand.
	 *
	 */
	enabled?: boolean;

	/**
	 * Gets/Sets number of records loaded on each request.
	 *
	 */
	pageSize?: number;

	/**
	 * Option for IgComboLoadOnDemandSettings
	 */
	[optionName: string]: any;
}

interface IgComboMultiSelection {
	/**
	 * Set enabled to true to turn multi selection on. Set to true by default when target element for the combo is a select with the multiple attribute set.
	 *
	 */
	enabled?: boolean;

	/**
	 * Set addWithKeyModifier to true to disable the additive selection, then additive selection can be done by ctrl + mouse click / enter.
	 *
	 */
	addWithKeyModifier?: boolean;

	/**
	 * Set showCheckboxes to true to render check boxes in front of each drop down item.
	 *
	 */
	showCheckboxes?: boolean;

	/**
	 * Use itemSeparator to set what string to be rendered between items in field.
	 *
	 */
	itemSeparator?: string;

	/**
	 * Option for IgComboMultiSelection
	 */
	[optionName: string]: any;
}

interface IgComboGrouping {
	/**
	 * Gets/Sets name of column by which the records will be grouped. Setting this option enables the grouping.
	 *
	 */
	key?: string;

	/**
	 * Specifies the sort order - ascending or descending.
	 *
	 *
	 * Valid values:
	 * "asc"
	 * "desc"
	 */
	dir?: string;

	/**
	 * Option for IgComboGrouping
	 */
	[optionName: string]: any;
}

interface IgComboInitialSelectedItem {
	/**
	 * Optional="true" Index of item in the list. The index should be greater than -1 and less than the count of the [items](ui.igcombo#methods:items) in the list (rows in dataSource).
	 *
	 */
	index?: number;

	/**
	 * Optional="true" Value matching the [valueKey](ui.igcombo#options:valueKey) property of the item.
	 *
	 */
	value?: any;

	/**
	 * Option for IgComboInitialSelectedItem
	 */
	[optionName: string]: any;
}

interface RenderedEvent {
	(event: Event, ui: RenderedEventUIParam): void;
}

interface RenderedEventUIParam {
	/**
	 * Used to get a reference to the combo performing rendering.
	 */
	owner?: any;

	/**
	 * Used to get a reference to the main/top combo element.
	 */
	element?: any;
}

interface FilteringEvent {
	(event: Event, ui: FilteringEventUIParam): void;
}

interface FilteringEventUIParam {
	/**
	 * Used to obtain reference to igCombo.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to array which contains expressions supported by [$.ig.DataSource](ig.datasource).
	 */
	expression?: any;
}

interface FilteredEvent {
	(event: Event, ui: FilteredEventUIParam): void;
}

interface FilteredEventUIParam {
	/**
	 * Used to obtain reference to igCombo.
	 */
	owner?: any;

	/**
	 * Used to obtain a jquery reference to the rendered filtered elements.
	 */
	elements?: any;
}

interface ItemsRenderingEvent {
	(event: Event, ui: ItemsRenderingEventUIParam): void;
}

interface ItemsRenderingEventUIParam {
	/**
	 * Used to get a reference to the combo performing rendering.
	 */
	owner?: any;

	/**
	 * Used to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 */
	dataSource?: any;
}

interface ItemsRenderedEvent {
	(event: Event, ui: ItemsRenderedEventUIParam): void;
}

interface ItemsRenderedEventUIParam {
	/**
	 * Used to get a reference to the combo performing rendering.
	 */
	owner?: any;

	/**
	 * Used to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 */
	dataSource?: any;
}

interface DropDownOpeningEvent {
	(event: Event, ui: DropDownOpeningEventUIParam): void;
}

interface DropDownOpeningEventUIParam {
	/**
	 * Used to obtain reference to igCombo.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to jquery DOM element which represents drop down list container.
	 */
	list?: any;
}

interface DropDownOpenedEvent {
	(event: Event, ui: DropDownOpenedEventUIParam): void;
}

interface DropDownOpenedEventUIParam {
	/**
	 * Used to obtain reference to igCombo.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to jquery DOM element which represents drop down list container.
	 */
	list?: any;
}

interface DropDownClosingEvent {
	(event: Event, ui: DropDownClosingEventUIParam): void;
}

interface DropDownClosingEventUIParam {
	/**
	 * Used to obtain reference to igCombo.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to jquery DOM element which represents drop down list container.
	 */
	list?: any;
}

interface DropDownClosedEvent {
	(event: Event, ui: DropDownClosedEventUIParam): void;
}

interface DropDownClosedEventUIParam {
	/**
	 * Used to obtain reference to igCombo.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to jquery DOM element which represents drop down list container.
	 */
	list?: any;
}

interface SelectionChangingEvent {
	(event: Event, ui: SelectionChangingEventUIParam): void;
}

interface SelectionChangingEventUIParam {
	/**
	 * Used to obtain reference to igCombo.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to array of the selected items before the new selection has happened. That can be null.
	 */
	currentItems?: any;

	/**
	 * Used to obtain reference to array of all items that will be selected after the selection finish. That can be null.
	 */
	items?: any;
}

interface IgComboSelectionChangedEvent {
	(event: Event, ui: IgComboSelectionChangedEventUIParam): void;
}

interface IgComboSelectionChangedEventUIParam {
	/**
	 * Used to obtain reference to igCombo.
	 */
	owner?: any;

	/**
	 * Used to obtain reference to array of new selected items. That can be null.
	 */
	items?: any;

	/**
	 * Used to obtain reference to array of old selected items. That can be null.
	 */
	oldItems?: any;
}

interface IgCombo {
	/**
	 * Gets/Sets the width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
	 *
	 */
	width?: string|number;

	/**
	 * Gets/Sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
	 *
	 */
	height?: string|number;

	/**
	 * Gets/Sets the width of drop-down list in pixels.
	 *
	 *
	 * Valid values:
	 * "string" The default drop-down list width can be set in pixels (px).
	 * "number" The default drop-down list width can be set as a number.
	 */
	dropDownWidth?: string|number;

	/**
	 * Gets/Sets a valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
	 * Note: if it is set to string and [dataSourceType](ui.igcombo#options:dataSourceType) option is not set, then [$.ig.JSONDataSource](ig.jsondatasource) is used.
	 *
	 */
	dataSource?: any;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of [$.ig.DataSource](ig.datasource) and its [type](ig.datasource#options:settings.type) property.
	 *
	 */
	dataSourceType?: string;

	/**
	 * Sets URL which is used for sending JSON on request for remote filtering (MVC for example). That option is required when [load on demand](ui.igcombo#options:loadOnDemandSettings) is
	 * [enabled](ui.igcombo#options:loadOnDemandSettings.enabled) and its [type](ui.igcombo#options:filteringType) is remote.
	 *
	 */
	dataSourceUrl?: string;

	/**
	 * See [$.ig.DataSource](ig.datasource) property in the response specifying the total number of records on the server.
	 *
	 */
	responseTotalRecCountKey?: string;

	/**
	 * See [$.ig.DataSource](ig.datasource) This is basically the property in the response where data records are held, if the response is wrapped.
	 *
	 */
	responseDataKey?: string;

	/**
	 * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType.
	 *
	 *
	 * Valid values:
	 * "json"
	 * "xml"
	 * "html"
	 * "script"
	 * "jsonp"
	 * "text"
	 */
	responseDataType?: string;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
	 *
	 */
	responseContentType?: string;

	/**
	 * Specifies the HTTP verb to be used to issue the request.
	 *
	 */
	requestType?: string;

	/**
	 * Gets/Sets name of column which contains the "value". If it is missing, then the name of first column will be used.
	 *
	 */
	valueKey?: string;

	/**
	 * Gets/Sets name of column which contains the displayed text. If it is missing, then [valueKey](ui.igcombo#options:valueKey) option will be used.
	 *
	 */
	textKey?: string;

	/**
	 * Gets/Sets a template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
	 * More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine.
	 *
	 */
	itemTemplate?: string;

	/**
	 * Gets/Sets template used to render a header in the drop-down list. The template is rendered inside of a DIV html element.
	 *
	 */
	headerTemplate?: string;

	/**
	 * Gets/Sets template used to render a footer in the drop-down list.
	 * Notes:
	 * 1. The template is rendered inside of DIV html element.
	 * 2. The following variables can be used:
	 * - {0}: Number of records in igCombo (view of dataSource)
	 * - {1}: Number of records in dataSource
	 * - {2}: Number of (filtered) records on server
	 * - {3}: Number of all records on server
	 *
	 */
	footerTemplate?: string;

	/**
	 * Gets/Sets the name of a hidden INPUT element, which is used when submitting data. Its value will be set to the values of the selected items valueKeys separated by ',' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets show drop-down list animation duration in milliseconds.
	 *
	 */
	animationShowDuration?: number;

	/**
	 * Gets/Sets hide drop-down list animation duration in milliseconds.
	 *
	 */
	animationHideDuration?: number;

	/**
	 * If set to true, the container of the drop-down list is appended to the body.
	 * If set to false, it is appended to the parent element of the combo.
	 *
	 */
	dropDownAttachedToBody?: boolean;

	/**
	 * Gets/Sets type of filtering.Note: option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
	 *
	 *
	 * Valid values:
	 * "remote" filtering is performed by server
	 * "local" filtering is performed by $.ig.DataSource
	 * "none" filtering is disabled
	 */
	filteringType?: string;

	/**
	 * Gets/Sets URL key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
	 *
	 */
	filterExprUrlKey?: string;

	/**
	 * Gets/Sets condition used for filtering.Note: When [autoComplete](ui.igcombo#options:autoComplete) is enabled, the filtering condition is always "startsWith".
	 *
	 *
	 * Valid values:
	 * "contains"
	 * "doesNotContain"
	 * "startsWith"
	 * "endsWith"
	 * "greaterThan"
	 * "lessThan"
	 * "greaterThanOrEqualTo"
	 * "lessThanOrEqualTo"
	 * "equals"
	 * "doesNotEqual"
	 */
	filteringCondition?: string;

	/**
	 * Gets/Sets filtering logic.
	 *
	 *
	 * Valid values:
	 * "OR"
	 * "AND"
	 */
	filteringLogic?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets text of list item for condition when [filteringType](ui.igcombo#options:filteringType) option is enabled and no match was found.
	 * Use option [locale.noMatchFoundText](ui.igcombo#options:locale.noMatchFoundText).
	 */
	noMatchFoundText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets title for html element which represent the drop-down button.
	 * Use option [locale.dropDownButtonTitle](ui.igcombo#options:locale.dropDownButtonTitle).
	 */
	dropDownButtonTitle?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets title for html element which represent clear button.
	 * Use option [locale.clearButtonTitle](ui.igcombo#options:locale.clearButtonTitle).
	 */
	clearButtonTitle?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets value that is displayed when input field is empty.
	 * Use option [locale.placeHolder](ui.igcombo#options:locale.placeHolder).
	 */
	placeHolder?: string;
	locale?: IgComboLocale;

	/**
	 * Gets/Sets container of variables which define load on demand functionality.
	 * Notes:
	 * That option has effect only when data is loaded remotely using [dataSourceUrl](ui.igcombo#options:dataSourceUrl).
	 * Selection is supported only for already loaded items.
	 *
	 */
	loadOnDemandSettings?: IgComboLoadOnDemandSettings;

	/**
	 * Gets/Sets how many items should be shown at once.
	 *    Notes:
	 *    This option is used for [virtualization](ui.igcombo#options:virtualization) in order to render initial list items.
	 *
	 */
	visibleItemsCount?: number;

	/**
	 * Sets gets functionality mode.
	 *
	 *
	 * Valid values:
	 * "editable" Allows to modify value by edit field and drop-down list.
	 * "dropdown" Allows to modify value by drop-down list only.
	 * "readonlylist" Allows to open list, but does not allow any changes in field or selection in drop-down list. If selection is not set, then first item in [dataSource](ui.igcombo#options:dataSource) is automatically selected.
	 * "readonly" Does not allow to open list or change value in field. If selection is not set, then first item in [dataSource](ui.igcombo#options:dataSource) is automatically selected.
	 */
	mode?: string;

	/**
	 * Gets/Sets ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
	 * If that option is enabled, then only visible items are created and the top edge of the first visible item in list is aligned to the top edge of list.
	 *
	 */
	virtualization?: boolean;

	/**
	 * Gets/Sets object specifying multi selection feature options. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
	 *
	 */
	multiSelection?: IgComboMultiSelection;

	/**
	 * Gets/Sets object specifying grouping feature options. The option has key and dir properties.
	 *
	 */
	grouping?: IgComboGrouping;

	/**
	 * Gets/Sets object which contains options supported by [igValidator](ui.igvalidator).
	 * Notes: in order for validator to work, application should ensure that [igValidator](ui.igvalidator) is loaded (ig.ui.validator.js/css files).
	 *
	 */
	validatorOptions?: any;

	/**
	 * Gets/Sets condition used for highlighting of matching parts in items of drop-down list.
	 *
	 *
	 * Valid values:
	 * "multi" multiple matches in a single item are rendered
	 * "contains" match at any position in item is rendered
	 * "startsWith" only match which starts from the beginning of text is rendered
	 * "full" only fully matched items are rendered
	 * "null" matches are not rendered
	 */
	highlightMatchesMode?: string;

	/**
	 * If set to true, filtering and auto selection will be case-sensitive.
	 *
	 */
	caseSensitive?: boolean;

	/**
	 * Gets/Sets whether the first matching item should be auto selected when typing in input. When [multiSelection](ui.igcombo#options:multiSelection) is enabled this option will instead put the active item on the matching element.
	 *
	 */
	autoSelectFirstMatch?: boolean;

	/**
	 * Gets/Sets ability to autocomplete field from first matching item in list.
	 * Note: When autoComplete option is enabled, then "startsWith" is used for [filteringCondition](ui.igcombo#options:filteringCondition).
	 *
	 */
	autoComplete?: boolean;

	/**
	 * If set to true:
	 * 1. Allows custom value input only with single selection.
	 * 2. Custom values will be auto completed to the closest value if [autoComplete](ui.igcombo#options:autoComplete) is enabled.
	 *
	 */
	allowCustomValue?: boolean;

	/**
	 * Gets/Sets ability to close drop-down list when control loses focus.
	 *
	 */
	closeDropDownOnBlur?: boolean;

	/**
	 * Specifies the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
	 *
	 */
	delayInputChangeProcessing?: number;

	/**
	 * Gets/Sets tabIndex for the field of the combo.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets ability to show the drop-down list when the combo is in focus. This option has effect only if the combo is in editable [mode](ui.igcombo#options:mode).
	 *
	 */
	dropDownOnFocus?: boolean;

	/**
	 * Gets sets ability to close drop-down list when single item in the list is selected with mouse click or enter press. The default value when [multiSelection](ui.igcombo#options:multiSelection) is enabled will be false. This option will not close the drop down when [multiSelection](ui.igcombo#options:multiSelection) is enabled and additive selection is performed.
	 *
	 */
	closeDropDownOnSelect?: boolean;

	/**
	 * Gets/Sets ability to select items by space button press.
	 *
	 */
	selectItemBySpaceKey?: boolean;

	/**
	 * Gets/Sets list of items to be selected when the combo is initialized. It should contain array of objects with index or value property, then on initialization the matching items will be selected. If initialSelectedItems are not set, the combo is with single selection and it is in a dropdown, readonly or readonlylist [mode](ui.igcombo#options:mode), the first item will be automatically selected.
	 * Note: Only items loaded on initialization can be selected. When using [load on demand](ui.igCombo#options:loadOnDemandSettings), selecting an item which is not loaded yet will fail.
	 *
	 */
	initialSelectedItems?: IgComboInitialSelectedItem[];

	/**
	 * Gets/Sets ability to prevent submitting form on enter key press.
	 *
	 */
	preventSubmitOnEnter?: boolean;

	/**
	 * Gets/Sets the format string that is used to format the text display values in the combo.
	 * Valid options are:
	 * "auto" (default) - uses automatic formatting for Date and number objects.
	 * "none", "", or null - will disable formatting
	 *
	 * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
	 *
	 * Custom format strings should match the data type in "textKey" column.
	 *
	 */
	format?: string;

	/**
	 * Gets/Sets whether the onscreen keyboard should be shown when the dropdown button is clicked (touch devices only).
	 * Note: The keyboard will still show when the combo input is focused in editable mode.
	 *
	 */
	suppressKeyboard?: boolean;

	/**
	 * Specifies whether the clear button should be rendered.
	 * When the [mode](ui.igcombo#options:mode) is single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
	 *
	 */
	enableClearButton?: boolean;

	/**
	 * Gets/Sets drop-down list orientation when open button is clicked.
	 *
	 *
	 * Valid values:
	 * "auto" if there is enough space, it positions the drop-down list below the combo input, otherwise - above the combo input
	 * "bottom" below the combo input
	 * "top" above the combo input
	 */
	dropDownOrientation?: string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is raised after rendering of the combo completes.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to the combo performing rendering.
	 * Use ui.element to get a reference to the main/top combo element.
	 */
	rendered?: RenderedEvent;

	/**
	 * Event which is raised before data binding is performed.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to igCombo performing the databinding.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is to be databound to.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event which is raised after data binding is complete.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo performing the data binding.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 * Use ui.success to see if the databinding was performed correctly.
	 * Use ui.errorMessage to get the error message if the databinding failed.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event which is raised before data filtering.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.expression to obtain reference to array which contains expressions supported by [$.ig.DataSource](ig.datasource).
	 * Each expression-item contains following members: fieldName ([textKey](ui.igcombo#options:textKey)), cond ([filteringCondition](ui.igcombo#options:filteringCondition)), expr (value/string to filter).
	 */
	filtering?: FilteringEvent;

	/**
	 * Event which is raised after filtering.
	 *
	 * Function takes arguments evt and ui.
	 * Use evt.originalEvent to obtain reference to event of browser. That can be null.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
	 */
	filtered?: FilteredEvent;

	/**
	 * Event which is raised before rendering of the combo items is performed.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to the combo performing rendering.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 */
	itemsRendering?: ItemsRenderingEvent;

	/**
	 * Event which is raised after rendering of the combo items completes.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to the combo performing rendering.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 */
	itemsRendered?: ItemsRenderedEvent;

	/**
	 * Event which is raised before drop-down list is opened.
	 *
	 * Return false in order to cancel drop-down action.
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 */
	dropDownOpening?: DropDownOpeningEvent;

	/**
	 * Event which is raised after drop-down list was opened.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 */
	dropDownOpened?: DropDownOpenedEvent;

	/**
	 * Event which is raised before drop-down list is closed.
	 *
	 * Return false in order to cancel hide action.
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 */
	dropDownClosing?: DropDownClosingEvent;

	/**
	 * Event which is raised after drop-down list was closed.
	 *
	 * Function takes arguments evt and ui.
	 * Use evt.originalEvent to obtain reference to event of browser.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 */
	dropDownClosed?: DropDownClosedEvent;

	/**
	 * Event which is raised before selection change.
	 *
	 * Return false in order to cancel change.
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
	 * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
	 */
	selectionChanging?: SelectionChangingEvent;

	/**
	 * Event which is raised after selection change.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.items to obtain reference to array of new selected items. That can be null.
	 * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
	 */
	selectionChanged?: IgComboSelectionChangedEvent;

	/**
	 * Option for igCombo
	 */
	[optionName: string]: any;
}
interface IgComboMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igcombo#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igcombo#options:language) or [locale](ui.igcombo#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igcombo#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.igcombo#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Performs databinding on the combo box. The [databinding](ui.igcombo#events:dataBinding) and [dataBound](ui.igcombo#events:dataBound) events are always raised.
	 */
	dataBind(): Object;

	/**
	 * Forces an update of the igCombo value according to the current text in the igCombo input.
	 *
	 * The refresh is primarily intended to be used with [allowCustomValue](ui.igcombo#options:allowCustomValue) set to true.
	 * The refresh will take the current text and, if no selection is applied, will set it as igCombo value provided that [allowCustomValue](ui.igcombo#options:allowCustomValue) true.
	 */
	refreshValue(): Object;

	/**
	 * Gets the associated data of an item by value matching it's [valueKey](ui.igcombo#options:valueKey) property.
	 *
	 * @param value Value matching the valueKey property of item to be tested if it is selected
	 */
	dataForValue(value: Object): Object;

	/**
	 * Gets the associated data of li element in the combo.
	 *
	 * @param $element jQuery element of item in the drop down list
	 */
	dataForElement($element: Object): Object;

	/**
	 * Gets object/s containing data and list item in the combo by element/s.
	 *
	 * @param $element jQuery object with drop down list item element or elements
	 */
	itemsFromElement($element: Object): Object;

	/**
	 * Gets object/s containing data and list item in the combo by value/s.
	 *
	 * @param value Value of item in the drop down list or array with values.
	 */
	itemsFromValue(value: Object): Object;

	/**
	 * Gets object/s containing data and list item in the combo by index/es.
	 *
	 * @param index Index or array of indexes of items in the drop down list
	 */
	itemsFromIndex(index: number): Object;

	/**
	 * Gets array with data and objects representing li elements in combo box.
	 */
	items(): any[];

	/**
	 * Gets array with objects representing the filtered li elements in combo box.
	 */
	filteredItems(): any[];

	/**
	 * Gets array with objects representing selected li elements in combo box.
	 */
	selectedItems(): any[];

	/**
	 * Triggers filtering.
	 *
	 * @param texts Filter by string, or array of strings.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
	 */
	filter(texts?: Object, event?: Object): Object;

	/**
	 * Creates expressions for filtering.
	 *
	 * @param expressions Filter by array of objects, such as each object represents filtering expression.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
	 */
	filterByExpressions(expressions: any[], event?: Object): Object;

	/**
	 * Clears filtering.
	 *
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
	 */
	clearFiltering(event?: Object): Object;

	/**
	 * Opens the drop-down.
	 *
	 * @param callback Specifies callback function to be executed when open animation is completed.
	 * @param focusCombo Set to false to not focus combo"s text input after the drop down is opened. By default the combo's input is focused.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownOpening](ui.igcombo#events:dropDownOpening) and [dropDownOpened](ui.igcombo#events:dropDownOpened) events.
	 */
	openDropDown(callback?: Function, focusCombo?: boolean, event?: Object): Object;

	/**
	 * Closes the drop down.
	 *
	 * @param callback Specifies callback function to be executed when close animation is completed.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownClosing](ui.igcombo#events:dropDownClosing) and [dropDownClosed](ui.igcombo#events:dropDownClosed) events.
	 */
	closeDropDown(callback?: Function, event?: Object): Object;

	/**
	 * Clears the input text, resets highlighting, filtering and selection.
	 *
	 * @param options Object with set of options controlling the behavior of this api method.
	 * focusCombo (boolean): Set to true to focus combo after clearing the input.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
	 */
	clearInput(options?: Object, event?: Object): Object;

	/**
	 * Verifies whether the specified li is selected.
	 *
	 * @param $item jQuery object with item to verify whether it is selected.
	 */
	isSelected($item: Object): boolean;

	/**
	 * Verifies whether a specified value is selected.
	 *
	 * @param value Value matching the [valueKey](ui.igcombo#options:valueKey) property of item to be tested if it is selected
	 */
	isValueSelected(value: Object): boolean;

	/**
	 * Verifies whether the li representing the data source's record at the specified index is selected.
	 *
	 * @param index Index of data source record
	 */
	isIndexSelected(index: Object): boolean;

	/**
	 * Selects list item/items from the drop-down list by specified value or array of values. When called witout params will return the value of the selected item or if [multiSelection](ui.igcombo#options:multiSelection) is enabled array of selected values.
	 *
	 * @param value Value or array of values matching the valueKey property of item/items to be selected
	 * @param options Object with set of options controlling the behavior of this api method.
	 * closeDropDown (boolean): Set to true to close the drop down list after the selection.
	 * focusCombo (boolean): Set to true to focus combo after the selection.
	 * additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
	 * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
	 * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
	 * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
	 * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
	 * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
	 */
	value(value?: Object, options?: Object, event?: Object): Object;

	/**
	 * Selects a list item from the drop-down list.
	 *
	 * @param $items jQuery object with item or items to be selected.
	 * @param options Object with set of options controlling the behavior of this api method.
	 * closeDropDown (boolean): Set to true to close the drop down list after the selection.
	 * focusCombo (boolean): Set to true to focus combo after the selection.
	 * additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
	 * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
	 * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
	 * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
	 * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
	 * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
	 */
	select($items: Object, options?: Object, event?: Object): Object;

	/**
	 * Gets/Sets selected item/s from the drop-down list by specified index.
	 *
	 * @param index Index or array of indexes of items to be selected
	 * @param options Object with set of options controlling the behavior of this api method.
	 * closeDropDown (boolean): Set to true to close the drop down list after the selection.
	 * focusCombo (boolean): Set to true to focus combo after the selection.
	 * additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
	 * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
	 * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
	 * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
	 * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
	 * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
	 */
	index(index?: Object, options?: Object, event?: Object): Object;

	/**
	 * Selects all items from the drop-down list.
	 *
	 * @param options Object with set of options controlling the behavior of this api method.
	 * closeDropDown (boolean): Set to true to close the drop down list after the selection.
	 * focusCombo (boolean): Set to true to focus combo after the selection.
	 * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
	 * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
	 * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
	 * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
	 * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
	 */
	selectAll(options?: Object, event?: Object): Object;

	/**
	 * Deselects a list item from the drop down list by value.
	 *
	 * @param value Value or array of values matching the [valueKey](ui.igcombo#options:valueKey) property of item/items to be deselected
	 * @param options Object with set of options controlling the behavior of this api method.
	 * focusCombo (boolean): Set to true to focus combo after the deselection.
	 * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
	 */
	deselectByValue(value: Object, options?: Object, event?: Object): Object;

	/**
	 * Deselects a list item from the drop down list.
	 *
	 * @param $items jQuery object with item or items to be deselected
	 * @param options Object with set of options controlling the behavior of this api method.
	 * focusCombo (boolean): Set to true to focus combo after the deselection.
	 * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
	 */
	deselect($items: Object, options?: Object, event?: Object): Object;

	/**
	 * Deselects a list item from the drop down list by index.
	 *
	 * @param index Index or array of indexes of items to be selected
	 * @param options Object with set of options controlling the behavior of this api method.
	 * focusCombo (boolean): Set to true to focus combo after the deselection.
	 * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
	 */
	deselectByIndex(index: Object, options?: Object, event?: Object): Object;

	/**
	 * Deselects all selected items from the drop down list.
	 *
	 * @param options Object with set of options controlling the behavior of this api method.
	 * focusCombo (boolean): Set to true to focus combo after the deselection.
	 * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
	 * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
	 */
	deselectAll(options?: Object, event?: Object): Object;

	/**
	 * Gets/Sets index of active item in list.
	 *
	 * @param index New active index for list. In order to clear active item, use -1.
	 * @return number|object Returns index of active item in list or -1, if parameter is undefined. Otherwise, it returns reference to this igCombo.
	 */
	activeIndex(index?: number): number|Object;

	/**
	 * Gets/Sets text in text input field.
	 *
	 * @param text New text value for combo's input field.
	 * @return string|object If parameter is undefined, then current text in field is returned. Otherwise, it returns reference to this igCombo.
	 */
	text(text?: string): string|Object;

	/**
	 * Gets/Sets scrollTop attribute of html element, which scrolls drop-down list of items.
	 *
	 * @param value New value for scroll top in list. Note: if list is closed and new value is provided, then openDropDown() is called automatically.
	 * @return number|object If parameter is undefined, then scrollTop is returned. Otherwise, it returns reference to this igCombo.
	 */
	listScrollTop(value?: number): number|Object;

	/**
	 * Gets jQuery objects representing all rendered list items in the combo drop down list.
	 */
	listItems(): Object;

	/**
	 * Gets jQuery object of the outer element of the combo.
	 */
	comboWrapper(): Object;

	/**
	 * Gets jQuery object of the drop down associated with this combo widget
	 */
	dropDown(): Object;

	/**
	 * Gets jQuery object of the container that holds the list with items.
	 */
	list(): Object;

	/**
	 * Gets jQuery object of the text input associated with this combo widget.
	 */
	textInput(): Object;

	/**
	 * Gets jQuery object of the value input associated with this combo widget.
	 */
	valueInput(): Object;

	/**
	 * Gets reference to [igValidator](ui.igvalidator) used by igCombo.
	 *
	 * @param destroy Request to destroy validator.
	 */
	validator(destroy?: boolean): Object;

	/**
	 * Trigger validation.
	 */
	validate(): boolean;

	/**
	 * Returns boolean representing whether the combo drop down list is opened.
	 */
	dropDownOpened(): boolean;

	/**
	 * Repositions drop down under combo input. Has effect only when the drop down is attached to body.
	 */
	positionDropDown(): Object;

	/**
	 * Destroys the igCombo widget.
	 */
	destroy(): Object;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igCombo"): IgComboMethods;
}

interface JQuery {
	igCombo(methodName: "changeLocale"): void;
	igCombo(methodName: "changeRegional"): void;
	igCombo(methodName: "dataBind"): Object;
	igCombo(methodName: "refreshValue"): Object;
	igCombo(methodName: "dataForValue", value: Object): Object;
	igCombo(methodName: "dataForElement", $element: Object): Object;
	igCombo(methodName: "itemsFromElement", $element: Object): Object;
	igCombo(methodName: "itemsFromValue", value: Object): Object;
	igCombo(methodName: "itemsFromIndex", index: number): Object;
	igCombo(methodName: "items"): any[];
	igCombo(methodName: "filteredItems"): any[];
	igCombo(methodName: "selectedItems"): any[];
	igCombo(methodName: "filter", texts?: Object, event?: Object): Object;
	igCombo(methodName: "filterByExpressions", expressions: any[], event?: Object): Object;
	igCombo(methodName: "clearFiltering", event?: Object): Object;
	igCombo(methodName: "openDropDown", callback?: Function, focusCombo?: boolean, event?: Object): Object;
	igCombo(methodName: "closeDropDown", callback?: Function, event?: Object): Object;
	igCombo(methodName: "clearInput", options?: Object, event?: Object): Object;
	igCombo(methodName: "isSelected", $item: Object): boolean;
	igCombo(methodName: "isValueSelected", value: Object): boolean;
	igCombo(methodName: "isIndexSelected", index: Object): boolean;
	igCombo(methodName: "value", value?: Object, options?: Object, event?: Object): Object;
	igCombo(methodName: "select", $items: Object, options?: Object, event?: Object): Object;
	igCombo(methodName: "index", index?: Object, options?: Object, event?: Object): Object;
	igCombo(methodName: "selectAll", options?: Object, event?: Object): Object;
	igCombo(methodName: "deselectByValue", value: Object, options?: Object, event?: Object): Object;
	igCombo(methodName: "deselect", $items: Object, options?: Object, event?: Object): Object;
	igCombo(methodName: "deselectByIndex", index: Object, options?: Object, event?: Object): Object;
	igCombo(methodName: "deselectAll", options?: Object, event?: Object): Object;
	igCombo(methodName: "activeIndex", index?: number): number|Object;
	igCombo(methodName: "text", text?: string): string|Object;
	igCombo(methodName: "listScrollTop", value?: number): number|Object;
	igCombo(methodName: "listItems"): Object;
	igCombo(methodName: "comboWrapper"): Object;
	igCombo(methodName: "dropDown"): Object;
	igCombo(methodName: "list"): Object;
	igCombo(methodName: "textInput"): Object;
	igCombo(methodName: "valueInput"): Object;
	igCombo(methodName: "validator", destroy?: boolean): Object;
	igCombo(methodName: "validate"): boolean;
	igCombo(methodName: "dropDownOpened"): boolean;
	igCombo(methodName: "positionDropDown"): Object;
	igCombo(methodName: "destroy"): Object;
	igCombo(methodName: "changeGlobalLanguage"): void;
	igCombo(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets/Sets the width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets the width of drop-down list in pixels.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "dropDownWidth"): string|number;

	/**
	 * /Sets the width of drop-down list in pixels.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "dropDownWidth", optionValue: string|number): void;

	/**
	 * Gets/Sets a valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
	 * Note: if it is set to string and [dataSourceType](ui.igcombo#options:dataSourceType) option is not set, then [$.ig.JSONDataSource](ig.jsondatasource) is used.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * /Sets a valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
	 * Note: if it is set to string and [dataSourceType](ui.igcombo#options:dataSourceType) option is not set, then [$.ig.JSONDataSource](ig.jsondatasource) is used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of [$.ig.DataSource](ig.datasource) and its [type](ig.datasource#options:settings.type) property.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of [$.ig.DataSource](ig.datasource) and its [type](ig.datasource#options:settings.type) property.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Sets URL which is used for sending JSON on request for remote filtering (MVC for example). That option is required when [load on demand](ui.igcombo#options:loadOnDemandSettings) is
	 * [enabled](ui.igcombo#options:loadOnDemandSettings.enabled) and its [type](ui.igcombo#options:filteringType) is remote.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets URL which is used for sending JSON on request for remote filtering (MVC for example). That option is required when [load on demand](ui.igcombo#options:loadOnDemandSettings) is
	 * [enabled](ui.igcombo#options:loadOnDemandSettings.enabled) and its [type](ui.igcombo#options:filteringType) is remote.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * See [$.ig.DataSource](ig.datasource) property in the response specifying the total number of records on the server.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * See [$.ig.DataSource](ig.datasource) property in the response specifying the total number of records on the server.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * See [$.ig.DataSource](ig.datasource) This is basically the property in the response where data records are held, if the response is wrapped.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See [$.ig.DataSource](ig.datasource) This is basically the property in the response where data records are held, if the response is wrapped.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "responseDataType"): string;

	/**
	 * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "responseDataType", optionValue: string): void;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "responseContentType"): string;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;

	/**
	 * Specifies the HTTP verb to be used to issue the request.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "requestType"): string;

	/**
	 * Specifies the HTTP verb to be used to issue the request.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;

	/**
	 * Gets/Sets name of column which contains the "value". If it is missing, then the name of first column will be used.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "valueKey"): string;

	/**
	 * /Sets name of column which contains the "value". If it is missing, then the name of first column will be used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "valueKey", optionValue: string): void;

	/**
	 * Gets/Sets name of column which contains the displayed text. If it is missing, then [valueKey](ui.igcombo#options:valueKey) option will be used.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "textKey"): string;

	/**
	 * /Sets name of column which contains the displayed text. If it is missing, then [valueKey](ui.igcombo#options:valueKey) option will be used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "textKey", optionValue: string): void;

	/**
	 * Gets/Sets a template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
	 * More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "itemTemplate"): string;

	/**
	 * /Sets a template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
	 * More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "itemTemplate", optionValue: string): void;

	/**
	 * Gets/Sets template used to render a header in the drop-down list. The template is rendered inside of a DIV html element.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "headerTemplate"): string;

	/**
	 * /Sets template used to render a header in the drop-down list. The template is rendered inside of a DIV html element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "headerTemplate", optionValue: string): void;

	/**
	 * Gets/Sets template used to render a footer in the drop-down list.
	 * Notes:
	 * 1. The template is rendered inside of DIV html element.
	 * 2. The following variables can be used:
	 * - {0}: Number of records in igCombo (view of dataSource)
	 * - {1}: Number of records in dataSource
	 * - {2}: Number of (filtered) records on server
	 * - {3}: Number of all records on server
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "footerTemplate"): string;

	/**
	 * /Sets template used to render a footer in the drop-down list.
	 * Notes:
	 * 1. The template is rendered inside of DIV html element.
	 * 2. The following variables can be used:
	 * - {0}: Number of records in igCombo (view of dataSource)
	 * - {1}: Number of records in dataSource
	 * - {2}: Number of (filtered) records on server
	 * - {3}: Number of all records on server
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "footerTemplate", optionValue: string): void;

	/**
	 * Gets/Sets the name of a hidden INPUT element, which is used when submitting data. Its value will be set to the values of the selected items valueKeys separated by ',' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name of a hidden INPUT element, which is used when submitting data. Its value will be set to the values of the selected items valueKeys separated by ',' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets show drop-down list animation duration in milliseconds.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "animationShowDuration"): number;

	/**
	 * /Sets show drop-down list animation duration in milliseconds.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "animationShowDuration", optionValue: number): void;

	/**
	 * Gets/Sets hide drop-down list animation duration in milliseconds.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "animationHideDuration"): number;

	/**
	 * /Sets hide drop-down list animation duration in milliseconds.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "animationHideDuration", optionValue: number): void;

	/**
	 * If set to true, the container of the drop-down list is appended to the body.
	 * If set to false, it is appended to the parent element of the combo.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;

	/**
	 * If set to true, the container of the drop-down list is appended to the body.
	 * If set to false, it is appended to the parent element of the combo.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;

	/**
	 * Gets/Sets type of filtering.Note: option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "filteringType"): string;

	/**
	 * /Sets type of filtering.Note: option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "filteringType", optionValue: string): void;

	/**
	 * Gets/Sets URL key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "filterExprUrlKey"): string;

	/**
	 * /Sets URL key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "filterExprUrlKey", optionValue: string): void;

	/**
	 * Gets/Sets condition used for filtering.Note: When [autoComplete](ui.igcombo#options:autoComplete) is enabled, the filtering condition is always "startsWith".
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "filteringCondition"): string;

	/**
	 * /Sets condition used for filtering.Note: When [autoComplete](ui.igcombo#options:autoComplete) is enabled, the filtering condition is always "startsWith".
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "filteringCondition", optionValue: string): void;

	/**
	 * Gets/Sets filtering logic.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "filteringLogic"): string;

	/**
	 * /Sets filtering logic.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "filteringLogic", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets text of list item for condition when [filteringType](ui.igcombo#options:filteringType) option is enabled and no match was found.
	 * Use option [locale.noMatchFoundText](ui.igcombo#options:locale.noMatchFoundText).
	 */
	igCombo(optionLiteral: 'option', optionName: "noMatchFoundText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets text of list item for condition when [filteringType](ui.igcombo#options:filteringType) option is enabled and no match was found.
	 * Use option [locale.noMatchFoundText](ui.igcombo#options:locale.noMatchFoundText).
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "noMatchFoundText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets title for html element which represent the drop-down button.
	 * Use option [locale.dropDownButtonTitle](ui.igcombo#options:locale.dropDownButtonTitle).
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownButtonTitle"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets title for html element which represent the drop-down button.
	 * Use option [locale.dropDownButtonTitle](ui.igcombo#options:locale.dropDownButtonTitle).
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownButtonTitle", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets title for html element which represent clear button.
	 * Use option [locale.clearButtonTitle](ui.igcombo#options:locale.clearButtonTitle).
	 */
	igCombo(optionLiteral: 'option', optionName: "clearButtonTitle"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets title for html element which represent clear button.
	 * Use option [locale.clearButtonTitle](ui.igcombo#options:locale.clearButtonTitle).
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "clearButtonTitle", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets value that is displayed when input field is empty.
	 * Use option [locale.placeHolder](ui.igcombo#options:locale.placeHolder).
	 */
	igCombo(optionLiteral: 'option', optionName: "placeHolder"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets value that is displayed when input field is empty.
	 * Use option [locale.placeHolder](ui.igcombo#options:locale.placeHolder).
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;
	igCombo(optionLiteral: 'option', optionName: "locale"): IgComboLocale;
	igCombo(optionLiteral: 'option', optionName: "locale", optionValue: IgComboLocale): void;

	/**
	 * Gets/Sets container of variables which define load on demand functionality.
	 * Notes:
	 * That option has effect only when data is loaded remotely using [dataSourceUrl](ui.igcombo#options:dataSourceUrl).
	 * Selection is supported only for already loaded items.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "loadOnDemandSettings"): IgComboLoadOnDemandSettings;

	/**
	 * /Sets container of variables which define load on demand functionality.
	 * Notes:
	 * That option has effect only when data is loaded remotely using [dataSourceUrl](ui.igcombo#options:dataSourceUrl).
	 * Selection is supported only for already loaded items.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "loadOnDemandSettings", optionValue: IgComboLoadOnDemandSettings): void;

	/**
	 * Gets/Sets how many items should be shown at once.
	 *    Notes:
	 *    This option is used for [virtualization](ui.igcombo#options:virtualization) in order to render initial list items.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "visibleItemsCount"): number;

	/**
	 * /Sets how many items should be shown at once.
	 *    Notes:
	 *    This option is used for [virtualization](ui.igcombo#options:virtualization) in order to render initial list items.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;

	/**
	 * Sets gets functionality mode.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Sets gets functionality mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Gets/Sets ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
	 * If that option is enabled, then only visible items are created and the top edge of the first visible item in list is aligned to the top edge of list.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "virtualization"): boolean;

	/**
	 * /Sets ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
	 * If that option is enabled, then only visible items are created and the top edge of the first visible item in list is aligned to the top edge of list.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "virtualization", optionValue: boolean): void;

	/**
	 * Gets/Sets object specifying multi selection feature options. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "multiSelection"): IgComboMultiSelection;

	/**
	 * /Sets object specifying multi selection feature options. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "multiSelection", optionValue: IgComboMultiSelection): void;

	/**
	 * Gets/Sets object specifying grouping feature options. The option has key and dir properties.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "grouping"): IgComboGrouping;

	/**
	 * /Sets object specifying grouping feature options. The option has key and dir properties.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "grouping", optionValue: IgComboGrouping): void;

	/**
	 * Gets/Sets object which contains options supported by [igValidator](ui.igvalidator).
	 * Notes: in order for validator to work, application should ensure that [igValidator](ui.igvalidator) is loaded (ig.ui.validator.js/css files).
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets object which contains options supported by [igValidator](ui.igvalidator).
	 * Notes: in order for validator to work, application should ensure that [igValidator](ui.igvalidator) is loaded (ig.ui.validator.js/css files).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Gets/Sets condition used for highlighting of matching parts in items of drop-down list.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "highlightMatchesMode"): string;

	/**
	 * /Sets condition used for highlighting of matching parts in items of drop-down list.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "highlightMatchesMode", optionValue: string): void;

	/**
	 * If set to true, filtering and auto selection will be case-sensitive.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "caseSensitive"): boolean;

	/**
	 * If set to true, filtering and auto selection will be case-sensitive.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the first matching item should be auto selected when typing in input. When [multiSelection](ui.igcombo#options:multiSelection) is enabled this option will instead put the active item on the matching element.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "autoSelectFirstMatch"): boolean;

	/**
	 * /Sets whether the first matching item should be auto selected when typing in input. When [multiSelection](ui.igcombo#options:multiSelection) is enabled this option will instead put the active item on the matching element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "autoSelectFirstMatch", optionValue: boolean): void;

	/**
	 * Gets/Sets ability to autocomplete field from first matching item in list.
	 * Note: When autoComplete option is enabled, then "startsWith" is used for [filteringCondition](ui.igcombo#options:filteringCondition).
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "autoComplete"): boolean;

	/**
	 * /Sets ability to autocomplete field from first matching item in list.
	 * Note: When autoComplete option is enabled, then "startsWith" is used for [filteringCondition](ui.igcombo#options:filteringCondition).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "autoComplete", optionValue: boolean): void;

	/**
	 * If set to true:
	 * 1. Allows custom value input only with single selection.
	 * 2. Custom values will be auto completed to the closest value if [autoComplete](ui.igcombo#options:autoComplete) is enabled.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "allowCustomValue"): boolean;

	/**
	 * If set to true:
	 * 1. Allows custom value input only with single selection.
	 * 2. Custom values will be auto completed to the closest value if [autoComplete](ui.igcombo#options:autoComplete) is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "allowCustomValue", optionValue: boolean): void;

	/**
	 * Gets/Sets ability to close drop-down list when control loses focus.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "closeDropDownOnBlur"): boolean;

	/**
	 * /Sets ability to close drop-down list when control loses focus.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "closeDropDownOnBlur", optionValue: boolean): void;

	/**
	 * Gets the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "delayInputChangeProcessing"): number;

	/**
	 * Sets the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "delayInputChangeProcessing", optionValue: number): void;

	/**
	 * Gets/Sets tabIndex for the field of the combo.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex for the field of the combo.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets ability to show the drop-down list when the combo is in focus. This option has effect only if the combo is in editable [mode](ui.igcombo#options:mode).
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownOnFocus"): boolean;

	/**
	 * /Sets ability to show the drop-down list when the combo is in focus. This option has effect only if the combo is in editable [mode](ui.igcombo#options:mode).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownOnFocus", optionValue: boolean): void;

	/**
	 * Gets  ability to close drop-down list when single item in the list is selected with mouse click or enter press. The default value when [multiSelection](ui.igcombo#options:multiSelection) is enabled will be false. This option will not close the drop down when [multiSelection](ui.igcombo#options:multiSelection) is enabled and additive selection is performed.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "closeDropDownOnSelect"): boolean;

	/**
	 * Sets ability to close drop-down list when single item in the list is selected with mouse click or enter press. The default value when [multiSelection](ui.igcombo#options:multiSelection) is enabled will be false. This option will not close the drop down when [multiSelection](ui.igcombo#options:multiSelection) is enabled and additive selection is performed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "closeDropDownOnSelect", optionValue: boolean): void;

	/**
	 * Gets/Sets ability to select items by space button press.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "selectItemBySpaceKey"): boolean;

	/**
	 * /Sets ability to select items by space button press.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "selectItemBySpaceKey", optionValue: boolean): void;

	/**
	 * Gets/Sets list of items to be selected when the combo is initialized. It should contain array of objects with index or value property, then on initialization the matching items will be selected. If initialSelectedItems are not set, the combo is with single selection and it is in a dropdown, readonly or readonlylist [mode](ui.igcombo#options:mode), the first item will be automatically selected.
	 * Note: Only items loaded on initialization can be selected. When using [load on demand](ui.igCombo#options:loadOnDemandSettings), selecting an item which is not loaded yet will fail.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "initialSelectedItems"): IgComboInitialSelectedItem[];

	/**
	 * /Sets list of items to be selected when the combo is initialized. It should contain array of objects with index or value property, then on initialization the matching items will be selected. If initialSelectedItems are not set, the combo is with single selection and it is in a dropdown, readonly or readonlylist [mode](ui.igcombo#options:mode), the first item will be automatically selected.
	 * Note: Only items loaded on initialization can be selected. When using [load on demand](ui.igCombo#options:loadOnDemandSettings), selecting an item which is not loaded yet will fail.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "initialSelectedItems", optionValue: IgComboInitialSelectedItem[]): void;

	/**
	 * Gets/Sets ability to prevent submitting form on enter key press.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;

	/**
	 * /Sets ability to prevent submitting form on enter key press.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;

	/**
	 * Gets/Sets the format string that is used to format the text display values in the combo.
	 * Valid options are:
	 * "auto" (default) - uses automatic formatting for Date and number objects.
	 * "none", "", or null - will disable formatting
	 *
	 * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
	 *
	 * Custom format strings should match the data type in "textKey" column.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "format"): string;

	/**
	 * /Sets the format string that is used to format the text display values in the combo.
	 * Valid options are:
	 * "auto" (default) - uses automatic formatting for Date and number objects.
	 * "none", "", or null - will disable formatting
	 *
	 * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
	 *
	 * Custom format strings should match the data type in "textKey" column.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "format", optionValue: string): void;

	/**
	 * Gets/Sets whether the onscreen keyboard should be shown when the dropdown button is clicked (touch devices only).
	 * Note: The keyboard will still show when the combo input is focused in editable mode.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "suppressKeyboard"): boolean;

	/**
	 * /Sets whether the onscreen keyboard should be shown when the dropdown button is clicked (touch devices only).
	 * Note: The keyboard will still show when the combo input is focused in editable mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "suppressKeyboard", optionValue: boolean): void;

	/**
	 * Gets whether the clear button should be rendered.
	 * When the [mode](ui.igcombo#options:mode) is single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "enableClearButton"): boolean;

	/**
	 * Sets whether the clear button should be rendered.
	 * When the [mode](ui.igcombo#options:mode) is single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "enableClearButton", optionValue: boolean): void;

	/**
	 * Gets/Sets drop-down list orientation when open button is clicked.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "dropDownOrientation"): string;

	/**
	 * /Sets drop-down list orientation when open button is clicked.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: string): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igCombo(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCombo(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igCombo(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCombo(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is raised after rendering of the combo completes.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to the combo performing rendering.
	 * Use ui.element to get a reference to the main/top combo element.
	 */
	igCombo(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Event which is raised after rendering of the combo completes.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to the combo performing rendering.
	 * Use ui.element to get a reference to the main/top combo element.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Event which is raised before data binding is performed.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to igCombo performing the databinding.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is to be databound to.
	 */
	igCombo(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event which is raised before data binding is performed.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to igCombo performing the databinding.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is to be databound to.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event which is raised after data binding is complete.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo performing the data binding.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 * Use ui.success to see if the databinding was performed correctly.
	 * Use ui.errorMessage to get the error message if the databinding failed.
	 */
	igCombo(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event which is raised after data binding is complete.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo performing the data binding.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 * Use ui.success to see if the databinding was performed correctly.
	 * Use ui.errorMessage to get the error message if the databinding failed.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event which is raised before data filtering.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.expression to obtain reference to array which contains expressions supported by [$.ig.DataSource](ig.datasource).
	 * Each expression-item contains following members: fieldName ([textKey](ui.igcombo#options:textKey)), cond ([filteringCondition](ui.igcombo#options:filteringCondition)), expr (value/string to filter).
	 */
	igCombo(optionLiteral: 'option', optionName: "filtering"): FilteringEvent;

	/**
	 * Event which is raised before data filtering.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.expression to obtain reference to array which contains expressions supported by [$.ig.DataSource](ig.datasource).
	 * Each expression-item contains following members: fieldName ([textKey](ui.igcombo#options:textKey)), cond ([filteringCondition](ui.igcombo#options:filteringCondition)), expr (value/string to filter).
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "filtering", optionValue: FilteringEvent): void;

	/**
	 * Event which is raised after filtering.
	 *
	 * Function takes arguments evt and ui.
	 * Use evt.originalEvent to obtain reference to event of browser. That can be null.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
	 */
	igCombo(optionLiteral: 'option', optionName: "filtered"): FilteredEvent;

	/**
	 * Event which is raised after filtering.
	 *
	 * Function takes arguments evt and ui.
	 * Use evt.originalEvent to obtain reference to event of browser. That can be null.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "filtered", optionValue: FilteredEvent): void;

	/**
	 * Event which is raised before rendering of the combo items is performed.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to the combo performing rendering.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 */
	igCombo(optionLiteral: 'option', optionName: "itemsRendering"): ItemsRenderingEvent;

	/**
	 * Event which is raised before rendering of the combo items is performed.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to the combo performing rendering.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "itemsRendering", optionValue: ItemsRenderingEvent): void;

	/**
	 * Event which is raised after rendering of the combo items completes.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to the combo performing rendering.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 */
	igCombo(optionLiteral: 'option', optionName: "itemsRendered"): ItemsRenderedEvent;

	/**
	 * Event which is raised after rendering of the combo items completes.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to get a reference to the combo performing rendering.
	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "itemsRendered", optionValue: ItemsRenderedEvent): void;

	/**
	 * Event which is raised before drop-down list is opened.
	 *
	 * Return false in order to cancel drop-down action.
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownOpening"): DropDownOpeningEvent;

	/**
	 * Event which is raised before drop-down list is opened.
	 *
	 * Return false in order to cancel drop-down action.
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownOpening", optionValue: DropDownOpeningEvent): void;

	/**
	 * Event which is raised after drop-down list was opened.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownOpened"): DropDownOpenedEvent;

	/**
	 * Event which is raised after drop-down list was opened.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownOpened", optionValue: DropDownOpenedEvent): void;

	/**
	 * Event which is raised before drop-down list is closed.
	 *
	 * Return false in order to cancel hide action.
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownClosing"): DropDownClosingEvent;

	/**
	 * Event which is raised before drop-down list is closed.
	 *
	 * Return false in order to cancel hide action.
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownClosing", optionValue: DropDownClosingEvent): void;

	/**
	 * Event which is raised after drop-down list was closed.
	 *
	 * Function takes arguments evt and ui.
	 * Use evt.originalEvent to obtain reference to event of browser.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownClosed"): DropDownClosedEvent;

	/**
	 * Event which is raised after drop-down list was closed.
	 *
	 * Function takes arguments evt and ui.
	 * Use evt.originalEvent to obtain reference to event of browser.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "dropDownClosed", optionValue: DropDownClosedEvent): void;

	/**
	 * Event which is raised before selection change.
	 *
	 * Return false in order to cancel change.
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
	 * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
	 */
	igCombo(optionLiteral: 'option', optionName: "selectionChanging"): SelectionChangingEvent;

	/**
	 * Event which is raised before selection change.
	 *
	 * Return false in order to cancel change.
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
	 * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "selectionChanging", optionValue: SelectionChangingEvent): void;

	/**
	 * Event which is raised after selection change.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.items to obtain reference to array of new selected items. That can be null.
	 * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
	 */
	igCombo(optionLiteral: 'option', optionName: "selectionChanged"): IgComboSelectionChangedEvent;

	/**
	 * Event which is raised after selection change.
	 *
	 * Function takes arguments evt and ui.
	 * Use ui.owner to obtain reference to igCombo.
	 * Use ui.items to obtain reference to array of new selected items. That can be null.
	 * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
	 *
	 * @optionValue Define event handler function.
	 */
	igCombo(optionLiteral: 'option', optionName: "selectionChanged", optionValue: IgComboSelectionChangedEvent): void;
	igCombo(options: IgCombo): JQuery;
	igCombo(optionLiteral: 'option', optionName: string): any;
	igCombo(optionLiteral: 'option', options: IgCombo): JQuery;
	igCombo(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igCombo(methodName: string, ...methodParams: any[]): any;
}
interface IgDialogLocale {
	/**
	 * Gets/Sets the title/tooltip for the close button in the dialog.
	 *
	 */
	closeButtonTitle?: string;

	/**
	 * Gets/Sets the title/tooltip for the minimize button in the dialog.
	 *
	 */
	minimizeButtonTitle?: string;

	/**
	 * Gets/Sets the title/tooltip for the maximize button in the dialog.
	 *
	 */
	maximizeButtonTitle?: string;

	/**
	 * Gets/Sets the title/tooltip for the pin button in the dialog.
	 *
	 */
	pinButtonTitle?: string;

	/**
	 * Gets/Sets the title/tooltip for the pin button in the dialog.
	 *
	 */
	unpinButtonTitle?: string;

	/**
	 * Gets/Sets the title/tooltip for the restore button in the dialog.
	 *
	 */
	restoreButtonTitle?: string;

	/**
	 * Option for IgDialogLocale
	 */
	[optionName: string]: any;
}

interface StateChangingEvent {
	(event: Event, ui: StateChangingEventUIParam): void;
}

interface StateChangingEventUIParam {
	/**
	 * Gets a reference to the igDialog widget.
	 */
	owner?: any;

	/**
	 * Gets the name of the button, which triggered the event. Note: if the state was modified from the code, then "button" is undefined.
	 */
	button?: string;

	/**
	 * Gets the old state of the dialog, which can be one of the following: "opened", "minimized", "maximized", "closed".
	 */
	oldState?: string;

	/**
	 * Gets the boolean value of the old pin state of the dialog.
	 */
	oldPinned?: boolean;

	/**
	 * Gets the name of the action. That can be one of the following: "open" - request to open the dialog. "close" - request to close the dialog. "minimize" - request to minimize the dialog. "maximize" - request to maximize the dialog. "restore" - request to restore the dialog from minimized or maximized state. "pin" - request to pin the dialog. "unpin" - request to unpin the dialog.
	 */
	action?: string;
}

interface StateChangedEvent {
	(event: Event, ui: StateChangedEventUIParam): void;
}

interface StateChangedEventUIParam {
	/**
	 * Gets a reference to the igDialog widget.
	 */
	owner?: any;

	/**
	 * Gets the name of the button, which triggered the event. Note: if the state was modified from the code, then "button" is undefined.
	 */
	button?: string;

	/**
	 * Gets the old state of the dialog, which can be one of the following: "opened", "minimized", "maximized", "closed".
	 */
	oldState?: string;

	/**
	 * Gets the boolean value of the old pin state of the dialog.
	 */
	oldPinned?: boolean;

	/**
	 * Gets the name of the action. That can be one of the following: "open" - the dialog was opened. Note: the event is raised before a possible "openAnimation" started. "close" - the dialog was closed. Note: the event is raised before a possible "closeAnimation" started. "minimize" - the dialog was minimized. "maximize" - the dialog was maximized. "restore" - the dialog was restored from minimized or maximized state. "pin" - the dialog was pinned. "unpin" - the dialog was unpinned.
	 */
	action?: string;
}

interface AnimationEndedEvent {
	(event: Event, ui: AnimationEndedEventUIParam): void;
}

interface AnimationEndedEventUIParam {
	/**
	 * Gets a reference to the igDialog widget.
	 */
	owner?: any;

	/**
	 * Gets the name of the button, which triggered the event. Note: if the state was modified from the code, then "button" is undefined.
	 */
	button?: string;

	/**
	 * Gets the old state of the dialog, which can be one of the following: "opened", "minimized", "maximized", "closed".
	 */
	oldState?: string;

	/**
	 * Gets the boolean value of the old pin state of the dialog.
	 */
	oldPinned?: boolean;

	/**
	 * Gets the name of the action, which triggered the animation.
	 */
	action?: string;
}

interface IgFocusEvent {
	(event: Event, ui: IgFocusEventUIParam): void;
}

interface IgFocusEventUIParam {
	/**
	 * Gets a reference to the igDialog widget.
	 */
	owner?: any;
}

interface BlurEvent {
	(event: Event, ui: BlurEventUIParam): void;
}

interface BlurEventUIParam {
	/**
	 * Gets a reference to the igDialog widget.
	 */
	owner?: any;
}

interface IgDialog {
	/**
	 * Gets the jquery DIV object which is used as the main container for the dialog.
	 * Notes:
	 * 1. That object is optional and it should not contain any children.
	 * 2. It should not have parent.
	 * 3. It should not contain attributes which might destroy layout or appearance of the dialog.
	 * 4. Change of that option is not supported.
	 *
	 */
	mainElement?: Element;

	/**
	 * Gets/Sets the state of the dialog.Note: when the dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
	 *
	 *
	 * Valid values:
	 * "opened" The dialog is opened.
	 * "minimized" The dialog is minimized.
	 * "maximized" The dialog is maximized.
	 * "closed" The dialog is closed.
	 */
	state?: string;

	/**
	 * Gets/Sets whether the dialog is pinned.
	 * When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
	 * The pinned dialog does not support modal state, maximized state and it can not be moved.
	 * Notes:
	 * 1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
	 * 2. Pinned state is not supported for modal dialog.
	 *
	 */
	pinned?: boolean;

	/**
	 * Gets/Sets whether the dialog should close when Esc key is pressed.
	 *
	 */
	closeOnEscape?: boolean;

	/**
	 * Gets/Sets whether the close button in the dialog header should be visible.
	 *
	 */
	showCloseButton?: boolean;

	/**
	 * Gets/Sets whether the maximize button in the dialog header should be visible.
	 *
	 */
	showMaximizeButton?: boolean;

	/**
	 * Gets/Sets whether the minimize button in the dialog header should be visible.
	 *
	 */
	showMinimizeButton?: boolean;

	/**
	 * Gets/Sets whether the pin button in the dialog header should be visible.
	 *
	 */
	showPinButton?: boolean;

	/**
	 * Gets/Sets whether the dialog will be pinned on minimize.
	 *
	 */
	pinOnMinimized?: boolean;

	/**
	 * Gets the name of the css class which is applied to the SPAN element located on the left side of the header.
	 *
	 */
	imageClass?: string;

	/**
	 * Gets/Sets the text which appears in the header of the dialog.
	 *
	 */
	headerText?: string;

	/**
	 * Gets/Sets whether the dialog header should be visible.
	 *
	 */
	showHeader?: boolean;

	/**
	 * Gets/Sets whether the dialog footer should be visible.
	 *
	 */
	showFooter?: boolean;

	/**
	 * Gets/Sets the text which appears in the footer of the dialog.
	 *
	 */
	footerText?: string;

	/**
	 * Gets the name of the css class which is applied to the main DIV element of the dialog.
	 *
	 */
	dialogClass?: string;

	/**
	 * Gets/Sets the container html element for the dialog.
	 * That can be reference to html element, jquery selector or jquery object.
	 * By default the parent form of the original target element is used. If a form is not found, then the body is used.
	 * Note: If the "position" of the container is not set or it is "static", then the position is set to "relative".
	 *
	 */
	container?: any;

	/**
	 * Gets/Sets the initial height of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
	 * In case of "%", the size of browser window is used and it has effect only on open action.
	 *
	 */
	height?: number|string;

	/**
	 * Gets/Sets the initial width of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
	 * In case of "%", the size of browser window is used and it has effect only on open action.
	 *
	 */
	width?: number|string;

	/**
	 * Gets/Sets the minimal height of the dialog in normal state.
	 *
	 */
	minHeight?: number;

	/**
	 * Gets/Sets the minimal width of the dialog in normal state.
	 *
	 */
	minWidth?: number;

	/**
	 * Gets/Sets the maximal height of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
	 *
	 */
	maxHeight?: number;

	/**
	 * Gets/Sets the maximal width of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
	 *
	 */
	maxWidth?: number;

	/**
	 * Gets/Sets whether the dialog can be dragged by the user.
	 *
	 */
	draggable?: boolean;

	/**
	 * Gets/Sets the initial position of the dialog. That should be an object, which contains "top" and "left" members or an object
	 * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
	 *
	 */
	position?: any;

	/**
	 * Gets/Sets whether the dialog can be resized by the user.
	 *
	 */
	resizable?: boolean;

	/**
	 * Gets/Sets the value for the tabIndex attribute applied to the main html element of the dialog.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets the animation applied to the dialog when it is opened. That can be any object supported by the jquery show(param) method.
	 *
	 */
	openAnimation?: any;

	/**
	 * Gets/Sets the animation applied to the dialog when it is closed. That can be any object supported by the jquery hide(param) method.
	 *
	 */
	closeAnimation?: any;

	/**
	 * Gets/Sets the value of zIndex applied to the main html element of the dialog. If value is not set, then 1000 is used.
	 *
	 */
	zIndex?: number;

	/**
	 * Gets/Sets the modal state of the dialog.
	 * If there are more than 1 modal igDialog, then the last opened dialog wins and becomes on the top.
	 * Note: the modal functionality is not supported when the dialog is minimized or pinned, because that will trigger misbehavior.
	 *
	 */
	modal?: boolean;

	/**
	 * Gets/Sets the ability to process focus and blur events of the child elements located in the dialog in order to maintain the focused state.
	 * Notes:
	 * If that option is enabled, then focus and blur event handlers are added to all the child elements of the dialog.
	 * If the dialog is modal or it can be maximized, then it is not recommended to disable that option.
	 * If that option is modified after the igDialog was already created, then depending on current state of the dialog, it will be temporary closed-opened or opened-closed.
	 *
	 */
	trackFocus?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the close button in the dialog. Use option [locale.closeButtonTitle](ui.igdialog#options:locale.closeButtonTitle).
	 */
	closeButtonTitle?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the minimize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
	 */
	minimizeButtonTitle?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the maximize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
	 */
	maximizeButtonTitle?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the pin button in the dialog. Use option [locale.pinButtonTitle](ui.igdialog#options:locale.pinButtonTitle).
	 */
	pinButtonTitle?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the unpin button in the dialog. Use option [locale.unpinButtonTitle](ui.igdialog#options:locale.unpinButtonTitle).
	 */
	unpinButtonTitle?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the restore button in the dialog.  Use option [locale.restoreButtonTitle](ui.igdialog#options:locale.restoreButtonTitle).
	 */
	restoreButtonTitle?: string;
	locale?: IgDialogLocale;

	/**
	 * Gets/Sets the temporary value for src, which is used while changing the parent of the base element if it is an instance of IFRAME. That allows getting around possible JavaScript exceptions under IE.
	 *
	 */
	temporaryUrl?: string;

	/**
	 * Gets/Sets the ability to adjust the state of the header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
	 *
	 */
	enableHeaderFocus?: boolean;

	/**
	 * Gets/Sets the processing of the double-click on the dialog-header.If this option is not false and dialog was minimized, then its state will be set to normal.
	 * If this option is set to "auto" and showMaximizeButton is enabled or if this option is set to true, then the dialog will be maximized when it was in normal state,
	 * and dialog-state will be set to normal if it was maximized.
	 *
	 */
	enableDblclick?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is raised before the state of the dialog was changed.
	 * Return false in order to cancel the action.
	 */
	stateChanging?: StateChangingEvent;

	/**
	 * Event which is raised after the state of the dialog was changed.
	 */
	stateChanged?: StateChangedEvent;

	/**
	 * Event which is raised after the end of the animation when the dialog was closed or opened.
	 */
	animationEnded?: AnimationEndedEvent;

	/**
	 * Event which is raised when the dialog or its content gets focus.
	 */
	focus?: IgFocusEvent;

	/**
	 * Event which is raised when the dialog or its content loses focus.
	 */
	blur?: BlurEvent;

	/**
	 * Option for igDialog
	 */
	[optionName: string]: any;
}
interface IgDialogMethods {
	/**
	 * Destroys the igDialog and moves the target element to its original parent.
	 */
	destroy(): Object;

	/**
	 * Gets/Sets the state of the editor.
	 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
	 *
	 * @param state New state.
	 */
	state(state?: string): string;

	/**
	 * Gets reference to the dynamically created DIV element which represents the dialog.
	 */
	mainElement(): Element;

	/**
	 * Closes the dialog if it is opened.
	 * Notes:
	 * 1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
	 * 2. That method does not change minimized or maximized state of the dialog.
	 * It means that method "open" will open the dialog and keep previous minimized or maximized state.
	 *
	 * @param e Browser event: internal use only.
	 */
	close(e?: Object): Object;

	/**
	 * Opens the dialog if it is closed. Notes:
	 * 1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
	 * 2. That method does not change minimized or maximized state of the dialog. It means that if the dialog was in minimized or maximized stated when closed by "close" method, then the dialog will open in minimized or maximized state respectively.
	 */
	open(): Object;

	/**
	 * Minimizes the dialog if it is not minimized.
	 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
	 */
	minimize(): Object;

	/**
	 * Maximizes the dialog if it is not maximized.
	 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
	 */
	maximize(): Object;

	/**
	 * Sets the normal state for the dialog if it was maximized or minimized.
	 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
	 */
	restore(): Object;

	/**
	 * Pins the dialog if it is not pinned.
	 * When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
	 * The pinned dialog does not support modal state, maximized state and it can not be moved.
	 * Notes:
	 * 1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
	 * 2. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
	 */
	pin(): Object;

	/**
	 * Unpins the dialog if it is pinned.
	 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
	 */
	unpin(): Object;

	/**
	 * Gets a reference to the top modal dialog.
	 */
	getTopModal(): Object;

	/**
	 * Checks if the dialog is modal and if it is currently active.
	 */
	isTopModal(): boolean;

	/**
	 * Moves a not modal dialog to the top.
	 *
	 * @param e Original event of browser.
	 */
	moveToTop(e?: Object): Object;

	/**
	 * Retrieves the igDialog content container or sets its content to be the new content provided.
	 *
	 * @param newContent The new html content provided as a string. If the parameter is provided then the method acts as a setter.
	 */
	content(newContent?: string): Object;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igdialog#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igdialog#options:language) or [locale](ui.igdialog#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igDialog"): IgDialogMethods;
}

interface JQuery {
	igDialog(methodName: "destroy"): Object;
	igDialog(methodName: "state", state?: string): string;
	igDialog(methodName: "mainElement"): Element;
	igDialog(methodName: "close", e?: Object): Object;
	igDialog(methodName: "open"): Object;
	igDialog(methodName: "minimize"): Object;
	igDialog(methodName: "maximize"): Object;
	igDialog(methodName: "restore"): Object;
	igDialog(methodName: "pin"): Object;
	igDialog(methodName: "unpin"): Object;
	igDialog(methodName: "getTopModal"): Object;
	igDialog(methodName: "isTopModal"): boolean;
	igDialog(methodName: "moveToTop", e?: Object): Object;
	igDialog(methodName: "content", newContent?: string): Object;
	igDialog(methodName: "changeLocale"): void;
	igDialog(methodName: "changeGlobalLanguage"): void;
	igDialog(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets the jquery DIV object which is used as the main container for the dialog.
	 * Notes:
	 * 1. That object is optional and it should not contain any children.
	 * 2. It should not have parent.
	 * 3. It should not contain attributes which might destroy layout or appearance of the dialog.
	 * 4. Change of that option is not supported.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "mainElement"): Element;

	/**
	 * The jquery DIV object which is used as the main container for the dialog.
	 * Notes:
	 * 1. That object is optional and it should not contain any children.
	 * 2. It should not have parent.
	 * 3. It should not contain attributes which might destroy layout or appearance of the dialog.
	 * 4. Change of that option is not supported.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "mainElement", optionValue: Element): void;

	/**
	 * Gets/Sets the state of the dialog.Note: when the dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
	 *
	 */

	igDialog(optionLiteral: 'option', optionName: "state"): string;

	/**
	 * /Sets the state of the dialog.Note: when the dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDialog(optionLiteral: 'option', optionName: "state", optionValue: string): void;

	/**
	 * Gets/Sets whether the dialog is pinned.
	 * When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
	 * The pinned dialog does not support modal state, maximized state and it can not be moved.
	 * Notes:
	 * 1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
	 * 2. Pinned state is not supported for modal dialog.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "pinned"): boolean;

	/**
	 * /Sets whether the dialog is pinned.
	 * When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
	 * The pinned dialog does not support modal state, maximized state and it can not be moved.
	 * Notes:
	 * 1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
	 * 2. Pinned state is not supported for modal dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "pinned", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the dialog should close when Esc key is pressed.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "closeOnEscape"): boolean;

	/**
	 * /Sets whether the dialog should close when Esc key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "closeOnEscape", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the close button in the dialog header should be visible.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "showCloseButton"): boolean;

	/**
	 * /Sets whether the close button in the dialog header should be visible.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "showCloseButton", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the maximize button in the dialog header should be visible.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "showMaximizeButton"): boolean;

	/**
	 * /Sets whether the maximize button in the dialog header should be visible.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "showMaximizeButton", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the minimize button in the dialog header should be visible.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "showMinimizeButton"): boolean;

	/**
	 * /Sets whether the minimize button in the dialog header should be visible.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "showMinimizeButton", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the pin button in the dialog header should be visible.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "showPinButton"): boolean;

	/**
	 * /Sets whether the pin button in the dialog header should be visible.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "showPinButton", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the dialog will be pinned on minimize.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "pinOnMinimized"): boolean;

	/**
	 * /Sets whether the dialog will be pinned on minimize.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "pinOnMinimized", optionValue: boolean): void;

	/**
	 * Gets the name of the css class which is applied to the SPAN element located on the left side of the header.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "imageClass"): string;

	/**
	 * The name of the css class which is applied to the SPAN element located on the left side of the header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "imageClass", optionValue: string): void;

	/**
	 * Gets/Sets the text which appears in the header of the dialog.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "headerText"): string;

	/**
	 * /Sets the text which appears in the header of the dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "headerText", optionValue: string): void;

	/**
	 * Gets/Sets whether the dialog header should be visible.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "showHeader"): boolean;

	/**
	 * /Sets whether the dialog header should be visible.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "showHeader", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the dialog footer should be visible.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "showFooter"): boolean;

	/**
	 * /Sets whether the dialog footer should be visible.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "showFooter", optionValue: boolean): void;

	/**
	 * Gets/Sets the text which appears in the footer of the dialog.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "footerText"): string;

	/**
	 * /Sets the text which appears in the footer of the dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "footerText", optionValue: string): void;

	/**
	 * Gets the name of the css class which is applied to the main DIV element of the dialog.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "dialogClass"): string;

	/**
	 * The name of the css class which is applied to the main DIV element of the dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "dialogClass", optionValue: string): void;

	/**
	 * Gets/Sets the container html element for the dialog.
	 * That can be reference to html element, jquery selector or jquery object.
	 * By default the parent form of the original target element is used. If a form is not found, then the body is used.
	 * Note: If the "position" of the container is not set or it is "static", then the position is set to "relative".
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "container"): any;

	/**
	 * /Sets the container html element for the dialog.
	 * That can be reference to html element, jquery selector or jquery object.
	 * By default the parent form of the original target element is used. If a form is not found, then the body is used.
	 * Note: If the "position" of the container is not set or it is "static", then the position is set to "relative".
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "container", optionValue: any): void;

	/**
	 * Gets/Sets the initial height of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
	 * In case of "%", the size of browser window is used and it has effect only on open action.
	 *
	 */

	igDialog(optionLiteral: 'option', optionName: "height"): number|string;

	/**
	 * /Sets the initial height of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
	 * In case of "%", the size of browser window is used and it has effect only on open action.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDialog(optionLiteral: 'option', optionName: "height", optionValue: number|string): void;

	/**
	 * Gets/Sets the initial width of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
	 * In case of "%", the size of browser window is used and it has effect only on open action.
	 *
	 */

	igDialog(optionLiteral: 'option', optionName: "width"): number|string;

	/**
	 * /Sets the initial width of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
	 * In case of "%", the size of browser window is used and it has effect only on open action.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDialog(optionLiteral: 'option', optionName: "width", optionValue: number|string): void;

	/**
	 * Gets/Sets the minimal height of the dialog in normal state.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "minHeight"): number;

	/**
	 * /Sets the minimal height of the dialog in normal state.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "minHeight", optionValue: number): void;

	/**
	 * Gets/Sets the minimal width of the dialog in normal state.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "minWidth"): number;

	/**
	 * /Sets the minimal width of the dialog in normal state.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "minWidth", optionValue: number): void;

	/**
	 * Gets/Sets the maximal height of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "maxHeight"): number;

	/**
	 * /Sets the maximal height of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "maxHeight", optionValue: number): void;

	/**
	 * Gets/Sets the maximal width of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "maxWidth"): number;

	/**
	 * /Sets the maximal width of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "maxWidth", optionValue: number): void;

	/**
	 * Gets/Sets whether the dialog can be dragged by the user.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "draggable"): boolean;

	/**
	 * /Sets whether the dialog can be dragged by the user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "draggable", optionValue: boolean): void;

	/**
	 * Gets/Sets the initial position of the dialog. That should be an object, which contains "top" and "left" members or an object
	 * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "position"): any;

	/**
	 * /Sets the initial position of the dialog. That should be an object, which contains "top" and "left" members or an object
	 * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "position", optionValue: any): void;

	/**
	 * Gets/Sets whether the dialog can be resized by the user.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "resizable"): boolean;

	/**
	 * /Sets whether the dialog can be resized by the user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "resizable", optionValue: boolean): void;

	/**
	 * Gets/Sets the value for the tabIndex attribute applied to the main html element of the dialog.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets the value for the tabIndex attribute applied to the main html element of the dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets the animation applied to the dialog when it is opened. That can be any object supported by the jquery show(param) method.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "openAnimation"): any;

	/**
	 * /Sets the animation applied to the dialog when it is opened. That can be any object supported by the jquery show(param) method.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "openAnimation", optionValue: any): void;

	/**
	 * Gets/Sets the animation applied to the dialog when it is closed. That can be any object supported by the jquery hide(param) method.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "closeAnimation"): any;

	/**
	 * /Sets the animation applied to the dialog when it is closed. That can be any object supported by the jquery hide(param) method.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "closeAnimation", optionValue: any): void;

	/**
	 * Gets/Sets the value of zIndex applied to the main html element of the dialog. If value is not set, then 1000 is used.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "zIndex"): number;

	/**
	 * /Sets the value of zIndex applied to the main html element of the dialog. If value is not set, then 1000 is used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "zIndex", optionValue: number): void;

	/**
	 * Gets/Sets the modal state of the dialog.
	 * If there are more than 1 modal igDialog, then the last opened dialog wins and becomes on the top.
	 * Note: the modal functionality is not supported when the dialog is minimized or pinned, because that will trigger misbehavior.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "modal"): boolean;

	/**
	 * /Sets the modal state of the dialog.
	 * If there are more than 1 modal igDialog, then the last opened dialog wins and becomes on the top.
	 * Note: the modal functionality is not supported when the dialog is minimized or pinned, because that will trigger misbehavior.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "modal", optionValue: boolean): void;

	/**
	 * Gets/Sets the ability to process focus and blur events of the child elements located in the dialog in order to maintain the focused state.
	 * Notes:
	 * If that option is enabled, then focus and blur event handlers are added to all the child elements of the dialog.
	 * If the dialog is modal or it can be maximized, then it is not recommended to disable that option.
	 * If that option is modified after the igDialog was already created, then depending on current state of the dialog, it will be temporary closed-opened or opened-closed.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "trackFocus"): boolean;

	/**
	 * /Sets the ability to process focus and blur events of the child elements located in the dialog in order to maintain the focused state.
	 * Notes:
	 * If that option is enabled, then focus and blur event handlers are added to all the child elements of the dialog.
	 * If the dialog is modal or it can be maximized, then it is not recommended to disable that option.
	 * If that option is modified after the igDialog was already created, then depending on current state of the dialog, it will be temporary closed-opened or opened-closed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "trackFocus", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the close button in the dialog. Use option [locale.closeButtonTitle](ui.igdialog#options:locale.closeButtonTitle).
	 */
	igDialog(optionLiteral: 'option', optionName: "closeButtonTitle"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets the title/tooltip for the close button in the dialog. Use option [locale.closeButtonTitle](ui.igdialog#options:locale.closeButtonTitle).
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "closeButtonTitle", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the minimize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
	 */
	igDialog(optionLiteral: 'option', optionName: "minimizeButtonTitle"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets the title/tooltip for the minimize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "minimizeButtonTitle", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the maximize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
	 */
	igDialog(optionLiteral: 'option', optionName: "maximizeButtonTitle"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets the title/tooltip for the maximize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "maximizeButtonTitle", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the pin button in the dialog. Use option [locale.pinButtonTitle](ui.igdialog#options:locale.pinButtonTitle).
	 */
	igDialog(optionLiteral: 'option', optionName: "pinButtonTitle"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets the title/tooltip for the pin button in the dialog. Use option [locale.pinButtonTitle](ui.igdialog#options:locale.pinButtonTitle).
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "pinButtonTitle", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the unpin button in the dialog. Use option [locale.unpinButtonTitle](ui.igdialog#options:locale.unpinButtonTitle).
	 */
	igDialog(optionLiteral: 'option', optionName: "unpinButtonTitle"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets the title/tooltip for the unpin button in the dialog. Use option [locale.unpinButtonTitle](ui.igdialog#options:locale.unpinButtonTitle).
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "unpinButtonTitle", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets/Sets the title/tooltip for the restore button in the dialog.  Use option [locale.restoreButtonTitle](ui.igdialog#options:locale.restoreButtonTitle).
	 */
	igDialog(optionLiteral: 'option', optionName: "restoreButtonTitle"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * /Sets the title/tooltip for the restore button in the dialog.  Use option [locale.restoreButtonTitle](ui.igdialog#options:locale.restoreButtonTitle).
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "restoreButtonTitle", optionValue: string): void;
	igDialog(optionLiteral: 'option', optionName: "locale"): IgDialogLocale;
	igDialog(optionLiteral: 'option', optionName: "locale", optionValue: IgDialogLocale): void;

	/**
	 * Gets/Sets the temporary value for src, which is used while changing the parent of the base element if it is an instance of IFRAME. That allows getting around possible JavaScript exceptions under IE.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "temporaryUrl"): string;

	/**
	 * /Sets the temporary value for src, which is used while changing the parent of the base element if it is an instance of IFRAME. That allows getting around possible JavaScript exceptions under IE.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "temporaryUrl", optionValue: string): void;

	/**
	 * Gets/Sets the ability to adjust the state of the header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "enableHeaderFocus"): boolean;

	/**
	 * /Sets the ability to adjust the state of the header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "enableHeaderFocus", optionValue: boolean): void;

	/**
	 * Gets/Sets the processing of the double-click on the dialog-header.If this option is not false and dialog was minimized, then its state will be set to normal.
	 * If this option is set to "auto" and showMaximizeButton is enabled or if this option is set to true, then the dialog will be maximized when it was in normal state,
	 * and dialog-state will be set to normal if it was maximized.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "enableDblclick"): any;

	/**
	 * /Sets the processing of the double-click on the dialog-header.If this option is not false and dialog was minimized, then its state will be set to normal.
	 * If this option is set to "auto" and showMaximizeButton is enabled or if this option is set to true, then the dialog will be maximized when it was in normal state,
	 * and dialog-state will be set to normal if it was maximized.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "enableDblclick", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igDialog(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDialog(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igDialog(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDialog(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is raised before the state of the dialog was changed.
	 * Return false in order to cancel the action.
	 */
	igDialog(optionLiteral: 'option', optionName: "stateChanging"): StateChangingEvent;

	/**
	 * Event which is raised before the state of the dialog was changed.
	 * Return false in order to cancel the action.
	 *
	 * @optionValue Define event handler function.
	 */
	igDialog(optionLiteral: 'option', optionName: "stateChanging", optionValue: StateChangingEvent): void;

	/**
	 * Event which is raised after the state of the dialog was changed.
	 */
	igDialog(optionLiteral: 'option', optionName: "stateChanged"): StateChangedEvent;

	/**
	 * Event which is raised after the state of the dialog was changed.
	 *
	 * @optionValue Define event handler function.
	 */
	igDialog(optionLiteral: 'option', optionName: "stateChanged", optionValue: StateChangedEvent): void;

	/**
	 * Event which is raised after the end of the animation when the dialog was closed or opened.
	 */
	igDialog(optionLiteral: 'option', optionName: "animationEnded"): AnimationEndedEvent;

	/**
	 * Event which is raised after the end of the animation when the dialog was closed or opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igDialog(optionLiteral: 'option', optionName: "animationEnded", optionValue: AnimationEndedEvent): void;

	/**
	 * Event which is raised when the dialog or its content gets focus.
	 */
	igDialog(optionLiteral: 'option', optionName: "focus"): IgFocusEvent;

	/**
	 * Event which is raised when the dialog or its content gets focus.
	 *
	 * @optionValue Define event handler function.
	 */
	igDialog(optionLiteral: 'option', optionName: "focus", optionValue: IgFocusEvent): void;

	/**
	 * Event which is raised when the dialog or its content loses focus.
	 */
	igDialog(optionLiteral: 'option', optionName: "blur"): BlurEvent;

	/**
	 * Event which is raised when the dialog or its content loses focus.
	 *
	 * @optionValue Define event handler function.
	 */
	igDialog(optionLiteral: 'option', optionName: "blur", optionValue: BlurEvent): void;
	igDialog(options: IgDialog): JQuery;
	igDialog(optionLiteral: 'option', optionName: string): any;
	igDialog(optionLiteral: 'option', options: IgDialog): JQuery;
	igDialog(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igDialog(methodName: string, ...methodParams: any[]): any;
}
interface IgDoughnutChartSeries {
	/**
	 * Gets or sets the current series type.
	 *
	 * Valid values:
	 * "flat" Series has flat 1-dimensional data.
	 */
	type?: string;

	/**
	 * Whether the series should render a tooltip.
	 */
	showTooltip?: boolean;

	/**
	 * The name of template or the template itself that chart tooltip will use to render.
	 */
	tooltipTemplate?: string;

	/**
	 * Gets or sets the data source for the chart.
	 */
	itemsSource?: any;

	/**
	 * Gets or Sets the property name that contains the values.
	 */
	valueMemberPath?: string;

	/**
	 * Gets or sets the property name that contains the labels.
	 */
	labelMemberPath?: string;

	/**
	 * Gets or sets the property name that contains the legend labels.
	 */
	legendLabelMemberPath?: string;

	/**
	 * Gets or sets the position of chart labels.
	 *
	 * Valid values:
	 * "none" No labels will be displayed.
	 * "center" Labels will be displayed in the center.
	 * "insideEnd" Labels will be displayed inside and by the edge of the container.
	 * "outsideEnd" Labels will be displayed outside the container.
	 * "bestFit" Labels will automatically decide their location.
	 */
	labelsPosition?: string;

	/**
	 * Gets or sets whether the leader lines are visible.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	leaderLineVisibility?: string;

	/**
	 * Gets or sets the style for the leader lines.
	 */
	leaderLineStyle?: any;

	/**
	 * Gets or sets what type of leader lines will be used for the outside end labels.
	 *
	 * Valid values:
	 * "straight" A straight line is drawn between the slice and its label.
	 * "arc" A curved line is drawn between the slice and its label. The line follows makes a natural turn from the slice to the label.
	 * "spline" A curved line is drawn between the slice and its label. The line starts radially from the slice and then turns to the label.
	 */
	leaderLineType?: string;

	/**
	 * Gets or sets the margin between a label and its leader line. The default is 6 pixels.
	 */
	leaderLineMargin?: number;

	/**
	 * Gets or sets the threshold value that determines if slices are grouped into the Others slice.
	 */
	othersCategoryThreshold?: number;

	/**
	 * Gets or sets whether to use numeric or percent-based threshold value.
	 *
	 * Valid values:
	 * "number" Data value is compared directly to the value of OthersCategoryThreshold.
	 * "percent" Data value is compared to OthersCategoryThreshold as a percentage of the total.
	 */
	othersCategoryType?: string;

	/**
	 * Gets or sets the label of the Others slice.
	 */
	othersCategoryText?: string;

	/**
	 * Gets or sets the legend used for the current chart.
	 */
	legend?: any;

	/**
	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
	 */
	formatLabel?: any;

	/**
	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart's legend.
	 */
	formatLegendLabel?: any;

	/**
	 * Gets or sets the pixel amount by which the labels are offset from the edge of the slices.
	 */
	labelExtent?: number;

	/**
	 * Gets or sets the starting angle of the chart.
	 * The default zero value is equivalent to 3 o'clock.
	 */
	startAngle?: number;

	/**
	 * Gets or sets the style used when a slice is selected.
	 */
	selectedStyle?: any;

	/**
	 * Gets or sets the palette of brushes to use for coloring the slices.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	brushes?: any;

	/**
	 * Gets or sets the palette of brushes to use for outlines on the slices.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	outlines?: any;

	/**
	 * Gets or sets whether all surface interactions with the plot area should be disabled.
	 */
	isSurfaceInteractionDisabled?: boolean;

	/**
	 * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.
	 */
	radiusFactor?: number;

	/**
	 * Option for IgDoughnutChartSeries
	 */
	[optionName: string]: any;
}

interface HoleDimensionsChangedEvent {
	(event: Event, ui: HoleDimensionsChangedEventUIParam): void;
}

interface HoleDimensionsChangedEventUIParam {}

interface IgDoughnutChart {
	/**
	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * An array of series objects.
	 */
	series?: IgDoughnutChartSeries[];

	/**
	 * Gets or sets whether the slices can be selected.
	 */
	allowSliceSelection?: boolean;

	/**
	 * Gets or sets whether all surface interactions with the plot area should be disabled.
	 */
	isSurfaceInteractionDisabled?: boolean;

	/**
	 * Gets or sets whether the slices can be exploded.
	 */
	allowSliceExplosion?: boolean;

	/**
	 * Gets or sets the inner extent of the doughnut chart. It is percent from the outer ring's radius.
	 */
	innerExtent?: number;

	/**
	 * Gets or sets the style used when a slice is selected.
	 */
	selectedStyle?: any;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Gets sets template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 */
	tooltipTemplate?: string;

	/**
	 * Gets sets maximum number of displayed records in chart.
	 */
	maxRecCount?: number;

	/**
	 * Gets sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	dataSource?: any;

	/**
	 * Gets sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	dataSourceType?: string;

	/**
	 * Gets sets url which is used for sending JSON on request for remote data.
	 */
	dataSourceUrl?: string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	responseTotalRecCountKey?: string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipShowing?: TooltipShowingEvent;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipShown?: TooltipShownEvent;

	/**
	 * Event fired when the mouse has left a series and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipHiding?: TooltipHidingEvent;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipHidden?: TooltipHiddenEvent;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 */
	browserNotSupported?: BrowserNotSupportedEvent;

	/**
	 * Raised when the slice is clicked.
	 */
	sliceClick?: SliceClickEvent;

	/**
	 * Raised when the dimensions (center point or radius) of the doughnut hole change.
	 */
	holeDimensionsChanged?: HoleDimensionsChangedEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	updateTooltip?: UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	hideTooltip?: HideTooltipEvent;

	/**
	 * Option for igDoughnutChart
	 */
	[optionName: string]: any;
}
interface IgDoughnutChartMethods {
	/**
	 * Adds a new series to the doughnut chart.
	 *
	 * @param seriesObj The series object to be added.
	 */
	addSeries(seriesObj: Object): void;

	/**
	 * Removes the specified series from the doughnut chart.
	 *
	 * @param seriesObj The series object identifying the series to be removed.
	 */
	removeSeries(seriesObj: Object): void;

	/**
	 * Updates the series with the specified name with the specified new property values.
	 *
	 * @param value The series object identifying the series to be updated.
	 */
	updateSeries(value: Object): void;

	/**
	 * Returns the center of the doughnut chart.
	 */
	getCenterCoordinates(): Object;

	/**
	 * Returns the radius of the chart's hole.
	 */
	getHoleRadius(): number;

	/**
	 * Returns information about how the doughnut chart is rendered.
	 */
	exportVisualData(): Object;

	/**
	 * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
	 */
	flush(): void;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;

	/**
	 * Returns data source of the series.
	 *
	 * @param series Optional. The series name. If not provided an array of series data sources is returned.
	 */
	getData(series: string): Object;

	/**
	 * Find index of item within actual data used by chart.
	 *
	 * @param item The reference to item.
	 */
	findIndexOfItem(item: Object): number;

	/**
	 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
	 *
	 * @param index Index of data item.
	 */
	getDataItem(index: Object): Object;

	/**
	 * Adds a new item to the data source and notifies the chart.
	 *
	 * @param item The item that we want to add to the data source.
	 */
	addItem(item: Object): Object;

	/**
	 * Inserts a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that we want to insert in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 */
	insertItem(item: Object, index: number): Object;

	/**
	 * Deletes an item from the data source and notifies the chart.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 */
	removeItem(index: number): Object;

	/**
	 * Updates an item in the data source and notifies the chart.
	 *
	 * @param index The index of the item in the data source that we want to change.
	 * @param item The new item object that will be set in the data source.
	 */
	setItem(index: number, item: Object): Object;

	/**
	 * Notifies the chart that an item has been set in an associated data source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source that has been changed.
	 * @param newItem the new item that has been set in the collection.
	 * @param oldItem the old item that has been overwritten in the collection.
	 */
	notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;

	/**
	 * Notifies the chart that the items have been cleared from an associated data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 */
	notifyClearItems(dataSource: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source where the new item has been inserted.
	 * @param newItem the new item that has been set in the collection.
	 */
	notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source from where the old item has been removed.
	 * @param oldItem the old item that has been removed from the collection.
	 */
	notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;

	/**
	 * Get reference to chart object.
	 */
	chart(): Object;

	/**
	 * Binds data to the chart
	 */
	dataBind(): void;
}
interface JQuery {
	data(propertyName: "igDoughnutChart"): IgDoughnutChartMethods;
}

interface JQuery {
	igDoughnutChart(methodName: "addSeries", seriesObj: Object): void;
	igDoughnutChart(methodName: "removeSeries", seriesObj: Object): void;
	igDoughnutChart(methodName: "updateSeries", value: Object): void;
	igDoughnutChart(methodName: "getCenterCoordinates"): Object;
	igDoughnutChart(methodName: "getHoleRadius"): number;
	igDoughnutChart(methodName: "exportVisualData"): Object;
	igDoughnutChart(methodName: "flush"): void;
	igDoughnutChart(methodName: "destroy"): void;
	igDoughnutChart(methodName: "getData", series: string): Object;
	igDoughnutChart(methodName: "findIndexOfItem", item: Object): number;
	igDoughnutChart(methodName: "getDataItem", index: Object): Object;
	igDoughnutChart(methodName: "addItem", item: Object): Object;
	igDoughnutChart(methodName: "insertItem", item: Object, index: number): Object;
	igDoughnutChart(methodName: "removeItem", index: number): Object;
	igDoughnutChart(methodName: "setItem", index: number, item: Object): Object;
	igDoughnutChart(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
	igDoughnutChart(methodName: "notifyClearItems", dataSource: Object): Object;
	igDoughnutChart(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
	igDoughnutChart(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
	igDoughnutChart(methodName: "chart"): Object;
	igDoughnutChart(methodName: "dataBind"): void;

	/**
	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igDoughnutChart(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igDoughnutChart(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igDoughnutChart(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igDoughnutChart(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * An array of series objects.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "series"): IgDoughnutChartSeries[];

	/**
	 * An array of series objects.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "series", optionValue: IgDoughnutChartSeries[]): void;

	/**
	 * Gets  whether the slices can be selected.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "allowSliceSelection"): boolean;

	/**
	 * Sets whether the slices can be selected.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "allowSliceSelection", optionValue: boolean): void;

	/**
	 * Gets  whether all surface interactions with the plot area should be disabled.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "isSurfaceInteractionDisabled"): boolean;

	/**
	 * Sets whether all surface interactions with the plot area should be disabled.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "isSurfaceInteractionDisabled", optionValue: boolean): void;

	/**
	 * Gets  whether the slices can be exploded.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "allowSliceExplosion"): boolean;

	/**
	 * Sets whether the slices can be exploded.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "allowSliceExplosion", optionValue: boolean): void;

	/**
	 * Gets  the inner extent of the doughnut chart. It is percent from the outer ring's radius.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "innerExtent"): number;

	/**
	 * Sets the inner extent of the doughnut chart. It is percent from the outer ring's radius.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "innerExtent", optionValue: number): void;

	/**
	 * Gets  the style used when a slice is selected.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "selectedStyle"): any;

	/**
	 * Sets the style used when a slice is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "selectedStyle", optionValue: any): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Gets  template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipTemplate"): string;

	/**
	 * Sets template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;

	/**
	 * Gets  maximum number of displayed records in chart.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "maxRecCount"): number;

	/**
	 * Sets maximum number of displayed records in chart.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "maxRecCount", optionValue: number): void;

	/**
	 * Gets  a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Gets  url which is used for sending JSON on request for remote data.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets url which is used for sending JSON on request for remote data.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;

	/**
	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;

	/**
	 * Event fired when the mouse has left a series and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;

	/**
	 * Event fired when the mouse has left a series and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.chart to get reference to chart object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 *
	 * @optionValue Define event handler function.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;

	/**
	 * Raised when the slice is clicked.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "sliceClick"): SliceClickEvent;

	/**
	 * Raised when the slice is clicked.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "sliceClick", optionValue: SliceClickEvent): void;

	/**
	 * Raised when the dimensions (center point or radius) of the doughnut hole change.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "holeDimensionsChanged"): HoleDimensionsChangedEvent;

	/**
	 * Raised when the dimensions (center point or radius) of the doughnut hole change.
	 *
	 * @optionValue New value to be set.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "holeDimensionsChanged", optionValue: HoleDimensionsChangedEvent): void;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "updateTooltip"): UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "updateTooltip", optionValue: UpdateTooltipEvent): void;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "hideTooltip"): HideTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igDoughnutChart(optionLiteral: 'option', optionName: "hideTooltip", optionValue: HideTooltipEvent): void;
	igDoughnutChart(options: IgDoughnutChart): JQuery;
	igDoughnutChart(optionLiteral: 'option', optionName: string): any;
	igDoughnutChart(optionLiteral: 'option', options: IgDoughnutChart): JQuery;
	igDoughnutChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igDoughnutChart(methodName: string, ...methodParams: any[]): any;
}
interface RenderingEvent {
	(event: Event, ui: RenderingEventUIParam): void;
}

interface RenderingEventUIParam {
	/**
	 * Gets a reference to the editor performing rendering.
	 */
	owner?: any;

	/**
	 * Gets a reference to the editor element.
	 */
	element?: any;
}

interface MousedownEvent {
	(event: Event, ui: MousedownEventUIParam): void;
}

interface MousedownEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the event target.
	 */
	element?: any;

	/**
	 * Gets a reference to the editor input field.
	 */
	editorInput?: any;
}

interface MouseupEvent {
	(event: Event, ui: MouseupEventUIParam): void;
}

interface MouseupEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the event target.
	 */
	element?: any;

	/**
	 * Gets a reference to the editor input field.
	 */
	editorInput?: any;
}

interface MousemoveEvent {
	(event: Event, ui: MousemoveEventUIParam): void;
}

interface MousemoveEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the event target.
	 */
	element?: any;

	/**
	 * Gets a reference to the editor input field.
	 */
	editorInput?: any;
}

interface MouseoverEvent {
	(event: Event, ui: MouseoverEventUIParam): void;
}

interface MouseoverEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the event target.
	 */
	element?: any;

	/**
	 * Gets a reference to the editor input field.
	 */
	editorInput?: any;

	/**
	 * Gets a reference to the event object of the browser.
	 */
	originalEvent?: any;
}

interface MouseoutEvent {
	(event: Event, ui: MouseoutEventUIParam): void;
}

interface MouseoutEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the event target.
	 */
	element?: any;

	/**
	 * Gets a reference to the editor input field.
	 */
	editorInput?: any;

	/**
	 * Gets a reference to the event object of the browser.
	 */
	originalEvent?: any;
}

interface KeydownEvent {
	(event: Event, ui: KeydownEventUIParam): void;
}

interface KeydownEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the event target.
	 */
	element?: any;

	/**
	 * Gets a reference to the editor input field.
	 */
	editorInput?: any;

	/**
	 * Gets the value of the keyCode.
	 */
	key?: any;
}

interface KeypressEvent {
	(event: Event, ui: KeypressEventUIParam): void;
}

interface KeypressEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the event target.
	 */
	element?: any;

	/**
	 * Gets a reference to the editor input field.
	 */
	editorInput?: any;

	/**
	 * Gets the value of the keyCode.
	 */
	key?: any;

	/**
	 * Gets a reference to the event object of the browser.
	 */
	originalEvent?: any;
}

interface KeyupEvent {
	(event: Event, ui: KeyupEventUIParam): void;
}

interface KeyupEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the event target.
	 */
	element?: any;

	/**
	 * Gets a reference to the editor input field.
	 */
	editorInput?: any;

	/**
	 * Gets the value of the keyCode.
	 */
	key?: any;

	/**
	 * Gets a reference to the event object of the browser.
	 */
	originalEvent?: any;
}

interface ValueChangingEvent {
	(event: Event, ui: ValueChangingEventUIParam): void;
}

interface ValueChangingEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets the editor input.
	 */
	editorInput?: any;

	/**
	 * Gets the editor's new value. The argument type might differ depending on the editor type.
	 */
	newValue?: any;

	/**
	 * Gets the editor's old value. The argument type might differ depending on the editor type.
	 */
	oldValue?: any;
}

interface ValueChangedEvent {
	(event: Event, ui: ValueChangedEventUIParam): void;
}

interface ValueChangedEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets the editor input.
	 */
	editorInput?: any;

	/**
	 * Gets the value entered from the user after internal formatting. The argument type might differ depending on the editor type.
	 */
	newValue?: any;

	/**
	 * Gets the value entered from the user before internal formatting. The argument type might differ depending on the editor type.
	 */
	originalValue?: any;
}

interface IgBaseEditor {
	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 */
	value?: any;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	allowNullValue?: boolean;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */
	nullValue?: string|number;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired before rendering of the editor has finished.
	 */
	rendering?: RenderingEvent;

	/**
	 * Fired after rendering of the editor has finished.
	 */
	rendered?: RenderedEvent;

	/**
	 * Fired on mousedown event.
	 */
	mousedown?: MousedownEvent;

	/**
	 * Fired on mouseup event.
	 */
	mouseup?: MouseupEvent;

	/**
	 * Fired on mousemove at any part of editor including the drop-down list.
	 */
	mousemove?: MousemoveEvent;

	/**
	 * Fired on mouseover at any part of editor including the drop-down list.
	 */
	mouseover?: MouseoverEvent;

	/**
	 * Fired on mouseleave at any part of editor including the drop-down list.
	 */
	mouseout?: MouseoutEvent;

	/**
	 * Fired when the input field of the editor loses focus.
	 */
	blur?: BlurEvent;

	/**
	 * Fired when the input field of the editor gets focus.
	 */
	focus?: IgFocusEvent;

	/**
	 * Fired on keydown event.
	 * Return false in order to cancel key action.
	 */
	keydown?: KeydownEvent;

	/**
	 * Fired on keypress event.
	 * Return false in order to cancel key action.
	 */
	keypress?: KeypressEvent;

	/**
	 * Fired on keyup event.
	 */
	keyup?: KeyupEvent;

	/**
	 * Fired before changing the editor's value.
	 * Return false in order to cancel change.
	 * It can be raised after loosing focus or on spin events.
	 */
	valueChanging?: ValueChangingEvent;

	/**
	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
	 */
	valueChanged?: ValueChangedEvent;

	/**
	 * Option for igBaseEditor
	 */
	[optionName: string]: any;
}
interface IgBaseEditorMethods {
	/**
	 * Gets/Sets name attribute applied to the editor element.
	 *
	 * @param newValue The new input name.
	 */
	inputName(newValue?: string): string;
	value(newValue: Object): void;

	/**
	 * Gets the input element of the editor.
	 */
	field(): string;

	/**
	 * Gets a reference to the jQuery element that wraps the editor.
	 */
	editorContainer(): string;

	/**
	 * Gets whether the editor has focus.
	 */
	hasFocus(): boolean;

	/**
	 * Sets focus to the editor after the specified delay.
	 *
	 * @param delay The delay before focusing the editor.
	 */
	setFocus(delay?: number): void;

	/**
	 * Hides the editor.
	 */
	hide(): void;

	/**
	 * Shows the editor.
	 */
	show(): void;

	/**
	 * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
	 */
	validator(): Object;

	/**
	 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
	 */
	isValid(): boolean;

	/**
	 * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
	 */
	validate(): boolean;

	/**
	 * Destroys the widget
	 */
	destroy(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igBaseEditor"): IgBaseEditorMethods;
}

interface DropDownListOpeningEvent {
	(event: Event, ui: DropDownListOpeningEventUIParam): void;
}

interface DropDownListOpeningEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the editor container.
	 */
	editor?: any;

	/**
	 * Gets a reference to the editable input.
	 */
	editorInput?: any;

	/**
	 * Gets a reference to the list contaier.
	 */
	list?: any;
}

interface DropDownListOpenedEvent {
	(event: Event, ui: DropDownListOpenedEventUIParam): void;
}

interface DropDownListOpenedEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the editable input.
	 */
	editorInput?: any;

	/**
	 * Gets a reference to the list contaier.
	 */
	list?: any;
}

interface DropDownListClosingEvent {
	(event: Event, ui: DropDownListClosingEventUIParam): void;
}

interface DropDownListClosingEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the editor container.
	 */
	editor?: any;

	/**
	 * Gets a reference to the editable input.
	 */
	editorInput?: any;

	/**
	 * Gets a reference to the list contaier.
	 */
	list?: any;
}

interface DropDownListClosedEvent {
	(event: Event, ui: DropDownListClosedEventUIParam): void;
}

interface DropDownListClosedEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the editor container.
	 */
	editor?: any;

	/**
	 * Gets a reference to the editable input.
	 */
	editorInput?: any;

	/**
	 * Gets a reference to the list contaier.
	 */
	list?: any;
}

interface DropDownItemSelectingEvent {
	(event: Event, ui: DropDownItemSelectingEventUIParam): void;
}

interface DropDownItemSelectingEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the editor container.
	 */
	editor?: any;

	/**
	 * Gets a reference to the editable input.
	 */
	editorInput?: any;

	/**
	 * Gets a reference to the list contaier.
	 */
	list?: any;

	/**
	 * Gets a reference to the list item which is about to be selected.
	 */
	item?: any;
}

interface DropDownItemSelectedEvent {
	(event: Event, ui: DropDownItemSelectedEventUIParam): void;
}

interface DropDownItemSelectedEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the editable input.
	 */
	editorInput?: any;

	/**
	 * Gets a reference to the list contaier.
	 */
	list?: any;

	/**
	 * Gets a reference to the list item which is selected.
	 */
	item?: any;
}

interface TextChangedEvent {
	(event: Event, ui: TextChangedEventUIParam): void;
}

interface TextChangedEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the new text.
	 */
	text?: string;

	/**
	 * Gets a reference to the old text.
	 */
	oldText?: string;
}

interface IgTextEditor {
	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 *
	 * Valid values:
	 * "dropdown" A button to open/close the list is located on the right side of the editor.
	 * "clear" A button to clear the value is located on the right side of the editor.
	 * "spin" Spin buttons are located on the right side of the editor.
	 */
	buttonType?: string;

	/**
	 * Gets/Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type string.
	 *
	 */
	listItems?: any[];

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 */
	listWidth?: number;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	listItemHoverDuration?: number;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownAttachedToBody?: boolean;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	dropDownAnimationDuration?: number;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	visibleItemsCount?: number;

	/**
	 * Gets/Sets the ability of the editor to allow entering only specific characters in the input-field from the keyboard and on paste.
	 * Notes:
	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
	 *
	 */
	includeKeys?: string;

	/**
	 * Gets/Sets the ability of the editor to prevent entering specific characters from the keyboard or on paste.
	 * Notes:
	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
	 *
	 */
	excludeKeys?: string;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * Valid values:
	 * "left" The text into the input gets aligned to the left.
	 * "right" The text into the input gets aligned to the right.
	 * "center" The text into the input gets aligned to the center.
	 */
	textAlign?: string;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	placeHolder?: string;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * Valid values:
	 * "selectAll" Setting this option will select all the text into the editor when the edit mode gets enetered.
	 * "atStart" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
	 * "atEnd" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
	 * "browserDefault" Setting this option won't do any extra logic, but proceed with the browser default behavior.
	 */
	selectionOnFocus?: string;

	/**
	 * Gets the text mode of the editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
	 *
	 *
	 * Valid values:
	 * "text" Single line text editor based on INPUT element is created.
	 * "password" Editor based on INPUT element with type password is created.
	 * "multiline" Multiline editor based on TEXTAREA element is created.
	 */
	textMode?: string;

	/**
	 * Gets/Sets the ability of the editor to automatically move the dropdown list selection item from one end to the opposite side. When the last item is reached and spin down is performed, the first item gets selected and vice versa. This option has no effect there is no drop-down list.
	 *
	 */
	spinWrapAround?: boolean;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
	 *
	 */
	isLimitedToListValues?: boolean;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	revertIfNotValid?: boolean;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	preventSubmitOnEnter?: boolean;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * Valid values:
	 * "auto" If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 * "bottom" The drop-down list is opened at the bottom of the editor.
	 * "top" The drop-down list is opened at the top of the editor.
	 */
	dropDownOrientation?: string;

	/**
	 * Gets/Sets the maximum length of a text which can be entered by the user.
	 * Negative values or 0 disables that behavior. If set at runtime the editor doesn't apply the option to the cuurent value.
	 *
	 */
	maxLength?: number;

	/**
	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownOnReadOnly?: boolean;

	/**
	 * Gets/Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 */
	toUpper?: boolean;

	/**
	 * Gets/Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 */
	toLower?: boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	suppressNotifications?: boolean;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	suppressKeyboard?: boolean;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 */
	value?: any;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	allowNullValue?: boolean;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */
	nullValue?: string|number;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired when the drop down is opening.
	 */
	dropDownListOpening?: DropDownListOpeningEvent;

	/**
	 * Fired after the drop down is opened.
	 */
	dropDownListOpened?: DropDownListOpenedEvent;

	/**
	 * Fired when the drop down is closing.
	 */
	dropDownListClosing?: DropDownListClosingEvent;

	/**
	 * Fired after the drop down is closed.
	 */
	dropDownListClosed?: DropDownListClosedEvent;

	/**
	 * Fired when an item in the drop down list is being selected.
	 */
	dropDownItemSelecting?: DropDownItemSelectingEvent;

	/**
	 * Fired after an item in the drop down list is selected.
	 */
	dropDownItemSelected?: DropDownItemSelectedEvent;

	/**
	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
	 * when the clear button is clicked or when an item from a list is selected.
	 */
	textChanged?: TextChangedEvent;

	/**
	 * Fired before rendering of the editor has finished.
	 */
	rendering?: RenderingEvent;

	/**
	 * Fired after rendering of the editor has finished.
	 */
	rendered?: RenderedEvent;

	/**
	 * Fired on mousedown event.
	 */
	mousedown?: MousedownEvent;

	/**
	 * Fired on mouseup event.
	 */
	mouseup?: MouseupEvent;

	/**
	 * Fired on mousemove at any part of editor including the drop-down list.
	 */
	mousemove?: MousemoveEvent;

	/**
	 * Fired on mouseover at any part of editor including the drop-down list.
	 */
	mouseover?: MouseoverEvent;

	/**
	 * Fired on mouseleave at any part of editor including the drop-down list.
	 */
	mouseout?: MouseoutEvent;

	/**
	 * Fired when the input field of the editor loses focus.
	 */
	blur?: BlurEvent;

	/**
	 * Fired when the input field of the editor gets focus.
	 */
	focus?: IgFocusEvent;

	/**
	 * Fired on keydown event.
	 * Return false in order to cancel key action.
	 */
	keydown?: KeydownEvent;

	/**
	 * Fired on keypress event.
	 * Return false in order to cancel key action.
	 */
	keypress?: KeypressEvent;

	/**
	 * Fired on keyup event.
	 */
	keyup?: KeyupEvent;

	/**
	 * Fired before changing the editor's value.
	 * Return false in order to cancel change.
	 * It can be raised after loosing focus or on spin events.
	 */
	valueChanging?: ValueChangingEvent;

	/**
	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
	 */
	valueChanged?: ValueChangedEvent;

	/**
	 * Option for igTextEditor
	 */
	[optionName: string]: any;
}
interface IgTextEditorMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Gets the visible text in the editor.
	 */
	displayValue(): string;

	/**
	 * Gets reference to jquery object which is used as container of drop-down list.
	 */
	dropDownContainer(): string;

	/**
	 * Shows the drop down list.
	 */
	showDropDown(): void;

	/**
	 * Hides the drop down list.
	 */
	hideDropDown(): void;

	/**
	 * Returns a reference to the drop-down button UI element of the editor.
	 */
	dropDownButton(): string;

	/**
	 * Returns if the drop-down list is visible.
	 */
	dropDownVisible(): boolean;

	/**
	 * Returns a reference to the clear button UI element of the editor.
	 */
	clearButton(): string;

	/**
	 * Finds index of list item by text that matches with the search parameters.
	 *
	 * @param text The text to search for in the drop down list.
	 * @param matchType The rule that is applied for searching the text.
	 */
	findListItemIndex(text: string, matchType?: Object): number;

	/**
	 * Gets the index of the selected list item. Sets selected item by index.
	 *
	 * @param index The index of the item that needs to be selected.
	 */
	selectedListIndex(index?: number): number;

	/**
	 * Gets the selected list item.
	 */
	getSelectedListItem(): string;

	/**
	 * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
	 */
	getSelectedText(): string;

	/**
	 * Gets the start index of the selected text in the editor.
	 */
	getSelectionStart(): number;

	/**
	 * Gets the end index of the selected text in the editor.
	 */
	getSelectionEnd(): number;

	/**
	 * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
	 * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
	 *
	 * @param string The string to be inserted.
	 */
	insert(string: string): void;

	/**
	 * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
	 *
	 * @param start Start of the selection.
	 * @param end End of the selection.
	 */
	select(start: number, end: number): void;

	/**
	 * Selects the previous item from the drop-down list.
	 */
	spinUp(): void;

	/**
	 * Selects the next item from the drop-down list.
	 */
	spinDown(): void;

	/**
	 * Returns a reference to the spin up UI element of the editor.
	 */
	spinUpButton(): string;

	/**
	 * Returns a reference to the spin down UI element of the editor.
	 */
	spinDownButton(): string;

	/**
	 * Gets/Sets name attribute applied to the editor element.
	 *
	 * @param newValue The new input name.
	 */
	inputName(newValue?: string): string;
	value(newValue: Object): void;

	/**
	 * Gets the input element of the editor.
	 */
	field(): string;

	/**
	 * Gets a reference to the jQuery element that wraps the editor.
	 */
	editorContainer(): string;

	/**
	 * Gets whether the editor has focus.
	 */
	hasFocus(): boolean;

	/**
	 * Sets focus to the editor after the specified delay.
	 *
	 * @param delay The delay before focusing the editor.
	 */
	setFocus(delay?: number): void;

	/**
	 * Hides the editor.
	 */
	hide(): void;

	/**
	 * Shows the editor.
	 */
	show(): void;

	/**
	 * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
	 */
	validator(): Object;

	/**
	 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
	 */
	isValid(): boolean;

	/**
	 * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
	 */
	validate(): boolean;

	/**
	 * Destroys the widget
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igTextEditor"): IgTextEditorMethods;
}

interface IgNumericEditor {
	/**
	 * Gets/Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type number.
	 *
	 */
	listItems?: any[];

	/**
	 * Gets/Sets the character, which is used as negative sign.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
	 *
	 */
	negativeSign?: string;

	/**
	 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	negativePattern?: string;

	/**
	 * Gets/Sets the character, which is used as decimal separator.
	 * Note: this option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	decimalSeparator?: string;

	/**
	 * Gets/Sets the character, which is used as separator for groups (like thousands).
	 * That option has effect only in display mode(no focus).
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	groupSeparator?: string;

	/**
	 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
	 * The "groupSeparator" is inserted between groups.
	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
	 * Count of groups starts from the decimal point (from right to left).
	 * That option has effect only in display mode(no focus).
	 * Note: The numbers in the array must be positive integers.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	groups?: any[];

	/**
	 * Gets/Sets the maximum number of decimal places supported by the editor.
	 * Note: this option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	maxDecimals?: number;

	/**
	 * Gets/Sets the minimum number of decimal places supported by the editor.
	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
	 * Note: This option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	minDecimals?: number;

	/**
	 * Gets/Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
	 *
	 */
	roundDecimals?: boolean;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * Valid values:
	 * "left" The text into the input gets aligned to the left.
	 * "right" The text into the input gets aligned to the right.
	 * "center" The text into the input gets aligned to the center.
	 */
	textAlign?: string;

	/**
	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
	 *
	 *
	 * Valid values:
	 * "double" the Number object is used with the limits of a double and if the value is not set, then the null or Number.NaN is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue). Note: that is used as default.
	 * "float" the Number object is used with the limits of a float and if the value is not set, then the null or Number.NaN is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "long" the Number object is used with the limits of a signed long and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "ulong" the Number object is used with the limits of an unsigned long and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "int" the Number object is used with the limits of a signed int and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "uint" the Number object is used with the limits of an unsigned int and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "short" the Number object is used with the limits of a signed short and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "ushort" the Number object is used with the limits of an unsigned short and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "sbyte" the Number object is used with the limits of a signed byte and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "byte" the Number object is used with the limits of an unsigned byte and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 */
	dataMode?: string;

	/**
	 * Gets/Sets the minimum value which can be entered in the editor by the end user.
	 *
	 */
	minValue?: number;

	/**
	 * Gets/Sets the maximum value which can be entered in the editor by the end user.
	 *
	 */
	maxValue?: number;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
	 *
	 */
	allowNullValue?: boolean;

	/**
	 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
	 *
	 */
	spinDelta?: number;

	/**
	 * Gets/Sets support for scientific format.
	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
	 * Notes: The "+" character is not supported in edit mode.
	 *
	 *
	 * Valid values:
	 * "null" scientific format is disabled.
	 * "E" scientific format is enabled and the "E" character is used.
	 * "e" scientific format is enabled and the "e" character is used.
	 * "E+" scientific format is enabled and the "E" character is used. The "E+" is used for positive values in display mode.
	 * "e+" scientific format is enabled and the "e" character is used. The "e+" is used for positive values in display mode.
	 */
	scientificFormat?: string;

	/**
	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 */
	spinWrapAround?: boolean;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
	 *
	 */
	isLimitedToListValues?: boolean;

	/**
	 * Removed from numeric editor options
	 */
	maxLength?: any;

	/**
	 * Removed from numeric editor options
	 */
	excludeKeys?: any;

	/**
	 * Removed from numeric editor options
	 */
	includeKeys?: any;

	/**
	 * Removed from numeric editor options
	 */
	toLower?: any;

	/**
	 * Removed from numeric editor options
	 */
	toUpper?: any;

	textMode?: any;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 */
	value?: any;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 *
	 * Valid values:
	 * "dropdown" A button to open/close the list is located on the right side of the editor.
	 * "clear" A button to clear the value is located on the right side of the editor.
	 * "spin" Spin buttons are located on the right side of the editor.
	 */
	buttonType?: string;

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 */
	listWidth?: number;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	listItemHoverDuration?: number;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownAttachedToBody?: boolean;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	dropDownAnimationDuration?: number;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	visibleItemsCount?: number;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	placeHolder?: string;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * Valid values:
	 * "selectAll" Setting this option will select all the text into the editor when the edit mode gets enetered.
	 * "atStart" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
	 * "atEnd" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
	 * "browserDefault" Setting this option won't do any extra logic, but proceed with the browser default behavior.
	 */
	selectionOnFocus?: string;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	revertIfNotValid?: boolean;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	preventSubmitOnEnter?: boolean;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * Valid values:
	 * "auto" If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 * "bottom" The drop-down list is opened at the bottom of the editor.
	 * "top" The drop-down list is opened at the top of the editor.
	 */
	dropDownOrientation?: string;

	/**
	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownOnReadOnly?: boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	suppressNotifications?: boolean;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	suppressKeyboard?: boolean;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */
	nullValue?: string|number;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired when the drop down is opening.
	 */
	dropDownListOpening?: DropDownListOpeningEvent;

	/**
	 * Fired after the drop down is opened.
	 */
	dropDownListOpened?: DropDownListOpenedEvent;

	/**
	 * Fired when the drop down is closing.
	 */
	dropDownListClosing?: DropDownListClosingEvent;

	/**
	 * Fired after the drop down is closed.
	 */
	dropDownListClosed?: DropDownListClosedEvent;

	/**
	 * Fired when an item in the drop down list is being selected.
	 */
	dropDownItemSelecting?: DropDownItemSelectingEvent;

	/**
	 * Fired after an item in the drop down list is selected.
	 */
	dropDownItemSelected?: DropDownItemSelectedEvent;

	/**
	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
	 * when the clear button is clicked or when an item from a list is selected.
	 */
	textChanged?: TextChangedEvent;

	/**
	 * Option for igNumericEditor
	 */
	[optionName: string]: any;
}
interface IgNumericEditorMethods {
	/**
	 * Gets/Sets editor value.
	 *
	 * @param newValue New editor value.
	 */
	value(newValue?: number): number;

	/**
	 * Finds index of list item by text that matches with the search parameters.
	 *
	 * @param number The text to search for.
	 */
	findListItemIndex(number: number): number;
	getSelectedText(): void;
	getSelectionStart(): void;
	getSelectionEnd(): void;

	/**
	 * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 * @param delta Increments value.
	 */
	spinUp(delta?: number): void;

	/**
	 * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 * @param delta Decrement value.
	 */
	spinDown(delta?: number): void;

	/**
	 * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
	 */
	selectListIndexUp(): void;

	/**
	 * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
	 */
	selectListIndexDown(): void;

	/**
	 * Gets current regional.
	 */
	getRegionalOption(): string;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Gets the visible text in the editor.
	 */
	displayValue(): string;

	/**
	 * Gets reference to jquery object which is used as container of drop-down list.
	 */
	dropDownContainer(): string;

	/**
	 * Shows the drop down list.
	 */
	showDropDown(): void;

	/**
	 * Hides the drop down list.
	 */
	hideDropDown(): void;

	/**
	 * Returns a reference to the drop-down button UI element of the editor.
	 */
	dropDownButton(): string;

	/**
	 * Returns if the drop-down list is visible.
	 */
	dropDownVisible(): boolean;

	/**
	 * Returns a reference to the clear button UI element of the editor.
	 */
	clearButton(): string;

	/**
	 * Gets the index of the selected list item. Sets selected item by index.
	 *
	 * @param index The index of the item that needs to be selected.
	 */
	selectedListIndex(index?: number): number;

	/**
	 * Gets the selected list item.
	 */
	getSelectedListItem(): string;

	/**
	 * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
	 * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
	 *
	 * @param string The string to be inserted.
	 */
	insert(string: string): void;

	/**
	 * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
	 *
	 * @param start Start of the selection.
	 * @param end End of the selection.
	 */
	select(start: number, end: number): void;

	/**
	 * Returns a reference to the spin up UI element of the editor.
	 */
	spinUpButton(): string;

	/**
	 * Returns a reference to the spin down UI element of the editor.
	 */
	spinDownButton(): string;
}
interface JQuery {
	data(propertyName: "igNumericEditor"): IgNumericEditorMethods;
}

interface IgCurrencyEditor {
	/**
	 * Gets/Sets the string, which is used as positive pattern. The "n" flag represents the value of number.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	positivePattern?: string;

	/**
	 * Gets/Sets a string that is used as the currency symbol that is shown in display mode.
	 *
	 */
	currencySymbol?: string;

	/**
	 * Gets/Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type number.
	 *
	 */
	listItems?: any[];

	/**
	 * Gets/Sets the character, which is used as negative sign.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
	 *
	 */
	negativeSign?: string;

	/**
	 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	negativePattern?: string;

	/**
	 * Gets/Sets the character, which is used as decimal separator.
	 * Note: this option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	decimalSeparator?: string;

	/**
	 * Gets/Sets the character, which is used as separator for groups (like thousands).
	 * That option has effect only in display mode(no focus).
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	groupSeparator?: string;

	/**
	 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
	 * The "groupSeparator" is inserted between groups.
	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
	 * Count of groups starts from the decimal point (from right to left).
	 * That option has effect only in display mode(no focus).
	 * Note: The numbers in the array must be positive integers.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	groups?: any[];

	/**
	 * Gets/Sets the maximum number of decimal places supported by the editor.
	 * Note: this option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	maxDecimals?: number;

	/**
	 * Gets/Sets the minimum number of decimal places supported by the editor.
	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
	 * Note: This option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	minDecimals?: number;

	/**
	 * Gets/Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
	 *
	 */
	roundDecimals?: boolean;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * Valid values:
	 * "left" The text into the input gets aligned to the left.
	 * "right" The text into the input gets aligned to the right.
	 * "center" The text into the input gets aligned to the center.
	 */
	textAlign?: string;

	/**
	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
	 *
	 *
	 * Valid values:
	 * "double" the Number object is used with the limits of a double and if the value is not set, then the null or Number.NaN is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue). Note: that is used as default.
	 * "float" the Number object is used with the limits of a float and if the value is not set, then the null or Number.NaN is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "long" the Number object is used with the limits of a signed long and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "ulong" the Number object is used with the limits of an unsigned long and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "int" the Number object is used with the limits of a signed int and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "uint" the Number object is used with the limits of an unsigned int and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "short" the Number object is used with the limits of a signed short and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "ushort" the Number object is used with the limits of an unsigned short and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "sbyte" the Number object is used with the limits of a signed byte and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 * "byte" the Number object is used with the limits of an unsigned byte and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igNumericEditor#options:allowNullValue).
	 */
	dataMode?: string;

	/**
	 * Gets/Sets the minimum value which can be entered in the editor by the end user.
	 *
	 */
	minValue?: number;

	/**
	 * Gets/Sets the maximum value which can be entered in the editor by the end user.
	 *
	 */
	maxValue?: number;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
	 *
	 */
	allowNullValue?: boolean;

	/**
	 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
	 *
	 */
	spinDelta?: number;

	/**
	 * Gets/Sets support for scientific format.
	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
	 * Notes: The "+" character is not supported in edit mode.
	 *
	 *
	 * Valid values:
	 * "null" scientific format is disabled.
	 * "E" scientific format is enabled and the "E" character is used.
	 * "e" scientific format is enabled and the "e" character is used.
	 * "E+" scientific format is enabled and the "E" character is used. The "E+" is used for positive values in display mode.
	 * "e+" scientific format is enabled and the "e" character is used. The "e+" is used for positive values in display mode.
	 */
	scientificFormat?: string;

	/**
	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 */
	spinWrapAround?: boolean;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
	 *
	 */
	isLimitedToListValues?: boolean;

	/**
	 * Removed from numeric editor options
	 */
	maxLength?: any;

	/**
	 * Removed from numeric editor options
	 */
	excludeKeys?: any;

	/**
	 * Removed from numeric editor options
	 */
	includeKeys?: any;

	/**
	 * Removed from numeric editor options
	 */
	toLower?: any;

	/**
	 * Removed from numeric editor options
	 */
	toUpper?: any;

	textMode?: any;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 */
	value?: any;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 *
	 * Valid values:
	 * "dropdown" A button to open/close the list is located on the right side of the editor.
	 * "clear" A button to clear the value is located on the right side of the editor.
	 * "spin" Spin buttons are located on the right side of the editor.
	 */
	buttonType?: string;

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 */
	listWidth?: number;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	listItemHoverDuration?: number;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownAttachedToBody?: boolean;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	dropDownAnimationDuration?: number;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	visibleItemsCount?: number;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	placeHolder?: string;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * Valid values:
	 * "selectAll" Setting this option will select all the text into the editor when the edit mode gets enetered.
	 * "atStart" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
	 * "atEnd" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
	 * "browserDefault" Setting this option won't do any extra logic, but proceed with the browser default behavior.
	 */
	selectionOnFocus?: string;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	revertIfNotValid?: boolean;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	preventSubmitOnEnter?: boolean;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * Valid values:
	 * "auto" If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 * "bottom" The drop-down list is opened at the bottom of the editor.
	 * "top" The drop-down list is opened at the top of the editor.
	 */
	dropDownOrientation?: string;

	/**
	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownOnReadOnly?: boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	suppressNotifications?: boolean;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	suppressKeyboard?: boolean;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */
	nullValue?: string|number;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Option for igCurrencyEditor
	 */
	[optionName: string]: any;
}
interface IgCurrencyEditorMethods {
	/**
	 * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.
	 *
	 * @param symbol New currency symbol.
	 */
	currencySymbol(symbol?: Object): string;

	/**
	 * Gets/Sets editor value.
	 *
	 * @param newValue New editor value.
	 */
	value(newValue?: number): number;

	/**
	 * Finds index of list item by text that matches with the search parameters.
	 *
	 * @param number The text to search for.
	 */
	findListItemIndex(number: number): number;
	getSelectedText(): void;
	getSelectionStart(): void;
	getSelectionEnd(): void;

	/**
	 * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 * @param delta Increments value.
	 */
	spinUp(delta?: number): void;

	/**
	 * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 * @param delta Decrement value.
	 */
	spinDown(delta?: number): void;

	/**
	 * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
	 */
	selectListIndexUp(): void;

	/**
	 * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
	 */
	selectListIndexDown(): void;

	/**
	 * Gets current regional.
	 */
	getRegionalOption(): string;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
	 */
	changeRegional(): void;
}
interface JQuery {
	data(propertyName: "igCurrencyEditor"): IgCurrencyEditorMethods;
}

interface IgPercentEditor {
	/**
	 * Gets/Sets the pattern for positive numeric values, which is used in display (no focus) state.
	 * If you use the "en-US" culture the default value for "positivePattern" will be "n$" where the "$" flag represents the "numericSymbol" and the "n" flag represents the value of the number.
	 * Note: this option has priority over possible regional settings.
	 *
	 */
	positivePattern?: string;

	/**
	 * Gets/Sets the symbol, which is used in display (no focus) state.
	 * Note: this option has priority over possible regional settings.
	 *
	 */
	percentSymbol?: string;

	/**
	 * Gets/Sets the factor which is used for the get and set of the "value" method.
	 * On get the number (string) entered by the user is divided by that factor and on set the number (string) displayed in the editor is multiplied by that factor.
	 * For example, if the factor is 100 and the "value" is set to 0.123, then the editor will show string "12.3".
	 * Possible values: 1 or 100.
	 * Note: this option has priority over possible regional settings.
	 *
	 */
	displayFactor?: number;

	/**
	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igPercentEditor#options:minValue) and [maxValue](ui.igPercentEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
	 * In addition, the maximum value that can be set to [minDecimals](ui.igPercentEditor#options:minDecimals) and [maxDecimals](ui.igPercentEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
	 *
	 *
	 * Valid values:
	 * "double" the Number object is used with the limits of a double and if the value is not set, then the null or Number.NaN is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue). Note: that is used as default.
	 * "float" the Number object is used with the limits of a float and if the value is not set, then the null or Number.NaN is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue).
	 * "long" the Number object is used with the limits of a signed long and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue).
	 * "ulong" the Number object is used with the limits of an unsigned long and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue).
	 * "int" the Number object is used with the limits of a signed int and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue).
	 * "uint" the Number object is used with the limits of an unsigned int and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue).
	 * "short" the Number object is used with the limits of a signed short and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue).
	 * "ushort" the Number object is used with the limits of an unsigned short and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue).
	 * "sbyte" the Number object is used with the limits of a signed byte and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue).
	 * "byte" the Number object is used with the limits of an unsigned byte and if the value is not set, then the null or 0 is used depending on the option [allowNullValue](ui.igpercenteditor#options:allowNullValue).
	 */
	dataMode?: string;

	/**
	 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igpercenteditor#options:buttonType) or [spinUp](ui.igpercenteditor#methods:spinUp) and [spinDown](ui.igpercenteditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
	 *
	 */
	spinDelta?: number;

	/**
	 * Gets/Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type number.
	 *
	 */
	listItems?: any[];

	/**
	 * Gets/Sets the character, which is used as negative sign.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
	 *
	 */
	negativeSign?: string;

	/**
	 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	negativePattern?: string;

	/**
	 * Gets/Sets the character, which is used as decimal separator.
	 * Note: this option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	decimalSeparator?: string;

	/**
	 * Gets/Sets the character, which is used as separator for groups (like thousands).
	 * That option has effect only in display mode(no focus).
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	groupSeparator?: string;

	/**
	 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
	 * The "groupSeparator" is inserted between groups.
	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
	 * Count of groups starts from the decimal point (from right to left).
	 * That option has effect only in display mode(no focus).
	 * Note: The numbers in the array must be positive integers.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	groups?: any[];

	/**
	 * Gets/Sets the maximum number of decimal places supported by the editor.
	 * Note: this option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	maxDecimals?: number;

	/**
	 * Gets/Sets the minimum number of decimal places supported by the editor.
	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
	 * Note: This option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	minDecimals?: number;

	/**
	 * Gets/Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
	 *
	 */
	roundDecimals?: boolean;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * Valid values:
	 * "left" The text into the input gets aligned to the left.
	 * "right" The text into the input gets aligned to the right.
	 * "center" The text into the input gets aligned to the center.
	 */
	textAlign?: string;

	/**
	 * Gets/Sets the minimum value which can be entered in the editor by the end user.
	 *
	 */
	minValue?: number;

	/**
	 * Gets/Sets the maximum value which can be entered in the editor by the end user.
	 *
	 */
	maxValue?: number;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
	 *
	 */
	allowNullValue?: boolean;

	/**
	 * Gets/Sets support for scientific format.
	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
	 * Notes: The "+" character is not supported in edit mode.
	 *
	 *
	 * Valid values:
	 * "null" scientific format is disabled.
	 * "E" scientific format is enabled and the "E" character is used.
	 * "e" scientific format is enabled and the "e" character is used.
	 * "E+" scientific format is enabled and the "E" character is used. The "E+" is used for positive values in display mode.
	 * "e+" scientific format is enabled and the "e" character is used. The "e+" is used for positive values in display mode.
	 */
	scientificFormat?: string;

	/**
	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 */
	spinWrapAround?: boolean;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
	 *
	 */
	isLimitedToListValues?: boolean;

	/**
	 * Removed from numeric editor options
	 */
	maxLength?: any;

	/**
	 * Removed from numeric editor options
	 */
	excludeKeys?: any;

	/**
	 * Removed from numeric editor options
	 */
	includeKeys?: any;

	/**
	 * Removed from numeric editor options
	 */
	toLower?: any;

	/**
	 * Removed from numeric editor options
	 */
	toUpper?: any;

	textMode?: any;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 */
	value?: any;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 *
	 * Valid values:
	 * "dropdown" A button to open/close the list is located on the right side of the editor.
	 * "clear" A button to clear the value is located on the right side of the editor.
	 * "spin" Spin buttons are located on the right side of the editor.
	 */
	buttonType?: string;

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 */
	listWidth?: number;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	listItemHoverDuration?: number;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownAttachedToBody?: boolean;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	dropDownAnimationDuration?: number;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	visibleItemsCount?: number;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	placeHolder?: string;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * Valid values:
	 * "selectAll" Setting this option will select all the text into the editor when the edit mode gets enetered.
	 * "atStart" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
	 * "atEnd" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
	 * "browserDefault" Setting this option won't do any extra logic, but proceed with the browser default behavior.
	 */
	selectionOnFocus?: string;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	revertIfNotValid?: boolean;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	preventSubmitOnEnter?: boolean;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * Valid values:
	 * "auto" If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 * "bottom" The drop-down list is opened at the bottom of the editor.
	 * "top" The drop-down list is opened at the top of the editor.
	 */
	dropDownOrientation?: string;

	/**
	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownOnReadOnly?: boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	suppressNotifications?: boolean;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	suppressKeyboard?: boolean;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */
	nullValue?: string|number;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Option for igPercentEditor
	 */
	[optionName: string]: any;
}
interface IgPercentEditorMethods {
	/**
	 * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.
	 * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.
	 *
	 * @param string The string to be inserted.
	 */
	insert(string: string): void;

	/**
	 * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.
	 *
	 * @param symbol New percent symbol.
	 */
	percentSymbol(symbol?: Object): string;

	/**
	 * Gets/Sets editor value.
	 *
	 * @param newValue New editor value.
	 */
	value(newValue?: number): number;

	/**
	 * Finds index of list item by text that matches with the search parameters.
	 *
	 * @param number The text to search for.
	 */
	findListItemIndex(number: number): number;
	getSelectedText(): void;
	getSelectionStart(): void;
	getSelectionEnd(): void;

	/**
	 * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 * @param delta Increments value.
	 */
	spinUp(delta?: number): void;

	/**
	 * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 * @param delta Decrement value.
	 */
	spinDown(delta?: number): void;

	/**
	 * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
	 */
	selectListIndexUp(): void;

	/**
	 * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
	 */
	selectListIndexDown(): void;

	/**
	 * Gets current regional.
	 */
	getRegionalOption(): string;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
	 */
	changeRegional(): void;
}
interface JQuery {
	data(propertyName: "igPercentEditor"): IgPercentEditorMethods;
}

interface IgMaskEditor {
	/**
	 * Gets visibility of the clear button. That option can be set only on initialization.
	 *
	 *
	 * Valid values:
	 * "clear" A button to clear the value is located on the right side of the editor.
	 */
	buttonType?: string;

	/**
	 * Gets input mask. Mask may include filter-flags and literal characters.
	 * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
	 * Default is "CCCCCCCCCC"
	 * Note: optional flags/entries affect the value returned by get of the [value](ui.igmaskeditor#methods:value) methods.
	 * List of filter-flags:
	 * C: any keyboard character. Entry is optional.
	 * &: any keyboard character. Entry is required.
	 * a: letter or digit character. Entry is optional.
	 * A: letter or digit character. Entry is required.
	 * ?: letter character. Entry is optional.
	 * L: letter character. Entry is required.
	 * 9: digit character. Entry is optional.
	 * 0: digit character. Entry is required.
	 * #: digit character or "+" or "_". Entry is optional with replacement by [emptyChar](ui.igmaskeditor#options:emptyChar) or by [padChar](ui.igmaskeditor#options:padChar).
	 * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
	 * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
	 * Note! This option can not be set runtime.
	 *
	 */
	inputMask?: string;

	/**
	 * It affects the value of the control (value method/option and submitted in forms). It defines what the value should contain from text, unfilled prompts and literals. The default is allText and when used value method/option returns the text entered, all prompts (positions) and literals.
	 *
	 *
	 * Valid values:
	 * "rawText" only entered text. All unfilled prompts (positions) and literals are ignored (removed).
	 * "rawTextWithRequiredPrompts" only entered text and required prompts (positions). All optional unfilled prompts and literals are ignored (removed)
	 * "rawTextWithAllPrompts" only entered text and prompts (positions). All literals are ignored (removed).
	 * "rawTextWithLiterals" only entered text and literals. All unfilled prompts are ignored (removed).
	 * "rawTextWithRequiredPromptsAndLiterals" only entered text, required prompts (positions) and literals. All optional unfilled prompts are ignored (removed).
	 * "allText" entered text, all prompts (positions) and literals. Note: that is used as default.
	 */
	dataMode?: string;

	/**
	 * Gets character which is used as prompt in edit mode for available entry position.
	 *
	 */
	unfilledCharsPrompt?: string;

	/**
	 * Gets/Sets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
	 *
	 */
	padChar?: string;

	/**
	 * Gets/Sets character which is used as replacement of not-filled required position in mask when application calls get for the [value](ui.igmaskeditor#methods:value) methods.
	 *
	 */
	emptyChar?: string;

	/**
	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	includeKeys?: string;

	/**
	 * Gets ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	excludeKeys?: string;

	/**
	 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
	 */
	spinWrapAround?: boolean;

	/**
	 * Sets gets list of items which are used for drop-down list.
	 * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
	 */
	listItems?: any[];

	/**
	 * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
	 */
	listWidth?: number;

	/**
	 * Sets the hover/unhover animation duration.
	 */
	listItemHoverDuration?: number;

	/**
	 * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
	 */
	isLimitedToListValues?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	dropDownOrientation?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	dropDownAttachedToBody?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	dropDownAnimationDuration?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	dropDownOnReadOnly?: boolean;

	textMode?: any;

	/**
	 * Gets/Sets how many items should be shown at once.
	 * Notes:
	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
	 * Note! This option can not be set runtime.
	 */
	visibleItemsCount?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	maxLength?: any;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 */
	value?: any;
	suppressKeyboard?: boolean;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * Valid values:
	 * "left" The text into the input gets aligned to the left.
	 * "right" The text into the input gets aligned to the right.
	 * "center" The text into the input gets aligned to the center.
	 */
	textAlign?: string;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	placeHolder?: string;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * Valid values:
	 * "selectAll" Setting this option will select all the text into the editor when the edit mode gets enetered.
	 * "atStart" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
	 * "atEnd" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
	 * "browserDefault" Setting this option won't do any extra logic, but proceed with the browser default behavior.
	 */
	selectionOnFocus?: string;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	revertIfNotValid?: boolean;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	preventSubmitOnEnter?: boolean;

	/**
	 * Gets/Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 */
	toUpper?: boolean;

	/**
	 * Gets/Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 */
	toLower?: boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	suppressNotifications?: boolean;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	allowNullValue?: boolean;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */
	nullValue?: string|number;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;
	dropDownListOpening?: DropDownListOpeningEvent;
	dropDownListOpened?: DropDownListOpenedEvent;
	dropDownListClosing?: DropDownListClosingEvent;
	dropDownListClosed?: DropDownListClosedEvent;
	dropDownItemSelecting?: DropDownItemSelectingEvent;
	dropDownItemSelected?: DropDownItemSelectedEvent;

	/**
	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
	 * when the clear button is clicked or when an item from a list is selected.
	 */
	textChanged?: TextChangedEvent;

	/**
	 * Option for igMaskEditor
	 */
	[optionName: string]: any;
}
interface IgMaskEditorMethods {
	/**
	 * Gets/Sets mask editor value.
	 *
	 * @param newValue New mask editor value.
	 */
	value(newValue?: string): string;
	dropDownContainer(): void;
	showDropDown(): void;
	hideDropDown(): void;
	dropDownButton(): void;
	spinUpButton(): void;
	spinDownButton(): void;
	dropDownVisible(): void;
	findListItemIndex(): void;
	selectedListIndex(): void;
	getSelectedListItem(): void;
	spinUp(): void;
	spinDown(): void;

	/**
	 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
	 */
	isValid(): boolean;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Gets the visible text in the editor.
	 */
	displayValue(): string;

	/**
	 * Returns a reference to the clear button UI element of the editor.
	 */
	clearButton(): string;

	/**
	 * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
	 */
	getSelectedText(): string;

	/**
	 * Gets the start index of the selected text in the editor.
	 */
	getSelectionStart(): number;

	/**
	 * Gets the end index of the selected text in the editor.
	 */
	getSelectionEnd(): number;

	/**
	 * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
	 * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
	 *
	 * @param string The string to be inserted.
	 */
	insert(string: string): void;

	/**
	 * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
	 *
	 * @param start Start of the selection.
	 * @param end End of the selection.
	 */
	select(start: number, end: number): void;
}
interface JQuery {
	data(propertyName: "igMaskEditor"): IgMaskEditorMethods;
}

interface IgDateEditor {
	/**
	 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	value?: Date;

	/**
	 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	minValue?: Date;

	/**
	 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	maxValue?: Date;

	/**
	 * Gets/Sets format of date while editor has no focus.
	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
	 * If value is not set, then the dateInputFormat is used automatically.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them:
	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "y": year field without century and without leading zero
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "M": month field as digit without leading zero
	 * "MM": month field as digit with leading zero
	 * "MMM": month field as short month name
	 * "MMMM": month field as long month name
	 * "d": day of month field without leading zero
	 * "dd": day of month field with leading zero
	 * "ddd": day of the week as short name
	 * "dddd": day of the week as long name
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "h": hours field in 12-hours format without leading zero
	 * "hh": hours field in 12-hours format with leading zero
	 * "H": hours field in 24-hours format without leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "m": minutes field without leading zero
	 * "mm": minutes field with leading zero
	 * "s": seconds field without leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 *
	 */
	dateDisplayFormat?: string;

	/**
	 * Gets format of date while editor has focus.
	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * If option is not set, then the "date" is used automatically.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "MM": month field as digit with leading zero
	 * "dd": day of month field with leading zero
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "hh": hours field in 12-hours format with leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "mm": minutes field with leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 * Note! This option can not be set runtime.
	 *
	 */
	dateInputFormat?: string;

	/**
	 * Gets the value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
	 * "2016-11-11T10:00:00+05:00"
	 *
	 *
	 * Valid values:
	 * "date" The value method returns a Date object. When this mode is set the value sent to the server on submit is serialized as ISO 8061 string with local time and zone values by default.
	 * "displayModeText" The "text" in display mode (no focus) format (pattern) is used to be send to the server and is returned from the value() method (returns a string object).
	 * "editModeText" The "text" in edit mode (focus) format (pattern) is used to be send to the server and is returned from the value() method (returns a string object).
	 */
	dataMode?: string;

	/**
	 * Gets/Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
	 *
	 */
	displayTimeOffset?: any;

	/**
	 * Gets visibility of the spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
	 *
	 *
	 * Valid values:
	 * "clear" A button to clear the value is located on the right side of the editor.
	 * "spin" Spin buttons are located on the right side of the editor
	 */
	buttonType?: string;

	/**
	 * Gets/Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 * spinDelta: {
	 * year: 4,
	 * month: 3,
	 * day: 10,
	 * hours: 12,
	 * minutes: 15,
	 * seconds: 10,
	 * milliseconds: 100
	 * }
	 * Time periods that don't have values use 1 as default.
	 *
	 *
	 * Valid values:
	 * "number" Value this value it is applied to all time periods - years, days, minutes, etc.
	 * "object" A configuration object, which defines specific values for each time period. The option can accept the following format:
	 */
	spinDelta?: number|Object;

	/**
	 * Gets/Sets ability to modify only 1 date field on spin events.
	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
	 * Value true modifies only value of one field.
	 *
	 */
	limitSpinToCurrentField?: boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
	 *
	 */
	enableUTCDates?: boolean;

	/**
	 * Gets/Sets year for auto detection of 20th and 21st centuries.
	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
	 *
	 */
	centuryThreshold?: number;

	/**
	 * Gets/Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
	 *
	 */
	yearShift?: number;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */
	nullValue?: string|number|Date;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	isLimitedToListValues?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	listItemHoverDuration?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	listItems?: any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	listWidth?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	dropDownAnimationDuration?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	dropDownAttachedToBody?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	dropDownOnReadOnly?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	inputMask?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	unfilledCharsPrompt?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	padChar?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	emptyChar?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	toUpper?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	toLower?: boolean;
	suppressKeyboard?: boolean;

	/**
	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	includeKeys?: string;

	/**
	 * Gets ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	excludeKeys?: string;

	/**
	 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
	 */
	spinWrapAround?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	dropDownOrientation?: string;

	textMode?: any;

	/**
	 * Gets/Sets how many items should be shown at once.
	 * Notes:
	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
	 * Note! This option can not be set runtime.
	 */
	visibleItemsCount?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	maxLength?: any;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * Valid values:
	 * "left" The text into the input gets aligned to the left.
	 * "right" The text into the input gets aligned to the right.
	 * "center" The text into the input gets aligned to the center.
	 */
	textAlign?: string;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	placeHolder?: string;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * Valid values:
	 * "selectAll" Setting this option will select all the text into the editor when the edit mode gets enetered.
	 * "atStart" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
	 * "atEnd" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
	 * "browserDefault" Setting this option won't do any extra logic, but proceed with the browser default behavior.
	 */
	selectionOnFocus?: string;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	revertIfNotValid?: boolean;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	preventSubmitOnEnter?: boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	suppressNotifications?: boolean;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	allowNullValue?: boolean;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	dropDownListOpening?: DropDownListOpeningEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	dropDownListOpened?: DropDownListOpenedEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	dropDownListClosing?: DropDownListClosingEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	dropDownListClosed?: DropDownListClosedEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	dropDownItemSelecting?: DropDownItemSelectingEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	dropDownItemSelected?: DropDownItemSelectedEvent;

	/**
	 * Option for igDateEditor
	 */
	[optionName: string]: any;
}
interface IgDateEditorMethods {
	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Gets/Sets editor value.
	 *
	 * Note! This option doesn't use the dateInputFormat to extract the date
	 *
	 * @param newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
	 */
	value(newValue?: Date): Date;

	/**
	 * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
	 * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
	 */
	getSelectedDate(): Date;

	/**
	 * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.
	 * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.
	 *
	 * @param date
	 */
	selectDate(date: Date): void;

	/**
	 * Increases the date or time period, depending on the current cursor position.
	 *
	 * @param delta The increase delta.
	 */
	spinUp(delta?: number): void;

	/**
	 * Decreases the date or time period, depending on the current cursor position.
	 *
	 * @param delta The decrease delta.
	 */
	spinDown(delta?: number): void;

	/**
	 * Returns a reference to the spin up UI element of the editor.
	 */
	spinUpButton(): string;

	/**
	 * Returns a reference to the spin down UI element of the editor.
	 */
	spinDownButton(): string;

	/**
	 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
	 */
	isValid(): boolean;
	dropDownButton(): void;
	dropDownContainer(): void;
	dropDownVisible(): void;
	findListItemIndex(): void;
	getSelectedListItem(): void;
	selectedListIndex(): void;
	showDropDown(): void;
	hideDropDown(): void;
}
interface JQuery {
	data(propertyName: "igDateEditor"): IgDateEditorMethods;
}

interface ItemSelectedEvent {
	(event: Event, ui: ItemSelectedEventUIParam): void;
}

interface ItemSelectedEventUIParam {
	/**
	 * Gets a reference to the editor.
	 */
	owner?: any;

	/**
	 * Gets a reference to the selected date object.
	 */
	dateFromPicker?: any;

	/**
	 * Gets a reference to the selected html element from the calendar.
	 */
	item?: any;

	/**
	 * Gets a reference to jQuery UI date picker widget, used as a calendar from the igDatePicker.
	 */
	calendar?: any;
}

interface IgDatePicker {
	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.
	 *
	 *
	 * Valid values:
	 * "dropdown" A button to open/close the list is located on the right side of the editor.
	 * "clear" A button to clear the value is located on the right side of the editor.
	 * "spin" Spin buttons are located on the right side of the editor.
	 */
	buttonType?: string;

	/**
	 * Gets/Sets the options supported by the [jquery.ui.datepicker](http://api.jqueryui.com/datepicker/). Only options related to the drop-down calendar are supported.
	 *
	 */
	datepickerOptions?: any;

	/**
	 * Gets the ability to limit igDatePicker to be used only as s calendar. When set to true the editor input is not editable.
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownOnReadOnly?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	dropDownAttachedToBody?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	isLimitedToListValues?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	listItemHoverDuration?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	listItems?: any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	listWidth?: number;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 *
	 */
	suppressKeyboard?: boolean;

	/**
	 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	value?: Date;

	/**
	 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	minValue?: Date;

	/**
	 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	maxValue?: Date;

	/**
	 * Gets/Sets format of date while editor has no focus.
	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
	 * If value is not set, then the dateInputFormat is used automatically.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them:
	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "y": year field without century and without leading zero
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "M": month field as digit without leading zero
	 * "MM": month field as digit with leading zero
	 * "MMM": month field as short month name
	 * "MMMM": month field as long month name
	 * "d": day of month field without leading zero
	 * "dd": day of month field with leading zero
	 * "ddd": day of the week as short name
	 * "dddd": day of the week as long name
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "h": hours field in 12-hours format without leading zero
	 * "hh": hours field in 12-hours format with leading zero
	 * "H": hours field in 24-hours format without leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "m": minutes field without leading zero
	 * "mm": minutes field with leading zero
	 * "s": seconds field without leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 *
	 */
	dateDisplayFormat?: string;

	/**
	 * Gets format of date while editor has focus.
	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * If option is not set, then the "date" is used automatically.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "MM": month field as digit with leading zero
	 * "dd": day of month field with leading zero
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "hh": hours field in 12-hours format with leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "mm": minutes field with leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 * Note! This option can not be set runtime.
	 *
	 */
	dateInputFormat?: string;

	/**
	 * Gets the value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
	 * "2016-11-11T10:00:00+05:00"
	 *
	 *
	 * Valid values:
	 * "date" The value method returns a Date object. When this mode is set the value sent to the server on submit is serialized as ISO 8061 string with local time and zone values by default.
	 * "displayModeText" The "text" in display mode (no focus) format (pattern) is used to be send to the server and is returned from the value() method (returns a string object).
	 * "editModeText" The "text" in edit mode (focus) format (pattern) is used to be send to the server and is returned from the value() method (returns a string object).
	 */
	dataMode?: string;

	/**
	 * Gets/Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
	 *
	 */
	displayTimeOffset?: any;

	/**
	 * Gets/Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 * spinDelta: {
	 * year: 4,
	 * month: 3,
	 * day: 10,
	 * hours: 12,
	 * minutes: 15,
	 * seconds: 10,
	 * milliseconds: 100
	 * }
	 * Time periods that don't have values use 1 as default.
	 *
	 *
	 * Valid values:
	 * "number" Value this value it is applied to all time periods - years, days, minutes, etc.
	 * "object" A configuration object, which defines specific values for each time period. The option can accept the following format:
	 */
	spinDelta?: number|Object;

	/**
	 * Gets/Sets ability to modify only 1 date field on spin events.
	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
	 * Value true modifies only value of one field.
	 *
	 */
	limitSpinToCurrentField?: boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
	 *
	 */
	enableUTCDates?: boolean;

	/**
	 * Gets/Sets year for auto detection of 20th and 21st centuries.
	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
	 *
	 */
	centuryThreshold?: number;

	/**
	 * Gets/Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
	 *
	 */
	yearShift?: number;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */
	nullValue?: string|number|Date;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	dropDownAnimationDuration?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	inputMask?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	unfilledCharsPrompt?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	padChar?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	emptyChar?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	toUpper?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	toLower?: boolean;

	/**
	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	includeKeys?: string;

	/**
	 * Gets ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	excludeKeys?: string;

	/**
	 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
	 */
	spinWrapAround?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	dropDownOrientation?: string;

	textMode?: any;

	/**
	 * Gets/Sets how many items should be shown at once.
	 * Notes:
	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
	 * Note! This option can not be set runtime.
	 */
	visibleItemsCount?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	maxLength?: any;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * Valid values:
	 * "left" The text into the input gets aligned to the left.
	 * "right" The text into the input gets aligned to the right.
	 * "center" The text into the input gets aligned to the center.
	 */
	textAlign?: string;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	placeHolder?: string;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * Valid values:
	 * "selectAll" Setting this option will select all the text into the editor when the edit mode gets enetered.
	 * "atStart" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
	 * "atEnd" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
	 * "browserDefault" Setting this option won't do any extra logic, but proceed with the browser default behavior.
	 */
	selectionOnFocus?: string;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	revertIfNotValid?: boolean;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	preventSubmitOnEnter?: boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	suppressNotifications?: boolean;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	allowNullValue?: boolean;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired when the drop down is opening.
	 */
	dropDownListOpening?: DropDownListOpeningEvent;

	/**
	 * Fired after the drop down is opened.
	 */
	dropDownListOpened?: DropDownListOpenedEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
	 */
	dropDownListClosing?: DropDownListClosingEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
	 */
	dropDownItemSelecting?: DropDownItemSelectingEvent;

	/**
	 * Fired after the drop down (calendar) is closed.
	 */
	dropDownListClosed?: DropDownListClosedEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
	 */
	dropDownItemSelected?: DropDownItemSelectedEvent;

	/**
	 * Fired after a date selection in the calendar.
	 */
	itemSelected?: ItemSelectedEvent;

	/**
	 * Option for igDatePicker
	 */
	[optionName: string]: any;
}
interface IgDatePickerMethods {
	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdatepicker#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.igdatepicker#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Returns a reference to the jQuery calendar used as a picker selector
	 */
	getCalendar(): string;
	dropDownContainer(): void;
	findListItemIndex(): void;
	getSelectedListItem(): void;
	selectedListIndex(): void;

	/**
	 * Shows the drop down list.
	 */
	showDropDown(): void;

	/**
	 * Hides the drop down list.
	 */
	hideDropDown(): void;

	/**
	 * Returns a reference to the calendar button UI element of the editor.
	 */
	dropDownButton(): string;

	/**
	 * Returns the visibility state of the calendar.
	 */
	dropDownVisible(): boolean;

	/**
	 * Destroys the widget
	 */
	destroy(): void;

	/**
	 * Gets/Sets editor value.
	 *
	 * Note! This option doesn't use the dateInputFormat to extract the date
	 *
	 * @param newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
	 */
	value(newValue?: Date): Date;

	/**
	 * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
	 * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
	 */
	getSelectedDate(): Date;

	/**
	 * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.
	 * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.
	 *
	 * @param date
	 */
	selectDate(date: Date): void;

	/**
	 * Increases the date or time period, depending on the current cursor position.
	 *
	 * @param delta The increase delta.
	 */
	spinUp(delta?: number): void;

	/**
	 * Decreases the date or time period, depending on the current cursor position.
	 *
	 * @param delta The decrease delta.
	 */
	spinDown(delta?: number): void;

	/**
	 * Returns a reference to the spin up UI element of the editor.
	 */
	spinUpButton(): string;

	/**
	 * Returns a reference to the spin down UI element of the editor.
	 */
	spinDownButton(): string;

	/**
	 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
	 */
	isValid(): boolean;
}
interface JQuery {
	data(propertyName: "igDatePicker"): IgDatePickerMethods;
}

interface IgCheckboxEditor {
	/**
	 * Gets/Sets whether the checkbox is checked.
	 *
	 */
	checked?: boolean;

	/**
	 * Gets/Sets size of the checkbox based on preset styles.For different sizes, define 'width' and 'height' options instead.
	 *
	 *
	 * Valid values:
	 * "verysmall" The size of the Checkbox editor is very small.
	 * "small" The size of the Checkbox editor is small.
	 * "normal" The size of the Checkbox editor is normal.
	 * "large" The size of the Checkbox editor is large.
	 */
	size?: string;

	/**
	 * Gets/Sets a custom class on the checkbox. Custom image can be used this way.
	 * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
	 *
	 */
	iconClass?: string;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets the readonly attribute. Does not allow editing. Disables changing the checkbox state as an interaction, but it still can be changed programmatically. On submit the current value is sent into the request.
	 *
	 */
	readOnly?: boolean;
	allowNullValue?: boolean;
	nullValue?: any;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 */
	value?: any;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired before changing the editor's value.
	 * Return false in order to cancel change.
	 */
	valueChanging?: ValueChangingEvent;

	/**
	 * Fired after the editor's value has been changed.
	 */
	valueChanged?: ValueChangedEvent;

	/**
	 * Fired before rendering of the editor has finished.
	 */
	rendering?: RenderingEvent;

	/**
	 * Fired after rendering of the editor has finished.
	 */
	rendered?: RenderedEvent;

	/**
	 * Fired on mousedown event.
	 */
	mousedown?: MousedownEvent;

	/**
	 * Fired on mouseup event.
	 */
	mouseup?: MouseupEvent;

	/**
	 * Fired on mousemove at any part of editor including the drop-down list.
	 */
	mousemove?: MousemoveEvent;

	/**
	 * Fired on mouseover at any part of editor including the drop-down list.
	 */
	mouseover?: MouseoverEvent;

	/**
	 * Fired on mouseleave at any part of editor including the drop-down list.
	 */
	mouseout?: MouseoutEvent;

	/**
	 * Fired when the input field of the editor loses focus.
	 */
	blur?: BlurEvent;

	/**
	 * Fired when the input field of the editor gets focus.
	 */
	focus?: IgFocusEvent;

	/**
	 * Fired on keydown event.
	 * Return false in order to cancel key action.
	 */
	keydown?: KeydownEvent;

	/**
	 * Fired on keypress event.
	 * Return false in order to cancel key action.
	 */
	keypress?: KeypressEvent;

	/**
	 * Fired on keyup event.
	 */
	keyup?: KeyupEvent;

	/**
	 * Option for igCheckboxEditor
	 */
	[optionName: string]: any;
}
interface IgCheckboxEditorMethods {
	/**
	 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
	 */
	isValid(): boolean;

	/**
	 * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
	 * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
	 * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
	 * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
	 * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
	 *
	 * @param newValue
	 */
	value(newValue: Object): string;

	/**
	 * Toggles the state of the checkbox.
	 */
	toggle(): void;

	/**
	 * Gets/Sets name attribute applied to the editor element.
	 *
	 * @param newValue The new input name.
	 */
	inputName(newValue?: string): string;

	/**
	 * Gets the input element of the editor.
	 */
	field(): string;

	/**
	 * Gets a reference to the jQuery element that wraps the editor.
	 */
	editorContainer(): string;

	/**
	 * Gets whether the editor has focus.
	 */
	hasFocus(): boolean;

	/**
	 * Sets focus to the editor after the specified delay.
	 *
	 * @param delay The delay before focusing the editor.
	 */
	setFocus(delay?: number): void;

	/**
	 * Hides the editor.
	 */
	hide(): void;

	/**
	 * Shows the editor.
	 */
	show(): void;

	/**
	 * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
	 */
	validator(): Object;

	/**
	 * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
	 */
	validate(): boolean;

	/**
	 * Destroys the widget
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igCheckboxEditor"): IgCheckboxEditorMethods;
}

interface IgTimePickerItemsDelta {
	hours?: number;
	minutes?: number;

	/**
	 * Option for IgTimePickerItemsDelta
	 */
	[optionName: string]: any;
}

interface IgTimePicker {
	/**
	 * Gets delta-value which is used to generate the drop-down items for the time picker.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 *
	 * object  A configuration object, which defines specific values for each time period. The option can accept the following format:
	 * itemsDelta: {
	 * hours: 0,
	 * minutes: 30,
	 * }
	 * Time periods that don't have values use 0 as default for hours and 30 for minutes.
	 */
	itemsDelta?: IgTimePickerItemsDelta;

	/**
	 * Gets/Sets delta-value which is used to increment or decrement the editor time on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 * spinDelta: {
	 * hours: 12,
	 * minutes: 15
	 * }
	 * Default value is {hours: 1, minutes: 30}.
	 *
	 */
	spinDelta?: any;

	/**
	 * Gets format of time while timepicker has focus.
	 * Value of that option can be set to explicit time pattern or to a flag defined by regional settings.
	 * If value is set to explicit time pattern and pattern besides date-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
	 * If option is not set, then the "time" is used automatically.
	 * List of predefined regional flags:
	 * "time": the timePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of time-flags when explicit time pattern is used:
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "hh": hours field in 12-hours format with leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "mm": minutes field with leading zero
	 * Note! This option can not be set runtime.
	 *
	 */
	timeInputFormat?: string;

	/**
	 * Gets/Sets format of time while timepicker has no focus.
	 * Value of that option can be set to a specific time pattern or to a flag defined by regional settings.
	 * If value is not set, then the timeInputFormat is used automatically.
	 * If value is set to explicit time pattern and pattern besides time-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
	 * List of predefined regional flags:
	 * "time": the timePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them:
	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of time-flags when explicit time pattern is used:
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "h": hours field in 12-hours format without leading zero
	 * "hh": hours field in 12-hours format with leading zero
	 * "H": hours field in 24-hours format without leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "m": minutes field without leading zero
	 * "mm": minutes field with leading zero
	 *
	 */
	timeDisplayFormat?: string;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
	 *
	 */
	isLimitedToListValues?: boolean;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	suppressKeyboard?: boolean;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the timepicker has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * Valid values:
	 * "auto" If the option is set to auto the timepicker has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 * "bottom" The drop-down list is opened at the bottom of the timepicker.
	 * "top" The drop-down list is opened at the top of the timepicker.
	 */
	dropDownOrientation?: string;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	visibleItemsCount?: number;

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of timepicker is set as a drop-down width.
	 *
	 */
	listWidth?: number;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	listItemHoverDuration?: number;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the timepicker container element.
	 * If the option is set to false the timepicker will attach the drop-down list element to the timepicker container
	 * If the option is set to true the timepicker will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	dropDownAttachedToBody?: boolean;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	dropDownAnimationDuration?: number;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown, clear' or 'spin, clear' are supported too.Note! This option can not be set runtime.
	 * Note! A combination like 'dropdown, spin' is not allowed.
	 *
	 *
	 * Valid values:
	 * "dropdown" A button to open/close the list is located on the right side of the editor.
	 * "clear" A button to clear the value is located on the right side of the editor.
	 * "spin" Spin buttons are located on the right side of the editor.
	 */
	buttonType?: string;

	/**
	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 */
	spinWrapAround?: boolean;

	/**
	 * Removed from timepicker options
	 */
	dateDisplayFormat?: any;

	/**
	 * Removed from timepicker options
	 */
	dateInputFormat?: any;

	/**
	 * Removed from timepicker options
	 */
	yearShift?: any;

	/**
	 * Removed from timepicker options
	 */
	displayTimeOffset?: any;

	/**
	 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	value?: Date;

	/**
	 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	minValue?: Date;

	/**
	 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	maxValue?: Date;

	/**
	 * Gets the value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
	 * "2016-11-11T10:00:00+05:00"
	 *
	 *
	 * Valid values:
	 * "date" The value method returns a Date object. When this mode is set the value sent to the server on submit is serialized as ISO 8061 string with local time and zone values by default.
	 * "displayModeText" The "text" in display mode (no focus) format (pattern) is used to be send to the server and is returned from the value() method (returns a string object).
	 * "editModeText" The "text" in edit mode (focus) format (pattern) is used to be send to the server and is returned from the value() method (returns a string object).
	 */
	dataMode?: string;

	/**
	 * Gets/Sets ability to modify only 1 date field on spin events.
	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
	 * Value true modifies only value of one field.
	 *
	 */
	limitSpinToCurrentField?: boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
	 *
	 */
	enableUTCDates?: boolean;

	/**
	 * Gets/Sets year for auto detection of 20th and 21st centuries.
	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
	 *
	 */
	centuryThreshold?: number;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */
	nullValue?: string|number|Date;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	listItems?: any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	dropDownOnReadOnly?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	inputMask?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	unfilledCharsPrompt?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	padChar?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	emptyChar?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	toUpper?: boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	toLower?: boolean;

	/**
	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	includeKeys?: string;

	/**
	 * Gets ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	excludeKeys?: string;

	textMode?: any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	maxLength?: any;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * Valid values:
	 * "left" The text into the input gets aligned to the left.
	 * "right" The text into the input gets aligned to the right.
	 * "center" The text into the input gets aligned to the center.
	 */
	textAlign?: string;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	placeHolder?: string;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * Valid values:
	 * "selectAll" Setting this option will select all the text into the editor when the edit mode gets enetered.
	 * "atStart" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
	 * "atEnd" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
	 * "browserDefault" Setting this option won't do any extra logic, but proceed with the browser default behavior.
	 */
	selectionOnFocus?: string;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	revertIfNotValid?: boolean;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	preventSubmitOnEnter?: boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	suppressNotifications?: boolean;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	tabIndex?: number;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	allowNullValue?: boolean;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	inputName?: string;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	disabled?: boolean;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired when the drop down is opening.
	 */
	dropDownListOpening?: DropDownListOpeningEvent;

	/**
	 * Fired after the drop down is opened.
	 */
	dropDownListOpened?: DropDownListOpenedEvent;

	/**
	 * Fired when the drop down is closing.
	 */
	dropDownListClosing?: DropDownListClosingEvent;

	/**
	 * Fired after the drop down is closed.
	 */
	dropDownListClosed?: DropDownListClosedEvent;

	/**
	 * Fired when an item in the drop down list is being selected.
	 */
	dropDownItemSelecting?: DropDownItemSelectingEvent;

	/**
	 * Fired after an item in the drop down list is selected.
	 */
	dropDownItemSelected?: DropDownItemSelectedEvent;

	/**
	 * Option for igTimePicker
	 */
	[optionName: string]: any;
}
interface IgTimePickerMethods {
	/**
	 * Gets the selected list item.
	 */
	getSelectedListItem(): string;

	/**
	 * Returns the visibility state of the calendar.
	 */
	dropDownVisible(): boolean;

	/**
	 * Returns a reference to the drop-down button UI element of the editor.
	 */
	dropDownButton(): string;

	/**
	 * Gets reference to jquery object which is used as container of drop-down list.
	 */
	dropDownContainer(): string;

	/**
	 * Finds index of list item by text that matches with the search parameters.
	 *
	 * @param text The text to search for in the drop down list.
	 * @param matchType The rule that is applied for searching the text.
	 */
	findListItemIndex(text: string, matchType?: Object): number;

	/**
	 * Gets the index of the selected list item. Sets selected item by index.
	 *
	 * @param index The index of the item that needs to be selected.
	 */
	selectedListIndex(index?: number): number;
	value(newValue: Object): void;
	selectDate(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
	 * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
	 */
	getSelectedDate(): Date;

	/**
	 * Increases the date or time period, depending on the current cursor position.
	 *
	 * @param delta The increase delta.
	 */
	spinUp(delta?: number): void;

	/**
	 * Decreases the date or time period, depending on the current cursor position.
	 *
	 * @param delta The decrease delta.
	 */
	spinDown(delta?: number): void;

	/**
	 * Returns a reference to the spin up UI element of the editor.
	 */
	spinUpButton(): string;

	/**
	 * Returns a reference to the spin down UI element of the editor.
	 */
	spinDownButton(): string;

	/**
	 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
	 */
	isValid(): boolean;
}
interface JQuery {
	data(propertyName: "igTimePicker"): IgTimePickerMethods;
}

interface JQuery {
	igBaseEditor(methodName: "inputName", newValue?: string): string;
	igBaseEditor(methodName: "value", newValue: Object): void;
	igBaseEditor(methodName: "field"): string;
	igBaseEditor(methodName: "editorContainer"): string;
	igBaseEditor(methodName: "hasFocus"): boolean;
	igBaseEditor(methodName: "setFocus", delay?: number): void;
	igBaseEditor(methodName: "hide"): void;
	igBaseEditor(methodName: "show"): void;
	igBaseEditor(methodName: "validator"): Object;
	igBaseEditor(methodName: "isValid"): boolean;
	igBaseEditor(methodName: "validate"): boolean;
	igBaseEditor(methodName: "destroy"): void;
	igBaseEditor(methodName: "changeLocale", $container: Object): void;
	igBaseEditor(methodName: "changeGlobalLanguage"): void;
	igBaseEditor(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igBaseEditor(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igBaseEditor(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igBaseEditor(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igBaseEditor(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "value"): any;

	/**
	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;

	/**
	 * /Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */

	igBaseEditor(optionLiteral: 'option', optionName: "nullValue"): string|number;

	/**
	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igBaseEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: string|number): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igBaseEditor(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igBaseEditor(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired before rendering of the editor has finished.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Fired before rendering of the editor has finished.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Fired after rendering of the editor has finished.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Fired after rendering of the editor has finished.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Fired on mousedown event.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mousedown"): MousedownEvent;

	/**
	 * Fired on mousedown event.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mousedown", optionValue: MousedownEvent): void;

	/**
	 * Fired on mouseup event.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mouseup"): MouseupEvent;

	/**
	 * Fired on mouseup event.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mouseup", optionValue: MouseupEvent): void;

	/**
	 * Fired on mousemove at any part of editor including the drop-down list.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mousemove"): MousemoveEvent;

	/**
	 * Fired on mousemove at any part of editor including the drop-down list.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mousemove", optionValue: MousemoveEvent): void;

	/**
	 * Fired on mouseover at any part of editor including the drop-down list.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mouseover"): MouseoverEvent;

	/**
	 * Fired on mouseover at any part of editor including the drop-down list.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mouseover", optionValue: MouseoverEvent): void;

	/**
	 * Fired on mouseleave at any part of editor including the drop-down list.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mouseout"): MouseoutEvent;

	/**
	 * Fired on mouseleave at any part of editor including the drop-down list.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "mouseout", optionValue: MouseoutEvent): void;

	/**
	 * Fired when the input field of the editor loses focus.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "blur"): BlurEvent;

	/**
	 * Fired when the input field of the editor loses focus.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "blur", optionValue: BlurEvent): void;

	/**
	 * Fired when the input field of the editor gets focus.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "focus"): IgFocusEvent;

	/**
	 * Fired when the input field of the editor gets focus.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "focus", optionValue: IgFocusEvent): void;

	/**
	 * Fired on keydown event.
	 * Return false in order to cancel key action.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "keydown"): KeydownEvent;

	/**
	 * Fired on keydown event.
	 * Return false in order to cancel key action.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "keydown", optionValue: KeydownEvent): void;

	/**
	 * Fired on keypress event.
	 * Return false in order to cancel key action.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "keypress"): KeypressEvent;

	/**
	 * Fired on keypress event.
	 * Return false in order to cancel key action.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "keypress", optionValue: KeypressEvent): void;

	/**
	 * Fired on keyup event.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "keyup"): KeyupEvent;

	/**
	 * Fired on keyup event.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "keyup", optionValue: KeyupEvent): void;

	/**
	 * Fired before changing the editor's value.
	 * Return false in order to cancel change.
	 * It can be raised after loosing focus or on spin events.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "valueChanging"): ValueChangingEvent;

	/**
	 * Fired before changing the editor's value.
	 * Return false in order to cancel change.
	 * It can be raised after loosing focus or on spin events.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "valueChanging", optionValue: ValueChangingEvent): void;

	/**
	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "valueChanged"): ValueChangedEvent;

	/**
	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
	 *
	 * @optionValue New value to be set.
	 */
	igBaseEditor(optionLiteral: 'option', optionName: "valueChanged", optionValue: ValueChangedEvent): void;
	igBaseEditor(options: IgBaseEditor): JQuery;
	igBaseEditor(optionLiteral: 'option', optionName: string): any;
	igBaseEditor(optionLiteral: 'option', options: IgBaseEditor): JQuery;
	igBaseEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igBaseEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igTextEditor(methodName: "changeLocale"): void;
	igTextEditor(methodName: "displayValue"): string;
	igTextEditor(methodName: "dropDownContainer"): string;
	igTextEditor(methodName: "showDropDown"): void;
	igTextEditor(methodName: "hideDropDown"): void;
	igTextEditor(methodName: "dropDownButton"): string;
	igTextEditor(methodName: "dropDownVisible"): boolean;
	igTextEditor(methodName: "clearButton"): string;
	igTextEditor(methodName: "findListItemIndex", text: string, matchType?: Object): number;
	igTextEditor(methodName: "selectedListIndex", index?: number): number;
	igTextEditor(methodName: "getSelectedListItem"): string;
	igTextEditor(methodName: "getSelectedText"): string;
	igTextEditor(methodName: "getSelectionStart"): number;
	igTextEditor(methodName: "getSelectionEnd"): number;
	igTextEditor(methodName: "insert", string: string): void;
	igTextEditor(methodName: "select", start: number, end: number): void;
	igTextEditor(methodName: "spinUp"): void;
	igTextEditor(methodName: "spinDown"): void;
	igTextEditor(methodName: "spinUpButton"): string;
	igTextEditor(methodName: "spinDownButton"): string;
	igTextEditor(methodName: "inputName", newValue?: string): string;
	igTextEditor(methodName: "value", newValue: Object): void;
	igTextEditor(methodName: "field"): string;
	igTextEditor(methodName: "editorContainer"): string;
	igTextEditor(methodName: "hasFocus"): boolean;
	igTextEditor(methodName: "setFocus", delay?: number): void;
	igTextEditor(methodName: "hide"): void;
	igTextEditor(methodName: "show"): void;
	igTextEditor(methodName: "validator"): Object;
	igTextEditor(methodName: "isValid"): boolean;
	igTextEditor(methodName: "validate"): boolean;
	igTextEditor(methodName: "destroy"): void;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 */

	igTextEditor(optionLiteral: 'option', optionName: "buttonType"): string;

	/**
	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTextEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: string): void;

	/**
	 * Gets/Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type string.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "listItems"): any[];

	/**
	 * /Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "listWidth"): number;

	/**
	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;

	/**
	 * /Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;

	/**
	 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * /Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;

	/**
	 * The number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;

	/**
	 * Gets/Sets the ability of the editor to allow entering only specific characters in the input-field from the keyboard and on paste.
	 * Notes:
	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "includeKeys"): string;

	/**
	 * /Sets the ability of the editor to allow entering only specific characters in the input-field from the keyboard and on paste.
	 * Notes:
	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: string): void;

	/**
	 * Gets/Sets the ability of the editor to prevent entering specific characters from the keyboard or on paste.
	 * Notes:
	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "excludeKeys"): string;

	/**
	 * /Sets the ability of the editor to prevent entering specific characters from the keyboard or on paste.
	 * Notes:
	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: string): void;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 */

	igTextEditor(optionLiteral: 'option', optionName: "textAlign"): string;

	/**
	 * /Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTextEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: string): void;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "placeHolder"): string;

	/**
	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 */

	igTextEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;

	/**
	 * /Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTextEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;

	/**
	 * Gets the text mode of the editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
	 *
	 */

	igTextEditor(optionLiteral: 'option', optionName: "textMode"): string;

	/**
	 * The text mode of the editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTextEditor(optionLiteral: 'option', optionName: "textMode", optionValue: string): void;

	/**
	 * Gets/Sets the ability of the editor to automatically move the dropdown list selection item from one end to the opposite side. When the last item is reached and spin down is performed, the first item gets selected and vice versa. This option has no effect there is no drop-down list.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;

	/**
	 * /Sets the ability of the editor to automatically move the dropdown list selection item from one end to the opposite side. When the last item is reached and spin down is performed, the first item gets selected and vice versa. This option has no effect there is no drop-down list.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;

	/**
	 * /Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;

	/**
	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;

	/**
	 * /Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 */

	igTextEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): string;

	/**
	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTextEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: string): void;

	/**
	 * Gets/Sets the maximum length of a text which can be entered by the user.
	 * Negative values or 0 disables that behavior. If set at runtime the editor doesn't apply the option to the cuurent value.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "maxLength"): number;

	/**
	 * /Sets the maximum length of a text which can be entered by the user.
	 * Negative values or 0 disables that behavior. If set at runtime the editor doesn't apply the option to the cuurent value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: number): void;

	/**
	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;

	/**
	 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "toUpper"): boolean;

	/**
	 * /Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;

	/**
	 * Gets/Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "toLower"): boolean;

	/**
	 * /Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "suppressKeyboard"): boolean;

	/**
	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "suppressKeyboard", optionValue: boolean): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igTextEditor(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTextEditor(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igTextEditor(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTextEditor(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "value"): any;

	/**
	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;

	/**
	 * /Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */

	igTextEditor(optionLiteral: 'option', optionName: "nullValue"): string|number;

	/**
	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTextEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: string|number): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igTextEditor(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igTextEditor(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTextEditor(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired when the drop down is opening.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownListOpening"): DropDownListOpeningEvent;

	/**
	 * Fired when the drop down is opening.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownListOpening", optionValue: DropDownListOpeningEvent): void;

	/**
	 * Fired after the drop down is opened.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownListOpened"): DropDownListOpenedEvent;

	/**
	 * Fired after the drop down is opened.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownListOpened", optionValue: DropDownListOpenedEvent): void;

	/**
	 * Fired when the drop down is closing.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownListClosing"): DropDownListClosingEvent;

	/**
	 * Fired when the drop down is closing.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownListClosing", optionValue: DropDownListClosingEvent): void;

	/**
	 * Fired after the drop down is closed.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownListClosed"): DropDownListClosedEvent;

	/**
	 * Fired after the drop down is closed.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownListClosed", optionValue: DropDownListClosedEvent): void;

	/**
	 * Fired when an item in the drop down list is being selected.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting"): DropDownItemSelectingEvent;

	/**
	 * Fired when an item in the drop down list is being selected.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting", optionValue: DropDownItemSelectingEvent): void;

	/**
	 * Fired after an item in the drop down list is selected.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownItemSelected"): DropDownItemSelectedEvent;

	/**
	 * Fired after an item in the drop down list is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "dropDownItemSelected", optionValue: DropDownItemSelectedEvent): void;

	/**
	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
	 * when the clear button is clicked or when an item from a list is selected.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "textChanged"): TextChangedEvent;

	/**
	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
	 * when the clear button is clicked or when an item from a list is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "textChanged", optionValue: TextChangedEvent): void;

	/**
	 * Fired before rendering of the editor has finished.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Fired before rendering of the editor has finished.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Fired after rendering of the editor has finished.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Fired after rendering of the editor has finished.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Fired on mousedown event.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mousedown"): MousedownEvent;

	/**
	 * Fired on mousedown event.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mousedown", optionValue: MousedownEvent): void;

	/**
	 * Fired on mouseup event.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mouseup"): MouseupEvent;

	/**
	 * Fired on mouseup event.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mouseup", optionValue: MouseupEvent): void;

	/**
	 * Fired on mousemove at any part of editor including the drop-down list.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mousemove"): MousemoveEvent;

	/**
	 * Fired on mousemove at any part of editor including the drop-down list.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mousemove", optionValue: MousemoveEvent): void;

	/**
	 * Fired on mouseover at any part of editor including the drop-down list.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mouseover"): MouseoverEvent;

	/**
	 * Fired on mouseover at any part of editor including the drop-down list.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mouseover", optionValue: MouseoverEvent): void;

	/**
	 * Fired on mouseleave at any part of editor including the drop-down list.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mouseout"): MouseoutEvent;

	/**
	 * Fired on mouseleave at any part of editor including the drop-down list.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "mouseout", optionValue: MouseoutEvent): void;

	/**
	 * Fired when the input field of the editor loses focus.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "blur"): BlurEvent;

	/**
	 * Fired when the input field of the editor loses focus.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "blur", optionValue: BlurEvent): void;

	/**
	 * Fired when the input field of the editor gets focus.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "focus"): IgFocusEvent;

	/**
	 * Fired when the input field of the editor gets focus.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "focus", optionValue: IgFocusEvent): void;

	/**
	 * Fired on keydown event.
	 * Return false in order to cancel key action.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "keydown"): KeydownEvent;

	/**
	 * Fired on keydown event.
	 * Return false in order to cancel key action.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "keydown", optionValue: KeydownEvent): void;

	/**
	 * Fired on keypress event.
	 * Return false in order to cancel key action.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "keypress"): KeypressEvent;

	/**
	 * Fired on keypress event.
	 * Return false in order to cancel key action.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "keypress", optionValue: KeypressEvent): void;

	/**
	 * Fired on keyup event.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "keyup"): KeyupEvent;

	/**
	 * Fired on keyup event.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "keyup", optionValue: KeyupEvent): void;

	/**
	 * Fired before changing the editor's value.
	 * Return false in order to cancel change.
	 * It can be raised after loosing focus or on spin events.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "valueChanging"): ValueChangingEvent;

	/**
	 * Fired before changing the editor's value.
	 * Return false in order to cancel change.
	 * It can be raised after loosing focus or on spin events.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "valueChanging", optionValue: ValueChangingEvent): void;

	/**
	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "valueChanged"): ValueChangedEvent;

	/**
	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
	 *
	 * @optionValue New value to be set.
	 */
	igTextEditor(optionLiteral: 'option', optionName: "valueChanged", optionValue: ValueChangedEvent): void;
	igTextEditor(options: IgTextEditor): JQuery;
	igTextEditor(optionLiteral: 'option', optionName: string): any;
	igTextEditor(optionLiteral: 'option', options: IgTextEditor): JQuery;
	igTextEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTextEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igNumericEditor(methodName: "value", newValue?: number): number;
	igNumericEditor(methodName: "findListItemIndex", number: number): number;
	igNumericEditor(methodName: "getSelectedText"): void;
	igNumericEditor(methodName: "getSelectionStart"): void;
	igNumericEditor(methodName: "getSelectionEnd"): void;
	igNumericEditor(methodName: "spinUp", delta?: number): void;
	igNumericEditor(methodName: "spinDown", delta?: number): void;
	igNumericEditor(methodName: "selectListIndexUp"): void;
	igNumericEditor(methodName: "selectListIndexDown"): void;
	igNumericEditor(methodName: "getRegionalOption"): string;
	igNumericEditor(methodName: "changeRegional"): void;
	igNumericEditor(methodName: "changeLocale"): void;
	igNumericEditor(methodName: "displayValue"): string;
	igNumericEditor(methodName: "dropDownContainer"): string;
	igNumericEditor(methodName: "showDropDown"): void;
	igNumericEditor(methodName: "hideDropDown"): void;
	igNumericEditor(methodName: "dropDownButton"): string;
	igNumericEditor(methodName: "dropDownVisible"): boolean;
	igNumericEditor(methodName: "clearButton"): string;
	igNumericEditor(methodName: "selectedListIndex", index?: number): number;
	igNumericEditor(methodName: "getSelectedListItem"): string;
	igNumericEditor(methodName: "insert", string: string): void;
	igNumericEditor(methodName: "select", start: number, end: number): void;
	igNumericEditor(methodName: "spinUpButton"): string;
	igNumericEditor(methodName: "spinDownButton"): string;

	/**
	 * Gets/Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type number.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "listItems"): any[];

	/**
	 * /Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type number.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;

	/**
	 * Gets/Sets the character, which is used as negative sign.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "negativeSign"): string;

	/**
	 * /Sets the character, which is used as negative sign.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "negativeSign", optionValue: string): void;

	/**
	 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "negativePattern"): string;

	/**
	 * /Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "negativePattern", optionValue: string): void;

	/**
	 * Gets/Sets the character, which is used as decimal separator.
	 * Note: this option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "decimalSeparator"): string;

	/**
	 * /Sets the character, which is used as decimal separator.
	 * Note: this option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "decimalSeparator", optionValue: string): void;

	/**
	 * Gets/Sets the character, which is used as separator for groups (like thousands).
	 * That option has effect only in display mode(no focus).
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "groupSeparator"): string;

	/**
	 * /Sets the character, which is used as separator for groups (like thousands).
	 * That option has effect only in display mode(no focus).
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "groupSeparator", optionValue: string): void;

	/**
	 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
	 * The "groupSeparator" is inserted between groups.
	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
	 * Count of groups starts from the decimal point (from right to left).
	 * That option has effect only in display mode(no focus).
	 * Note: The numbers in the array must be positive integers.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "groups"): any[];

	/**
	 * (array of number objects) /Sets the number of digits in the integer part of a number, which are divided into groups.
	 * The "groupSeparator" is inserted between groups.
	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
	 * Count of groups starts from the decimal point (from right to left).
	 * That option has effect only in display mode(no focus).
	 * Note: The numbers in the array must be positive integers.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "groups", optionValue: any[]): void;

	/**
	 * Gets/Sets the maximum number of decimal places supported by the editor.
	 * Note: this option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "maxDecimals"): number;

	/**
	 * /Sets the maximum number of decimal places supported by the editor.
	 * Note: this option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "maxDecimals", optionValue: number): void;

	/**
	 * Gets/Sets the minimum number of decimal places supported by the editor.
	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
	 * Note: This option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "minDecimals"): number;

	/**
	 * /Sets the minimum number of decimal places supported by the editor.
	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
	 * Note: This option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "minDecimals", optionValue: number): void;

	/**
	 * Gets/Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "roundDecimals"): boolean;

	/**
	 * /Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "roundDecimals", optionValue: boolean): void;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "textAlign"): string;

	/**
	 * /Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: string): void;

	/**
	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "dataMode"): string;

	/**
	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: string): void;

	/**
	 * Gets/Sets the minimum value which can be entered in the editor by the end user.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "minValue"): number;

	/**
	 * /Sets the minimum value which can be entered in the editor by the end user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "minValue", optionValue: number): void;

	/**
	 * Gets/Sets the maximum value which can be entered in the editor by the end user.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "maxValue"): number;

	/**
	 * /Sets the maximum value which can be entered in the editor by the end user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "maxValue", optionValue: number): void;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;

	/**
	 * /Sets whether the editor value can become null.
	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;

	/**
	 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "spinDelta"): number;

	/**
	 * /Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "spinDelta", optionValue: number): void;

	/**
	 * Gets/Sets support for scientific format.
	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
	 * Notes: The "+" character is not supported in edit mode.
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "scientificFormat"): string;

	/**
	 * /Sets support for scientific format.
	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
	 * Notes: The "+" character is not supported in edit mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "scientificFormat", optionValue: string): void;

	/**
	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;

	/**
	 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;

	/**
	 * /Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;

	/**
	 * Removed from numeric editor options
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "maxLength"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "excludeKeys"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "includeKeys"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "toLower"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "toLower", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "toUpper"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: any): void;

	igNumericEditor(optionLiteral: 'option', optionName: "textMode"): any;

	igNumericEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "value"): any;

	/**
	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "buttonType"): string;

	/**
	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: string): void;

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "listWidth"): number;

	/**
	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;

	/**
	 * /Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;

	/**
	 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * /Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;

	/**
	 * The number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "placeHolder"): string;

	/**
	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;

	/**
	 * /Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;

	/**
	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;

	/**
	 * /Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): string;

	/**
	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: string): void;

	/**
	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;

	/**
	 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "suppressKeyboard"): boolean;

	/**
	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "suppressKeyboard", optionValue: boolean): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "nullValue"): string|number;

	/**
	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: string|number): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNumericEditor(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired when the drop down is opening.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownListOpening"): DropDownListOpeningEvent;

	/**
	 * Fired when the drop down is opening.
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownListOpening", optionValue: DropDownListOpeningEvent): void;

	/**
	 * Fired after the drop down is opened.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownListOpened"): DropDownListOpenedEvent;

	/**
	 * Fired after the drop down is opened.
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownListOpened", optionValue: DropDownListOpenedEvent): void;

	/**
	 * Fired when the drop down is closing.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownListClosing"): DropDownListClosingEvent;

	/**
	 * Fired when the drop down is closing.
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownListClosing", optionValue: DropDownListClosingEvent): void;

	/**
	 * Fired after the drop down is closed.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownListClosed"): DropDownListClosedEvent;

	/**
	 * Fired after the drop down is closed.
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownListClosed", optionValue: DropDownListClosedEvent): void;

	/**
	 * Fired when an item in the drop down list is being selected.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting"): DropDownItemSelectingEvent;

	/**
	 * Fired when an item in the drop down list is being selected.
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting", optionValue: DropDownItemSelectingEvent): void;

	/**
	 * Fired after an item in the drop down list is selected.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownItemSelected"): DropDownItemSelectedEvent;

	/**
	 * Fired after an item in the drop down list is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "dropDownItemSelected", optionValue: DropDownItemSelectedEvent): void;

	/**
	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
	 * when the clear button is clicked or when an item from a list is selected.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "textChanged"): TextChangedEvent;

	/**
	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
	 * when the clear button is clicked or when an item from a list is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igNumericEditor(optionLiteral: 'option', optionName: "textChanged", optionValue: TextChangedEvent): void;
	igNumericEditor(options: IgNumericEditor): JQuery;
	igNumericEditor(optionLiteral: 'option', optionName: string): any;
	igNumericEditor(optionLiteral: 'option', options: IgNumericEditor): JQuery;
	igNumericEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igNumericEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igCurrencyEditor(methodName: "currencySymbol", symbol?: Object): string;
	igCurrencyEditor(methodName: "value", newValue?: number): number;
	igCurrencyEditor(methodName: "findListItemIndex", number: number): number;
	igCurrencyEditor(methodName: "getSelectedText"): void;
	igCurrencyEditor(methodName: "getSelectionStart"): void;
	igCurrencyEditor(methodName: "getSelectionEnd"): void;
	igCurrencyEditor(methodName: "spinUp", delta?: number): void;
	igCurrencyEditor(methodName: "spinDown", delta?: number): void;
	igCurrencyEditor(methodName: "selectListIndexUp"): void;
	igCurrencyEditor(methodName: "selectListIndexDown"): void;
	igCurrencyEditor(methodName: "getRegionalOption"): string;
	igCurrencyEditor(methodName: "changeRegional"): void;

	/**
	 * Gets/Sets the string, which is used as positive pattern. The "n" flag represents the value of number.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "positivePattern"): string;

	/**
	 * /Sets the string, which is used as positive pattern. The "n" flag represents the value of number.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "positivePattern", optionValue: string): void;

	/**
	 * Gets/Sets a string that is used as the currency symbol that is shown in display mode.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "currencySymbol"): string;

	/**
	 * /Sets a string that is used as the currency symbol that is shown in display mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "currencySymbol", optionValue: string): void;

	/**
	 * Gets/Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type number.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "listItems"): any[];

	/**
	 * /Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type number.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;

	/**
	 * Gets/Sets the character, which is used as negative sign.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "negativeSign"): string;

	/**
	 * /Sets the character, which is used as negative sign.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "negativeSign", optionValue: string): void;

	/**
	 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "negativePattern"): string;

	/**
	 * /Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "negativePattern", optionValue: string): void;

	/**
	 * Gets/Sets the character, which is used as decimal separator.
	 * Note: this option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "decimalSeparator"): string;

	/**
	 * /Sets the character, which is used as decimal separator.
	 * Note: this option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "decimalSeparator", optionValue: string): void;

	/**
	 * Gets/Sets the character, which is used as separator for groups (like thousands).
	 * That option has effect only in display mode(no focus).
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "groupSeparator"): string;

	/**
	 * /Sets the character, which is used as separator for groups (like thousands).
	 * That option has effect only in display mode(no focus).
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "groupSeparator", optionValue: string): void;

	/**
	 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
	 * The "groupSeparator" is inserted between groups.
	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
	 * Count of groups starts from the decimal point (from right to left).
	 * That option has effect only in display mode(no focus).
	 * Note: The numbers in the array must be positive integers.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "groups"): any[];

	/**
	 * (array of number objects) /Sets the number of digits in the integer part of a number, which are divided into groups.
	 * The "groupSeparator" is inserted between groups.
	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
	 * Count of groups starts from the decimal point (from right to left).
	 * That option has effect only in display mode(no focus).
	 * Note: The numbers in the array must be positive integers.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "groups", optionValue: any[]): void;

	/**
	 * Gets/Sets the maximum number of decimal places supported by the editor.
	 * Note: this option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "maxDecimals"): number;

	/**
	 * /Sets the maximum number of decimal places supported by the editor.
	 * Note: this option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "maxDecimals", optionValue: number): void;

	/**
	 * Gets/Sets the minimum number of decimal places supported by the editor.
	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
	 * Note: This option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "minDecimals"): number;

	/**
	 * /Sets the minimum number of decimal places supported by the editor.
	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
	 * Note: This option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "minDecimals", optionValue: number): void;

	/**
	 * Gets/Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "roundDecimals"): boolean;

	/**
	 * /Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "roundDecimals", optionValue: boolean): void;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "textAlign"): string;

	/**
	 * /Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: string): void;

	/**
	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "dataMode"): string;

	/**
	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: string): void;

	/**
	 * Gets/Sets the minimum value which can be entered in the editor by the end user.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "minValue"): number;

	/**
	 * /Sets the minimum value which can be entered in the editor by the end user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "minValue", optionValue: number): void;

	/**
	 * Gets/Sets the maximum value which can be entered in the editor by the end user.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "maxValue"): number;

	/**
	 * /Sets the maximum value which can be entered in the editor by the end user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "maxValue", optionValue: number): void;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;

	/**
	 * /Sets whether the editor value can become null.
	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;

	/**
	 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "spinDelta"): number;

	/**
	 * /Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "spinDelta", optionValue: number): void;

	/**
	 * Gets/Sets support for scientific format.
	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
	 * Notes: The "+" character is not supported in edit mode.
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "scientificFormat"): string;

	/**
	 * /Sets support for scientific format.
	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
	 * Notes: The "+" character is not supported in edit mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "scientificFormat", optionValue: string): void;

	/**
	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;

	/**
	 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;

	/**
	 * /Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;

	/**
	 * Removed from numeric editor options
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "maxLength"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "excludeKeys"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "includeKeys"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "toLower"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "toLower", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "toUpper"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: any): void;

	igCurrencyEditor(optionLiteral: 'option', optionName: "textMode"): any;

	igCurrencyEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "value"): any;

	/**
	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "buttonType"): string;

	/**
	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: string): void;

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "listWidth"): number;

	/**
	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;

	/**
	 * /Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;

	/**
	 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * /Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;

	/**
	 * The number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "placeHolder"): string;

	/**
	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;

	/**
	 * /Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;

	/**
	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;

	/**
	 * /Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): string;

	/**
	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: string): void;

	/**
	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;

	/**
	 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "suppressKeyboard"): boolean;

	/**
	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "suppressKeyboard", optionValue: boolean): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "nullValue"): string|number;

	/**
	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: string|number): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCurrencyEditor(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCurrencyEditor(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igCurrencyEditor(options: IgCurrencyEditor): JQuery;
	igCurrencyEditor(optionLiteral: 'option', optionName: string): any;
	igCurrencyEditor(optionLiteral: 'option', options: IgCurrencyEditor): JQuery;
	igCurrencyEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igCurrencyEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igPercentEditor(methodName: "insert", string: string): void;
	igPercentEditor(methodName: "percentSymbol", symbol?: Object): string;
	igPercentEditor(methodName: "value", newValue?: number): number;
	igPercentEditor(methodName: "findListItemIndex", number: number): number;
	igPercentEditor(methodName: "getSelectedText"): void;
	igPercentEditor(methodName: "getSelectionStart"): void;
	igPercentEditor(methodName: "getSelectionEnd"): void;
	igPercentEditor(methodName: "spinUp", delta?: number): void;
	igPercentEditor(methodName: "spinDown", delta?: number): void;
	igPercentEditor(methodName: "selectListIndexUp"): void;
	igPercentEditor(methodName: "selectListIndexDown"): void;
	igPercentEditor(methodName: "getRegionalOption"): string;
	igPercentEditor(methodName: "changeRegional"): void;

	/**
	 * Gets/Sets the pattern for positive numeric values, which is used in display (no focus) state.
	 * If you use the "en-US" culture the default value for "positivePattern" will be "n$" where the "$" flag represents the "numericSymbol" and the "n" flag represents the value of the number.
	 * Note: this option has priority over possible regional settings.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "positivePattern"): string;

	/**
	 * /Sets the pattern for positive numeric values, which is used in display (no focus) state.
	 * If you use the "en-US" culture the default value for "positivePattern" will be "n$" where the "$" flag represents the "numericSymbol" and the "n" flag represents the value of the number.
	 * Note: this option has priority over possible regional settings.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "positivePattern", optionValue: string): void;

	/**
	 * Gets/Sets the symbol, which is used in display (no focus) state.
	 * Note: this option has priority over possible regional settings.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "percentSymbol"): string;

	/**
	 * /Sets the symbol, which is used in display (no focus) state.
	 * Note: this option has priority over possible regional settings.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "percentSymbol", optionValue: string): void;

	/**
	 * Gets/Sets the factor which is used for the get and set of the "value" method.
	 * On get the number (string) entered by the user is divided by that factor and on set the number (string) displayed in the editor is multiplied by that factor.
	 * For example, if the factor is 100 and the "value" is set to 0.123, then the editor will show string "12.3".
	 * Possible values: 1 or 100.
	 * Note: this option has priority over possible regional settings.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "displayFactor"): number;

	/**
	 * /Sets the factor which is used for the get and set of the "value" method.
	 * On get the number (string) entered by the user is divided by that factor and on set the number (string) displayed in the editor is multiplied by that factor.
	 * For example, if the factor is 100 and the "value" is set to 0.123, then the editor will show string "12.3".
	 * Possible values: 1 or 100.
	 * Note: this option has priority over possible regional settings.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "displayFactor", optionValue: number): void;

	/**
	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igPercentEditor#options:minValue) and [maxValue](ui.igPercentEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
	 * In addition, the maximum value that can be set to [minDecimals](ui.igPercentEditor#options:minDecimals) and [maxDecimals](ui.igPercentEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "dataMode"): string;

	/**
	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igPercentEditor#options:minValue) and [maxValue](ui.igPercentEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
	 * In addition, the maximum value that can be set to [minDecimals](ui.igPercentEditor#options:minDecimals) and [maxDecimals](ui.igPercentEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: string): void;

	/**
	 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igpercenteditor#options:buttonType) or [spinUp](ui.igpercenteditor#methods:spinUp) and [spinDown](ui.igpercenteditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "spinDelta"): number;

	/**
	 * /Sets the default delta-value which is used with "spin" [buttonType](ui.igpercenteditor#options:buttonType) or [spinUp](ui.igpercenteditor#methods:spinUp) and [spinDown](ui.igpercenteditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "spinDelta", optionValue: number): void;

	/**
	 * Gets/Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type number.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "listItems"): any[];

	/**
	 * /Sets list of items which are used as a source for the drop-down list.
	 * Items in the list can be of type number.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;

	/**
	 * Gets/Sets the character, which is used as negative sign.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "negativeSign"): string;

	/**
	 * /Sets the character, which is used as negative sign.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "negativeSign", optionValue: string): void;

	/**
	 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "negativePattern"): string;

	/**
	 * /Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "negativePattern", optionValue: string): void;

	/**
	 * Gets/Sets the character, which is used as decimal separator.
	 * Note: this option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "decimalSeparator"): string;

	/**
	 * /Sets the character, which is used as decimal separator.
	 * Note: this option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "decimalSeparator", optionValue: string): void;

	/**
	 * Gets/Sets the character, which is used as separator for groups (like thousands).
	 * That option has effect only in display mode(no focus).
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "groupSeparator"): string;

	/**
	 * /Sets the character, which is used as separator for groups (like thousands).
	 * That option has effect only in display mode(no focus).
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "groupSeparator", optionValue: string): void;

	/**
	 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
	 * The "groupSeparator" is inserted between groups.
	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
	 * Count of groups starts from the decimal point (from right to left).
	 * That option has effect only in display mode(no focus).
	 * Note: The numbers in the array must be positive integers.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "groups"): any[];

	/**
	 * (array of number objects) /Sets the number of digits in the integer part of a number, which are divided into groups.
	 * The "groupSeparator" is inserted between groups.
	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
	 * Count of groups starts from the decimal point (from right to left).
	 * That option has effect only in display mode(no focus).
	 * Note: The numbers in the array must be positive integers.
	 * Note: This option has priority over possible regional settings.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "groups", optionValue: any[]): void;

	/**
	 * Gets/Sets the maximum number of decimal places supported by the editor.
	 * Note: this option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "maxDecimals"): number;

	/**
	 * /Sets the maximum number of decimal places supported by the editor.
	 * Note: this option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "maxDecimals", optionValue: number): void;

	/**
	 * Gets/Sets the minimum number of decimal places supported by the editor.
	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
	 * Note: This option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "minDecimals"): number;

	/**
	 * /Sets the minimum number of decimal places supported by the editor.
	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
	 * Note: This option has priority over possible regional settings.
	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "minDecimals", optionValue: number): void;

	/**
	 * Gets/Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "roundDecimals"): boolean;

	/**
	 * /Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "roundDecimals", optionValue: boolean): void;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "textAlign"): string;

	/**
	 * /Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: string): void;

	/**
	 * Gets/Sets the minimum value which can be entered in the editor by the end user.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "minValue"): number;

	/**
	 * /Sets the minimum value which can be entered in the editor by the end user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "minValue", optionValue: number): void;

	/**
	 * Gets/Sets the maximum value which can be entered in the editor by the end user.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "maxValue"): number;

	/**
	 * /Sets the maximum value which can be entered in the editor by the end user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "maxValue", optionValue: number): void;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;

	/**
	 * /Sets whether the editor value can become null.
	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;

	/**
	 * Gets/Sets support for scientific format.
	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
	 * Notes: The "+" character is not supported in edit mode.
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "scientificFormat"): string;

	/**
	 * /Sets support for scientific format.
	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
	 * Notes: The "+" character is not supported in edit mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "scientificFormat", optionValue: string): void;

	/**
	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;

	/**
	 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;

	/**
	 * /Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;

	/**
	 * Removed from numeric editor options
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "maxLength"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "excludeKeys"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "includeKeys"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "toLower"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "toLower", optionValue: any): void;

	/**
	 * Removed from numeric editor options
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "toUpper"): any;

	/**
	 * Removed from numeric editor options
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: any): void;

	igPercentEditor(optionLiteral: 'option', optionName: "textMode"): any;

	igPercentEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "value"): any;

	/**
	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "buttonType"): string;

	/**
	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: string): void;

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "listWidth"): number;

	/**
	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;

	/**
	 * /Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;

	/**
	 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
	 * If the option is set to false the editor will attach the drop-down list element to the editor container
	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * /Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;

	/**
	 * The number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "placeHolder"): string;

	/**
	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;

	/**
	 * /Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;

	/**
	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;

	/**
	 * /Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): string;

	/**
	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: string): void;

	/**
	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;

	/**
	 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
	 * Note! In case there are no list items - the editor will reamin readonly
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "suppressKeyboard"): boolean;

	/**
	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "suppressKeyboard", optionValue: boolean): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "nullValue"): string|number;

	/**
	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: string|number): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPercentEditor(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPercentEditor(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igPercentEditor(options: IgPercentEditor): JQuery;
	igPercentEditor(optionLiteral: 'option', optionName: string): any;
	igPercentEditor(optionLiteral: 'option', options: IgPercentEditor): JQuery;
	igPercentEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igPercentEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igMaskEditor(methodName: "value", newValue?: string): string;
	igMaskEditor(methodName: "dropDownContainer"): void;
	igMaskEditor(methodName: "showDropDown"): void;
	igMaskEditor(methodName: "hideDropDown"): void;
	igMaskEditor(methodName: "dropDownButton"): void;
	igMaskEditor(methodName: "spinUpButton"): void;
	igMaskEditor(methodName: "spinDownButton"): void;
	igMaskEditor(methodName: "dropDownVisible"): void;
	igMaskEditor(methodName: "findListItemIndex"): void;
	igMaskEditor(methodName: "selectedListIndex"): void;
	igMaskEditor(methodName: "getSelectedListItem"): void;
	igMaskEditor(methodName: "spinUp"): void;
	igMaskEditor(methodName: "spinDown"): void;
	igMaskEditor(methodName: "isValid"): boolean;
	igMaskEditor(methodName: "changeLocale"): void;
	igMaskEditor(methodName: "displayValue"): string;
	igMaskEditor(methodName: "clearButton"): string;
	igMaskEditor(methodName: "getSelectedText"): string;
	igMaskEditor(methodName: "getSelectionStart"): number;
	igMaskEditor(methodName: "getSelectionEnd"): number;
	igMaskEditor(methodName: "insert", string: string): void;
	igMaskEditor(methodName: "select", start: number, end: number): void;

	/**
	 * Gets visibility of the clear button. That option can be set only on initialization.
	 *
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "buttonType"): string;

	/**
	 * Visibility of the clear button. That option can be set only on initialization.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: string): void;

	/**
	 * Gets input mask. Mask may include filter-flags and literal characters.
	 * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
	 * Default is "CCCCCCCCCC"
	 * Note: optional flags/entries affect the value returned by get of the [value](ui.igmaskeditor#methods:value) methods.
	 * List of filter-flags:
	 * C: any keyboard character. Entry is optional.
	 * &: any keyboard character. Entry is required.
	 * a: letter or digit character. Entry is optional.
	 * A: letter or digit character. Entry is required.
	 * ?: letter character. Entry is optional.
	 * L: letter character. Entry is required.
	 * 9: digit character. Entry is optional.
	 * 0: digit character. Entry is required.
	 * #: digit character or "+" or "_". Entry is optional with replacement by [emptyChar](ui.igmaskeditor#options:emptyChar) or by [padChar](ui.igmaskeditor#options:padChar).
	 * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
	 * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
	 * Note! This option can not be set runtime.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "inputMask"): string;

	/**
	 * Input mask. Mask may include filter-flags and literal characters.
	 * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
	 * Default is "CCCCCCCCCC"
	 * Note: optional flags/entries affect the value returned by get of the [value](ui.igmaskeditor#methods:value) methods.
	 * List of filter-flags:
	 * C: any keyboard character. Entry is optional.
	 * &: any keyboard character. Entry is required.
	 * a: letter or digit character. Entry is optional.
	 * A: letter or digit character. Entry is required.
	 * ?: letter character. Entry is optional.
	 * L: letter character. Entry is required.
	 * 9: digit character. Entry is optional.
	 * 0: digit character. Entry is required.
	 * #: digit character or "+" or "_". Entry is optional with replacement by [emptyChar](ui.igmaskeditor#options:emptyChar) or by [padChar](ui.igmaskeditor#options:padChar).
	 * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
	 * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "inputMask", optionValue: string): void;

	/**
	 * It affects the value of the control (value method/option and submitted in forms). It defines what the value should contain from text, unfilled prompts and literals. The default is allText and when used value method/option returns the text entered, all prompts (positions) and literals.
	 *
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "dataMode"): string;

	/**
	 * It affects the value of the control (value method/option and submitted in forms). It defines what the value should contain from text, unfilled prompts and literals. The default is allText and when used value method/option returns the text entered, all prompts (positions) and literals.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: string): void;

	/**
	 * Gets character which is used as prompt in edit mode for available entry position.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "unfilledCharsPrompt"): string;

	/**
	 * Character which is used as prompt in edit mode for available entry position.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "unfilledCharsPrompt", optionValue: string): void;

	/**
	 * Gets/Sets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "padChar"): string;

	/**
	 * /Sets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "padChar", optionValue: string): void;

	/**
	 * Gets/Sets character which is used as replacement of not-filled required position in mask when application calls get for the [value](ui.igmaskeditor#methods:value) methods.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "emptyChar"): string;

	/**
	 * /Sets character which is used as replacement of not-filled required position in mask when application calls get for the [value](ui.igmaskeditor#methods:value) methods.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "emptyChar", optionValue: string): void;

	/**
	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "includeKeys"): string;

	/**
	 * Ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: string): void;

	/**
	 * Gets ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "excludeKeys"): string;

	/**
	 * Ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: string): void;

	/**
	 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;

	/**
	 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;

	/**
	 * Sets gets list of items which are used for drop-down list.
	 * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "listItems"): any[];

	/**
	 * Sets gets list of items which are used for drop-down list.
	 * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;

	/**
	 * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "listWidth"): number;

	/**
	 * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;

	/**
	 * Sets the hover/unhover animation duration.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;

	/**
	 * Sets the hover/unhover animation duration.
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;

	/**
	 * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;

	/**
	 * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;

	igMaskEditor(optionLiteral: 'option', optionName: "textMode"): any;

	igMaskEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;

	/**
	 * Gets/Sets how many items should be shown at once.
	 * Notes:
	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
	 * Note! This option can not be set runtime.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;

	/**
	 * /Sets how many items should be shown at once.
	 * Notes:
	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
	 * Note! This option can not be set runtime.
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "maxLength"): any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "value"): any;

	/**
	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;
	igMaskEditor(optionLiteral: 'option', optionName: "suppressKeyboard"): boolean;
	igMaskEditor(optionLiteral: 'option', optionName: "suppressKeyboard", optionValue: boolean): void;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "textAlign"): string;

	/**
	 * /Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: string): void;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "placeHolder"): string;

	/**
	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;

	/**
	 * /Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;

	/**
	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;

	/**
	 * /Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;

	/**
	 * Gets/Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "toUpper"): boolean;

	/**
	 * /Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;

	/**
	 * Gets/Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "toLower"): boolean;

	/**
	 * /Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
	 * Note! When the option is set at runtime the editor is not changing the current value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;

	/**
	 * /Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "nullValue"): string|number;

	/**
	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: string|number): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMaskEditor(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownListOpening"): DropDownListOpeningEvent;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownListOpening", optionValue: DropDownListOpeningEvent): void;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownListOpened"): DropDownListOpenedEvent;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownListOpened", optionValue: DropDownListOpenedEvent): void;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownListClosing"): DropDownListClosingEvent;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownListClosing", optionValue: DropDownListClosingEvent): void;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownListClosed"): DropDownListClosedEvent;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownListClosed", optionValue: DropDownListClosedEvent): void;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting"): DropDownItemSelectingEvent;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting", optionValue: DropDownItemSelectingEvent): void;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownItemSelected"): DropDownItemSelectedEvent;
	igMaskEditor(optionLiteral: 'option', optionName: "dropDownItemSelected", optionValue: DropDownItemSelectedEvent): void;

	/**
	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
	 * when the clear button is clicked or when an item from a list is selected.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "textChanged"): TextChangedEvent;

	/**
	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
	 * when the clear button is clicked or when an item from a list is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igMaskEditor(optionLiteral: 'option', optionName: "textChanged", optionValue: TextChangedEvent): void;
	igMaskEditor(options: IgMaskEditor): JQuery;
	igMaskEditor(optionLiteral: 'option', optionName: string): any;
	igMaskEditor(optionLiteral: 'option', options: IgMaskEditor): JQuery;
	igMaskEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igMaskEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igDateEditor(methodName: "changeRegional"): void;
	igDateEditor(methodName: "value", newValue?: Date): Date;
	igDateEditor(methodName: "getSelectedDate"): Date;
	igDateEditor(methodName: "selectDate", date: Date): void;
	igDateEditor(methodName: "spinUp", delta?: number): void;
	igDateEditor(methodName: "spinDown", delta?: number): void;
	igDateEditor(methodName: "spinUpButton"): string;
	igDateEditor(methodName: "spinDownButton"): string;
	igDateEditor(methodName: "isValid"): boolean;
	igDateEditor(methodName: "dropDownButton"): void;
	igDateEditor(methodName: "dropDownContainer"): void;
	igDateEditor(methodName: "dropDownVisible"): void;
	igDateEditor(methodName: "findListItemIndex"): void;
	igDateEditor(methodName: "getSelectedListItem"): void;
	igDateEditor(methodName: "selectedListIndex"): void;
	igDateEditor(methodName: "showDropDown"): void;
	igDateEditor(methodName: "hideDropDown"): void;

	/**
	 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "value"): Date;

	/**
	 * /Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "value", optionValue: Date): void;

	/**
	 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "minValue"): Date;

	/**
	 * The minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "minValue", optionValue: Date): void;

	/**
	 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "maxValue"): Date;

	/**
	 * The maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "maxValue", optionValue: Date): void;

	/**
	 * Gets/Sets format of date while editor has no focus.
	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
	 * If value is not set, then the dateInputFormat is used automatically.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them:
	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "y": year field without century and without leading zero
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "M": month field as digit without leading zero
	 * "MM": month field as digit with leading zero
	 * "MMM": month field as short month name
	 * "MMMM": month field as long month name
	 * "d": day of month field without leading zero
	 * "dd": day of month field with leading zero
	 * "ddd": day of the week as short name
	 * "dddd": day of the week as long name
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "h": hours field in 12-hours format without leading zero
	 * "hh": hours field in 12-hours format with leading zero
	 * "H": hours field in 24-hours format without leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "m": minutes field without leading zero
	 * "mm": minutes field with leading zero
	 * "s": seconds field without leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dateDisplayFormat"): string;

	/**
	 * /Sets format of date while editor has no focus.
	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
	 * If value is not set, then the dateInputFormat is used automatically.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them:
	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "y": year field without century and without leading zero
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "M": month field as digit without leading zero
	 * "MM": month field as digit with leading zero
	 * "MMM": month field as short month name
	 * "MMMM": month field as long month name
	 * "d": day of month field without leading zero
	 * "dd": day of month field with leading zero
	 * "ddd": day of the week as short name
	 * "dddd": day of the week as long name
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "h": hours field in 12-hours format without leading zero
	 * "hh": hours field in 12-hours format with leading zero
	 * "H": hours field in 24-hours format without leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "m": minutes field without leading zero
	 * "mm": minutes field with leading zero
	 * "s": seconds field without leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dateDisplayFormat", optionValue: string): void;

	/**
	 * Gets format of date while editor has focus.
	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * If option is not set, then the "date" is used automatically.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "MM": month field as digit with leading zero
	 * "dd": day of month field with leading zero
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "hh": hours field in 12-hours format with leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "mm": minutes field with leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 * Note! This option can not be set runtime.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dateInputFormat"): string;

	/**
	 * Format of date while editor has focus.
	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * If option is not set, then the "date" is used automatically.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "MM": month field as digit with leading zero
	 * "dd": day of month field with leading zero
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "hh": hours field in 12-hours format with leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "mm": minutes field with leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dateInputFormat", optionValue: string): void;

	/**
	 * Gets the value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
	 * "2016-11-11T10:00:00+05:00"
	 *
	 */

	igDateEditor(optionLiteral: 'option', optionName: "dataMode"): string;

	/**
	 * The value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
	 * "2016-11-11T10:00:00+05:00"
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDateEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: string): void;

	/**
	 * Gets/Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "displayTimeOffset"): any;

	/**
	 * /Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "displayTimeOffset", optionValue: any): void;

	/**
	 * Gets visibility of the spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
	 *
	 */

	igDateEditor(optionLiteral: 'option', optionName: "buttonType"): string;

	/**
	 * Visibility of the spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDateEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: string): void;

	/**
	 * Gets/Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 * spinDelta: {
	 * year: 4,
	 * month: 3,
	 * day: 10,
	 * hours: 12,
	 * minutes: 15,
	 * seconds: 10,
	 * milliseconds: 100
	 * }
	 * Time periods that don't have values use 1 as default.
	 *
	 */

	igDateEditor(optionLiteral: 'option', optionName: "spinDelta"): number|Object;

	/**
	 * /Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 * spinDelta: {
	 * year: 4,
	 * month: 3,
	 * day: 10,
	 * hours: 12,
	 * minutes: 15,
	 * seconds: 10,
	 * milliseconds: 100
	 * }
	 * Time periods that don't have values use 1 as default.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDateEditor(optionLiteral: 'option', optionName: "spinDelta", optionValue: number|Object): void;

	/**
	 * Gets/Sets ability to modify only 1 date field on spin events.
	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
	 * Value true modifies only value of one field.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "limitSpinToCurrentField"): boolean;

	/**
	 * /Sets ability to modify only 1 date field on spin events.
	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
	 * Value true modifies only value of one field.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "limitSpinToCurrentField", optionValue: boolean): void;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "enableUTCDates"): boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "enableUTCDates", optionValue: boolean): void;

	/**
	 * Gets/Sets year for auto detection of 20th and 21st centuries.
	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "centuryThreshold"): number;

	/**
	 * /Sets year for auto detection of 20th and 21st centuries.
	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "centuryThreshold", optionValue: number): void;

	/**
	 * Gets/Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "yearShift"): number;

	/**
	 * /Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "yearShift", optionValue: number): void;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */

	igDateEditor(optionLiteral: 'option', optionName: "nullValue"): string|number|Date;

	/**
	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDateEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: string|number|Date): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "listItems"): any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "listWidth"): number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "inputMask"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "inputMask", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "unfilledCharsPrompt"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "unfilledCharsPrompt", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "padChar"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "padChar", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "emptyChar"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "emptyChar", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "toUpper"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "toLower"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;
	igDateEditor(optionLiteral: 'option', optionName: "suppressKeyboard"): boolean;
	igDateEditor(optionLiteral: 'option', optionName: "suppressKeyboard", optionValue: boolean): void;

	/**
	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "includeKeys"): string;

	/**
	 * Ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: string): void;

	/**
	 * Gets ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "excludeKeys"): string;

	/**
	 * Ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: string): void;

	/**
	 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;

	/**
	 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: string): void;

	igDateEditor(optionLiteral: 'option', optionName: "textMode"): any;

	igDateEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;

	/**
	 * Gets/Sets how many items should be shown at once.
	 * Notes:
	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
	 * Note! This option can not be set runtime.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;

	/**
	 * /Sets how many items should be shown at once.
	 * Notes:
	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
	 * Note! This option can not be set runtime.
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "maxLength"): any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 */

	igDateEditor(optionLiteral: 'option', optionName: "textAlign"): string;

	/**
	 * /Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDateEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: string): void;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "placeHolder"): string;

	/**
	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 */

	igDateEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;

	/**
	 * /Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDateEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;

	/**
	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;

	/**
	 * /Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igDateEditor(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDateEditor(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igDateEditor(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDateEditor(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;

	/**
	 * /Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igDateEditor(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igDateEditor(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDateEditor(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownListOpening"): DropDownListOpeningEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownListOpening", optionValue: DropDownListOpeningEvent): void;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownListOpened"): DropDownListOpenedEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownListOpened", optionValue: DropDownListOpenedEvent): void;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownListClosing"): DropDownListClosingEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownListClosing", optionValue: DropDownListClosingEvent): void;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownListClosed"): DropDownListClosedEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownListClosed", optionValue: DropDownListClosedEvent): void;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting"): DropDownItemSelectingEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting", optionValue: DropDownItemSelectingEvent): void;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownItemSelected"): DropDownItemSelectedEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDateEditor(optionLiteral: 'option', optionName: "dropDownItemSelected", optionValue: DropDownItemSelectedEvent): void;
	igDateEditor(options: IgDateEditor): JQuery;
	igDateEditor(optionLiteral: 'option', optionName: string): any;
	igDateEditor(optionLiteral: 'option', options: IgDateEditor): JQuery;
	igDateEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igDateEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igDatePicker(methodName: "changeRegional"): void;
	igDatePicker(methodName: "getCalendar"): string;
	igDatePicker(methodName: "dropDownContainer"): void;
	igDatePicker(methodName: "findListItemIndex"): void;
	igDatePicker(methodName: "getSelectedListItem"): void;
	igDatePicker(methodName: "selectedListIndex"): void;
	igDatePicker(methodName: "showDropDown"): void;
	igDatePicker(methodName: "hideDropDown"): void;
	igDatePicker(methodName: "dropDownButton"): string;
	igDatePicker(methodName: "dropDownVisible"): boolean;
	igDatePicker(methodName: "destroy"): void;
	igDatePicker(methodName: "value", newValue?: Date): Date;
	igDatePicker(methodName: "getSelectedDate"): Date;
	igDatePicker(methodName: "selectDate", date: Date): void;
	igDatePicker(methodName: "spinUp", delta?: number): void;
	igDatePicker(methodName: "spinDown", delta?: number): void;
	igDatePicker(methodName: "spinUpButton"): string;
	igDatePicker(methodName: "spinDownButton"): string;
	igDatePicker(methodName: "isValid"): boolean;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.
	 *
	 */

	igDatePicker(optionLiteral: 'option', optionName: "buttonType"): string;

	/**
	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDatePicker(optionLiteral: 'option', optionName: "buttonType", optionValue: string): void;

	/**
	 * Gets/Sets the options supported by the [jquery.ui.datepicker](http://api.jqueryui.com/datepicker/). Only options related to the drop-down calendar are supported.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "datepickerOptions"): any;

	/**
	 * /Sets the options supported by the [jquery.ui.datepicker](http://api.jqueryui.com/datepicker/). Only options related to the drop-down calendar are supported.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "datepickerOptions", optionValue: any): void;

	/**
	 * Gets the ability to limit igDatePicker to be used only as s calendar. When set to true the editor input is not editable.
	 * Note! This option can not be set runtime.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;

	/**
	 * The ability to limit igDatePicker to be used only as s calendar. When set to true the editor input is not editable.
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	igDatePicker(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	igDatePicker(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	igDatePicker(optionLiteral: 'option', optionName: "listItems"): any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "listItems", optionValue: any): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 */
	igDatePicker(optionLiteral: 'option', optionName: "listWidth"): number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "suppressKeyboard"): boolean;

	/**
	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "suppressKeyboard", optionValue: boolean): void;

	/**
	 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "value"): Date;

	/**
	 * /Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "value", optionValue: Date): void;

	/**
	 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "minValue"): Date;

	/**
	 * The minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "minValue", optionValue: Date): void;

	/**
	 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "maxValue"): Date;

	/**
	 * The maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "maxValue", optionValue: Date): void;

	/**
	 * Gets/Sets format of date while editor has no focus.
	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
	 * If value is not set, then the dateInputFormat is used automatically.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them:
	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "y": year field without century and without leading zero
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "M": month field as digit without leading zero
	 * "MM": month field as digit with leading zero
	 * "MMM": month field as short month name
	 * "MMMM": month field as long month name
	 * "d": day of month field without leading zero
	 * "dd": day of month field with leading zero
	 * "ddd": day of the week as short name
	 * "dddd": day of the week as long name
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "h": hours field in 12-hours format without leading zero
	 * "hh": hours field in 12-hours format with leading zero
	 * "H": hours field in 24-hours format without leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "m": minutes field without leading zero
	 * "mm": minutes field with leading zero
	 * "s": seconds field without leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dateDisplayFormat"): string;

	/**
	 * /Sets format of date while editor has no focus.
	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
	 * If value is not set, then the dateInputFormat is used automatically.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them:
	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "y": year field without century and without leading zero
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "M": month field as digit without leading zero
	 * "MM": month field as digit with leading zero
	 * "MMM": month field as short month name
	 * "MMMM": month field as long month name
	 * "d": day of month field without leading zero
	 * "dd": day of month field with leading zero
	 * "ddd": day of the week as short name
	 * "dddd": day of the week as long name
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "h": hours field in 12-hours format without leading zero
	 * "hh": hours field in 12-hours format with leading zero
	 * "H": hours field in 24-hours format without leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "m": minutes field without leading zero
	 * "mm": minutes field with leading zero
	 * "s": seconds field without leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dateDisplayFormat", optionValue: string): void;

	/**
	 * Gets format of date while editor has focus.
	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * If option is not set, then the "date" is used automatically.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "MM": month field as digit with leading zero
	 * "dd": day of month field with leading zero
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "hh": hours field in 12-hours format with leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "mm": minutes field with leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 * Note! This option can not be set runtime.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dateInputFormat"): string;

	/**
	 * Format of date while editor has focus.
	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
	 * If option is not set, then the "date" is used automatically.
	 * List of predefined regional flags:
	 * "date": the datePattern member of regional option is used
	 * "dateLong": the dateLongPattern member of regional option is used
	 * "time": the timePattern member of regional option is used
	 * "timeLong": the timeLongPattern member of regional option is used
	 * "dateTime": the dateTimePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of date-flags when explicit date pattern is used:
	 * "yy": year field without century and with leading zero
	 * "yyyy": year field with leading zeros
	 * "MM": month field as digit with leading zero
	 * "dd": day of month field with leading zero
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "hh": hours field in 12-hours format with leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "mm": minutes field with leading zero
	 * "ss": seconds field with leading zero
	 * "f": milliseconds field in hundreds
	 * "ff": milliseconds field in tenths
	 * "fff": milliseconds field
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dateInputFormat", optionValue: string): void;

	/**
	 * Gets the value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
	 * "2016-11-11T10:00:00+05:00"
	 *
	 */

	igDatePicker(optionLiteral: 'option', optionName: "dataMode"): string;

	/**
	 * The value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
	 * "2016-11-11T10:00:00+05:00"
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDatePicker(optionLiteral: 'option', optionName: "dataMode", optionValue: string): void;

	/**
	 * Gets/Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "displayTimeOffset"): any;

	/**
	 * /Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "displayTimeOffset", optionValue: any): void;

	/**
	 * Gets/Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 * spinDelta: {
	 * year: 4,
	 * month: 3,
	 * day: 10,
	 * hours: 12,
	 * minutes: 15,
	 * seconds: 10,
	 * milliseconds: 100
	 * }
	 * Time periods that don't have values use 1 as default.
	 *
	 */

	igDatePicker(optionLiteral: 'option', optionName: "spinDelta"): number|Object;

	/**
	 * /Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 * spinDelta: {
	 * year: 4,
	 * month: 3,
	 * day: 10,
	 * hours: 12,
	 * minutes: 15,
	 * seconds: 10,
	 * milliseconds: 100
	 * }
	 * Time periods that don't have values use 1 as default.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDatePicker(optionLiteral: 'option', optionName: "spinDelta", optionValue: number|Object): void;

	/**
	 * Gets/Sets ability to modify only 1 date field on spin events.
	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
	 * Value true modifies only value of one field.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "limitSpinToCurrentField"): boolean;

	/**
	 * /Sets ability to modify only 1 date field on spin events.
	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
	 * Value true modifies only value of one field.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "limitSpinToCurrentField", optionValue: boolean): void;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "enableUTCDates"): boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "enableUTCDates", optionValue: boolean): void;

	/**
	 * Gets/Sets year for auto detection of 20th and 21st centuries.
	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "centuryThreshold"): number;

	/**
	 * /Sets year for auto detection of 20th and 21st centuries.
	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "centuryThreshold", optionValue: number): void;

	/**
	 * Gets/Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "yearShift"): number;

	/**
	 * /Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "yearShift", optionValue: number): void;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */

	igDatePicker(optionLiteral: 'option', optionName: "nullValue"): string|number|Date;

	/**
	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDatePicker(optionLiteral: 'option', optionName: "nullValue", optionValue: string|number|Date): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDatePicker(optionLiteral: 'option', optionName: "inputMask"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "inputMask", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDatePicker(optionLiteral: 'option', optionName: "unfilledCharsPrompt"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "unfilledCharsPrompt", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDatePicker(optionLiteral: 'option', optionName: "padChar"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "padChar", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDatePicker(optionLiteral: 'option', optionName: "emptyChar"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "emptyChar", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDatePicker(optionLiteral: 'option', optionName: "toUpper"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igDatePicker(optionLiteral: 'option', optionName: "toLower"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;

	/**
	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "includeKeys"): string;

	/**
	 * Ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "includeKeys", optionValue: string): void;

	/**
	 * Gets ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "excludeKeys"): string;

	/**
	 * Ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "excludeKeys", optionValue: string): void;

	/**
	 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;

	/**
	 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownOrientation"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: string): void;

	igDatePicker(optionLiteral: 'option', optionName: "textMode"): any;

	igDatePicker(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;

	/**
	 * Gets/Sets how many items should be shown at once.
	 * Notes:
	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
	 * Note! This option can not be set runtime.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "visibleItemsCount"): number;

	/**
	 * /Sets how many items should be shown at once.
	 * Notes:
	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
	 * Note! This option can not be set runtime.
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igDatePicker(optionLiteral: 'option', optionName: "maxLength"): any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 */

	igDatePicker(optionLiteral: 'option', optionName: "textAlign"): string;

	/**
	 * /Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDatePicker(optionLiteral: 'option', optionName: "textAlign", optionValue: string): void;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "placeHolder"): string;

	/**
	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 */

	igDatePicker(optionLiteral: 'option', optionName: "selectionOnFocus"): string;

	/**
	 * /Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDatePicker(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;

	/**
	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;

	/**
	 * /Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igDatePicker(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDatePicker(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igDatePicker(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDatePicker(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "allowNullValue"): boolean;

	/**
	 * /Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igDatePicker(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igDatePicker(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igDatePicker(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired when the drop down is opening.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownListOpening"): DropDownListOpeningEvent;

	/**
	 * Fired when the drop down is opening.
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownListOpening", optionValue: DropDownListOpeningEvent): void;

	/**
	 * Fired after the drop down is opened.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownListOpened"): DropDownListOpenedEvent;

	/**
	 * Fired after the drop down is opened.
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownListOpened", optionValue: DropDownListOpenedEvent): void;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownListClosing"): DropDownListClosingEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownListClosing", optionValue: DropDownListClosingEvent): void;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownItemSelecting"): DropDownItemSelectingEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownItemSelecting", optionValue: DropDownItemSelectingEvent): void;

	/**
	 * Fired after the drop down (calendar) is closed.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownListClosed"): DropDownListClosedEvent;

	/**
	 * Fired after the drop down (calendar) is closed.
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownListClosed", optionValue: DropDownListClosedEvent): void;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownItemSelected"): DropDownItemSelectedEvent;

	/**
	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "dropDownItemSelected", optionValue: DropDownItemSelectedEvent): void;

	/**
	 * Fired after a date selection in the calendar.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "itemSelected"): ItemSelectedEvent;

	/**
	 * Fired after a date selection in the calendar.
	 *
	 * @optionValue New value to be set.
	 */
	igDatePicker(optionLiteral: 'option', optionName: "itemSelected", optionValue: ItemSelectedEvent): void;
	igDatePicker(options: IgDatePicker): JQuery;
	igDatePicker(optionLiteral: 'option', optionName: string): any;
	igDatePicker(optionLiteral: 'option', options: IgDatePicker): JQuery;
	igDatePicker(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igDatePicker(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igCheckboxEditor(methodName: "isValid"): boolean;
	igCheckboxEditor(methodName: "value", newValue: Object): string;
	igCheckboxEditor(methodName: "toggle"): void;
	igCheckboxEditor(methodName: "inputName", newValue?: string): string;
	igCheckboxEditor(methodName: "field"): string;
	igCheckboxEditor(methodName: "editorContainer"): string;
	igCheckboxEditor(methodName: "hasFocus"): boolean;
	igCheckboxEditor(methodName: "setFocus", delay?: number): void;
	igCheckboxEditor(methodName: "hide"): void;
	igCheckboxEditor(methodName: "show"): void;
	igCheckboxEditor(methodName: "validator"): Object;
	igCheckboxEditor(methodName: "validate"): boolean;
	igCheckboxEditor(methodName: "destroy"): void;

	/**
	 * Gets/Sets whether the checkbox is checked.
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "checked"): boolean;

	/**
	 * /Sets whether the checkbox is checked.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "checked", optionValue: boolean): void;

	/**
	 * Gets/Sets size of the checkbox based on preset styles.For different sizes, define 'width' and 'height' options instead.
	 *
	 */

	igCheckboxEditor(optionLiteral: 'option', optionName: "size"): string;

	/**
	 * /Sets size of the checkbox based on preset styles.For different sizes, define 'width' and 'height' options instead.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCheckboxEditor(optionLiteral: 'option', optionName: "size", optionValue: string): void;

	/**
	 * Gets/Sets a custom class on the checkbox. Custom image can be used this way.
	 * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "iconClass"): string;

	/**
	 * /Sets a custom class on the checkbox. Custom image can be used this way.
	 * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "iconClass", optionValue: string): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets the readonly attribute. Does not allow editing. Disables changing the checkbox state as an interaction, but it still can be changed programmatically. On submit the current value is sent into the request.
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute. Does not allow editing. Disables changing the checkbox state as an interaction, but it still can be changed programmatically. On submit the current value is sent into the request.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
	igCheckboxEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
	igCheckboxEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
	igCheckboxEditor(optionLiteral: 'option', optionName: "nullValue"): any;
	igCheckboxEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igCheckboxEditor(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCheckboxEditor(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igCheckboxEditor(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCheckboxEditor(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "value"): any;

	/**
	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igCheckboxEditor(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igCheckboxEditor(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired before changing the editor's value.
	 * Return false in order to cancel change.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "valueChanging"): ValueChangingEvent;

	/**
	 * Fired before changing the editor's value.
	 * Return false in order to cancel change.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "valueChanging", optionValue: ValueChangingEvent): void;

	/**
	 * Fired after the editor's value has been changed.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "valueChanged"): ValueChangedEvent;

	/**
	 * Fired after the editor's value has been changed.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "valueChanged", optionValue: ValueChangedEvent): void;

	/**
	 * Fired before rendering of the editor has finished.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Fired before rendering of the editor has finished.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Fired after rendering of the editor has finished.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Fired after rendering of the editor has finished.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Fired on mousedown event.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mousedown"): MousedownEvent;

	/**
	 * Fired on mousedown event.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mousedown", optionValue: MousedownEvent): void;

	/**
	 * Fired on mouseup event.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mouseup"): MouseupEvent;

	/**
	 * Fired on mouseup event.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mouseup", optionValue: MouseupEvent): void;

	/**
	 * Fired on mousemove at any part of editor including the drop-down list.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mousemove"): MousemoveEvent;

	/**
	 * Fired on mousemove at any part of editor including the drop-down list.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mousemove", optionValue: MousemoveEvent): void;

	/**
	 * Fired on mouseover at any part of editor including the drop-down list.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mouseover"): MouseoverEvent;

	/**
	 * Fired on mouseover at any part of editor including the drop-down list.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mouseover", optionValue: MouseoverEvent): void;

	/**
	 * Fired on mouseleave at any part of editor including the drop-down list.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mouseout"): MouseoutEvent;

	/**
	 * Fired on mouseleave at any part of editor including the drop-down list.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "mouseout", optionValue: MouseoutEvent): void;

	/**
	 * Fired when the input field of the editor loses focus.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "blur"): BlurEvent;

	/**
	 * Fired when the input field of the editor loses focus.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "blur", optionValue: BlurEvent): void;

	/**
	 * Fired when the input field of the editor gets focus.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "focus"): IgFocusEvent;

	/**
	 * Fired when the input field of the editor gets focus.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "focus", optionValue: IgFocusEvent): void;

	/**
	 * Fired on keydown event.
	 * Return false in order to cancel key action.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "keydown"): KeydownEvent;

	/**
	 * Fired on keydown event.
	 * Return false in order to cancel key action.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "keydown", optionValue: KeydownEvent): void;

	/**
	 * Fired on keypress event.
	 * Return false in order to cancel key action.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "keypress"): KeypressEvent;

	/**
	 * Fired on keypress event.
	 * Return false in order to cancel key action.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "keypress", optionValue: KeypressEvent): void;

	/**
	 * Fired on keyup event.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "keyup"): KeyupEvent;

	/**
	 * Fired on keyup event.
	 *
	 * @optionValue New value to be set.
	 */
	igCheckboxEditor(optionLiteral: 'option', optionName: "keyup", optionValue: KeyupEvent): void;
	igCheckboxEditor(options: IgCheckboxEditor): JQuery;
	igCheckboxEditor(optionLiteral: 'option', optionName: string): any;
	igCheckboxEditor(optionLiteral: 'option', options: IgCheckboxEditor): JQuery;
	igCheckboxEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igCheckboxEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igTimePicker(methodName: "getSelectedListItem"): string;
	igTimePicker(methodName: "dropDownVisible"): boolean;
	igTimePicker(methodName: "dropDownButton"): string;
	igTimePicker(methodName: "dropDownContainer"): string;
	igTimePicker(methodName: "findListItemIndex", text: string, matchType?: Object): number;
	igTimePicker(methodName: "selectedListIndex", index?: number): number;
	igTimePicker(methodName: "value", newValue: Object): void;
	igTimePicker(methodName: "selectDate"): void;
	igTimePicker(methodName: "changeRegional"): void;
	igTimePicker(methodName: "getSelectedDate"): Date;
	igTimePicker(methodName: "spinUp", delta?: number): void;
	igTimePicker(methodName: "spinDown", delta?: number): void;
	igTimePicker(methodName: "spinUpButton"): string;
	igTimePicker(methodName: "spinDownButton"): string;
	igTimePicker(methodName: "isValid"): boolean;

	/**
	 * Gets delta-value which is used to generate the drop-down items for the time picker.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 *
	 * object  A configuration object, which defines specific values for each time period. The option can accept the following format:
	 * itemsDelta: {
	 * hours: 0,
	 * minutes: 30,
	 * }
	 * Time periods that don't have values use 0 as default for hours and 30 for minutes.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "itemsDelta"): IgTimePickerItemsDelta;

	/**
	 * Delta-value which is used to generate the drop-down items for the time picker.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 *
	 * object  A configuration object, which defines specific values for each time period. The option can accept the following format:
	 * itemsDelta: {
	 * hours: 0,
	 * minutes: 30,
	 * }
	 * Time periods that don't have values use 0 as default for hours and 30 for minutes.
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "itemsDelta", optionValue: IgTimePickerItemsDelta): void;

	/**
	 * Gets/Sets delta-value which is used to increment or decrement the editor time on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 * spinDelta: {
	 * hours: 12,
	 * minutes: 15
	 * }
	 * Default value is {hours: 1, minutes: 30}.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "spinDelta"): any;

	/**
	 * /Sets delta-value which is used to increment or decrement the editor time on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
	 * spinDelta: {
	 * hours: 12,
	 * minutes: 15
	 * }
	 * Default value is {hours: 1, minutes: 30}.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "spinDelta", optionValue: any): void;

	/**
	 * Gets format of time while timepicker has focus.
	 * Value of that option can be set to explicit time pattern or to a flag defined by regional settings.
	 * If value is set to explicit time pattern and pattern besides date-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
	 * If option is not set, then the "time" is used automatically.
	 * List of predefined regional flags:
	 * "time": the timePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of time-flags when explicit time pattern is used:
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "hh": hours field in 12-hours format with leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "mm": minutes field with leading zero
	 * Note! This option can not be set runtime.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "timeInputFormat"): string;

	/**
	 * Format of time while timepicker has focus.
	 * Value of that option can be set to explicit time pattern or to a flag defined by regional settings.
	 * If value is set to explicit time pattern and pattern besides date-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
	 * If option is not set, then the "time" is used automatically.
	 * List of predefined regional flags:
	 * "time": the timePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of time-flags when explicit time pattern is used:
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "hh": hours field in 12-hours format with leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "mm": minutes field with leading zero
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "timeInputFormat", optionValue: string): void;

	/**
	 * Gets/Sets format of time while timepicker has no focus.
	 * Value of that option can be set to a specific time pattern or to a flag defined by regional settings.
	 * If value is not set, then the timeInputFormat is used automatically.
	 * If value is set to explicit time pattern and pattern besides time-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
	 * List of predefined regional flags:
	 * "time": the timePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them:
	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of time-flags when explicit time pattern is used:
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "h": hours field in 12-hours format without leading zero
	 * "hh": hours field in 12-hours format with leading zero
	 * "H": hours field in 24-hours format without leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "m": minutes field without leading zero
	 * "mm": minutes field with leading zero
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "timeDisplayFormat"): string;

	/**
	 * /Sets format of time while timepicker has no focus.
	 * Value of that option can be set to a specific time pattern or to a flag defined by regional settings.
	 * If value is not set, then the timeInputFormat is used automatically.
	 * If value is set to explicit time pattern and pattern besides time-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
	 * List of predefined regional flags:
	 * "time": the timePattern member of regional option is used
	 * List of explicit characters, which should have escape \\ character in front of them:
	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
	 * List of time-flags when explicit time pattern is used:
	 * "t": first character of string which represents AM/PM field
	 * "tt": 2 characters of string which represents AM/PM field
	 * "h": hours field in 12-hours format without leading zero
	 * "hh": hours field in 12-hours format with leading zero
	 * "H": hours field in 24-hours format without leading zero
	 * "HH": hours field in 24-hours format with leading zero
	 * "m": minutes field without leading zero
	 * "mm": minutes field with leading zero
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "timeDisplayFormat", optionValue: string): void;

	/**
	 * Gets/Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;

	/**
	 * /Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "suppressKeyboard"): boolean;

	/**
	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
	 * Note: The option does not perform device detection so its behavior is always active if enabled.
	 * Note: When drop down is opened the only way to close it will be using the drop down button.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "suppressKeyboard", optionValue: boolean): void;

	/**
	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the timepicker has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 */

	igTimePicker(optionLiteral: 'option', optionName: "dropDownOrientation"): string;

	/**
	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the timepicker has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTimePicker(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: string): void;

	/**
	 * Gets the number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "visibleItemsCount"): number;

	/**
	 * The number of the items to be shown at once when the drop-down list get opened.
	 * Notes:
	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
	 * This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;

	/**
	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of timepicker is set as a drop-down width.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "listWidth"): number;

	/**
	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of timepicker is set as a drop-down width.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;

	/**
	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;

	/**
	 * /Sets the hover/unhover animation duration of a drop-down list item.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;

	/**
	 * Gets wheather the drop-down list element is attached to the body of the document, or to the timepicker container element.
	 * If the option is set to false the timepicker will attach the drop-down list element to the timepicker container
	 * If the option is set to true the timepicker will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;

	/**
	 * Wheather the drop-down list element is attached to the body of the document, or to the timepicker container element.
	 * If the option is set to false the timepicker will attach the drop-down list element to the timepicker container
	 * If the option is set to true the timepicker will attach its drop-down list to as a child of the body.
	 * Note! This option can not be set runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;

	/**
	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * /Sets show/hide drop-down list animation duration in milliseconds.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown, clear' or 'spin, clear' are supported too.Note! This option can not be set runtime.
	 * Note! A combination like 'dropdown, spin' is not allowed.
	 *
	 */

	igTimePicker(optionLiteral: 'option', optionName: "buttonType"): string;

	/**
	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown, clear' or 'spin, clear' are supported too.Note! This option can not be set runtime.
	 * Note! A combination like 'dropdown, spin' is not allowed.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTimePicker(optionLiteral: 'option', optionName: "buttonType", optionValue: string): void;

	/**
	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;

	/**
	 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;

	/**
	 * Removed from timepicker options
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dateDisplayFormat"): any;

	/**
	 * Removed from timepicker options
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dateDisplayFormat", optionValue: any): void;

	/**
	 * Removed from timepicker options
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dateInputFormat"): any;

	/**
	 * Removed from timepicker options
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dateInputFormat", optionValue: any): void;

	/**
	 * Removed from timepicker options
	 */
	igTimePicker(optionLiteral: 'option', optionName: "yearShift"): any;

	/**
	 * Removed from timepicker options
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "yearShift", optionValue: any): void;

	/**
	 * Removed from timepicker options
	 */
	igTimePicker(optionLiteral: 'option', optionName: "displayTimeOffset"): any;

	/**
	 * Removed from timepicker options
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "displayTimeOffset", optionValue: any): void;

	/**
	 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "value"): Date;

	/**
	 * /Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "value", optionValue: Date): void;

	/**
	 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "minValue"): Date;

	/**
	 * The minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "minValue", optionValue: Date): void;

	/**
	 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "maxValue"): Date;

	/**
	 * The maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
	 * Note! This option doesn't use the dateInputFormat to extract the date.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "maxValue", optionValue: Date): void;

	/**
	 * Gets the value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
	 * "2016-11-11T10:00:00+05:00"
	 *
	 */

	igTimePicker(optionLiteral: 'option', optionName: "dataMode"): string;

	/**
	 * The value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
	 * "2016-11-11T10:00:00+05:00"
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTimePicker(optionLiteral: 'option', optionName: "dataMode", optionValue: string): void;

	/**
	 * Gets/Sets ability to modify only 1 date field on spin events.
	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
	 * Value true modifies only value of one field.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "limitSpinToCurrentField"): boolean;

	/**
	 * /Sets ability to modify only 1 date field on spin events.
	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
	 * Value true modifies only value of one field.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "limitSpinToCurrentField", optionValue: boolean): void;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "enableUTCDates"): boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "enableUTCDates", optionValue: boolean): void;

	/**
	 * Gets/Sets year for auto detection of 20th and 21st centuries.
	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "centuryThreshold"): number;

	/**
	 * /Sets year for auto detection of 20th and 21st centuries.
	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "centuryThreshold", optionValue: number): void;

	/**
	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 */

	igTimePicker(optionLiteral: 'option', optionName: "nullValue"): string|number|Date;

	/**
	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTimePicker(optionLiteral: 'option', optionName: "nullValue", optionValue: string|number|Date): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igTimePicker(optionLiteral: 'option', optionName: "listItems"): any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "listItems", optionValue: any): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igTimePicker(optionLiteral: 'option', optionName: "inputMask"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "inputMask", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igTimePicker(optionLiteral: 'option', optionName: "unfilledCharsPrompt"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "unfilledCharsPrompt", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igTimePicker(optionLiteral: 'option', optionName: "padChar"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "padChar", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igTimePicker(optionLiteral: 'option', optionName: "emptyChar"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "emptyChar", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igTimePicker(optionLiteral: 'option', optionName: "toUpper"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 */
	igTimePicker(optionLiteral: 'option', optionName: "toLower"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;

	/**
	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "includeKeys"): string;

	/**
	 * Ability to enter only specific characters in input-field from keyboard and on paste.
	 * Notes:
	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "includeKeys", optionValue: string): void;

	/**
	 * Gets ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "excludeKeys"): string;

	/**
	 * Ability to prevent entering specific characters from keyboard or on paste.
	 * Notes:
	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
	 * Note! This option can not be se runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "excludeKeys", optionValue: string): void;

	igTimePicker(optionLiteral: 'option', optionName: "textMode"): any;

	igTimePicker(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 */
	igTimePicker(optionLiteral: 'option', optionName: "maxLength"): any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;

	/**
	 * Gets/Sets the horizontal alignment of the text in the editor.
	 *
	 */

	igTimePicker(optionLiteral: 'option', optionName: "textAlign"): string;

	/**
	 * /Sets the horizontal alignment of the text in the editor.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTimePicker(optionLiteral: 'option', optionName: "textAlign", optionValue: string): void;

	/**
	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "placeHolder"): string;

	/**
	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;

	/**
	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 */

	igTimePicker(optionLiteral: 'option', optionName: "selectionOnFocus"): string;

	/**
	 * /Sets the action when the editor gets focused. The default value is selectAll.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTimePicker(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;

	/**
	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;

	/**
	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;

	/**
	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;

	/**
	 * /Sets if the editor should prevent form submition when enter key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;

	/**
	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igTimePicker(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTimePicker(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igTimePicker(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTimePicker(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets tabIndex attribute for the editor input.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * /Sets tabIndex attribute for the editor input.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Gets/Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "allowNullValue"): boolean;

	/**
	 * /Sets whether the editor value can become null.
	 * If that option is false, and editor has no value, then value is set to an empty string.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;

	/**
	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "readOnly"): boolean;

	/**
	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;

	/**
	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "disabled"): boolean;

	/**
	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;

	/**
	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igTimePicker(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igTimePicker(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTimePicker(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired when the drop down is opening.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownListOpening"): DropDownListOpeningEvent;

	/**
	 * Fired when the drop down is opening.
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownListOpening", optionValue: DropDownListOpeningEvent): void;

	/**
	 * Fired after the drop down is opened.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownListOpened"): DropDownListOpenedEvent;

	/**
	 * Fired after the drop down is opened.
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownListOpened", optionValue: DropDownListOpenedEvent): void;

	/**
	 * Fired when the drop down is closing.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownListClosing"): DropDownListClosingEvent;

	/**
	 * Fired when the drop down is closing.
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownListClosing", optionValue: DropDownListClosingEvent): void;

	/**
	 * Fired after the drop down is closed.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownListClosed"): DropDownListClosedEvent;

	/**
	 * Fired after the drop down is closed.
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownListClosed", optionValue: DropDownListClosedEvent): void;

	/**
	 * Fired when an item in the drop down list is being selected.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownItemSelecting"): DropDownItemSelectingEvent;

	/**
	 * Fired when an item in the drop down list is being selected.
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownItemSelecting", optionValue: DropDownItemSelectingEvent): void;

	/**
	 * Fired after an item in the drop down list is selected.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownItemSelected"): DropDownItemSelectedEvent;

	/**
	 * Fired after an item in the drop down list is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igTimePicker(optionLiteral: 'option', optionName: "dropDownItemSelected", optionValue: DropDownItemSelectedEvent): void;
	igTimePicker(options: IgTimePicker): JQuery;
	igTimePicker(optionLiteral: 'option', optionName: string): any;
	igTimePicker(optionLiteral: 'option', options: IgTimePicker): JQuery;
	igTimePicker(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTimePicker(methodName: string, ...methodParams: any[]): any;
}
interface ApplyCustomIndicatorsEvent {
	(event: Event, ui: ApplyCustomIndicatorsEventUIParam): void;
}

interface ApplyCustomIndicatorsEventUIParam {}

interface IgFinancialChart {
	/**
	 * Gets or sets the id of a template element to use for tooltips, or markup representing the tooltip template.
	 */
	tooltipTemplate?: any;

	/**
	 * Gets or sets the names of tooltip templates
	 */
	tooltipTemplates?: any;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Gets or sets the left margin of chart title
	 */
	titleLeftMargin?: number;

	/**
	 * Gets or sets the right margin of chart title
	 */
	titleRightMargin?: number;

	/**
	 * Gets or sets the top margin of chart title
	 */
	titleTopMargin?: number;

	/**
	 * Gets or sets the bottom margin of chart title
	 */
	titleBottomMargin?: number;

	/**
	 * Gets or sets the left margin of chart subtitle
	 */
	subtitleLeftMargin?: number;

	/**
	 * Gets or sets the top margin of chart subtitle
	 */
	subtitleTopMargin?: number;

	/**
	 * Gets or sets the right margin of chart subtitle
	 */
	subtitleRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of chart subtitle
	 */
	subtitleBottomMargin?: number;

	/**
	 * Gets or sets color of chart subtitle
	 */
	subtitleTextColor?: string;

	/**
	 * Gets or sets color of chart title
	 */
	titleTextColor?: string;

	/**
	 * Gets or sets the left margin of the chart content.
	 */
	leftMargin?: number;

	/**
	 * Gets or sets the top margin of the chart content.
	 */
	topMargin?: number;

	/**
	 * Gets or sets the right margin of the chart content.
	 */
	rightMargin?: number;

	/**
	 * Gets or sets the bottom margin around the chart content.
	 */
	bottomMargin?: number;

	/**
	 * Gets or sets the duration used for animating series plots when the data is changing
	 */
	transitionDuration?: number;

	/**
	 * Gets or sets the easing function used for animating series plots when the data is changing.
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 */
	transitionEasingFunction?: any;

	/**
	 * Gets or sets a function for creating wrapped tooltip
	 */
	createWrappedTooltip?: any;

	/**
	 * Gets or sets the widget of this control
	 */
	widget?: any;

	/**
	 * Gets or sets CSS font property for the chart subtitle
	 */
	subtitleTextStyle?: string;

	/**
	 * Gets or sets CSS font property for the chart title
	 */
	titleTextStyle?: string;

	/**
	 * Gets or sets a collection of data items used to generate the chart.
	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
	 * Additionally, if the objects in the list implement the IEnumerable interface,
	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
	 * Databinding can be further configured by attributing the data item classes
	 * with the DataSeriesMemberIntentAttribute.
	 */
	itemsSource?: any;

	/**
	 * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
	 */
	includedProperties?: any;

	/**
	 * Gets or sets a set of property paths that should be excluded from consideration by the category chart.
	 */
	excludedProperties?: any;

	/**
	 * Gets or sets the palette of brushes to use for coloring the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	brushes?: any;

	/**
	 * Gets or sets the palette of brushes to use for outlines on the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	outlines?: any;

	/**
	 * Gets or sets the legend to connect this chart to.
	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
	 */
	legend?: any;

	/**
	 * Gets or sets whether the chart can be horizontally zoomed through user interactions.
	 */
	isHorizontalZoomEnabled?: boolean;

	/**
	 * Gets or sets whether the chart can be vertically zoomed through user interactions.
	 */
	isVerticalZoomEnabled?: boolean;

	/**
	 * Gets or sets whether the chart can highlight series through user interactions.
	 * This property applies to Category Chart and Financial Chart controls.
	 */
	isSeriesHighlightingEnabled?: boolean;

	/**
	 * Gets or sets the rectangle representing the current scroll and zoom state of the chart.
	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	windowRect?: any;

	/**
	 * Gets or sets text to display above the plot area.
	 */
	title?: string;

	/**
	 * Gets or sets text to display below the Title, above the plot area.
	 */
	subtitle?: string;

	/**
	 * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	titleAlignment?: string;

	/**
	 * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	subtitleAlignment?: string;

	/**
	 * Gets or sets the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
	 *
	 *
	 * Valid values:
	 * "linearInterpolate" Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
	 * "dontPlot" Do not plot the unknown value on the chart.
	 */
	unknownValuePlotting?: string;

	/**
	 * Gets or sets the rendering resolution for all series in this chart.
	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
	 */
	resolution?: number;

	/**
	 * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
	 */
	thickness?: number;

	/**
	 * Gets or sets the marker shapes used for indicating location of data points in this chart.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 */
	markerTypes?: any;

	/**
	 * Gets or sets the palette of brushes used for rendering fill area of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	markerBrushes?: any;

	/**
	 * Gets or sets the palette of brushes used for rendering outlines of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	markerOutlines?: any;

	/**
	 * Gets or sets the maximum number of markers displyed in the plot area of the chart.
	 */
	markerMaxCount?: number;

	/**
	 * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
	 */
	animateSeriesWhenAxisRangeChanges?: boolean;

	/**
	 * Gets or sets the palette of brushes to used for coloring trend lines in this chart.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	trendLineBrushes?: any;

	/**
	 * Gets or sets the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
	 *
	 *
	 * Valid values:
	 * "none" No trend line will be displayed.
	 * "linearFit" Linear fit.
	 * "quadraticFit" Quadratic polynomial fit.
	 * "cubicFit" Cubic polynomial fit.
	 * "quarticFit" Quartic polynomial fit.
	 * "quinticFit" Quintic polynomial fit.
	 * "logarithmicFit" Logarithmic fit.
	 * "exponentialFit" Exponential fit.
	 * "powerLawFit" Powerlaw fit.
	 * "simpleAverage" Simple moving average.
	 * "exponentialAverage" Exponential moving average.
	 * "modifiedAverage" Modified moving average.
	 * "cumulativeAverage" Cumulative moving average.
	 * "weightedAverage" Weighted moving average.
	 */
	trendLineType?: string;

	/**
	 * Gets or sets the thickness of the trend lines in this chart.
	 * This property applies only to these chart types: point, line, spline, and bubble
	 */
	trendLineThickness?: number;

	/**
	 * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
	 */
	alignsGridLinesToPixels?: boolean;
	trendLinePeriod?: number;

	/**
	 * Gets or sets the style of tooltip to be displayed.
	 *
	 * Valid values:
	 * "default" Display default tooltip for each series in the chart.
	 * "item" Display individual tooltips for all series in the chart.
	 * "category" Display combined tooltip for all series in the chart.
	 * "none" Display no tooltips in the chart.
	 */
	toolTipType?: string;

	/**
	 * Gets or sets the crosshairs to be displayed.
	 *
	 * Valid values:
	 * "default" Display default number of crosshair lines in the chart.
	 * "none" Display no crosshair lines in the chart.
	 * "horizontal" Display horizontal line of crosshairs in the chart.
	 * "vertical" Display vertical line of crosshairs in the chart.
	 * "both" Display both horizontal and vertical lines of crosshairs in the chart.
	 */
	crosshairsDisplayMode?: string;

	/**
	 * Gets or sets whether crosshairs will snap to the nearest data point.
	 */
	crosshairsSnapToData?: boolean;

	/**
	 * Gets or sets whether annotations are shown along the axis for crosshair values
	 */
	crosshairsAnnotationEnabled?: boolean;

	/**
	 * Gets or sets whether annotations for the final value of each series is displayed on the axis.
	 */
	finalValueAnnotationsVisible?: boolean;

	/**
	 * Gets or sets if callouts should be displayed.
	 */
	calloutsVisible?: boolean;

	/**
	 * Gets or sets if event annotations should be displayed.
	 */
	calloutStyleUpdatingEventEnabled?: boolean;

	/**
	 * Gets or sets the collection of callout data to be annotated.
	 */
	calloutsItemsSource?: any;

	/**
	 * Gets or sets the member path of the X data for the callouts.
	 */
	calloutsXMemberPath?: string;

	/**
	 * Gets or sets the member path of the Y data for the callouts.
	 */
	calloutsYMemberPath?: string;

	/**
	 * Gets or sets the member path of the label data for the callouts.
	 */
	calloutsLabelMemberPath?: string;

	/**
	 * Gets or sets the member path of the content data for the callouts.
	 */
	calloutsContentMemberPath?: string;

	/**
	 * Gets or sets function which takes an context object and returns a formatted label for the X-axis.
	 */
	xAxisFormatLabel?: any;

	/**
	 * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.
	 */
	yAxisFormatLabel?: any;

	/**
	 * Gets or sets the left margin of labels on the X-axis
	 */
	xAxisLabelLeftMargin?: number;

	/**
	 * Gets or sets the top margin of labels on the X-axis
	 */
	xAxisLabelTopMargin?: number;

	/**
	 * Gets or sets the right margin of labels on the X-axis
	 */
	xAxisLabelRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of labels on the X-axis
	 */
	xAxisLabelBottomMargin?: number;

	/**
	 * Gets or sets the left margin of labels on the Y-axis
	 */
	yAxisLabelLeftMargin?: number;

	/**
	 * Gets or sets the top margin of labels on the Y-axis
	 */
	yAxisLabelTopMargin?: number;

	/**
	 * Gets or sets the right margin of labels on the Y-axis
	 */
	yAxisLabelRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of labels on the Y-axis
	 */
	yAxisLabelBottomMargin?: number;

	/**
	 * Gets or sets color of labels on the X-axis
	 */
	xAxisLabelTextColor?: string;

	/**
	 * Gets or sets color of labels on the Y-axis
	 */
	yAxisLabelTextColor?: string;

	/**
	 * Gets or sets the margin around a title on the X-axis
	 */
	xAxisTitleMargin?: number;

	/**
	 * Gets or sets the margin around a title on the Y-axis
	 */
	yAxisTitleMargin?: number;

	/**
	 * Gets or sets the left margin of a title on the X-axis
	 */
	xAxisTitleLeftMargin?: number;

	/**
	 * Gets or sets the left margin of a title on the Y-axis
	 */
	yAxisTitleLeftMargin?: number;

	/**
	 * Gets or sets the top margin of a title on the X-axis
	 */
	xAxisTitleTopMargin?: number;

	/**
	 * Gets or sets the top margin of a title on the Y-axis
	 */
	yAxisTitleTopMargin?: number;

	/**
	 * Gets or sets the right margin of a title on the X-axis
	 */
	xAxisTitleRightMargin?: number;

	/**
	 * Gets or sets the right margin of a title on the Y-axis
	 */
	yAxisTitleRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of a title on the X-axis
	 */
	xAxisTitleBottomMargin?: number;

	/**
	 * Gets or sets the bottom margin of a title on the Y-axis
	 */
	yAxisTitleBottomMargin?: number;

	/**
	 * Gets or sets color of title on the X-axis
	 */
	xAxisTitleTextColor?: string;

	/**
	 * Gets or sets color of title on the Y-axis
	 */
	yAxisTitleTextColor?: string;

	/**
	 * Gets or sets CSS font property for labels on X-axis
	 */
	xAxisLabelTextStyle?: string;

	/**
	 * Gets or sets CSS font property for labels on Y-axis
	 */
	yAxisLabelTextStyle?: string;

	/**
	 * Gets or sets CSS font property for title on X-axis
	 */
	xAxisTitleTextStyle?: string;

	/**
	 * Gets or sets CSS font property for title on Y-axis
	 */
	yAxisTitleTextStyle?: string;

	/**
	 * Gets or sets the format for labels along the X-axis.
	 */
	xAxisLabel?: any;

	/**
	 * Gets or sets the property or string from which the labels are derived.
	 */
	yAxisLabel?: any;

	/**
	 * Gets or sets the color to apply to major gridlines along the X-axis.
	 */
	xAxisMajorStroke?: string;

	/**
	 * Gets or sets the color to apply to major gridlines along the Y-axis.
	 */
	yAxisMajorStroke?: string;

	/**
	 * Gets or sets the thickness to apply to major gridlines along the X-axis.
	 */
	xAxisMajorStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to major gridlines along the Y-axis.
	 */
	yAxisMajorStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to minor gridlines along the X-axis.
	 */
	xAxisMinorStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to minor gridlines along the Y-axis.
	 */
	yAxisMinorStrokeThickness?: number;

	/**
	 * Gets or sets the color to apply to stripes along the X-axis.
	 */
	xAxisStrip?: string;

	/**
	 * Gets or sets the color to apply to stripes along the Y-axis.
	 */
	yAxisStrip?: string;

	/**
	 * Gets or sets the color to apply to the X-axis line.
	 */
	xAxisStroke?: string;

	/**
	 * Gets or sets the color to apply to the Y-axis line.
	 */
	yAxisStroke?: string;

	/**
	 * Gets or sets the thickness to apply to the X-axis line.
	 */
	xAxisStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to the Y-axis line.
	 */
	yAxisStrokeThickness?: number;

	/**
	 * Gets or sets the length of tickmarks along the X-axis.
	 */
	xAxisTickLength?: number;

	/**
	 * Gets or sets the length of tickmarks along the Y-axis.
	 */
	yAxisTickLength?: number;

	/**
	 * Gets or sets the color to apply to tickmarks along the X-axis.
	 */
	xAxisTickStroke?: string;

	/**
	 * Gets or sets the color to apply to tickmarks along the Y-axis.
	 */
	yAxisTickStroke?: string;

	/**
	 * Gets or sets the thickness to apply to tickmarks along the X-axis.
	 */
	xAxisTickStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to tickmarks along the Y-axis.
	 */
	yAxisTickStrokeThickness?: number;

	/**
	 * Gets or sets the Text to display below the X-axis.
	 */
	xAxisTitle?: string;

	/**
	 * Gets or sets the Text to display to the left of the Y-axis.
	 */
	yAxisTitle?: string;

	/**
	 * Gets or sets the color to apply to minor gridlines along the X-axis.
	 */
	xAxisMinorStroke?: string;

	/**
	 * Gets or sets the color to apply to minor gridlines along the Y-axis.
	 */
	yAxisMinorStroke?: string;

	/**
	 * Gets or sets the angle of rotation for labels along the X-axis.
	 */
	xAxisLabelAngle?: number;

	/**
	 * Gets or sets the angle of rotation for labels along the Y-axis.
	 */
	yAxisLabelAngle?: number;

	/**
	 * Gets or sets the distance between the X-axis and the bottom of the chart.
	 */
	xAxisExtent?: number;

	/**
	 * Gets or sets the distance between the Y-axis and the left edge of the chart.
	 */
	yAxisExtent?: number;

	/**
	 * Gets or sets the angle of rotation for the X-axis title.
	 */
	xAxisTitleAngle?: number;

	/**
	 * Gets or sets the angle of rotation for the Y-axis title.
	 */
	yAxisTitleAngle?: number;

	/**
	 * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
	 */
	xAxisInverted?: boolean;

	/**
	 * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
	 */
	yAxisInverted?: boolean;

	/**
	 * Gets or sets Horizontal alignment of the X-axis title.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	xAxisTitleAlignment?: string;

	/**
	 * Gets or sets Vertical alignment of the Y-axis title.
	 *
	 * Valid values:
	 * "top" Align the item to the top
	 * "center" Center the item
	 * "bottom" Align the item to the bottom
	 * "stretch" Stretch the item to the full height
	 */
	yAxisTitleAlignment?: string;

	/**
	 * Gets or sets Horizontal alignment of X-axis labels.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	xAxisLabelHorizontalAlignment?: string;

	/**
	 * Gets or sets Horizontal alignment of Y-axis labels.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	yAxisLabelHorizontalAlignment?: string;

	/**
	 * Gets or sets Vertical alignment of X-axis labels.
	 *
	 * Valid values:
	 * "top" Align the item to the top
	 * "center" Center the item
	 * "bottom" Align the item to the bottom
	 * "stretch" Stretch the item to the full height
	 */
	xAxisLabelVerticalAlignment?: string;

	/**
	 * Gets or sets Vertical alignment of Y-axis labels.
	 *
	 * Valid values:
	 * "top" Align the item to the top
	 * "center" Center the item
	 * "bottom" Align the item to the bottom
	 * "stretch" Stretch the item to the full height
	 */
	yAxisLabelVerticalAlignment?: string;

	/**
	 * Gets or sets Visibility of X-axis labels.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	xAxisLabelVisibility?: string;

	/**
	 * Gets or sets Visibility of Y-axis labels.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	yAxisLabelVisibility?: string;

	/**
	 * The location of Y-axis labels, relative to the plot area.
	 *
	 * Valid values:
	 * "outsideTop" Places the axis labels at the top, outside of the plotting area.
	 * "outsideBottom" Places the axis labels at the bottom, outside of the plotting area
	 * "outsideLeft" Places the axis labels to the left, outside of the plotting area.
	 * "outsideRight" Places the axis labels to the right, outside of the plotting area.
	 * "insideTop" Places the axis labels inside the plotting area above the axis line.
	 * "insideBottom" Places the axis labels inside the plotting area below the axis line.
	 * "insideLeft" Places the axis labels inside the plotting area and to the left of the axis line.
	 * "insideRight" Places the axis labels inside the plotting area and to the right of the axis line.
	 */
	yAxisLabelLocation?: string;
	rangeSelectorTemplate?: any;
	toolbarTemplate?: any;
	chartTypePickerTemplate?: any;
	trendLineTypePickerTemplate?: any;
	volumeTypePickerTemplate?: any;
	indicatorMenuTemplate?: any;
	overlayPickerTemplate?: any;
	toolbarHeight?: number;

	/**
	 * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
	 */
	yAxisIsLogarithmic?: boolean;

	/**
	 * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.
	 * This property is effective only when YAxisIsLogarithmic is true.
	 */
	yAxisLogarithmBase?: number;

	/**
	 * Gets or sets the distance between each label and grid line along the Y-axis.
	 */
	yAxisInterval?: number;

	/**
	 * Gets or sets the data value corresponding to the minimum value of the Y-axis.
	 */
	yAxisMinimumValue?: number;

	/**
	 * Gets or sets the data value corresponding to the maximum value of the Y-axis.
	 */
	yAxisMaximumValue?: number;

	/**
	 * Gets or sets the frequency of displayed minor lines along the Y-axis.
	 */
	yAxisMinorInterval?: number;

	/**
	 * The type of series to display in the volume pane.
	 *
	 * Valid values:
	 * "none" Do not display the volume pane.
	 * "column" Display column series in the volume pane.
	 * "line" Display line series in the volume pane.
	 * "area" Display area series in the volume pane.
	 */
	volumeType?: string;

	/**
	 * The scaling mode of the X-axis.
	 *
	 * Valid values:
	 * "ordinal" An ordinal scale with time labels.
	 * "time" A time scale.
	 */
	xAxisMode?: string;

	/**
	 * The scaling mode of the Y-axis.
	 *
	 * Valid values:
	 * "numeric" A linear or logarithmic numeric scale.
	 * "percentChange" A numeric scale where all values are scaled proportionally to a reference value.
	 */
	yAxisMode?: string;

	/**
	 * A boolean property controlling the visibility of the toolbar.
	 */
	isToolbarVisible?: boolean;

	/**
	 * The type of price series to display in the main chart.
	 *
	 * Valid values:
	 * "auto" Automatically determine the price series type to display in the main chart.
	 * "bar" Display financial bar series in the main chart.
	 * "candle" Display candlestick series in the main chart.
	 * "column" Display column series in the main chart.
	 * "line" Display line series in the main chart.
	 */
	chartType?: string;

	/**
	 * A boolean indicating whether the chart should automatically zoom in vertically on the currently visible range of data.
	 * When this property is set to true, panning and zooming along the X-axis will result in a corresponding zoom on the Y-axis, so that the visible range of data fills the zoom window as fully as possible.
	 */
	isWindowSyncedToVisibleRange?: boolean;

	/**
	 * A collection indicating what financial indicator types to display on the Financial Chart.
	 */
	indicatorTypes?: any;

	/**
	 * A collection indicating what financial overlay types to display on the Financial Chart.
	 */
	overlayTypes?: any;

	/**
	 * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.
	 */
	yAxisAbbreviateLargeNumbers?: boolean;

	/**
	 * Gets or sets type of series to display in the zoom slider pane.
	 *
	 * Valid values:
	 * "none" Do not display the zoom slider pane.
	 * "auto" In the zoom slider pane, match the series type in the price pane.
	 * "bar" Display financial bar series in the zoom slider pane.
	 * "candle" Display candle series in the zoom slider pane.
	 * "column" Display column series in the zoom slider pane.
	 * "line" Display line series in the zoom slider pane.
	 * "area" Display an area series in the zoom slider pane.
	 */
	zoomSliderType?: string;

	/**
	 * Gets or sets the palette used for coloring negative items of Waterfall chart type.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	negativeBrushes?: any;

	/**
	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	negativeOutlines?: any;

	/**
	 * Brushes to use for filling financial overlays.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	overlayBrushes?: any;

	/**
	 * Brushes to use for outlining financial overlays.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	overlayOutlines?: any;

	/**
	 * Brushes to use for outlining volume series in the volume pane.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	volumeOutlines?: any;

	/**
	 * Brushes to use for filling volume series in the volume pane.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	volumeBrushes?: any;

	/**
	 * Brushes to use for negative elements in financial indicators.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	indicatorNegativeBrushes?: any;

	/**
	 * Brushes to use for financial indicators.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	indicatorBrushes?: any;

	/**
	 * The outline thickness of volume series in the volume pane.
	 */
	volumeThickness?: number;

	/**
	 * The outline thickness of financial overlays.
	 */
	overlayThickness?: number;

	/**
	 * The outline or stroke thickness of financial indicators.
	 */
	indicatorThickness?: number;

	/**
	 * The display types of financial indicators.
	 */
	indicatorDisplayTypes?: any;

	/**
	 * The period of financial indicators, where applicable.
	 */
	indicatorPeriod?: number;

	/**
	 * The multiplier of financial indicators, where applicable.
	 */
	indicatorMultiplier?: number;

	/**
	 * The smoothing period of financial indicators, where applicable.
	 */
	indicatorSmoothingPeriod?: number;

	/**
	 * The short period of financial indicators, where applicable.
	 */
	indicatorShortPeriod?: number;

	/**
	 * The long period of financial indicators, where applicable.
	 */
	indicatorLongPeriod?: number;

	/**
	 * The signal period of financial indicators, where applicable.
	 */
	indicatorSignalPeriod?: number;

	/**
	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
	 */
	rangeSelectorOptions?: any;

	/**
	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
	 * This will be the intersection of the user-defined range selector options, if any, and the range selector options which are automatically determined based on the range of data.
	 */
	actualRangeSelectorOptions?: any;

	/**
	 * The names of custom indicators to add to the chart.
	 * When CustomIndicatorNames is set, the ApplyCustomIndicators event will be raised for each custom indicator name.
	 */
	customIndicatorNames?: any;

	/**
	 * Gets or sets stroke brush of major gridlines on x-axis of the zoom slider pane
	 */
	zoomSliderXAxisMajorStroke?: string;

	/**
	 * Gets or sets thickness of major gridlines on x-axis of the zoom slider pane
	 */
	zoomSliderXAxisMajorStrokeThickness?: number;

	/**
	 * Gets or sets weather or not a legend is visible between toolbar and chart's plot area
	 */
	isLegendVisible?: boolean;

	/**
	 * Gets or sets a legend displayed between toolbar and chart's plot area
	 */
	financialChartLegend?: any;

	/**
	 * Gets or sets minimum value on x-axis
	 */
	xAxisMinimumValue?: any;

	/**
	 * Gets or sets maximum value on x-axis
	 */
	xAxisMaximumValue?: any;

	/**
	 * The width of the chart.
	 */
	width?: number;

	/**
	 * The height of the chart.
	 */
	height?: number;

	/**
	 * Gets sets maximum number of displayed records in chart.
	 */
	maxRecCount?: number;

	/**
	 * Gets sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	dataSource?: any;

	/**
	 * Gets sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	dataSourceType?: string;

	/**
	 * Gets sets url which is used for sending JSON on request for remote data.
	 */
	dataSourceUrl?: string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	responseTotalRecCountKey?: string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Event raised when a property value is changed on this chart
	 */
	propertyChanged?: PropertyChangedEvent;

	/**
	 * Event raised when a series is initialized and added to this chart.
	 */
	seriesAdded?: SeriesAddedEvent;

	/**
	 * Event raised when a series is removed from this chart.
	 */
	seriesRemoved?: SeriesRemovedEvent;

	/**
	 * Occurs when the pointer enters a Series.
	 */
	seriesPointerEnter?: SeriesPointerEnterEvent;

	/**
	 * Occurs when the pointer leaves a Series.
	 */
	seriesPointerLeave?: SeriesPointerLeaveEvent;

	/**
	 * Occurs when the pointer moves over a Series.
	 */
	seriesPointerMove?: SeriesPointerMoveEvent;

	/**
	 * Occurs when the pointer is pressed down over a Series.
	 */
	seriesPointerDown?: SeriesPointerDownEvent;

	/**
	 * Occurs when the pointer is released over a Series.
	 */
	seriesPointerUp?: SeriesPointerUpEvent;

	/**
	 * Occurs when the style of a callout is updated.
	 */
	calloutStyleUpdating?: CalloutStyleUpdatingEvent;

	/**
	 * Event raised by the chart when custom indicator data is needed from the application.
	 * During series rendering, event will be raised once for each value in the CustomIndicatorNames collection.
	 */
	applyCustomIndicators?: ApplyCustomIndicatorsEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	updateTooltip?: UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	hideTooltip?: HideTooltipEvent;

	/**
	 * Option for igFinancialChart
	 */
	[optionName: string]: any;
}
interface IgFinancialChartMethods {
	destroy(): void;
	id(): void;
	exportVisualData(): void;

	/**
	 * Find index of item within actual data used by chart.
	 *
	 * @param item The reference to item.
	 */
	findIndexOfItem(item: Object): number;

	/**
	 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
	 *
	 * @param index Index of data item.
	 */
	getDataItem(index: Object): Object;

	/**
	 * Get reference of actual data used by chart.
	 */
	getData(): any[];

	/**
	 * Adds a new item to the data source and notifies the chart.
	 *
	 * @param item The item that we want to add to the data source.
	 */
	addItem(item: Object): Object;

	/**
	 * Inserts a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that we want to insert in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 */
	insertItem(item: Object, index: number): Object;

	/**
	 * Deletes an item from the data source and notifies the chart.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 */
	removeItem(index: number): Object;

	/**
	 * Updates an item in the data source and notifies the chart.
	 *
	 * @param index The index of the item in the data source that we want to change.
	 * @param item The new item object that will be set in the data source.
	 */
	setItem(index: number, item: Object): Object;

	/**
	 * Notifies the chart that an item has been set in an associated data source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source that has been changed.
	 * @param newItem the new item that has been set in the collection.
	 * @param oldItem the old item that has been overwritten in the collection.
	 */
	notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;

	/**
	 * Notifies the chart that the items have been cleared from an associated data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 */
	notifyClearItems(dataSource: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source where the new item has been inserted.
	 * @param newItem the new item that has been set in the collection.
	 */
	notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source from where the old item has been removed.
	 * @param oldItem the old item that has been removed from the collection.
	 */
	notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;

	/**
	 * Get reference to chart object.
	 */
	chart(): Object;

	/**
	 * Binds data to the chart
	 */
	dataBind(): void;

	/**
	 * Forces any pending deferred work to render on the chart before continuing
	 */
	flush(): void;
}
interface JQuery {
	data(propertyName: "igFinancialChart"): IgFinancialChartMethods;
}

interface JQuery {
	igFinancialChart(methodName: "destroy"): void;
	igFinancialChart(methodName: "id"): void;
	igFinancialChart(methodName: "exportVisualData"): void;
	igFinancialChart(methodName: "findIndexOfItem", item: Object): number;
	igFinancialChart(methodName: "getDataItem", index: Object): Object;
	igFinancialChart(methodName: "getData"): any[];
	igFinancialChart(methodName: "addItem", item: Object): Object;
	igFinancialChart(methodName: "insertItem", item: Object, index: number): Object;
	igFinancialChart(methodName: "removeItem", index: number): Object;
	igFinancialChart(methodName: "setItem", index: number, item: Object): Object;
	igFinancialChart(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
	igFinancialChart(methodName: "notifyClearItems", dataSource: Object): Object;
	igFinancialChart(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
	igFinancialChart(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
	igFinancialChart(methodName: "chart"): Object;
	igFinancialChart(methodName: "dataBind"): void;
	igFinancialChart(methodName: "flush"): void;

	/**
	 * Gets  the id of a template element to use for tooltips, or markup representing the tooltip template.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "tooltipTemplate"): any;

	/**
	 * Sets the id of a template element to use for tooltips, or markup representing the tooltip template.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: any): void;

	/**
	 * Gets  the names of tooltip templates
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "tooltipTemplates"): any;

	/**
	 * Sets the names of tooltip templates
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "tooltipTemplates", optionValue: any): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Gets  the left margin of chart title
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleLeftMargin"): number;

	/**
	 * Sets the left margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of chart title
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleRightMargin"): number;

	/**
	 * Sets the right margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleRightMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of chart title
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleTopMargin"): number;

	/**
	 * Sets the top margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleTopMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of chart title
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleBottomMargin"): number;

	/**
	 * Sets the bottom margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleBottomMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of chart subtitle
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleLeftMargin"): number;

	/**
	 * Sets the left margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of chart subtitle
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleTopMargin"): number;

	/**
	 * Sets the top margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of chart subtitle
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleRightMargin"): number;

	/**
	 * Sets the right margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of chart subtitle
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleBottomMargin"): number;

	/**
	 * Sets the bottom margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleBottomMargin", optionValue: number): void;

	/**
	 * Gets  color of chart subtitle
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleTextColor"): string;

	/**
	 * Sets color of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleTextColor", optionValue: string): void;

	/**
	 * Gets  color of chart title
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleTextColor"): string;

	/**
	 * Sets color of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleTextColor", optionValue: string): void;

	/**
	 * Gets  the left margin of the chart content.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "leftMargin"): number;

	/**
	 * Sets the left margin of the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "leftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of the chart content.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "topMargin"): number;

	/**
	 * Sets the top margin of the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "topMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of the chart content.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "rightMargin"): number;

	/**
	 * Sets the right margin of the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "rightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin around the chart content.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "bottomMargin"): number;

	/**
	 * Sets the bottom margin around the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "bottomMargin", optionValue: number): void;

	/**
	 * Gets  the duration used for animating series plots when the data is changing
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "transitionDuration"): number;

	/**
	 * Sets the duration used for animating series plots when the data is changing
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;

	/**
	 * Gets  the easing function used for animating series plots when the data is changing.
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "transitionEasingFunction"): any;

	/**
	 * Sets the easing function used for animating series plots when the data is changing.
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "transitionEasingFunction", optionValue: any): void;

	/**
	 * Gets  a function for creating wrapped tooltip
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "createWrappedTooltip"): any;

	/**
	 * Sets a function for creating wrapped tooltip
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "createWrappedTooltip", optionValue: any): void;

	/**
	 * Gets  the widget of this control
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "widget"): any;

	/**
	 * Sets the widget of this control
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "widget", optionValue: any): void;

	/**
	 * Gets  CSS font property for the chart subtitle
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleTextStyle"): string;

	/**
	 * Sets CSS font property for the chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitleTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for the chart title
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleTextStyle"): string;

	/**
	 * Sets CSS font property for the chart title
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "titleTextStyle", optionValue: string): void;

	/**
	 * Gets  a collection of data items used to generate the chart.
	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
	 * Additionally, if the objects in the list implement the IEnumerable interface,
	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
	 * Databinding can be further configured by attributing the data item classes
	 * with the DataSeriesMemberIntentAttribute.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "itemsSource"): any;

	/**
	 * Sets a collection of data items used to generate the chart.
	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
	 * Additionally, if the objects in the list implement the IEnumerable interface,
	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
	 * Databinding can be further configured by attributing the data item classes
	 * with the DataSeriesMemberIntentAttribute.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "itemsSource", optionValue: any): void;

	/**
	 * Gets  a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "includedProperties"): any;

	/**
	 * Sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "includedProperties", optionValue: any): void;

	/**
	 * Gets  a set of property paths that should be excluded from consideration by the category chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "excludedProperties"): any;

	/**
	 * Sets a set of property paths that should be excluded from consideration by the category chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "excludedProperties", optionValue: any): void;

	/**
	 * Gets  the palette of brushes to use for coloring the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "brushes"): any;

	/**
	 * Sets the palette of brushes to use for coloring the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "brushes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes to use for outlines on the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "outlines"): any;

	/**
	 * Sets the palette of brushes to use for outlines on the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "outlines", optionValue: any): void;

	/**
	 * Gets  the legend to connect this chart to.
	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "legend"): any;

	/**
	 * Sets the legend to connect this chart to.
	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "legend", optionValue: any): void;

	/**
	 * Gets  whether the chart can be horizontally zoomed through user interactions.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isHorizontalZoomEnabled"): boolean;

	/**
	 * Sets whether the chart can be horizontally zoomed through user interactions.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isHorizontalZoomEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether the chart can be vertically zoomed through user interactions.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isVerticalZoomEnabled"): boolean;

	/**
	 * Sets whether the chart can be vertically zoomed through user interactions.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isVerticalZoomEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether the chart can highlight series through user interactions.
	 * This property applies to Category Chart and Financial Chart controls.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isSeriesHighlightingEnabled"): boolean;

	/**
	 * Sets whether the chart can highlight series through user interactions.
	 * This property applies to Category Chart and Financial Chart controls.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isSeriesHighlightingEnabled", optionValue: boolean): void;

	/**
	 * Gets  the rectangle representing the current scroll and zoom state of the chart.
	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "windowRect"): any;

	/**
	 * Sets the rectangle representing the current scroll and zoom state of the chart.
	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
	 * The provided object should have numeric properties called left, top, width and height.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "windowRect", optionValue: any): void;

	/**
	 * Gets  text to display above the plot area.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "title"): string;

	/**
	 * Sets text to display above the plot area.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "title", optionValue: string): void;

	/**
	 * Gets  text to display below the Title, above the plot area.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitle"): string;

	/**
	 * Sets text to display below the Title, above the plot area.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "subtitle", optionValue: string): void;

	/**
	 * Gets  horizontal alignment which determines the title position, relative to the left and right edges of the control.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "titleAlignment"): string;

	/**
	 * Sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "titleAlignment", optionValue: string): void;

	/**
	 * Gets  horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "subtitleAlignment"): string;

	/**
	 * Sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "subtitleAlignment", optionValue: string): void;

	/**
	 * Gets  the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
	 *
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "unknownValuePlotting"): string;

	/**
	 * Sets the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "unknownValuePlotting", optionValue: string): void;

	/**
	 * Gets  the rendering resolution for all series in this chart.
	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "resolution"): number;

	/**
	 * Sets the rendering resolution for all series in this chart.
	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "resolution", optionValue: number): void;

	/**
	 * Gets  the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "thickness"): number;

	/**
	 * Sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "thickness", optionValue: number): void;

	/**
	 * Gets  the marker shapes used for indicating location of data points in this chart.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "markerTypes"): any;

	/**
	 * Sets the marker shapes used for indicating location of data points in this chart.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "markerTypes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes used for rendering fill area of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "markerBrushes"): any;

	/**
	 * Sets the palette of brushes used for rendering fill area of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "markerBrushes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes used for rendering outlines of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "markerOutlines"): any;

	/**
	 * Sets the palette of brushes used for rendering outlines of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "markerOutlines", optionValue: any): void;

	/**
	 * Gets  the maximum number of markers displyed in the plot area of the chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "markerMaxCount"): number;

	/**
	 * Sets the maximum number of markers displyed in the plot area of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "markerMaxCount", optionValue: number): void;

	/**
	 * Gets  whether the series animations should be allowed when a range change has been detected on an axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges"): boolean;

	/**
	 * Sets whether the series animations should be allowed when a range change has been detected on an axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges", optionValue: boolean): void;

	/**
	 * Gets  the palette of brushes to used for coloring trend lines in this chart.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "trendLineBrushes"): any;

	/**
	 * Sets the palette of brushes to used for coloring trend lines in this chart.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "trendLineBrushes", optionValue: any): void;

	/**
	 * Gets  the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
	 *
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "trendLineType"): string;

	/**
	 * Sets the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "trendLineType", optionValue: string): void;

	/**
	 * Gets  the thickness of the trend lines in this chart.
	 * This property applies only to these chart types: point, line, spline, and bubble
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "trendLineThickness"): number;

	/**
	 * Sets the thickness of the trend lines in this chart.
	 * This property applies only to these chart types: point, line, spline, and bubble
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "trendLineThickness", optionValue: number): void;

	/**
	 * Gets  a value indicating whether grid and tick lines are aligned to device pixels.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "alignsGridLinesToPixels"): boolean;

	/**
	 * Sets a value indicating whether grid and tick lines are aligned to device pixels.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "alignsGridLinesToPixels", optionValue: boolean): void;
	igFinancialChart(optionLiteral: 'option', optionName: "trendLinePeriod"): number;
	igFinancialChart(optionLiteral: 'option', optionName: "trendLinePeriod", optionValue: number): void;

	/**
	 * Gets  the style of tooltip to be displayed.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "toolTipType"): string;

	/**
	 * Sets the style of tooltip to be displayed.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "toolTipType", optionValue: string): void;

	/**
	 * Gets  the crosshairs to be displayed.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "crosshairsDisplayMode"): string;

	/**
	 * Sets the crosshairs to be displayed.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "crosshairsDisplayMode", optionValue: string): void;

	/**
	 * Gets  whether crosshairs will snap to the nearest data point.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "crosshairsSnapToData"): boolean;

	/**
	 * Sets whether crosshairs will snap to the nearest data point.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "crosshairsSnapToData", optionValue: boolean): void;

	/**
	 * Gets  whether annotations are shown along the axis for crosshair values
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "crosshairsAnnotationEnabled"): boolean;

	/**
	 * Sets whether annotations are shown along the axis for crosshair values
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "crosshairsAnnotationEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether annotations for the final value of each series is displayed on the axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "finalValueAnnotationsVisible"): boolean;

	/**
	 * Sets whether annotations for the final value of each series is displayed on the axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "finalValueAnnotationsVisible", optionValue: boolean): void;

	/**
	 * Gets  if callouts should be displayed.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsVisible"): boolean;

	/**
	 * Sets if callouts should be displayed.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsVisible", optionValue: boolean): void;

	/**
	 * Gets  if event annotations should be displayed.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutStyleUpdatingEventEnabled"): boolean;

	/**
	 * Sets if event annotations should be displayed.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutStyleUpdatingEventEnabled", optionValue: boolean): void;

	/**
	 * Gets  the collection of callout data to be annotated.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsItemsSource"): any;

	/**
	 * Sets the collection of callout data to be annotated.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsItemsSource", optionValue: any): void;

	/**
	 * Gets  the member path of the X data for the callouts.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsXMemberPath"): string;

	/**
	 * Sets the member path of the X data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsXMemberPath", optionValue: string): void;

	/**
	 * Gets  the member path of the Y data for the callouts.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsYMemberPath"): string;

	/**
	 * Sets the member path of the Y data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsYMemberPath", optionValue: string): void;

	/**
	 * Gets  the member path of the label data for the callouts.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsLabelMemberPath"): string;

	/**
	 * Sets the member path of the label data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsLabelMemberPath", optionValue: string): void;

	/**
	 * Gets  the member path of the content data for the callouts.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsContentMemberPath"): string;

	/**
	 * Sets the member path of the content data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutsContentMemberPath", optionValue: string): void;

	/**
	 * Gets  function which takes an context object and returns a formatted label for the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisFormatLabel"): any;

	/**
	 * Sets function which takes an context object and returns a formatted label for the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisFormatLabel", optionValue: any): void;

	/**
	 * Gets  function which takes a context object and returns a formatted label for the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisFormatLabel"): any;

	/**
	 * Sets function which takes a context object and returns a formatted label for the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisFormatLabel", optionValue: any): void;

	/**
	 * Gets  the left margin of labels on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelLeftMargin"): number;

	/**
	 * Sets the left margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of labels on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelTopMargin"): number;

	/**
	 * Sets the top margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of labels on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelRightMargin"): number;

	/**
	 * Sets the right margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of labels on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelBottomMargin"): number;

	/**
	 * Sets the bottom margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelBottomMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of labels on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelLeftMargin"): number;

	/**
	 * Sets the left margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of labels on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelTopMargin"): number;

	/**
	 * Sets the top margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of labels on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelRightMargin"): number;

	/**
	 * Sets the right margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of labels on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelBottomMargin"): number;

	/**
	 * Sets the bottom margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelBottomMargin", optionValue: number): void;

	/**
	 * Gets  color of labels on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelTextColor"): string;

	/**
	 * Sets color of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelTextColor", optionValue: string): void;

	/**
	 * Gets  color of labels on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelTextColor"): string;

	/**
	 * Sets color of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelTextColor", optionValue: string): void;

	/**
	 * Gets  the margin around a title on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleMargin"): number;

	/**
	 * Sets the margin around a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleMargin", optionValue: number): void;

	/**
	 * Gets  the margin around a title on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleMargin"): number;

	/**
	 * Sets the margin around a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of a title on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleLeftMargin"): number;

	/**
	 * Sets the left margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of a title on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleLeftMargin"): number;

	/**
	 * Sets the left margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of a title on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleTopMargin"): number;

	/**
	 * Sets the top margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleTopMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of a title on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleTopMargin"): number;

	/**
	 * Sets the top margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of a title on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleRightMargin"): number;

	/**
	 * Sets the right margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleRightMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of a title on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleRightMargin"): number;

	/**
	 * Sets the right margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of a title on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleBottomMargin"): number;

	/**
	 * Sets the bottom margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleBottomMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of a title on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleBottomMargin"): number;

	/**
	 * Sets the bottom margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleBottomMargin", optionValue: number): void;

	/**
	 * Gets  color of title on the X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleTextColor"): string;

	/**
	 * Sets color of title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleTextColor", optionValue: string): void;

	/**
	 * Gets  color of title on the Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleTextColor"): string;

	/**
	 * Sets color of title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleTextColor", optionValue: string): void;

	/**
	 * Gets  CSS font property for labels on X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelTextStyle"): string;

	/**
	 * Sets CSS font property for labels on X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for labels on Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelTextStyle"): string;

	/**
	 * Sets CSS font property for labels on Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for title on X-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleTextStyle"): string;

	/**
	 * Sets CSS font property for title on X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for title on Y-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleTextStyle"): string;

	/**
	 * Sets CSS font property for title on Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleTextStyle", optionValue: string): void;

	/**
	 * Gets  the format for labels along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabel"): any;

	/**
	 * Sets the format for labels along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabel", optionValue: any): void;

	/**
	 * Gets  the property or string from which the labels are derived.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabel"): any;

	/**
	 * Sets the property or string from which the labels are derived.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabel", optionValue: any): void;

	/**
	 * Gets  the color to apply to major gridlines along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMajorStroke"): string;

	/**
	 * Sets the color to apply to major gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMajorStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to major gridlines along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMajorStroke"): string;

	/**
	 * Sets the color to apply to major gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMajorStroke", optionValue: string): void;

	/**
	 * Gets  the thickness to apply to major gridlines along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMajorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to major gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMajorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to major gridlines along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMajorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to major gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMajorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to minor gridlines along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMinorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to minor gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMinorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to minor gridlines along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMinorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to minor gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMinorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the color to apply to stripes along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisStrip"): string;

	/**
	 * Sets the color to apply to stripes along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisStrip", optionValue: string): void;

	/**
	 * Gets  the color to apply to stripes along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisStrip"): string;

	/**
	 * Sets the color to apply to stripes along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisStrip", optionValue: string): void;

	/**
	 * Gets  the color to apply to the X-axis line.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisStroke"): string;

	/**
	 * Sets the color to apply to the X-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to the Y-axis line.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisStroke"): string;

	/**
	 * Sets the color to apply to the Y-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisStroke", optionValue: string): void;

	/**
	 * Gets  the thickness to apply to the X-axis line.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to the X-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to the Y-axis line.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to the Y-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the length of tickmarks along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTickLength"): number;

	/**
	 * Sets the length of tickmarks along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTickLength", optionValue: number): void;

	/**
	 * Gets  the length of tickmarks along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTickLength"): number;

	/**
	 * Sets the length of tickmarks along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTickLength", optionValue: number): void;

	/**
	 * Gets  the color to apply to tickmarks along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTickStroke"): string;

	/**
	 * Sets the color to apply to tickmarks along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTickStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to tickmarks along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTickStroke"): string;

	/**
	 * Sets the color to apply to tickmarks along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTickStroke", optionValue: string): void;

	/**
	 * Gets  the thickness to apply to tickmarks along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTickStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to tickmarks along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to tickmarks along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTickStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to tickmarks along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the Text to display below the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitle"): string;

	/**
	 * Sets the Text to display below the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitle", optionValue: string): void;

	/**
	 * Gets  the Text to display to the left of the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitle"): string;

	/**
	 * Sets the Text to display to the left of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitle", optionValue: string): void;

	/**
	 * Gets  the color to apply to minor gridlines along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMinorStroke"): string;

	/**
	 * Sets the color to apply to minor gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMinorStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to minor gridlines along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMinorStroke"): string;

	/**
	 * Sets the color to apply to minor gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMinorStroke", optionValue: string): void;

	/**
	 * Gets  the angle of rotation for labels along the X-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelAngle"): number;

	/**
	 * Sets the angle of rotation for labels along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelAngle", optionValue: number): void;

	/**
	 * Gets  the angle of rotation for labels along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelAngle"): number;

	/**
	 * Sets the angle of rotation for labels along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelAngle", optionValue: number): void;

	/**
	 * Gets  the distance between the X-axis and the bottom of the chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisExtent"): number;

	/**
	 * Sets the distance between the X-axis and the bottom of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisExtent", optionValue: number): void;

	/**
	 * Gets  the distance between the Y-axis and the left edge of the chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisExtent"): number;

	/**
	 * Sets the distance between the Y-axis and the left edge of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisExtent", optionValue: number): void;

	/**
	 * Gets  the angle of rotation for the X-axis title.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleAngle"): number;

	/**
	 * Sets the angle of rotation for the X-axis title.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleAngle", optionValue: number): void;

	/**
	 * Gets  the angle of rotation for the Y-axis title.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleAngle"): number;

	/**
	 * Sets the angle of rotation for the Y-axis title.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleAngle", optionValue: number): void;

	/**
	 * Gets  whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisInverted"): boolean;

	/**
	 * Sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisInverted", optionValue: boolean): void;

	/**
	 * Gets  whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisInverted"): boolean;

	/**
	 * Sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisInverted", optionValue: boolean): void;

	/**
	 * Gets  Horizontal alignment of the X-axis title.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleAlignment"): string;

	/**
	 * Sets Horizontal alignment of the X-axis title.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisTitleAlignment", optionValue: string): void;

	/**
	 * Gets  Vertical alignment of the Y-axis title.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleAlignment"): string;

	/**
	 * Sets Vertical alignment of the Y-axis title.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisTitleAlignment", optionValue: string): void;

	/**
	 * Gets  Horizontal alignment of X-axis labels.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelHorizontalAlignment"): string;

	/**
	 * Sets Horizontal alignment of X-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelHorizontalAlignment", optionValue: string): void;

	/**
	 * Gets  Horizontal alignment of Y-axis labels.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelHorizontalAlignment"): string;

	/**
	 * Sets Horizontal alignment of Y-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelHorizontalAlignment", optionValue: string): void;

	/**
	 * Gets  Vertical alignment of X-axis labels.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelVerticalAlignment"): string;

	/**
	 * Sets Vertical alignment of X-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelVerticalAlignment", optionValue: string): void;

	/**
	 * Gets  Vertical alignment of Y-axis labels.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelVerticalAlignment"): string;

	/**
	 * Sets Vertical alignment of Y-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelVerticalAlignment", optionValue: string): void;

	/**
	 * Gets  Visibility of X-axis labels.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelVisibility"): string;

	/**
	 * Sets Visibility of X-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisLabelVisibility", optionValue: string): void;

	/**
	 * Gets  Visibility of Y-axis labels.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelVisibility"): string;

	/**
	 * Sets Visibility of Y-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelVisibility", optionValue: string): void;

	/**
	 * The location of Y-axis labels, relative to the plot area.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelLocation"): string;

	/**
	 * The location of Y-axis labels, relative to the plot area.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLabelLocation", optionValue: string): void;
	igFinancialChart(optionLiteral: 'option', optionName: "rangeSelectorTemplate"): any;
	igFinancialChart(optionLiteral: 'option', optionName: "rangeSelectorTemplate", optionValue: any): void;
	igFinancialChart(optionLiteral: 'option', optionName: "toolbarTemplate"): any;
	igFinancialChart(optionLiteral: 'option', optionName: "toolbarTemplate", optionValue: any): void;
	igFinancialChart(optionLiteral: 'option', optionName: "chartTypePickerTemplate"): any;
	igFinancialChart(optionLiteral: 'option', optionName: "chartTypePickerTemplate", optionValue: any): void;
	igFinancialChart(optionLiteral: 'option', optionName: "trendLineTypePickerTemplate"): any;
	igFinancialChart(optionLiteral: 'option', optionName: "trendLineTypePickerTemplate", optionValue: any): void;
	igFinancialChart(optionLiteral: 'option', optionName: "volumeTypePickerTemplate"): any;
	igFinancialChart(optionLiteral: 'option', optionName: "volumeTypePickerTemplate", optionValue: any): void;
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorMenuTemplate"): any;
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorMenuTemplate", optionValue: any): void;
	igFinancialChart(optionLiteral: 'option', optionName: "overlayPickerTemplate"): any;
	igFinancialChart(optionLiteral: 'option', optionName: "overlayPickerTemplate", optionValue: any): void;
	igFinancialChart(optionLiteral: 'option', optionName: "toolbarHeight"): number;
	igFinancialChart(optionLiteral: 'option', optionName: "toolbarHeight", optionValue: number): void;

	/**
	 * Gets  whether the Y-axis should use a logarithmic scale instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisIsLogarithmic"): boolean;

	/**
	 * Sets whether the Y-axis should use a logarithmic scale instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisIsLogarithmic", optionValue: boolean): void;

	/**
	 * Gets  the base value to use in the log function when mapping the position of data items along the Y-axis.
	 * This property is effective only when YAxisIsLogarithmic is true.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLogarithmBase"): number;

	/**
	 * Sets the base value to use in the log function when mapping the position of data items along the Y-axis.
	 * This property is effective only when YAxisIsLogarithmic is true.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisLogarithmBase", optionValue: number): void;

	/**
	 * Gets  the distance between each label and grid line along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisInterval"): number;

	/**
	 * Sets the distance between each label and grid line along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisInterval", optionValue: number): void;

	/**
	 * Gets  the data value corresponding to the minimum value of the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMinimumValue"): number;

	/**
	 * Sets the data value corresponding to the minimum value of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMinimumValue", optionValue: number): void;

	/**
	 * Gets  the data value corresponding to the maximum value of the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMaximumValue"): number;

	/**
	 * Sets the data value corresponding to the maximum value of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMaximumValue", optionValue: number): void;

	/**
	 * Gets  the frequency of displayed minor lines along the Y-axis.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMinorInterval"): number;

	/**
	 * Sets the frequency of displayed minor lines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMinorInterval", optionValue: number): void;

	/**
	 * The type of series to display in the volume pane.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "volumeType"): string;

	/**
	 * The type of series to display in the volume pane.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "volumeType", optionValue: string): void;

	/**
	 * The scaling mode of the X-axis.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMode"): string;

	/**
	 * The scaling mode of the X-axis.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMode", optionValue: string): void;

	/**
	 * The scaling mode of the Y-axis.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMode"): string;

	/**
	 * The scaling mode of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "yAxisMode", optionValue: string): void;

	/**
	 * A boolean property controlling the visibility of the toolbar.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isToolbarVisible"): boolean;

	/**
	 * A boolean property controlling the visibility of the toolbar.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isToolbarVisible", optionValue: boolean): void;

	/**
	 * The type of price series to display in the main chart.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "chartType"): string;

	/**
	 * The type of price series to display in the main chart.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "chartType", optionValue: string): void;

	/**
	 * A boolean indicating whether the chart should automatically zoom in vertically on the currently visible range of data.
	 * When this property is set to true, panning and zooming along the X-axis will result in a corresponding zoom on the Y-axis, so that the visible range of data fills the zoom window as fully as possible.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isWindowSyncedToVisibleRange"): boolean;

	/**
	 * A boolean indicating whether the chart should automatically zoom in vertically on the currently visible range of data.
	 * When this property is set to true, panning and zooming along the X-axis will result in a corresponding zoom on the Y-axis, so that the visible range of data fills the zoom window as fully as possible.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isWindowSyncedToVisibleRange", optionValue: boolean): void;

	/**
	 * A collection indicating what financial indicator types to display on the Financial Chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorTypes"): any;

	/**
	 * A collection indicating what financial indicator types to display on the Financial Chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorTypes", optionValue: any): void;

	/**
	 * A collection indicating what financial overlay types to display on the Financial Chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "overlayTypes"): any;

	/**
	 * A collection indicating what financial overlay types to display on the Financial Chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "overlayTypes", optionValue: any): void;

	/**
	 * Gets  whether the large numbers on the Y-axis labels are abbreviated.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisAbbreviateLargeNumbers"): boolean;

	/**
	 * Sets whether the large numbers on the Y-axis labels are abbreviated.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "yAxisAbbreviateLargeNumbers", optionValue: boolean): void;

	/**
	 * Gets  type of series to display in the zoom slider pane.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "zoomSliderType"): string;

	/**
	 * Sets type of series to display in the zoom slider pane.
	 *
	 * @optionValue New value to be set.
	 */

	igFinancialChart(optionLiteral: 'option', optionName: "zoomSliderType", optionValue: string): void;

	/**
	 * Gets  the palette used for coloring negative items of Waterfall chart type.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "negativeBrushes"): any;

	/**
	 * Sets the palette used for coloring negative items of Waterfall chart type.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "negativeBrushes", optionValue: any): void;

	/**
	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "negativeOutlines"): any;

	/**
	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "negativeOutlines", optionValue: any): void;

	/**
	 * Brushes to use for filling financial overlays.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "overlayBrushes"): any;

	/**
	 * Brushes to use for filling financial overlays.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "overlayBrushes", optionValue: any): void;

	/**
	 * Brushes to use for outlining financial overlays.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "overlayOutlines"): any;

	/**
	 * Brushes to use for outlining financial overlays.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "overlayOutlines", optionValue: any): void;

	/**
	 * Brushes to use for outlining volume series in the volume pane.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "volumeOutlines"): any;

	/**
	 * Brushes to use for outlining volume series in the volume pane.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "volumeOutlines", optionValue: any): void;

	/**
	 * Brushes to use for filling volume series in the volume pane.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "volumeBrushes"): any;

	/**
	 * Brushes to use for filling volume series in the volume pane.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "volumeBrushes", optionValue: any): void;

	/**
	 * Brushes to use for negative elements in financial indicators.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorNegativeBrushes"): any;

	/**
	 * Brushes to use for negative elements in financial indicators.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorNegativeBrushes", optionValue: any): void;

	/**
	 * Brushes to use for financial indicators.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorBrushes"): any;

	/**
	 * Brushes to use for financial indicators.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorBrushes", optionValue: any): void;

	/**
	 * The outline thickness of volume series in the volume pane.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "volumeThickness"): number;

	/**
	 * The outline thickness of volume series in the volume pane.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "volumeThickness", optionValue: number): void;

	/**
	 * The outline thickness of financial overlays.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "overlayThickness"): number;

	/**
	 * The outline thickness of financial overlays.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "overlayThickness", optionValue: number): void;

	/**
	 * The outline or stroke thickness of financial indicators.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorThickness"): number;

	/**
	 * The outline or stroke thickness of financial indicators.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorThickness", optionValue: number): void;

	/**
	 * The display types of financial indicators.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorDisplayTypes"): any;

	/**
	 * The display types of financial indicators.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorDisplayTypes", optionValue: any): void;

	/**
	 * The period of financial indicators, where applicable.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorPeriod"): number;

	/**
	 * The period of financial indicators, where applicable.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorPeriod", optionValue: number): void;

	/**
	 * The multiplier of financial indicators, where applicable.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorMultiplier"): number;

	/**
	 * The multiplier of financial indicators, where applicable.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorMultiplier", optionValue: number): void;

	/**
	 * The smoothing period of financial indicators, where applicable.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorSmoothingPeriod"): number;

	/**
	 * The smoothing period of financial indicators, where applicable.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorSmoothingPeriod", optionValue: number): void;

	/**
	 * The short period of financial indicators, where applicable.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorShortPeriod"): number;

	/**
	 * The short period of financial indicators, where applicable.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorShortPeriod", optionValue: number): void;

	/**
	 * The long period of financial indicators, where applicable.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorLongPeriod"): number;

	/**
	 * The long period of financial indicators, where applicable.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorLongPeriod", optionValue: number): void;

	/**
	 * The signal period of financial indicators, where applicable.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorSignalPeriod"): number;

	/**
	 * The signal period of financial indicators, where applicable.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "indicatorSignalPeriod", optionValue: number): void;

	/**
	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "rangeSelectorOptions"): any;

	/**
	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "rangeSelectorOptions", optionValue: any): void;

	/**
	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
	 * This will be the intersection of the user-defined range selector options, if any, and the range selector options which are automatically determined based on the range of data.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "actualRangeSelectorOptions"): any;

	/**
	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
	 * This will be the intersection of the user-defined range selector options, if any, and the range selector options which are automatically determined based on the range of data.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "actualRangeSelectorOptions", optionValue: any): void;

	/**
	 * The names of custom indicators to add to the chart.
	 * When CustomIndicatorNames is set, the ApplyCustomIndicators event will be raised for each custom indicator name.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "customIndicatorNames"): any;

	/**
	 * The names of custom indicators to add to the chart.
	 * When CustomIndicatorNames is set, the ApplyCustomIndicators event will be raised for each custom indicator name.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "customIndicatorNames", optionValue: any): void;

	/**
	 * Gets  stroke brush of major gridlines on x-axis of the zoom slider pane
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "zoomSliderXAxisMajorStroke"): string;

	/**
	 * Sets stroke brush of major gridlines on x-axis of the zoom slider pane
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "zoomSliderXAxisMajorStroke", optionValue: string): void;

	/**
	 * Gets  thickness of major gridlines on x-axis of the zoom slider pane
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "zoomSliderXAxisMajorStrokeThickness"): number;

	/**
	 * Sets thickness of major gridlines on x-axis of the zoom slider pane
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "zoomSliderXAxisMajorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  weather or not a legend is visible between toolbar and chart's plot area
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isLegendVisible"): boolean;

	/**
	 * Sets weather or not a legend is visible between toolbar and chart's plot area
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "isLegendVisible", optionValue: boolean): void;

	/**
	 * Gets  a legend displayed between toolbar and chart's plot area
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "financialChartLegend"): any;

	/**
	 * Sets a legend displayed between toolbar and chart's plot area
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "financialChartLegend", optionValue: any): void;

	/**
	 * Gets  minimum value on x-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMinimumValue"): any;

	/**
	 * Sets minimum value on x-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMinimumValue", optionValue: any): void;

	/**
	 * Gets  maximum value on x-axis
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMaximumValue"): any;

	/**
	 * Sets maximum value on x-axis
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "xAxisMaximumValue", optionValue: any): void;

	/**
	 * The width of the chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "width"): number;

	/**
	 * The width of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "width", optionValue: number): void;

	/**
	 * The height of the chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "height"): number;

	/**
	 * The height of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "height", optionValue: number): void;

	/**
	 * Gets  maximum number of displayed records in chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "maxRecCount"): number;

	/**
	 * Sets maximum number of displayed records in chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "maxRecCount", optionValue: number): void;

	/**
	 * Gets  a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Gets  url which is used for sending JSON on request for remote data.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets url which is used for sending JSON on request for remote data.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Event raised when a property value is changed on this chart
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "propertyChanged"): PropertyChangedEvent;

	/**
	 * Event raised when a property value is changed on this chart
	 *
	 * @optionValue Define event handler function.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "propertyChanged", optionValue: PropertyChangedEvent): void;

	/**
	 * Event raised when a series is initialized and added to this chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesAdded"): SeriesAddedEvent;

	/**
	 * Event raised when a series is initialized and added to this chart.
	 *
	 * @optionValue Define event handler function.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesAdded", optionValue: SeriesAddedEvent): void;

	/**
	 * Event raised when a series is removed from this chart.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesRemoved"): SeriesRemovedEvent;

	/**
	 * Event raised when a series is removed from this chart.
	 *
	 * @optionValue Define event handler function.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesRemoved", optionValue: SeriesRemovedEvent): void;

	/**
	 * Occurs when the pointer enters a Series.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerEnter"): SeriesPointerEnterEvent;

	/**
	 * Occurs when the pointer enters a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerEnter", optionValue: SeriesPointerEnterEvent): void;

	/**
	 * Occurs when the pointer leaves a Series.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerLeave"): SeriesPointerLeaveEvent;

	/**
	 * Occurs when the pointer leaves a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerLeave", optionValue: SeriesPointerLeaveEvent): void;

	/**
	 * Occurs when the pointer moves over a Series.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerMove"): SeriesPointerMoveEvent;

	/**
	 * Occurs when the pointer moves over a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerMove", optionValue: SeriesPointerMoveEvent): void;

	/**
	 * Occurs when the pointer is pressed down over a Series.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerDown"): SeriesPointerDownEvent;

	/**
	 * Occurs when the pointer is pressed down over a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerDown", optionValue: SeriesPointerDownEvent): void;

	/**
	 * Occurs when the pointer is released over a Series.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerUp"): SeriesPointerUpEvent;

	/**
	 * Occurs when the pointer is released over a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "seriesPointerUp", optionValue: SeriesPointerUpEvent): void;

	/**
	 * Occurs when the style of a callout is updated.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutStyleUpdating"): CalloutStyleUpdatingEvent;

	/**
	 * Occurs when the style of a callout is updated.
	 *
	 * @optionValue New value to be set.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "calloutStyleUpdating", optionValue: CalloutStyleUpdatingEvent): void;

	/**
	 * Event raised by the chart when custom indicator data is needed from the application.
	 * During series rendering, event will be raised once for each value in the CustomIndicatorNames collection.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "applyCustomIndicators"): ApplyCustomIndicatorsEvent;

	/**
	 * Event raised by the chart when custom indicator data is needed from the application.
	 * During series rendering, event will be raised once for each value in the CustomIndicatorNames collection.
	 *
	 * @optionValue Define event handler function.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "applyCustomIndicators", optionValue: ApplyCustomIndicatorsEvent): void;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "updateTooltip"): UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "updateTooltip", optionValue: UpdateTooltipEvent): void;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "hideTooltip"): HideTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igFinancialChart(optionLiteral: 'option', optionName: "hideTooltip", optionValue: HideTooltipEvent): void;
	igFinancialChart(options: IgFinancialChart): JQuery;
	igFinancialChart(optionLiteral: 'option', optionName: string): any;
	igFinancialChart(optionLiteral: 'option', options: IgFinancialChart): JQuery;
	igFinancialChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igFinancialChart(methodName: string, ...methodParams: any[]): any;
}
interface SliceClickedEvent {
	(event: Event, ui: SliceClickedEventUIParam): void;
}

interface SliceClickedEventUIParam {
	/**
	 * Used to obtain reference to igFunnelChart.
	 */
	owner?: any;

	/**
	 * Used to obtain index of clicked slice.
	 */
	index?: any;

	/**
	 * Used to obtain reference to clicked slice item.
	 */
	item?: any;

	/**
	 * Used to check if slice became selected.
	 */
	selected?: any;
}

interface IgFunnelChart {
	/**
	 * Gets or sets values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
	 * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
	 * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
	 * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
	 * Example:
	 * bezierPoints: "0.4 0.1 0.6 1"
	 */
	bezierPoints?: string;

	/**
	 * Gets or sets the Legend for the chart.
	 * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
	 * If element was not found, then new DIV element is created and inserted into parent after chart element.
	 * Value of that option can be an object with member "element", which contains the id of legend-element.
	 * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
	 * Examples:
	 * legend: {}
	 * legend: "idOfDiv"
	 * legend: { element: "idOfDiv", width: 300 }
	 * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
	 */
	legend?: any;

	/**
	 * Gets or sets the value member path for the funnel chart.
	 */
	valueMemberPath?: string;

	/**
	 * Gets or sets the palette of brushes to use for coloring the slices.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	brushes?: any;

	/**
	 * Gets or sets the palette of brushes to use for outlines on the slices.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	outlines?: any;

	/**
	 * Gets or sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
	 */
	bottomEdgeWidth?: number;

	/**
	 * Gets or sets the InnerLabel mapping property for the current series object.
	 */
	innerLabelMemberPath?: string;

	/**
	 * Gets or sets the OuterLabel mapping property for the current series object.
	 */
	outerLabelMemberPath?: string;

	/**
	 * Gets or sets whether the inner labels are visible.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	innerLabelVisibility?: string;

	/**
	 * Gets or sets whether the outer labels are visible.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	outerLabelVisibility?: string;

	/**
	 * Gets or sets which side of the chart the outer labels should appear.
	 *
	 * Valid values:
	 * "left" The labels will be displayed to the left of the chart.
	 * "right" The labels will be displayed to the right of the chart.
	 */
	outerLabelAlignment?: string;

	/**
	 * Gets or sets how the heights of the funnel slices should be configured.
	 *
	 * Valid values:
	 * "uniform" The slice heights should be uniform.
	 * "weighted" The slice heights should be weighted by value.
	 */
	funnelSliceDisplay?: string;

	/**
	 * Gets or sets the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
	 */
	formatInnerLabel?: any;

	/**
	 * Gets or sets the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
	 */
	formatOuterLabel?: any;

	/**
	 * Gets or sets how long the animations should take to run.
	 */
	transitionDuration?: number;

	/**
	 * Gets or sets if the funnel should be rendered inverted.
	 */
	isInverted?: boolean;

	/**
	 * Gets or sets whether to use a Bezier curve to define the funnel.
	 */
	useBezierCurve?: boolean;

	/**
	 * Gets or sets whether to allow slices to be selected.
	 */
	allowSliceSelection?: boolean;

	/**
	 * Gets or sets whether to use the unselected style on unselected slices.
	 */
	useUnselectedStyle?: boolean;

	/**
	 * Gets or sets the style to use for selected slices.
	 * That can be used to set stroke (outline color), fill (background color) and opacity.
	 */
	selectedSliceStyle?: any;

	/**
	 * Gets or sets the style to use for unselected slices.
	 * That can be used to set stroke (outline color), fill (background color) and opacity.
	 */
	unselectedSliceStyle?: any;

	/**
	 * Gets or sets the LegendItemBadgeTemplate to use for the legend items.
	 * The provided object should have properties called render and optionally measure.
	 * These are functions which will be called that will be called to handle the user specified custom rendering.
	 * measure will be passed an object that looks like this:
	 * {
	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 *     width: [if value is present, specifies the available width, user may set to desired width for content],
	 *     height: [if value is present, specifies the available height, user may set to desired height for content],
	 *     isConstant: [user should set to true if desired with and height will always be the same for this template],
	 *     data: [if present, represents the contextual data for this template]
	 * }
	 * render will be passed an object that looks like this:
	 * {
	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 *     xPosition: [if present, specifies the x position at which to render the content],
	 *     yPosition: [if present, specifies the y position at which to render the content],
	 *     availableWidth: [if present, specifies the available width in which to render the content],
	 *     availableHeight: [if present, specifies the available height in which to render the content],
	 *     data: [if present, specifies the data that is in context for this content],
	 *     isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
	 * }
	 */
	legendItemBadgeTemplate?: any;

	/**
	 * Gets or sets whether to use the outer labels to identify the legend items.
	 */
	useOuterLabelsForLegend?: boolean;

	/**
	 * Gets or sets the text style for inner labels
	 */
	textStyle?: string;

	/**
	 * Gets or sets the text style for outer labels
	 */
	outerLabelTextStyle?: string;

	/**
	 * Gets or sets the thickness of outline around slices.
	 */
	outlineThickness?: number;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Gets or sets the brush used for the outer labels.
	 */
	outerLabelTextColor?: string;

	/**
	 * Gets or sets the brush used for the inner labels.
	 */
	textColor?: string;

	/**
	 * The width of the chart.
	 */
	width?: number;

	/**
	 * The height of the chart.
	 */
	height?: number;

	/**
	 * Gets sets template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 */
	tooltipTemplate?: string;

	/**
	 * Gets sets maximum number of displayed records in chart.
	 */
	maxRecCount?: number;

	/**
	 * Gets sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	dataSource?: any;

	/**
	 * Gets sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	dataSourceType?: string;

	/**
	 * Gets sets url which is used for sending JSON on request for remote data.
	 */
	dataSourceUrl?: string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	responseTotalRecCountKey?: string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Event which is raised when a slice is clicked.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to igFunnelChart.
	 * Use ui.index to obtain index of clicked slice.
	 * Use ui.item to obtain reference to clicked slice item.
	 * Use ui.selected to check if slice became selected.
	 */
	sliceClicked?: SliceClickedEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	updateTooltip?: UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	hideTooltip?: HideTooltipEvent;

	/**
	 * Option for igFunnelChart
	 */
	[optionName: string]: any;
}
interface IgFunnelChartMethods {
	/**
	 * Gets array of selected slice items.
	 *
	 * @param selection Array or selected slice items.
	 * @return array|object If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
	 */
	selectedSliceItems(selection?: any[]): any[];

	/**
	 * Gets sets array of indexes of selected slices.
	 *
	 * @param selection Array or selected slice indexes.
	 * @return array|object If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
	 */
	selectedSliceIndexes(selection?: any[]): any[];

	/**
	 * Checks if slice is selected.
	 *
	 * @param slice Index of slice or reference to slice-data-item.
	 */
	isSelected(slice: Object): boolean;

	/**
	 * Toggles selected state of slice.
	 *
	 * @param slice Index of slice or reference to slice-data-item.
	 */
	toggleSelection(slice: Object): Object;
	exportVisualData(): void;

	/**
	 * Destroys widget.
	 */
	destroy(): void;

	/**
	 * Find index of item within actual data used by chart.
	 *
	 * @param item The reference to item.
	 */
	findIndexOfItem(item: Object): number;

	/**
	 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
	 *
	 * @param index Index of data item.
	 */
	getDataItem(index: Object): Object;

	/**
	 * Get reference of actual data used by chart.
	 */
	getData(): any[];

	/**
	 * Adds a new item to the data source and notifies the chart.
	 *
	 * @param item The item that we want to add to the data source.
	 */
	addItem(item: Object): Object;

	/**
	 * Inserts a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that we want to insert in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 */
	insertItem(item: Object, index: number): Object;

	/**
	 * Deletes an item from the data source and notifies the chart.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 */
	removeItem(index: number): Object;

	/**
	 * Updates an item in the data source and notifies the chart.
	 *
	 * @param index The index of the item in the data source that we want to change.
	 * @param item The new item object that will be set in the data source.
	 */
	setItem(index: number, item: Object): Object;

	/**
	 * Notifies the chart that an item has been set in an associated data source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source that has been changed.
	 * @param newItem the new item that has been set in the collection.
	 * @param oldItem the old item that has been overwritten in the collection.
	 */
	notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;

	/**
	 * Notifies the chart that the items have been cleared from an associated data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 */
	notifyClearItems(dataSource: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source where the new item has been inserted.
	 * @param newItem the new item that has been set in the collection.
	 */
	notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source from where the old item has been removed.
	 * @param oldItem the old item that has been removed from the collection.
	 */
	notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;

	/**
	 * Get reference to chart object.
	 */
	chart(): Object;

	/**
	 * Binds data to the chart
	 */
	dataBind(): void;

	/**
	 * Forces any pending deferred work to render on the chart before continuing
	 */
	flush(): void;
}
interface JQuery {
	data(propertyName: "igFunnelChart"): IgFunnelChartMethods;
}

interface JQuery {
	igFunnelChart(methodName: "selectedSliceItems", selection?: any[]): any[];
	igFunnelChart(methodName: "selectedSliceIndexes", selection?: any[]): any[];
	igFunnelChart(methodName: "isSelected", slice: Object): boolean;
	igFunnelChart(methodName: "toggleSelection", slice: Object): Object;
	igFunnelChart(methodName: "exportVisualData"): void;
	igFunnelChart(methodName: "destroy"): void;
	igFunnelChart(methodName: "findIndexOfItem", item: Object): number;
	igFunnelChart(methodName: "getDataItem", index: Object): Object;
	igFunnelChart(methodName: "getData"): any[];
	igFunnelChart(methodName: "addItem", item: Object): Object;
	igFunnelChart(methodName: "insertItem", item: Object, index: number): Object;
	igFunnelChart(methodName: "removeItem", index: number): Object;
	igFunnelChart(methodName: "setItem", index: number, item: Object): Object;
	igFunnelChart(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
	igFunnelChart(methodName: "notifyClearItems", dataSource: Object): Object;
	igFunnelChart(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
	igFunnelChart(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
	igFunnelChart(methodName: "chart"): Object;
	igFunnelChart(methodName: "dataBind"): void;
	igFunnelChart(methodName: "flush"): void;

	/**
	 * Gets  values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
	 * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
	 * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
	 * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
	 * Example:
	 * bezierPoints: "0.4 0.1 0.6 1"
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "bezierPoints"): string;

	/**
	 * Sets values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
	 * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
	 * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
	 * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
	 * Example:
	 * bezierPoints: "0.4 0.1 0.6 1"
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "bezierPoints", optionValue: string): void;

	/**
	 * Gets  the Legend for the chart.
	 * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
	 * If element was not found, then new DIV element is created and inserted into parent after chart element.
	 * Value of that option can be an object with member "element", which contains the id of legend-element.
	 * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
	 * Examples:
	 * legend: {}
	 * legend: "idOfDiv"
	 * legend: { element: "idOfDiv", width: 300 }
	 * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "legend"): any;

	/**
	 * Sets the Legend for the chart.
	 * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
	 * If element was not found, then new DIV element is created and inserted into parent after chart element.
	 * Value of that option can be an object with member "element", which contains the id of legend-element.
	 * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
	 * Examples:
	 * legend: {}
	 * legend: "idOfDiv"
	 * legend: { element: "idOfDiv", width: 300 }
	 * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "legend", optionValue: any): void;

	/**
	 * Gets  the value member path for the funnel chart.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "valueMemberPath"): string;

	/**
	 * Sets the value member path for the funnel chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "valueMemberPath", optionValue: string): void;

	/**
	 * Gets  the palette of brushes to use for coloring the slices.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "brushes"): any;

	/**
	 * Sets the palette of brushes to use for coloring the slices.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "brushes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes to use for outlines on the slices.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outlines"): any;

	/**
	 * Sets the palette of brushes to use for outlines on the slices.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outlines", optionValue: any): void;

	/**
	 * Gets  the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "bottomEdgeWidth"): number;

	/**
	 * Sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "bottomEdgeWidth", optionValue: number): void;

	/**
	 * Gets  the InnerLabel mapping property for the current series object.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "innerLabelMemberPath"): string;

	/**
	 * Sets the InnerLabel mapping property for the current series object.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "innerLabelMemberPath", optionValue: string): void;

	/**
	 * Gets  the OuterLabel mapping property for the current series object.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelMemberPath"): string;

	/**
	 * Sets the OuterLabel mapping property for the current series object.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelMemberPath", optionValue: string): void;

	/**
	 * Gets  whether the inner labels are visible.
	 */

	igFunnelChart(optionLiteral: 'option', optionName: "innerLabelVisibility"): string;

	/**
	 * Sets whether the inner labels are visible.
	 *
	 * @optionValue New value to be set.
	 */

	igFunnelChart(optionLiteral: 'option', optionName: "innerLabelVisibility", optionValue: string): void;

	/**
	 * Gets  whether the outer labels are visible.
	 */

	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelVisibility"): string;

	/**
	 * Sets whether the outer labels are visible.
	 *
	 * @optionValue New value to be set.
	 */

	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelVisibility", optionValue: string): void;

	/**
	 * Gets  which side of the chart the outer labels should appear.
	 */

	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelAlignment"): string;

	/**
	 * Sets which side of the chart the outer labels should appear.
	 *
	 * @optionValue New value to be set.
	 */

	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelAlignment", optionValue: string): void;

	/**
	 * Gets  how the heights of the funnel slices should be configured.
	 */

	igFunnelChart(optionLiteral: 'option', optionName: "funnelSliceDisplay"): string;

	/**
	 * Sets how the heights of the funnel slices should be configured.
	 *
	 * @optionValue New value to be set.
	 */

	igFunnelChart(optionLiteral: 'option', optionName: "funnelSliceDisplay", optionValue: string): void;

	/**
	 * Gets  the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "formatInnerLabel"): any;

	/**
	 * Sets the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "formatInnerLabel", optionValue: any): void;

	/**
	 * Gets  the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "formatOuterLabel"): any;

	/**
	 * Sets the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "formatOuterLabel", optionValue: any): void;

	/**
	 * Gets  how long the animations should take to run.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "transitionDuration"): number;

	/**
	 * Sets how long the animations should take to run.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;

	/**
	 * Gets  if the funnel should be rendered inverted.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "isInverted"): boolean;

	/**
	 * Sets if the funnel should be rendered inverted.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "isInverted", optionValue: boolean): void;

	/**
	 * Gets  whether to use a Bezier curve to define the funnel.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "useBezierCurve"): boolean;

	/**
	 * Sets whether to use a Bezier curve to define the funnel.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "useBezierCurve", optionValue: boolean): void;

	/**
	 * Gets  whether to allow slices to be selected.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "allowSliceSelection"): boolean;

	/**
	 * Sets whether to allow slices to be selected.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "allowSliceSelection", optionValue: boolean): void;

	/**
	 * Gets  whether to use the unselected style on unselected slices.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "useUnselectedStyle"): boolean;

	/**
	 * Sets whether to use the unselected style on unselected slices.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "useUnselectedStyle", optionValue: boolean): void;

	/**
	 * Gets  the style to use for selected slices.
	 * That can be used to set stroke (outline color), fill (background color) and opacity.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "selectedSliceStyle"): any;

	/**
	 * Sets the style to use for selected slices.
	 * That can be used to set stroke (outline color), fill (background color) and opacity.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "selectedSliceStyle", optionValue: any): void;

	/**
	 * Gets  the style to use for unselected slices.
	 * That can be used to set stroke (outline color), fill (background color) and opacity.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "unselectedSliceStyle"): any;

	/**
	 * Sets the style to use for unselected slices.
	 * That can be used to set stroke (outline color), fill (background color) and opacity.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "unselectedSliceStyle", optionValue: any): void;

	/**
	 * Gets  the LegendItemBadgeTemplate to use for the legend items.
	 * The provided object should have properties called render and optionally measure.
	 * These are functions which will be called that will be called to handle the user specified custom rendering.
	 * measure will be passed an object that looks like this:
	 * {
	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 *     width: [if value is present, specifies the available width, user may set to desired width for content],
	 *     height: [if value is present, specifies the available height, user may set to desired height for content],
	 *     isConstant: [user should set to true if desired with and height will always be the same for this template],
	 *     data: [if present, represents the contextual data for this template]
	 * }
	 * render will be passed an object that looks like this:
	 * {
	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 *     xPosition: [if present, specifies the x position at which to render the content],
	 *     yPosition: [if present, specifies the y position at which to render the content],
	 *     availableWidth: [if present, specifies the available width in which to render the content],
	 *     availableHeight: [if present, specifies the available height in which to render the content],
	 *     data: [if present, specifies the data that is in context for this content],
	 *     isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
	 * }
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "legendItemBadgeTemplate"): any;

	/**
	 * Sets the LegendItemBadgeTemplate to use for the legend items.
	 * The provided object should have properties called render and optionally measure.
	 * These are functions which will be called that will be called to handle the user specified custom rendering.
	 * measure will be passed an object that looks like this:
	 * {
	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 *     width: [if value is present, specifies the available width, user may set to desired width for content],
	 *     height: [if value is present, specifies the available height, user may set to desired height for content],
	 *     isConstant: [user should set to true if desired with and height will always be the same for this template],
	 *     data: [if present, represents the contextual data for this template]
	 * }
	 * render will be passed an object that looks like this:
	 * {
	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 *     xPosition: [if present, specifies the x position at which to render the content],
	 *     yPosition: [if present, specifies the y position at which to render the content],
	 *     availableWidth: [if present, specifies the available width in which to render the content],
	 *     availableHeight: [if present, specifies the available height in which to render the content],
	 *     data: [if present, specifies the data that is in context for this content],
	 *     isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
	 * }
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "legendItemBadgeTemplate", optionValue: any): void;

	/**
	 * Gets  whether to use the outer labels to identify the legend items.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "useOuterLabelsForLegend"): boolean;

	/**
	 * Sets whether to use the outer labels to identify the legend items.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "useOuterLabelsForLegend", optionValue: boolean): void;

	/**
	 * Gets  the text style for inner labels
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "textStyle"): string;

	/**
	 * Sets the text style for inner labels
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "textStyle", optionValue: string): void;

	/**
	 * Gets  the text style for outer labels
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelTextStyle"): string;

	/**
	 * Sets the text style for outer labels
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelTextStyle", optionValue: string): void;

	/**
	 * Gets  the thickness of outline around slices.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outlineThickness"): number;

	/**
	 * Sets the thickness of outline around slices.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outlineThickness", optionValue: number): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Gets  the brush used for the outer labels.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelTextColor"): string;

	/**
	 * Sets the brush used for the outer labels.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "outerLabelTextColor", optionValue: string): void;

	/**
	 * Gets  the brush used for the inner labels.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "textColor"): string;

	/**
	 * Sets the brush used for the inner labels.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "textColor", optionValue: string): void;

	/**
	 * The width of the chart.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "width"): number;

	/**
	 * The width of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "width", optionValue: number): void;

	/**
	 * The height of the chart.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "height"): number;

	/**
	 * The height of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "height", optionValue: number): void;

	/**
	 * Gets  template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "tooltipTemplate"): string;

	/**
	 * Sets template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;

	/**
	 * Gets  maximum number of displayed records in chart.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "maxRecCount"): number;

	/**
	 * Sets maximum number of displayed records in chart.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "maxRecCount", optionValue: number): void;

	/**
	 * Gets  a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Gets  url which is used for sending JSON on request for remote data.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets url which is used for sending JSON on request for remote data.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Event which is raised when a slice is clicked.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to igFunnelChart.
	 * Use ui.index to obtain index of clicked slice.
	 * Use ui.item to obtain reference to clicked slice item.
	 * Use ui.selected to check if slice became selected.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "sliceClicked"): SliceClickedEvent;

	/**
	 * Event which is raised when a slice is clicked.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to igFunnelChart.
	 * Use ui.index to obtain index of clicked slice.
	 * Use ui.item to obtain reference to clicked slice item.
	 * Use ui.selected to check if slice became selected.
	 *
	 * @optionValue Define event handler function.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "sliceClicked", optionValue: SliceClickedEvent): void;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "updateTooltip"): UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "updateTooltip", optionValue: UpdateTooltipEvent): void;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "hideTooltip"): HideTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igFunnelChart(optionLiteral: 'option', optionName: "hideTooltip", optionValue: HideTooltipEvent): void;
	igFunnelChart(options: IgFunnelChart): JQuery;
	igFunnelChart(optionLiteral: 'option', optionName: string): any;
	igFunnelChart(optionLiteral: 'option', options: IgFunnelChart): JQuery;
	igFunnelChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igFunnelChart(methodName: string, ...methodParams: any[]): any;
}
interface IgGridAppendRowsOnDemandLocale {
	/**
	 * Specifies caption text for the "load more data" button.
	 *
	 */
	loadMoreDataButtonText?: string;

	/**
	 * Option for IgGridAppendRowsOnDemandLocale
	 */
	[optionName: string]: any;
}

interface RowsRequestingEvent {
	(event: Event, ui: RowsRequestingEventUIParam): void;
}

interface RowsRequestingEventUIParam {
	/**
	 * Gets a reference to igGridAppendRowsOnDemand.
	 */
	owner?: any;

	/**
	 * Gets the next chunk index.
	 */
	chunkIndex?: number;

	/**
	 * Gets the chunk size.
	 */
	chunkSize?: number;
}

interface RowsRequestedEvent {
	(event: Event, ui: RowsRequestedEventUIParam): void;
}

interface RowsRequestedEventUIParam {
	/**
	 * Gets a reference to igGridAppendRowsOnDemand.
	 */
	owner?: any;

	/**
	 * Gets the next chunk index.
	 */
	chunkIndex?: number;

	/**
	 * Gets the chunk size.
	 */
	chunkSize?: number;

	/**
	 * Gets the requested rows.
	 */
	rows?: any[];
}

interface IgGridAppendRowsOnDemand {
	/**
	 * Defines local or remote type of appending rows on demand in igGrid
	 *
	 *
	 * Valid values:
	 * "remote" request data from the remote endpoint
	 * "local" loading data on the client-side
	 */
	type?: string;

	/**
	 * Default number of records per chunk
	 *
	 */
	chunkSize?: number;

	/**
	 * The property in the response that will hold the total number of records in the data source
	 *
	 */
	recordCountKey?: string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk size
	 *
	 */
	chunkSizeUrlKey?: string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk index
	 *
	 */
	chunkIndexUrlKey?: string;

	/**
	 * Initial chunk index position
	 *
	 */
	defaultChunkIndex?: number;

	/**
	 * Current chunk index position
	 *
	 */
	currentChunkIndex?: number;

	/**
	 * denotes the append rows on demand request method
	 *
	 *
	 * Valid values:
	 * "auto" new record will be appended to the grid while the user scrolls the scrollbar
	 * "button" a button will be rendered at the bottom of the grid. The user should press it to load more rows
	 */
	loadTrigger?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *             Specifies caption text for the "load more data" button. Use option [locale.loadMoreDataButtonText](ui.iggridappendrowsondemand#options:locale.loadMoreDataButtonText).
	 */
	loadMoreDataButtonText?: string;
	locale?: IgGridAppendRowsOnDemandLocale;

	/**
	 * Event fired before the rows are requested from the remote endpoint.
	 * Return false in order to cancel requesting of rows.
	 */
	rowsRequesting?: RowsRequestingEvent;

	/**
	 * Event fired after the requested rows are returned from the remote endpoint, but before grid data rebinds
	 */
	rowsRequested?: RowsRequestedEvent;

	/**
	 * Option for igGridAppendRowsOnDemand
	 */
	[optionName: string]: any;
}
interface IgGridAppendRowsOnDemandMethods {
	/**
	 * Destroys the append rows on demand widget
	 */
	destroy(): void;

	/**
	 * Loads the next chunk of data.
	 */
	nextChunk(): void;
}
interface JQuery {
	data(propertyName: "igGridAppendRowsOnDemand"): IgGridAppendRowsOnDemandMethods;
}

interface JQuery {
	igGridAppendRowsOnDemand(methodName: "destroy"): void;
	igGridAppendRowsOnDemand(methodName: "nextChunk"): void;

	/**
	 * Defines local or remote type of appending rows on demand in igGrid
	 *
	 */

	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Defines local or remote type of appending rows on demand in igGrid
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * Default number of records per chunk
	 *
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "chunkSize"): number;

	/**
	 * Default number of records per chunk
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "chunkSize", optionValue: number): void;

	/**
	 * The property in the response that will hold the total number of records in the data source
	 *
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "recordCountKey"): string;

	/**
	 * The property in the response that will hold the total number of records in the data source
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "recordCountKey", optionValue: string): void;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk size
	 *
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "chunkSizeUrlKey"): string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk size
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "chunkSizeUrlKey", optionValue: string): void;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk index
	 *
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "chunkIndexUrlKey"): string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk index
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "chunkIndexUrlKey", optionValue: string): void;

	/**
	 * Initial chunk index position
	 *
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "defaultChunkIndex"): number;

	/**
	 * Initial chunk index position
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "defaultChunkIndex", optionValue: number): void;

	/**
	 * Current chunk index position
	 *
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "currentChunkIndex"): number;

	/**
	 * Current chunk index position
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "currentChunkIndex", optionValue: number): void;

	/**
	 * Denotes the append rows on demand request method
	 *
	 */

	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "loadTrigger"): string;

	/**
	 * Denotes the append rows on demand request method
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "loadTrigger", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *             Gets caption text for the "load more data" button. Use option [locale.loadMoreDataButtonText](ui.iggridappendrowsondemand#options:locale.loadMoreDataButtonText).
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "loadMoreDataButtonText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *             Sets caption text for the "load more data" button. Use option [locale.loadMoreDataButtonText](ui.iggridappendrowsondemand#options:locale.loadMoreDataButtonText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "loadMoreDataButtonText", optionValue: string): void;
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "locale"): IgGridAppendRowsOnDemandLocale;
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "locale", optionValue: IgGridAppendRowsOnDemandLocale): void;

	/**
	 * Event fired before the rows are requested from the remote endpoint.
	 * Return false in order to cancel requesting of rows.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "rowsRequesting"): RowsRequestingEvent;

	/**
	 * Event fired before the rows are requested from the remote endpoint.
	 * Return false in order to cancel requesting of rows.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "rowsRequesting", optionValue: RowsRequestingEvent): void;

	/**
	 * Event fired after the requested rows are returned from the remote endpoint, but before grid data rebinds
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "rowsRequested"): RowsRequestedEvent;

	/**
	 * Event fired after the requested rows are returned from the remote endpoint, but before grid data rebinds
	 *
	 * @optionValue Define event handler function.
	 */
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: "rowsRequested", optionValue: RowsRequestedEvent): void;
	igGridAppendRowsOnDemand(options: IgGridAppendRowsOnDemand): JQuery;
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: string): any;
	igGridAppendRowsOnDemand(optionLiteral: 'option', options: IgGridAppendRowsOnDemand): JQuery;
	igGridAppendRowsOnDemand(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridAppendRowsOnDemand(methodName: string, ...methodParams: any[]): any;
}
interface IgGridCellMergingColumnSetting {
	/**
	 * Column index. This is a required property in every column setting if columnKey is not set.
	 *
	 */
	columnIndex?: number;

	/**
	 * Column key. This is a required property in every column setting if columnIndex is not set.
	 *
	 */
	columnKey?: string;

	/**
	 * Defines when merging should be applied.
	 *
	 *
	 * Valid values:
	 * "sorting" The column will only be merged when sorted
	 * "always" The column will always be merged
	 * "never" No merging will be applied
	 */
	mergeOn?: string;

	/**
	 * Defines the rules merging is based on.
	 *
	 *
	 * Valid values:
	 * "duplicate" Duplicate values in the column will be merged together.
	 * "null" Merging will be applied for each subsequent null value after a non-null value.
	 */
	mergeStrategy?: string|Function;

	/**
	 * Option for IgGridCellMergingColumnSetting
	 */
	[optionName: string]: any;
}

interface CellsMergingEvent {
	(event: Event, ui: CellsMergingEventUIParam): void;
}

interface CellsMergingEventUIParam {
	/**
	 * Gets reference to igGridCellMerging.
	 */
	owner?: any;

	/**
	 * Gets a reference to the row the merged group starts in if available in the DOM.
	 */
	row?: string;

	/**
	 * Gets the data index of the row the merged group starts in.
	 */
	rowIndex?: number;

	/**
	 * Gets the PK of the row the merged group starts in if available.
	 */
	rowId?: any;

	/**
	 * Gets the column key the merge is being executed for.
	 */
	columnKey?: string;

	/**
	 * Gets the first record in the merging chain that the merge is executed for.
	 */
	firstRecord?: any;

	/**
	 * Gets the next record in the merging chain that the merge is executed for.
	 */
	record?: any;
}

interface CellsMergedEvent {
	(event: Event, ui: CellsMergedEventUIParam): void;
}

interface CellsMergedEventUIParam {
	/**
	 * Gets reference to igGridCellMerging.
	 */
	owner?: any;

	/**
	 * Gets a reference to the row the merged group starts in if available in the DOM.
	 */
	row?: string;

	/**
	 * Gets the data index of the row the merged group starts in.
	 */
	rowIndex?: number;

	/**
	 * Gets the PK of the row the merged group starts in if available.
	 */
	rowId?: any;

	/**
	 * Gets the column key the merge is being executed for.
	 */
	columnKey?: string;

	/**
	 * Gets the first record in the merging chain that the merge is executed for.
	 */
	firstRecord?: any;

	/**
	 * Gets the last record in the merging chain that the merge is executed for.
	 */
	record?: any;

	/**
	 * Gets the total count of cells that were merged.
	 */
	count?: number;
}

interface IgGridCellMerging {
	/**
	 * Defines the type of merging.
	 *
	 *
	 * Valid values:
	 * "visual" the grid cells will be merged only visually
	 * "physical" the grid cell will be merged physically throughout rowspan
	 */
	mergeType?: string;

	/**
	 * Defines when merging should be applied.
	 *
	 *
	 * Valid values:
	 * "sorting" Only sorted columns will have merging applied
	 * "always" Merging will be applied to all columns always
	 * "never" No merging will be applied
	 */
	mergeOn?: string;

	/**
	 * Defines the rules merging is based on.
	 *
	 *
	 * Valid values:
	 * "duplicate" Duplicate values in the column will be merged together.
	 * "null" Merging will be applied for each subsequent null value after a non-null value.
	 */
	mergeStrategy?: string|Function;

	/**
	 * Defines the rules merging is based on.
	 *
	 *
	 * Valid values:
	 * "duplicate" Duplicate values in the column will be merged together.
	 * "null" Merging will be applied for each subsequent null value after a non-null value.
	 */
	rowMergeStrategy?: string|Function;

	/**
	 * Defines the whether the rows will be merged or not.
	 *
	 */
	mergeRows?: any;

	/**
	 * A list of column settings that specifies hiding options on a per column basis.
	 *
	 */
	columnSettings?: IgGridCellMergingColumnSetting[];

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	inherit?: boolean;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before a new merged cells group is created.
	 */
	cellsMerging?: CellsMergingEvent;
	cellsMerged?: CellsMergedEvent;

	/**
	 * Option for igGridCellMerging
	 */
	[optionName: string]: any;
}
interface IgGridCellMergingMethods {
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Removes all igGridCellMerging UI changes and destroys the widget
	 */
	destroy(): void;

	/**
	 * Merges the specified column unless it is already merged.
	 *
	 * @param column The column index or column key to merge.
	 * @param raiseEvents Specifies if the operation should raise merging-related events.
	 */
	mergeColumn(column: Object, raiseEvents: boolean): string;

	/**
	 * Restores the column to its unmerged state. Does nothing if the column is not merged.
	 *
	 * @param column The column index or column key to unmerge.
	 */
	unmergeColumn(column: Object): string;

	/**
	 * Returns the merge state of a column.
	 *
	 * @param column The column index or column key to get the state for.
	 */
	isMerged(column: Object): boolean;
	mergeRow(id: Object, fireEvents: Object): void;
	unmergeRow(id: Object, index: Object): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;
}
interface JQuery {
	data(propertyName: "igGridCellMerging"): IgGridCellMergingMethods;
}

interface JQuery {
	igGridCellMerging(methodName: "changeGlobalLanguage"): void;
	igGridCellMerging(methodName: "changeGlobalRegional"): void;
	igGridCellMerging(methodName: "destroy"): void;
	igGridCellMerging(methodName: "mergeColumn", column: Object, raiseEvents: boolean): string;
	igGridCellMerging(methodName: "unmergeColumn", column: Object): string;
	igGridCellMerging(methodName: "isMerged", column: Object): boolean;
	igGridCellMerging(methodName: "mergeRow", id: Object, fireEvents: Object): void;
	igGridCellMerging(methodName: "unmergeRow", id: Object, index: Object): void;
	igGridCellMerging(methodName: "changeLocale", $container: Object): void;

	/**
	 * Defines the type of merging.
	 *
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "mergeType"): string;

	/**
	 * Defines the type of merging.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "mergeType", optionValue: string): void;

	/**
	 * Defines when merging should be applied.
	 *
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "mergeOn"): string;

	/**
	 * Defines when merging should be applied.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "mergeOn", optionValue: string): void;

	/**
	 * Defines the rules merging is based on.
	 *
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "mergeStrategy"): string|Function;

	/**
	 * Defines the rules merging is based on.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "mergeStrategy", optionValue: string|Function): void;

	/**
	 * Defines the rules merging is based on.
	 *
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "rowMergeStrategy"): string|Function;

	/**
	 * Defines the rules merging is based on.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "rowMergeStrategy", optionValue: string|Function): void;

	/**
	 * Defines the whether the rows will be merged or not.
	 *
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "mergeRows"): any;

	/**
	 * Defines the whether the rows will be merged or not.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "mergeRows", optionValue: any): void;

	/**
	 * A list of column settings that specifies hiding options on a per column basis.
	 *
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "columnSettings"): IgGridCellMergingColumnSetting[];

	/**
	 * A list of column settings that specifies hiding options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridCellMergingColumnSetting[]): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridCellMerging(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before a new merged cells group is created.
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "cellsMerging"): CellsMergingEvent;

	/**
	 * Event fired before a new merged cells group is created.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridCellMerging(optionLiteral: 'option', optionName: "cellsMerging", optionValue: CellsMergingEvent): void;
	igGridCellMerging(optionLiteral: 'option', optionName: "cellsMerged"): CellsMergedEvent;
	igGridCellMerging(optionLiteral: 'option', optionName: "cellsMerged", optionValue: CellsMergedEvent): void;
	igGridCellMerging(options: IgGridCellMerging): JQuery;
	igGridCellMerging(optionLiteral: 'option', optionName: string): any;
	igGridCellMerging(optionLiteral: 'option', options: IgGridCellMerging): JQuery;
	igGridCellMerging(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridCellMerging(methodName: string, ...methodParams: any[]): any;
}
interface IgGridColumnFixingLocale {
	/**
	 * Specifies the tooltip text on the column fixing header icon when column is not fixed.
	 *
	 */
	headerFixButtonText?: string;

	/**
	 * Specifies the tooltip text on the column fixing header icon when column is not fixed.
	 *
	 */
	headerUnfixButtonText?: string;

	/**
	 * Text of the feature chooser button for fixing a currently unfixed column.
	 *
	 */
	featureChooserTextFixedColumn?: string;

	/**
	 * Text of the feature chooser button for unfixing a currently fixed column.
	 *
	 */
	featureChooserTextUnfixedColumn?: string;

	/**
	 * Option for IgGridColumnFixingLocale
	 */
	[optionName: string]: any;
}

interface IgGridColumnFixingColumnSetting {
	/**
	 * Identifies the grid column by key. Either key or index must be set in every column setting.
	 *
	 */
	columnKey?: string;

	/**
	 * Identifies the grid column by index. Either key or index must be set in every column setting.
	 *
	 */
	columnIndex?: number;

	/**
	 * Specifies whether the column can be fixed or not. If allow fixing is false, then the fixing pin will not be rendered for the column.
	 *
	 */
	allowFixing?: boolean;

	/**
	 * Specifies whether the column is initially fixed or not. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#initial-state) out for more information.
	 *
	 */
	isFixed?: boolean;

	/**
	 * Option for IgGridColumnFixingColumnSetting
	 */
	[optionName: string]: any;
}

interface ColumnFixingEvent {
	(event: Event, ui: ColumnFixingEventUIParam): void;
}

interface ColumnFixingEventUIParam {
	/**
	 * Gets the columnKey or the columnIndex.
	 */
	columnIdentifier?: any;

	/**
	 * Gets whether the header cell has children(use this argument ONLY when multi-column-headers are enabled).
	 */
	isGroupHeader?: boolean;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: any;
}

interface ColumnFixedEvent {
	(event: Event, ui: ColumnFixedEventUIParam): void;
}

interface ColumnFixedEventUIParam {
	/**
	 * Gets the columnKey or the columnIndex.
	 */
	columnIdentifier?: any;

	/**
	 * Gets whether header cell has children(use this argument ONLY when multi-column-headers are enabled).
	 */
	isGroupHeader?: boolean;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: any;
}

interface ColumnUnfixingEvent {
	(event: Event, ui: ColumnUnfixingEventUIParam): void;
}

interface ColumnUnfixingEventUIParam {
	/**
	 * Gets the columnKey or the columnIndex.
	 */
	columnIdentifier?: any;

	/**
	 * Gets whether header cell has children(use this argument ONLY when multi-column-headers are enabled).
	 */
	isGroupHeader?: boolean;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: any;
}

interface ColumnUnfixedEvent {
	(event: Event, ui: ColumnUnfixedEventUIParam): void;
}

interface ColumnUnfixedEventUIParam {
	/**
	 * Gets the columnKey or the columnIndex.
	 */
	columnIdentifier?: any;

	/**
	 * Gets whether header cell has children(use this argument ONLY when multi-column-headers are enabled).
	 */
	isGroupHeader?: boolean;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: any;
}

interface ColumnFixingRefusedEvent {
	(event: Event, ui: ColumnFixingRefusedEventUIParam): void;
}

interface ColumnFixingRefusedEventUIParam {
	/**
	 * Gets the columnKey or the columnIndex.
	 */
	columnIdentifier?: any;

	/**
	 * Gets whether header cell has children(use this argument ONLY when multi-column-headers are enabled).
	 */
	isGroupHeader?: boolean;

	/**
	 * Gets the error message describing the reason fixing has failed.
	 */
	errorMessage?: string;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: any;
}

interface ColumnUnfixingRefusedEvent {
	(event: Event, ui: ColumnUnfixingRefusedEventUIParam): void;
}

interface ColumnUnfixingRefusedEventUIParam {
	/**
	 * Gets the columnKey or the columnIndex.
	 */
	columnIdentifier?: any;

	/**
	 * Gets whether header cell has children(use this argument ONLY when multi-column-headers are enabled).
	 */
	isGroupHeader?: boolean;

	/**
	 * Gets the error message describing the reason fixing has failed.
	 */
	errorMessage?: string;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: any;
}

interface IgGridColumnFixing {
	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *             Specifies the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
	 */
	headerFixButtonText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Specifies the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
	 */
	headerUnfixButtonText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
	 */
	featureChooserTextFixedColumn?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
	 */
	featureChooserTextUnfixedColumn?: string;
	locale?: IgGridColumnFixingLocale;

	/**
	 * Specifies whether to show the column fixing buttons in header cells/feature chooser.
	 *
	 */
	showFixButtons?: boolean;

	/**
	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
	 *
	 */
	syncRowHeights?: boolean;

	/**
	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
	 *
	 */
	scrollDelta?: number;

	/**
	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
	 *
	 *
	 * Valid values:
	 * "left" Fixed columns are rendered on the left side of the main grid.
	 * "right" Fixed columns are rendered on the right side of the main grid.
	 */
	fixingDirection?: string;

	/**
	 * List of column settings that specifies custom column fixing options on a per column basis.
	 *
	 */
	columnSettings?: IgGridColumnFixingColumnSetting[];

	/**
	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
	 *
	 *
	 * Valid values:
	 * "string" The width can be set in pixels (px) and percentage (%).
	 * "number" The width can be set in pixels as a number.
	 */
	minimalVisibleAreaWidth?: string|number;

	/**
	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
	 *
	 */
	fixNondataColumns?: boolean;

	/**
	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
	 */
	populateDataRowsAttributes?: boolean;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is fired when column fixing operation is initiated.
	 */
	columnFixing?: ColumnFixingEvent;

	/**
	 * Event which is fired when column fixing operation is finished
	 */
	columnFixed?: ColumnFixedEvent;

	/**
	 * Event which is fired when column unfixing operation is initiated
	 */
	columnUnfixing?: ColumnUnfixingEvent;

	/**
	 * Event which is fired when column unfixing operation is done
	 */
	columnUnfixed?: ColumnUnfixedEvent;

	/**
	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
	 */
	columnFixingRefused?: ColumnFixingRefusedEvent;

	/**
	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
	 */
	columnUnfixingRefused?: ColumnUnfixingRefusedEvent;

	/**
	 * Option for igGridColumnFixing
	 */
	[optionName: string]: any;
}
interface IgGridColumnFixingMethods {
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Unfixes a column by specified column identifier - column key or column index.
	 *
	 * @param colIdentifier An identifier of the column to be unfixed - column index or column key.
	 * @param target Key of the column where the unfixed column should move to.
	 * @param after Specifies where the unfixed column should be rendered after or before the target column. This parameter is disregarded if there is no target column specified.
	 */
	unfixColumn(colIdentifier: Object, target?: string, after?: boolean): Object;

	/**
	 * Checks whether the heights of fixed and unfixed tables are equal - if not sync them. Similar check is made for heights of table rows.
	 */
	checkAndSyncHeights(): void;

	/**
	 * If the 'check' argument is set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. Similar check is made for heights of table rows. If the clearRowsHeights argument is set to true, clears rows heights before syncing them.
	 *
	 * @param check If set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. If this argument is set to false sync is performed regardless of the current heights.
	 * @param clearRowsHeights Clears row heigths for all visible rows.
	 */
	syncHeights(check?: boolean, clearRowsHeights?: boolean): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridcolumnfixing#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridcolumnfixing#options:language) or [locale](ui.iggridcolumnfixing#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Returns whether the column with the specified key is a column group header, when the [multi-column headers](http://www.igniteui.com/help/iggrid-multicolumnheaders-landingpage) feature is used.
	 *
	 * @param colKey The key of the column to perform the check for.
	 */
	isGroupHeader(colKey: string): boolean;

	/**
	 * Checks whether column fixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the unfixed area.
	 *
	 * @param columns Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
	 */
	checkFixingAllowed(columns: any[]): boolean;

	/**
	 * Checks whether unfixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the fixed area.
	 *
	 * @param columns Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
	 */
	checkUnfixingAllowed(columns: any[]): boolean;

	/**
	 * Fixes a column by specified column identifier - column index or column key.
	 *
	 * @param colIdentifier An identifier of the column to be fixed - column index or column key.
	 * @param target Key of the column where the fixed column should move to.
	 * @param after Specifies where the fixed column should be moved after or before the target column. This parameter is disregarded if there is no target column specified.
	 */
	fixColumn(colIdentifier: Object, target?: string, after?: boolean): Object;

	/**
	 * Fixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
	 */
	fixNonDataColumns(): void;

	/**
	 * This function is deprecated - use function fixNonDataColumns.
	 */
	fixDataSkippedColumns(): void;

	/**
	 * Unfixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
	 */
	unfixNonDataColumns(): void;

	/**
	 * This function is deprecated - use function unfixNonDataColumns.
	 */
	unfixDataSkippedColumns(): void;

	/**
	 * Unfixes all fixed columns.
	 */
	unfixAllColumns(): void;

	/**
	 * Syncs rows heights between two collections of rows.
	 *
	 * @param $trs An array of rows of the first(fixed/unfixed) container.
	 * @param $anotherRows An array of rows of the second(fixed/unfixed) container.
	 */
	syncRowsHeights($trs: any[], $anotherRows: any[]): void;

	/**
	 * Calculates widths of the fixed columns.
	 *
	 * @param fCols Array of grid columns. If not set then the total width of the fixed columns are returned.
	 * @param excludeNonDataColumns If set to true do not calculate the width of non-data fixed columns (like the row selector row numbering column).
	 * @param includeHidden If set to true calculates width of the hidden fixed columns (their initial width before hiding).
	 */
	getWidthOfFixedColumns(fCols?: any[], excludeNonDataColumns?: boolean, includeHidden?: boolean): number;

	/**
	 * Destroys the column fixing widget
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igGridColumnFixing"): IgGridColumnFixingMethods;
}

interface JQuery {
	igGridColumnFixing(methodName: "changeGlobalLanguage"): void;
	igGridColumnFixing(methodName: "changeGlobalRegional"): void;
	igGridColumnFixing(methodName: "unfixColumn", colIdentifier: Object, target?: string, after?: boolean): Object;
	igGridColumnFixing(methodName: "checkAndSyncHeights"): void;
	igGridColumnFixing(methodName: "syncHeights", check?: boolean, clearRowsHeights?: boolean): void;
	igGridColumnFixing(methodName: "changeLocale"): void;
	igGridColumnFixing(methodName: "isGroupHeader", colKey: string): boolean;
	igGridColumnFixing(methodName: "checkFixingAllowed", columns: any[]): boolean;
	igGridColumnFixing(methodName: "checkUnfixingAllowed", columns: any[]): boolean;
	igGridColumnFixing(methodName: "fixColumn", colIdentifier: Object, target?: string, after?: boolean): Object;
	igGridColumnFixing(methodName: "fixNonDataColumns"): void;
	igGridColumnFixing(methodName: "fixDataSkippedColumns"): void;
	igGridColumnFixing(methodName: "unfixNonDataColumns"): void;
	igGridColumnFixing(methodName: "unfixDataSkippedColumns"): void;
	igGridColumnFixing(methodName: "unfixAllColumns"): void;
	igGridColumnFixing(methodName: "syncRowsHeights", $trs: any[], $anotherRows: any[]): void;
	igGridColumnFixing(methodName: "getWidthOfFixedColumns", fCols?: any[], excludeNonDataColumns?: boolean, includeHidden?: boolean): number;
	igGridColumnFixing(methodName: "destroy"): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *             Gets the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "headerFixButtonText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *             Sets the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "headerFixButtonText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Gets the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "headerUnfixButtonText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Sets the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "headerUnfixButtonText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextFixedColumn"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextFixedColumn", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextUnfixedColumn"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextUnfixedColumn", optionValue: string): void;
	igGridColumnFixing(optionLiteral: 'option', optionName: "locale"): IgGridColumnFixingLocale;
	igGridColumnFixing(optionLiteral: 'option', optionName: "locale", optionValue: IgGridColumnFixingLocale): void;

	/**
	 * Gets whether to show the column fixing buttons in header cells/feature chooser.
	 *
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "showFixButtons"): boolean;

	/**
	 * Sets whether to show the column fixing buttons in header cells/feature chooser.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "showFixButtons", optionValue: boolean): void;

	/**
	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
	 *
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "syncRowHeights"): boolean;

	/**
	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "syncRowHeights", optionValue: boolean): void;

	/**
	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
	 *
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "scrollDelta"): number;

	/**
	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "scrollDelta", optionValue: number): void;

	/**
	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
	 *
	 */

	igGridColumnFixing(optionLiteral: 'option', optionName: "fixingDirection"): string;

	/**
	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridColumnFixing(optionLiteral: 'option', optionName: "fixingDirection", optionValue: string): void;

	/**
	 * List of column settings that specifies custom column fixing options on a per column basis.
	 *
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnSettings"): IgGridColumnFixingColumnSetting[];

	/**
	 * List of column settings that specifies custom column fixing options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridColumnFixingColumnSetting[]): void;

	/**
	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
	 *
	 */

	igGridColumnFixing(optionLiteral: 'option', optionName: "minimalVisibleAreaWidth"): string|number;

	/**
	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridColumnFixing(optionLiteral: 'option', optionName: "minimalVisibleAreaWidth", optionValue: string|number): void;

	/**
	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
	 *
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "fixNondataColumns"): boolean;

	/**
	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "fixNondataColumns", optionValue: boolean): void;

	/**
	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "populateDataRowsAttributes"): boolean;

	/**
	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "populateDataRowsAttributes", optionValue: boolean): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridColumnFixing(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridColumnFixing(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is fired when column fixing operation is initiated.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixing"): ColumnFixingEvent;

	/**
	 * Event which is fired when column fixing operation is initiated.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixing", optionValue: ColumnFixingEvent): void;

	/**
	 * Event which is fired when column fixing operation is finished
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixed"): ColumnFixedEvent;

	/**
	 * Event which is fired when column fixing operation is finished
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixed", optionValue: ColumnFixedEvent): void;

	/**
	 * Event which is fired when column unfixing operation is initiated
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixing"): ColumnUnfixingEvent;

	/**
	 * Event which is fired when column unfixing operation is initiated
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixing", optionValue: ColumnUnfixingEvent): void;

	/**
	 * Event which is fired when column unfixing operation is done
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixed"): ColumnUnfixedEvent;

	/**
	 * Event which is fired when column unfixing operation is done
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixed", optionValue: ColumnUnfixedEvent): void;

	/**
	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixingRefused"): ColumnFixingRefusedEvent;

	/**
	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixingRefused", optionValue: ColumnFixingRefusedEvent): void;

	/**
	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixingRefused"): ColumnUnfixingRefusedEvent;

	/**
	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixingRefused", optionValue: ColumnUnfixingRefusedEvent): void;
	igGridColumnFixing(options: IgGridColumnFixing): JQuery;
	igGridColumnFixing(optionLiteral: 'option', optionName: string): any;
	igGridColumnFixing(optionLiteral: 'option', options: IgGridColumnFixing): JQuery;
	igGridColumnFixing(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridColumnFixing(methodName: string, ...methodParams: any[]): any;
}
interface IgGridColumnMovingColumnSetting {
	/**
	 * Column key. This is a required property in every column setting if columnIndex is not set.
	 *
	 */
	columnKey?: string;

	/**
	 * Column index. Can be used in place of column key. The preferred way of populating a column setting is to always use the column keys as identifiers.
	 *
	 */
	columnIndex?: number;

	/**
	 * Allows the column to be moved.
	 *
	 */
	allowMoving?: boolean;

	/**
	 * Option for IgGridColumnMovingColumnSetting
	 */
	[optionName: string]: any;
}

interface IgGridColumnMovingLocale {
	/**
	 * Specifies the apply button text.
	 *
	 */
	movingDialogButtonApplyText?: string;

	/**
	 * Specifies the cancel button text.
	 *
	 */
	movingDialogButtonCancelText?: string;

	/**
	 * Specifies caption for each move down button in the column moving dialog.
	 *
	 */
	movingDialogCaptionButtonDesc?: string;

	/**
	 * Specifies caption for each move up button in the column moving dialog.
	 *
	 */
	movingDialogCaptionButtonAsc?: string;

	/**
	 * Specifies caption text for the column moving dialog.
	 *
	 */
	movingDialogCaptionText?: string;

	/**
	 * Specifies caption text for the feature chooser entry.
	 *
	 */
	movingDialogDisplayText?: string;

	/**
	 * Specifies text for drop tooltip in column moving dialog.
	 *
	 */
	movingDialogDropTooltipText?: string;

	/**
	 * Specifies title for close dialog button.
	 *
	 */
	movingDialogCloseButtonTitle?: string;

	/**
	 * Specifies caption for the move left dropdown button.
	 *
	 */
	dropDownMoveLeftText?: string;

	/**
	 * Specifies caption for the move right dropdown button.
	 *
	 */
	dropDownMoveRightText?: string;

	/**
	 * Specifies caption for the move first dropdown button.
	 *
	 */
	dropDownMoveFirstText?: string;

	/**
	 * Specifies caption for the move last dropdown button.
	 *
	 */
	dropDownMoveLastText?: string;

	/**
	 * Specifies tooltip text for the move indicator.
	 *
	 */
	movingToolTipMove?: string;

	/**
	 * Specifies caption text for the feature chooser submenu button.
	 *
	 */
	featureChooserSubmenuText?: string;

	/**
	 * Option for IgGridColumnMovingLocale
	 */
	[optionName: string]: any;
}

interface ColumnDragStartEvent {
	(event: Event, ui: ColumnDragStartEventUIParam): void;
}

interface ColumnDragStartEventUIParam {
	/**
	 * Gets the column key of the column being dragged.
	 */
	columnKey?: string;

	/**
	 * Gets the column index of the column being dragged.
	 */
	columnIndex?: number;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: string;

	/**
	 * Gets a reference to the orginal th being dragged.
	 */
	header?: string;

	/**
	 * Gets a reference to cloned DOM element that's actually being dragged.
	 */
	helper?: string;
}

interface ColumnDragEndEvent {
	(event: Event, ui: ColumnDragEndEventUIParam): void;
}

interface ColumnDragEndEventUIParam {
	/**
	 * Gets the column key of the column that was being dragged.
	 */
	columnKey?: string;

	/**
	 * Gets the column index of the column that was being dragged.
	 */
	columnIndex?: number;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: string;

	/**
	 * Gets a reference to the orginal th that was being dragged.
	 */
	header?: string;

	/**
	 * Gets a reference to cloned DOM element that was actually being dragged.
	 */
	helper?: string;
}

interface ColumnDragCanceledEvent {
	(event: Event, ui: ColumnDragCanceledEventUIParam): void;
}

interface ColumnDragCanceledEventUIParam {
	/**
	 * Gets the column key of the column that was being dragged.
	 */
	columnKey?: string;

	/**
	 * Gets the column index of the column that was being dragged.
	 */
	columnIndex?: number;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: string;

	/**
	 * Gets a reference to the orginal th being dragged.
	 */
	header?: string;

	/**
	 * Gets a reference to cloned DOM element that was actually being dragged.
	 */
	helper?: string;
}

interface ColumnMovingEvent {
	(event: Event, ui: ColumnMovingEventUIParam): void;
}

interface ColumnMovingEventUIParam {
	/**
	 * Gets the column key of the column that was being moved.
	 */
	columnKey?: string;

	/**
	 * Gets the column index of the column that was being moved.
	 */
	columnIndex?: number;

	/**
	 * Gets the new column index of the column that was being moved.
	 */
	targetIndex?: number;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: string;
}

interface ColumnMovedEvent {
	(event: Event, ui: ColumnMovedEventUIParam): void;
}

interface ColumnMovedEventUIParam {
	/**
	 * Gets the column key of the column that was moved.
	 */
	columnKey?: string;

	/**
	 * Gets the previous column index of the column that was moved.
	 */
	oldIndex?: number;

	/**
	 * Gets the new column index of the column that was being moved.
	 */
	newIndex?: number;

	/**
	 * Gets a reference to the widget.
	 */
	owner?: any;
}

interface MovingDialogOpeningEvent {
	(event: Event, ui: MovingDialogOpeningEventUIParam): void;
}

interface MovingDialogOpeningEventUIParam {
	/**
	 * Gets a reference to the widget.
	 */
	owner?: any;
}

interface MovingDialogOpenedEvent {
	(event: Event, ui: MovingDialogOpenedEventUIParam): void;
}

interface MovingDialogOpenedEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface MovingDialogDraggedEvent {
	(event: Event, ui: MovingDialogDraggedEventUIParam): void;
}

interface MovingDialogDraggedEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface MovingDialogClosingEvent {
	(event: Event, ui: MovingDialogClosingEventUIParam): void;
}

interface MovingDialogClosingEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface MovingDialogClosedEvent {
	(event: Event, ui: MovingDialogClosedEventUIParam): void;
}

interface MovingDialogClosedEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface MovingDialogContentsRenderingEvent {
	(event: Event, ui: MovingDialogContentsRenderingEventUIParam): void;
}

interface MovingDialogContentsRenderingEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface MovingDialogContentsRenderedEvent {
	(event: Event, ui: MovingDialogContentsRenderedEventUIParam): void;
}

interface MovingDialogContentsRenderedEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface MovingDialogMoveUpButtonPressedEvent {
	(event: Event, ui: MovingDialogMoveUpButtonPressedEventUIParam): void;
}

interface MovingDialogMoveUpButtonPressedEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface MovingDialogMoveDownButtonPressedEvent {
	(event: Event, ui: MovingDialogMoveDownButtonPressedEventUIParam): void;
}

interface MovingDialogMoveDownButtonPressedEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface MovingDialogDragColumnMovingEvent {
	(event: Event, ui: MovingDialogDragColumnMovingEventUIParam): void;
}

interface MovingDialogDragColumnMovingEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface MovingDialogDragColumnMovedEvent {
	(event: Event, ui: MovingDialogDragColumnMovedEventUIParam): void;
}

interface MovingDialogDragColumnMovedEventUIParam {
	/**
	 * Gets a reference to the ColumnMoving widget.
	 */
	owner?: any;
}

interface IgGridColumnMoving {
	/**
	 * A list of column settings that specifies moving options on a per column basis.
	 *
	 */
	columnSettings?: IgGridColumnMovingColumnSetting[];

	/**
	 * Specify the drag-and-drop mode for the feature
	 *
	 *
	 * Valid values:
	 * "immediate" Column headers will rearange as you drag with a space opening under the cursor for the header to be dropped on
	 * "deferred" A clone of the header dragged will be created and indicators will be shown between columns to help navigate the drop.
	 */
	mode?: string;

	/**
	 * Specify the way columns will be rearranged
	 *
	 *
	 * Valid values:
	 * "dom" Columns will be rearranged through dom manipulation
	 * "render" Columns will not be rearranged but the grid will be rendered again with the new column order. Please note this option is incompatible with immediate move mode.
	 */
	moveType?: string;

	/**
	 * Specifies if header cells should include an additional button that opens a moving helper dropdown.
	 *
	 */
	addMovingDropdown?: boolean;

	/**
	 * Specifies width of column moving dialog
	 *
	 */
	movingDialogWidth?: number;

	/**
	 * Specifies height of column moving dialog
	 *
	 */
	movingDialogHeight?: number;

	/**
	 * Specifies time in milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	movingDialogAnimationDuration?: number;

	/**
	 * Specifies the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
	 *
	 */
	movingAcceptanceTolerance?: number;

	/**
	 * Specifies the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
	 *
	 */
	movingScrollTolerance?: number;

	/**
	 * Specifies a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
	 *
	 */
	scrollSpeedMultiplier?: number;

	/**
	 * Specifies the length (in pixels) of each individual scroll operation
	 *
	 */
	scrollDelta?: number;

	/**
	 * Specifies whether the contents of the column being dragged will get hidden. The option is only
	 * relevant in immediate moving mode.
	 *
	 */
	hideHeaderContentsDuringDrag?: boolean;

	/**
	 * Specifies the opacity of the drag markup, while a column header is being dragged.
	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
	 * will be used with priority over this one.
	 *
	 */
	dragHelperOpacity?: number;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
	 */
	movingDialogCaptionButtonDesc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
	 */
	movingDialogCaptionButtonAsc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
	 */
	movingDialogCaptionText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
	 */
	movingDialogDisplayText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
	 */
	movingDialogDropTooltipText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
	 */
	dropDownMoveLeftText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
	 */
	dropDownMoveRightText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
	 */
	dropDownMoveFirstText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
	 */
	dropDownMoveLastText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
	 */
	movingToolTipMove?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
	 */
	featureChooserSubmenuText?: string;
	locale?: IgGridColumnMovingLocale;

	/**
	 * Specifies markup for drop tooltip in column moving dialog
	 *
	 */
	movingDialogDropTooltipMarkup?: string;

	/**
	 * Controls containment behavior of column moving dialog.
	 *
	 *                 owner  The dialog will be draggable only in the grid area
	 *                 window  The dialog will be draggable in the whole window area
	 */
	columnMovingDialogContainment?: string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	inherit?: boolean;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is fired when a drag operation begins on a column header
	 */
	columnDragStart?: ColumnDragStartEvent;

	/**
	 * Event which is fired when a drag operation ends on a column header
	 */
	columnDragEnd?: ColumnDragEndEvent;

	/**
	 * Event which is fired when a drag operation is canceled
	 */
	columnDragCanceled?: ColumnDragCanceledEvent;

	/**
	 * Event which is fired when a column moving operation is initiated
	 */
	columnMoving?: ColumnMovingEvent;

	/**
	 * Event which is fired when a column moving operation completes
	 */
	columnMoved?: ColumnMovedEvent;

	/**
	 * Event fired before the moving dialog is opened.
	 */
	movingDialogOpening?: MovingDialogOpeningEvent;

	/**
	 * Event fired after the column chooser is already opened.
	 */
	movingDialogOpened?: MovingDialogOpenedEvent;

	/**
	 * Event fired every time the moving dialog changes its position.
	 */
	movingDialogDragged?: MovingDialogDraggedEvent;

	/**
	 * Event fired before the moving dialog is closed.
	 */
	movingDialogClosing?: MovingDialogClosingEvent;

	/**
	 * Event fired after the moving dialog has been closed.
	 */
	movingDialogClosed?: MovingDialogClosedEvent;

	/**
	 * Event fired before the contents of the model dialog are rendered.
	 */
	movingDialogContentsRendering?: MovingDialogContentsRenderingEvent;

	/**
	 * Event fired after the contents of the model dialog are rendered.
	 */
	movingDialogContentsRendered?: MovingDialogContentsRenderedEvent;

	/**
	 * Event fired when move up button is pressed in the moving dialog
	 */
	movingDialogMoveUpButtonPressed?: MovingDialogMoveUpButtonPressedEvent;

	/**
	 * Event fired when move down button is pressed in the moving dialog
	 */
	movingDialogMoveDownButtonPressed?: MovingDialogMoveDownButtonPressedEvent;

	/**
	 * Event fired when column moving is initiated through dragging it in the moving dialog
	 */
	movingDialogDragColumnMoving?: MovingDialogDragColumnMovingEvent;

	/**
	 * Event fired when column moving is completed through dragging it in the moving dialog
	 */
	movingDialogDragColumnMoved?: MovingDialogDragColumnMovedEvent;

	/**
	 * Option for igGridColumnMoving
	 */
	[optionName: string]: any;
}
interface IgGridColumnMovingMethods {
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridcolumnmoving#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridcolumnmoving#options:language) or [locale](ui.iggridcolumnmoving#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Restoring overwritten functions
	 */
	destroy(): void;

	/**
	 * Moves a visible column at a specified place, in front or behind a target column or at a target index
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
	 * @param target An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
	 * @param after Specifies whether the column moved should be moved after or before the target column.
	 * @param inDom Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
	 * @param callback Specifies a custom function to be called when the column is moved.
	 */
	moveColumn(column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
}
interface JQuery {
	data(propertyName: "igGridColumnMoving"): IgGridColumnMovingMethods;
}

interface JQuery {
	igGridColumnMoving(methodName: "changeGlobalLanguage"): void;
	igGridColumnMoving(methodName: "changeGlobalRegional"): void;
	igGridColumnMoving(methodName: "changeLocale"): void;
	igGridColumnMoving(methodName: "destroy"): void;
	igGridColumnMoving(methodName: "moveColumn", column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;

	/**
	 * A list of column settings that specifies moving options on a per column basis.
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnSettings"): IgGridColumnMovingColumnSetting[];

	/**
	 * A list of column settings that specifies moving options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridColumnMovingColumnSetting[]): void;

	/**
	 * Specify the drag-and-drop mode for the feature
	 *
	 */

	igGridColumnMoving(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Specify the drag-and-drop mode for the feature
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridColumnMoving(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Specify the way columns will be rearranged
	 *
	 */

	igGridColumnMoving(optionLiteral: 'option', optionName: "moveType"): string;

	/**
	 * Specify the way columns will be rearranged
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridColumnMoving(optionLiteral: 'option', optionName: "moveType", optionValue: string): void;

	/**
	 * Gets if header cells should include an additional button that opens a moving helper dropdown.
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "addMovingDropdown"): boolean;

	/**
	 * Sets if header cells should include an additional button that opens a moving helper dropdown.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "addMovingDropdown", optionValue: boolean): void;

	/**
	 * Gets width of column moving dialog
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogWidth"): number;

	/**
	 * Sets width of column moving dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogWidth", optionValue: number): void;

	/**
	 * Gets height of column moving dialog
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogHeight"): number;

	/**
	 * Sets height of column moving dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogHeight", optionValue: number): void;

	/**
	 * Gets time in milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogAnimationDuration"): number;

	/**
	 * Sets time in milliseconds for animation duration to show/hide modal dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogAnimationDuration", optionValue: number): void;

	/**
	 * Gets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingAcceptanceTolerance"): number;

	/**
	 * Sets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingAcceptanceTolerance", optionValue: number): void;

	/**
	 * Gets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingScrollTolerance"): number;

	/**
	 * Sets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingScrollTolerance", optionValue: number): void;

	/**
	 * Gets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "scrollSpeedMultiplier"): number;

	/**
	 * Sets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "scrollSpeedMultiplier", optionValue: number): void;

	/**
	 * Gets the length (in pixels) of each individual scroll operation
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "scrollDelta"): number;

	/**
	 * Sets the length (in pixels) of each individual scroll operation
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "scrollDelta", optionValue: number): void;

	/**
	 * Gets whether the contents of the column being dragged will get hidden. The option is only
	 * relevant in immediate moving mode.
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "hideHeaderContentsDuringDrag"): boolean;

	/**
	 * Sets whether the contents of the column being dragged will get hidden. The option is only
	 * relevant in immediate moving mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "hideHeaderContentsDuringDrag", optionValue: boolean): void;

	/**
	 * Gets the opacity of the drag markup, while a column header is being dragged.
	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
	 * will be used with priority over this one.
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dragHelperOpacity"): number;

	/**
	 * Sets the opacity of the drag markup, while a column header is being dragged.
	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
	 * will be used with priority over this one.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dragHelperOpacity", optionValue: number): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonDesc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonDesc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonAsc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonAsc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDisplayText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDisplayText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLeftText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLeftText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveRightText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveRightText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveFirstText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveFirstText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLastText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLastText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingToolTipMove"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingToolTipMove", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "featureChooserSubmenuText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "featureChooserSubmenuText", optionValue: string): void;
	igGridColumnMoving(optionLiteral: 'option', optionName: "locale"): IgGridColumnMovingLocale;
	igGridColumnMoving(optionLiteral: 'option', optionName: "locale", optionValue: IgGridColumnMovingLocale): void;

	/**
	 * Gets markup for drop tooltip in column moving dialog
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipMarkup"): string;

	/**
	 * Sets markup for drop tooltip in column moving dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipMarkup", optionValue: string): void;

	/**
	 * Controls containment behavior of column moving dialog.
	 *
	 *                 owner  The dialog will be draggable only in the grid area
	 *                 window  The dialog will be draggable in the whole window area
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnMovingDialogContainment"): string;

	/**
	 * Controls containment behavior of column moving dialog.
	 *
	 *                 owner  The dialog will be draggable only in the grid area
	 *                 window  The dialog will be draggable in the whole window area
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnMovingDialogContainment", optionValue: string): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridColumnMoving(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridColumnMoving(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is fired when a drag operation begins on a column header
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragStart"): ColumnDragStartEvent;

	/**
	 * Event which is fired when a drag operation begins on a column header
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragStart", optionValue: ColumnDragStartEvent): void;

	/**
	 * Event which is fired when a drag operation ends on a column header
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragEnd"): ColumnDragEndEvent;

	/**
	 * Event which is fired when a drag operation ends on a column header
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragEnd", optionValue: ColumnDragEndEvent): void;

	/**
	 * Event which is fired when a drag operation is canceled
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragCanceled"): ColumnDragCanceledEvent;

	/**
	 * Event which is fired when a drag operation is canceled
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragCanceled", optionValue: ColumnDragCanceledEvent): void;

	/**
	 * Event which is fired when a column moving operation is initiated
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnMoving"): ColumnMovingEvent;

	/**
	 * Event which is fired when a column moving operation is initiated
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnMoving", optionValue: ColumnMovingEvent): void;

	/**
	 * Event which is fired when a column moving operation completes
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnMoved"): ColumnMovedEvent;

	/**
	 * Event which is fired when a column moving operation completes
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "columnMoved", optionValue: ColumnMovedEvent): void;

	/**
	 * Event fired before the moving dialog is opened.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpening"): MovingDialogOpeningEvent;

	/**
	 * Event fired before the moving dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpening", optionValue: MovingDialogOpeningEvent): void;

	/**
	 * Event fired after the column chooser is already opened.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpened"): MovingDialogOpenedEvent;

	/**
	 * Event fired after the column chooser is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpened", optionValue: MovingDialogOpenedEvent): void;

	/**
	 * Event fired every time the moving dialog changes its position.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragged"): MovingDialogDraggedEvent;

	/**
	 * Event fired every time the moving dialog changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragged", optionValue: MovingDialogDraggedEvent): void;

	/**
	 * Event fired before the moving dialog is closed.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosing"): MovingDialogClosingEvent;

	/**
	 * Event fired before the moving dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosing", optionValue: MovingDialogClosingEvent): void;

	/**
	 * Event fired after the moving dialog has been closed.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosed"): MovingDialogClosedEvent;

	/**
	 * Event fired after the moving dialog has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosed", optionValue: MovingDialogClosedEvent): void;

	/**
	 * Event fired before the contents of the model dialog are rendered.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendering"): MovingDialogContentsRenderingEvent;

	/**
	 * Event fired before the contents of the model dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendering", optionValue: MovingDialogContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the model dialog are rendered.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendered"): MovingDialogContentsRenderedEvent;

	/**
	 * Event fired after the contents of the model dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendered", optionValue: MovingDialogContentsRenderedEvent): void;

	/**
	 * Event fired when move up button is pressed in the moving dialog
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveUpButtonPressed"): MovingDialogMoveUpButtonPressedEvent;

	/**
	 * Event fired when move up button is pressed in the moving dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveUpButtonPressed", optionValue: MovingDialogMoveUpButtonPressedEvent): void;

	/**
	 * Event fired when move down button is pressed in the moving dialog
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveDownButtonPressed"): MovingDialogMoveDownButtonPressedEvent;

	/**
	 * Event fired when move down button is pressed in the moving dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveDownButtonPressed", optionValue: MovingDialogMoveDownButtonPressedEvent): void;

	/**
	 * Event fired when column moving is initiated through dragging it in the moving dialog
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoving"): MovingDialogDragColumnMovingEvent;

	/**
	 * Event fired when column moving is initiated through dragging it in the moving dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoving", optionValue: MovingDialogDragColumnMovingEvent): void;

	/**
	 * Event fired when column moving is completed through dragging it in the moving dialog
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoved"): MovingDialogDragColumnMovedEvent;

	/**
	 * Event fired when column moving is completed through dragging it in the moving dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoved", optionValue: MovingDialogDragColumnMovedEvent): void;
	igGridColumnMoving(options: IgGridColumnMoving): JQuery;
	igGridColumnMoving(optionLiteral: 'option', optionName: string): any;
	igGridColumnMoving(optionLiteral: 'option', options: IgGridColumnMoving): JQuery;
	igGridColumnMoving(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridColumnMoving(methodName: string, ...methodParams: any[]): any;
}
interface IgPopoverHeaderTemplate {
	/**
	 * Controls whether the popover renders a functional close button
	 */
	closeButton?: boolean;

	/**
	 * Sets the content for the popover header
	 */
	title?: string;

	/**
	 * Option for IgPopoverHeaderTemplate
	 */
	[optionName: string]: any;
}

interface ShowingEvent {
	(event: Event, ui: ShowingEventUIParam): void;
}

interface ShowingEventUIParam {
	/**
	 * Gets the element the popover will show for.
	 */
	element?: string;

	/**
	 * Gets or set the content to be shown as a string.
	 */
	content?: string;

	/**
	 * Gets the popover element showing.
	 */
	popover?: string;

	/**
	 * Gets a reference to the %%WidgetName%% widget.
	 */
	owner?: any;
}

interface ShownEvent {
	(event: Event, ui: ShownEventUIParam): void;
}

interface ShownEventUIParam {
	/**
	 * Gets the element the popover showed for.
	 */
	element?: string;

	/**
	 * Gets the content that was shown as a string.
	 */
	content?: string;

	/**
	 * Gets the popover element showing.
	 */
	popover?: string;

	/**
	 * Gets a reference to the %%WidgetName%% widget.
	 */
	owner?: any;
}

interface HidingEvent {
	(event: Event, ui: HidingEventUIParam): void;
}

interface HidingEventUIParam {
	/**
	 * Gets the element the popover will hide for.
	 */
	element?: string;

	/**
	 * Gets the current content displayed in the popover as a string.
	 */
	content?: string;

	/**
	 * Gets the popover element hiding.
	 */
	popover?: string;

	/**
	 * Gets reference to the %%WidgetName%% widget.
	 */
	owner?: any;
}

interface HiddenEvent {
	(event: Event, ui: HiddenEventUIParam): void;
}

interface HiddenEventUIParam {
	/**
	 * Gets the element the popover is hidden for.
	 */
	element?: string;

	/**
	 * Gets the content displayed in the popover as a string.
	 */
	content?: string;

	/**
	 * Gets the popover element hidden.
	 */
	popover?: string;

	/**
	 * Gets reference to the %%WidgetName%% widget.
	 */
	owner?: any;
}

interface IgGridFeatureChooserPopover {
	gridId?: string;
	targetButton?: any;
	closeOnBlur?: boolean;
	containment?: any;

	/**
	 * controls the direction in which the control shows relative to the target element
	 *
	 *
	 * Valid values:
	 * "auto" lets the control show on the side where enough space is available with the priority specified by the [directionPriority](ui.%%WidgetNameLowered%%#options:directionPriority) property
	 * "left" shows popover on the left side of the target element
	 * "right" shows popover on the right side of the target element
	 * "top" shows popover on the top of the target element
	 * "bottom" shows popover on the bottom of the target element
	 */
	direction?: string;

	/**
	 * Controls the priority in which the control searches for space to show relative to the target element.
	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
	 *
	 */
	directionPriority?: any[];

	/**
	 * controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
	 *
	 *
	 * Valid values:
	 * "auto" lets the control choose a position depending on available space with the following priority balanced > end > start
	 * "balanced" the popover is positioned at the middle of the target element
	 * "start" the popover is positioned at the beginning of the target element
	 * "end" the popover is positioned at the end of the target element
	 */
	position?: string;

	/**
	 * defines width for the popover. leave null for auto.
	 *
	 */
	width?: number|string;

	/**
	 * defines height for the popover. leave null for auto
	 *
	 */
	height?: number|string;

	/**
	 * defines width the popover won't go under the value even if no specific one is set.
	 *
	 */
	minWidth?: number|string;

	/**
	 * defines width the popover won't exceed even if no specific one is set.
	 *
	 */
	maxWidth?: number|string;

	/**
	 * defines height the popover won't exceed even if no specific one is set.
	 *
	 */
	maxHeight?: number|string;

	/**
	 * Sets the time popover fades in and out when showing/hiding
	 *
	 */
	animationDuration?: number;

	/**
	 * sets the content for the popover container. If left null the content will be get from the target.
	 *
	 *
	 * Valid values:
	 * "string" String content of the popover container
	 * "function" Function which is a callback that should return the content. Use the 'this' value to access the target DOM element.
	 */
	contentTemplate?: string|Function;

	/**
	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
	 *
	 */
	selectors?: string;

	/**
	 * Sets the content for the popover header
	 *
	 */
	headerTemplate?: IgPopoverHeaderTemplate;

	/**
	 * sets the event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
	 *
	 *
	 * Valid values:
	 * "mouseenter" the popover is shown on mouse enter in the target element
	 * "click" the popover is shown on click on the target element
	 * "focus" the popover is shown on focusing the target element
	 */
	showOn?: string;

	/**
	 * Controls where the popover DOM should be attached to.
	 *
	 *
	 * Valid values:
	 * "string" A valid jQuery selector for the element
	 * "object" A reference to the parent jQuery object
	 */
	appendTo?: string|Object;

	/**
	 * Event fired before popover is shown.
	 */
	showing?: ShowingEvent;

	/**
	 * Event fired after popover is shown.
	 */
	shown?: ShownEvent;

	/**
	 * Event fired before popover is hidden.
	 */
	hiding?: HidingEvent;

	/**
	 * Event fired after popover is hidden.
	 */
	hidden?: HiddenEvent;

	/**
	 * Option for igGridFeatureChooserPopover
	 */
	[optionName: string]: any;
}
interface IgGridFeatureChooserPopoverMethods {
	isShown(): void;
	registerElements(elements: Object): void;
	destroy(): void;

	/**
	 * Returns the ID of the element the popover is attached to
	 */
	id(): string;

	/**
	 * Returns the container for the popover contents
	 */
	container(): Object;

	/**
	 * Shows the popover for the specified target
	 *
	 * @param trg The element to show popover for.
	 * @param content The string to set for the popover to show.
	 */
	show(trg?: Element, content?: string): void;

	/**
	 * Hides the popover for the specified target
	 */
	hide(): void;

	/**
	 * Gets the currently set content for the popover container
	 */
	getContent(): string;

	/**
	 * Sets the content for the popover container
	 *
	 * @param newCnt The popover content to set.
	 */
	setContent(newCnt: string): void;

	/**
	 * Gets the popover current target
	 */
	target(): Object;

	/**
	 * Gets the current coordinates of the popover
	 */
	getCoordinates(): Object;

	/**
	 * Sets the popover to specific coordinates.
	 *
	 * @param pos The popover coordinates in pixels.
	 */
	setCoordinates(pos: Object): void;
}
interface JQuery {
	data(propertyName: "igGridFeatureChooserPopover"): IgGridFeatureChooserPopoverMethods;
}

interface FeatureChooserRenderingEvent {
	(event: Event, ui: FeatureChooserRenderingEventUIParam): void;
}

interface FeatureChooserRenderingEventUIParam {}

interface FeatureChooserRenderedEvent {
	(event: Event, ui: FeatureChooserRenderedEventUIParam): void;
}

interface FeatureChooserRenderedEventUIParam {}

interface FeatureChooserDropDownOpeningEvent {
	(event: Event, ui: FeatureChooserDropDownOpeningEventUIParam): void;
}

interface FeatureChooserDropDownOpeningEventUIParam {}

interface FeatureChooserDropDownOpenedEvent {
	(event: Event, ui: FeatureChooserDropDownOpenedEventUIParam): void;
}

interface FeatureChooserDropDownOpenedEventUIParam {}

interface MenuTogglingEvent {
	(event: Event, ui: MenuTogglingEventUIParam): void;
}

interface MenuTogglingEventUIParam {}

interface FeatureTogglingEvent {
	(event: Event, ui: FeatureTogglingEventUIParam): void;
}

interface FeatureTogglingEventUIParam {}

interface FeatureToggledEvent {
	(event: Event, ui: FeatureToggledEventUIParam): void;
}

interface FeatureToggledEventUIParam {}

interface IgGridFeatureChooser {
	dropDownWidth?: any;
	animationDuration?: number;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;
	featureChooserRendering?: FeatureChooserRenderingEvent;
	featureChooserRendered?: FeatureChooserRenderedEvent;
	featureChooserDropDownOpening?: FeatureChooserDropDownOpeningEvent;
	featureChooserDropDownOpened?: FeatureChooserDropDownOpenedEvent;
	menuToggling?: MenuTogglingEvent;
	featureToggling?: FeatureTogglingEvent;
	featureToggled?: FeatureToggledEvent;

	/**
	 * Option for igGridFeatureChooser
	 */
	[optionName: string]: any;
}
interface IgGridFeatureChooserMethods {
	shouldShowFeatureIcon(key: Object): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridfeaturechooser#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridfeaturechooser#options:language) or [locale](ui.iggridfeaturechooser#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Show feature chooser dialog by the specified column key
	 *
	 * @param columnKey Key of the column that should be shown.
	 */
	showDropDown(columnKey: string): void;

	/**
	 * Hide feature chooser dialog by column key
	 *
	 * @param columnKey Key of the column that should be hidden.
	 */
	hideDropDown(columnKey: string): void;

	/**
	 * Get jQuery representation of the div holding dropdown for the specified columnKey
	 *
	 * @param columnKey Key of the column
	 */
	getDropDownByColumnKey(columnKey: string): void;

	/**
	 * Show/hide feature chooser dialog by column key
	 *
	 * @param columnKey Key of the column that should be shown/hidden.
	 */
	toggleDropDown(columnKey: string): void;
	destroy(e: Object, args: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igGridFeatureChooser"): IgGridFeatureChooserMethods;
}

interface JQuery {
	igGridFeatureChooserPopover(methodName: "isShown"): void;
	igGridFeatureChooserPopover(methodName: "registerElements", elements: Object): void;
	igGridFeatureChooserPopover(methodName: "destroy"): void;
	igGridFeatureChooserPopover(methodName: "id"): string;
	igGridFeatureChooserPopover(methodName: "container"): Object;
	igGridFeatureChooserPopover(methodName: "show", trg?: Element, content?: string): void;
	igGridFeatureChooserPopover(methodName: "hide"): void;
	igGridFeatureChooserPopover(methodName: "getContent"): string;
	igGridFeatureChooserPopover(methodName: "setContent", newCnt: string): void;
	igGridFeatureChooserPopover(methodName: "target"): Object;
	igGridFeatureChooserPopover(methodName: "getCoordinates"): Object;
	igGridFeatureChooserPopover(methodName: "setCoordinates", pos: Object): void;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "gridId"): string;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "gridId", optionValue: string): void;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "targetButton"): any;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "targetButton", optionValue: any): void;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "closeOnBlur"): boolean;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "closeOnBlur", optionValue: boolean): void;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "containment"): any;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "containment", optionValue: any): void;

	/**
	 * Controls the direction in which the control shows relative to the target element
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "direction"): string;

	/**
	 * Controls the direction in which the control shows relative to the target element
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "direction", optionValue: string): void;

	/**
	 * Controls the priority in which the control searches for space to show relative to the target element.
	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
	 *
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "directionPriority"): any[];

	/**
	 * Controls the priority in which the control searches for space to show relative to the target element.
	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "directionPriority", optionValue: any[]): void;

	/**
	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "position"): string;

	/**
	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "position", optionValue: string): void;

	/**
	 * Defines width for the popover. leave null for auto.
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "width"): number|string;

	/**
	 * Defines width for the popover. leave null for auto.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "width", optionValue: number|string): void;

	/**
	 * Defines height for the popover. leave null for auto
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "height"): number|string;

	/**
	 * Defines height for the popover. leave null for auto
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "height", optionValue: number|string): void;

	/**
	 * Defines width the popover won't go under the value even if no specific one is set.
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "minWidth"): number|string;

	/**
	 * Defines width the popover won't go under the value even if no specific one is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "minWidth", optionValue: number|string): void;

	/**
	 * Defines width the popover won't exceed even if no specific one is set.
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "maxWidth"): number|string;

	/**
	 * Defines width the popover won't exceed even if no specific one is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "maxWidth", optionValue: number|string): void;

	/**
	 * Defines height the popover won't exceed even if no specific one is set.
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "maxHeight"): number|string;

	/**
	 * Defines height the popover won't exceed even if no specific one is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "maxHeight", optionValue: number|string): void;

	/**
	 * The time popover fades in and out when showing/hiding
	 *
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "animationDuration"): number;

	/**
	 * Sets the time popover fades in and out when showing/hiding
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;

	/**
	 * The content for the popover container. If left null the content will be get from the target.
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "contentTemplate"): string|Function;

	/**
	 * Sets the content for the popover container. If left null the content will be get from the target.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "contentTemplate", optionValue: string|Function): void;

	/**
	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
	 *
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "selectors"): string;

	/**
	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "selectors", optionValue: string): void;

	/**
	 * The content for the popover header
	 *
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "headerTemplate"): IgPopoverHeaderTemplate;

	/**
	 * Sets the content for the popover header
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "headerTemplate", optionValue: IgPopoverHeaderTemplate): void;

	/**
	 * The event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "showOn"): string;

	/**
	 * Sets the event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "showOn", optionValue: string): void;

	/**
	 * Controls where the popover DOM should be attached to.
	 *
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "appendTo"): string|Object;

	/**
	 * Controls where the popover DOM should be attached to.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "appendTo", optionValue: string|Object): void;

	/**
	 * Event fired before popover is shown.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "showing"): ShowingEvent;

	/**
	 * Event fired before popover is shown.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "showing", optionValue: ShowingEvent): void;

	/**
	 * Event fired after popover is shown.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "shown"): ShownEvent;

	/**
	 * Event fired after popover is shown.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "shown", optionValue: ShownEvent): void;

	/**
	 * Event fired before popover is hidden.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "hiding"): HidingEvent;

	/**
	 * Event fired before popover is hidden.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "hiding", optionValue: HidingEvent): void;

	/**
	 * Event fired after popover is hidden.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "hidden"): HiddenEvent;

	/**
	 * Event fired after popover is hidden.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "hidden", optionValue: HiddenEvent): void;
	igGridFeatureChooserPopover(options: IgGridFeatureChooserPopover): JQuery;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: string): any;
	igGridFeatureChooserPopover(optionLiteral: 'option', options: IgGridFeatureChooserPopover): JQuery;
	igGridFeatureChooserPopover(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridFeatureChooserPopover(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igGridFeatureChooser(methodName: "shouldShowFeatureIcon", key: Object): void;
	igGridFeatureChooser(methodName: "changeLocale"): void;
	igGridFeatureChooser(methodName: "showDropDown", columnKey: string): void;
	igGridFeatureChooser(methodName: "hideDropDown", columnKey: string): void;
	igGridFeatureChooser(methodName: "getDropDownByColumnKey", columnKey: string): void;
	igGridFeatureChooser(methodName: "toggleDropDown", columnKey: string): void;
	igGridFeatureChooser(methodName: "destroy", e: Object, args: Object): void;
	igGridFeatureChooser(methodName: "changeGlobalLanguage"): void;
	igGridFeatureChooser(methodName: "changeGlobalRegional"): void;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "dropDownWidth"): any;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "dropDownWidth", optionValue: any): void;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "animationDuration"): number;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igGridFeatureChooser(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFeatureChooser(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridFeatureChooser(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFeatureChooser(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridFeatureChooser(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFeatureChooser(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserRendering"): FeatureChooserRenderingEvent;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserRendering", optionValue: FeatureChooserRenderingEvent): void;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserRendered"): FeatureChooserRenderedEvent;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserRendered", optionValue: FeatureChooserRenderedEvent): void;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserDropDownOpening"): FeatureChooserDropDownOpeningEvent;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserDropDownOpening", optionValue: FeatureChooserDropDownOpeningEvent): void;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserDropDownOpened"): FeatureChooserDropDownOpenedEvent;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserDropDownOpened", optionValue: FeatureChooserDropDownOpenedEvent): void;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "menuToggling"): MenuTogglingEvent;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "menuToggling", optionValue: MenuTogglingEvent): void;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureToggling"): FeatureTogglingEvent;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureToggling", optionValue: FeatureTogglingEvent): void;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureToggled"): FeatureToggledEvent;
	igGridFeatureChooser(optionLiteral: 'option', optionName: "featureToggled", optionValue: FeatureToggledEvent): void;
	igGridFeatureChooser(options: IgGridFeatureChooser): JQuery;
	igGridFeatureChooser(optionLiteral: 'option', optionName: string): any;
	igGridFeatureChooser(optionLiteral: 'option', options: IgGridFeatureChooser): JQuery;
	igGridFeatureChooser(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridFeatureChooser(methodName: string, ...methodParams: any[]): any;
}
interface IgGridFilteringColumnSettingDefaultExpressions {
	/**
	 * Option for IgGridFilteringColumnSettingDefaultExpressions
	 */
	[optionName: string]: any;
}

interface IgGridFilteringColumnSetting {
	/**
	 * Identifies the grid column by key. Either key or index must be set in every column setting.
	 *
	 */
	columnKey?: string;

	/**
	 * Specifies the type of editor to use for the column.
	 *
	 *
	 * Valid values:
	 * "text" An igTextEditor will be created
	 * "mask" An igMaskEditor will be created
	 * "date" An igDateEditor will be created
	 * "datepicker" An igDatePicker will be created
	 * "timepicker" An igTimePikcer will be created
	 * "numeric" An igNumericEditor will be created
	 * "checkbox" An igCheckboxEditor will be created
	 * "currency" An igCurrencyEditor will be created
	 * "percent" An igPercentEditor will be created
	 * "combo" An igCombo editor is created. Both the JS and CSS files used by ui.igCombo should be available.
	 * "rating" An igRating editor is created. Both the JS and CSS files used by ui.igRating should be available.
	 */
	editorType?: string;

	/**
	 * Specifies а custom editor provider instance. More information about editor providers can be found [here](http://www.igniteui.com/help/implementing-custom-editor-provider) and [here](http://www.igniteui.com/help/working-with-combo-editor-provider).
	 * It should either extend $.ig.EditorProvider or have definitions for the following methods:
	 * $.ig.EditorProvider = $.ig.EditorProvider|| $.ig.EditorProvider.extend({
	 * createEditor: function (callbacks, key, editorOptions, tabIndex, format, element) {},
	 * attachErrorEvents: function (errorShowing, errorShown, errorHidden) {},
	 * getEditor: function () {},
	 * refreshValue: function () {},
	 * getValue: function () {},
	 * setValue: function (val) {},
	 * setSize: function (width, height) {},
	 * setFocus: function () {},
	 * removeFromParent: function () {},
	 * destroy: function () {},
	 * validator: function () {},
	 * validate: function (noLabel) {},
	 * isValid: function () {}
	 * });
	 *
	 */
	editorProvider?: any;

	/**
	 * Specifies options to initialize the corresponding editor with.
	 *
	 */
	editorOptions?: any;

	/**
	 * Identifies the grid column by index. Either key or index must be set in every column setting.
	 *
	 */
	columnIndex?: number;

	/**
	 * Enables/disables filtering for the column.
	 *
	 */
	allowFiltering?: boolean;

	/**
	 * Initial filtering condition for the column.
	 *
	 *
	 * Valid values:
	 * "empty"
	 * "notEmpty"
	 * "null"
	 * "notNull"
	 * "equals"
	 * "doesNotEqual"
	 * "startsWith"
	 * "contains"
	 * "doesNotContain"
	 * "endsWith"
	 * "greaterThan"
	 * "lessThan"
	 * "greaterThanOrEqualTo"
	 * "lessThanOrEqualTo"
	 * "true"
	 * "false"
	 * "on"
	 * "notOn"
	 * "before"
	 * "after"
	 * "today"
	 * "yesterday"
	 * "thisMonth"
	 * "lastMonth"
	 * "nextMonth"
	 * "thisYear"
	 * "nextYear"
	 * "lastYear"
	 * "at"
	 * "notAt"
	 * "atBefore"
	 * "atAfter"
	 */
	condition?: string|boolean;

	/**
	 * An array of strings that determine which [conditions](ui.iggridfiltering#options:columnSettings.condition) to display for this column.
	 *
	 */
	conditionList?: any[];

	/**
	 * Initial filtering expressions - if set they will be applied on initialization together with the preset [condition](ui.iggridfiltering#options:columnSettings.condition).
	 *
	 */
	defaultExpressions?: IgGridFilteringColumnSettingDefaultExpressions;

	/**
	 * An object used to specify custom filtering conditions as objects for this column.
	 *
	 * labelText  The label as it will appear in the column's condition dropdown.
	 * expressionText  The text to display in the editor when requireExpr is false.
	 * requireExpr  If this condition requires the user to input a filtering expression.
	 * filterImgIcon  Class applied to the dropdown item when in simple mode.
	 * filterFunc  The custom comparing filter function. Signature: function (value, expression, dataType, ignoreCase, preciseDateFormat).
	 */
	customConditions?: any;

	/**
	 * Option for IgGridFilteringColumnSetting
	 */
	[optionName: string]: any;
}

interface IgGridFilteringLocale {
	/**
	 * StartsWith null text that will be used for the filter editors.
	 *
	 */
	startsWithNullText?: string;

	/**
	 * EndsWith null text that will be used for the filter editors.
	 *
	 */
	endsWithNullText?: string;

	/**
	 * Contains null text that will be used for the filter editors.
	 *
	 */
	containsNullText?: string;

	/**
	 * Does not contain null text that will be used for the filter editors.
	 *
	 */
	doesNotContainNullText?: string;

	/**
	 * Equals null text that will be used for the filter editors.
	 *
	 */
	equalsNullText?: string;

	/**
	 * Does not equal null text that will be used for the filter editors.
	 *
	 */
	doesNotEqualNullText?: string;

	/**
	 * Greater than null text that will be used for the filter editors.
	 *
	 */
	greaterThanNullText?: string;

	/**
	 * Less than null text that will be used for the filter editors.
	 *
	 */
	lessThanNullText?: string;

	/**
	 * Greater than or equal to null text that will be used for the filter editors.
	 *
	 */
	greaterThanOrEqualToNullText?: string;

	/**
	 * Less than or equal to null text that will be used for the filter editors.
	 *
	 */
	lessThanOrEqualToNullText?: string;

	/**
	 * On null text that will be used for the filter editors.
	 *
	 */
	onNullText?: string;

	/**
	 * Not on null text that will be used for the filter editors.
	 *
	 */
	notOnNullText?: string;

	/**
	 * After null text that will be used for the filter editors.
	 *
	 */
	afterNullText?: string;

	/**
	 * Before null text that will be used for the filter editors.
	 *
	 */
	beforeNullText?: string;

	/**
	 * Empty null text that will be used for the filter editors.
	 *
	 */
	emptyNullText?: string;

	/**
	 * Not empty null text that will be used for the filter editors.
	 *
	 */
	notEmptyNullText?: string;

	/**
	 * Not empty null text that will be used for the filter editors.
	 *
	 */
	nullNullText?: string;

	/**
	 * Not empty null text that will be used for the filter editors.
	 *
	 */
	notNullNullText?: string;

	/**
	 * 'Starts with' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	startsWithLabel?: string;

	/**
	 * 'Starts with' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	endsWithLabel?: string;

	/**
	 * 'Contains' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	containsLabel?: string;

	/**
	 * 'Does not contain' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	doesNotContainLabel?: string;

	/**
	 * 'Equals' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	equalsLabel?: string;

	/**
	 * 'Does not Equal' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	doesNotEqualLabel?: string;

	/**
	 * 'Greater Than' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	greaterThanLabel?: string;

	/**
	 * 'Less Than' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	lessThanLabel?: string;

	/**
	 * 'Greater Than or Equal' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	greaterThanOrEqualToLabel?: string;

	/**
	 * 'Less Than or Equal' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	lessThanOrEqualToLabel?: string;

	/**
	 * 'True' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	trueLabel?: string;

	/**
	 * 'False' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	falseLabel?: string;

	/**
	 * 'After' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	afterLabel?: string;

	/**
	 * 'Before' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	beforeLabel?: string;

	/**
	 * 'Today' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	todayLabel?: string;

	/**
	 * 'Yesterday' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	yesterdayLabel?: string;

	/**
	 * 'This Month' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	thisMonthLabel?: string;

	/**
	 * 'Last Month' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	lastMonthLabel?: string;

	/**
	 * 'Next Month' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	nextMonthLabel?: string;

	/**
	 * 'This Year' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	thisYearLabel?: string;

	/**
	 * 'Last Year' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	lastYearLabel?: string;

	/**
	 * 'Next Year' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	nextYearLabel?: string;

	/**
	 * 'At' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	atLabel?: string;

	/**
	 * 'Not at' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	notAtLabel?: string;

	/**
	 * 'At or before' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	atBeforeLabel?: string;

	/**
	 * 'At or after' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	atAfterLabel?: string;

	/**
	 * 'Clear' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	clearLabel?: string;

	/**
	 * 'No Filter' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	noFilterLabel?: string;

	/**
	 * 'On' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	onLabel?: string;

	/**
	 * 'Not On' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	notOnLabel?: string;

	/**
	 * 'Advance Button' label that is used for the predefined filtering conditions in the filter dropdowns.
	 *
	 */
	advancedButtonLabel?: string;

	/**
	 * Specifies the filter dialog caption label.
	 *
	 */
	filterDialogCaptionLabel?: string;

	/**
	 * Specifies the filter condition label.
	 *
	 */
	filterDialogConditionLabel1?: string;

	/**
	 * Specifies the filter condition label.
	 *
	 */
	filterDialogConditionLabel2?: string;

	/**
	 * Specifies the filter condition drop-down label.
	 *
	 */
	filterDialogConditionDropDownLabel?: string;

	/**
	 * Specifies the dialog's Ok button label.
	 *
	 */
	filterDialogOkLabel?: string;

	/**
	 * Specifies the dialog's Cancel button label.
	 *
	 */
	filterDialogCancelLabel?: string;

	/**
	 * Specifies the Any label for the filtering dialog.
	 *
	 */
	filterDialogAnyLabel?: string;

	/**
	 * Specifies the All label for the filtering dialog.
	 *
	 */
	filterDialogAllLabel?: string;

	/**
	 * Specifies the Add button label for the filtering dialog.
	 *
	 */
	filterDialogAddLabel?: string;

	/**
	 * Specifies the Error label for the filtering dialog.
	 *
	 */
	filterDialogErrorLabel?: string;

	/**
	 * Specifies the Close label for the filtering dialog.
	 *
	 */
	filterDialogCloseLabel?: string;

	/**
	 * Specifies the Filtering summary title.
	 *
	 */
	filterSummaryTitleLabel?: string;

	/**
	 * Specifies the summary template for the matching records.
	 *
	 */
	filterSummaryTemplate?: string;

	/**
	 * Specifies clear all label in the filter dialog.
	 *
	 */
	filterDialogClearAllLabel?: string;

	/**
	 * Custom tooltip template for the filter button, when a filter is applied.
	 *
	 */
	tooltipTemplate?: string;

	/**
	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple.
	 *
	 */
	featureChooserText?: string;

	/**
	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple.
	 *
	 */
	featureChooserTextHide?: string;

	/**
	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced.
	 *
	 */
	featureChooserTextAdvancedFilter?: string;

	/**
	 * Option for IgGridFilteringLocale
	 */
	[optionName: string]: any;
}

interface DataFilteringEvent {
	(event: Event, ui: DataFilteringEventUIParam): void;
}

interface DataFilteringEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets the column index. Applicable only when filtering mode is "simple".
	 */
	columnIndex?: number;

	/**
	 * Gets the column key. Applicable only when filtering mode is "simple".
	 */
	columnKey?: string;

	/**
	 * Gets the filtering expressions. Filtering expressions could be changed in this event handler and after that data binding is applied. In this way the user could control filtering more easily before applying data-binding.
	 */
	newExpressions?: any[];
}

interface DataFilteredEvent {
	(event: Event, ui: DataFilteredEventUIParam): void;
}

interface DataFilteredEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets the column index. Applicable only when filtering mode is "simple".
	 */
	columnIndex?: number;

	/**
	 * Gets the column key. Applicable only when filtering mode is "simple".
	 */
	columnKey?: string;

	/**
	 * Gets the filtered expressions.
	 */
	expressions?: any[];
}

interface FilterDialogOpeningEvent {
	(event: Event, ui: FilterDialogOpeningEventUIParam): void;
}

interface FilterDialogOpeningEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets reference to the filtering dialog DOM element.
	 */
	dialog?: string;
}

interface FilterDialogOpenedEvent {
	(event: Event, ui: FilterDialogOpenedEventUIParam): void;
}

interface FilterDialogOpenedEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets reference to the filtering dialog DOM element.
	 */
	dialog?: string;
}

interface FilterDialogMovingEvent {
	(event: Event, ui: FilterDialogMovingEventUIParam): void;
}

interface FilterDialogMovingEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets reference to filtering dialog DOM element.
	 */
	dialog?: string;

	/**
	 * Gets the original position of the groupby dialog div as { top, left } object, relative to the page.
	 */
	originalPosition?: any;

	/**
	 * Gets the current position of the groupby dialog div as { top, left } object, relative to the page.
	 */
	position?: any;
}

interface FilterDialogFilterAddingEvent {
	(event: Event, ui: FilterDialogFilterAddingEventUIParam): void;
}

interface FilterDialogFilterAddingEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets reference to filters table body DOM element.
	 */
	filtersTableBody?: string;
}

interface FilterDialogFilterAddedEvent {
	(event: Event, ui: FilterDialogFilterAddedEventUIParam): void;
}

interface FilterDialogFilterAddedEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets reference to the filters table row DOM element.
	 */
	filter?: string;
}

interface FilterDialogClosingEvent {
	(event: Event, ui: FilterDialogClosingEventUIParam): void;
}

interface FilterDialogClosingEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;
}

interface FilterDialogClosedEvent {
	(event: Event, ui: FilterDialogClosedEventUIParam): void;
}

interface FilterDialogClosedEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;
}

interface FilterDialogContentsRenderingEvent {
	(event: Event, ui: FilterDialogContentsRenderingEventUIParam): void;
}

interface FilterDialogContentsRenderingEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets reference to the filtering dialog DOM element.
	 */
	dialogElement?: string;
}

interface FilterDialogContentsRenderedEvent {
	(event: Event, ui: FilterDialogContentsRenderedEventUIParam): void;
}

interface FilterDialogContentsRenderedEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets reference to the filtering dialog DOM element.
	 */
	dialogElement?: string;
}

interface FilterDialogFilteringEvent {
	(event: Event, ui: FilterDialogFilteringEventUIParam): void;
}

interface FilterDialogFilteringEventUIParam {
	/**
	 * Gets reference to GridFiltering.
	 */
	owner?: any;

	/**
	 * Gets reference to filtering dialog DOM element.
	 */
	dialog?: string;
}

interface IgGridFiltering {
	/**
	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
	 *
	 */
	caseSensitive?: boolean;

	/**
	 * Enable/disable footer visibility with summary info about the filter.
	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
	 *
	 */
	filterSummaryAlwaysVisible?: boolean;

	/**
	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
	 *
	 */
	renderFC?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
	 */
	filterSummaryTemplate?: string;

	/**
	 * Type of animations for the column filter dropdowns.
	 *
	 *
	 * Valid values:
	 * "linear" The column filtering drop downs are shown with a linear animation.
	 * "none" No animation is used when showing the filtering drop downs.
	 */
	filterDropDownAnimations?: string;

	/**
	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
	 *
	 */
	filterDropDownAnimationDuration?: number;

	/**
	 * Width of the column filter dropdowns.
	 *
	 *
	 * Valid values:
	 * "string" The width in pixels (0px)
	 * "number" The width in pixels as a number (0)
	 */
	filterDropDownWidth?: string|number;

	/**
	 * Height of the column filter dropdowns.
	 *
	 * string  The height of the column filter dropdowns in pixels (0px).
	 * number  The height of the column filter dropdowns in pixels as a number (0).
	 */
	filterDropDownHeight?: any;

	/**
	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
	 *
	 */
	filterExprUrlKey?: string;

	/**
	 * Enable/disable filter icons visibility.
	 *
	 *
	 * Valid values:
	 * "true" All predefined filters in the filter dropdowns will have icons rendered in front of the text.
	 * "false" No icons will be rendered.
	 */
	filterDropDownItemIcons?: boolean;

	/**
	 * A list of column settings that specifies custom filtering options on a per column basis.
	 *
	 */
	columnSettings?: IgGridFilteringColumnSetting[];

	/**
	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * Valid values:
	 * "remote" Filtering is performed by a remote end-point.
	 * "local" Filtering is performed locally by the [$.ig.DataSource](ig.datasource).
	 */
	type?: string;

	/**
	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
	 *
	 */
	filterDelay?: number;

	/**
	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
	 *
	 *
	 * Valid values:
	 * "simple" Renders just a filter row.
	 * "advanced" Allows to configure multiple filters from a dialog - Excel style.
	 */
	mode?: string;

	/**
	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
	 *
	 */
	advancedModeEditorsVisible?: boolean;

	/**
	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
	 *
	 *
	 * Valid values:
	 * "left"
	 * "right"
	 */
	advancedModeHeaderButtonLocation?: string;

	/**
	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 *
	 * Valid values:
	 * "string" The dialog window width in pixels (500px).
	 * "number" The dialog window width in pixels as a number (500).
	 */
	filterDialogWidth?: string|number;

	/**
	 * default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 *
	 * Valid values:
	 * "string" The dialog window height in pixels (350px).
	 * "number" The dialog window height in pixels as a number (350).
	 */
	filterDialogHeight?: string|number;

	/**
	 * Width of the filtering condition dropdowns in the advanced filter dialog.
	 *
	 *
	 * Valid values:
	 * "string" The filtering condition dropdowns width in pixels (80px).
	 * "number" The filtering condition dropdowns width in pixels as a number (80).
	 */
	filterDialogFilterDropDownDefaultWidth?: string|number;

	/**
	 * Width of the filtering expression input boxes in the advanced filter dialog.
	 *
	 *
	 * Valid values:
	 * "string" The filtering expression input boxes width in pixels (80px).
	 * "number" The filtering expression input boxes width in pixels as a number (80).
	 */
	filterDialogExprInputDefaultWidth?: string|number;

	/**
	 * Width of the column chooser dropdowns in the advanced filter dialog.
	 *
	 *
	 * Valid values:
	 * "string" The column chooser dropdowns width in pixels (80px).
	 * "number" The column chooser dropdowns width in pixels  as a number (80).
	 */
	filterDialogColumnDropDownDefaultWidth?: string|number;

	/**
	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
	 *
	 */
	renderFilterButton?: boolean;

	/**
	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
	 *
	 *
	 * Valid values:
	 * "left" The button is rendered on the left.
	 * "right" The button is rendered on the right.
	 */
	filterButtonLocation?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
	 */
	nullTexts?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
	 */
	labels?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
	 */
	tooltipTemplate?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
	 */
	featureChooserText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
	 */
	featureChooserTextHide?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
	 */
	featureChooserTextAdvancedFilter?: string;
	locale?: IgGridFilteringLocale;

	/**
	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
	 *
	 */
	filterDialogAddConditionTemplate?: string;

	/**
	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
	 *
	 */
	filterDialogAddConditionDropDownTemplate?: string;

	/**
	 * Custom template for filter dialog.
	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
	 * NOTE: The template is supported only with <tr />.
	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
	 *
	 */
	filterDialogFilterTemplate?: string;

	/**
	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
	 *
	 */
	filterDialogFilterConditionTemplate?: string;

	/**
	 * Add button width - in the advanced filter dialog.
	 *
	 *
	 * Valid values:
	 * "string" The dialog Add button width in pixels (100px).
	 * "number" The dialog Add button width in pixels as a number (100).
	 */
	filterDialogAddButtonWidth?: string|number;

	/**
	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
	 *
	 *
	 * Valid values:
	 * "string" The advanced filter dialog Ok and Cancel buttons width in pixels (120px).
	 * "number" The advanced filter dialog Ok and Cancel buttons width in pixels as a number (120).
	 */
	filterDialogOkCancelButtonWidth?: string|number;

	/**
	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
	 *
	 */
	filterDialogMaxFilterCount?: number;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The filter dialog will be draggable only within the grid area.
	 * window  The filter dialog will be draggable within the whole window area.
	 */
	filterDialogContainment?: string;

	/**
	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
	 *
	 */
	showEmptyConditions?: boolean;

	/**
	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
	 *
	 */
	showNullConditions?: boolean;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Enables/disables filtering persistence between states.
	 *
	 */
	persist?: boolean;

	/**
	 * Enables/disables feature inheritance for the child [layouts](ui.ighierarchicalgrid#options:columnLayouts). NOTE: It only applies for [igHierarchicalGrid](ui.ighierarchicalgrid).
	 *
	 */
	inherit?: boolean;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before a filtering operation is executed (remote request or local).
	 * Return false in order to cancel filtering operation.
	 */
	dataFiltering?: DataFilteringEvent;

	/**
	 * Event fired after the filtering has been executed and results are rendered.
	 */
	dataFiltered?: DataFilteredEvent;

	/**
	 * Event fired before the filter dropdown is opened for a specific column.
	 * Return false in order to cancel dropdown opening.
	 */
	dropDownOpening?: DropDownOpeningEvent;

	/**
	 * Event fired after the filter dropdown is opened for a specific column.
	 */
	dropDownOpened?: DropDownOpenedEvent;

	/**
	 * Event fired before the filter dropdown starts closing.
	 * Return false in order to cancel dropdown closing.
	 */
	dropDownClosing?: DropDownClosingEvent;

	/**
	 * Event fired after a filter column dropdown is completely closed.
	 */
	dropDownClosed?: DropDownClosedEvent;

	/**
	 * Event fired before the advanced filtering dialog is opened.
	 * Return false in order to cancel filter dialog opening.
	 */
	filterDialogOpening?: FilterDialogOpeningEvent;

	/**
	 * Event fired after the advanced filter dialog is already opened.
	 */
	filterDialogOpened?: FilterDialogOpenedEvent;

	/**
	 * Event fired every time the advanced filter dialog changes its position.
	 */
	filterDialogMoving?: FilterDialogMovingEvent;

	/**
	 * Event fired before a filter row is added to the advanced filter dialog.
	 * Return false in order to cancel filter adding to the advanced filtering dialog.
	 */
	filterDialogFilterAdding?: FilterDialogFilterAddingEvent;

	/**
	 * Event fired after a filter row is added to the advanced filter dialog.
	 */
	filterDialogFilterAdded?: FilterDialogFilterAddedEvent;

	/**
	 * Event fired before the advanced filter dialog is closed.
	 * Return false in order to cancel filtering dialog closing.
	 */
	filterDialogClosing?: FilterDialogClosingEvent;

	/**
	 * Event fired after the advanced filter dialog has been closed.
	 */
	filterDialogClosed?: FilterDialogClosedEvent;

	/**
	 * Event fired before the contents of the advanced filter dialog are rendered.
	 * Return false in order to cancel filtering dialog rendering.
	 */
	filterDialogContentsRendering?: FilterDialogContentsRenderingEvent;

	/**
	 * Event fired after the contents of the advanced filter dialog are rendered.
	 */
	filterDialogContentsRendered?: FilterDialogContentsRenderedEvent;

	/**
	 * Event fired when the OK button in the advanced filter dialog is pressed.
	 */
	filterDialogFiltering?: FilterDialogFilteringEvent;

	/**
	 * Option for igGridFiltering
	 */
	[optionName: string]: any;
}
interface IgGridFilteringMethods {
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridfiltering#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridfiltering#options:language) or [locale](ui.iggridfiltering#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.iggridfiltering#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.iggridfiltering#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Destroys the filtering widget - remove fitler row, unbinds events, returns the grid to its previous state.
	 */
	destroy(): void;

	/**
	 * Returns the count of data records that match filtering conditions
	 */
	getFilteringMatchesCount(): number;

	/**
	 * Toggle filter row when mode is simple or [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is true. Otherwise show/hide advanced dialog.
	 *
	 * @param event Column key
	 */
	toggleFilterRowByFeatureChooser(event: string): void;

	/**
	 * Applies filtering programmatically and updates the UI by default.
	 *
	 * @param expressions An array of filtering expressions, each one having the format {fieldName: , expr: , cond: , logic: } where  fieldName is the key of the column, expr is the actual expression string with which we would like to filter, logic is 'AND' or 'OR', and cond is one of the following strings: "equals", "doesNotEqual", "contains", "doesNotContain", "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "true", "false", "null", "notNull", "empty", "notEmpty", "startsWith", "endsWith", "today", "yesterday", "on", "notOn", "thisMonth", "lastMonth", "nextMonth", "before", "after", "thisYear", "lastYear", "nextYear". The difference between the empty and null filtering conditions is that empty includes null, NaN, and undefined, as well as the empty string.
	 * @param updateUI specifies whether the filter row should be also updated once the grid is filtered
	 * @param addedFromAdvanced
	 */
	filter(expressions: any[], updateUI?: boolean, addedFromAdvanced?: boolean): void;

	/**
	 * Check whether filterCondition requires or not filtering expression - e.g. if filterCondition is "lastMonth", "thisMonth", "null", "notNull", "true", "false", etc. then filtering expression is NOT required
	 *
	 * @param filterCondition filtering condition - e.g. "true", "false",  "yesterday", "empty", "null", etc.
	 */
	requiresFilteringExpression(filterCondition: string): boolean;
}
interface JQuery {
	data(propertyName: "igGridFiltering"): IgGridFilteringMethods;
}

interface JQuery {
	igGridFiltering(methodName: "changeGlobalLanguage"): void;
	igGridFiltering(methodName: "changeGlobalRegional"): void;
	igGridFiltering(methodName: "changeLocale"): void;
	igGridFiltering(methodName: "changeRegional"): void;
	igGridFiltering(methodName: "destroy"): void;
	igGridFiltering(methodName: "getFilteringMatchesCount"): number;
	igGridFiltering(methodName: "toggleFilterRowByFeatureChooser", event: string): void;
	igGridFiltering(methodName: "filter", expressions: any[], updateUI?: boolean, addedFromAdvanced?: boolean): void;
	igGridFiltering(methodName: "requiresFilteringExpression", filterCondition: string): boolean;

	/**
	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "caseSensitive"): boolean;

	/**
	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;

	/**
	 * Enable/disable footer visibility with summary info about the filter.
	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterSummaryAlwaysVisible"): boolean;

	/**
	 * Enable/disable footer visibility with summary info about the filter.
	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterSummaryAlwaysVisible", optionValue: boolean): void;

	/**
	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "renderFC"): boolean;

	/**
	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "renderFC", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterSummaryTemplate"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterSummaryTemplate", optionValue: string): void;

	/**
	 * Type of animations for the column filter dropdowns.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimations"): string;

	/**
	 * Type of animations for the column filter dropdowns.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimations", optionValue: string): void;

	/**
	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimationDuration"): number;

	/**
	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimationDuration", optionValue: number): void;

	/**
	 * Width of the column filter dropdowns.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownWidth"): string|number;

	/**
	 * Width of the column filter dropdowns.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownWidth", optionValue: string|number): void;

	/**
	 * Height of the column filter dropdowns.
	 *
	 * string  The height of the column filter dropdowns in pixels (0px).
	 * number  The height of the column filter dropdowns in pixels as a number (0).
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownHeight"): any;

	/**
	 * Height of the column filter dropdowns.
	 *
	 * string  The height of the column filter dropdowns in pixels (0px).
	 * number  The height of the column filter dropdowns in pixels as a number (0).
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownHeight", optionValue: any): void;

	/**
	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterExprUrlKey"): string;

	/**
	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterExprUrlKey", optionValue: string): void;

	/**
	 * Enable/disable filter icons visibility.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownItemIcons"): boolean;

	/**
	 * Enable/disable filter icons visibility.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownItemIcons", optionValue: boolean): void;

	/**
	 * A list of column settings that specifies custom filtering options on a per column basis.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "columnSettings"): IgGridFilteringColumnSetting[];

	/**
	 * A list of column settings that specifies custom filtering options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridFilteringColumnSetting[]): void;

	/**
	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDelay"): number;

	/**
	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDelay", optionValue: number): void;

	/**
	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "advancedModeEditorsVisible"): boolean;

	/**
	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "advancedModeEditorsVisible", optionValue: boolean): void;

	/**
	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "advancedModeHeaderButtonLocation"): string;

	/**
	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "advancedModeHeaderButtonLocation", optionValue: string): void;

	/**
	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogWidth"): string|number;

	/**
	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogWidth", optionValue: string|number): void;

	/**
	 * Default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogHeight"): string|number;

	/**
	 * Default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogHeight", optionValue: string|number): void;

	/**
	 * Width of the filtering condition dropdowns in the advanced filter dialog.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterDropDownDefaultWidth"): string|number;

	/**
	 * Width of the filtering condition dropdowns in the advanced filter dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterDropDownDefaultWidth", optionValue: string|number): void;

	/**
	 * Width of the filtering expression input boxes in the advanced filter dialog.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogExprInputDefaultWidth"): string|number;

	/**
	 * Width of the filtering expression input boxes in the advanced filter dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogExprInputDefaultWidth", optionValue: string|number): void;

	/**
	 * Width of the column chooser dropdowns in the advanced filter dialog.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogColumnDropDownDefaultWidth"): string|number;

	/**
	 * Width of the column chooser dropdowns in the advanced filter dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogColumnDropDownDefaultWidth", optionValue: string|number): void;

	/**
	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "renderFilterButton"): boolean;

	/**
	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "renderFilterButton", optionValue: boolean): void;

	/**
	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterButtonLocation"): string;

	/**
	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterButtonLocation", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "nullTexts"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "nullTexts", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "labels"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "labels", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "tooltipTemplate"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "featureChooserText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextHide"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextHide", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextAdvancedFilter"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextAdvancedFilter", optionValue: string): void;
	igGridFiltering(optionLiteral: 'option', optionName: "locale"): IgGridFilteringLocale;
	igGridFiltering(optionLiteral: 'option', optionName: "locale", optionValue: IgGridFilteringLocale): void;

	/**
	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionTemplate"): string;

	/**
	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionTemplate", optionValue: string): void;

	/**
	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionDropDownTemplate"): string;

	/**
	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionDropDownTemplate", optionValue: string): void;

	/**
	 * Custom template for filter dialog.
	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
	 * NOTE: The template is supported only with <tr />.
	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterTemplate"): string;

	/**
	 * Custom template for filter dialog.
	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
	 * NOTE: The template is supported only with <tr />.
	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterTemplate", optionValue: string): void;

	/**
	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterConditionTemplate"): string;

	/**
	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterConditionTemplate", optionValue: string): void;

	/**
	 * Add button width - in the advanced filter dialog.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddButtonWidth"): string|number;

	/**
	 * Add button width - in the advanced filter dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddButtonWidth", optionValue: string|number): void;

	/**
	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOkCancelButtonWidth"): string|number;

	/**
	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOkCancelButtonWidth", optionValue: string|number): void;

	/**
	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogMaxFilterCount"): number;

	/**
	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogMaxFilterCount", optionValue: number): void;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The filter dialog will be draggable only within the grid area.
	 * window  The filter dialog will be draggable within the whole window area.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContainment"): string;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The filter dialog will be draggable only within the grid area.
	 * window  The filter dialog will be draggable within the whole window area.
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContainment", optionValue: string): void;

	/**
	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "showEmptyConditions"): boolean;

	/**
	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "showEmptyConditions", optionValue: boolean): void;

	/**
	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "showNullConditions"): boolean;

	/**
	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "showNullConditions", optionValue: boolean): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Enables/disables filtering persistence between states.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "persist"): boolean;

	/**
	 * Enables/disables filtering persistence between states.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;

	/**
	 * Enables/disables feature inheritance for the child [layouts](ui.ighierarchicalgrid#options:columnLayouts). NOTE: It only applies for [igHierarchicalGrid](ui.ighierarchicalgrid).
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child [layouts](ui.ighierarchicalgrid#options:columnLayouts). NOTE: It only applies for [igHierarchicalGrid](ui.ighierarchicalgrid).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridFiltering(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before a filtering operation is executed (remote request or local).
	 * Return false in order to cancel filtering operation.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dataFiltering"): DataFilteringEvent;

	/**
	 * Event fired before a filtering operation is executed (remote request or local).
	 * Return false in order to cancel filtering operation.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dataFiltering", optionValue: DataFilteringEvent): void;

	/**
	 * Event fired after the filtering has been executed and results are rendered.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dataFiltered"): DataFilteredEvent;

	/**
	 * Event fired after the filtering has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dataFiltered", optionValue: DataFilteredEvent): void;

	/**
	 * Event fired before the filter dropdown is opened for a specific column.
	 * Return false in order to cancel dropdown opening.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dropDownOpening"): DropDownOpeningEvent;

	/**
	 * Event fired before the filter dropdown is opened for a specific column.
	 * Return false in order to cancel dropdown opening.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dropDownOpening", optionValue: DropDownOpeningEvent): void;

	/**
	 * Event fired after the filter dropdown is opened for a specific column.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dropDownOpened"): DropDownOpenedEvent;

	/**
	 * Event fired after the filter dropdown is opened for a specific column.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dropDownOpened", optionValue: DropDownOpenedEvent): void;

	/**
	 * Event fired before the filter dropdown starts closing.
	 * Return false in order to cancel dropdown closing.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dropDownClosing"): DropDownClosingEvent;

	/**
	 * Event fired before the filter dropdown starts closing.
	 * Return false in order to cancel dropdown closing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dropDownClosing", optionValue: DropDownClosingEvent): void;

	/**
	 * Event fired after a filter column dropdown is completely closed.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dropDownClosed"): DropDownClosedEvent;

	/**
	 * Event fired after a filter column dropdown is completely closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "dropDownClosed", optionValue: DropDownClosedEvent): void;

	/**
	 * Event fired before the advanced filtering dialog is opened.
	 * Return false in order to cancel filter dialog opening.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpening"): FilterDialogOpeningEvent;

	/**
	 * Event fired before the advanced filtering dialog is opened.
	 * Return false in order to cancel filter dialog opening.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpening", optionValue: FilterDialogOpeningEvent): void;

	/**
	 * Event fired after the advanced filter dialog is already opened.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpened"): FilterDialogOpenedEvent;

	/**
	 * Event fired after the advanced filter dialog is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpened", optionValue: FilterDialogOpenedEvent): void;

	/**
	 * Event fired every time the advanced filter dialog changes its position.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogMoving"): FilterDialogMovingEvent;

	/**
	 * Event fired every time the advanced filter dialog changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogMoving", optionValue: FilterDialogMovingEvent): void;

	/**
	 * Event fired before a filter row is added to the advanced filter dialog.
	 * Return false in order to cancel filter adding to the advanced filtering dialog.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdding"): FilterDialogFilterAddingEvent;

	/**
	 * Event fired before a filter row is added to the advanced filter dialog.
	 * Return false in order to cancel filter adding to the advanced filtering dialog.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdding", optionValue: FilterDialogFilterAddingEvent): void;

	/**
	 * Event fired after a filter row is added to the advanced filter dialog.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdded"): FilterDialogFilterAddedEvent;

	/**
	 * Event fired after a filter row is added to the advanced filter dialog.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdded", optionValue: FilterDialogFilterAddedEvent): void;

	/**
	 * Event fired before the advanced filter dialog is closed.
	 * Return false in order to cancel filtering dialog closing.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosing"): FilterDialogClosingEvent;

	/**
	 * Event fired before the advanced filter dialog is closed.
	 * Return false in order to cancel filtering dialog closing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosing", optionValue: FilterDialogClosingEvent): void;

	/**
	 * Event fired after the advanced filter dialog has been closed.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosed"): FilterDialogClosedEvent;

	/**
	 * Event fired after the advanced filter dialog has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosed", optionValue: FilterDialogClosedEvent): void;

	/**
	 * Event fired before the contents of the advanced filter dialog are rendered.
	 * Return false in order to cancel filtering dialog rendering.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendering"): FilterDialogContentsRenderingEvent;

	/**
	 * Event fired before the contents of the advanced filter dialog are rendered.
	 * Return false in order to cancel filtering dialog rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendering", optionValue: FilterDialogContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the advanced filter dialog are rendered.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendered"): FilterDialogContentsRenderedEvent;

	/**
	 * Event fired after the contents of the advanced filter dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendered", optionValue: FilterDialogContentsRenderedEvent): void;

	/**
	 * Event fired when the OK button in the advanced filter dialog is pressed.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFiltering"): FilterDialogFilteringEvent;

	/**
	 * Event fired when the OK button in the advanced filter dialog is pressed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFiltering", optionValue: FilterDialogFilteringEvent): void;
	igGridFiltering(options: IgGridFiltering): JQuery;
	igGridFiltering(optionLiteral: 'option', optionName: string): any;
	igGridFiltering(optionLiteral: 'option', options: IgGridFiltering): JQuery;
	igGridFiltering(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridFiltering(methodName: string, ...methodParams: any[]): any;
}
interface IgGridColumnGroupOptions {
	/**
	 * Sets whether the group is expanded or collapsed. Applied only if the allowGroupCollapsing is set to true.
	 *
	 */
	expanded?: boolean;

	/**
	 * Sets whether expansion indicators are visible in the group header.
	 *
	 */
	allowGroupCollapsing?: boolean;

	/**
	 * Sets when should the group be hidden. Applied only if the allowGroupCollapsing is set to true.
	 *
	 *
	 * Valid values:
	 * "never" never hide the group
	 * "always" always hide the group
	 * "parentcollapsed" hide the group when its parent group is collapsed
	 * "parentexpanded" hide the group when its parent group is expanded
	 */
	hidden?: string;

	/**
	 * Option for IgGridColumnGroupOptions
	 */
	[optionName: string]: any;
}

interface IgGridColumn {
	/**
	 * Header text for the specified column. HTML and special characters should not be included as part of the header text content, because the browsers can interpret it and break the grid UI.
	 *
	 */
	headerText?: string;

	/**
	 * The property in the data source to which the column is bound. Also used to identify the column by, and find specific columns with API methods such as [columnByKey](ui.iggrid#methods:columnByKey).
	 *
	 */
	key?: string;

	/**
	 * Reference to a function (string or function) which will be used for formatting the cell values. The function should accept a value and return the new formatted value. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 *
	 * Valid values:
	 * "string" The name of the function which will be used for formatting the cell values.
	 * "function" Function which will be used for formatting the cell values. The function should accept a value and return the new formatted value.
	 */
	formatter?: string|Function;

	/**
	 * Gets/Sets the type of formatting for cells of the column. Default value is null. Checkout [Formatting Dates, Numbers and Strings](http://www.igniteui.com/help/formatting-dates-numbers-and-strings) for details on the valid formatting specifiers.
	 *
	 * If dataType is "date", then supported formats are following: "date", "dateLong", "dateTime", "time", "timeLong", "MM/dd/yyyy", "MMM-d, yy, h:mm:ss tt", "dddd d MMM", etc.
	 * If dataType is "time", then supported formats are following: "date", "dateLong", "dateTime", "time", "timeLong", "MMM-d, yy, h:mm:ss tt", etc.
	 * If dataType is "number", then supported numeric formats are following: "number", "currency", "percent", "int", "double", "0.00", "#.0####", "0", "#.#######", etc.
	 * The value of "double" will be similar to "number", but with unlimited maximum number of decimal places.
	 * The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object.
	 * If dataType is "string" or not set, then format is rendered as it is with replacement of possible "{0}" flag by value in cell. Example, if format is set to "Name: {0}" and value in cell is "Bob", then value will appear as "Name: Bob"
	 * If value is set to "checkbox", then checkboxes are used regardless of renderCheckboxes option of the grid. That has effect only when dataType option of column is set to "bool".
	 */
	format?: string;

	/**
	 * Data type of the column cell values: string, number, bool, date, time, object.
	 *
	 *
	 * Valid values:
	 * "string" Used when the data for the column is of type string
	 * "number" Used when the data for the column is of type number
	 * "boolean" Used when the data for the column is of type boolean
	 * "date" Used when the data for the column is of type date
	 * "time" Used when the data for the column is of type date and but only the time portion is important
	 * "object" Used when the data for the column is of type object
	 */
	dataType?: string;

	/**
	 * Width of the column in pixels or percentage. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).If width is not defined and [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) is set, it is assumed for all columns.
	 *
	 *
	 * Valid values:
	 * "string" The column width can be set in pixels (px), percentage (%) or as '*' in order to auto-size based on the cells and header content.
	 * "number" The column width can be set as a number
	 */
	width?: string|number;

	/**
	 * Initial visibility of the column. A column can be hidden without the Hiding feature being enabled but there will be no UI for unhiding it. Columns can be defined as hidden in the options of the Hiding feature as well and those definitions take precedence.
	 *
	 */
	hidden?: boolean;

	/**
	 * Sets a template for an individual column. the contents of the template should be the HTML markup that goes inside the table cell, or the entire table cell markup. [Here's an example of creating a basic column template](http://www.igniteui.com/help/creating-a-basic-column-template-in-the-iggrid)
	 *
	 */
	template?: string;

	/**
	 * Sets whether column data is derived from the datasource. If set to true, then the cells in this column are not bound to the data source. The data in this column is populated using [formula](ui.iggrid#options:columns.formula), or using [unboundValues](ui.iggrid#options:columns.unboundValues), or through the [setUnboundValues](ui.iggrid#methods:setUnboundValues) API method. [Here's an overview of the unbound columns feature](http://www.igniteui.com/help/iggrid-unboundcolumns-overview)
	 *
	 */
	unbound?: boolean;

	/**
	 * Options used to configure collapsible column [groups](ui.iggrid#options:columns.group).
	 *
	 */
	groupOptions?: IgGridColumnGroupOptions;

	/**
	 * Array of child column definitions. If the column has the property group than the grid has multi column headers.
	 *
	 */
	group?: any[];

	/**
	 * Determines the way in which dates will be displayed in the grid for this column.
	 *
	 *
	 * Valid values:
	 * "local" The dates for this column will be rendered in the client's local timezone.
	 * "utc" The dates for this column will be rendered in their UTC representation.
	 */
	dateDisplayType?: string;

	/**
	 * This option has been deprecated as of the June 2016 service release.
	 * Adjust span of multi column header cell. Use option rowSpan.
	 */
	rowspan?: number;

	/**
	 * A reference to or the name of a JavaScript function, which will calculate the value of the current cell based on other cell values in the same row. Used with [unbound columns](ui.iggrid#options:columns.unbound).
	 *
	 *
	 * Valid values:
	 * "string" The name of the JavaScript function.
	 * "function" Reference to the JavaScript function.
	 */
	formula?: string|Function;

	/**
	 * Array of values which will be populated in the column cells at initialization, if the column is [unbound](ui.iggrid#options:columns.unbound).
	 *
	 */
	unboundValues?: any[];

	/**
	 * Space-separated list of CSS classes to be applied on the header cell of this column.
	 *
	 */
	headerCssClass?: string;

	/**
	 * Space-separated list of CSS classes to be applied on the data cells of this column. The class is not applied if the column has a column [template](ui.iggrid#options:columns.template) defined, which contains full <td> definition in the template.
	 *
	 */
	columnCssClass?: string;

	/**
	 * This option is applicable only for columns with [dataType](ui.iggrid#options:columns.dataType) of object. Reference to a function, or the name of the function, that will be used for complex data extraction from the data records, whose return value will be used for all data operations associated with this column and will be displayed as cell value. [Here you can find more examples of how to setup a column mapper](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-mapper)
	 *
	 *
	 * Valid values:
	 * "string" The name of the mapper function.
	 * "function" Reference to the mapper function.
	 */
	mapper?: string|Function;

	/**
	 * Specifies the row index of the cell in a Multi-Row Layout configuration. All columns must have this property set for the multi-row-layout mode to be enabled. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout)
	 *
	 */
	rowIndex?: number;

	/**
	 * Specifies the column index of the cell in a Multi-Row Layout configuration. All columns must have this property set for the multi-row-layout mode to be enabled. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout)
	 *
	 */
	columnIndex?: number;

	/**
	 * Specifies the navigation index of the cell for the TAB sequence when the cells are in edit mode in a Multi-Row Layout grid. Has no effect otherwise. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout)
	 *
	 */
	navigationIndex?: number;

	/**
	 * Specifies the colSpan of the cell in a Multi-Row Layout configuration. colSpan 0 is not supported and will be changed to 1 by the grid. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout)
	 *
	 */
	colSpan?: number;

	/**
	 * Specifies the rowSpan of the cell in a Multi-Row Layout configuration. rowSpan 0 is not supported and will be changed to 1 by the grid. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout). If multi-row-layout is not used but multi-column-header is set then this option is used to adjust span of header cell.
	 *
	 */
	rowSpan?: number;

	/**
	 * Option for IgGridColumn
	 */
	[optionName: string]: any;
}

interface IgGridFeature {
	/**
	 * Name of the feature to be enabled.
	 */
	name?: string;

	/**
	 * Option for IgGridFeature
	 */
	[optionName: string]: any;
}

interface IgGridRestSettingsCreate {
	/**
	 * Specifies a remote URL to which create requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
	 *
	 */
	url?: string;

	/**
	 * Specifies a remote URL template. Use ${id} in place of the resource id.
	 *
	 */
	template?: string;

	/**
	 * Specifies whether create requests will be sent in batches
	 *
	 */
	batch?: boolean;

	/**
	 * Option for IgGridRestSettingsCreate
	 */
	[optionName: string]: any;
}

interface IgGridRestSettingsUpdate {
	/**
	 * Specifies a remote URL to which update requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
	 */
	url?: string;

	/**
	 * Specifies a remote URL template. Use ${id} in place of the resource id.
	 */
	template?: string;

	/**
	 * Specifies whether update requests will be sent in batches
	 */
	batch?: boolean;

	/**
	 * Option for IgGridRestSettingsUpdate
	 */
	[optionName: string]: any;
}

interface IgGridRestSettingsRemove {
	/**
	 * Specifies a remote URL to which remove requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
	 */
	url?: string;

	/**
	 * Specifies a remote URL template. Use ${id} in place of the resource id.
	 */
	template?: string;

	/**
	 * Specifies whether update requests will be sent in batches
	 */
	batch?: boolean;

	/**
	 * Option for IgGridRestSettingsRemove
	 */
	[optionName: string]: any;
}

interface IgGridRestSettings {
	/**
	 * Settings for create requests
	 *
	 */
	create?: IgGridRestSettingsCreate;

	/**
	 * Settings for update requests
	 */
	update?: IgGridRestSettingsUpdate;

	/**
	 * Settings for remove requests
	 */
	remove?: IgGridRestSettingsRemove;

	/**
	 * Specifies whether the ids of the removed resources are send through the request URI
	 */
	encodeRemoveInRequestUri?: boolean;

	/**
	 * Specifies a custom function to serialize content sent to the server. It should accept a single object or an array of objects and return a string. If not specified, JSON.stringify() will be used.
	 *
	 */
	contentSerializer?: Function;

	/**
	 * Specifies the content type of the request. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	contentType?: string;

	/**
	 * Option for IgGridRestSettings
	 */
	[optionName: string]: any;
}

interface IgGridScrollSettings {
	/**
	 * Sets gets current vertical position.
	 *
	 */
	scrollTop?: number;

	/**
	 * Sets gets current horizontal position.
	 *
	 */
	scrollLeft?: number;

	/**
	 * Sets gets the step of the default scrolling behavior when using the mouse wheel.
	 *
	 */
	wheelStep?: number;

	/**
	 * Sets gets if smoother scrolling with small intertia should be used when using the mouse wheel.
	 *
	 */
	smoothing?: boolean;

	/**
	 * Sets or gets the modifier for how many pixels will be scrolled when using the mouse wheel once. This is used only for the [smooth scrolling behavior](ui.iggrid#options:scrollSettings.smoothing).
	 *
	 */
	smoothingStep?: number;

	/**
	 * Sets or gets the modifier for how long the scroll ‘animation’ lasts when using the mouse wheel once. This is used only for the [smooth scrolling behavior](ui.iggrid#options:scrollSettings.smoothing).
	 *
	 */
	smoothingDuration?: number;

	/**
	 * Sets gets the modifier for how much the inertia scrolls on touch devices. Note: Value set to 0 would disable touch movements. Value set to -1 would invert them.
	 *
	 */
	inertiaStep?: number;

	/**
	 * Sets gets the modifier for how long the inertia last on touch devices.
	 *
	 */
	inertiaDuration?: number;

	/**
	 * Option for IgGridScrollSettings
	 */
	[optionName: string]: any;
}

interface CellClickEvent {
	(event: Event, ui: CellClickEventUIParam): void;
}

interface CellClickEventUIParam {
	/**
	 * Gets a reference to cell DOM element.
	 */
	cellElement?: Element;

	/**
	 * Gets the row index.
	 */
	rowIndex?: number;

	/**
	 * Gets the row key.
	 */
	rowKey?: any;

	/**
	 * Gets the column index of the DOM element.
	 */
	colIndex?: number;

	/**
	 * Gets the column key.
	 */
	colKey?: string;

	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface CellRightClickEvent {
	(event: Event, ui: CellRightClickEventUIParam): void;
}

interface CellRightClickEventUIParam {
	/**
	 * Gets a reference to cell DOM element.
	 */
	cellElement?: Element;

	/**
	 * Gets the row index.
	 */
	rowIndex?: number;

	/**
	 * Gets the row key.
	 */
	rowKey?: any;

	/**
	 * Gets the column index of the DOM element.
	 */
	colIndex?: number;

	/**
	 * Gets the column key.
	 */
	colKey?: string;

	/**
	 * Gets a reference to the row DOM element.
	 */
	row?: Element;

	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface DataRenderingEvent {
	(event: Event, ui: DataRenderingEventUIParam): void;
}

interface DataRenderingEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface DataRenderedEvent {
	(event: Event, ui: DataRenderedEventUIParam): void;
}

interface DataRenderedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface HeaderRenderingEvent {
	(event: Event, ui: HeaderRenderingEventUIParam): void;
}

interface HeaderRenderingEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface HeaderRenderedEvent {
	(event: Event, ui: HeaderRenderedEventUIParam): void;
}

interface HeaderRenderedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;

	/**
	 * Gets a reference to headers table DOM element.
	 */
	table?: Element;
}

interface CaptionRenderingEvent {
	(event: Event, ui: CaptionRenderingEventUIParam): void;
}

interface CaptionRenderingEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface CaptionRenderedEvent {
	(event: Event, ui: CaptionRenderedEventUIParam): void;
}

interface CaptionRenderedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;

	/**
	 * Gets a reference to the caption container.
	 */
	captionContainer?: Element;
}

interface FooterRenderingEvent {
	(event: Event, ui: FooterRenderingEventUIParam): void;
}

interface FooterRenderingEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface FooterRenderedEvent {
	(event: Event, ui: FooterRenderedEventUIParam): void;
}

interface FooterRenderedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;

	/**
	 * Gets a reference to footers table DOM element.
	 */
	table?: Element;
}

interface HeaderCellRenderedEvent {
	(event: Event, ui: HeaderCellRenderedEventUIParam): void;
}

interface HeaderCellRenderedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;

	/**
	 * Gets the column key.
	 */
	columnKey?: string;

	/**
	 * Gets a reference to header cell DOM element.
	 */
	th?: Element;
}

interface RowsRenderingEvent {
	(event: Event, ui: RowsRenderingEventUIParam): void;
}

interface RowsRenderingEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;

	/**
	 * Gets reference to the grid's table body.
	 */
	tbody?: Element;
}

interface RowsRenderedEvent {
	(event: Event, ui: RowsRenderedEventUIParam): void;
}

interface RowsRenderedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;

	/**
	 * Gets reference to the grid's table body.
	 */
	tbody?: Element;
}

interface SchemaGeneratedEvent {
	(event: Event, ui: SchemaGeneratedEventUIParam): void;
}

interface SchemaGeneratedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;

	/**
	 * Gets a reference to data source schema.
	 */
	schema?: any;

	/**
	 * Gets reference to data source.
	 */
	dataSource?: any;
}

interface ColumnsCollectionModifiedEvent {
	(event: Event, ui: ColumnsCollectionModifiedEventUIParam): void;
}

interface ColumnsCollectionModifiedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface RequestErrorEvent {
	(event: Event, ui: RequestErrorEventUIParam): void;
}

interface RequestErrorEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;

	/**
	 * Gets the processed error message sent by the server
	 */
	message?: string;

	/**
	 * Gets a reference to the whole response object
	 */
	response?: any;
}

interface CreatedEvent {
	(event: Event, ui: CreatedEventUIParam): void;
}

interface CreatedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface DestroyedEvent {
	(event: Event, ui: DestroyedEventUIParam): void;
}

interface DestroyedEventUIParam {
	/**
	 * Gets a reference to the grid.
	 */
	owner?: any;
}

interface IgGrid {
	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * Valid values:
	 * "string" The widget width can be set in pixels (px) or percentage (%). Example values: "800px", "800" (defaults to pixels), "100%".
	 * "number" The widget width can be set in pixels as a number. Example values: 800, 700.
	 * "null" will stretch to fit the sum of the columns widths.
	 */
	width?: string|number;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * Valid values:
	 * "string" The widget height can be set in pixels (px) and percentage (%).
	 * "number" The widget height can be set as a number
	 * "null" will stretch vertically to fit data.
	 */
	height?: string|number;

	/**
	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
	 *
	 */
	autoAdjustHeight?: boolean;

	/**
	 * Used for [row virtualization](ui.iggrid#options:rowVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
	 *
	 *
	 * Valid values:
	 * "string" The avarage row height can be set in pixels ("25px").
	 * "number" The avarage row height can be set in pixels as a number (25).
	 */
	avgRowHeight?: string|number;

	/**
	 * Used for [column virtualization](ui.iggrid#options:columnVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels for a column width.
	 *
	 *
	 * Valid values:
	 * "string" The avarage column width can be set in pixels ("25px").
	 * "number" The avarage column width can be set in pixels as a number (25).
	 */
	avgColumnWidth?: string|number;

	/**
	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
	 *
	 *
	 * Valid values:
	 * "string" The default column width can be set in pixels ("100px") or as '*' in order to auto-size based on the cells and header content.
	 * "number" The default column width can be set in pixels as a number (100).
	 */
	defaultColumnWidth?: string|number;

	/**
	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
	 *
	 */
	autoGenerateColumns?: boolean;

	/**
	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
	 *
	 */
	virtualization?: boolean;

	/**
	 * Determines row virtualization mode.
	 *
	 *
	 * Valid values:
	 * "fixed" Renders only the visible rows and/or columns in the grid. On scrolling the same rows and/or columns are updated with new data from the data source. Only fixed virtualization can work with column virtualization at the same time. Fixed virtualization is not supported by some grid features: Resizing, Group By, Responsive.
	 * "continuous" renders a pre-defined number of rows in the grid. On scrolling the continuous virtualization loads another portion of rows and disposes the current one.
	 */
	virtualizationMode?: string;

	/**
	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
	 *
	 */
	rowVirtualization?: boolean;

	/**
	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.iggrid#options:virtualization) to true and [virtualizationMode](ui.iggrid#options:virtualizationMode) to "fixed".
	 *
	 */
	columnVirtualization?: boolean;

	/**
	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
	 *
	 */
	virtualizationMouseWheelStep?: number;

	/**
	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
	 *
	 */
	adjustVirtualHeights?: boolean;

	/**
	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
	 *
	 *
	 * Valid values:
	 * "infragistics" The grid will use the Infragistics Templating engine to render its [column templates](ui.iggrid#options:columns.template) and specific parts of the UI.
	 * "jsRender" The grid will use jsRender to render its [column templates](ui.iggrid#options:columns.template) and specific parts of the UI.
	 */
	templatingEngine?: string;

	/**
	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
	 *
	 */
	columns?: IgGridColumn[];

	/**
	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
	 *
	 *
	 * Valid values:
	 * "array" dataSource as an array
	 * "object" ddataSource as an object
	 * "string" dataSource as a string
	 */
	dataSource?: Array<any>|Object|string;

	/**
	 * Specifies a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
	 *
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
	 *
	 */
	dataSourceType?: string;

	/**
	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
	 *
	 */
	responseDataKey?: string;

	/**
	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
	 */
	responseTotalRecCountKey?: string;

	/**
	 * Specifies the HTTP verb to be used to issue the requests to a remote data source.
	 *
	 */
	requestType?: string;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	responseContentType?: string;

	/**
	 * Controls the visibility of the grid header.
	 *
	 */
	showHeader?: boolean;

	/**
	 * Controls the visibility of the grid footer.
	 *
	 */
	showFooter?: boolean;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
	 *
	 */
	fixedHeaders?: boolean;

	/**
	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
	 *
	 */
	fixedFooters?: boolean;

	/**
	 * Caption text that will be shown above the grid header.
	 *
	 */
	caption?: string;

	/**
	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
	 *
	 */
	features?: IgGridFeature[];

	/**
	 * Initial tabIndex attribute that will be set on all focusable elements.
	 *
	 */
	tabIndex?: number;

	/**
	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
	 *
	 */
	localSchemaTransform?: boolean;

	/**
	 * Key of the column containing unique identifiers for the data records.
	 *
	 */
	primaryKey?: string;

	/**
	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
	 *
	 */
	serializeTransactionLog?: boolean;

	/**
	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
	 *
	 */
	autoCommit?: boolean;

	/**
	 * If set to true, the following behavior will take place:
	 * If a new row is added, and then deleted, there will be no transaction added to the log.
	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
	 *
	 */
	aggregateTransactions?: boolean;

	/**
	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 *
	 * Valid values:
	 * "date" formats only Date columns
	 * "time" formats only Time columns
	 * "number" formats only number columns
	 * "dateandnumber" formats both Date and number columns
	 * "true" formats Date and number columns
	 * "false" auto formatting is disabled
	 */
	autoFormat?: string|boolean;

	/**
	 * Gets sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
	 *
	 */
	renderCheckboxes?: boolean;

	/**
	 * URL to which updating requests will be made.
	 *
	 */
	updateUrl?: string;

	/**
	 * Settings related to REST compliant update routines.
	 *
	 */
	restSettings?: IgGridRestSettings;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
	 *
	 */
	alternateRowStyles?: boolean;

	/**
	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
	 *
	 */
	autofitLastColumn?: boolean;

	/**
	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 *
	 */
	enableHoverStyles?: boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 *
	 */
	enableUTCDates?: boolean;

	/**
	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
	 *
	 */
	mergeUnboundColumns?: boolean;

	/**
	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
	 *
	 */
	jsonpRequest?: boolean;

	/**
	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
	 *
	 */
	enableResizeContainerCheck?: boolean;

	/**
	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
	 *
	 *
	 * Valid values:
	 * "none" Always hide the feature chooser icon; The feature chooser is shown on tapping/clicking the column header.
	 * "desktopOnly" Always show the icon on desktop but hide when touch device detected.
	 * "always" Always show it in any environment. Chooser is shown when tapping the gear icon or column header.
	 */
	featureChooserIconDisplay?: string;

	/**
	 * Settings related to content scrolling.
	 *
	 */
	scrollSettings?: IgGridScrollSettings;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired when a cell is clicked.
	 */
	cellClick?: CellClickEvent;

	/**
	 * Event fired when a cell is right clicked.
	 */
	cellRightClick?: CellRightClickEvent;

	/**
	 * Event fired before data binding takes place.
	 *
	 * Return false in order to cancel data binding.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event fired after data binding is complete.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event fired before the grid starts rendering (all contents).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 * Return false in order to cancel grid rendering.
	 */
	rendering?: RenderingEvent;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 */
	rendered?: RenderedEvent;

	/**
	 * Event fired before the TBODY holding the data records starts its rendering.
	 * Return false in order to cancel data records rendering.
	 */
	dataRendering?: DataRenderingEvent;

	/**
	 * Event fired after all of the data records in the grid table body have been rendered.
	 */
	dataRendered?: DataRenderedEvent;

	/**
	 * Event fired before the header starts its rendering.
	 * Return false in order to cancel header rendering.
	 */
	headerRendering?: HeaderRenderingEvent;

	/**
	 * Event fired after the header has been rendered.
	 */
	headerRendered?: HeaderRenderedEvent;

	/**
	 * Event fired before the caption starts its rendering.
	 * Return false in order to cancel caption rendering.
	 */
	captionRendering?: CaptionRenderingEvent;

	/**
	 * Event fired after the caption has been rendered.
	 */
	captionRendered?: CaptionRenderedEvent;

	/**
	 * Event fired before the footer starts its rendering.
	 *
	 * Return false in order to cancel footer rendering.
	 */
	footerRendering?: FooterRenderingEvent;

	/**
	 * Event fired after the footer has been rendered.
	 */
	footerRendered?: FooterRenderedEvent;

	/**
	 * Event fired after every TH in the grid header has been rendered.
	 */
	headerCellRendered?: HeaderCellRenderedEvent;

	/**
	 * Event fired before actual data rows (TRs) are rendered.
	 * Return false in order to cancel rows rendering.
	 */
	rowsRendering?: RowsRenderingEvent;

	/**
	 * Event fired after data rows are rendered.
	 */
	rowsRendered?: RowsRenderedEvent;

	/**
	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
	 */
	schemaGenerated?: SchemaGeneratedEvent;

	/**
	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
	 */
	columnsCollectionModified?: ColumnsCollectionModifiedEvent;

	/**
	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
	 * such as data binding, paging, sorting, etc.
	 */
	requestError?: RequestErrorEvent;

	/**
	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
	 */
	created?: CreatedEvent;

	/**
	 * Fired when the grid is destroyed
	 */
	destroyed?: DestroyedEvent;

	/**
	 * Option for igGrid
	 */
	[optionName: string]: any;
}
interface IgGridMethods {
	/**
	 * Returns the element holding the data records
	 */
	widget(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.iggrid#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.iggrid#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Returns whether grid has non-data fixed columns(e.g. row selectors column)
	 */
	hasFixedDataSkippedColumns(): boolean;

	/**
	 * Returns true if grid has at least one fixed columns(even if a non-data column - like row-selectors column)
	 */
	hasFixedColumns(): boolean;

	/**
	 * Returns the current fixing direction. NOTE - use only if ColumnFixing feature is enabled
	 * @return left|right
	 */
	fixingDirection(): string;

	/**
	 * Returns whether the column with identifier colKey is fixed
	 *
	 * @param colKey An identifier of the column which should be checked. It can be a key or visible index.
	 */
	isFixedColumn(colKey: Object): boolean;

	/**
	 * Called to detect whether grid container is resized. When autoAdjustHeight is true and height of the grid is changed then the height of grid is re-set.
	 */
	resizeContainer(): void;

	/**
	 * Returns whether the header identified by colKey is multicolumn header(has children)
	 *
	 * @param colKey value of the column key
	 */
	isGroupHeader(colKey: string): Object;

	/**
	 * Returns an object that contains information on the passed Dom element
	 *
	 * rowId - the id of the record associated with the element - if primaryKey is not set this will be null.
	 * rowIndex - the index (in the DOM) of the row associated with the element.
	 * recordIndex - index of the data record associated with this element in the current dataView.
	 * columnObject  - the column object associated with this element ( if the element is tr this will be null)
	 *
	 * @param elem The Dom element or jQuery object which can be a TD or TR element from the grid.
	 */
	getElementInfo(elem: Element): Object;

	/**
	 * Returns the ID of the TABLE element where data records are rendered
	 */
	id(): string;

	/**
	 * Returns the DIV that is the topmost container of the grid widget
	 */
	container(): Element;

	/**
	 * Returns the table that contains the header cells
	 */
	headersTable(): Element;

	/**
	 * Returns the table that contains the footer cells
	 */
	footersTable(): Element;

	/**
	 * Returns the DIV that is used as a scroll container for the grid contents
	 */
	scrollContainer(): Element;

	/**
	 * Returns the DIV that is the topmost container of the fixed grid - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedContainer(): Element;

	/**
	 * Returns the DIV that is the topmost container of the fixed body grid - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedBodyContainer(): Element;

	/**
	 * Returns container(jQuery representation) containing fixed footer - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedFooterContainer(): Object;

	/**
	 * Returns container(jQuery representation) containing fixed header - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedHeaderContainer(): Object;

	/**
	 * Returns the table that contains the FIXED header cells - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedHeadersTable(): Element;

	/**
	 * Returns the table that contains the footer cells - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedFootersTable(): Element;

	/**
	 * Returns the cell TD element at the specified location
	 *
	 * @param x The column index.
	 * @param y The row index.
	 * @param isFixed Optional parameter - if true get cell TD at the specified location from the fixed table
	 */
	cellAt(x: number, y: number, isFixed: boolean): Element;

	/**
	 * Returns the cell TD element by row id and column key
	 *
	 * @param rowId The id of the row.
	 * @param columnKey The column key.
	 */
	cellById(rowId: Object, columnKey: string): Element;

	/**
	 * Returns the fixed table - contains fixed columns(in ColumnFixing scenario). If there aren't fixed columns returns the grid table
	 */
	fixedTable(): Object;

	/**
	 * Gets all immediate children of the current grid
	 */
	immediateChildrenWidgets(): any[];

	/**
	 * Gets all children of the current grid, recursively
	 */
	childrenWidgets(): any[];

	/**
	 * Gets all children's elements of the current grid, recursively
	 */
	children(): any[];

	/**
	 * Gets all immediate children's elements of the current grid
	 */
	immediateChildren(): any[];

	/**
	 * Returns the row (TR element) at the specified index. jQuery selectors aren't used for performance reasons
	 *
	 * @param i The row index.
	 */
	rowAt(i: number): Element;

	/**
	 * Returns the row TR element by row id
	 *
	 * @param rowId The id of the row.
	 * @param isFixed Specify search in the fixed container.
	 */
	rowById(rowId: Object, isFixed?: boolean): Element;

	/**
	 * Returns the fixed row (TR element) at the specified index. jQuery selectors aren't used for performance reasons(in ColumnFixing scenario - only when there is at least one fixed column)
	 *
	 * @param i The row index.
	 */
	fixedRowAt(i: number): Element;

	/**
	 * Returns a list of all fixed TR elements holding data in the grid(in ColumnFixing scenario - only when there is at least one fixed column)
	 */
	fixedRows(): any[];

	/**
	 * Returns a list of all TR elements holding data in the grid(when there is at least one fixed column returns rows only in the UNFIXED table)
	 */
	rows(): any[];

	/**
	 * Returns all data fixed rows recursively, not only the immediate ones(in ColumnFixing scenario - only when there is at least one fixed column)
	 */
	allFixedRows(): any[];

	/**
	 * Returns all data rows recursively, not only the immediate ones(when there is at least one fixed column returns rows only in the UNFIXED table)
	 */
	allRows(): any[];

	/**
	 * Returns a column object by the specified column key
	 *
	 * @param key The column key.
	 */
	columnByKey(key: string): Object;

	/**
	 * Returns a column object by the specified header text. If there are multiple matches, returns the first one.
	 *
	 * @param text The column header text.
	 */
	columnByText(text: string): Object;

	/**
	 * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
	 * If multiple selection is disabled the function will return null.
	 */
	selectedCells(): any[];

	/**
	 * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
	 * If multiple selection is disabled the function will return null.
	 */
	selectedRows(): any[];

	/**
	 * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
	 * If multiple selection is enabled the function will return null.
	 */
	selectedCell(): Object;

	/**
	 * Returns the currently selected row that has the format { element: , index: }, if any.
	 * If multiple selection is enabled the function will return null.
	 */
	selectedRow(): Object;

	/**
	 * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
	 */
	activeCell(): Object;

	/**
	 * Returns the currently active (focused) row that has the format { element: , index: }, if any.
	 */
	activeRow(): Object;

	/**
	 * Retrieves a cell value using the row index and the column key. If a primaryKey is defined, rowId is assumed to be the row Key (not index).
	 * If primary key is not defined, then rowId is converted to a number and is used as a row index.
	 *
	 * @param rowId Row index or row key (primary key).
	 * @param colKey The column key.
	 */
	getCellValue(rowId: Object, colKey: string): Object;

	/**
	 * Returns the cell text. If colKey is a number, the index of the column is used (instead of a column name)- does not apply when using a Multi-Row Layout grid.
	 * This is the actual text (or HTML string) for the contents of the cell.
	 *
	 * @param rowId Row index or row data key (primary key)
	 * @param colKey Column key.
	 */
	getCellText(rowId: Object, colKey: string): string;

	/**
	 * Sets a new template for a column after initialization and renders the grid if not explicitly disabled. This method will replace any existing explicitly set row template and will build one anew from the column ones.
	 *
	 * @param col An identifier of the column to set template for (index or key)
	 * @param tmpl The column template to set
	 * @param render Should the grid rerender after template is set
	 */
	setColumnTemplate(col: Object, tmpl: string, render?: boolean): void;

	/**
	 * Commits all pending transactions to the client data source. Note that there won't be anything to commit on the UI, since it is updated instantly. In order to rollback the actual UI, a call to dataBind() is required.
	 *
	 * @param rowId If specified, will commit only that transaction corresponding to the specified record key.
	 */
	commit(rowId?: Object): void;

	/**
	 * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
	 *
	 * @param rowId If specified, will only rollback the transactions with that row id.
	 * @param updateUI Whether to update the UI or not.
	 */
	rollback(rowId?: Object, updateUI?: boolean): any[];

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings).
	 * That is a wrapper for this.dataSource.findRecordByKey(key).
	 *
	 * @param key Primary key of the record
	 */
	findRecordByKey(key: Object): Object;

	/**
	 * Returns a standalone object (copy) that represents the committed transactions, but detached from the data source.
	 * That is a wrapper for this.dataSource.getDetachedRecord(t).
	 *
	 * @param t A transaction object.
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source.
	 * That is a wrapper for this.dataSource.pendingTransactions().
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 * That is a wrapper for this.dataSource.allTransactions().
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently.
	 * That is a wrapper for this.dataSource.transactionsAsString().
	 */
	transactionsAsString(): string;

	/**
	 * Invokes an AJAX request to the updateUrl option (if specified) and passes the serialized transaction log (a serialized JSON string) as part of the POST request.
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Adds a new row (TR) to the grid, by taking a data row object. Assumes the record will have the primary key.
	 *
	 * @param rec Identifier/key of row. If missing, then number of rows in grid is used.
	 */
	renderNewRow(rec?: string): void;

	/**
	 * If the data source points to a local JSON array of data, and it is necessary to reset it at runtime, it must be done through this API member instead of the options (options.dataSource)
	 *
	 * @param dataSource New data source object.
	 */
	dataSourceObject(dataSource: Object): void;

	/**
	 * Returns the total number of records in the underlying backend. If paging or filtering is enabled, this may differ from the number of records in the client-side data source.
	 * In order for this to work, the response JSON/XML must include a property that specifies the total number of records, which name is specified by options.responseTotalRecCountKey.
	 * This functionality is completely delegated to the data source control.
	 */
	totalRecordsCount(): number;

	/**
	 * Causes the grid to data bind to the data source (local or remote) , and re-render all of the data as well
	 *
	 * @param internal
	 */
	dataBind(internal: Object): void;

	/**
	 * Moves a visible column at a specified place, in front or behind a target column or at a target index
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
	 * @param target An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
	 * @param after Specifies whether the column moved should be moved after or before the target column. This parameter is disregarded if there is no target column specified but a target index is used.
	 * @param inDom Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
	 * @param callback Specifies a custom function to be called when the column is moved.
	 */
	moveColumn(column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;

	/**
	 * Shows a hidden column. If the column is not hidden the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a column index. If a string is provided it will be used as a column key.
	 * @param callback Specifies a custom function to be called when the column is shown(optional)
	 */
	showColumn(column: Object, callback: Function): void;

	/**
	 * Hides a visible column. If the column is hidden the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a column index else if a string is provided it will be used as a column key.
	 * @param callback Specifies a custom function to be called when the column is hidden(optional)
	 */
	hideColumn(column: Object, callback: Function): void;

	/**
	 * Gets unbound values for the specified column key. If key is not specified returns all unboundvalues
	 *
	 * @param key column key
	 */
	getUnboundValues(key: string): Object;

	/**
	 * Sets unbound values for the unbound column with the specified key. If removeOldValues is true then values(if any) for the unbound columns are re-set with the new values
	 *
	 * @param key key of the unbound column
	 * @param values array of values to be set on unbound values
	 * @param removeOldValues if true removes current unbound values(if any) for the specified column and apply the new ones specified in parameter values. Otherwise merge current values with the specified in parameter values
	 */
	setUnboundValues(key: string, values: any[], removeOldValues: Object): void;

	/**
	 * Sets unbound value for the unbound cell by the specified column key and row primary key.
	 *
	 * @param col key of the unbound column
	 * @param rowId primary key value of the row
	 * @param val value to be set on unbound cell
	 * @param notToRender if false will re-render the row
	 */
	setUnboundValueByPK(col: string, rowId: string, val: Object, notToRender: Object): void;

	/**
	 * Returns an unbound column with the specified key. If not found returns null
	 *
	 * @param key a column key
	 */
	getUnboundColumnByKey(key: string): Object;

	/**
	 * Returns whether there is vertical scrollbar. Because of perfrormance issues in older Internet Explorer especially 8,9 - there is no need to check if height is not set - there is no scrollbar OR if row virtualization is enabled - it is supposed there is vertical scrollbar
	 */
	hasVerticalScrollbar(): Object;

	/**
	 * Auto resize columns that have property width set to "*" so content to be auto-fitted(not shrinked/cutted). Auto-resizing is applied ONLY for visible columns
	 */
	autoSizeColumns(): void;

	/**
	 * Calculates the width of the column so its content to be auto-fitted to the width of the data in it(the content should NOT be shrinked/cutted)
	 *
	 * @param columnIndex Visible column index
	 */
	calculateAutoFitColumnWidth(columnIndex: number): number;

	/**
	 * Get visible index by specified column key. If column is not found or is hidden then returns -1.
	 * Note: Method does not count column groups (Multi-Column Headers).
	 *
	 * @param columnKey columnKey
	 * @param includeDataSkip Optional parameter - if set to true include non data columns(like expander column, row selectors column, etc.) in calculations
	 */
	getVisibleIndexByKey(columnKey: string, includeDataSkip: boolean): number;

	/**
	 * When called the method re-renders the whole grid(also rebinds to the data source) and renders the cols object
	 *
	 * @param cols an array of column objects
	 */
	renderMultiColumnHeader(cols: any[]): void;

	/**
	 * Scroll to the specified row or specified position(in pixels)
	 *
	 * @param scrollerPosition An identifier of the vertical scroll position. When it is string then it is interpreted as pixels otherwise it is the row number
	 */
	virtualScrollTo(scrollerPosition: Object): void;

	/**
	 * Returns column object and visible index for the table cell(TD) which is passed as argument
	 *
	 * @param $td cell(TD) - either DOM TD element or jQuery object
	 */
	getColumnByTD($td: Object): Object;

	/**
	 * Destroy is part of the jQuery UI widget API and does the following:
	 * 1. Remove custom CSS classes that were added.
	 * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
	 * 3. Unbind all events that were bound.
	 *
	 * @param notToCallDestroy
	 */
	destroy(notToCallDestroy: Object): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igGrid"): IgGridMethods;
}

interface JQuery {
	igGrid(methodName: "widget"): void;
	igGrid(methodName: "changeRegional"): void;
	igGrid(methodName: "hasFixedDataSkippedColumns"): boolean;
	igGrid(methodName: "hasFixedColumns"): boolean;
	igGrid(methodName: "fixingDirection"): string;
	igGrid(methodName: "isFixedColumn", colKey: Object): boolean;
	igGrid(methodName: "resizeContainer"): void;
	igGrid(methodName: "isGroupHeader", colKey: string): Object;
	igGrid(methodName: "getElementInfo", elem: Element): Object;
	igGrid(methodName: "id"): string;
	igGrid(methodName: "container"): Element;
	igGrid(methodName: "headersTable"): Element;
	igGrid(methodName: "footersTable"): Element;
	igGrid(methodName: "scrollContainer"): Element;
	igGrid(methodName: "fixedContainer"): Element;
	igGrid(methodName: "fixedBodyContainer"): Element;
	igGrid(methodName: "fixedFooterContainer"): Object;
	igGrid(methodName: "fixedHeaderContainer"): Object;
	igGrid(methodName: "fixedHeadersTable"): Element;
	igGrid(methodName: "fixedFootersTable"): Element;
	igGrid(methodName: "cellAt", x: number, y: number, isFixed: boolean): Element;
	igGrid(methodName: "cellById", rowId: Object, columnKey: string): Element;
	igGrid(methodName: "fixedTable"): Object;
	igGrid(methodName: "immediateChildrenWidgets"): any[];
	igGrid(methodName: "childrenWidgets"): any[];
	igGrid(methodName: "children"): any[];
	igGrid(methodName: "immediateChildren"): any[];
	igGrid(methodName: "rowAt", i: number): Element;
	igGrid(methodName: "rowById", rowId: Object, isFixed?: boolean): Element;
	igGrid(methodName: "fixedRowAt", i: number): Element;
	igGrid(methodName: "fixedRows"): any[];
	igGrid(methodName: "rows"): any[];
	igGrid(methodName: "allFixedRows"): any[];
	igGrid(methodName: "allRows"): any[];
	igGrid(methodName: "columnByKey", key: string): Object;
	igGrid(methodName: "columnByText", text: string): Object;
	igGrid(methodName: "selectedCells"): any[];
	igGrid(methodName: "selectedRows"): any[];
	igGrid(methodName: "selectedCell"): Object;
	igGrid(methodName: "selectedRow"): Object;
	igGrid(methodName: "activeCell"): Object;
	igGrid(methodName: "activeRow"): Object;
	igGrid(methodName: "getCellValue", rowId: Object, colKey: string): Object;
	igGrid(methodName: "getCellText", rowId: Object, colKey: string): string;
	igGrid(methodName: "setColumnTemplate", col: Object, tmpl: string, render?: boolean): void;
	igGrid(methodName: "commit", rowId?: Object): void;
	igGrid(methodName: "rollback", rowId?: Object, updateUI?: boolean): any[];
	igGrid(methodName: "findRecordByKey", key: Object): Object;
	igGrid(methodName: "getDetachedRecord", t: Object): Object;
	igGrid(methodName: "pendingTransactions"): any[];
	igGrid(methodName: "allTransactions"): any[];
	igGrid(methodName: "transactionsAsString"): string;
	igGrid(methodName: "saveChanges", success: Function, error: Function): void;
	igGrid(methodName: "renderNewRow", rec?: string): void;
	igGrid(methodName: "dataSourceObject", dataSource: Object): void;
	igGrid(methodName: "totalRecordsCount"): number;
	igGrid(methodName: "dataBind", internal: Object): void;
	igGrid(methodName: "moveColumn", column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
	igGrid(methodName: "showColumn", column: Object, callback: Function): void;
	igGrid(methodName: "hideColumn", column: Object, callback: Function): void;
	igGrid(methodName: "getUnboundValues", key: string): Object;
	igGrid(methodName: "setUnboundValues", key: string, values: any[], removeOldValues: Object): void;
	igGrid(methodName: "setUnboundValueByPK", col: string, rowId: string, val: Object, notToRender: Object): void;
	igGrid(methodName: "getUnboundColumnByKey", key: string): Object;
	igGrid(methodName: "hasVerticalScrollbar"): Object;
	igGrid(methodName: "autoSizeColumns"): void;
	igGrid(methodName: "calculateAutoFitColumnWidth", columnIndex: number): number;
	igGrid(methodName: "getVisibleIndexByKey", columnKey: string, includeDataSkip: boolean): number;
	igGrid(methodName: "renderMultiColumnHeader", cols: any[]): void;
	igGrid(methodName: "virtualScrollTo", scrollerPosition: Object): void;
	igGrid(methodName: "getColumnByTD", $td: Object): Object;
	igGrid(methodName: "destroy", notToCallDestroy: Object): void;
	igGrid(methodName: "changeLocale", $container: Object): void;
	igGrid(methodName: "changeGlobalLanguage"): void;
	igGrid(methodName: "changeGlobalRegional"): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data  ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "autoAdjustHeight"): boolean;

	/**
	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "autoAdjustHeight", optionValue: boolean): void;

	/**
	 * Used for [row virtualization](ui.iggrid#options:rowVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "avgRowHeight"): string|number;

	/**
	 * Used for [row virtualization](ui.iggrid#options:rowVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "avgRowHeight", optionValue: string|number): void;

	/**
	 * Used for [column virtualization](ui.iggrid#options:columnVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels for a column width.
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "avgColumnWidth"): string|number;

	/**
	 * Used for [column virtualization](ui.iggrid#options:columnVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels for a column width.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "avgColumnWidth", optionValue: string|number): void;

	/**
	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "defaultColumnWidth"): string|number;

	/**
	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "defaultColumnWidth", optionValue: string|number): void;

	/**
	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "autoGenerateColumns"): boolean;

	/**
	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "autoGenerateColumns", optionValue: boolean): void;

	/**
	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "virtualization"): boolean;

	/**
	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "virtualization", optionValue: boolean): void;

	/**
	 * Determines row virtualization mode.
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "virtualizationMode"): string;

	/**
	 * Determines row virtualization mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "virtualizationMode", optionValue: string): void;

	/**
	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "rowVirtualization"): boolean;

	/**
	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "rowVirtualization", optionValue: boolean): void;

	/**
	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.iggrid#options:virtualization) to true and [virtualizationMode](ui.iggrid#options:virtualizationMode) to "fixed".
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "columnVirtualization"): boolean;

	/**
	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.iggrid#options:virtualization) to true and [virtualizationMode](ui.iggrid#options:virtualizationMode) to "fixed".
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "columnVirtualization", optionValue: boolean): void;

	/**
	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "virtualizationMouseWheelStep"): number;

	/**
	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "virtualizationMouseWheelStep", optionValue: number): void;

	/**
	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "adjustVirtualHeights"): boolean;

	/**
	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "adjustVirtualHeights", optionValue: boolean): void;

	/**
	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "templatingEngine"): string;

	/**
	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "templatingEngine", optionValue: string): void;

	/**
	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "columns"): IgGridColumn[];

	/**
	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "columns", optionValue: IgGridColumn[]): void;

	/**
	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "dataSource"): Array<any>|Object|string;

	/**
	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "dataSource", optionValue: Array<any>|Object|string): void;

	/**
	 * Gets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
	 */
	igGrid(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * Gets the HTTP verb to be used to issue the requests to a remote data source.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "requestType"): string;

	/**
	 * Sets the HTTP verb to be used to issue the requests to a remote data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "responseContentType"): string;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;

	/**
	 * Controls the visibility of the grid header.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "showHeader"): boolean;

	/**
	 * Controls the visibility of the grid header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "showHeader", optionValue: boolean): void;

	/**
	 * Controls the visibility of the grid footer.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "showFooter"): boolean;

	/**
	 * Controls the visibility of the grid footer.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "showFooter", optionValue: boolean): void;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "fixedHeaders"): boolean;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "fixedHeaders", optionValue: boolean): void;

	/**
	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "fixedFooters"): boolean;

	/**
	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "fixedFooters", optionValue: boolean): void;

	/**
	 * Caption text that will be shown above the grid header.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "caption"): string;

	/**
	 * Caption text that will be shown above the grid header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "caption", optionValue: string): void;

	/**
	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "features"): IgGridFeature[];

	/**
	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "features", optionValue: IgGridFeature[]): void;

	/**
	 * Initial tabIndex attribute that will be set on all focusable elements.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * Initial tabIndex attribute that will be set on all focusable elements.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "localSchemaTransform"): boolean;

	/**
	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "localSchemaTransform", optionValue: boolean): void;

	/**
	 * Key of the column containing unique identifiers for the data records.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "primaryKey"): string;

	/**
	 * Key of the column containing unique identifiers for the data records.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "primaryKey", optionValue: string): void;

	/**
	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "serializeTransactionLog"): boolean;

	/**
	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "serializeTransactionLog", optionValue: boolean): void;

	/**
	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "autoCommit"): boolean;

	/**
	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "autoCommit", optionValue: boolean): void;

	/**
	 * If set to true, the following behavior will take place:
	 * If a new row is added, and then deleted, there will be no transaction added to the log.
	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "aggregateTransactions"): boolean;

	/**
	 * If set to true, the following behavior will take place:
	 * If a new row is added, and then deleted, there will be no transaction added to the log.
	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "aggregateTransactions", optionValue: boolean): void;

	/**
	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "autoFormat"): string|boolean;

	/**
	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "autoFormat", optionValue: string|boolean): void;

	/**
	 * Gets  ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "renderCheckboxes"): boolean;

	/**
	 * Sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "renderCheckboxes", optionValue: boolean): void;

	/**
	 * URL to which updating requests will be made.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "updateUrl"): string;

	/**
	 * URL to which updating requests will be made.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "updateUrl", optionValue: string): void;

	/**
	 * Settings related to REST compliant update routines.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "restSettings"): IgGridRestSettings;

	/**
	 * Settings related to REST compliant update routines.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "restSettings", optionValue: IgGridRestSettings): void;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "alternateRowStyles"): boolean;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "alternateRowStyles", optionValue: boolean): void;

	/**
	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "autofitLastColumn"): boolean;

	/**
	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "autofitLastColumn", optionValue: boolean): void;

	/**
	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "enableHoverStyles"): boolean;

	/**
	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "enableHoverStyles", optionValue: boolean): void;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "enableUTCDates"): boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "enableUTCDates", optionValue: boolean): void;

	/**
	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "mergeUnboundColumns"): boolean;

	/**
	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "mergeUnboundColumns", optionValue: boolean): void;

	/**
	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "jsonpRequest"): boolean;

	/**
	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "jsonpRequest", optionValue: boolean): void;

	/**
	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "enableResizeContainerCheck"): boolean;

	/**
	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "enableResizeContainerCheck", optionValue: boolean): void;

	/**
	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "featureChooserIconDisplay"): string;

	/**
	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "featureChooserIconDisplay", optionValue: string): void;

	/**
	 * Settings related to content scrolling.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "scrollSettings"): IgGridScrollSettings;

	/**
	 * Settings related to content scrolling.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "scrollSettings", optionValue: IgGridScrollSettings): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGrid(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGrid(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGrid(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired when a cell is clicked.
	 */
	igGrid(optionLiteral: 'option', optionName: "cellClick"): CellClickEvent;

	/**
	 * Event fired when a cell is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "cellClick", optionValue: CellClickEvent): void;

	/**
	 * Event fired when a cell is right clicked.
	 */
	igGrid(optionLiteral: 'option', optionName: "cellRightClick"): CellRightClickEvent;

	/**
	 * Event fired when a cell is right clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "cellRightClick", optionValue: CellRightClickEvent): void;

	/**
	 * Event fired before data binding takes place.
	 *
	 * Return false in order to cancel data binding.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event fired before data binding takes place.
	 *
	 * Return false in order to cancel data binding.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event fired after data binding is complete.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event fired after data binding is complete.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event fired before the grid starts rendering (all contents).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 * Return false in order to cancel grid rendering.
	 */
	igGrid(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Event fired before the grid starts rendering (all contents).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 * Return false in order to cancel grid rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 */
	igGrid(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Event fired before the TBODY holding the data records starts its rendering.
	 * Return false in order to cancel data records rendering.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataRendering"): DataRenderingEvent;

	/**
	 * Event fired before the TBODY holding the data records starts its rendering.
	 * Return false in order to cancel data records rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataRendering", optionValue: DataRenderingEvent): void;

	/**
	 * Event fired after all of the data records in the grid table body have been rendered.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataRendered"): DataRenderedEvent;

	/**
	 * Event fired after all of the data records in the grid table body have been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "dataRendered", optionValue: DataRenderedEvent): void;

	/**
	 * Event fired before the header starts its rendering.
	 * Return false in order to cancel header rendering.
	 */
	igGrid(optionLiteral: 'option', optionName: "headerRendering"): HeaderRenderingEvent;

	/**
	 * Event fired before the header starts its rendering.
	 * Return false in order to cancel header rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "headerRendering", optionValue: HeaderRenderingEvent): void;

	/**
	 * Event fired after the header has been rendered.
	 */
	igGrid(optionLiteral: 'option', optionName: "headerRendered"): HeaderRenderedEvent;

	/**
	 * Event fired after the header has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "headerRendered", optionValue: HeaderRenderedEvent): void;

	/**
	 * Event fired before the caption starts its rendering.
	 * Return false in order to cancel caption rendering.
	 */
	igGrid(optionLiteral: 'option', optionName: "captionRendering"): CaptionRenderingEvent;

	/**
	 * Event fired before the caption starts its rendering.
	 * Return false in order to cancel caption rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "captionRendering", optionValue: CaptionRenderingEvent): void;

	/**
	 * Event fired after the caption has been rendered.
	 */
	igGrid(optionLiteral: 'option', optionName: "captionRendered"): CaptionRenderedEvent;

	/**
	 * Event fired after the caption has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "captionRendered", optionValue: CaptionRenderedEvent): void;

	/**
	 * Event fired before the footer starts its rendering.
	 *
	 * Return false in order to cancel footer rendering.
	 */
	igGrid(optionLiteral: 'option', optionName: "footerRendering"): FooterRenderingEvent;

	/**
	 * Event fired before the footer starts its rendering.
	 *
	 * Return false in order to cancel footer rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "footerRendering", optionValue: FooterRenderingEvent): void;

	/**
	 * Event fired after the footer has been rendered.
	 */
	igGrid(optionLiteral: 'option', optionName: "footerRendered"): FooterRenderedEvent;

	/**
	 * Event fired after the footer has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "footerRendered", optionValue: FooterRenderedEvent): void;

	/**
	 * Event fired after every TH in the grid header has been rendered.
	 */
	igGrid(optionLiteral: 'option', optionName: "headerCellRendered"): HeaderCellRenderedEvent;

	/**
	 * Event fired after every TH in the grid header has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "headerCellRendered", optionValue: HeaderCellRenderedEvent): void;

	/**
	 * Event fired before actual data rows (TRs) are rendered.
	 * Return false in order to cancel rows rendering.
	 */
	igGrid(optionLiteral: 'option', optionName: "rowsRendering"): RowsRenderingEvent;

	/**
	 * Event fired before actual data rows (TRs) are rendered.
	 * Return false in order to cancel rows rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "rowsRendering", optionValue: RowsRenderingEvent): void;

	/**
	 * Event fired after data rows are rendered.
	 */
	igGrid(optionLiteral: 'option', optionName: "rowsRendered"): RowsRenderedEvent;

	/**
	 * Event fired after data rows are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "rowsRendered", optionValue: RowsRenderedEvent): void;

	/**
	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
	 */
	igGrid(optionLiteral: 'option', optionName: "schemaGenerated"): SchemaGeneratedEvent;

	/**
	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "schemaGenerated", optionValue: SchemaGeneratedEvent): void;

	/**
	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
	 */
	igGrid(optionLiteral: 'option', optionName: "columnsCollectionModified"): ColumnsCollectionModifiedEvent;

	/**
	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "columnsCollectionModified", optionValue: ColumnsCollectionModifiedEvent): void;

	/**
	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
	 * such as data binding, paging, sorting, etc.
	 */
	igGrid(optionLiteral: 'option', optionName: "requestError"): RequestErrorEvent;

	/**
	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
	 * such as data binding, paging, sorting, etc.
	 *
	 * @optionValue Define event handler function.
	 */
	igGrid(optionLiteral: 'option', optionName: "requestError", optionValue: RequestErrorEvent): void;

	/**
	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
	 */
	igGrid(optionLiteral: 'option', optionName: "created"): CreatedEvent;

	/**
	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "created", optionValue: CreatedEvent): void;

	/**
	 * Fired when the grid is destroyed
	 */
	igGrid(optionLiteral: 'option', optionName: "destroyed"): DestroyedEvent;

	/**
	 * Fired when the grid is destroyed
	 *
	 * @optionValue New value to be set.
	 */
	igGrid(optionLiteral: 'option', optionName: "destroyed", optionValue: DestroyedEvent): void;
	igGrid(options: IgGrid): JQuery;
	igGrid(optionLiteral: 'option', optionName: string): any;
	igGrid(optionLiteral: 'option', options: IgGrid): JQuery;
	igGrid(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGrid(methodName: string, ...methodParams: any[]): any;
}
interface IgGridGroupByGroupedColumn {
	/**
	 * Key of the column that's grouped
	 */
	key?: string;

	/**
	 * sort order - ascending or descending
	 *
	 */
	dir?: any;

	/**
	 * Key of the columnLayout, if the grid is hierarchical
	 *
	 */
	layout?: string;

	/**
	 * [column](ui.iggrid#options:columns) object for the column that is grouped
	 *
	 */
	col?: any;

	/**
	 * Option for IgGridGroupByGroupedColumn
	 */
	[optionName: string]: any;
}

interface IgGridGroupBySummarySettings {
	/**
	 * Specifies the delimiter for multiple summaries.
	 *
	 */
	multiSummaryDelimiter?: string;

	/**
	 * Format of the summary value. By default, two digits are shown after the decimal place. Checkout [Formatting Dates, Numbers and Strings](http://www.igniteui.com/help/formatting-dates-numbers-and-strings) for details on the valid formatting specifiers.
	 *
	 */
	summaryFormat?: string;

	/**
	 * Option for IgGridGroupBySummarySettings
	 */
	[optionName: string]: any;
}

interface IgGridGroupByColumnSettingsSummaries {
	/**
	 * the summary function key
	 *
	 *
	 * Valid values:
	 * "avg" average summary function
	 * "min" minimum summary function
	 * "max" maximum summary function
	 * "sum" sum summary function
	 * "count" count summary function
	 * "custom" custom summary summary function
	 */
	summaryFunction?: string;

	/**
	 * Specifies the summary text that will be shown before the value
	 *
	 */
	text?: string;

	/**
	 * Specifies a custom summary function, which is called for each group, it should return the custom summary result.It takes as argument object with the following signature: {dataRecords: [], array: [], key: "", allGroupData: []} where,
	 * dataRecords - array of grouped (for the [data view](ig.datasource#methods:dataView)) data records,
	 * array - array of cell values for the specified column,
	 * key - key of the grouped column,
	 * allGroupData - array of data records for the group(for the whole data source - not only for the data view)
	 *
	 *
	 * Valid values:
	 * "string" the name of the function as a string located in the global window object.
	 * "function" which will be used for calculating the summary value.
	 */
	customSummary?: string|Function;

	/**
	 * Option for IgGridGroupByColumnSettingsSummaries
	 */
	[optionName: string]: any;
}

interface IgGridGroupByColumnSettings {
	/**
	 * Enables/disables grouping a column from the UI. By default all columns can be grouped.
	 *
	 */
	allowGrouping?: boolean;

	/**
	 * Specifies the initial column grouped state.
	 *
	 */
	isGroupBy?: boolean;

	/**
	 * Reference/name of a function (string or function) used for custom comparison.
	 * The function accepts the following arguments:
	 * val1 - the first value to compare
	 * val2 - the second value to compare
	 * recordsData - an object having three properties: fieldName - the name of the sorted field; record1 - first record to compare; record2 - second record to compare
	 * The function returns the following numeric value:
	 * 0 - indicating that values are equal
	 * 1 - indicating that val1 > val2
	 * -1 - indicating that val1 < val2
	 *
	 *
	 * Valid values:
	 * "string" the name of the function as a string located in the global window object.
	 * "function" function which will be used for custom comparison.
	 */
	compareFunc?: string|Function;

	/**
	 * Specifies a custom group by function, which accepts the column setting, the first and the second value to compare and returns bool. This option is deprecated - please use option [compareFunc](ui.iggridgroupby#options:columnSettings.compareFunc) instead.
	 */
	groupComparerFunction?: Function;

	/**
	 * Reference/name of a function (string or function) which will be used for formatting the cell values. The function should accept a value from the grouped column and return the new formatted value in the label of the row.
	 *
	 *
	 * Valid values:
	 * "string" the name of the function as a string located in the global window object.
	 * "function" which will be used for formatting the cell values.
	 */
	groupLabelFormatter?: string|Function;

	/**
	 * Specifies the sort order - ascending or descending when the column is initially grouped ([isGroupBy](ui.iggridgroupby#options:columnSettings.isGroupBy) = true).
	 *
	 */
	dir?: any;

	/**
	 * A list of aggregation functions to calculate on the column values for each group. When not specified the default aggregate function is "count".
	 *
	 */
	summaries?: IgGridGroupByColumnSettingsSummaries;

	/**
	 * Enables/disables default summaries per group data island or specifies summaries that are applied to specific column no matter the group.
	 *
	 */
	groupSummaries?: any;

	/**
	 * Option for IgGridGroupByColumnSettings
	 */
	[optionName: string]: any;
}

interface IgGridGroupByLocale {
	/**
	 * Specifies the group by area text.
	 *
	 */
	emptyGroupByAreaContent?: string;

	/**
	 * Specifies the text for the hyperlink which opens the GroupBy Dialog.
	 *
	 */
	emptyGroupByAreaContentSelectColumns?: string;

	/**
	 * Specifies the caption for the hyperlink which opens the GroupBy Dialog.
	 *
	 */
	emptyGroupByAreaContentSelectColumnsCaption?: string;

	/**
	 * Specifies the expand groups button tooltip.
	 *
	 */
	expandTooltip?: string;

	/**
	 * Specifies the collapse groups button tooltip.
	 *
	 */
	collapseTooltip?: string;

	/**
	 * Specifies the remove group button tooltip.
	 *
	 */
	removeButtonTooltip?: string;

	/**
	 * Specifies caption for each descending sorted column in GroupBy Dialog.
	 *
	 */
	modalDialogCaptionButtonDesc?: string;

	/**
	 * Specifies caption for each descending sorted column in GroupBy Dialog.
	 *
	 */
	modalDialogCaptionButtonAsc?: string;

	/**
	 * Specifies caption for ungroup button in GroupBy Dialog.
	 *
	 */
	modalDialogCaptionButtonUngroup?: string;

	/**
	 * Specifies text for group button in GroupBy Dialog.
	 *
	 */
	modalDialogGroupByButtonText?: string;

	/**
	 * Specifies caption text for the GroupBy Dialog.
	 *
	 */
	modalDialogCaptionText?: string;

	/**
	 * Specifies label for layouts dropdown in the GroupBy Dialog.
	 *
	 */
	modalDialogDropDownLabel?: string;

	/**
	 * Specifies label for "Clear all" button in the GroupBy Dialog.
	 *
	 */
	modalDialogClearAllButtonLabel?: string;

	/**
	 * Specifies name of the root layout which is shown for the layouts in the modal dialog tree.
	 *
	 */
	modalDialogRootLevelHierarchicalGrid?: string;

	/**
	 * Specifies caption of layouts dropdown button in the GroupBy Dialog.
	 *
	 */
	modalDialogDropDownButtonCaption?: string;

	/**
	 * Specifies text of button which apply changes in modal dialog.
	 *
	 */
	modalDialogButtonApplyText?: string;

	/**
	 * Specifies text of button which cancel changes in modal dialog.
	 *
	 */
	modalDialogButtonCancelText?: string;

	/**
	 * Specifies the summary row title.
	 *
	 */
	summaryRowTitle?: string;

	/**
	 * Specifies the summary icon title.
	 *
	 */
	summaryIconTitle?: string;

	/**
	 * Option for IgGridGroupByLocale
	 */
	[optionName: string]: any;
}

interface GroupedColumnsChangingEvent {
	(event: Event, ui: GroupedColumnsChangingEventUIParam): void;
}

interface GroupedColumnsChangingEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the current groupedColumns.
	 */
	groupedColumns?: any[];

	/**
	 * Gets the object of the new grouped columns that should be applied.(it is set ONLY if called from modal dialog)
	 */
	newGroupedColumns?: any;

	/**
	 * Gets a reference to the current column's key that's being grouped(not set if called from modal dialog).
	 */
	key?: string;

	/**
	 * Gets a reference to the current layout object, if any(not set if called from modal dialog).
	 */
	layout?: any;

	/**
	 * Gets a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog).
	 */
	grid?: any;

	/**
	 * Gets which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup.
	 */
	triggeredBy?: string;
}

interface GroupedColumnsChangedEvent {
	(event: Event, ui: GroupedColumnsChangedEventUIParam): void;
}

interface GroupedColumnsChangedEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the current groupedColumns.
	 */
	groupedColumns?: any[];

	/**
	 * Gets a reference to the current column's key that's being grouped(not set if called from modal dialog).
	 */
	key?: string;

	/**
	 * Gets a reference to the current layout object, if any(not set if called from modal dialog).
	 */
	layout?: any;

	/**
	 * Gets a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog).
	 */
	grid?: any;

	/**
	 * Gets which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup.
	 */
	triggeredBy?: string;
}

interface ModalDialogMovingEvent {
	(event: Event, ui: ModalDialogMovingEventUIParam): void;
}

interface ModalDialogMovingEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;

	/**
	 * Gets the original position of the GroupBy Dialog div as { top, left } object, relative to the page.
	 */
	originalPosition?: any;

	/**
	 * Gets the current position of the GroupBy Dialog div as { top, left } object, relative to the page.
	 */
	position?: any;
}

interface ModalDialogClosingEvent {
	(event: Event, ui: ModalDialogClosingEventUIParam): void;
}

interface ModalDialogClosingEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;
}

interface ModalDialogClosedEvent {
	(event: Event, ui: ModalDialogClosedEventUIParam): void;
}

interface ModalDialogClosedEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;
}

interface ModalDialogOpeningEvent {
	(event: Event, ui: ModalDialogOpeningEventUIParam): void;
}

interface ModalDialogOpeningEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;
}

interface ModalDialogOpenedEvent {
	(event: Event, ui: ModalDialogOpenedEventUIParam): void;
}

interface ModalDialogOpenedEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;
}

interface ModalDialogContentsRenderingEvent {
	(event: Event, ui: ModalDialogContentsRenderingEventUIParam): void;
}

interface ModalDialogContentsRenderingEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;
}

interface ModalDialogContentsRenderedEvent {
	(event: Event, ui: ModalDialogContentsRenderedEventUIParam): void;
}

interface ModalDialogContentsRenderedEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;
}

interface ModalDialogButtonApplyClickEvent {
	(event: Event, ui: ModalDialogButtonApplyClickEventUIParam): void;
}

interface ModalDialogButtonApplyClickEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;

	/**
	 * Gets the array of grouped columns.
	 */
	groupedColumns?: any[];

	/**
	 * Gets the array of column layouts.
	 */
	groupedColumnLayouts?: any[];

	/**
	 * Gets the array of sorted columns.
	 */
	sortingExpr?: any[];
}

interface ModalDialogButtonResetClickEvent {
	(event: Event, ui: ModalDialogButtonResetClickEventUIParam): void;
}

interface ModalDialogButtonResetClickEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;
}

interface ModalDialogGroupingColumnEvent {
	(event: Event, ui: ModalDialogGroupingColumnEventUIParam): void;
}

interface ModalDialogGroupingColumnEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * The key of the column to be grouped.
	 */
	key?: string;

	/**
	 * Gets a reference to the current layout object, if any.
	 */
	layout?: any;
}

interface ModalDialogGroupColumnEvent {
	(event: Event, ui: ModalDialogGroupColumnEventUIParam): void;
}

interface ModalDialogGroupColumnEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * The key of the column to be grouped.
	 */
	key?: string;

	/**
	 * Gets a reference to the current groupedColumns.
	 */
	groupedColumns?: any[];

	/**
	 * Gets a reference to the current layout object, if any.
	 */
	layout?: any;
}

interface ModalDialogUngroupingColumnEvent {
	(event: Event, ui: ModalDialogUngroupingColumnEventUIParam): void;
}

interface ModalDialogUngroupingColumnEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * The key of the column to be grouped.
	 */
	key?: string;

	/**
	 * Get a reference to the current layout object, if any.
	 */
	layout?: string;
}

interface ModalDialogUngroupColumnEvent {
	(event: Event, ui: ModalDialogUngroupColumnEventUIParam): void;
}

interface ModalDialogUngroupColumnEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets a reference to the current groupedColumns.
	 */
	groupedColumns?: any[];

	/**
	 * Gets the key of the column to be grouped.
	 */
	key?: string;

	/**
	 * Get a reference to the current layout object, if any.
	 */
	layout?: any;
}

interface ModalDialogSortGroupedColumnEvent {
	(event: Event, ui: ModalDialogSortGroupedColumnEventUIParam): void;
}

interface ModalDialogSortGroupedColumnEventUIParam {
	/**
	 * Gets access the GroupBy widget object.
	 */
	owner?: any;

	/**
	 * Gets the key of the column to be grouped.
	 */
	key?: string;

	/**
	 * Get a reference to the current layout object, if any.
	 */
	layout?: any;

	/**
	 * Gets whether column should be sorted ascending or descending.
	 */
	isAsc?: boolean;
}

interface IgGridGroupBy {
	/**
	 * Sets the place in the grid where the GroupBy area will be
	 *
	 *
	 * Valid values:
	 * "top" the GroupBy area will be rendered above the grid headers
	 * "hidden" the GroupBy area will not be rendered
	 * "bottom" the GroupBy area will be rendered below the grid footer (and above the pager, if any)
	 */
	groupByAreaVisibility?: string;

	/**
	 * Specifies if after grouping, the grouped rows will be initially expanded or collapsed.
	 *
	 */
	initialExpand?: boolean;

	/**
	 * Specifies when paging is applied and there is at least one grouped column which records should be included in page processing.
	 *
	 *
	 * Valid values:
	 * "allRecords" All records are included in page processing - data records and group-by metadata records
	 * "dataRecordsOnly" Only data records are included in page processing(metadata group-by records are ignored)
	 */
	pagingMode?: string;

	/**
	 * Specifies if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
	 *
	 */
	expansionIndicatorVisibility?: boolean;

	/**
	 * By default, the column width for the header is taken. If this is specified it's used for all headers.
	 *
	 */
	groupByLabelWidth?: number;

	/**
	 * Specifies the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
	 *
	 */
	labelDragHelperOpacity?: number;

	/**
	 * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
	 *
	 */
	indentation?: number;

	/**
	 * default sort order - ascending or descending
	 *
	 *
	 * Valid values:
	 * "asc" The group is sorted in ascending order.
	 * "desc" The group is sorted in descending order.
	 */
	defaultSortingDirection?: string;

	/**
	 * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
	 *
	 */
	groupedColumns?: IgGridGroupByGroupedColumn[];

	/**
	 * Specifies a key to get group by data from the remote response.
	 *
	 */
	resultResponseKey?: string;

	/**
	 * Template for the grouped row's text. Variables available for the template are ${key}, ${val} and ${count}.
	 *
	 */
	groupedRowTextTemplate?: string;

	/**
	 * Specifies whether the GroupBy operation takes place locally on client-side or remotely on server-side.
	 *
	 *
	 * Valid values:
	 * "local" Execute the GroupBy operation locally on client-side.
	 * "remote" Execute the GroupBy operation by a request to the server.
	 */
	type?: string;

	/**
	 * URL param name which specifies a GroupBy [expression](ig.datasource#options:settings.sorting.expressions). When groupByUrlKey, [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
	 *
	 */
	groupByUrlKey?: string;

	/**
	 * URL param value denoting ascending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), groupByUrlKeyAscValue and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
	 *
	 */
	groupByUrlKeyAscValue?: string;

	/**
	 * URL param value denoting descending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and groupByUrlKeyDescValue are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
	 *
	 */
	groupByUrlKeyDescValue?: string;

	/**
	 * Specifies the settings for GroupBy summaries.
	 *
	 */
	summarySettings?: IgGridGroupBySummarySettings;

	/**
	 * Configures individual column settings.
	 *
	 */
	columnSettings?: IgGridGroupByColumnSettings;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the expand indicator tooltip for grouped rows. Use option [locale.expandTooltip](ui.iggridgroupby#options:locale.expandTooltip).
	 */
	expandTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the collapse indicator tooltip for grouped rows. Use option [locale.collapseTooltip](ui.iggridgroupby#options:locale.collapseTooltip).
	 */
	collapseTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the tooltip for the remove button. Use option [locale.removeButtonTooltip](ui.iggridgroupby#options:locale.removeButtonTooltip).
	 */
	removeButtonTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the text of GroupBy button in the GroupBy Dialog. Use option [locale.modalDialogGroupByButtonText](ui.iggridgroupby#options:locale.modalDialogGroupByButtonText).
	 */
	modalDialogGroupByButtonText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each descending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonDesc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonDesc).
	 */
	modalDialogCaptionButtonDesc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each ascending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonAsc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonAsc).
	 */
	modalDialogCaptionButtonAsc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption button ungroup in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonUngroup](ui.iggridgroupby#options:locale.modalDialogCaptionButtonUngroup).
	 */
	modalDialogCaptionButtonUngroup?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for the GroupBy Dialog. Use option [locale.modalDialogCaptionText](ui.iggridgroupby#options:locale.modalDialogCaptionText).
	 */
	modalDialogCaptionText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies label for layouts dropdown in the GroupBy Dialog.  Use option [locale.modalDialogDropDownLabel](ui.iggridgroupby#options:locale.modalDialogDropDownLabel).
	 */
	modalDialogDropDownLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogRootLevelHierarchicalGrid](ui.iggridgroupby#options:locale.modalDialogRootLevelHierarchicalGrid).
	 */
	modalDialogRootLevelHierarchicalGrid?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogDropDownButtonCaption](ui.iggridgroupby#options:locale.modalDialogDropDownButtonCaption).
	 */
	modalDialogDropDownButtonCaption?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies label for "Clear all" button in the GroupBy Dialog. Use option [locale.modalDialogClearAllButtonLabel](ui.iggridgroupby#options:locale.modalDialogClearAllButtonLabel).
	 */
	modalDialogClearAllButtonLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for the hyperlink which opens the GroupBy Dialog. Use option [locale.emptyGroupByAreaContentSelectColumnsCaption](ui.iggridgroupby#options:locale.emptyGroupByAreaContentSelectColumnsCaption).
	 */
	emptyGroupByAreaContentSelectColumnsCaption?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonApplyText](ui.iggridgroupby#options:locale.modalDialogButtonApplyText).
	 */
	modalDialogButtonApplyText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonCancelText](ui.iggridgroupby#options:locale.modalDialogButtonCancelText).
	 */
	modalDialogButtonCancelText?: string;
	locale?: IgGridGroupByLocale;

	/**
	 * Enables/disables immediate column grouping/ungrouping. When false operation is delayed until after "Apply" button is clicked by the user.
	 *
	 */
	modalDialogGroupByOnClick?: boolean;

	/**
	 * Specifies width of layouts dropdown in the GroupBy Dialog
	 *
	 */
	modalDialogDropDownWidth?: number;

	/**
	 * Specifies width of layouts dropdown in the GroupBy Dialog
	 *
	 */
	modalDialogDropDownAreaWidth?: number;

	/**
	 * Specifies time in milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	modalDialogAnimationDuration?: number;

	/**
	 * Specifies width of the GroupBy Dialog
	 *
	 *
	 * Valid values:
	 * "string" The dialog width can be set in pixels (px) or percentage (%). Example values: "800px", "800" (defaults to pixels), "100%".
	 * "number" The dialog width can be set in pixels as a number. Example values: 800, 700.
	 */
	modalDialogWidth?: string|number;

	/**
	 * Specifies height of the GroupBy Dialog
	 *
	 *
	 * Valid values:
	 * "string" The dialog height can be set in pixels (px) or percentage (%). Example values: "800px", "800" (defaults to pixels), "100%".
	 * "number" The dialog height can be set in pixels as a number. Example values: 800, 700.
	 */
	modalDialogHeight?: string|number;

	/**
	 * Format grouped column using the formatter set in [igGrid.columns.formatter](ui.iggrid#options:columns.formatter) or [igGrid.columns.format](ui.iggrid#options:columns.format).
	 *
	 */
	useGridColumnFormatter?: boolean;

	/**
	 * Enables / disables GroupBy persistence between states. Checkout the [GroupBy Persistence](http://www.igniteui.com/help/iggrid-groupby-overview#groupBy-persistence) topic for details.
	 *
	 */
	persist?: boolean;

	/**
	 * Controls containment behavior for the GroupBy Dialog.
	 *
	 *
	 * Valid values:
	 * "owner" The GroupBy Dialog will be draggable only in the grid area
	 * "window" The GroupBy Dialog will be draggable in the whole window area
	 */
	groupByDialogContainment?: string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. Checkout the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic for details.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	inherit?: boolean;

	/**
	 * Specifies default summaries that will appear when grouping by a column on the bottom of each group as a row.This option has a lower priority than the groupSummaries defined under columnSettings for each column.
	 * All default summaries are defined under $.ig.util.defaultSummaryMethods
	 *
	 */
	groupSummaries?: any;

	/**
	 * Specifies the groupSummaries postion inside each group.
	 *
	 *
	 * Valid values:
	 * "top" One summary row will be displayed at the top for each group
	 * "bottom"  One summary row will be displayed at the bottom for each group
	 * "both" Two summary rows will be be display for each group. One on the top and one on the bottom.
	 */
	groupSummariesPosition?: string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
	 */
	groupedColumnsChanging?: GroupedColumnsChangingEvent;

	/**
	 * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from GroupBy modal dialog but key, layout and grid are not set
	 */
	groupedColumnsChanged?: GroupedColumnsChangedEvent;

	/**
	 * Event fired every time the GroupBy Dialog changes its position.
	 */
	modalDialogMoving?: ModalDialogMovingEvent;

	/**
	 * Event fired before the modal dialog is closed.
	 */
	modalDialogClosing?: ModalDialogClosingEvent;

	/**
	 * Event fired after the modal dialog has been closed.
	 */
	modalDialogClosed?: ModalDialogClosedEvent;

	/**
	 * Event fired before the modal dialog is opened.
	 */
	modalDialogOpening?: ModalDialogOpeningEvent;

	/**
	 * Event fired after the modal dialog is already opened.
	 */
	modalDialogOpened?: ModalDialogOpenedEvent;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 */
	modalDialogContentsRendering?: ModalDialogContentsRenderingEvent;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 */
	modalDialogContentsRendered?: ModalDialogContentsRenderedEvent;

	/**
	 * Event fired when the button is Apply is clicked.
	 */
	modalDialogButtonApplyClick?: ModalDialogButtonApplyClickEvent;

	/**
	 * Event fired when reset button is clicked.
	 */
	modalDialogButtonResetClick?: ModalDialogButtonResetClickEvent;

	/**
	 * Event fired when column in modal dialog is clicked to be grouped.
	 */
	modalDialogGroupingColumn?: ModalDialogGroupingColumnEvent;

	/**
	 * Event fired when column in modal dialog is clicked to be grouped.
	 */
	modalDialogGroupColumn?: ModalDialogGroupColumnEvent;

	/**
	 * Event fired when column in modal dialog is clicked to be ungrouped.
	 */
	modalDialogUngroupingColumn?: ModalDialogUngroupingColumnEvent;

	/**
	 * Event fired when column in modal dialog is clicked to be ungrouped.
	 */
	modalDialogUngroupColumn?: ModalDialogUngroupColumnEvent;

	/**
	 * Event fired when column in modal dialog is sorted.
	 */
	modalDialogSortGroupedColumn?: ModalDialogSortGroupedColumnEvent;

	/**
	 * Option for igGridGroupBy
	 */
	[optionName: string]: any;
}
interface IgGridGroupByMethods {
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridgroupby#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridgroupby#options:language) or [locale](ui.iggridgroupby#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.iggridgroupby#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.iggridgroupby#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Open groupby modal dialog
	 */
	openGroupByDialog(): void;

	/**
	 * Close groupby modal dialog
	 */
	closeGroupByDialog(): void;

	/**
	 * Render groupby modal dialog and its content
	 */
	renderGroupByModalDialog(): void;

	/**
	 * Open layouts dropdown
	 */
	openDropDown(): void;

	/**
	 * Close layouts dropdown
	 */
	closeDropDown(): void;

	/**
	 * Check whether column with specified key and layout is grouped
	 *
	 * @param key key of the column
	 * @param layout layout name
	 */
	checkColumnIsGrouped(key: string, layout: string): void;

	/**
	 * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
	 *
	 * @param data data (sorted by colKey) that is used to get the records from.
	 * @param colKey key of the column for which grouping will be applied.
	 * @param idval value of the column by which grouping will be applied.
	 */
	getGroupedData(data: any[], colKey: string, idval?: string): any[];

	/**
	 * Adds a column to the group by columns list, executes the group by operation and updates the view.
	 */
	groupByColumns(): Object;

	/**
	 * Groups by a column
	 *
	 * @param key Column Key - group by the column with the specified key
	 * @param layout layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
	 * @param sortingDirection if not set it is taken from option defaultSortingDirection
	 */
	groupByColumn(key: string, layout?: string, sortingDirection?: Object): void;

	/**
	 * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
	 *
	 * @param key Column Key - ungroup by the column with the specified key
	 * @param layout Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
	 */
	ungroupByColumn(key: string, layout?: string): void;

	/**
	 * Expand group row with specified id
	 *
	 * @param rowId data-id attribute of the group row in the DOM
	 */
	expand(rowId: string): void;

	/**
	 * Expand group row with specified id
	 *
	 * @param rowId data-id attribute of the group row in the DOM
	 */
	collapse(rowId: string): void;

	/**
	 * Clears the group by columns list and updates the view.
	 */
	ungroupAll(): void;

	/**
	 * Destroys the group by feature object.
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igGridGroupBy"): IgGridGroupByMethods;
}

interface JQuery {
	igGridGroupBy(methodName: "changeGlobalLanguage"): void;
	igGridGroupBy(methodName: "changeGlobalRegional"): void;
	igGridGroupBy(methodName: "changeLocale"): void;
	igGridGroupBy(methodName: "changeRegional"): void;
	igGridGroupBy(methodName: "openGroupByDialog"): void;
	igGridGroupBy(methodName: "closeGroupByDialog"): void;
	igGridGroupBy(methodName: "renderGroupByModalDialog"): void;
	igGridGroupBy(methodName: "openDropDown"): void;
	igGridGroupBy(methodName: "closeDropDown"): void;
	igGridGroupBy(methodName: "checkColumnIsGrouped", key: string, layout: string): void;
	igGridGroupBy(methodName: "getGroupedData", data: any[], colKey: string, idval?: string): any[];
	igGridGroupBy(methodName: "groupByColumns"): Object;
	igGridGroupBy(methodName: "groupByColumn", key: string, layout?: string, sortingDirection?: Object): void;
	igGridGroupBy(methodName: "ungroupByColumn", key: string, layout?: string): void;
	igGridGroupBy(methodName: "expand", rowId: string): void;
	igGridGroupBy(methodName: "collapse", rowId: string): void;
	igGridGroupBy(methodName: "ungroupAll"): void;
	igGridGroupBy(methodName: "destroy"): void;

	/**
	 * Sets the place in the grid where the GroupBy area will be
	 *
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "groupByAreaVisibility"): string;

	/**
	 * Sets the place in the grid where the GroupBy area will be
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "groupByAreaVisibility", optionValue: string): void;

	/**
	 * Gets if after grouping, the grouped rows will be initially expanded or collapsed.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "initialExpand"): boolean;

	/**
	 * Sets if after grouping, the grouped rows will be initially expanded or collapsed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "initialExpand", optionValue: boolean): void;

	/**
	 * Gets when paging is applied and there is at least one grouped column which records should be included in page processing.
	 *
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "pagingMode"): string;

	/**
	 * Sets when paging is applied and there is at least one grouped column which records should be included in page processing.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "pagingMode", optionValue: string): void;

	/**
	 * Gets if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "expansionIndicatorVisibility"): boolean;

	/**
	 * Sets if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "expansionIndicatorVisibility", optionValue: boolean): void;

	/**
	 * By default, the column width for the header is taken. If this is specified it's used for all headers.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupByLabelWidth"): number;

	/**
	 * By default, the column width for the header is taken. If this is specified it's used for all headers.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupByLabelWidth", optionValue: number): void;

	/**
	 * Gets the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "labelDragHelperOpacity"): number;

	/**
	 * Sets the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "labelDragHelperOpacity", optionValue: number): void;

	/**
	 * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "indentation"): number;

	/**
	 * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "indentation", optionValue: number): void;

	/**
	 * Default sort order - ascending or descending
	 *
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "defaultSortingDirection"): string;

	/**
	 * Default sort order - ascending or descending
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "defaultSortingDirection", optionValue: string): void;

	/**
	 * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumns"): IgGridGroupByGroupedColumn[];

	/**
	 * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumns", optionValue: IgGridGroupByGroupedColumn[]): void;

	/**
	 * Gets a key to get group by data from the remote response.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "resultResponseKey"): string;

	/**
	 * Sets a key to get group by data from the remote response.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "resultResponseKey", optionValue: string): void;

	/**
	 * Template for the grouped row's text. Variables available for the template are ${key}, ${val} and ${count}.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupedRowTextTemplate"): string;

	/**
	 * Template for the grouped row's text. Variables available for the template are ${key}, ${val} and ${count}.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupedRowTextTemplate", optionValue: string): void;

	/**
	 * Gets whether the GroupBy operation takes place locally on client-side or remotely on server-side.
	 *
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Sets whether the GroupBy operation takes place locally on client-side or remotely on server-side.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * URL param name which specifies a GroupBy [expression](ig.datasource#options:settings.sorting.expressions). When groupByUrlKey, [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKey"): string;

	/**
	 * URL param name which specifies a GroupBy [expression](ig.datasource#options:settings.sorting.expressions). When groupByUrlKey, [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKey", optionValue: string): void;

	/**
	 * URL param value denoting ascending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), groupByUrlKeyAscValue and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKeyAscValue"): string;

	/**
	 * URL param value denoting ascending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), groupByUrlKeyAscValue and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKeyAscValue", optionValue: string): void;

	/**
	 * URL param value denoting descending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and groupByUrlKeyDescValue are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKeyDescValue"): string;

	/**
	 * URL param value denoting descending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and groupByUrlKeyDescValue are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKeyDescValue", optionValue: string): void;

	/**
	 * Gets the settings for GroupBy summaries.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "summarySettings"): IgGridGroupBySummarySettings;

	/**
	 * Sets the settings for GroupBy summaries.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "summarySettings", optionValue: IgGridGroupBySummarySettings): void;

	/**
	 * Configures individual column settings.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "columnSettings"): IgGridGroupByColumnSettings;

	/**
	 * Configures individual column settings.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridGroupByColumnSettings): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the expand indicator tooltip for grouped rows. Use option [locale.expandTooltip](ui.iggridgroupby#options:locale.expandTooltip).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "expandTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the expand indicator tooltip for grouped rows. Use option [locale.expandTooltip](ui.iggridgroupby#options:locale.expandTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "expandTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the collapse indicator tooltip for grouped rows. Use option [locale.collapseTooltip](ui.iggridgroupby#options:locale.collapseTooltip).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "collapseTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the collapse indicator tooltip for grouped rows. Use option [locale.collapseTooltip](ui.iggridgroupby#options:locale.collapseTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "collapseTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the tooltip for the remove button. Use option [locale.removeButtonTooltip](ui.iggridgroupby#options:locale.removeButtonTooltip).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "removeButtonTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the tooltip for the remove button. Use option [locale.removeButtonTooltip](ui.iggridgroupby#options:locale.removeButtonTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "removeButtonTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the text of GroupBy button in the GroupBy Dialog. Use option [locale.modalDialogGroupByButtonText](ui.iggridgroupby#options:locale.modalDialogGroupByButtonText).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupByButtonText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the text of GroupBy button in the GroupBy Dialog. Use option [locale.modalDialogGroupByButtonText](ui.iggridgroupby#options:locale.modalDialogGroupByButtonText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupByButtonText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each descending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonDesc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonDesc).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each descending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonDesc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonDesc).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each ascending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonAsc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonAsc).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each ascending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonAsc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonAsc).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption button ungroup in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonUngroup](ui.iggridgroupby#options:locale.modalDialogCaptionButtonUngroup).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUngroup"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption button ungroup in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonUngroup](ui.iggridgroupby#options:locale.modalDialogCaptionButtonUngroup).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUngroup", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for the GroupBy Dialog. Use option [locale.modalDialogCaptionText](ui.iggridgroupby#options:locale.modalDialogCaptionText).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for the GroupBy Dialog. Use option [locale.modalDialogCaptionText](ui.iggridgroupby#options:locale.modalDialogCaptionText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets label for layouts dropdown in the GroupBy Dialog.  Use option [locale.modalDialogDropDownLabel](ui.iggridgroupby#options:locale.modalDialogDropDownLabel).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets label for layouts dropdown in the GroupBy Dialog.  Use option [locale.modalDialogDropDownLabel](ui.iggridgroupby#options:locale.modalDialogDropDownLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogRootLevelHierarchicalGrid](ui.iggridgroupby#options:locale.modalDialogRootLevelHierarchicalGrid).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogRootLevelHierarchicalGrid"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogRootLevelHierarchicalGrid](ui.iggridgroupby#options:locale.modalDialogRootLevelHierarchicalGrid).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogRootLevelHierarchicalGrid", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogDropDownButtonCaption](ui.iggridgroupby#options:locale.modalDialogDropDownButtonCaption).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownButtonCaption"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogDropDownButtonCaption](ui.iggridgroupby#options:locale.modalDialogDropDownButtonCaption).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownButtonCaption", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets label for "Clear all" button in the GroupBy Dialog. Use option [locale.modalDialogClearAllButtonLabel](ui.iggridgroupby#options:locale.modalDialogClearAllButtonLabel).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClearAllButtonLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets label for "Clear all" button in the GroupBy Dialog. Use option [locale.modalDialogClearAllButtonLabel](ui.iggridgroupby#options:locale.modalDialogClearAllButtonLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClearAllButtonLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for the hyperlink which opens the GroupBy Dialog. Use option [locale.emptyGroupByAreaContentSelectColumnsCaption](ui.iggridgroupby#options:locale.emptyGroupByAreaContentSelectColumnsCaption).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "emptyGroupByAreaContentSelectColumnsCaption"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for the hyperlink which opens the GroupBy Dialog. Use option [locale.emptyGroupByAreaContentSelectColumnsCaption](ui.iggridgroupby#options:locale.emptyGroupByAreaContentSelectColumnsCaption).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "emptyGroupByAreaContentSelectColumnsCaption", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonApplyText](ui.iggridgroupby#options:locale.modalDialogButtonApplyText).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonApplyText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonApplyText](ui.iggridgroupby#options:locale.modalDialogButtonApplyText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonApplyText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonCancelText](ui.iggridgroupby#options:locale.modalDialogButtonCancelText).
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonCancelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonCancelText](ui.iggridgroupby#options:locale.modalDialogButtonCancelText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonCancelText", optionValue: string): void;
	igGridGroupBy(optionLiteral: 'option', optionName: "locale"): IgGridGroupByLocale;
	igGridGroupBy(optionLiteral: 'option', optionName: "locale", optionValue: IgGridGroupByLocale): void;

	/**
	 * Enables/disables immediate column grouping/ungrouping. When false operation is delayed until after "Apply" button is clicked by the user.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupByOnClick"): boolean;

	/**
	 * Enables/disables immediate column grouping/ungrouping. When false operation is delayed until after "Apply" button is clicked by the user.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupByOnClick", optionValue: boolean): void;

	/**
	 * Gets width of layouts dropdown in the GroupBy Dialog
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownWidth"): number;

	/**
	 * Sets width of layouts dropdown in the GroupBy Dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownWidth", optionValue: number): void;

	/**
	 * Gets width of layouts dropdown in the GroupBy Dialog
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownAreaWidth"): number;

	/**
	 * Sets width of layouts dropdown in the GroupBy Dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownAreaWidth", optionValue: number): void;

	/**
	 * Gets time in milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogAnimationDuration"): number;

	/**
	 * Sets time in milliseconds for animation duration to show/hide modal dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogAnimationDuration", optionValue: number): void;

	/**
	 * Gets width of the GroupBy Dialog
	 *
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogWidth"): string|number;

	/**
	 * Sets width of the GroupBy Dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogWidth", optionValue: string|number): void;

	/**
	 * Gets height of the GroupBy Dialog
	 *
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogHeight"): string|number;

	/**
	 * Sets height of the GroupBy Dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogHeight", optionValue: string|number): void;

	/**
	 * Format grouped column using the formatter set in [igGrid.columns.formatter](ui.iggrid#options:columns.formatter) or [igGrid.columns.format](ui.iggrid#options:columns.format).
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "useGridColumnFormatter"): boolean;

	/**
	 * Format grouped column using the formatter set in [igGrid.columns.formatter](ui.iggrid#options:columns.formatter) or [igGrid.columns.format](ui.iggrid#options:columns.format).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "useGridColumnFormatter", optionValue: boolean): void;

	/**
	 * Enables / disables GroupBy persistence between states. Checkout the [GroupBy Persistence](http://www.igniteui.com/help/iggrid-groupby-overview#groupBy-persistence) topic for details.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "persist"): boolean;

	/**
	 * Enables / disables GroupBy persistence between states. Checkout the [GroupBy Persistence](http://www.igniteui.com/help/iggrid-groupby-overview#groupBy-persistence) topic for details.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;

	/**
	 * Controls containment behavior for the GroupBy Dialog.
	 *
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "groupByDialogContainment"): string;

	/**
	 * Controls containment behavior for the GroupBy Dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "groupByDialogContainment", optionValue: string): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. Checkout the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic for details.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. Checkout the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic for details.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Gets default summaries that will appear when grouping by a column on the bottom of each group as a row.This option has a lower priority than the groupSummaries defined under columnSettings for each column.
	 * All default summaries are defined under $.ig.util.defaultSummaryMethods
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupSummaries"): any;

	/**
	 * Sets default summaries that will appear when grouping by a column on the bottom of each group as a row.This option has a lower priority than the groupSummaries defined under columnSettings for each column.
	 * All default summaries are defined under $.ig.util.defaultSummaryMethods
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupSummaries", optionValue: any): void;

	/**
	 * Gets the groupSummaries postion inside each group.
	 *
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "groupSummariesPosition"): string;

	/**
	 * Sets the groupSummaries postion inside each group.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "groupSummariesPosition", optionValue: string): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridGroupBy(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumnsChanging"): GroupedColumnsChangingEvent;

	/**
	 * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumnsChanging", optionValue: GroupedColumnsChangingEvent): void;

	/**
	 * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from GroupBy modal dialog but key, layout and grid are not set
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumnsChanged"): GroupedColumnsChangedEvent;

	/**
	 * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from GroupBy modal dialog but key, layout and grid are not set
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumnsChanged", optionValue: GroupedColumnsChangedEvent): void;

	/**
	 * Event fired every time the GroupBy Dialog changes its position.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogMoving"): ModalDialogMovingEvent;

	/**
	 * Event fired every time the GroupBy Dialog changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogMoving", optionValue: ModalDialogMovingEvent): void;

	/**
	 * Event fired before the modal dialog is closed.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClosing"): ModalDialogClosingEvent;

	/**
	 * Event fired before the modal dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClosing", optionValue: ModalDialogClosingEvent): void;

	/**
	 * Event fired after the modal dialog has been closed.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClosed"): ModalDialogClosedEvent;

	/**
	 * Event fired after the modal dialog has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClosed", optionValue: ModalDialogClosedEvent): void;

	/**
	 * Event fired before the modal dialog is opened.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogOpening"): ModalDialogOpeningEvent;

	/**
	 * Event fired before the modal dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogOpening", optionValue: ModalDialogOpeningEvent): void;

	/**
	 * Event fired after the modal dialog is already opened.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogOpened"): ModalDialogOpenedEvent;

	/**
	 * Event fired after the modal dialog is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogOpened", optionValue: ModalDialogOpenedEvent): void;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogContentsRendering"): ModalDialogContentsRenderingEvent;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogContentsRendering", optionValue: ModalDialogContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogContentsRendered"): ModalDialogContentsRenderedEvent;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogContentsRendered", optionValue: ModalDialogContentsRenderedEvent): void;

	/**
	 * Event fired when the button is Apply is clicked.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick"): ModalDialogButtonApplyClickEvent;

	/**
	 * Event fired when the button is Apply is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick", optionValue: ModalDialogButtonApplyClickEvent): void;

	/**
	 * Event fired when reset button is clicked.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonResetClick"): ModalDialogButtonResetClickEvent;

	/**
	 * Event fired when reset button is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonResetClick", optionValue: ModalDialogButtonResetClickEvent): void;

	/**
	 * Event fired when column in modal dialog is clicked to be grouped.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupingColumn"): ModalDialogGroupingColumnEvent;

	/**
	 * Event fired when column in modal dialog is clicked to be grouped.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupingColumn", optionValue: ModalDialogGroupingColumnEvent): void;

	/**
	 * Event fired when column in modal dialog is clicked to be grouped.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupColumn"): ModalDialogGroupColumnEvent;

	/**
	 * Event fired when column in modal dialog is clicked to be grouped.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupColumn", optionValue: ModalDialogGroupColumnEvent): void;

	/**
	 * Event fired when column in modal dialog is clicked to be ungrouped.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogUngroupingColumn"): ModalDialogUngroupingColumnEvent;

	/**
	 * Event fired when column in modal dialog is clicked to be ungrouped.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogUngroupingColumn", optionValue: ModalDialogUngroupingColumnEvent): void;

	/**
	 * Event fired when column in modal dialog is clicked to be ungrouped.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogUngroupColumn"): ModalDialogUngroupColumnEvent;

	/**
	 * Event fired when column in modal dialog is clicked to be ungrouped.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogUngroupColumn", optionValue: ModalDialogUngroupColumnEvent): void;

	/**
	 * Event fired when column in modal dialog is sorted.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogSortGroupedColumn"): ModalDialogSortGroupedColumnEvent;

	/**
	 * Event fired when column in modal dialog is sorted.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogSortGroupedColumn", optionValue: ModalDialogSortGroupedColumnEvent): void;
	igGridGroupBy(options: IgGridGroupBy): JQuery;
	igGridGroupBy(optionLiteral: 'option', optionName: string): any;
	igGridGroupBy(optionLiteral: 'option', options: IgGridGroupBy): JQuery;
	igGridGroupBy(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridGroupBy(methodName: string, ...methodParams: any[]): any;
}
interface IgGridHidingColumnSetting {
	/**
	 * Column key. this is a required property in every column setting if columnIndex is not set.
	 *
	 */
	columnKey?: string;

	/**
	 * Column index. Can be used in place of column key. the preferred way of populating a column setting is to always use the column keys as identifiers.
	 *
	 */
	columnIndex?: number;

	/**
	 * Allows the column to be hidden.
	 *
	 */
	allowHiding?: boolean;

	/**
	 * Sets the initial visibility of the column.
	 *
	 */
	hidden?: boolean;

	/**
	 * Option for IgGridHidingColumnSetting
	 */
	[optionName: string]: any;
}

interface IgGridHidingLocale {
	/**
	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
	 *
	 */
	columnChooserDisplayText?: string;

	/**
	 * The text displayed in the tooltip of the hidden column indicator.
	 *
	 */
	hiddenColumnIndicatorTooltipText?: string;

	/**
	 * The text used in the drop down tools menu(Feature Chooser) to hide a column.
	 *
	 */
	columnHideText?: string;

	/**
	 * The caption of the column chooser dialog.
	 *
	 */
	columnChooserCaptionLabel?: string;

	/**
	 * The close button tooltip of the column chooser dialog.
	 *
	 */
	columnChooserCloseButtonTooltip?: string;

	/**
	 * Specifies the hiding column icon tooltip.
	 *
	 */
	hideColumnIconTooltip?: string;

	/**
	 * The text used in the column chooser to show column.
	 *
	 */
	columnChooserShowText?: string;

	/**
	 * The text used in the column chooser to hide column.
	 *
	 */
	columnChooserHideText?: string;

	/**
	 * Text label for reset button.
	 *
	 */
	columnChooserResetButtonLabel?: string;

	/**
	 * Specifies the text of the button which applies changes in the modal dialog.
	 *
	 */
	columnChooserButtonApplyText?: string;

	/**
	 * Specifies the text of the button which cancels changes in the modal dialog.
	 *
	 */
	columnChooserButtonCancelText?: string;

	/**
	 * Option for IgGridHidingLocale
	 */
	[optionName: string]: any;
}

interface ColumnHidingEvent {
	(event: Event, ui: ColumnHidingEventUIParam): void;
}

interface ColumnHidingEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets the hidden column index. Has a value only if the column's key is a number.
	 */
	columnIndex?: number;

	/**
	 * Gets the hidden column key. Has a value only if the column's key is a string.
	 */
	columnKey?: string;
}

interface ColumnHidingRefusedEvent {
	(event: Event, ui: ColumnHidingRefusedEventUIParam): void;
}

interface ColumnHidingRefusedEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Array of column keys. Has a value only if the column's key is a string.
	 */
	columnKeys?: any[];
}

interface ColumnShowingRefusedEvent {
	(event: Event, ui: ColumnShowingRefusedEventUIParam): void;
}

interface ColumnShowingRefusedEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Array of column keys. Has a value only if the column's key is a string.
	 */
	columnKeys?: any[];
}

interface MultiColumnHidingEvent {
	(event: Event, ui: MultiColumnHidingEventUIParam): void;
}

interface MultiColumnHidingEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets the array of the hidden column keys. Only when you click on Reset button in column chooser there is an array of column keys.
	 */
	columnKeys?: any[];
}

interface ColumnHiddenEvent {
	(event: Event, ui: ColumnHiddenEventUIParam): void;
}

interface ColumnHiddenEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets the hidden column index. Has a value only if the column's key is a number.
	 */
	columnIndex?: number;

	/**
	 * Gets the hidden column key. Has a value only if the column's key is a string.
	 */
	columnKey?: string;
}

interface ColumnShowingEvent {
	(event: Event, ui: ColumnShowingEventUIParam): void;
}

interface ColumnShowingEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets the shown column index.
	 */
	columnIndex?: number;

	/**
	 * Gets the shown column key.
	 */
	columnKey?: string;
}

interface ColumnShownEvent {
	(event: Event, ui: ColumnShownEventUIParam): void;
}

interface ColumnShownEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets the shown column index.
	 */
	columnIndex?: number;

	/**
	 * Gets the shown column key.
	 */
	columnKey?: string;
}

interface ColumnChooserOpeningEvent {
	(event: Event, ui: ColumnChooserOpeningEventUIParam): void;
}

interface ColumnChooserOpeningEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the Column Chooser element. This is a jQuery object.
	 */
	columnChooserElement?: string;
}

interface ColumnChooserOpenedEvent {
	(event: Event, ui: ColumnChooserOpenedEventUIParam): void;
}

interface ColumnChooserOpenedEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the Column Chooser element. This is a jQuery object.
	 */
	columnChooserElement?: string;
}

interface ColumnChooserMovingEvent {
	(event: Event, ui: ColumnChooserMovingEventUIParam): void;
}

interface ColumnChooserMovingEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the Column Chooser element. This is a jQuery object.
	 */
	columnChooserElement?: string;

	/**
	 * Gets the original position of the column chooser div as { top, left } object, relative to the page.
	 */
	originalPosition?: any;

	/**
	 * Gets the current position of the column chooser div as { top, left } object, relative to the page.
	 */
	position?: any;
}

interface ColumnChooserClosingEvent {
	(event: Event, ui: ColumnChooserClosingEventUIParam): void;
}

interface ColumnChooserClosingEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the Column Chooser element. This is a jQuery object.
	 */
	columnChooserElement?: string;
}

interface ColumnChooserClosedEvent {
	(event: Event, ui: ColumnChooserClosedEventUIParam): void;
}

interface ColumnChooserClosedEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the Column Chooser element. This is a jQuery object.
	 */
	columnChooserElement?: string;
}

interface ColumnChooserContentsRenderingEvent {
	(event: Event, ui: ColumnChooserContentsRenderingEventUIParam): void;
}

interface ColumnChooserContentsRenderingEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the Column Chooser element. This is a jQuery object.
	 */
	columnChooserElement?: string;
}

interface ColumnChooserContentsRenderedEvent {
	(event: Event, ui: ColumnChooserContentsRenderedEventUIParam): void;
}

interface ColumnChooserContentsRenderedEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the Column Chooser element. This is a jQuery object.
	 */
	columnChooserElement?: string;
}

interface ColumnChooserButtonApplyClickEvent {
	(event: Event, ui: ColumnChooserButtonApplyClickEventUIParam): void;
}

interface ColumnChooserButtonApplyClickEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the Column Chooser element. This is a jQuery object.
	 */
	columnChooserElement?: string;

	/**
	 * Gets the array of columns identifiers which should be shown.
	 */
	columnsToShow?: any[];

	/**
	 * Gets the array of columns identifiers which should be hidden.
	 */
	columnsToHide?: any[];
}

interface ColumnChooserButtonResetClickEvent {
	(event: Event, ui: ColumnChooserButtonResetClickEventUIParam): void;
}

interface ColumnChooserButtonResetClickEventUIParam {
	/**
	 * Gets a reference to the GridHiding widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the Column Chooser element. This is a jQuery object.
	 */
	columnChooserElement?: string;
}

interface IgGridHiding {
	/**
	 * A list of column settings that specifies hiding options on a per column basis.
	 *
	 */
	columnSettings?: IgGridHidingColumnSetting[];

	/**
	 * The width in pixels of the hidden column indicator in the header.
	 *
	 */
	hiddenColumnIndicatorHeaderWidth?: number;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The column chooser dialog will be draggable only in the grid area
	 * window  The column chooser dialog will be draggable in the whole window area
	 */
	columnChooserContainment?: string;

	/**
	 * The default column chooser width.
	 *
	 */
	columnChooserWidth?: string;

	/**
	 * The default column chooser height.
	 *
	 */
	columnChooserHeight?: string;

	/**
	 * The duration of the dropdown animation in milliseconds.
	 *
	 */
	dropDownAnimationDuration?: number;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
	 */
	columnChooserCaptionText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
	 */
	columnChooserDisplayText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
	 */
	hiddenColumnIndicatorTooltipText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
	 */
	columnHideText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
	 */
	columnChooserShowText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
	 */
	columnChooserHideText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
	 */
	columnChooserResetButtonLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
	 */
	columnChooserButtonApplyText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
	 */
	columnChooserButtonCancelText?: string;
	locale?: IgGridHidingLocale;

	/**
	 * Specifies on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
	 *
	 */
	columnChooserHideOnClick?: boolean;

	/**
	 * Specifies time of milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	columnChooserAnimationDuration?: number;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 */
	inherit?: boolean;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before a hiding operation is executed.
	 */
	columnHiding?: ColumnHidingEvent;

	/**
	 * Event fired when trying to hide all columns in fixed or unfixed area.
	 */
	columnHidingRefused?: ColumnHidingRefusedEvent;

	/**
	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
	 */
	columnShowingRefused?: ColumnShowingRefusedEvent;

	/**
	 * Event fired before a hiding operation is executed.
	 */
	multiColumnHiding?: MultiColumnHidingEvent;

	/**
	 * Event fired after the hiding has been executed and results are rendered.
	 */
	columnHidden?: ColumnHiddenEvent;

	/**
	 * Event fired before a showing operation is executed.
	 */
	columnShowing?: ColumnShowingEvent;

	/**
	 * Event fired after the showing has been executed and results are rendered.
	 */
	columnShown?: ColumnShownEvent;

	/**
	 * Event fired before the column chooser is opened.
	 */
	columnChooserOpening?: ColumnChooserOpeningEvent;

	/**
	 * Event fired after the column chooser is already opened.
	 */
	columnChooserOpened?: ColumnChooserOpenedEvent;

	/**
	 * Event fired every time the column chooser changes its position.
	 */
	columnChooserMoving?: ColumnChooserMovingEvent;

	/**
	 * Event fired before the column chooser is closed.
	 */
	columnChooserClosing?: ColumnChooserClosingEvent;

	/**
	 * Event fired after the column chooser has been closed.
	 */
	columnChooserClosed?: ColumnChooserClosedEvent;

	/**
	 * Event fired before the contents of the column chooser are rendered.
	 */
	columnChooserContentsRendering?: ColumnChooserContentsRenderingEvent;

	/**
	 * Event fired after the contents of the column chooser are rendered.
	 */
	columnChooserContentsRendered?: ColumnChooserContentsRenderedEvent;

	/**
	 * Event fired when button Apply in column chooser is clicked
	 */
	columnChooserButtonApplyClick?: ColumnChooserButtonApplyClickEvent;

	/**
	 * Event fired when button Reset in column chooser is clicked
	 */
	columnChooserButtonResetClick?: ColumnChooserButtonResetClickEvent;

	/**
	 * Option for igGridHiding
	 */
	[optionName: string]: any;
}
interface IgGridHidingMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridhiding#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridhiding#options:language) or [locale](ui.iggridhiding#options:locale) option setter
	 */
	changeLocale(): void;
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Destroys the hiding widget
	 */
	destroy(): void;

	/**
	 * Shows the Column Chooser dialog. If it is visible the method does nothing.
	 */
	showColumnChooser(): void;

	/**
	 * Hides the Column Chooser dialog. If it is not visible the method does nothing.
	 */
	hideColumnChooser(): void;

	/**
	 * Shows a hidden column. If the column is not hidden the method does nothing.
	 * Note: This method is asynchronous, which means that it returns immediately, and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a column index; else if a string is provided, it will be used as a column key.
	 * @param callback Specifies a custom function to be called after the column gets shown(optional)
	 */
	showColumn(column: Object, callback?: Function): void;

	/**
	 * Hides a visible column. If the column is hidden the method does nothing.
	 * Note: This method is asynchronous, which means that it returns immediately, and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a column index; else if a string is provided, it will be used as a column key.
	 * @param callback Specifies a custom function to be called after the column gets hidden(optional)
	 */
	hideColumn(column: Object, callback?: Function): void;

	/**
	 * Hides visible columns specified by the array. If the column is hidden the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param columns An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
	 * @param callback Specifies a custom function to be called when all columns are hidden(optional)
	 */
	hideMultiColumns(columns: any[], callback?: Function): void;

	/**
	 * Show visible columns specified by the array. If the column is shown the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param columns An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
	 * @param callback Specifies a custom function to be called when all columns are shown(optional)
	 */
	showMultiColumns(columns: any[], callback?: Function): void;

	/**
	 * Gets whether the reset button in the column chooser dialog is to be rendered or not.
	 */
	isToRenderButtonReset(): void;

	/**
	 * Reset hidden/shown column to initial state of dialog(when it is opened)
	 */
	resetHidingColumnChooser(): void;

	/**
	 * Renders the Reset button in the Column Chooser dialog.
	 */
	renderColumnChooserResetButton(): void;

	/**
	 * Remove Reset button in column chooser modal dialog
	 */
	removeColumnChooserResetButton(): void;
}
interface JQuery {
	data(propertyName: "igGridHiding"): IgGridHidingMethods;
}

interface JQuery {
	igGridHiding(methodName: "changeLocale"): void;
	igGridHiding(methodName: "changeGlobalLanguage"): void;
	igGridHiding(methodName: "changeGlobalRegional"): void;
	igGridHiding(methodName: "destroy"): void;
	igGridHiding(methodName: "showColumnChooser"): void;
	igGridHiding(methodName: "hideColumnChooser"): void;
	igGridHiding(methodName: "showColumn", column: Object, callback?: Function): void;
	igGridHiding(methodName: "hideColumn", column: Object, callback?: Function): void;
	igGridHiding(methodName: "hideMultiColumns", columns: any[], callback?: Function): void;
	igGridHiding(methodName: "showMultiColumns", columns: any[], callback?: Function): void;
	igGridHiding(methodName: "isToRenderButtonReset"): void;
	igGridHiding(methodName: "resetHidingColumnChooser"): void;
	igGridHiding(methodName: "renderColumnChooserResetButton"): void;
	igGridHiding(methodName: "removeColumnChooserResetButton"): void;

	/**
	 * A list of column settings that specifies hiding options on a per column basis.
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnSettings"): IgGridHidingColumnSetting[];

	/**
	 * A list of column settings that specifies hiding options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridHidingColumnSetting[]): void;

	/**
	 * The width in pixels of the hidden column indicator in the header.
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorHeaderWidth"): number;

	/**
	 * The width in pixels of the hidden column indicator in the header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorHeaderWidth", optionValue: number): void;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The column chooser dialog will be draggable only in the grid area
	 * window  The column chooser dialog will be draggable in the whole window area
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserContainment"): string;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The column chooser dialog will be draggable only in the grid area
	 * window  The column chooser dialog will be draggable in the whole window area
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserContainment", optionValue: string): void;

	/**
	 * The default column chooser width.
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserWidth"): string;

	/**
	 * The default column chooser width.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserWidth", optionValue: string): void;

	/**
	 * The default column chooser height.
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserHeight"): string;

	/**
	 * The default column chooser height.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserHeight", optionValue: string): void;

	/**
	 * The duration of the dropdown animation in milliseconds.
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * The duration of the dropdown animation in milliseconds.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserCaptionText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserCaptionText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserDisplayText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserDisplayText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
	 */
	igGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorTooltipText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorTooltipText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnHideText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnHideText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserShowText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserShowText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserHideText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserHideText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserResetButtonLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserResetButtonLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonCancelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonCancelText", optionValue: string): void;
	igGridHiding(optionLiteral: 'option', optionName: "locale"): IgGridHidingLocale;
	igGridHiding(optionLiteral: 'option', optionName: "locale", optionValue: IgGridHidingLocale): void;

	/**
	 * Gets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserHideOnClick"): boolean;

	/**
	 * Sets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserHideOnClick", optionValue: boolean): void;

	/**
	 * Gets time of milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserAnimationDuration"): number;

	/**
	 * Sets time of milliseconds for animation duration to show/hide modal dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserAnimationDuration", optionValue: number): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridHiding(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridHiding(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridHiding(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before a hiding operation is executed.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnHiding"): ColumnHidingEvent;

	/**
	 * Event fired before a hiding operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnHiding", optionValue: ColumnHidingEvent): void;

	/**
	 * Event fired when trying to hide all columns in fixed or unfixed area.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnHidingRefused"): ColumnHidingRefusedEvent;

	/**
	 * Event fired when trying to hide all columns in fixed or unfixed area.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnHidingRefused", optionValue: ColumnHidingRefusedEvent): void;

	/**
	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnShowingRefused"): ColumnShowingRefusedEvent;

	/**
	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnShowingRefused", optionValue: ColumnShowingRefusedEvent): void;

	/**
	 * Event fired before a hiding operation is executed.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "multiColumnHiding"): MultiColumnHidingEvent;

	/**
	 * Event fired before a hiding operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "multiColumnHiding", optionValue: MultiColumnHidingEvent): void;

	/**
	 * Event fired after the hiding has been executed and results are rendered.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnHidden"): ColumnHiddenEvent;

	/**
	 * Event fired after the hiding has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnHidden", optionValue: ColumnHiddenEvent): void;

	/**
	 * Event fired before a showing operation is executed.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnShowing"): ColumnShowingEvent;

	/**
	 * Event fired before a showing operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnShowing", optionValue: ColumnShowingEvent): void;

	/**
	 * Event fired after the showing has been executed and results are rendered.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnShown"): ColumnShownEvent;

	/**
	 * Event fired after the showing has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnShown", optionValue: ColumnShownEvent): void;

	/**
	 * Event fired before the column chooser is opened.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserOpening"): ColumnChooserOpeningEvent;

	/**
	 * Event fired before the column chooser is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserOpening", optionValue: ColumnChooserOpeningEvent): void;

	/**
	 * Event fired after the column chooser is already opened.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserOpened"): ColumnChooserOpenedEvent;

	/**
	 * Event fired after the column chooser is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserOpened", optionValue: ColumnChooserOpenedEvent): void;

	/**
	 * Event fired every time the column chooser changes its position.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserMoving"): ColumnChooserMovingEvent;

	/**
	 * Event fired every time the column chooser changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserMoving", optionValue: ColumnChooserMovingEvent): void;

	/**
	 * Event fired before the column chooser is closed.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserClosing"): ColumnChooserClosingEvent;

	/**
	 * Event fired before the column chooser is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserClosing", optionValue: ColumnChooserClosingEvent): void;

	/**
	 * Event fired after the column chooser has been closed.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserClosed"): ColumnChooserClosedEvent;

	/**
	 * Event fired after the column chooser has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserClosed", optionValue: ColumnChooserClosedEvent): void;

	/**
	 * Event fired before the contents of the column chooser are rendered.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendering"): ColumnChooserContentsRenderingEvent;

	/**
	 * Event fired before the contents of the column chooser are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendering", optionValue: ColumnChooserContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the column chooser are rendered.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendered"): ColumnChooserContentsRenderedEvent;

	/**
	 * Event fired after the contents of the column chooser are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendered", optionValue: ColumnChooserContentsRenderedEvent): void;

	/**
	 * Event fired when button Apply in column chooser is clicked
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyClick"): ColumnChooserButtonApplyClickEvent;

	/**
	 * Event fired when button Apply in column chooser is clicked
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyClick", optionValue: ColumnChooserButtonApplyClickEvent): void;

	/**
	 * Event fired when button Reset in column chooser is clicked
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonResetClick"): ColumnChooserButtonResetClickEvent;

	/**
	 * Event fired when button Reset in column chooser is clicked
	 *
	 * @optionValue Define event handler function.
	 */
	igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonResetClick", optionValue: ColumnChooserButtonResetClickEvent): void;
	igGridHiding(options: IgGridHiding): JQuery;
	igGridHiding(optionLiteral: 'option', optionName: string): any;
	igGridHiding(optionLiteral: 'option', options: IgGridHiding): JQuery;
	igGridHiding(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridHiding(methodName: string, ...methodParams: any[]): any;
}
interface IgHierarchicalGridLocale {
	/**
	 * Specifies the default tooltip applied to an expand column cell, that is currently collapsed.
	 *
	 */
	expandTooltip?: string;

	/**
	 * Specifies the default tooltip applied to an expand column cell, that is currently expanded.
	 *
	 */
	collapseTooltip?: string;

	/**
	 * Option for IgHierarchicalGridLocale
	 */
	[optionName: string]: any;
}

interface IgHierarchicalGridColumnLayout {
	/**
	 * Specifies the columnLayout key. This is the property that holds the data records for the current column layout.
	 */
	key?: string;

	/**
	 * Specifies the primaryKey of the columnLayout. This also serves as the column key for the current column layout.
	 */
	primaryKey?: string;

	/**
	 * Specifies the foreignKey of the columnLayout. This is also the column key of the parent grid.
	 */
	foreignKey?: string;

	/**
	 * Option for IgHierarchicalGridColumnLayout
	 */
	[optionName: string]: any;
}

interface IgHierarchicalGridColumnGroupOptions {
	/**
	 * Sets whether the group is expanded or collapsed. Applied only if the allowGroupCollapsing is set to true.
	 *
	 */
	expanded?: boolean;

	/**
	 * Sets whether expansion indicators are visible in the group header.
	 *
	 */
	allowGroupCollapsing?: boolean;

	/**
	 * Sets when should the group be hidden. Applied only if the allowGroupCollapsing is set to true.
	 *
	 *
	 * Valid values:
	 * "never" never hide the group
	 * "always" always hide the group
	 * "parentcollapsed" hide the group when its parent group is collapsed
	 * "parentexpanded" hide the group when its parent group is expanded
	 */
	hidden?: string;

	/**
	 * Option for IgHierarchicalGridColumnGroupOptions
	 */
	[optionName: string]: any;
}

interface IgHierarchicalGridColumn {
	/**
	 * Header text for the specified column.
	 *
	 */
	headerText?: string;

	/**
	 * The property in the data source to which the column is bound. Also used to identify the column by, and find specific columns with API methods such as [columnByKey](ui.ighierarchicalgrid#methods:columnByKey).
	 *
	 */
	key?: string;

	/**
	 * Reference to a function (string or function) which will be used for formatting the cell values. The function should accept a value and return the new formatted value. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 *
	 * Valid values:
	 * "string" The name of the function which will be used for formatting the cell values.
	 * "function" Function which will be used for formatting the cell values. The function should accept a value and return the new formatted value.
	 */
	formatter?: string|Function;

	/**
	 * Gets/Sets the type of formatting for cells of the column. Default value is null. Checkout [Formatting Dates, Numbers and Strings](http://www.igniteui.com/help/formatting-dates-numbers-and-strings) for details on the valid formatting specifiers.
	 *
	 * If dataType is "date", then supported formats are following: "date", "dateLong", "dateTime", "time", "timeLong", "MM/dd/yyyy", "MMM-d, yy, h:mm:ss tt", "dddd d MMM", etc.
	 * If dataType is "number", then supported numeric formats are following: "number", "currency", "percent", "int", "double", "0.00", "#.0####", "0", "#.#######", etc.
	 * The value of "double" will be similar to "number", but with unlimited maximum number of decimal places.
	 * The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object.
	 * If dataType is "string" or not set, then format is rendered as it is with replacement of possible "{0}" flag by value in cell. Example, if format is set to "Name: {0}" and value in cell is "Bob", then value will appear as "Name: Bob"
	 * If value is set to "checkbox", then checkboxes are used regardless of renderCheckboxes option of the grid. That has effect only when dataType option of column is set to "bool".
	 */
	format?: string;

	/**
	 * Data type of the column cell values: string, number, bool, date, object.
	 *
	 *
	 * Valid values:
	 * "string" The data inside the column is of type string
	 * "number" The data inside the column is of type number
	 * "boolean" The data inside the column is of type boolean
	 * "date" The data inside the column is of type date
	 * "object" The data inside the column is of type object
	 */
	dataType?: string;

	/**
	 * Width of the column in pixels or percentage. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).If width is not defined and [defaultColumnWidth](ui.ighierarchicalgrid#options:defaultColumnWidth) is set, it is assumed for all columns.
	 *
	 *
	 * Valid values:
	 * "string" The column width can be set in pixels (px), percentage (%) or as '*' in order to auto-size based on the cells and header content.
	 * "number" The column width can be set as a number
	 */
	width?: string|number;

	/**
	 * Initial visibility of the column. A column can be hidden without the Hiding feature being enabled but there will be no UI for unhiding it. Columns can be defined as hidden in the options of the Hiding feature as well and those definitions take precedence.
	 *
	 */
	hidden?: boolean;

	/**
	 * Sets a template for an individual column. the contents of the template should be the HTML markup that goes inside the table cell, or the entire table cell markup. [Here's an example of creating a basic column template](http://www.igniteui.com/help/creating-a-basic-column-template-in-the-iggrid)
	 *
	 */
	template?: string;

	/**
	 * Sets whether column data is derived from the datasource. If set to true, then the cells in this column are not bound to the data source. The data in this column is populated using [formula](ui.ighierarchicalgrid#options:columns.formula), or using [unboundValues](ui.ighierarchicalgrid#options:columns.unboundValues), or through the [setUnboundValues](ui.ighierarchicalgrid#methods:setUnboundValues) API method. [Here's an overview of the unbound columns feature](http://www.igniteui.com/help/iggrid-unboundcolumns-overview)
	 *
	 */
	unbound?: boolean;

	/**
	 * Options used to configure collapsible column [groups](ui.ighierarchicalgrid#options:columns.group).
	 *
	 */
	groupOptions?: IgHierarchicalGridColumnGroupOptions;

	/**
	 * Array of child column definitions. If the column has the property group than the grid has multi column headers.
	 *
	 */
	group?: any[];

	/**
	 * Determines the way in which dates will be displayed in the grid for this column.
	 *
	 *
	 * Valid values:
	 * "local" The dates for this column will be rendered in the client's local timezone.
	 * "utc" The dates for this column will be rendered in their UTC representation.
	 */
	dateDisplayType?: string;

	/**
	 * This option has been deprecated as of the June 2016 service release.
	 * Adjust span of multi column header cell. Use option rowSpan.
	 */
	rowspan?: number;

	/**
	 * A reference to or the name of a JavaScript function, which will calculate the value of the current cell based on other cell values in the same row. Used with [unbound columns](ui.ighierarchicalgrid#options:columns.unbound).
	 *
	 *
	 * Valid values:
	 * "string" The name of the JavaScript function.
	 * "function" Reference to the JavaScript function.
	 */
	formula?: string|Function;

	/**
	 * Array of values which will be populated in the column cells at initialization, if the column is [unbound](ui.ighierarchicalgrid#options:columns.unbound).
	 *
	 */
	unboundValues?: any[];

	/**
	 * Space-separated list of CSS classes to be applied on the header cell of this column.
	 *
	 */
	headerCssClass?: string;

	/**
	 * Space-separated list of CSS classes to be applied on the data cells of this column. The class is not applied if the column has a column [template](ui.ighierarchicalgrid#options:columns.template) defined, which contains full <td> definition in the template.
	 *
	 */
	columnCssClass?: string;

	/**
	 * This option is applicable only for columns with [dataType](ui.ighierarchicalgrid#options:columns.dataType) of object. Reference to a function, or the name of the function, that will be used for complex data extraction from the data records, whose return value will be used for all data operations associated with this column and will be displayed as cell value. [Here you can find more examples of how to setup a column mapper](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-mapper)
	 *
	 *
	 * Valid values:
	 * "string" The name of the mapper function.
	 * "function" Reference to the mapper function.
	 */
	mapper?: string|Function;

	/**
	 * Specifies the row index of the cell in a Multi-Row Layout configuration. All columns must have this property set for the multi-row-layout mode to be enabled. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout)
	 *
	 */
	rowIndex?: number;

	/**
	 * Specifies the column index of the cell in a Multi-Row Layout configuration. All columns must have this property set for the multi-row-layout mode to be enabled. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout)
	 *
	 */
	columnIndex?: number;

	/**
	 * Specifies the navigation index of the cell for the TAB sequence when the cells are in edit mode in a Multi-Row Layout grid. Has no effect otherwise. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout)
	 *
	 */
	navigationIndex?: number;

	/**
	 * Specifies the colSpan of the cell in a Multi-Row Layout configuration. colSpan 0 is not supported and will be changed to 1 by the grid. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout)
	 *
	 */
	colSpan?: number;

	/**
	 * Specifies the rowSpan of the cell in a Multi-Row Layout configuration. rowSpan 0 is not supported and will be changed to 1 by the grid. [Here you can find more about the Multi-Row Layout feature](http://www.igniteui.com/help/iggrid-multirowlayout). If multi-row-layout is not used but multi-column-header is set then this option is used to adjust span of header cell.
	 *
	 */
	rowSpan?: number;

	/**
	 * Option for IgHierarchicalGridColumn
	 */
	[optionName: string]: any;
}

interface IgHierarchicalGridFeature {
	/**
	 * Name of the feature to be enabled.
	 */
	name?: string;

	/**
	 * Option for IgHierarchicalGridFeature
	 */
	[optionName: string]: any;
}

interface IgHierarchicalGridRestSettingsCreate {
	/**
	 * Specifies a remote URL to which create requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
	 *
	 */
	url?: string;

	/**
	 * Specifies a remote URL template. Use ${id} in place of the resource id.
	 *
	 */
	template?: string;

	/**
	 * Specifies whether create requests will be sent in batches
	 *
	 */
	batch?: boolean;

	/**
	 * Option for IgHierarchicalGridRestSettingsCreate
	 */
	[optionName: string]: any;
}

interface IgHierarchicalGridRestSettingsUpdate {
	/**
	 * Specifies a remote URL to which update requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
	 */
	url?: string;

	/**
	 * Specifies a remote URL template. Use ${id} in place of the resource id.
	 */
	template?: string;

	/**
	 * Specifies whether update requests will be sent in batches
	 */
	batch?: boolean;

	/**
	 * Option for IgHierarchicalGridRestSettingsUpdate
	 */
	[optionName: string]: any;
}

interface IgHierarchicalGridRestSettingsRemove {
	/**
	 * Specifies a remote URL to which remove requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
	 */
	url?: string;

	/**
	 * Specifies a remote URL template. Use ${id} in place of the resource id.
	 */
	template?: string;

	/**
	 * Specifies whether update requests will be sent in batches
	 */
	batch?: boolean;

	/**
	 * Option for IgHierarchicalGridRestSettingsRemove
	 */
	[optionName: string]: any;
}

interface IgHierarchicalGridRestSettings {
	/**
	 * Settings for create requests
	 *
	 */
	create?: IgHierarchicalGridRestSettingsCreate;

	/**
	 * Settings for update requests
	 */
	update?: IgHierarchicalGridRestSettingsUpdate;

	/**
	 * Settings for remove requests
	 */
	remove?: IgHierarchicalGridRestSettingsRemove;

	/**
	 * Specifies whether the ids of the removed resources are send through the request URI
	 */
	encodeRemoveInRequestUri?: boolean;

	/**
	 * Specifies a custom function to serialize content sent to the server. It should accept a single object or an array of objects and return a string. If not specified, JSON.stringify() will be used.
	 *
	 */
	contentSerializer?: Function;

	/**
	 * Specifies the content type of the request. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	contentType?: string;

	/**
	 * Option for IgHierarchicalGridRestSettings
	 */
	[optionName: string]: any;
}

interface IgHierarchicalGridScrollSettings {
	/**
	 * Sets gets current vertical position.
	 *
	 */
	scrollTop?: number;

	/**
	 * Sets gets current horizontal position.
	 *
	 */
	scrollLeft?: number;

	/**
	 * Sets gets the step of the default scrolling behavior when using the mouse wheel.
	 *
	 */
	wheelStep?: number;

	/**
	 * Sets gets if smoother scrolling with small intertia should be used when using the mouse wheel.
	 *
	 */
	smoothing?: boolean;

	/**
	 * Sets or gets the modifier for how many pixels will be scrolled when using the mouse wheel once. This is used only for the [smooth scrolling behavior](ui.ighierarchicalgrid#options:scrollSettings.smoothing).
	 *
	 */
	smoothingStep?: number;

	/**
	 * Sets or gets the modifier for how long the scroll ‘animation’ lasts when using the mouse wheel once. This is used only for the [smooth scrolling behavior](ui.ighierarchicalgrid#options:scrollSettings.smoothing).
	 *
	 */
	smoothingDuration?: number;

	/**
	 * Sets gets the modifier for how much the inertia scrolls on touch devices. Note: Value set to 0 would disable touch movements. Value set to -1 would invert them.
	 *
	 */
	inertiaStep?: number;

	/**
	 * Sets gets the modifier for how long the inertia last on touch devices.
	 *
	 */
	inertiaDuration?: number;

	/**
	 * Option for IgHierarchicalGridScrollSettings
	 */
	[optionName: string]: any;
}

interface RowExpandingEvent {
	(event: Event, ui: RowExpandingEventUIParam): void;
}

interface RowExpandingEventUIParam {
	/**
	 * Gets access the hierarchical grid object.
	 */
	owner?: any;

	/**
	 * Gets access the row element for the row that's about to be expanded.
	 */
	parentrow?: string;
}

interface RowExpandedEvent {
	(event: Event, ui: RowExpandedEventUIParam): void;
}

interface RowExpandedEventUIParam {
	/**
	 * Gets access the hierarchical grid object.
	 */
	owner?: any;

	/**
	 * Gets access the row element for the row that was expanded.
	 */
	parentrow?: string;
}

interface RowCollapsingEvent {
	(event: Event, ui: RowCollapsingEventUIParam): void;
}

interface RowCollapsingEventUIParam {
	/**
	 * Gets access the hierarchical grid object.
	 */
	owner?: any;

	/**
	 * Gets access the row element for the row that's about to be collapsed.
	 */
	parentrow?: string;
}

interface RowCollapsedEvent {
	(event: Event, ui: RowCollapsedEventUIParam): void;
}

interface RowCollapsedEventUIParam {
	/**
	 * Gets access the hierarchical grid object.
	 */
	owner?: any;

	/**
	 * Gets access the row element for the row that was collapsed.
	 */
	parentrow?: string;
}

interface ChildrenPopulatingEvent {
	(event: Event, ui: ChildrenPopulatingEventUIParam): void;
}

interface ChildrenPopulatingEventUIParam {
	/**
	 * Gets access the hierarchical grid object.
	 */
	owner?: any;

	/**
	 * Gets access the row element for the row that's about to be populated.
	 */
	parentrow?: string;

	/**
	 * Gets the data ID of the row.
	 */
	id?: any;
}

interface ChildrenPopulatedEvent {
	(event: Event, ui: ChildrenPopulatedEventUIParam): void;
}

interface ChildrenPopulatedEventUIParam {
	/**
	 * Gets access the hierarchical grid object.
	 */
	owner?: any;

	/**
	 * Gets access the row element for the row that was populated.
	 */
	parentrow?: string;

	/**
	 * Gets the data ID of the row.
	 */
	id?: any;
}

interface ChildGridRenderedEvent {
	(event: Event, ui: ChildGridRenderedEventUIParam): void;
}

interface ChildGridRenderedEventUIParam {
	/**
	 * Gets access the hierarchical grid object.
	 */
	owner?: any;

	/**
	 * Gets access the row element for the row that's about to be populated.
	 */
	parentrow?: string;

	/**
	 * Gets reference to the child grid.
	 */
	childgrid?: any;
}

interface ChildGridCreatingEvent {
	(event: Event, ui: ChildGridCreatingEventUIParam): void;
}

interface ChildGridCreatingEventUIParam {}

interface ChildGridCreatedEvent {
	(event: Event, ui: ChildGridCreatedEventUIParam): void;
}

interface ChildGridCreatedEventUIParam {}

interface IgHierarchicalGrid {
	/**
	 * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will render the child grids up to the specified level.
	 *
	 */
	initialDataBindDepth?: number;

	/**
	 * No levels will be automatically expanded when the widget is instantiated for the first time
	 *
	 */
	initialExpandDepth?: number;

	/**
	 * If true, encodes all requests using OData conventions and the $expand syntax
	 *
	 */
	odata?: boolean;

	/**
	 * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
	 * the ajax GET calls.
	 *
	 */
	rest?: boolean;

	/**
	 * Specifies the limit on the number of levels to bind to
	 *
	 */
	maxDataBindDepth?: number;

	/**
	 * Specifies the default property in the response where children will be located
	 *
	 */
	defaultChildrenDataProperty?: string;

	/**
	 * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
	 * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
	 *
	 */
	autoGenerateLayouts?: boolean;

	/**
	 * Applies a linear animation - either expanding or collapsing depending on the parent row state
	 *
	 */
	expandCollapseAnimations?: boolean;

	/**
	 * Specifies the expand column width
	 *
	 */
	expandColWidth?: number;

	/**
	 * Specifies the delimiter for constructing paths , for hierarchical lookup of data
	 *
	 */
	pathSeparator?: string;

	/**
	 * The row expanding/collapsing animation duration in ms.
	 *
	 */
	animationDuration?: number;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the default tooltip applied to an expand column cell, that is currently collapsed. Use option [locale.columnChooserCaptionText](ui.ighierarchicalgrid#options:locale.expandTooltip).
	 */
	expandTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the default tooltip applied to an expand column cell, that is currently expanded. Use option [locale.collapseTooltip](ui.ighierarchicalgrid#options:locale.collapseTooltip).
	 */
	collapseTooltip?: string;
	locale?: IgHierarchicalGridLocale;

	/**
	 * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
	 *
	 */
	columnLayouts?: IgHierarchicalGridColumnLayout[];

	/**
	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * Valid values:
	 * "string" The widget width can be set in pixels (px) or percentage (%). Example values: "800px", "800" (defaults to pixels), "100%".
	 * "number" The widget width can be set in pixels as a number. Example values: 800, 700.
	 * "null" will stretch to fit the sum of the columns widths.
	 */
	width?: string|number;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * Valid values:
	 * "string" The widget height can be set in pixels (px) and percentage (%).
	 * "number" The widget height can be set as a number
	 * "null" will stretch vertically to fit data.
	 */
	height?: string|number;

	/**
	 * If autoAdjustHeight is set to false, the [height](ui.ighierarchicalgrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no [virtualization](ui.ighierarchicalgrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
	 *
	 */
	autoAdjustHeight?: boolean;

	/**
	 * Used for [row virtualization](ui.ighierarchicalgrid#options:rowVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
	 *
	 *
	 * Valid values:
	 * "string" The avarage row height can be set in pixels ("25px").
	 * "number" The avarage row height can be set in pixels as a number (25).
	 */
	avgRowHeight?: string|number;

	/**
	 * Used for [column virtualization](ui.ighierarchicalgrid#options:columnVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels for a column width.
	 *
	 *
	 * Valid values:
	 * "string" The avarage column width can be set in pixels ("25px").
	 * "number" The avarage column width can be set in pixels as a number (25).
	 */
	avgColumnWidth?: string|number;

	/**
	 * Default column width that will be set for all columns, that don't have [column width](ui.ighierarchicalgrid#options:columns.width) defined.
	 *
	 *
	 * Valid values:
	 * "string" The default column width can be set in pixels ("100px").
	 * "number" The default column width can be set in pixels as a number (100).
	 */
	defaultColumnWidth?: string|number;

	/**
	 * If no [columns](ui.ighierarchicalgrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.ighierarchicalgrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.ighierarchicalgrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.ighierarchicalgrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.ighierarchicalgrid#options:defaultColumnWidth) as well.
	 *
	 */
	autoGenerateColumns?: boolean;

	/**
	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
	 *
	 */
	virtualization?: boolean;

	/**
	 * Determines row virtualization mode.
	 *
	 *
	 * Valid values:
	 * "fixed" Renders only the visible rows and/or columns in the grid. On scrolling the same rows and/or columns are updated with new data from the data source. Only fixed virtualization can work with column virtualization at the same time. Fixed virtualization is not supported by some grid features: Resizing, Group By, Responsive.
	 * "continuous" renders a pre-defined number of rows in the grid. On scrolling the continuous virtualization loads another portion of rows and disposes the current one.
	 */
	virtualizationMode?: string;

	/**
	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
	 *
	 */
	rowVirtualization?: boolean;

	/**
	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.ighierarchicalgrid#options:virtualization) to true and [virtualizationMode](ui.ighierarchicalgrid#options:virtualizationMode) to "fixed".
	 *
	 */
	columnVirtualization?: boolean;

	/**
	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight).
	 *
	 */
	virtualizationMouseWheelStep?: number;

	/**
	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
	 *
	 */
	adjustVirtualHeights?: boolean;

	/**
	 * The templating engine that will be used to render the grid [column templates](ui.ighierarchicalgrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
	 *
	 *
	 * Valid values:
	 * "infragistics" The grid will use the Infragistics Templating engine to render its [column templates](ui.ighierarchicalgrid#options:columns.template) and specific parts of the UI.
	 * "jsRender" The grid will use jsRender to render its [column templates](ui.ighierarchicalgrid#options:columns.template) and specific parts of the UI.
	 */
	templatingEngine?: string;

	/**
	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
	 *
	 */
	columns?: IgHierarchicalGridColumn[];

	/**
	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
	 *
	 *
	 * Valid values:
	 * "string" DataSource as a string. For example a Url.
	 * "array" DataSource as an array.
	 * "object" DataSource as an object. For example a JSON object
	 */
	dataSource?: string|Array<any>|Object;

	/**
	 * Specifies a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
	 *
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
	 *
	 */
	dataSourceType?: string;

	/**
	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
	 *
	 */
	responseDataKey?: string;

	/**
	 * See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
	 *
	 */
	responseTotalRecCountKey?: string;

	/**
	 * Specifies the HTTP verb to be used to issue the requests to a remote data source.
	 *
	 */
	requestType?: string;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	responseContentType?: string;

	/**
	 * Controls the visibility of the grid header.
	 *
	 */
	showHeader?: boolean;

	/**
	 * Controls the visibility of the grid footer.
	 *
	 */
	showFooter?: boolean;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
	 *
	 */
	fixedHeaders?: boolean;

	/**
	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
	 *
	 */
	fixedFooters?: boolean;

	/**
	 * Caption text that will be shown above the grid header.
	 *
	 */
	caption?: string;

	/**
	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
	 *
	 */
	features?: IgHierarchicalGridFeature[];

	/**
	 * Initial tabIndex attribute that will be set on all focusable elements.
	 *
	 */
	tabIndex?: number;

	/**
	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.ighierarchicalgrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.ighierarchicalgrid#options:columns) defined will be extracted in a new object and used.
	 *
	 */
	localSchemaTransform?: boolean;

	/**
	 * Key of the column containing unique identifiers for the data records.
	 *
	 */
	primaryKey?: string;

	/**
	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
	 *
	 */
	serializeTransactionLog?: boolean;

	/**
	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.ighierarchicalgrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
	 *
	 */
	autoCommit?: boolean;

	/**
	 * If set to true, the following behavior will take place:
	 * If a new row is added, and then deleted, there will be no transaction added to the log.
	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
	 * Note: This option takes effect only when [autoCommit](ui.ighierarchicalgrid#options:autoCommit) is set to false.
	 *
	 */
	aggregateTransactions?: boolean;

	/**
	 * Sets gets ability to automatically format text in cells for numeric and date columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 *
	 * Valid values:
	 * "date" formats only Date columns
	 * "number" formats only number columns
	 * "dateandnumber" formats both Date and number columns
	 * "true" formats Date and number columns
	 * "false" auto formatting is disabled
	 */
	autoFormat?: string|boolean;

	/**
	 * Gets sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.ighierarchicalgrid#options:columns.template).
	 *
	 */
	renderCheckboxes?: boolean;

	/**
	 * URL to which updating requests will be made.
	 *
	 */
	updateUrl?: string;

	/**
	 * Settings related to REST compliant update routines.
	 *
	 */
	restSettings?: IgHierarchicalGridRestSettings;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
	 *
	 */
	alternateRowStyles?: boolean;

	/**
	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
	 *
	 */
	autofitLastColumn?: boolean;

	/**
	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 *
	 */
	enableHoverStyles?: boolean;

	/**
	 * Nables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 *
	 */
	enableUTCDates?: boolean;

	/**
	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
	 *
	 */
	mergeUnboundColumns?: boolean;

	/**
	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
	 *
	 */
	jsonpRequest?: boolean;

	/**
	 * Enables/disables grid adjusting its dimensions when its [width](ui.ighierarchicalgrid#options:width) and/or [height](ui.ighierarchicalgrid#options:height) is set in percent (%) and grid parent DOM container is resized.
	 *
	 */
	enableResizeContainerCheck?: boolean;

	/**
	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
	 *
	 *
	 * Valid values:
	 * "none" Always hide the feature chooser icon; The feature chooser is shown on tapping/clicking the column header.
	 * "desktopOnly" Always show the icon on desktop but hide when touch device detected.
	 * "always" Always show it in any environment. Chooser is shown when tapping the gear icon or column header.
	 */
	featureChooserIconDisplay?: string;

	/**
	 * Settings related to content scrolling.
	 *
	 */
	scrollSettings?: IgHierarchicalGridScrollSettings;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is fired when a hierarchical row is about to be expanded
	 */
	rowExpanding?: RowExpandingEvent;

	/**
	 * Event which is fired after a hierarchical row has been expanded
	 */
	rowExpanded?: RowExpandedEvent;

	/**
	 * Event which is fired when a hierarchical row is about to be collapsed
	 */
	rowCollapsing?: RowCollapsingEvent;

	/**
	 * Event which is fired when a hierarchical row has been collapsed
	 */
	rowCollapsed?: RowCollapsedEvent;

	/**
	 * Event which is fired when children are about to be populated (Load on demand)
	 */
	childrenPopulating?: ChildrenPopulatingEvent;

	/**
	 * Event which is fired when children have been populated (Load on demand)
	 */
	childrenPopulated?: ChildrenPopulatedEvent;

	/**
	 * Event fired when child grid is rendered
	 */
	childGridRendered?: ChildGridRenderedEvent;

	/**
	 * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
	 */
	childGridCreating?: ChildGridCreatingEvent;

	/**
	 * Event fired after a child grid is created
	 */
	childGridCreated?: ChildGridCreatedEvent;

	/**
	 * Event fired when a cell is clicked.
	 */
	cellClick?: CellClickEvent;

	/**
	 * Event fired when a cell is right clicked.
	 */
	cellRightClick?: CellRightClickEvent;

	/**
	 * Event fired before data binding takes place.
	 *
	 * Return false in order to cancel data binding.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event fired after data binding is complete.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event fired before the grid starts rendering (all contents).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 * Return false in order to cancel grid rendering.
	 */
	rendering?: RenderingEvent;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 */
	rendered?: RenderedEvent;

	/**
	 * Event fired before the TBODY holding the data records starts its rendering.
	 * Return false in order to cancel data records rendering.
	 */
	dataRendering?: DataRenderingEvent;

	/**
	 * Event fired after all of the data records in the grid table body have been rendered.
	 */
	dataRendered?: DataRenderedEvent;

	/**
	 * Event fired before the header starts its rendering.
	 * Return false in order to cancel header rendering.
	 */
	headerRendering?: HeaderRenderingEvent;

	/**
	 * Event fired after the header has been rendered.
	 */
	headerRendered?: HeaderRenderedEvent;

	/**
	 * Event fired before the caption starts its rendering.
	 * Return false in order to cancel caption rendering.
	 */
	captionRendering?: CaptionRenderingEvent;

	/**
	 * Event fired after the caption has been rendered.
	 */
	captionRendered?: CaptionRenderedEvent;

	/**
	 * Event fired before the footer starts its rendering.
	 *
	 * Return false in order to cancel footer rendering.
	 */
	footerRendering?: FooterRenderingEvent;

	/**
	 * Event fired after the footer has been rendered.
	 */
	footerRendered?: FooterRenderedEvent;

	/**
	 * Event fired after every TH in the grid header has been rendered.
	 */
	headerCellRendered?: HeaderCellRenderedEvent;

	/**
	 * Event fired before actual data rows (TRs) are rendered.
	 * Return false in order to cancel rows rendering.
	 */
	rowsRendering?: RowsRenderingEvent;

	/**
	 * Event fired after data rows are rendered.
	 */
	rowsRendered?: RowsRenderedEvent;

	/**
	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
	 */
	schemaGenerated?: SchemaGeneratedEvent;

	/**
	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
	 */
	columnsCollectionModified?: ColumnsCollectionModifiedEvent;

	/**
	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
	 * such as data binding, paging, sorting, etc.
	 */
	requestError?: RequestErrorEvent;

	/**
	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
	 */
	created?: CreatedEvent;

	/**
	 * Fired when the grid is destroyed
	 */
	destroyed?: DestroyedEvent;

	/**
	 * Option for igHierarchicalGrid
	 */
	[optionName: string]: any;
}
interface IgHierarchicalGridMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.ighierarchicalgrid#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.ighierarchicalgrid#options:language) or [locale](ui.ighierarchicalgrid#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ighierarchicalgrid#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.ighierarchicalgrid#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Data binds the hierarchical grid. No child grids will be created or rendered by default, unless there is initialExpandDepth >= 0 set.
	 */
	dataBind(): void;

	/**
	 * Returns the element of the root grid (igGrid)
	 */
	root(): Object;

	/**
	 * Returns the widget object of the root grid (igGrid)
	 */
	rootWidget(): Object;

	/**
	 * Returns a flat list of all child grid widgets (not elements) - recursive
	 */
	allChildrenWidgets(): Object;

	/**
	 * Returns a flat list of all child grid elements (recursive)
	 */
	allChildren(): Object;

	/**
	 * Expands or collapses (toggles) a parent row
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param element accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
	 * @param callback Specifies a custom function to be called when parent row is toggled(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was toggled
	 */
	toggle(element: Element, callback?: Function): void;

	/**
	 * Expands (toggles) a parent row
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param id accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
	 * @param callback Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments first is hierarchical grid object, second is the row element that was expanded
	 */
	expand(id: Element, callback?: Function): void;

	/**
	 * Checks if a parent row is expanded or not
	 *
	 * @param element accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
	 */
	expanded(element: Element): boolean;

	/**
	 * Collapses a parent row
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param id accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
	 * @param callback Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was collapsed
	 */
	collapse(id: Element, callback?: Function): void;

	/**
	 * Checks if a parent row is currently collapsed
	 *
	 * @param element accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
	 */
	collapsed(element: Element): boolean;

	/**
	 * Checks if a parent row is populated with data
	 *
	 * @param element accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
	 */
	populated(element: Element): boolean;

	/**
	 * Commits pending transactions to the client data source for main and all child grids.
	 */
	commit(): void;

	/**
	 * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
	 *
	 * @param rebind Whether to perform a rebind.
	 */
	rollback(rebind?: boolean): void;

	/**
	 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Destroys the hierarchical grid by recursively destroying all child grids
	 */
	destroy(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igHierarchicalGrid"): IgHierarchicalGridMethods;
}

interface JQuery {
	igHierarchicalGrid(methodName: "changeLocale"): void;
	igHierarchicalGrid(methodName: "changeRegional"): void;
	igHierarchicalGrid(methodName: "dataBind"): void;
	igHierarchicalGrid(methodName: "root"): Object;
	igHierarchicalGrid(methodName: "rootWidget"): Object;
	igHierarchicalGrid(methodName: "allChildrenWidgets"): Object;
	igHierarchicalGrid(methodName: "allChildren"): Object;
	igHierarchicalGrid(methodName: "toggle", element: Element, callback?: Function): void;
	igHierarchicalGrid(methodName: "expand", id: Element, callback?: Function): void;
	igHierarchicalGrid(methodName: "expanded", element: Element): boolean;
	igHierarchicalGrid(methodName: "collapse", id: Element, callback?: Function): void;
	igHierarchicalGrid(methodName: "collapsed", element: Element): boolean;
	igHierarchicalGrid(methodName: "populated", element: Element): boolean;
	igHierarchicalGrid(methodName: "commit"): void;
	igHierarchicalGrid(methodName: "rollback", rebind?: boolean): void;
	igHierarchicalGrid(methodName: "saveChanges", success: Function, error: Function): void;
	igHierarchicalGrid(methodName: "destroy"): void;
	igHierarchicalGrid(methodName: "changeGlobalLanguage"): void;
	igHierarchicalGrid(methodName: "changeGlobalRegional"): void;

	/**
	 * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will render the child grids up to the specified level.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "initialDataBindDepth"): number;

	/**
	 * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will render the child grids up to the specified level.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "initialDataBindDepth", optionValue: number): void;

	/**
	 * No levels will be automatically expanded when the widget is instantiated for the first time
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "initialExpandDepth"): number;

	/**
	 * No levels will be automatically expanded when the widget is instantiated for the first time
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "initialExpandDepth", optionValue: number): void;

	/**
	 * If true, encodes all requests using OData conventions and the $expand syntax
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "odata"): boolean;

	/**
	 * If true, encodes all requests using OData conventions and the $expand syntax
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "odata", optionValue: boolean): void;

	/**
	 * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
	 * the ajax GET calls.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rest"): boolean;

	/**
	 * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
	 * the ajax GET calls.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rest", optionValue: boolean): void;

	/**
	 * Gets the limit on the number of levels to bind to
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "maxDataBindDepth"): number;

	/**
	 * Sets the limit on the number of levels to bind to
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "maxDataBindDepth", optionValue: number): void;

	/**
	 * Gets the default property in the response where children will be located
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "defaultChildrenDataProperty"): string;

	/**
	 * Sets the default property in the response where children will be located
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "defaultChildrenDataProperty", optionValue: string): void;

	/**
	 * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
	 * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoGenerateLayouts"): boolean;

	/**
	 * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
	 * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoGenerateLayouts", optionValue: boolean): void;

	/**
	 * Applies a linear animation - either expanding or collapsing depending on the parent row state
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "expandCollapseAnimations"): boolean;

	/**
	 * Applies a linear animation - either expanding or collapsing depending on the parent row state
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "expandCollapseAnimations", optionValue: boolean): void;

	/**
	 * Gets the expand column width
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "expandColWidth"): number;

	/**
	 * Sets the expand column width
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "expandColWidth", optionValue: number): void;

	/**
	 * Gets the delimiter for constructing paths , for hierarchical lookup of data
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "pathSeparator"): string;

	/**
	 * Sets the delimiter for constructing paths , for hierarchical lookup of data
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "pathSeparator", optionValue: string): void;

	/**
	 * The row expanding/collapsing animation duration in ms.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "animationDuration"): number;

	/**
	 * The row expanding/collapsing animation duration in ms.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the default tooltip applied to an expand column cell, that is currently collapsed. Use option [locale.columnChooserCaptionText](ui.ighierarchicalgrid#options:locale.expandTooltip).
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "expandTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the default tooltip applied to an expand column cell, that is currently collapsed. Use option [locale.columnChooserCaptionText](ui.ighierarchicalgrid#options:locale.expandTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "expandTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the default tooltip applied to an expand column cell, that is currently expanded. Use option [locale.collapseTooltip](ui.ighierarchicalgrid#options:locale.collapseTooltip).
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "collapseTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the default tooltip applied to an expand column cell, that is currently expanded. Use option [locale.collapseTooltip](ui.ighierarchicalgrid#options:locale.collapseTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "collapseTooltip", optionValue: string): void;
	igHierarchicalGrid(optionLiteral: 'option', optionName: "locale"): IgHierarchicalGridLocale;
	igHierarchicalGrid(optionLiteral: 'option', optionName: "locale", optionValue: IgHierarchicalGridLocale): void;

	/**
	 * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "columnLayouts"): IgHierarchicalGridColumnLayout[];

	/**
	 * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "columnLayouts", optionValue: IgHierarchicalGridColumnLayout[]): void;

	/**
	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * If autoAdjustHeight is set to false, the [height](ui.ighierarchicalgrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data  ( > 1000 rows rendered at once, no [virtualization](ui.ighierarchicalgrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoAdjustHeight"): boolean;

	/**
	 * If autoAdjustHeight is set to false, the [height](ui.ighierarchicalgrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no [virtualization](ui.ighierarchicalgrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoAdjustHeight", optionValue: boolean): void;

	/**
	 * Used for [row virtualization](ui.ighierarchicalgrid#options:rowVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "avgRowHeight"): string|number;

	/**
	 * Used for [row virtualization](ui.ighierarchicalgrid#options:rowVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "avgRowHeight", optionValue: string|number): void;

	/**
	 * Used for [column virtualization](ui.ighierarchicalgrid#options:columnVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels for a column width.
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "avgColumnWidth"): string|number;

	/**
	 * Used for [column virtualization](ui.ighierarchicalgrid#options:columnVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels for a column width.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "avgColumnWidth", optionValue: string|number): void;

	/**
	 * Default column width that will be set for all columns, that don't have [column width](ui.ighierarchicalgrid#options:columns.width) defined.
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "defaultColumnWidth"): string|number;

	/**
	 * Default column width that will be set for all columns, that don't have [column width](ui.ighierarchicalgrid#options:columns.width) defined.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "defaultColumnWidth", optionValue: string|number): void;

	/**
	 * If no [columns](ui.ighierarchicalgrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.ighierarchicalgrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.ighierarchicalgrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.ighierarchicalgrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.ighierarchicalgrid#options:defaultColumnWidth) as well.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoGenerateColumns"): boolean;

	/**
	 * If no [columns](ui.ighierarchicalgrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.ighierarchicalgrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.ighierarchicalgrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.ighierarchicalgrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.ighierarchicalgrid#options:defaultColumnWidth) as well.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoGenerateColumns", optionValue: boolean): void;

	/**
	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "virtualization"): boolean;

	/**
	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "virtualization", optionValue: boolean): void;

	/**
	 * Determines row virtualization mode.
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "virtualizationMode"): string;

	/**
	 * Determines row virtualization mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "virtualizationMode", optionValue: string): void;

	/**
	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowVirtualization"): boolean;

	/**
	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowVirtualization", optionValue: boolean): void;

	/**
	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.ighierarchicalgrid#options:virtualization) to true and [virtualizationMode](ui.ighierarchicalgrid#options:virtualizationMode) to "fixed".
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "columnVirtualization"): boolean;

	/**
	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.ighierarchicalgrid#options:virtualization) to true and [virtualizationMode](ui.ighierarchicalgrid#options:virtualizationMode) to "fixed".
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "columnVirtualization", optionValue: boolean): void;

	/**
	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight).
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "virtualizationMouseWheelStep"): number;

	/**
	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "virtualizationMouseWheelStep", optionValue: number): void;

	/**
	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "adjustVirtualHeights"): boolean;

	/**
	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "adjustVirtualHeights", optionValue: boolean): void;

	/**
	 * The templating engine that will be used to render the grid [column templates](ui.ighierarchicalgrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "templatingEngine"): string;

	/**
	 * The templating engine that will be used to render the grid [column templates](ui.ighierarchicalgrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "templatingEngine", optionValue: string): void;

	/**
	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "columns"): IgHierarchicalGridColumn[];

	/**
	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "columns", optionValue: IgHierarchicalGridColumn[]): void;

	/**
	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataSource"): string|Array<any>|Object;

	/**
	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataSource", optionValue: string|Array<any>|Object): void;

	/**
	 * Gets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * Gets the HTTP verb to be used to issue the requests to a remote data source.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "requestType"): string;

	/**
	 * Sets the HTTP verb to be used to issue the requests to a remote data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "responseContentType"): string;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;

	/**
	 * Controls the visibility of the grid header.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "showHeader"): boolean;

	/**
	 * Controls the visibility of the grid header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "showHeader", optionValue: boolean): void;

	/**
	 * Controls the visibility of the grid footer.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "showFooter"): boolean;

	/**
	 * Controls the visibility of the grid footer.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "showFooter", optionValue: boolean): void;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "fixedHeaders"): boolean;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "fixedHeaders", optionValue: boolean): void;

	/**
	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "fixedFooters"): boolean;

	/**
	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "fixedFooters", optionValue: boolean): void;

	/**
	 * Caption text that will be shown above the grid header.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "caption"): string;

	/**
	 * Caption text that will be shown above the grid header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "caption", optionValue: string): void;

	/**
	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "features"): IgHierarchicalGridFeature[];

	/**
	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "features", optionValue: IgHierarchicalGridFeature[]): void;

	/**
	 * Initial tabIndex attribute that will be set on all focusable elements.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * Initial tabIndex attribute that will be set on all focusable elements.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.ighierarchicalgrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.ighierarchicalgrid#options:columns) defined will be extracted in a new object and used.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "localSchemaTransform"): boolean;

	/**
	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.ighierarchicalgrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.ighierarchicalgrid#options:columns) defined will be extracted in a new object and used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "localSchemaTransform", optionValue: boolean): void;

	/**
	 * Key of the column containing unique identifiers for the data records.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "primaryKey"): string;

	/**
	 * Key of the column containing unique identifiers for the data records.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "primaryKey", optionValue: string): void;

	/**
	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "serializeTransactionLog"): boolean;

	/**
	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "serializeTransactionLog", optionValue: boolean): void;

	/**
	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.ighierarchicalgrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoCommit"): boolean;

	/**
	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.ighierarchicalgrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoCommit", optionValue: boolean): void;

	/**
	 * If set to true, the following behavior will take place:
	 * If a new row is added, and then deleted, there will be no transaction added to the log.
	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
	 * Note: This option takes effect only when [autoCommit](ui.ighierarchicalgrid#options:autoCommit) is set to false.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "aggregateTransactions"): boolean;

	/**
	 * If set to true, the following behavior will take place:
	 * If a new row is added, and then deleted, there will be no transaction added to the log.
	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
	 * Note: This option takes effect only when [autoCommit](ui.ighierarchicalgrid#options:autoCommit) is set to false.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "aggregateTransactions", optionValue: boolean): void;

	/**
	 * Sets gets ability to automatically format text in cells for numeric and date columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoFormat"): string|boolean;

	/**
	 * Sets gets ability to automatically format text in cells for numeric and date columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "autoFormat", optionValue: string|boolean): void;

	/**
	 * Gets  ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.ighierarchicalgrid#options:columns.template).
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "renderCheckboxes"): boolean;

	/**
	 * Sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.ighierarchicalgrid#options:columns.template).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "renderCheckboxes", optionValue: boolean): void;

	/**
	 * URL to which updating requests will be made.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "updateUrl"): string;

	/**
	 * URL to which updating requests will be made.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "updateUrl", optionValue: string): void;

	/**
	 * Settings related to REST compliant update routines.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "restSettings"): IgHierarchicalGridRestSettings;

	/**
	 * Settings related to REST compliant update routines.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "restSettings", optionValue: IgHierarchicalGridRestSettings): void;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "alternateRowStyles"): boolean;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "alternateRowStyles", optionValue: boolean): void;

	/**
	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autofitLastColumn"): boolean;

	/**
	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "autofitLastColumn", optionValue: boolean): void;

	/**
	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "enableHoverStyles"): boolean;

	/**
	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "enableHoverStyles", optionValue: boolean): void;

	/**
	 * Nables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "enableUTCDates"): boolean;

	/**
	 * Nables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "enableUTCDates", optionValue: boolean): void;

	/**
	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "mergeUnboundColumns"): boolean;

	/**
	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "mergeUnboundColumns", optionValue: boolean): void;

	/**
	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "jsonpRequest"): boolean;

	/**
	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "jsonpRequest", optionValue: boolean): void;

	/**
	 * Enables/disables grid adjusting its dimensions when its [width](ui.ighierarchicalgrid#options:width) and/or [height](ui.ighierarchicalgrid#options:height) is set in percent (%) and grid parent DOM container is resized.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "enableResizeContainerCheck"): boolean;

	/**
	 * Enables/disables grid adjusting its dimensions when its [width](ui.ighierarchicalgrid#options:width) and/or [height](ui.ighierarchicalgrid#options:height) is set in percent (%) and grid parent DOM container is resized.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "enableResizeContainerCheck", optionValue: boolean): void;

	/**
	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "featureChooserIconDisplay"): string;

	/**
	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "featureChooserIconDisplay", optionValue: string): void;

	/**
	 * Settings related to content scrolling.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "scrollSettings"): IgHierarchicalGridScrollSettings;

	/**
	 * Settings related to content scrolling.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "scrollSettings", optionValue: IgHierarchicalGridScrollSettings): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHierarchicalGrid(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is fired when a hierarchical row is about to be expanded
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowExpanding"): RowExpandingEvent;

	/**
	 * Event which is fired when a hierarchical row is about to be expanded
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowExpanding", optionValue: RowExpandingEvent): void;

	/**
	 * Event which is fired after a hierarchical row has been expanded
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowExpanded"): RowExpandedEvent;

	/**
	 * Event which is fired after a hierarchical row has been expanded
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowExpanded", optionValue: RowExpandedEvent): void;

	/**
	 * Event which is fired when a hierarchical row is about to be collapsed
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowCollapsing"): RowCollapsingEvent;

	/**
	 * Event which is fired when a hierarchical row is about to be collapsed
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowCollapsing", optionValue: RowCollapsingEvent): void;

	/**
	 * Event which is fired when a hierarchical row has been collapsed
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowCollapsed"): RowCollapsedEvent;

	/**
	 * Event which is fired when a hierarchical row has been collapsed
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowCollapsed", optionValue: RowCollapsedEvent): void;

	/**
	 * Event which is fired when children are about to be populated (Load on demand)
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childrenPopulating"): ChildrenPopulatingEvent;

	/**
	 * Event which is fired when children are about to be populated (Load on demand)
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childrenPopulating", optionValue: ChildrenPopulatingEvent): void;

	/**
	 * Event which is fired when children have been populated (Load on demand)
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childrenPopulated"): ChildrenPopulatedEvent;

	/**
	 * Event which is fired when children have been populated (Load on demand)
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childrenPopulated", optionValue: ChildrenPopulatedEvent): void;

	/**
	 * Event fired when child grid is rendered
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridRendered"): ChildGridRenderedEvent;

	/**
	 * Event fired when child grid is rendered
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridRendered", optionValue: ChildGridRenderedEvent): void;

	/**
	 * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridCreating"): ChildGridCreatingEvent;

	/**
	 * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridCreating", optionValue: ChildGridCreatingEvent): void;

	/**
	 * Event fired after a child grid is created
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridCreated"): ChildGridCreatedEvent;

	/**
	 * Event fired after a child grid is created
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridCreated", optionValue: ChildGridCreatedEvent): void;

	/**
	 * Event fired when a cell is clicked.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "cellClick"): CellClickEvent;

	/**
	 * Event fired when a cell is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "cellClick", optionValue: CellClickEvent): void;

	/**
	 * Event fired when a cell is right clicked.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "cellRightClick"): CellRightClickEvent;

	/**
	 * Event fired when a cell is right clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "cellRightClick", optionValue: CellRightClickEvent): void;

	/**
	 * Event fired before data binding takes place.
	 *
	 * Return false in order to cancel data binding.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event fired before data binding takes place.
	 *
	 * Return false in order to cancel data binding.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event fired after data binding is complete.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event fired after data binding is complete.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event fired before the grid starts rendering (all contents).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 * Return false in order to cancel grid rendering.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Event fired before the grid starts rendering (all contents).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 * Return false in order to cancel grid rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Event fired before the TBODY holding the data records starts its rendering.
	 * Return false in order to cancel data records rendering.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataRendering"): DataRenderingEvent;

	/**
	 * Event fired before the TBODY holding the data records starts its rendering.
	 * Return false in order to cancel data records rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataRendering", optionValue: DataRenderingEvent): void;

	/**
	 * Event fired after all of the data records in the grid table body have been rendered.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataRendered"): DataRenderedEvent;

	/**
	 * Event fired after all of the data records in the grid table body have been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "dataRendered", optionValue: DataRenderedEvent): void;

	/**
	 * Event fired before the header starts its rendering.
	 * Return false in order to cancel header rendering.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "headerRendering"): HeaderRenderingEvent;

	/**
	 * Event fired before the header starts its rendering.
	 * Return false in order to cancel header rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "headerRendering", optionValue: HeaderRenderingEvent): void;

	/**
	 * Event fired after the header has been rendered.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "headerRendered"): HeaderRenderedEvent;

	/**
	 * Event fired after the header has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "headerRendered", optionValue: HeaderRenderedEvent): void;

	/**
	 * Event fired before the caption starts its rendering.
	 * Return false in order to cancel caption rendering.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "captionRendering"): CaptionRenderingEvent;

	/**
	 * Event fired before the caption starts its rendering.
	 * Return false in order to cancel caption rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "captionRendering", optionValue: CaptionRenderingEvent): void;

	/**
	 * Event fired after the caption has been rendered.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "captionRendered"): CaptionRenderedEvent;

	/**
	 * Event fired after the caption has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "captionRendered", optionValue: CaptionRenderedEvent): void;

	/**
	 * Event fired before the footer starts its rendering.
	 *
	 * Return false in order to cancel footer rendering.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "footerRendering"): FooterRenderingEvent;

	/**
	 * Event fired before the footer starts its rendering.
	 *
	 * Return false in order to cancel footer rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "footerRendering", optionValue: FooterRenderingEvent): void;

	/**
	 * Event fired after the footer has been rendered.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "footerRendered"): FooterRenderedEvent;

	/**
	 * Event fired after the footer has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "footerRendered", optionValue: FooterRenderedEvent): void;

	/**
	 * Event fired after every TH in the grid header has been rendered.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "headerCellRendered"): HeaderCellRenderedEvent;

	/**
	 * Event fired after every TH in the grid header has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "headerCellRendered", optionValue: HeaderCellRenderedEvent): void;

	/**
	 * Event fired before actual data rows (TRs) are rendered.
	 * Return false in order to cancel rows rendering.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowsRendering"): RowsRenderingEvent;

	/**
	 * Event fired before actual data rows (TRs) are rendered.
	 * Return false in order to cancel rows rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowsRendering", optionValue: RowsRenderingEvent): void;

	/**
	 * Event fired after data rows are rendered.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowsRendered"): RowsRenderedEvent;

	/**
	 * Event fired after data rows are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "rowsRendered", optionValue: RowsRenderedEvent): void;

	/**
	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "schemaGenerated"): SchemaGeneratedEvent;

	/**
	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "schemaGenerated", optionValue: SchemaGeneratedEvent): void;

	/**
	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "columnsCollectionModified"): ColumnsCollectionModifiedEvent;

	/**
	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "columnsCollectionModified", optionValue: ColumnsCollectionModifiedEvent): void;

	/**
	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
	 * such as data binding, paging, sorting, etc.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "requestError"): RequestErrorEvent;

	/**
	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
	 * such as data binding, paging, sorting, etc.
	 *
	 * @optionValue Define event handler function.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "requestError", optionValue: RequestErrorEvent): void;

	/**
	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "created"): CreatedEvent;

	/**
	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "created", optionValue: CreatedEvent): void;

	/**
	 * Fired when the grid is destroyed
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "destroyed"): DestroyedEvent;

	/**
	 * Fired when the grid is destroyed
	 *
	 * @optionValue New value to be set.
	 */
	igHierarchicalGrid(optionLiteral: 'option', optionName: "destroyed", optionValue: DestroyedEvent): void;
	igHierarchicalGrid(options: IgHierarchicalGrid): JQuery;
	igHierarchicalGrid(optionLiteral: 'option', optionName: string): any;
	igHierarchicalGrid(optionLiteral: 'option', options: IgHierarchicalGrid): JQuery;
	igHierarchicalGrid(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igHierarchicalGrid(methodName: string, ...methodParams: any[]): any;
}
interface GroupCollapsingEvent {
	(event: Event, ui: GroupCollapsingEventUIParam): void;
}

interface GroupCollapsingEventUIParam {
	/**
	 * Gets the reference to the GridMultiColumnHeaders widget.
	 */
	owner?: any;

	/**
	 * Gets the column object for the current group that is collapsing.
	 */
	column?: any;

	/**
	 * Get a reference to the jQuery object for the column being collapsing (th).
	 */
	element?: string;
}

interface GroupCollapsedEvent {
	(event: Event, ui: GroupCollapsedEventUIParam): void;
}

interface GroupCollapsedEventUIParam {
	/**
	 * Gets the reference to the GridMultiColumnHeaders widget.
	 */
	owner?: any;

	/**
	 * Gets the column object for the current group that is collapsed.
	 */
	column?: any;

	/**
	 * Get a reference to the jQuery object for the column being collapsed (th).
	 */
	element?: string;
}

interface GroupExpandingEvent {
	(event: Event, ui: GroupExpandingEventUIParam): void;
}

interface GroupExpandingEventUIParam {
	/**
	 * Gets the reference to the GridMultiColumnHeaders widget.
	 */
	owner?: any;

	/**
	 * Gets the column object for the current group that is expanding.
	 */
	column?: any;

	/**
	 * Gets a reference to the jQuery object for the column being expanded (th).
	 */
	element?: string;
}

interface GroupExpandedEvent {
	(event: Event, ui: GroupExpandedEventUIParam): void;
}

interface GroupExpandedEventUIParam {
	/**
	 * Gets the reference to the GridMultiColumnHeaders widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the jQuery object for the column being expanded (th).
	 */
	element?: string;
}

interface IgGridMultiColumnHeaders {
	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	inherit?: boolean;

	/**
	 * Event fired before a group collapsing operation is executed.
	 */
	groupCollapsing?: GroupCollapsingEvent;

	/**
	 * Event fired after the group collapsing has been executed and results are rendered.
	 */
	groupCollapsed?: GroupCollapsedEvent;

	/**
	 * Event fired before a group expanding operation is executed.
	 */
	groupExpanding?: GroupExpandingEvent;

	/**
	 * Event fired after the group expanding has been executed and results are rendered.
	 */
	groupExpanded?: GroupExpandedEvent;

	/**
	 * Option for igGridMultiColumnHeaders
	 */
	[optionName: string]: any;
}
interface IgGridMultiColumnHeadersMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridmulticolumnheader#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridmulticolumnheader#options:language) or [locale](ui.iggridmulticolumnheader#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Expands a collapsed group. If the group is expanded, the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param groupKey Group key.
	 * @param callback Specifies a custom function to be called when the group is expanded.
	 */
	expandGroup(groupKey: string, callback?: Function): void;

	/**
	 * Collapses an expanded group. If the group is collapsed, the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param groupKey Group key.
	 * @param callback Specifies a custom function to be called when the group is collapsed.
	 */
	collapseGroup(groupKey: string, callback?: Function): void;

	/**
	 * Toggles a collapsible group.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param groupKey Group key.
	 * @param callback Specifies a custom function to be called when the group is toggled.
	 */
	toggleGroup(groupKey: string, callback?: Function): void;

	/**
	 * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined
	 */
	getMultiColumnHeaders(): any[];

	/**
	 * Destroys the multicolumn widget
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igGridMultiColumnHeaders"): IgGridMultiColumnHeadersMethods;
}

interface JQuery {
	igGridMultiColumnHeaders(methodName: "changeLocale"): void;
	igGridMultiColumnHeaders(methodName: "expandGroup", groupKey: string, callback?: Function): void;
	igGridMultiColumnHeaders(methodName: "collapseGroup", groupKey: string, callback?: Function): void;
	igGridMultiColumnHeaders(methodName: "toggleGroup", groupKey: string, callback?: Function): void;
	igGridMultiColumnHeaders(methodName: "getMultiColumnHeaders"): any[];
	igGridMultiColumnHeaders(methodName: "destroy"): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Event fired before a group collapsing operation is executed.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupCollapsing"): GroupCollapsingEvent;

	/**
	 * Event fired before a group collapsing operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupCollapsing", optionValue: GroupCollapsingEvent): void;

	/**
	 * Event fired after the group collapsing has been executed and results are rendered.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupCollapsed"): GroupCollapsedEvent;

	/**
	 * Event fired after the group collapsing has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupCollapsed", optionValue: GroupCollapsedEvent): void;

	/**
	 * Event fired before a group expanding operation is executed.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupExpanding"): GroupExpandingEvent;

	/**
	 * Event fired before a group expanding operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupExpanding", optionValue: GroupExpandingEvent): void;

	/**
	 * Event fired after the group expanding has been executed and results are rendered.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupExpanded"): GroupExpandedEvent;

	/**
	 * Event fired after the group expanding has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupExpanded", optionValue: GroupExpandedEvent): void;
	igGridMultiColumnHeaders(options: IgGridMultiColumnHeaders): JQuery;
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: string): any;
	igGridMultiColumnHeaders(optionLiteral: 'option', options: IgGridMultiColumnHeaders): JQuery;
	igGridMultiColumnHeaders(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridMultiColumnHeaders(methodName: string, ...methodParams: any[]): any;
}
interface IgGridPagingLocale {
	/**
	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 *
	 */
	pageSizeDropDownLabel?: string;

	/**
	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 *
	 */
	pageSizeDropDownTrailingLabel?: string;

	/**
	 * Text for the next page label.
	 *
	 */
	nextPageLabelText?: string;

	/**
	 * Text for the previous page label.
	 *
	 */
	prevPageLabelText?: string;

	/**
	 * Text for the first page label.
	 *
	 */
	firstPageLabelText?: string;

	/**
	 * Text for the last page label.
	 *
	 */
	lastPageLabelText?: string;

	/**
	 * Leading label text for the drop down from where the page index can be switched.
	 *
	 */
	currentPageDropDownLeadingLabel?: string;

	/**
	 * Trailing label text for the drop down from where the page index can be switched.
	 *
	 */
	currentPageDropDownTrailingLabel?: string;

	/**
	 * Tooltip text for the page index drop down.
	 *
	 */
	currentPageDropDownTooltip?: string;

	/**
	 * Tooltip text for the page size drop down.
	 *
	 */
	pageSizeDropDownTooltip?: string;

	/**
	 * Tooltip text for the pager records label.
	 *
	 */
	pagerRecordsLabelTooltip?: string;

	/**
	 * Tooltip text for the previous page button.
	 *
	 */
	prevPageTooltip?: string;

	/**
	 * Tooltip text for the next page button.
	 *
	 */
	nextPageTooltip?: string;

	/**
	 * Tooltip text for the first page button.
	 *
	 */
	firstPageTooltip?: string;

	/**
	 * Tooltip text for the last page button.
	 *
	 */
	lastPageTooltip?: string;

	/**
	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
	 * See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
	 *
	 */
	pageTooltipFormat?: string;

	/**
	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
	 *
	 */
	pagerRecordsLabelTemplate?: string;

	/**
	 * Option for IgGridPagingLocale
	 */
	[optionName: string]: any;
}

interface PageIndexChangingEvent {
	(event: Event, ui: PageIndexChangingEventUIParam): void;
}

interface PageIndexChangingEventUIParam {
	/**
	 * Gets reference to GridPaging.
	 */
	owner?: any;

	/**
	 * Gets current page index.
	 */
	currentPageIndex?: number;

	/**
	 * Gets new page index.
	 */
	newPageIndex?: number;
}

interface PageIndexChangedEvent {
	(event: Event, ui: PageIndexChangedEventUIParam): void;
}

interface PageIndexChangedEventUIParam {
	/**
	 * Gets reference to GridPaging.
	 */
	owner?: any;

	/**
	 * Gets the current page index.
	 */
	pageIndex?: number;
}

interface PageSizeChangingEvent {
	(event: Event, ui: PageSizeChangingEventUIParam): void;
}

interface PageSizeChangingEventUIParam {
	/**
	 * Gets reference to GridPaging.
	 */
	owner?: any;

	/**
	 * Gets the current page size.
	 */
	currentPageSize?: number;

	/**
	 * Gets the new page size.
	 */
	newPageSize?: number;
}

interface PageSizeChangedEvent {
	(event: Event, ui: PageSizeChangedEventUIParam): void;
}

interface PageSizeChangedEventUIParam {
	/**
	 * Gets reference to GridPaging.
	 */
	owner?: any;

	/**
	 * Gets the current page size.
	 */
	pageSize?: number;
}

interface PagerRenderingEvent {
	(event: Event, ui: PagerRenderingEventUIParam): void;
}

interface PagerRenderingEventUIParam {
	/**
	 * Gets reference to GridPaging.
	 */
	owner?: any;

	/**
	 * Gets a reference to grid's data source.
	 */
	dataSource?: any;
}

interface PagerRenderedEvent {
	(event: Event, ui: PagerRenderedEventUIParam): void;
}

interface PagerRenderedEventUIParam {
	/**
	 * Gets reference to GridPaging.
	 */
	owner?: any;

	/**
	 * Gets a reference to grid's data source.
	 */
	dataSource?: any;
}

interface IgGridPaging {
	/**
	 * Number of records loaded and displayed per page.
	 *
	 */
	pageSize?: number;

	/**
	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
	 *
	 */
	recordCountKey?: string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
	 *
	 */
	pageSizeUrlKey?: string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
	 *
	 */
	pageIndexUrlKey?: string;

	/**
	 * Current page index that's bound in the data source and rendered in the UI.
	 *
	 */
	currentPageIndex?: number;

	/**
	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * Valid values:
	 * "remote" Paging is performed by a remote end-point.
	 * "local" Paging is performed locally by the [$.ig.DataSource](ig.datasource).
	 */
	type?: string;

	/**
	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
	 *
	 */
	showPageSizeDropDown?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
	 */
	pageSizeDropDownLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
	 */
	pageSizeDropDownTrailingLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
	 */
	pagerRecordsLabelTemplate?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
	 */
	nextPageLabelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
	 */
	prevPageLabelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
	 */
	firstPageLabelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
	 */
	lastPageLabelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
	 */
	currentPageDropDownLeadingLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
	 */
	currentPageDropDownTrailingLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
	 */
	currentPageDropDownTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
	 */
	pageSizeDropDownTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
	 */
	pagerRecordsLabelTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
	 */
	prevPageTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
	 */
	nextPageTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
	 */
	firstPageTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
	 */
	lastPageTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
	 */
	pageTooltipFormat?: string;
	locale?: IgGridPagingLocale;

	/**
	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
	 *
	 *
	 * Valid values:
	 * "above" The page size drop down will be rendered above the grid header.
	 * "inpager" The page size drop down will be rendered next to page links.
	 */
	pageSizeDropDownLocation?: string;

	/**
	 * Option specifying whether to show summary label for the currently rendered records or not.
	 *
	 */
	showPagerRecordsLabel?: boolean;

	/**
	 * Option specifying whether to render the first and last page navigation buttons.
	 *
	 */
	showFirstLastPages?: boolean;

	/**
	 * Option specifying whether to render the previous and next page navigation buttons.
	 *
	 */
	showPrevNextPages?: boolean;

	/**
	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
	 *
	 */
	pageSizeList?: any;

	/**
	 * Sets/Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
	 *
	 */
	pageCountLimit?: number;

	/**
	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
	 *
	 */
	visiblePageCount?: number;

	/**
	 * Drop down width for the page size and page index drop downs.
	 *
	 */
	defaultDropDownWidth?: number;

	/**
	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
	 *
	 */
	delayOnPageChanged?: number;

	/**
	 * Enables/disables paging persistence between states.
	 *
	 */
	persist?: boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 */
	inherit?: boolean;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before the page index is changed.
	 * Return false in order to cancel page index changing.
	 */
	pageIndexChanging?: PageIndexChangingEvent;

	/**
	 * Event fired after the page index is changed , but before grid data rebinds
	 */
	pageIndexChanged?: PageIndexChangedEvent;

	/**
	 * Event fired when the page size is about to be changed from the page size dropdown.
	 * Return false in order to cancel page size changing.
	 */
	pageSizeChanging?: PageSizeChangingEvent;

	/**
	 * Event fired after the page size is changed from the page size dropdown.
	 */
	pageSizeChanged?: PageSizeChangedEvent;

	/**
	 * Event fired before the pager footer is rendered (the whole area below the grid records).
	 *  Event fired after the page size is changed from the page size dropdown.
	 */
	pagerRendering?: PagerRenderingEvent;

	/**
	 * Event fired after the pager footer is rendered
	 */
	pagerRendered?: PagerRenderedEvent;

	/**
	 * Option for igGridPaging
	 */
	[optionName: string]: any;
}
interface IgGridPagingMethods {
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridpaging#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridpaging#options:language) or [locale](ui.iggridpaging#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Gets/Sets the current page index, delegates data binding and paging to [$.ig.DataSource](ig.datasource).
	 *
	 * @param index The page index to go to.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets/Sets the page size. If no parameter is specified, just returns the current page size.
	 *
	 * @param size The new page size.
	 */
	pageSize(size?: number): number;

	/**
	 * Destroys the igGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging.
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igGridPaging"): IgGridPagingMethods;
}

interface JQuery {
	igGridPaging(methodName: "changeGlobalLanguage"): void;
	igGridPaging(methodName: "changeGlobalRegional"): void;
	igGridPaging(methodName: "changeLocale"): void;
	igGridPaging(methodName: "pageIndex", index?: number): number;
	igGridPaging(methodName: "pageSize", size?: number): number;
	igGridPaging(methodName: "destroy"): void;

	/**
	 * Number of records loaded and displayed per page.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSize"): number;

	/**
	 * Number of records loaded and displayed per page.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSize", optionValue: number): void;

	/**
	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "recordCountKey"): string;

	/**
	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "recordCountKey", optionValue: string): void;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeUrlKey"): string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeUrlKey", optionValue: string): void;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageIndexUrlKey"): string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageIndexUrlKey", optionValue: string): void;

	/**
	 * Current page index that's bound in the data source and rendered in the UI.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "currentPageIndex"): number;

	/**
	 * Current page index that's bound in the data source and rendered in the UI.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "currentPageIndex", optionValue: number): void;

	/**
	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 */

	igGridPaging(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridPaging(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "showPageSizeDropDown"): boolean;

	/**
	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "showPageSizeDropDown", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTrailingLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTrailingLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTemplate"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTemplate", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "nextPageLabelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "nextPageLabelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "prevPageLabelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "prevPageLabelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "firstPageLabelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "firstPageLabelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "lastPageLabelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "lastPageLabelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownLeadingLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownLeadingLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTrailingLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTrailingLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "prevPageTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "prevPageTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "nextPageTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "nextPageTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "firstPageTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "firstPageTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "lastPageTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "lastPageTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageTooltipFormat"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageTooltipFormat", optionValue: string): void;
	igGridPaging(optionLiteral: 'option', optionName: "locale"): IgGridPagingLocale;
	igGridPaging(optionLiteral: 'option', optionName: "locale", optionValue: IgGridPagingLocale): void;

	/**
	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
	 *
	 */

	igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLocation"): string;

	/**
	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLocation", optionValue: string): void;

	/**
	 * Option specifying whether to show summary label for the currently rendered records or not.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "showPagerRecordsLabel"): boolean;

	/**
	 * Option specifying whether to show summary label for the currently rendered records or not.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "showPagerRecordsLabel", optionValue: boolean): void;

	/**
	 * Option specifying whether to render the first and last page navigation buttons.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "showFirstLastPages"): boolean;

	/**
	 * Option specifying whether to render the first and last page navigation buttons.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "showFirstLastPages", optionValue: boolean): void;

	/**
	 * Option specifying whether to render the previous and next page navigation buttons.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "showPrevNextPages"): boolean;

	/**
	 * Option specifying whether to render the previous and next page navigation buttons.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "showPrevNextPages", optionValue: boolean): void;

	/**
	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeList"): any;

	/**
	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeList", optionValue: any): void;

	/**
	 * Sets/Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageCountLimit"): number;

	/**
	 * Sets/ the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageCountLimit", optionValue: number): void;

	/**
	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "visiblePageCount"): number;

	/**
	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "visiblePageCount", optionValue: number): void;

	/**
	 * Drop down width for the page size and page index drop downs.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "defaultDropDownWidth"): number;

	/**
	 * Drop down width for the page size and page index drop downs.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "defaultDropDownWidth", optionValue: number): void;

	/**
	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "delayOnPageChanged"): number;

	/**
	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "delayOnPageChanged", optionValue: number): void;

	/**
	 * Enables/disables paging persistence between states.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "persist"): boolean;

	/**
	 * Enables/disables paging persistence between states.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridPaging(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridPaging(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridPaging(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before the page index is changed.
	 * Return false in order to cancel page index changing.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageIndexChanging"): PageIndexChangingEvent;

	/**
	 * Event fired before the page index is changed.
	 * Return false in order to cancel page index changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageIndexChanging", optionValue: PageIndexChangingEvent): void;

	/**
	 * Event fired after the page index is changed , but before grid data rebinds
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageIndexChanged"): PageIndexChangedEvent;

	/**
	 * Event fired after the page index is changed , but before grid data rebinds
	 *
	 * @optionValue Define event handler function.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageIndexChanged", optionValue: PageIndexChangedEvent): void;

	/**
	 * Event fired when the page size is about to be changed from the page size dropdown.
	 * Return false in order to cancel page size changing.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeChanging"): PageSizeChangingEvent;

	/**
	 * Event fired when the page size is about to be changed from the page size dropdown.
	 * Return false in order to cancel page size changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeChanging", optionValue: PageSizeChangingEvent): void;

	/**
	 * Event fired after the page size is changed from the page size dropdown.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeChanged"): PageSizeChangedEvent;

	/**
	 * Event fired after the page size is changed from the page size dropdown.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pageSizeChanged", optionValue: PageSizeChangedEvent): void;

	/**
	 * Event fired before the pager footer is rendered (the whole area below the grid records).
	 *  Event fired after the page size is changed from the page size dropdown.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pagerRendering"): PagerRenderingEvent;

	/**
	 * Event fired before the pager footer is rendered (the whole area below the grid records).
	 *  Event fired after the page size is changed from the page size dropdown.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pagerRendering", optionValue: PagerRenderingEvent): void;

	/**
	 * Event fired after the pager footer is rendered
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pagerRendered"): PagerRenderedEvent;

	/**
	 * Event fired after the pager footer is rendered
	 *
	 * @optionValue Define event handler function.
	 */
	igGridPaging(optionLiteral: 'option', optionName: "pagerRendered", optionValue: PagerRenderedEvent): void;
	igGridPaging(options: IgGridPaging): JQuery;
	igGridPaging(optionLiteral: 'option', optionName: string): any;
	igGridPaging(optionLiteral: 'option', options: IgGridPaging): JQuery;
	igGridPaging(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridPaging(methodName: string, ...methodParams: any[]): any;
}
interface IgGridResizingColumnSetting {
	/**
	 * Column key. this is a required property in every column setting if columnIndex is not set.
	 *
	 */
	columnKey?: string;

	/**
	 * Column index. Can be used in place of column key. the preferred way of populating a column setting is to always use the column keys as identifiers.
	 *
	 */
	columnIndex?: number;

	/**
	 * Enables disables resizing for the column.
	 *
	 */
	allowResizing?: boolean;

	/**
	 * Minimum column width in pixels or percents.
	 *
	 */
	minimumWidth?: string|number;

	/**
	 * Maximum column width in pixels or percents.
	 *
	 */
	maximumWidth?: string|number;

	/**
	 * Option for IgGridResizingColumnSetting
	 */
	[optionName: string]: any;
}

interface ColumnResizingEvent {
	(event: Event, ui: ColumnResizingEventUIParam): void;
}

interface ColumnResizingEventUIParam {
	/**
	 * Gets a reference to the GridResizing widget.
	 */
	owner?: any;

	/**
	 * Gets the resized column index.
	 */
	columnIndex?: number;

	/**
	 * Gets the resized column key.
	 */
	columnKey?: string;

	/**
	 * Gets the desired width(before min/max coercion) for the resized column.
	 */
	desiredWidth?: number;
}

interface ColumnResizingRefusedEvent {
	(event: Event, ui: ColumnResizingRefusedEventUIParam): void;
}

interface ColumnResizingRefusedEventUIParam {
	/**
	 * Gets a reference to the GridResizing widget.
	 */
	owner?: any;

	/**
	 * Gets the resized column index.
	 */
	columnIndex?: number;

	/**
	 * Gets the resized column key.
	 */
	columnKey?: string;

	/**
	 * Gets the desired width(before min/max coercion) for the resized column.
	 */
	desiredWidth?: number;
}

interface ColumnResizedEvent {
	(event: Event, ui: ColumnResizedEventUIParam): void;
}

interface ColumnResizedEventUIParam {
	/**
	 * Gets a reference to the GridResizing widget.
	 */
	owner?: any;

	/**
	 * Gets the resized column index.
	 */
	columnIndex?: number;

	/**
	 * Gets the resized column key.
	 */
	columnKey?: string;

	/**
	 * Gets the original column width.
	 */
	originalWidth?: number;

	/**
	 * Gets the final column width after resizing.
	 */
	newWidth?: number;
}

interface IgGridResizing {
	/**
	 * Resize the column to the size of the longest currently visible cell value.
	 *
	 */
	allowDoubleClickToResize?: boolean;

	/**
	 * Specifies whether the resizing should be deferred until the user finishes resizing or applied immediately.
	 *
	 */
	deferredResizing?: boolean;

	/**
	 * A list of column settings that specifies resizing options on a per column basis.
	 *
	 */
	columnSettings?: IgGridResizingColumnSetting[];

	/**
	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
	 *
	 */
	handleThreshold?: number;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	inherit?: boolean;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before a resizing operation is executed.
	 */
	columnResizing?: ColumnResizingEvent;

	/**
	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
	 */
	columnResizingRefused?: ColumnResizingRefusedEvent;

	/**
	 * Event fired after the resizing has been executed and results are rendered
	 */
	columnResized?: ColumnResizedEvent;

	/**
	 * Option for igGridResizing
	 */
	[optionName: string]: any;
}
interface IgGridResizingMethods {
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Destroys the resizing widget
	 */
	destroy(): void;

	/**
	 * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
	 * @param width Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
	 */
	resize(column: Object, width?: Object): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;
}
interface JQuery {
	data(propertyName: "igGridResizing"): IgGridResizingMethods;
}

interface JQuery {
	igGridResizing(methodName: "changeGlobalLanguage"): void;
	igGridResizing(methodName: "changeGlobalRegional"): void;
	igGridResizing(methodName: "destroy"): void;
	igGridResizing(methodName: "resize", column: Object, width?: Object): void;
	igGridResizing(methodName: "changeLocale", $container: Object): void;

	/**
	 * Resize the column to the size of the longest currently visible cell value.
	 *
	 */
	igGridResizing(optionLiteral: 'option', optionName: "allowDoubleClickToResize"): boolean;

	/**
	 * Resize the column to the size of the longest currently visible cell value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "allowDoubleClickToResize", optionValue: boolean): void;

	/**
	 * Gets whether the resizing should be deferred until the user finishes resizing or applied immediately.
	 *
	 */
	igGridResizing(optionLiteral: 'option', optionName: "deferredResizing"): boolean;

	/**
	 * Sets whether the resizing should be deferred until the user finishes resizing or applied immediately.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "deferredResizing", optionValue: boolean): void;

	/**
	 * A list of column settings that specifies resizing options on a per column basis.
	 *
	 */
	igGridResizing(optionLiteral: 'option', optionName: "columnSettings"): IgGridResizingColumnSetting[];

	/**
	 * A list of column settings that specifies resizing options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridResizingColumnSetting[]): void;

	/**
	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
	 *
	 */
	igGridResizing(optionLiteral: 'option', optionName: "handleThreshold"): number;

	/**
	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "handleThreshold", optionValue: number): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igGridResizing(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridResizing(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridResizing(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridResizing(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before a resizing operation is executed.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "columnResizing"): ColumnResizingEvent;

	/**
	 * Event fired before a resizing operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "columnResizing", optionValue: ColumnResizingEvent): void;

	/**
	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
	 */
	igGridResizing(optionLiteral: 'option', optionName: "columnResizingRefused"): ColumnResizingRefusedEvent;

	/**
	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
	 *
	 * @optionValue Define event handler function.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "columnResizingRefused", optionValue: ColumnResizingRefusedEvent): void;

	/**
	 * Event fired after the resizing has been executed and results are rendered
	 */
	igGridResizing(optionLiteral: 'option', optionName: "columnResized"): ColumnResizedEvent;

	/**
	 * Event fired after the resizing has been executed and results are rendered
	 *
	 * @optionValue Define event handler function.
	 */
	igGridResizing(optionLiteral: 'option', optionName: "columnResized", optionValue: ColumnResizedEvent): void;
	igGridResizing(options: IgGridResizing): JQuery;
	igGridResizing(optionLiteral: 'option', optionName: string): any;
	igGridResizing(optionLiteral: 'option', options: IgGridResizing): JQuery;
	igGridResizing(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridResizing(methodName: string, ...methodParams: any[]): any;
}
interface IgGridResponsiveColumnSetting {
	/**
	 * Column key. This is a required property in every column setting if columnIndex is not set.
	 *
	 */
	columnKey?: string;

	/**
	 * Column index. Can be used in place of column key. The preferred way of populating a column setting is to always use the column keys as identifiers.
	 *
	 */
	columnIndex?: number;

	/**
	 * A list of predefined classes to decide element's visibility on.
	 *
	 */
	classes?: string;

	/**
	 * A configuration object to use for the responsive functionality. Uses the keys defined in the widget's responsiveModes object. The classes property is not used if this one is set.
	 *
	 */
	configuration?: any;

	/**
	 * Option for IgGridResponsiveColumnSetting
	 */
	[optionName: string]: any;
}

interface IgGridResponsiveAllowedColumnWidthPerType {
	/**
	 * Minimal width in pixels string columns can take before forcing vertical rendering
	 *
	 */
	string?: number;

	/**
	 * Minimal width in pixels number columns can take before forcing vertical rendering
	 *
	 */
	number?: number;

	/**
	 * Minimal width in pixels bool columns can take before forcing vertical rendering
	 *
	 */
	bool?: number;

	/**
	 * Minimal width in pixels date columns can take before forcing vertical rendering
	 *
	 */
	date?: number;

	/**
	 * Minimal width in pixels object columns can take before forcing vertical rendering
	 *
	 */
	object?: number;

	/**
	 * Option for IgGridResponsiveAllowedColumnWidthPerType
	 */
	[optionName: string]: any;
}

interface ResponsiveColumnHidingEvent {
	(event: Event, ui: ResponsiveColumnHidingEventUIParam): void;
}

interface ResponsiveColumnHidingEventUIParam {
	/**
	 * Gets the reference to the igGridResponsive widget.
	 */
	owner?: any;

	/**
	 * Gets the hidden column index. Has a value only if the column's key is a number.
	 */
	columnIndex?: number;

	/**
	 * Gets the hidden column key. Has a value only if the column's key is a string.
	 */
	columnKey?: string;
}

interface ResponsiveColumnHiddenEvent {
	(event: Event, ui: ResponsiveColumnHiddenEventUIParam): void;
}

interface ResponsiveColumnHiddenEventUIParam {
	/**
	 * Gets the reference to the igGridResponsive widget.
	 */
	owner?: any;

	/**
	 * Gets the hidden column index. Has a value only if the column's key is a number.
	 */
	columnIndex?: number;

	/**
	 * Gets the hidden column key. Has a value only if the column's key is a string.
	 */
	columnKey?: string;
}

interface ResponsiveColumnShowingEvent {
	(event: Event, ui: ResponsiveColumnShowingEventUIParam): void;
}

interface ResponsiveColumnShowingEventUIParam {
	/**
	 * Gets the reference to the igGridResponsive widget.
	 */
	owner?: any;

	/**
	 * Gets the shown column index. Has a value only if the column's key is a number.
	 */
	columnIndex?: number;

	/**
	 * Gets the shown column key. Has a value only if the column's key is a string.
	 */
	columnKey?: string;
}

interface ResponsiveColumnShownEvent {
	(event: Event, ui: ResponsiveColumnShownEventUIParam): void;
}

interface ResponsiveColumnShownEventUIParam {
	/**
	 * Gets the reference to the igGridResponsive widget.
	 */
	owner?: any;

	/**
	 * Gets the shown column index. Has a value only if the column's key is a number.
	 */
	columnIndex?: number;

	/**
	 * Gets the shown column key. Has a value only if the column's key is a string.
	 */
	columnKey?: string;
}

interface ResponsiveModeChangedEvent {
	(event: Event, ui: ResponsiveModeChangedEventUIParam): void;
}

interface ResponsiveModeChangedEventUIParam {
	/**
	 * Gets the reference to the igGridResponsive widget.
	 */
	owner?: any;

	/**
	 * Gets the previously assumed mode.
	 */
	previousMode?: string;

	/**
	 * Gets the newly assumed mode.
	 */
	mode?: string;
}

interface IgGridResponsive {
	/**
	 * A list of column settings that specifies how columns will react based on the environment the grid is run on.
	 *
	 */
	columnSettings?: IgGridResponsiveColumnSetting[];

	/**
	 * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
	 *
	 */
	reactOnContainerWidthChanges?: boolean;

	/**
	 * If this option is set to true the widget will ensure the grid's width is always set to 100%.
	 *
	 */
	forceResponsiveGridWidth?: boolean;

	/**
	 * The amount of pixels the window needs to resize with for the grid to respond.
	 *
	 */
	responsiveSensitivity?: number;

	/**
	 * The recognized types of environments and their configuration.
	 *
	 */
	responsiveModes?: any;

	/**
	 * Enable or disable the responsive vertical rendering for the grid.
	 *
	 */
	enableVerticalRendering?: boolean;

	/**
	 * The window's width under which the grid will render its contents vertically.
	 *
	 *
	 * Valid values:
	 * "string" The width in a (px) string
	 * "number" The width as a number
	 * "null" The grid will determine when to render this mode automatically.
	 */
	windowWidthToRenderVertically?: string|number;

	/**
	 * The width of the properties column when vertical rendering is enabled
	 *
	 *
	 * Valid values:
	 * "string" The width in a (%) string
	 * "number" The width as a number in percents
	 */
	propertiesColumnWidth?: string|number;

	/**
	 * The width of the values column when vertical rendering is enabled
	 *
	 *
	 * Valid values:
	 * "string" The width in a (%) string
	 * "number" The width as a number in percents
	 */
	valuesColumnWidth?: string|number;

	/**
	 * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
	 * forcing vertical rendering for the grid
	 *
	 */
	allowedColumnWidthPerType?: IgGridResponsiveAllowedColumnWidthPerType;

	/**
	 * Specifies a template to render a record with in a list-view style layout per mode.
	 *
	 */
	singleColumnTemplate?: any;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	inherit?: boolean;

	/**
	 * Event fired before a hiding operation is executed on a collection of columns.
	 */
	responsiveColumnHiding?: ResponsiveColumnHidingEvent;

	/**
	 * Event fired after a hiding operation is executed on the collection of columns.
	 */
	responsiveColumnHidden?: ResponsiveColumnHiddenEvent;

	/**
	 * Event fired before a showing operation is executed on a collection of columns.
	 */
	responsiveColumnShowing?: ResponsiveColumnShowingEvent;

	/**
	 * Event fired after a showing operation is executed on the collection of columns.
	 */
	responsiveColumnShown?: ResponsiveColumnShownEvent;

	/**
	 * Event which is fired when the widget detects an environment change.
	 */
	responsiveModeChanged?: ResponsiveModeChangedEvent;

	/**
	 * Option for igGridResponsive
	 */
	[optionName: string]: any;
}
interface IgGridResponsiveMethods {
	/**
	 * Destroys the responsive widget.
	 */
	destroy(): void;

	/**
	 * Returns the currently active responsive mode.
	 */
	getCurrentResponsiveMode(): void;
}
interface JQuery {
	data(propertyName: "igGridResponsive"): IgGridResponsiveMethods;
}

interface ResponsiveModeSettings {
	minWidth?: number;
	maxWidth?: any;
	minHeight?: number;
	maxHeight?: any;

	/**
	 * Option for ResponsiveModeSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class ResponsiveMode {
	constructor(settings: ResponsiveModeSettings);
	isActive(): void;
}
}
interface IgniteUIStatic {
ResponsiveMode: typeof Infragistics.ResponsiveMode;
}

interface InfragisticsModeSettings {
	key?: string;
	visibilityTester?: any;

	/**
	 * Option for InfragisticsModeSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class InfragisticsMode {
	constructor(settings: InfragisticsModeSettings);
	isActive(): void;
}
}
interface IgniteUIStatic {
InfragisticsMode: typeof Infragistics.InfragisticsMode;
}

interface BootstrapModeSettings {
	key?: string;
	visibilityTester?: any;

	/**
	 * Option for BootstrapModeSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class BootstrapMode {
	constructor(settings: BootstrapModeSettings);
	isActive(): void;
}
}
interface IgniteUIStatic {
BootstrapMode: typeof Infragistics.BootstrapMode;
}

interface JQuery {
	igGridResponsive(methodName: "destroy"): void;
	igGridResponsive(methodName: "getCurrentResponsiveMode"): void;

	/**
	 * A list of column settings that specifies how columns will react based on the environment the grid is run on.
	 *
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "columnSettings"): IgGridResponsiveColumnSetting[];

	/**
	 * A list of column settings that specifies how columns will react based on the environment the grid is run on.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridResponsiveColumnSetting[]): void;

	/**
	 * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
	 *
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "reactOnContainerWidthChanges"): boolean;

	/**
	 * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "reactOnContainerWidthChanges", optionValue: boolean): void;

	/**
	 * If this option is set to true the widget will ensure the grid's width is always set to 100%.
	 *
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "forceResponsiveGridWidth"): boolean;

	/**
	 * If this option is set to true the widget will ensure the grid's width is always set to 100%.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "forceResponsiveGridWidth", optionValue: boolean): void;

	/**
	 * The amount of pixels the window needs to resize with for the grid to respond.
	 *
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveSensitivity"): number;

	/**
	 * The amount of pixels the window needs to resize with for the grid to respond.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveSensitivity", optionValue: number): void;

	/**
	 * The recognized types of environments and their configuration.
	 *
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveModes"): any;

	/**
	 * The recognized types of environments and their configuration.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveModes", optionValue: any): void;

	/**
	 * Enable or disable the responsive vertical rendering for the grid.
	 *
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "enableVerticalRendering"): boolean;

	/**
	 * Enable or disable the responsive vertical rendering for the grid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "enableVerticalRendering", optionValue: boolean): void;

	/**
	 * The window's width under which the grid will render its contents vertically.
	 *
	 */

	igGridResponsive(optionLiteral: 'option', optionName: "windowWidthToRenderVertically"): string|number;

	/**
	 * The window's width under which the grid will render its contents vertically.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridResponsive(optionLiteral: 'option', optionName: "windowWidthToRenderVertically", optionValue: string|number): void;

	/**
	 * The width of the properties column when vertical rendering is enabled
	 *
	 */

	igGridResponsive(optionLiteral: 'option', optionName: "propertiesColumnWidth"): string|number;

	/**
	 * The width of the properties column when vertical rendering is enabled
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridResponsive(optionLiteral: 'option', optionName: "propertiesColumnWidth", optionValue: string|number): void;

	/**
	 * The width of the values column when vertical rendering is enabled
	 *
	 */

	igGridResponsive(optionLiteral: 'option', optionName: "valuesColumnWidth"): string|number;

	/**
	 * The width of the values column when vertical rendering is enabled
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridResponsive(optionLiteral: 'option', optionName: "valuesColumnWidth", optionValue: string|number): void;

	/**
	 * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
	 * forcing vertical rendering for the grid
	 *
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "allowedColumnWidthPerType"): IgGridResponsiveAllowedColumnWidthPerType;

	/**
	 * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
	 * forcing vertical rendering for the grid
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "allowedColumnWidthPerType", optionValue: IgGridResponsiveAllowedColumnWidthPerType): void;

	/**
	 * Gets a template to render a record with in a list-view style layout per mode.
	 *
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "singleColumnTemplate"): any;

	/**
	 * Sets a template to render a record with in a list-view style layout per mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "singleColumnTemplate", optionValue: any): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Event fired before a hiding operation is executed on a collection of columns.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnHiding"): ResponsiveColumnHidingEvent;

	/**
	 * Event fired before a hiding operation is executed on a collection of columns.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnHiding", optionValue: ResponsiveColumnHidingEvent): void;

	/**
	 * Event fired after a hiding operation is executed on the collection of columns.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnHidden"): ResponsiveColumnHiddenEvent;

	/**
	 * Event fired after a hiding operation is executed on the collection of columns.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnHidden", optionValue: ResponsiveColumnHiddenEvent): void;

	/**
	 * Event fired before a showing operation is executed on a collection of columns.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnShowing"): ResponsiveColumnShowingEvent;

	/**
	 * Event fired before a showing operation is executed on a collection of columns.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnShowing", optionValue: ResponsiveColumnShowingEvent): void;

	/**
	 * Event fired after a showing operation is executed on the collection of columns.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnShown"): ResponsiveColumnShownEvent;

	/**
	 * Event fired after a showing operation is executed on the collection of columns.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnShown", optionValue: ResponsiveColumnShownEvent): void;

	/**
	 * Event which is fired when the widget detects an environment change.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveModeChanged"): ResponsiveModeChangedEvent;

	/**
	 * Event which is fired when the widget detects an environment change.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridResponsive(optionLiteral: 'option', optionName: "responsiveModeChanged", optionValue: ResponsiveModeChangedEvent): void;
	igGridResponsive(options: IgGridResponsive): JQuery;
	igGridResponsive(optionLiteral: 'option', optionName: string): any;
	igGridResponsive(optionLiteral: 'option', options: IgGridResponsive): JQuery;
	igGridResponsive(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridResponsive(methodName: string, ...methodParams: any[]): any;
}
interface IgGridRowSelectorsLocale {
	/**
	 * Selected records text for the select/deselect all overlay.
	 *
	 */
	selectedRecordsText?: string;

	/**
	 * Deselected records text for the select/deselect all overlay.
	 *
	 */
	deselectedRecordsText?: string;

	/**
	 * Select all text for the select/deselect all overlay.
	 *
	 */
	selectAllText?: string;

	/**
	 * Deselect all text for the select/deselect all overlay.
	 *
	 */
	deselectAllText?: string;

	/**
	 * Option for IgGridRowSelectorsLocale
	 */
	[optionName: string]: any;
}

interface RowSelectorClickedEvent {
	(event: Event, ui: RowSelectorClickedEventUIParam): void;
}

interface RowSelectorClickedEventUIParam {
	/**
	 * Gets reference to the row the clicked row selector resides in.
	 */
	row?: string;

	/**
	 * Gets reference to the fixed row the clicked row selector resides in(if there are fixed columns).
	 */
	fixedRow?: string;

	/**
	 * Gets the index of the row the clicked row selector resides in.
	 */
	rowIndex?: number;

	/**
	 * Gets the key of the row the clicked row selector resides in.
	 */
	rowKey?: string;

	/**
	 * Gets a reference to the row selector cell.
	 */
	rowSelector?: string;

	/**
	 * Gets reference to RowSelectors.
	 */
	owner?: any;

	/**
	 * Gets a reference to the grid the RowSelectors are initialized for.
	 */
	grid?: any;
}

interface CheckBoxStateChangingEvent {
	(event: Event, ui: CheckBoxStateChangingEventUIParam): void;
}

interface CheckBoxStateChangingEventUIParam {
	/**
	 * Gets a reference to the row the clicked row selector resides in.
	 */
	row?: string;

	/**
	 * Gets the index of the row the clicked row selector resides in.
	 */
	rowIndex?: number;

	/**
	 * Gets the key of the row the clicked row selector resides in.
	 */
	rowKey?: any;

	/**
	 * Gets a reference to the row selector cell.
	 */
	rowSelector?: string;

	/**
	 * Gets a reference to the igGridRowSelectors.
	 */
	owner?: any;

	/**
	 * Gets a reference to the grid the RowSelectors are initialized for.
	 */
	grid?: any;

	/**
	 * Gets the current state of the checkbox ("on","off").
	 */
	currentState?: string;

	/**
	 * Gets the new state of the checkbox ("on","off").
	 */
	newState?: string;

	/**
	 * Checks if the header check box is the one being clicked. In this case no row related args are passed.
	 */
	isHeader?: boolean;
}

interface CheckBoxStateChangedEvent {
	(event: Event, ui: CheckBoxStateChangedEventUIParam): void;
}

interface CheckBoxStateChangedEventUIParam {
	/**
	 * Gets a reference to the row the clicked row selector resides in.
	 */
	row?: string;

	/**
	 * Gets the index of the row the clicked row selector resides in.
	 */
	rowIndex?: number;

	/**
	 * Gets the key of the row the clicked row selector resides in.
	 */
	rowKey?: string;

	/**
	 * Gets reference to the row selector cell.
	 */
	rowSelector?: string;

	/**
	 * Gets reference to the igGridRowSelectors.
	 */
	owner?: any;

	/**
	 * Gets reference to the grid the RowSelectors are initialized for.
	 */
	grid?: any;

	/**
	 * Gets the state of the checkbox ("on","off").
	 */
	state?: string;

	/**
	 * Checks if the header check box is the one being clicked. In this case no row related args are passed.
	 */
	isHeader?: boolean;
}

interface IgGridRowSelectors {
	/**
	 * Determines whether the row selectors column should contain row numbering
	 *
	 */
	enableRowNumbering?: boolean;

	/**
	 * Determines whether the row selectors column should contain checkboxes
	 *
	 */
	enableCheckBoxes?: boolean;

	/**
	 * The seed to be added to the default numbering
	 *
	 */
	rowNumberingSeed?: number;

	/**
	 * defines width of the row selector`s column in pixels or percentage.
	 *
	 *
	 * Valid values:
	 * "string" The row selector column width can be set in pixels (px) and percentage (%)
	 * "number" The row selector width can be set as a number
	 * "null" will let the feature decide the best width depending on enabled contents
	 */
	rowSelectorColumnWidth?: string|number;

	/**
	 * Determines whether the selection feature is required for the row selectors. If set to "false"
	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
	 * not available.
	 *
	 */
	requireSelection?: boolean;

	/**
	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
	 *
	 */
	showCheckBoxesOnFocus?: boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	inherit?: boolean;

	/**
	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
	 *
	 */
	enableSelectAllForPaging?: boolean;

	/**
	 * Custom template for "select all" overlay with paging
	 * Element with attribute data-rs-select-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 */
	selectAllForPagingTemplate?: string;

	/**
	 * Custom template for "deselect all" overlay with paging
	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 */
	deselectAllForPagingTemplate?: string;
	locale?: IgGridRowSelectorsLocale;

	/**
	 * Event fired after a row selector is clicked.
	 */
	rowSelectorClicked?: RowSelectorClickedEvent;

	/**
	 * Event fired when a row selector checkbox is changing.
	 */
	checkBoxStateChanging?: CheckBoxStateChangingEvent;

	/**
	 * Event fired after a row selector checkbox had changed state.
	 */
	checkBoxStateChanged?: CheckBoxStateChangedEvent;

	/**
	 * Option for igGridRowSelectors
	 */
	[optionName: string]: any;
}
interface IgGridRowSelectorsMethods {
	destroy(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridrowselectors#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridrowselectors#options:language) or [locale](ui.iggridrowselectors#options:locale) option setter
	 */
	changeLocale(): void;
}
interface JQuery {
	data(propertyName: "igGridRowSelectors"): IgGridRowSelectorsMethods;
}

interface JQuery {
	igGridRowSelectors(methodName: "destroy"): void;
	igGridRowSelectors(methodName: "changeLocale"): void;

	/**
	 * Determines whether the row selectors column should contain row numbering
	 *
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "enableRowNumbering"): boolean;

	/**
	 * Determines whether the row selectors column should contain row numbering
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "enableRowNumbering", optionValue: boolean): void;

	/**
	 * Determines whether the row selectors column should contain checkboxes
	 *
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "enableCheckBoxes"): boolean;

	/**
	 * Determines whether the row selectors column should contain checkboxes
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "enableCheckBoxes", optionValue: boolean): void;

	/**
	 * The seed to be added to the default numbering
	 *
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "rowNumberingSeed"): number;

	/**
	 * The seed to be added to the default numbering
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "rowNumberingSeed", optionValue: number): void;

	/**
	 * Defines width of the row selector`s column in pixels or percentage.
	 *
	 */

	igGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorColumnWidth"): string|number;

	/**
	 * Defines width of the row selector`s column in pixels or percentage.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorColumnWidth", optionValue: string|number): void;

	/**
	 * Determines whether the selection feature is required for the row selectors. If set to "false"
	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
	 * not available.
	 *
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "requireSelection"): boolean;

	/**
	 * Determines whether the selection feature is required for the row selectors. If set to "false"
	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
	 * not available.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "requireSelection", optionValue: boolean): void;

	/**
	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
	 *
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "showCheckBoxesOnFocus"): boolean;

	/**
	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "showCheckBoxesOnFocus", optionValue: boolean): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
	 *
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "enableSelectAllForPaging"): boolean;

	/**
	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "enableSelectAllForPaging", optionValue: boolean): void;

	/**
	 * Custom template for "select all" overlay with paging
	 * Element with attribute data-rs-select-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "selectAllForPagingTemplate"): string;

	/**
	 * Custom template for "select all" overlay with paging
	 * Element with attribute data-rs-select-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "selectAllForPagingTemplate", optionValue: string): void;

	/**
	 * Custom template for "deselect all" overlay with paging
	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "deselectAllForPagingTemplate"): string;

	/**
	 * Custom template for "deselect all" overlay with paging
	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "deselectAllForPagingTemplate", optionValue: string): void;
	igGridRowSelectors(optionLiteral: 'option', optionName: "locale"): IgGridRowSelectorsLocale;
	igGridRowSelectors(optionLiteral: 'option', optionName: "locale", optionValue: IgGridRowSelectorsLocale): void;

	/**
	 * Event fired after a row selector is clicked.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorClicked"): RowSelectorClickedEvent;

	/**
	 * Event fired after a row selector is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorClicked", optionValue: RowSelectorClickedEvent): void;

	/**
	 * Event fired when a row selector checkbox is changing.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanging"): CheckBoxStateChangingEvent;

	/**
	 * Event fired when a row selector checkbox is changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanging", optionValue: CheckBoxStateChangingEvent): void;

	/**
	 * Event fired after a row selector checkbox had changed state.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanged"): CheckBoxStateChangedEvent;

	/**
	 * Event fired after a row selector checkbox had changed state.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanged", optionValue: CheckBoxStateChangedEvent): void;
	igGridRowSelectors(options: IgGridRowSelectors): JQuery;
	igGridRowSelectors(optionLiteral: 'option', optionName: string): any;
	igGridRowSelectors(optionLiteral: 'option', options: IgGridRowSelectors): JQuery;
	igGridRowSelectors(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridRowSelectors(methodName: string, ...methodParams: any[]): any;
}
interface RowSelectionChangingEvent {
	(event: Event, ui: RowSelectionChangingEventUIParam): void;
}

interface RowSelectionChangingEventUIParam {
	/**
	 * Gets reference to GridSelection.
	 */
	owner?: any;

	/**
	 * Gets reference to the row object.
	 */
	row?: any;

	/**
	 * Gets reference to rows object array.
	 */
	selectedRows?: any[];

	/**
	 * Gets the start index for a range row selection.
	 */
	startIndex?: number;

	/**
	 * Gets the end index for a range row selection.
	 */
	endIndex?: number;
}

interface RowSelectionChangedEvent {
	(event: Event, ui: RowSelectionChangedEventUIParam): void;
}

interface RowSelectionChangedEventUIParam {
	/**
	 * Gets reference to GridSelection.
	 */
	owner?: any;

	/**
	 * Gets reference to the row object.
	 */
	row?: any;

	/**
	 * Gets reference to rows object array.
	 */
	selectedRows?: any[];
}

interface CellSelectionChangingEvent {
	(event: Event, ui: CellSelectionChangingEventUIParam): void;
}

interface CellSelectionChangingEventUIParam {
	/**
	 * Gets reference to GridSelection.
	 */
	owner?: any;

	/**
	 * Gets reference to the cell object.
	 */
	cell?: any;

	/**
	 * Gets reference to selected cells object array.
	 */
	selectedCells?: any[];

	/**
	 * Gets the column index for the first cell in a range selection.
	 */
	firstColumnIndex?: number;

	/**
	 * Gets the row index for the first cell in a range selection.
	 */
	firstRowIndex?: number;

	/**
	 * Gets the column index for the last cell in a range selection.
	 */
	lastColumnIndex?: number;

	/**
	 * Gets the row index for the last cell in a range selection.
	 */
	lastRowIndex?: number;
}

interface CellSelectionChangedEvent {
	(event: Event, ui: CellSelectionChangedEventUIParam): void;
}

interface CellSelectionChangedEventUIParam {
	/**
	 * Gets reference to GridSelection.
	 */
	owner?: any;

	/**
	 * Gets reference to the cell object.
	 */
	cell?: any;

	/**
	 * Gets reference to selected cells object array.
	 */
	selectedCells?: any[];
}

interface ActiveCellChangingEvent {
	(event: Event, ui: ActiveCellChangingEventUIParam): void;
}

interface ActiveCellChangingEventUIParam {
	/**
	 * Gets reference to GridSelection.
	 */
	owner?: any;

	/**
	 * Gets reference to the cell object.
	 */
	cell?: any;
}

interface ActiveCellChangedEvent {
	(event: Event, ui: ActiveCellChangedEventUIParam): void;
}

interface ActiveCellChangedEventUIParam {
	/**
	 * Gets reference to GridSelection.
	 */
	owner?: any;

	/**
	 * Gets reference to the cell object.
	 */
	cell?: any;
}

interface ActiveRowChangingEvent {
	(event: Event, ui: ActiveRowChangingEventUIParam): void;
}

interface ActiveRowChangingEventUIParam {
	/**
	 * Gets reference to GridSelection.
	 */
	owner?: any;

	/**
	 * Gets a reference to the row object.
	 */
	row?: any;
}

interface ActiveRowChangedEvent {
	(event: Event, ui: ActiveRowChangedEventUIParam): void;
}

interface ActiveRowChangedEventUIParam {
	/**
	 * Gets reference to GridSelection.
	 */
	owner?: any;

	/**
	 * Gets a reference to the row object.
	 */
	row?: any;
}

interface IgGridSelection {
	/**
	 * Enables / Disables multiple selection of cells and rows - depending on the mode
	 *
	 */
	multipleSelection?: boolean;

	/**
	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
	 *
	 */
	mouseDragSelect?: boolean;

	/**
	 * Defines type of the selection.
	 *
	 *
	 * Valid values:
	 * "row" Defines row selection mode.
	 * "cell" Defines cell selection mode.
	 */
	mode?: string;

	/**
	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
	 *
	 */
	activation?: boolean;

	/**
	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
	 *
	 */
	wrapAround?: boolean;

	/**
	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
	 *
	 */
	skipChildren?: boolean;

	/**
	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
	 *
	 */
	multipleCellSelectOnClick?: boolean;

	/**
	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
	 *
	 */
	touchDragSelect?: boolean;

	/**
	 * Enables / disables selection persistance between states.
	 *
	 */
	persist?: boolean;

	/**
	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
	 *
	 */
	allowMultipleRangeSelection?: boolean;

	/**
	 * Event fired before row(s) are about to be selected (cancellable).
	 * Return false in order to cancel selection changing.
	 */
	rowSelectionChanging?: RowSelectionChangingEvent;

	/**
	 * Event fired after row(s) are selected.
	 */
	rowSelectionChanged?: RowSelectionChangedEvent;

	/**
	 * Event fired before cell(s) are about to be selected (cancellable).
	 * Return false in order to cancel cell selection changing.
	 */
	cellSelectionChanging?: CellSelectionChangingEvent;

	/**
	 * Event fired after cell(s) are selected.
	 */
	cellSelectionChanged?: CellSelectionChangedEvent;

	/**
	 * Event fired before a cell becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active cell changing.
	 */
	activeCellChanging?: ActiveCellChangingEvent;

	/**
	 * Event fired after a cell becomes active (focus style applied).
	 */
	activeCellChanged?: ActiveCellChangedEvent;

	/**
	 * Event fired before a row becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active row changing.
	 */
	activeRowChanging?: ActiveRowChangingEvent;

	/**
	 * Event fired after a row becomes active (focus style applied).
	 */
	activeRowChanged?: ActiveRowChangedEvent;

	/**
	 * Option for igGridSelection
	 */
	[optionName: string]: any;
}
interface IgGridSelectionMethods {
	/**
	 * Destroys the selection widget.
	 */
	destroy(): void;

	/**
	 * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
	 */
	clearSelection(): void;

	/**
	 * Selects a cell by row/col
	 *
	 * @param row Row index
	 * @param col Column index
	 * @param isFixed If the cell is part of the fixed or unfixed area of the grid.
	 */
	selectCell(row: number, col: number, isFixed?: boolean): void;

	/**
	 * Selects a cell by row id/column key
	 *
	 * @param id Row Id
	 * @param colKey Column key
	 */
	selectCellById(id: Object, colKey: string): void;

	/**
	 * Deselects a cell by row/col
	 *
	 * @param row Row index
	 * @param col Column index
	 * @param isFixed If the cell is part of the fixed or unfixed area of the grid.
	 */
	deselectCell(row: number, col: number, isFixed?: boolean): void;

	/**
	 * Deselects a cell by row id/column key
	 *
	 * @param id Row Id
	 * @param colKey Column key
	 */
	deselectCellById(id: Object, colKey: string): void;

	/**
	 * Selects a row by index
	 *
	 * @param index Row index
	 */
	selectRow(index: number): void;

	/**
	 * Selects a row by row id
	 *
	 * @param id Row Id
	 */
	selectRowById(id: Object): void;

	/**
	 * Deselects a row by index
	 *
	 * @param index Row index
	 */
	deselectRow(index: number): void;

	/**
	 * Deselects a row by row id
	 *
	 * @param id Row Id
	 */
	deselectRowById(id: Object): void;

	/**
	 * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
	 *
	 * If multiple selection is disabled the function will return null.
	 */
	selectedCells(): any[];

	/**
	 * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
	 *
	 * If multiple selection is disabled the function will return null.
	 */
	selectedRows(): any[];

	/**
	 * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
	 *
	 * If multiple selection is enabled the function will return null.
	 */
	selectedCell(): Object;

	/**
	 * Returns the currently selected row that has the format { element: , index: }, if any.
	 *
	 * If multiple selection is enabled the function will return null.
	 */
	selectedRow(): Object;

	/**
	 * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
	 */
	activeCell(): Object;

	/**
	 * Returns the currently active (focused) row that has the format { element: , index: }, if any.
	 */
	activeRow(): Object;
}
interface JQuery {
	data(propertyName: "igGridSelection"): IgGridSelectionMethods;
}

interface SelectionCollectionSettingsSubscribers {
	/**
	 * Option for SelectionCollectionSettingsSubscribers
	 */
	[optionName: string]: any;
}

interface SelectionCollectionSettings {
	multipleSelection?: boolean;
	subscribers?: SelectionCollectionSettingsSubscribers;
	owner?: any;

	/**
	 * Option for SelectionCollectionSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class SelectionCollection {
	constructor(settings: SelectionCollectionSettings);
	addSubscriber(subscriber: Object, owner: Object): void;
	removeSubscriber(subscriberId: Object, owner: Object): void;
	changeOwner(newOwner: Object): void;
	isSelected(identifier: Object, forOwner: Object): void;
	isActive(identifier: Object, forOwner: Object): void;
	elementFromIdentifier(identifier: Object): void;
	toggle(element: Object): void;
	activate(identifier: Object, element: Object, suppress: Object): void;
	deactivate(suppress: Object): void;
	select(identifier: Object, add: Object, info: Object, suppress: Object): void;
	rangeSelect(range: Object, add: Object, prevRange: Object, info: Object, suppress: Object): void;
	rangeDeselect(range: Object, info: Object, suppress: Object): void;
	deselect(identifier: Object, info: Object, suppress: Object): void;
	deselectAll(suppress: Object): void;
	clearSelection(forOwner: Object): void;
	cleanAll(forOwner: Object): void;
	onlyOneSelected(): void;
	selectedCells(): void;
	selectedRows(): void;
	selectionLength(): void;
}
}
interface IgniteUIStatic {
SelectionCollection: typeof Infragistics.SelectionCollection;
}

declare namespace Infragistics {
class SelectedRowsCollection {
	constructor(settings: SelectionCollectionSettings);
	isSelected(identifier: Object, forOwner: Object): void;
	isActive(identifier: Object, forOwner: Object): void;
	selectedDataRows(): void;
	selectedRows(): void;
	activeRow(): void;
	elementFromIdentifier(identifier: Object): void;
	elementPosition(identifier: Object, element: Object): void;
	onlyOneSelected(): void;
	addSubscriber(subscriber: Object, owner: Object): void;
	removeSubscriber(subscriberId: Object, owner: Object): void;
	changeOwner(newOwner: Object): void;
	toggle(element: Object): void;
	activate(identifier: Object, element: Object, suppress: Object): void;
	deactivate(suppress: Object): void;
	select(identifier: Object, add: Object, info: Object, suppress: Object): void;
	rangeSelect(range: Object, add: Object, prevRange: Object, info: Object, suppress: Object): void;
	rangeDeselect(range: Object, info: Object, suppress: Object): void;
	deselect(identifier: Object, info: Object, suppress: Object): void;
	deselectAll(suppress: Object): void;
	clearSelection(forOwner: Object): void;
	cleanAll(forOwner: Object): void;
	selectedCells(): void;
	selectionLength(): void;
}
}
interface IgniteUIStatic {
SelectedRowsCollection: typeof Infragistics.SelectedRowsCollection;
}

declare namespace Infragistics {
class SelectedCellsCollection {
	constructor(settings: SelectionCollectionSettings);
	isSelected(identifier: Object, forOwner: Object): void;
	atLeastOneSelected(rowId: Object, forOwner: Object): void;
	isActive(identifier: Object, forOwner: Object): void;
	selectedCells(): void;
	activeCell(): void;
	elementFromIdentifier(identifier: Object): void;
	elementPosition(identifier: Object, element: Object): void;
	onlyOneSelected(): void;
	addSubscriber(subscriber: Object, owner: Object): void;
	removeSubscriber(subscriberId: Object, owner: Object): void;
	changeOwner(newOwner: Object): void;
	toggle(element: Object): void;
	activate(identifier: Object, element: Object, suppress: Object): void;
	deactivate(suppress: Object): void;
	select(identifier: Object, add: Object, info: Object, suppress: Object): void;
	rangeSelect(range: Object, add: Object, prevRange: Object, info: Object, suppress: Object): void;
	rangeDeselect(range: Object, info: Object, suppress: Object): void;
	deselect(identifier: Object, info: Object, suppress: Object): void;
	deselectAll(suppress: Object): void;
	clearSelection(forOwner: Object): void;
	cleanAll(forOwner: Object): void;
	selectedRows(): void;
	selectionLength(): void;
}
}
interface IgniteUIStatic {
SelectedCellsCollection: typeof Infragistics.SelectedCellsCollection;
}

interface JQuery {
	igGridSelection(methodName: "destroy"): void;
	igGridSelection(methodName: "clearSelection"): void;
	igGridSelection(methodName: "selectCell", row: number, col: number, isFixed?: boolean): void;
	igGridSelection(methodName: "selectCellById", id: Object, colKey: string): void;
	igGridSelection(methodName: "deselectCell", row: number, col: number, isFixed?: boolean): void;
	igGridSelection(methodName: "deselectCellById", id: Object, colKey: string): void;
	igGridSelection(methodName: "selectRow", index: number): void;
	igGridSelection(methodName: "selectRowById", id: Object): void;
	igGridSelection(methodName: "deselectRow", index: number): void;
	igGridSelection(methodName: "deselectRowById", id: Object): void;
	igGridSelection(methodName: "selectedCells"): any[];
	igGridSelection(methodName: "selectedRows"): any[];
	igGridSelection(methodName: "selectedCell"): Object;
	igGridSelection(methodName: "selectedRow"): Object;
	igGridSelection(methodName: "activeCell"): Object;
	igGridSelection(methodName: "activeRow"): Object;

	/**
	 * Enables / Disables multiple selection of cells and rows - depending on the mode
	 *
	 */
	igGridSelection(optionLiteral: 'option', optionName: "multipleSelection"): boolean;

	/**
	 * Enables / Disables multiple selection of cells and rows - depending on the mode
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "multipleSelection", optionValue: boolean): void;

	/**
	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
	 *
	 */
	igGridSelection(optionLiteral: 'option', optionName: "mouseDragSelect"): boolean;

	/**
	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "mouseDragSelect", optionValue: boolean): void;

	/**
	 * Defines type of the selection.
	 *
	 */

	igGridSelection(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Defines type of the selection.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSelection(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
	 *
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activation"): boolean;

	/**
	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activation", optionValue: boolean): void;

	/**
	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
	 *
	 */
	igGridSelection(optionLiteral: 'option', optionName: "wrapAround"): boolean;

	/**
	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "wrapAround", optionValue: boolean): void;

	/**
	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
	 *
	 */
	igGridSelection(optionLiteral: 'option', optionName: "skipChildren"): boolean;

	/**
	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "skipChildren", optionValue: boolean): void;

	/**
	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
	 *
	 */
	igGridSelection(optionLiteral: 'option', optionName: "multipleCellSelectOnClick"): boolean;

	/**
	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "multipleCellSelectOnClick", optionValue: boolean): void;

	/**
	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
	 *
	 */
	igGridSelection(optionLiteral: 'option', optionName: "touchDragSelect"): boolean;

	/**
	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "touchDragSelect", optionValue: boolean): void;

	/**
	 * Enables / disables selection persistance between states.
	 *
	 */
	igGridSelection(optionLiteral: 'option', optionName: "persist"): boolean;

	/**
	 * Enables / disables selection persistance between states.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;

	/**
	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
	 *
	 */
	igGridSelection(optionLiteral: 'option', optionName: "allowMultipleRangeSelection"): boolean;

	/**
	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "allowMultipleRangeSelection", optionValue: boolean): void;

	/**
	 * Event fired before row(s) are about to be selected (cancellable).
	 * Return false in order to cancel selection changing.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanging"): RowSelectionChangingEvent;

	/**
	 * Event fired before row(s) are about to be selected (cancellable).
	 * Return false in order to cancel selection changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanging", optionValue: RowSelectionChangingEvent): void;

	/**
	 * Event fired after row(s) are selected.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanged"): RowSelectionChangedEvent;

	/**
	 * Event fired after row(s) are selected.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanged", optionValue: RowSelectionChangedEvent): void;

	/**
	 * Event fired before cell(s) are about to be selected (cancellable).
	 * Return false in order to cancel cell selection changing.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanging"): CellSelectionChangingEvent;

	/**
	 * Event fired before cell(s) are about to be selected (cancellable).
	 * Return false in order to cancel cell selection changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanging", optionValue: CellSelectionChangingEvent): void;

	/**
	 * Event fired after cell(s) are selected.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanged"): CellSelectionChangedEvent;

	/**
	 * Event fired after cell(s) are selected.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanged", optionValue: CellSelectionChangedEvent): void;

	/**
	 * Event fired before a cell becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active cell changing.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activeCellChanging"): ActiveCellChangingEvent;

	/**
	 * Event fired before a cell becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active cell changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activeCellChanging", optionValue: ActiveCellChangingEvent): void;

	/**
	 * Event fired after a cell becomes active (focus style applied).
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activeCellChanged"): ActiveCellChangedEvent;

	/**
	 * Event fired after a cell becomes active (focus style applied).
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activeCellChanged", optionValue: ActiveCellChangedEvent): void;

	/**
	 * Event fired before a row becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active row changing.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activeRowChanging"): ActiveRowChangingEvent;

	/**
	 * Event fired before a row becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active row changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activeRowChanging", optionValue: ActiveRowChangingEvent): void;

	/**
	 * Event fired after a row becomes active (focus style applied).
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activeRowChanged"): ActiveRowChangedEvent;

	/**
	 * Event fired after a row becomes active (focus style applied).
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSelection(optionLiteral: 'option', optionName: "activeRowChanged", optionValue: ActiveRowChangedEvent): void;
	igGridSelection(options: IgGridSelection): JQuery;
	igGridSelection(optionLiteral: 'option', optionName: string): any;
	igGridSelection(optionLiteral: 'option', options: IgGridSelection): JQuery;
	igGridSelection(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridSelection(methodName: string, ...methodParams: any[]): any;
}
interface ButtonOKClickEvent {
	(event: Event, ui: ButtonOKClickEventUIParam): void;
}

interface ButtonOKClickEventUIParam {
	/**
	 * Gets the reference to the igGridModalDialog widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the igGridModalDialog element.
	 */
	modalDialog?: string;
}

interface ButtonCancelClickEvent {
	(event: Event, ui: ButtonCancelClickEventUIParam): void;
}

interface ButtonCancelClickEventUIParam {
	/**
	 * Gets the reference to the igGridModalDialog widget.
	 */
	owner?: any;

	/**
	 * Gets a reference to the igGridModalDialog element.
	 */
	modalDialog?: string;
}

interface IgGridModalDialog {
	/**
	 * The default modal dialog width in pixels.
	 */
	modalDialogWidth?: number;

	/**
	 * The default modal dialog height in pixels.
	 */
	modalDialogHeight?: number;
	renderFooterButtons?: boolean;
	animationDuration?: number;
	buttonApplyDisabled?: boolean;

	/**
	 * If true and Enter is pressed - close modal dialog(NOTE: buttonApplyDisabled should be set to false - otherwise this options is ignored)
	 */
	closeModalDialogOnEnter?: boolean;

	/**
	 * Tab index to assign to containers and buttons inside the dialog
	 */
	tabIndex?: number;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before the modal dialog is opened.
	 */
	modalDialogOpening?: ModalDialogOpeningEvent;

	/**
	 * Event fired after the modal dialog is already opened.
	 */
	modalDialogOpened?: ModalDialogOpenedEvent;

	/**
	 * Event fired every time the modal dialog changes its position.
	 */
	modalDialogMoving?: ModalDialogMovingEvent;

	/**
	 * Event fired before the modal dialog is closed.
	 */
	modalDialogClosing?: ModalDialogClosingEvent;

	/**
	 * Event fired after the modal dialog has been closed.
	 */
	modalDialogClosed?: ModalDialogClosedEvent;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 */
	modalDialogContentsRendering?: ModalDialogContentsRenderingEvent;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 */
	modalDialogContentsRendered?: ModalDialogContentsRenderedEvent;

	/**
	 * Event fired when the button OK/Apply is clicked
	 */
	buttonOKClick?: ButtonOKClickEvent;

	/**
	 * Event fired when the button Cancel is clicked
	 */
	buttonCancelClick?: ButtonCancelClickEvent;

	/**
	 * Option for igGridModalDialog
	 */
	[optionName: string]: any;
}
interface IgGridModalDialogMethods {
	openModalDialog(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridmodaldialog#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridmodaldialog#options:language) or [locale](ui.iggridmodaldialog#options:locale) option setter
	 */
	changeLocale(): void;
	closeModalDialog(accepted: Object, e: Object): void;
	getCaptionButtonContainer(): void;
	getFooter(): void;
	getContent(): void;
	destroy(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igGridModalDialog"): IgGridModalDialogMethods;
}

interface IgEditorFilter {
	/**
	 * Option for igEditorFilter
	 */
	[optionName: string]: any;
}
interface IgEditorFilterMethods {
	setFocus(delay: Object, toggle: Object): void;
	remove(): void;
	exitEditMode(): void;
	validator(): void;
	hasInvalidMessage(): void;
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igEditorFilter"): IgEditorFilterMethods;
}

declare namespace Infragistics {
class EditorProvider {
	/**
	 * Create handlers cache
	 *
	 * @param callbacks
	 * @param key
	 * @param editorOptions
	 * @param tabIndex
	 * @param format
	 * @param element
	 */
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	keyDown(evt: Object, ui: Object): void;
	attachErrorEvents(errorShowing: Object, errorShown: Object, errorHidden: Object): void;
	getEditor(): void;
	refreshValue(): void;
	getValue(): void;
	setValue(val: Object): void;
	setFocus(toggle: Object): void;
	setSize(width: Object, height: Object): void;
	removeFromParent(): void;
	destroy(): void;
	validator(): void;
	validate(): void;
	requestValidate(evt: Object): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderBase {
	/**
	 * Call parent createEditor
	 *
	 * @param callbacks
	 * @param key
	 * @param editorOptions
	 * @param tabIndex
	 * @param format
	 * @param element
	 */
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	textChanged(evt: Object, ui: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	destroy(): void;
	refreshValue(): void;
	validator(): void;
	isValid(): void;
	keyDown(evt: Object, ui: Object): void;
	attachErrorEvents(errorShowing: Object, errorShown: Object, errorHidden: Object): void;
	getEditor(): void;
	getValue(): void;
	setValue(val: Object): void;
	validate(): void;
	requestValidate(evt: Object): void;
}
}

declare namespace Infragistics {
class EditorProviderText {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	keyDown(evt: Object, ui: Object): void;
	textChanged(evt: Object, ui: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	destroy(): void;
	refreshValue(): void;
	validator(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderNumeric {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	getValue(): void;
	textChanged(evt: Object, ui: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	destroy(): void;
	refreshValue(): void;
	validator(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderCurrency {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	textChanged(evt: Object, ui: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	destroy(): void;
	refreshValue(): void;
	validator(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderPercent {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	textChanged(evt: Object, ui: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	destroy(): void;
	refreshValue(): void;
	validator(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderMask {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	textChanged(evt: Object, ui: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	destroy(): void;
	refreshValue(): void;
	validator(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderDate {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object, offset: Object): void;
	setValue(value: Object, fe: Object, newOffset: Object): void;
	textChanged(evt: Object, ui: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	destroy(): void;
	refreshValue(): void;
	validator(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderDatePicker {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object, offset: Object): void;
	removeFromParent(): void;
	setValue(value: Object, fe: Object, newOffset: Object): void;
	textChanged(evt: Object, ui: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	destroy(): void;
	refreshValue(): void;
	validator(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderTimePicker {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object, offset: Object): void;
	setValue(value: Object, fe: Object, newOffset: Object): void;
	textChanged(evt: Object, ui: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	destroy(): void;
	refreshValue(): void;
	validator(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderBoolean {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	keyDown(evt: Object, ui: Object): void;
	valueChanged(evt: Object, ui: Object): void;
	refreshValue(): void;
	getValue(): void;
	setValue(val: Object): void;
	setSize(width: Object, height: Object): void;
	removeFromParent(): void;
	destroy(): void;
	textChanged(evt: Object, ui: Object): void;
	setFocus(): void;
	validator(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderCombo {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	keyDown(evt: Object, ui: Object): void;
	internalSelectionChanged(evt: Object, ui: Object): void;
	selectionChanged(evt: Object, ui: Object): void;
	refreshValue(): void;
	getValue(): void;
	setValue(val: Object, fire: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	validator(): void;
	destroy(): void;
	isValid(): void;
	attachErrorEvents(errorShowing: Object, errorShown: Object, errorHidden: Object): void;
	getEditor(): void;
	validate(): void;
	requestValidate(evt: Object): void;
}
}

declare namespace Infragistics {
class EditorProviderObjectCombo {
	getValue(): void;
	setValue(val: Object, fire: Object): void;
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	keyDown(evt: Object, ui: Object): void;
	internalSelectionChanged(evt: Object, ui: Object): void;
	selectionChanged(evt: Object, ui: Object): void;
	refreshValue(): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	removeFromParent(): void;
	validator(): void;
	destroy(): void;
	isValid(): void;
}
}

declare namespace Infragistics {
class EditorProviderRating {
	createEditor(callbacks: Object, key: Object, editorOptions: Object, tabIndex: Object, format: Object, element: Object): void;
	internalValueChange(evt: Object, ui: Object): void;
	valueChange(evt: Object, ui: Object): void;
	setValue(val: Object): void;
	setSize(width: Object, height: Object): void;
	setFocus(): void;
	validator(): void;
	destroy(): void;
	isValid(): void;
	keyDown(evt: Object, ui: Object): void;
	attachErrorEvents(errorShowing: Object, errorShown: Object, errorHidden: Object): void;
	getEditor(): void;
	refreshValue(): void;
	getValue(): void;
	removeFromParent(): void;
	validate(): void;
	requestValidate(evt: Object): void;
}
}

declare namespace Infragistics {
class SortingExpressionsManager {
	setGridInstance(grid: Object): void;

	/**
	 * Insert expr at the first position of the se (sorting expressions) if there are not any other expressions with flag group by
	 *  otherwise if there are such expressions inserts after the last
	 *
	 * @param se
	 * @param expr
	 * @param feature
	 */
	addSortingExpression(se: Object, expr: Object, feature: Object): void;
	setFormattersForSortingExprs(exprs: Object, grid: Object): void;
}
}

interface JQuery {
	igGridModalDialog(methodName: "openModalDialog"): void;
	igGridModalDialog(methodName: "changeLocale"): void;
	igGridModalDialog(methodName: "closeModalDialog", accepted: Object, e: Object): void;
	igGridModalDialog(methodName: "getCaptionButtonContainer"): void;
	igGridModalDialog(methodName: "getFooter"): void;
	igGridModalDialog(methodName: "getContent"): void;
	igGridModalDialog(methodName: "destroy"): void;
	igGridModalDialog(methodName: "changeGlobalLanguage"): void;
	igGridModalDialog(methodName: "changeGlobalRegional"): void;

	/**
	 * The default modal dialog width in pixels.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogWidth"): number;

	/**
	 * The default modal dialog width in pixels.
	 *
	 * @optionValue New value to be set.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogWidth", optionValue: number): void;

	/**
	 * The default modal dialog height in pixels.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogHeight"): number;

	/**
	 * The default modal dialog height in pixels.
	 *
	 * @optionValue New value to be set.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogHeight", optionValue: number): void;
	igGridModalDialog(optionLiteral: 'option', optionName: "renderFooterButtons"): boolean;
	igGridModalDialog(optionLiteral: 'option', optionName: "renderFooterButtons", optionValue: boolean): void;
	igGridModalDialog(optionLiteral: 'option', optionName: "animationDuration"): number;
	igGridModalDialog(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;
	igGridModalDialog(optionLiteral: 'option', optionName: "buttonApplyDisabled"): boolean;
	igGridModalDialog(optionLiteral: 'option', optionName: "buttonApplyDisabled", optionValue: boolean): void;

	/**
	 * If true and Enter is pressed - close modal dialog(NOTE: buttonApplyDisabled should be set to false - otherwise this options is ignored)
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "closeModalDialogOnEnter"): boolean;

	/**
	 * If true and Enter is pressed - close modal dialog(NOTE: buttonApplyDisabled should be set to false - otherwise this options is ignored)
	 *
	 * @optionValue New value to be set.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "closeModalDialogOnEnter", optionValue: boolean): void;

	/**
	 * Tab index to assign to containers and buttons inside the dialog
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * Tab index to assign to containers and buttons inside the dialog
	 *
	 * @optionValue New value to be set.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridModalDialog(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridModalDialog(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before the modal dialog is opened.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogOpening"): ModalDialogOpeningEvent;

	/**
	 * Event fired before the modal dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogOpening", optionValue: ModalDialogOpeningEvent): void;

	/**
	 * Event fired after the modal dialog is already opened.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogOpened"): ModalDialogOpenedEvent;

	/**
	 * Event fired after the modal dialog is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogOpened", optionValue: ModalDialogOpenedEvent): void;

	/**
	 * Event fired every time the modal dialog changes its position.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogMoving"): ModalDialogMovingEvent;

	/**
	 * Event fired every time the modal dialog changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogMoving", optionValue: ModalDialogMovingEvent): void;

	/**
	 * Event fired before the modal dialog is closed.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogClosing"): ModalDialogClosingEvent;

	/**
	 * Event fired before the modal dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogClosing", optionValue: ModalDialogClosingEvent): void;

	/**
	 * Event fired after the modal dialog has been closed.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogClosed"): ModalDialogClosedEvent;

	/**
	 * Event fired after the modal dialog has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogClosed", optionValue: ModalDialogClosedEvent): void;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogContentsRendering"): ModalDialogContentsRenderingEvent;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogContentsRendering", optionValue: ModalDialogContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogContentsRendered"): ModalDialogContentsRenderedEvent;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "modalDialogContentsRendered", optionValue: ModalDialogContentsRenderedEvent): void;

	/**
	 * Event fired when the button OK/Apply is clicked
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "buttonOKClick"): ButtonOKClickEvent;

	/**
	 * Event fired when the button OK/Apply is clicked
	 *
	 * @optionValue Define event handler function.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "buttonOKClick", optionValue: ButtonOKClickEvent): void;

	/**
	 * Event fired when the button Cancel is clicked
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "buttonCancelClick"): ButtonCancelClickEvent;

	/**
	 * Event fired when the button Cancel is clicked
	 *
	 * @optionValue Define event handler function.
	 */
	igGridModalDialog(optionLiteral: 'option', optionName: "buttonCancelClick", optionValue: ButtonCancelClickEvent): void;
	igGridModalDialog(options: IgGridModalDialog): JQuery;
	igGridModalDialog(optionLiteral: 'option', optionName: string): any;
	igGridModalDialog(optionLiteral: 'option', options: IgGridModalDialog): JQuery;
	igGridModalDialog(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridModalDialog(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igEditorFilter(methodName: "setFocus", delay: Object, toggle: Object): void;
	igEditorFilter(methodName: "remove"): void;
	igEditorFilter(methodName: "exitEditMode"): void;
	igEditorFilter(methodName: "validator"): void;
	igEditorFilter(methodName: "hasInvalidMessage"): void;
	igEditorFilter(methodName: "destroy"): void;
	igEditorFilter(options: IgEditorFilter): JQuery;
	igEditorFilter(optionLiteral: 'option', optionName: string): any;
	igEditorFilter(optionLiteral: 'option', options: IgEditorFilter): JQuery;
	igEditorFilter(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igEditorFilter(methodName: string, ...methodParams: any[]): any;
}
interface IgGridSortingLocale {
	/**
	 * Custom sorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
	 *
	 */
	sortedColumnTooltip?: string;

	/**
	 * Unsorted column tooltip.
	 *
	 */
	unsortedColumnTooltip?: string;

	/**
	 * Ascending text used for header title.
	 *
	 */
	ascending?: string;

	/**
	 * Descending text used for header title.
	 *
	 */
	descending?: string;

	/**
	 * Specifies sortby button text for each unsorted column in multiple sorting dialog.
	 *
	 */
	modalDialogSortByButtonText?: string;

	/**
	 * Specifies reset button text in the modal dialog.
	 *
	 */
	modalDialogResetButton?: string;

	/**
	 * Specifies caption for each descending sorted column in multiple sorting dialog.
	 *
	 */
	modalDialogCaptionButtonDesc?: string;

	/**
	 * Specifies caption for each ascending sorted column in multiple sorting dialog.
	 *
	 */
	modalDialogCaptionButtonAsc?: string;

	/**
	 * Specifies caption for unsort button in multiple sorting dialog.
	 *
	 */
	modalDialogCaptionButtonUnsort?: string;

	/**
	 * Specifies the text of the feature chooser sorting button.
	 *
	 */
	featureChooserText?: string;

	/**
	 * Specifies caption text for multiple sorting dialog.
	 *
	 */
	modalDialogCaptionText?: string;

	/**
	 * Specifies text of button which applies changes in modal dialog.
	 *
	 */
	modalDialogButtonApplyText?: string;

	/**
	 * Specifies text of button which cancels the changes in the advanced sorting modal dialog.
	 *
	 */
	modalDialogButtonCancelText?: string;

	/**
	 * Specifies the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
	 *
	 */
	featureChooserSortAsc?: string;

	/**
	 * Specifies the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
	 *
	 */
	featureChooserSortDesc?: string;

	/**
	 * Option for IgGridSortingLocale
	 */
	[optionName: string]: any;
}

interface IgGridSortingColumnSetting {
	/**
	 * Identifies the grid column by key. Either key or index must be set in every column setting.
	 *
	 */
	columnKey?: string;

	/**
	 * Identifies the grid column by index. Either key or index must be set in every column setting.
	 *
	 */
	columnIndex?: number;

	/**
	 * This will be the first sort direction when the column hasn't been sorted before.
	 *
	 *
	 * Valid values:
	 * "asc" The first sort of the column data will be in ascending order.
	 * "desc" The first sort of the column data will be in descending order.
	 */
	firstSortDirection?: string;

	/**
	 * The current (or default) sort direction. If this setting is specified, the column will be rendered sorted according to this option.
	 *
	 *
	 * Valid values:
	 * "asc" The initial sort of the column data will be in ascending order.
	 * "desc" The initial sort of the column data will be in descending order.
	 */
	currentSortDirection?: string;

	/**
	 * Enables/disables sorting on the specified column. By default all columns are sortable.
	 *
	 */
	allowSorting?: boolean;

	/**
	 * Reference to a function (string or function) used for custom comparison.
	 * The function accepts the following arguments:
	 * val1 - the first value to compare,
	 * val2 - the second value to compare,
	 * recordsData (optional) - an object having three properties: fieldName - the name of the sorted field; record1 - first record to compare; record2 - second record to compare.
	 * The function returns the following numeric value:
	 * 0 - indicating that values are equal,
	 * 1 - indicating that val1 > val2,
	 * -1 - indicating that val1 < val2.
	 *
	 *
	 * Valid values:
	 * "string" The name of the function as a string located in the global window object.
	 * "function" Function which will be used for custom comparison.
	 */
	compareFunc?: string|Function;

	/**
	 * Option for IgGridSortingColumnSetting
	 */
	[optionName: string]: any;
}

interface ColumnSortingEvent {
	(event: Event, ui: ColumnSortingEventUIParam): void;
}

interface ColumnSortingEventUIParam {
	/**
	 * Gets a reference to GridSorting.
	 */
	owner?: any;

	/**
	 * Gets the column key.
	 */
	columnKey?: string;

	/**
	 * Gets the sorting direction.
	 */
	direction?: string;

	/**
	 * Gets sorting expressions.
	 */
	newExpressions?: any[];
}

interface ColumnSortedEvent {
	(event: Event, ui: ColumnSortedEventUIParam): void;
}

interface ColumnSortedEventUIParam {
	/**
	 * Gets a reference to GridSorting.
	 */
	owner?: any;

	/**
	 * Gets the column key.
	 */
	columnKey?: string;

	/**
	 * Gets the sorting direction.
	 */
	direction?: string;

	/**
	 * Gets the sorted expressions.
	 */
	expressions?: any;
}

interface ModalDialogSortingChangedEvent {
	(event: Event, ui: ModalDialogSortingChangedEventUIParam): void;
}

interface ModalDialogSortingChangedEventUIParam {
	/**
	 * Gets a reference to GridSorting.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;

	/**
	 * Gets the column key.
	 */
	columnKey?: string;

	/**
	 * Gets whether column should be ascending or not. If true it should be ascending
	 */
	isAsc?: boolean;
}

interface ModalDialogButtonUnsortClickEvent {
	(event: Event, ui: ModalDialogButtonUnsortClickEventUIParam): void;
}

interface ModalDialogButtonUnsortClickEventUIParam {
	/**
	 * Gets a reference to GridSorting.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;

	/**
	 * Gets the column key.
	 */
	columnKey?: string;
}

interface ModalDialogSortClickEvent {
	(event: Event, ui: ModalDialogSortClickEventUIParam): void;
}

interface ModalDialogSortClickEventUIParam {
	/**
	 * Gets a reference to GridSorting.
	 */
	owner?: any;

	/**
	 * Gets a reference to the modal dialog element. This is a jQuery object.
	 */
	modalDialogElement?: string;

	/**
	 * Gets the column key.
	 */
	columnKey?: string;
}

interface IgGridSorting {
	/**
	 * Defines local or remote sorting operations.
	 *
	 *
	 * Valid values:
	 * "remote" Sorting is performed remotely as a server-side operation.
	 * "local" Sorting is performed locally by the [$.ig.DataSource](ig.datasource) component.
	 */
	type?: string;

	/**
	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
	 *
	 */
	caseSensitive?: boolean;

	/**
	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
	 *
	 */
	applySortedColumnCss?: boolean;

	/**
	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
	 *
	 */
	sortUrlKey?: string;

	/**
	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
	 *
	 */
	sortUrlKeyAscValue?: string;

	/**
	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
	 *
	 */
	sortUrlKeyDescValue?: string;

	/**
	 * Defines single column sorting or multiple column sorting.
	 *
	 *
	 * Valid values:
	 * "single" Only a single column can be sorted. Previously sorted columns will not preserve their sorting upon sorting a new column.
	 * "multi" If enabled, previous sorted state for columns won't be cleared
	 */
	mode?: string;

	/**
	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
	 *
	 */
	customSortFunction?: Function;

	/**
	 * Specifies which direction to use on the first click / keydown, if the column is sorted for the first time.
	 *
	 *
	 * Valid values:
	 * "ascending" The first sort of the column data will be in ascending order.
	 * "descending" The first sort of the column data will be in descending order.
	 */
	firstSortDirection?: string;

	/**
	 * Specifies whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
	 *
	 */
	modalDialogSortOnClick?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies sortby button text for each unsorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
	 */
	modalDialogSortByButtonText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies reset button text in multiple sorting dialog.
	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
	 */
	modalDialogResetButtonLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each descending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
	 */
	modalDialogCaptionButtonDesc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each ascending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
	 */
	modalDialogCaptionButtonAsc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for unsort button in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
	 */
	modalDialogCaptionButtonUnsort?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the text of the feature chooser sorting button.
	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
	 */
	featureChooserText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
	 */
	unsortedColumnTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
	 */
	modalDialogCaptionText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which apply changes in modal dialog.
	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
	 */
	modalDialogButtonApplyText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which cancels the changes in the advanced sorting modal dialog.
	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
	 */
	modalDialogButtonCancelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
	 */
	featureChooserSortAsc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
	 */
	featureChooserSortDesc?: string;
	locale?: IgGridSortingLocale;

	/**
	 * Specifies width of multiple sorting dialog.
	 *
	 *
	 * Valid values:
	 * "string" Specifies the width in pixels as a string ("300px").
	 * "number" Specifies the width in pixels as a number (300)
	 */
	modalDialogWidth?: string|number;

	/**
	 * Specifies height of multiple sorting dialog.
	 *
	 *
	 * Valid values:
	 * "string" The widget height can be set in pixels (px) and percentage (%).
	 * "number" The widget height can be set in pixels as a number.
	 */
	modalDialogHeight?: string|number;

	/**
	 * Specifies time of milliseconds for animation duration to show/hide modal dialog.
	 *
	 */
	modalDialogAnimationDuration?: number;

	/**
	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
	 *
	 */
	columnSettings?: IgGridSortingColumnSetting[];

	/**
	 * Enables/disables sorting persistence when the grid is rebound.
	 *
	 */
	persist?: boolean;

	/**
	 * Controls containment behavior of multiple sorting dialog.
	 *
	 * owner  The multi sorting dialog will be draggable only in the grid area
	 * window  The multi sorting dialog will be draggable in the whole window area
	 */
	sortingDialogContainment?: string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 */
	inherit?: boolean;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before sorting is invoked for a certain column.
	 * Return false in order to cancel column sorting.
	 */
	columnSorting?: ColumnSortingEvent;

	/**
	 * Event fired after the column has already been sorted and data - re-rendered.
	 */
	columnSorted?: ColumnSortedEvent;

	/**
	 * Event fired before the modal dialog is opened.
	 */
	modalDialogOpening?: ModalDialogOpeningEvent;

	/**
	 * Event fired after the modal dialog is already opened.
	 */
	modalDialogOpened?: ModalDialogOpenedEvent;

	/**
	 * Event fired every time the modal dialog changes its position.
	 */
	modalDialogMoving?: ModalDialogMovingEvent;

	/**
	 * Event fired before the modal dialog is closed.
	 */
	modalDialogClosing?: ModalDialogClosingEvent;

	/**
	 * Event fired after the modal dialog has been closed.
	 */
	modalDialogClosed?: ModalDialogClosedEvent;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 */
	modalDialogContentsRendering?: ModalDialogContentsRenderingEvent;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 */
	modalDialogContentsRendered?: ModalDialogContentsRenderedEvent;

	/**
	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
	 */
	modalDialogSortingChanged?: ModalDialogSortingChangedEvent;

	/**
	 * Event fired when button to unsort column is clicked in modal dialog
	 */
	modalDialogButtonUnsortClick?: ModalDialogButtonUnsortClickEvent;

	/**
	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
	 */
	modalDialogSortClick?: ModalDialogSortClickEvent;

	/**
	 * Event fired when button Apply in modal dialog is clicked
	 */
	modalDialogButtonApplyClick?: ModalDialogButtonApplyClickEvent;

	/**
	 * Event fired when the button to reset sorting is clicked.
	 */
	modalDialogButtonResetClick?: ModalDialogButtonResetClickEvent;

	/**
	 * Option for igGridSorting
	 */
	[optionName: string]: any;
}
interface IgGridSortingMethods {
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridsorting#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridsorting#options:language) or [locale](ui.iggridsorting#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Sorts the data in a grid column  and updates the UI.
	 *
	 * @param index Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
	 * @param direction Specifies sorting direction (ascending or descending)
	 * @param header
	 */
	sortColumn(index: Object, direction: Object, header: Object): void;

	/**
	 * Sorts the data in grid columns and updates the UI. It accepts optional argument - array of sorting expressions. If passed then sorts the data and sets sorting expressions of the data source. If not passed uses current sorting expressions of the data source.
	 *
	 * @param exprs array of sorting expressions. If not set then the method uses expressions defined in sorting settings of the data source.
	 */
	sortMultiple(exprs?: any[]): void;

	/**
	 * Removes current sorting(for all sorted columns) and updates the UI.
	 */
	clearSorting(): void;

	/**
	 * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
	 *
	 * @param index Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
	 * @param header - if specified client events should be fired
	 */
	unsortColumn(index: Object, header: Object): void;

	/**
	 * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.
	 */
	destroy(): void;

	/**
	 * Opens the multiple sorting dialog.
	 */
	openMultipleSortingDialog(): void;

	/**
	 * Closes the multiple sorting dialog.
	 */
	closeMultipleSortingDialog(): void;

	/**
	 * Renders content of multiple sorting dialog - sorted and unsorted columns.
	 *
	 * @param isToCallEvents
	 */
	renderMultipleSortingDialogContent(isToCallEvents: Object): void;

	/**
	 * Remove clear button for multiple sorting dialog
	 */
	removeDialogClearButton(): void;
}
interface JQuery {
	data(propertyName: "igGridSorting"): IgGridSortingMethods;
}

interface JQuery {
	igGridSorting(methodName: "changeGlobalLanguage"): void;
	igGridSorting(methodName: "changeGlobalRegional"): void;
	igGridSorting(methodName: "changeLocale"): void;
	igGridSorting(methodName: "sortColumn", index: Object, direction: Object, header: Object): void;
	igGridSorting(methodName: "sortMultiple", exprs?: any[]): void;
	igGridSorting(methodName: "clearSorting"): void;
	igGridSorting(methodName: "unsortColumn", index: Object, header: Object): void;
	igGridSorting(methodName: "destroy"): void;
	igGridSorting(methodName: "openMultipleSortingDialog"): void;
	igGridSorting(methodName: "closeMultipleSortingDialog"): void;
	igGridSorting(methodName: "renderMultipleSortingDialogContent", isToCallEvents: Object): void;
	igGridSorting(methodName: "removeDialogClearButton"): void;

	/**
	 * Defines local or remote sorting operations.
	 *
	 */

	igGridSorting(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Defines local or remote sorting operations.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSorting(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "caseSensitive"): boolean;

	/**
	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;

	/**
	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "applySortedColumnCss"): boolean;

	/**
	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "applySortedColumnCss", optionValue: boolean): void;

	/**
	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "sortUrlKey"): string;

	/**
	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "sortUrlKey", optionValue: string): void;

	/**
	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyAscValue"): string;

	/**
	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyAscValue", optionValue: string): void;

	/**
	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyDescValue"): string;

	/**
	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyDescValue", optionValue: string): void;

	/**
	 * Defines single column sorting or multiple column sorting.
	 *
	 */

	igGridSorting(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Defines single column sorting or multiple column sorting.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSorting(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "customSortFunction"): Function;

	/**
	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "customSortFunction", optionValue: Function): void;

	/**
	 * Gets which direction to use on the first click / keydown, if the column is sorted for the first time.
	 *
	 */

	igGridSorting(optionLiteral: 'option', optionName: "firstSortDirection"): string;

	/**
	 * Sets which direction to use on the first click / keydown, if the column is sorted for the first time.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSorting(optionLiteral: 'option', optionName: "firstSortDirection", optionValue: string): void;

	/**
	 * Gets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortOnClick"): boolean;

	/**
	 * Sets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortOnClick", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets sortby button text for each unsorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortByButtonText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets sortby button text for each unsorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortByButtonText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets reset button text in multiple sorting dialog.
	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogResetButtonLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets reset button text in multiple sorting dialog.
	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogResetButtonLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each descending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each descending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each ascending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each ascending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for unsort button in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUnsort"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for unsort button in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUnsort", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the text of the feature chooser sorting button.
	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "featureChooserText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the text of the feature chooser sorting button.
	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "unsortedColumnTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "unsortedColumnTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which apply changes in modal dialog.
	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which apply changes in modal dialog.
	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which cancels the changes in the advanced sorting modal dialog.
	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonCancelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which cancels the changes in the advanced sorting modal dialog.
	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonCancelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "featureChooserSortAsc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "featureChooserSortAsc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
	 */
	igGridSorting(optionLiteral: 'option', optionName: "featureChooserSortDesc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "featureChooserSortDesc", optionValue: string): void;
	igGridSorting(optionLiteral: 'option', optionName: "locale"): IgGridSortingLocale;
	igGridSorting(optionLiteral: 'option', optionName: "locale", optionValue: IgGridSortingLocale): void;

	/**
	 * Gets width of multiple sorting dialog.
	 *
	 */

	igGridSorting(optionLiteral: 'option', optionName: "modalDialogWidth"): string|number;

	/**
	 * Sets width of multiple sorting dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSorting(optionLiteral: 'option', optionName: "modalDialogWidth", optionValue: string|number): void;

	/**
	 * Gets height of multiple sorting dialog.
	 *
	 */

	igGridSorting(optionLiteral: 'option', optionName: "modalDialogHeight"): string|number;

	/**
	 * Sets height of multiple sorting dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSorting(optionLiteral: 'option', optionName: "modalDialogHeight", optionValue: string|number): void;

	/**
	 * Gets time of milliseconds for animation duration to show/hide modal dialog.
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogAnimationDuration"): number;

	/**
	 * Sets time of milliseconds for animation duration to show/hide modal dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogAnimationDuration", optionValue: number): void;

	/**
	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "columnSettings"): IgGridSortingColumnSetting[];

	/**
	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridSortingColumnSetting[]): void;

	/**
	 * Enables/disables sorting persistence when the grid is rebound.
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "persist"): boolean;

	/**
	 * Enables/disables sorting persistence when the grid is rebound.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;

	/**
	 * Controls containment behavior of multiple sorting dialog.
	 *
	 * owner  The multi sorting dialog will be draggable only in the grid area
	 * window  The multi sorting dialog will be draggable in the whole window area
	 */
	igGridSorting(optionLiteral: 'option', optionName: "sortingDialogContainment"): string;

	/**
	 * Controls containment behavior of multiple sorting dialog.
	 *
	 * owner  The multi sorting dialog will be draggable only in the grid area
	 * window  The multi sorting dialog will be draggable in the whole window area
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "sortingDialogContainment", optionValue: string): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridSorting(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridSorting(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSorting(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before sorting is invoked for a certain column.
	 * Return false in order to cancel column sorting.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "columnSorting"): ColumnSortingEvent;

	/**
	 * Event fired before sorting is invoked for a certain column.
	 * Return false in order to cancel column sorting.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "columnSorting", optionValue: ColumnSortingEvent): void;

	/**
	 * Event fired after the column has already been sorted and data - re-rendered.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "columnSorted"): ColumnSortedEvent;

	/**
	 * Event fired after the column has already been sorted and data - re-rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "columnSorted", optionValue: ColumnSortedEvent): void;

	/**
	 * Event fired before the modal dialog is opened.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogOpening"): ModalDialogOpeningEvent;

	/**
	 * Event fired before the modal dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogOpening", optionValue: ModalDialogOpeningEvent): void;

	/**
	 * Event fired after the modal dialog is already opened.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogOpened"): ModalDialogOpenedEvent;

	/**
	 * Event fired after the modal dialog is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogOpened", optionValue: ModalDialogOpenedEvent): void;

	/**
	 * Event fired every time the modal dialog changes its position.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogMoving"): ModalDialogMovingEvent;

	/**
	 * Event fired every time the modal dialog changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogMoving", optionValue: ModalDialogMovingEvent): void;

	/**
	 * Event fired before the modal dialog is closed.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogClosing"): ModalDialogClosingEvent;

	/**
	 * Event fired before the modal dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogClosing", optionValue: ModalDialogClosingEvent): void;

	/**
	 * Event fired after the modal dialog has been closed.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogClosed"): ModalDialogClosedEvent;

	/**
	 * Event fired after the modal dialog has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogClosed", optionValue: ModalDialogClosedEvent): void;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendering"): ModalDialogContentsRenderingEvent;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendering", optionValue: ModalDialogContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendered"): ModalDialogContentsRenderedEvent;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendered", optionValue: ModalDialogContentsRenderedEvent): void;

	/**
	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortingChanged"): ModalDialogSortingChangedEvent;

	/**
	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortingChanged", optionValue: ModalDialogSortingChangedEvent): void;

	/**
	 * Event fired when button to unsort column is clicked in modal dialog
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonUnsortClick"): ModalDialogButtonUnsortClickEvent;

	/**
	 * Event fired when button to unsort column is clicked in modal dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonUnsortClick", optionValue: ModalDialogButtonUnsortClickEvent): void;

	/**
	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortClick"): ModalDialogSortClickEvent;

	/**
	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortClick", optionValue: ModalDialogSortClickEvent): void;

	/**
	 * Event fired when button Apply in modal dialog is clicked
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick"): ModalDialogButtonApplyClickEvent;

	/**
	 * Event fired when button Apply in modal dialog is clicked
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick", optionValue: ModalDialogButtonApplyClickEvent): void;

	/**
	 * Event fired when the button to reset sorting is clicked.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonResetClick"): ModalDialogButtonResetClickEvent;

	/**
	 * Event fired when the button to reset sorting is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonResetClick", optionValue: ModalDialogButtonResetClickEvent): void;
	igGridSorting(options: IgGridSorting): JQuery;
	igGridSorting(optionLiteral: 'option', optionName: string): any;
	igGridSorting(optionLiteral: 'option', options: IgGridSorting): JQuery;
	igGridSorting(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridSorting(methodName: string, ...methodParams: any[]): any;
}
interface IgGridSummariesColumnSettingSummaryOperand {
	/**
	 * Text of the summary method which is shown in summary cell
	 *
	 */
	rowDisplayLabel?: string;

	/**
	 * Set type of summary operand
	 *
	 *
	 * Valid values:
	 * "count" calculate count of result rows for the specified column
	 * "min" calculate min of result rows for the specified column
	 * "max" calculate max of result rows for the specified column
	 * "sum" calculate sum of result rows for the specified column
	 * "avg" calculate average of result rows for the specified column
	 * "custom" calculate custom function (specified by summaryCalculator property) of result rows for the specified column
	 */
	type?: string;

	/**
	 * If it is false the summary operand will be shown in dropdown but it will not be made calculation
	 *
	 */
	active?: boolean;

	/**
	 * Name of the custom summary function which should be executed when type is custom
	 *
	 */
	summaryCalculator?: string;

	/**
	 * Specifies the order of elements in dropdown. It is recommended to set order of custom operands and to be greater or equal to 5
	 *
	 */
	order?: number;

	/**
	 * Specifies a format that will be applied to the current summary operant.
	 * When this option is not set, the [format](ui.iggrid#options:columns.format) of the column it is in will taken into account.
	 * When this option and the column [format](ui.iggrid#options:columns.format) is not set, the regional settings will be taken depending on the [autoFormat](ui.iggrid#options:autoFormat) option.
	 * If the column type is not specified in the [autoFormat](ui.iggrid#options:autoFormat) option and no format is set for both column and summary operand, no formatting is applied.
	 *
	 */
	format?: string;

	/**
	 * Option for IgGridSummariesColumnSettingSummaryOperand
	 */
	[optionName: string]: any;
}

interface IgGridSummariesColumnSetting {
	/**
	 * Enables disables summaries for the column
	 *
	 */
	allowSummaries?: boolean;

	/**
	 * Column key. This is a required property in every column setting if columnIndex is not set
	 *
	 */
	columnKey?: string;

	/**
	 * Column index. Can be used in place of column key. The preferred way of populating a column setting is to always use the column keys as identifiers
	 *
	 */
	columnIndex?: number;

	/**
	 * Check defaultSummaryOperands
	 *
	 */
	summaryOperands?: IgGridSummariesColumnSettingSummaryOperand[];

	/**
	 * Option for IgGridSummariesColumnSetting
	 */
	[optionName: string]: any;
}

interface IgGridSummariesLocale {
	/**
	 * Text of the button OK in the summaries dropdown
	 *
	 */
	dialogButtonOKText?: string;

	/**
	 * Text of the button Cancel in the summaries dropdown
	 *
	 */
	dialogButtonCancelText?: string;

	/**
	 * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
	 *
	 */
	featureChooserText?: string;

	/**
	 * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
	 *
	 */
	featureChooserTextHide?: string;

	/**
	 * Empty text template to be shown for empty cells
	 *
	 */
	emptyCellText?: string;

	/**
	 * Tooltip text for header cell button
	 *
	 */
	summariesHeaderButtonTooltip?: string;

	/**
	 * Option for IgGridSummariesLocale
	 */
	[optionName: string]: any;
}

interface SummariesCalculatingEvent {
	(event: Event, ui: SummariesCalculatingEventUIParam): void;
}

interface SummariesCalculatingEventUIParam {
	/**
	 * Gets the igGridSummaries widget object.
	 */
	owner?: any;
}

interface SummariesCalculatedEvent {
	(event: Event, ui: SummariesCalculatedEventUIParam): void;
}

interface SummariesCalculatedEventUIParam {
	/**
	 * Gets the data for calculated summaries.
	 */
	data?: any[];

	/**
	 * Gets the igGridSummaries widget object.
	 */
	owner?: any;
}

interface SummariesMethodSelectionChangedEvent {
	(event: Event, ui: SummariesMethodSelectionChangedEventUIParam): void;
}

interface SummariesMethodSelectionChangedEventUIParam {
	/**
	 * Gets the column key of the column where it is changed selection of summary method.
	 */
	columnKey?: string;

	/**
	 * Gets whether method is selected or not.
	 */
	isSelected?: boolean;

	/**
	 * Gets the summary method name.
	 */
	methodName?: string;

	/**
	 * Gets the igGridSummaries widget object.
	 */
	owner?: any;
}

interface SummariesTogglingEvent {
	(event: Event, ui: SummariesTogglingEventUIParam): void;
}

interface SummariesTogglingEventUIParam {
	/**
	 * Gets whether summaries are shown or not.
	 */
	isToShow?: boolean;

	/**
	 * Gets the igGridSummaries widget object.
	 */
	owner?: any;
}

interface SummariesToggledEvent {
	(event: Event, ui: SummariesToggledEventUIParam): void;
}

interface SummariesToggledEventUIParam {
	/**
	 * Gets whether summaries are shown or not.
	 */
	isToShow?: boolean;

	/**
	 * Gets the igGridSummaries widget object.
	 */
	owner?: any;
}

interface DropDownOKClickedEvent {
	(event: Event, ui: DropDownOKClickedEventUIParam): void;
}

interface DropDownOKClickedEventUIParam {
	/**
	 * Gets the column key for which OK button is clicked.
	 */
	columnKey?: string;

	/**
	 * Gets data for summary methods. Format of event data is {type: "min", active: false};
	 */
	eventData?: any;

	/**
	 * Gets the igGridSummaries widget object.
	 */
	owner?: any;
}

interface DropDownCancelClickedEvent {
	(event: Event, ui: DropDownCancelClickedEventUIParam): void;
}

interface DropDownCancelClickedEventUIParam {
	/**
	 * Gets the column key for which Cancel button is clicked.
	 */
	columnKey?: string;

	/**
	 * Gets the igGridSummaries widget object.
	 */
	owner?: any;
}

interface IgGridSummaries {
	/**
	 * type of summaries calculating.
	 *
	 *
	 * Valid values:
	 * "remote" when it is remote summaries calculations are made on the server
	 * "local"	When it is local calculations are made on the client
	 */
	type?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text of the button OK in the summaries dropdown
	 * Use option [locale.dialogButtonOKText](ui.iggridsummaries#options:locale.dialogButtonOKText).
	 */
	dialogButtonOKText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text of the button Cancel in the summaries dropdown
	 * Use option [locale.dialogButtonCancelText](ui.iggridsummaries#options:locale.dialogButtonCancelText).
	 */
	dialogButtonCancelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
	 * Use option [locale.featureChooserText](ui.iggridsummaries#options:locale.featureChooserText).
	 */
	featureChooserText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
	 * Use option [locale.featureChooserTextHide](ui.iggridsummaries#options:locale.featureChooserTextHide).
	 */
	featureChooserTextHide?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Empty text template to be shown for empty cells
	 * Use option [locale.emptyCellText](ui.iggridsummaries#options:locale.emptyCellText).
	 */
	emptyCellText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for header cell button
	 * Use option [locale.summariesHeaderButtonTooltip](ui.iggridsummaries#options:locale.summariesHeaderButtonTooltip).
	 */
	summariesHeaderButtonTooltip?: string;

	/**
	 * Specifies when calculations are made.
	 *
	 *
	 * Valid values:
	 * "onselect" summaries are updated when checkbox is checked/unchecked
	 * "okcancelbuttons" summaries are updated only when OK button is clicked
	 */
	calculateRenderMode?: string;

	/**
	 * Specifies how compact the summaries are rendered.
	 * When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line.
	 * False ensures that each summary type is occupying a separate line.
	 * Auto will use True if the maximum number of visible summaries is one or less and False otherwise.
	 *
	 */
	compactRenderingMode?: any;

	/**
	 * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
	 *
	 */
	showSummariesButton?: boolean;

	/**
	 * Result key by which we get data from the result returned by remote data source.
	 *
	 */
	summariesResponseKey?: string;

	/**
	 * Set key in GET Request for summaries - used only when type is remote
	 *
	 */
	summaryExprUrlKey?: string;

	/**
	 * Function reference - it is called when data is retrieved from the data source
	 *
	 */
	callee?: Function;

	/**
	 * Height of the dropdown in pixels
	 *
	 */
	dropDownHeight?: number;

	/**
	 * Width of the dropdown in pixels
	 *
	 */
	dropDownWidth?: number;

	/**
	 * Show/hide footer button(on click show/hide dropdown)
	 *
	 */
	showDropDownButton?: boolean;

	/**
	 * Determines when the summary values are calculated when type is local
	 *
	 *
	 * Valid values:
	 * "priortofilteringandpaging" summaries are calculated prior to filtering and paging
	 * "afterfilteringbeforepaging" summaries are calculated after filtering and before paging
	 * "afterfilteringandpaging" summaries are calculated after filtering and paging
	 */
	summaryExecution?: string;

	/**
	 * Dropdown animation duration
	 *
	 */
	dropDownDialogAnimationDuration?: number;

	/**
	 * Result template for summary result(shown in table cell)
	 *
	 */
	resultTemplate?: string;

	/**
	 * a reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
	 *
	 */
	renderSummaryCellFunc?: string|Object;

	/**
	 * A list of column settings that specifies custom summaries options per column basis
	 *
	 */
	columnSettings?: IgGridSummariesColumnSetting[];

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	inherit?: boolean;
	locale?: IgGridSummariesLocale;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before drop down is opened for a specific column summary
	 * Return false in order to cancel opening the drop down.
	 */
	dropDownOpening?: DropDownOpeningEvent;

	/**
	 * Event fired after the summaries dropdown is opened for a specific column
	 */
	dropDownOpened?: DropDownOpenedEvent;

	/**
	 * Event fired before the dropdown for a summary column starts closing
	 * Return false in order to cancel closing the drop down.
	 */
	dropDownClosing?: DropDownClosingEvent;

	/**
	 * Event fired after the dropdown for a summary column is closed
	 */
	dropDownClosed?: DropDownClosedEvent;

	/**
	 * Event fired before summaries calculations are made
	 * Return false in order to cancel calculation of summaries.
	 */
	summariesCalculating?: SummariesCalculatingEvent;

	/**
	 * Event fired after summaries calculation are completely made
	 */
	summariesCalculated?: SummariesCalculatedEvent;

	/**
	 * Event fired when user selects/deselects summary method from checkbox
	 */
	summariesMethodSelectionChanged?: SummariesMethodSelectionChangedEvent;

	/**
	 * Event is fired bofore summary rows start toggling
	 * Return false in order to cancel showing/hiding of summaries.
	 */
	summariesToggling?: SummariesTogglingEvent;

	/**
	 * Event is fired after summary rows are toggled
	 */
	summariesToggled?: SummariesToggledEvent;

	/**
	 * Event is fired when OK button is clicked in drop down
	 */
	dropDownOKClicked?: DropDownOKClickedEvent;

	/**
	 * Event is fired when Cancel button is clicked in drop down.
	 */
	dropDownCancelClicked?: DropDownCancelClickedEvent;

	/**
	 * Option for igGridSummaries
	 */
	[optionName: string]: any;
}
interface IgGridSummariesMethods {
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridsummaries#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridsummaries#options:language) or [locale](ui.iggridsummaries#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.iggridsummaries#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.iggridsummaries#options:regional) option setter
	 */
	changeRegional(): void;
	destroy(): void;

	/**
	 * Returns whether summaries rows are hidden
	 */
	isSummariesRowsHidden(): void;

	/**
	 * Calculate summaries
	 */
	calculateSummaries(): void;

	/**
	 * Remove all summaries dropdown buttons.
	 */
	clearAllFooterIcons(): void;

	/**
	 * Toggle drop down
	 *
	 * @param columnKey toggle drop down for the column with the specified key
	 * @param event event object. Its data should contain current columnKey, isAnimating, buttonId
	 */
	toggleDropDown(columnKey: string, event: Object): void;

	/**
	 * Show/Hide dialog
	 *
	 * @param $dialog jQuery object representation of dropdown div element
	 */
	showHideDialog($dialog: Object): void;

	/**
	 * Toggle summaries rows
	 *
	 * @param isToShow Specifies whether to show or not summaries
	 * @param isInternalCall Optional parameter.Specifies whether this function is called internally by the widget.
	 */
	toggleSummariesRows(isToShow: boolean, isInternalCall: boolean): void;

	/**
	 * Toggles the checkstate of a checkbox if checkboxMode is not set to off, otherwise does nothing.
	 *
	 * @param $checkbox Specifies the jQuery object of the checkbox.
	 */
	toggleCheckstate($checkbox: Object): void;

	/**
	 * Select/Unselect specified checkbox
	 *
	 * @param $checkbox Specifies the jQuery object for checkbox
	 * @param isToSelect Specify whether to select or not checkbox
	 */
	selectCheckBox($checkbox: Object, isToSelect: boolean): void;

	/**
	 * Summary calculate the whole data for the specified column key, columnMethods and dataType (used when datasource is remote and dataType is date or time)
	 *
	 * @param ck ColumnKey
	 * @param columnMethods Array of column methods objects
	 * @param data Object which represents result
	 * represents dataType for the current column
	 * @param dataType
	 */
	calculateSummaryColumn(ck: string, columnMethods: any[], data: Object, dataType: Object): void;

	/**
	 * Return a JQUERY object which holds all summaries for all columns
	 */
	summaryCollection(): void;

	/**
	 * Return a JQUERY object which holds all summaries for column with the specified column key
	 *
	 * @param columnKey
	 */
	summariesFor(columnKey: Object): void;
}
interface JQuery {
	data(propertyName: "igGridSummaries"): IgGridSummariesMethods;
}

interface JQuery {
	igGridSummaries(methodName: "changeGlobalLanguage"): void;
	igGridSummaries(methodName: "changeGlobalRegional"): void;
	igGridSummaries(methodName: "changeLocale"): void;
	igGridSummaries(methodName: "changeRegional"): void;
	igGridSummaries(methodName: "destroy"): void;
	igGridSummaries(methodName: "isSummariesRowsHidden"): void;
	igGridSummaries(methodName: "calculateSummaries"): void;
	igGridSummaries(methodName: "clearAllFooterIcons"): void;
	igGridSummaries(methodName: "toggleDropDown", columnKey: string, event: Object): void;
	igGridSummaries(methodName: "showHideDialog", $dialog: Object): void;
	igGridSummaries(methodName: "toggleSummariesRows", isToShow: boolean, isInternalCall: boolean): void;
	igGridSummaries(methodName: "toggleCheckstate", $checkbox: Object): void;
	igGridSummaries(methodName: "selectCheckBox", $checkbox: Object, isToSelect: boolean): void;
	igGridSummaries(methodName: "calculateSummaryColumn", ck: string, columnMethods: any[], data: Object, dataType: Object): void;
	igGridSummaries(methodName: "summaryCollection"): void;
	igGridSummaries(methodName: "summariesFor", columnKey: Object): void;

	/**
	 * Type of summaries calculating.
	 *
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Type of summaries calculating.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text of the button OK in the summaries dropdown
	 * Use option [locale.dialogButtonOKText](ui.iggridsummaries#options:locale.dialogButtonOKText).
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dialogButtonOKText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text of the button OK in the summaries dropdown
	 * Use option [locale.dialogButtonOKText](ui.iggridsummaries#options:locale.dialogButtonOKText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dialogButtonOKText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text of the button Cancel in the summaries dropdown
	 * Use option [locale.dialogButtonCancelText](ui.iggridsummaries#options:locale.dialogButtonCancelText).
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dialogButtonCancelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text of the button Cancel in the summaries dropdown
	 * Use option [locale.dialogButtonCancelText](ui.iggridsummaries#options:locale.dialogButtonCancelText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dialogButtonCancelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
	 * Use option [locale.featureChooserText](ui.iggridsummaries#options:locale.featureChooserText).
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "featureChooserText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
	 * Use option [locale.featureChooserText](ui.iggridsummaries#options:locale.featureChooserText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
	 * Use option [locale.featureChooserTextHide](ui.iggridsummaries#options:locale.featureChooserTextHide).
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "featureChooserTextHide"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
	 * Use option [locale.featureChooserTextHide](ui.iggridsummaries#options:locale.featureChooserTextHide).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "featureChooserTextHide", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Empty text template to be shown for empty cells
	 * Use option [locale.emptyCellText](ui.iggridsummaries#options:locale.emptyCellText).
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "emptyCellText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Empty text template to be shown for empty cells
	 * Use option [locale.emptyCellText](ui.iggridsummaries#options:locale.emptyCellText).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "emptyCellText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for header cell button
	 * Use option [locale.summariesHeaderButtonTooltip](ui.iggridsummaries#options:locale.summariesHeaderButtonTooltip).
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesHeaderButtonTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for header cell button
	 * Use option [locale.summariesHeaderButtonTooltip](ui.iggridsummaries#options:locale.summariesHeaderButtonTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesHeaderButtonTooltip", optionValue: string): void;

	/**
	 * Gets when calculations are made.
	 *
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "calculateRenderMode"): string;

	/**
	 * Sets when calculations are made.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "calculateRenderMode", optionValue: string): void;

	/**
	 * Gets how compact the summaries are rendered.
	 * When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line.
	 * False ensures that each summary type is occupying a separate line.
	 * Auto will use True if the maximum number of visible summaries is one or less and False otherwise.
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "compactRenderingMode"): any;

	/**
	 * Sets how compact the summaries are rendered.
	 * When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line.
	 * False ensures that each summary type is occupying a separate line.
	 * Auto will use True if the maximum number of visible summaries is one or less and False otherwise.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "compactRenderingMode", optionValue: any): void;

	/**
	 * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "showSummariesButton"): boolean;

	/**
	 * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "showSummariesButton", optionValue: boolean): void;

	/**
	 * Result key by which we get data from the result returned by remote data source.
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesResponseKey"): string;

	/**
	 * Result key by which we get data from the result returned by remote data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesResponseKey", optionValue: string): void;

	/**
	 * Set key in GET Request for summaries - used only when type is remote
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summaryExprUrlKey"): string;

	/**
	 * Set key in GET Request for summaries - used only when type is remote
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summaryExprUrlKey", optionValue: string): void;

	/**
	 * Function reference - it is called when data is retrieved from the data source
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "callee"): Function;

	/**
	 * Function reference - it is called when data is retrieved from the data source
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "callee", optionValue: Function): void;

	/**
	 * Height of the dropdown in pixels
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownHeight"): number;

	/**
	 * Height of the dropdown in pixels
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownHeight", optionValue: number): void;

	/**
	 * Width of the dropdown in pixels
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownWidth"): number;

	/**
	 * Width of the dropdown in pixels
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownWidth", optionValue: number): void;

	/**
	 * Show/hide footer button(on click show/hide dropdown)
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "showDropDownButton"): boolean;

	/**
	 * Show/hide footer button(on click show/hide dropdown)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "showDropDownButton", optionValue: boolean): void;

	/**
	 * Determines when the summary values are calculated when type is local
	 *
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "summaryExecution"): string;

	/**
	 * Determines when the summary values are calculated when type is local
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "summaryExecution", optionValue: string): void;

	/**
	 * Dropdown animation duration
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownDialogAnimationDuration"): number;

	/**
	 * Dropdown animation duration
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownDialogAnimationDuration", optionValue: number): void;

	/**
	 * Result template for summary result(shown in table cell)
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "resultTemplate"): string;

	/**
	 * Result template for summary result(shown in table cell)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "resultTemplate", optionValue: string): void;

	/**
	 * A reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
	 *
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "renderSummaryCellFunc"): string|Object;

	/**
	 * A reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "renderSummaryCellFunc", optionValue: string|Object): void;

	/**
	 * A list of column settings that specifies custom summaries options per column basis
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "columnSettings"): IgGridSummariesColumnSetting[];

	/**
	 * A list of column settings that specifies custom summaries options per column basis
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridSummariesColumnSetting[]): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
	igGridSummaries(optionLiteral: 'option', optionName: "locale"): IgGridSummariesLocale;
	igGridSummaries(optionLiteral: 'option', optionName: "locale", optionValue: IgGridSummariesLocale): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridSummaries(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before drop down is opened for a specific column summary
	 * Return false in order to cancel opening the drop down.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownOpening"): DropDownOpeningEvent;

	/**
	 * Event fired before drop down is opened for a specific column summary
	 * Return false in order to cancel opening the drop down.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownOpening", optionValue: DropDownOpeningEvent): void;

	/**
	 * Event fired after the summaries dropdown is opened for a specific column
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownOpened"): DropDownOpenedEvent;

	/**
	 * Event fired after the summaries dropdown is opened for a specific column
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownOpened", optionValue: DropDownOpenedEvent): void;

	/**
	 * Event fired before the dropdown for a summary column starts closing
	 * Return false in order to cancel closing the drop down.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownClosing"): DropDownClosingEvent;

	/**
	 * Event fired before the dropdown for a summary column starts closing
	 * Return false in order to cancel closing the drop down.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownClosing", optionValue: DropDownClosingEvent): void;

	/**
	 * Event fired after the dropdown for a summary column is closed
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownClosed"): DropDownClosedEvent;

	/**
	 * Event fired after the dropdown for a summary column is closed
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownClosed", optionValue: DropDownClosedEvent): void;

	/**
	 * Event fired before summaries calculations are made
	 * Return false in order to cancel calculation of summaries.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesCalculating"): SummariesCalculatingEvent;

	/**
	 * Event fired before summaries calculations are made
	 * Return false in order to cancel calculation of summaries.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesCalculating", optionValue: SummariesCalculatingEvent): void;

	/**
	 * Event fired after summaries calculation are completely made
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesCalculated"): SummariesCalculatedEvent;

	/**
	 * Event fired after summaries calculation are completely made
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesCalculated", optionValue: SummariesCalculatedEvent): void;

	/**
	 * Event fired when user selects/deselects summary method from checkbox
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesMethodSelectionChanged"): SummariesMethodSelectionChangedEvent;

	/**
	 * Event fired when user selects/deselects summary method from checkbox
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesMethodSelectionChanged", optionValue: SummariesMethodSelectionChangedEvent): void;

	/**
	 * Event is fired bofore summary rows start toggling
	 * Return false in order to cancel showing/hiding of summaries.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesToggling"): SummariesTogglingEvent;

	/**
	 * Event is fired bofore summary rows start toggling
	 * Return false in order to cancel showing/hiding of summaries.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesToggling", optionValue: SummariesTogglingEvent): void;

	/**
	 * Event is fired after summary rows are toggled
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesToggled"): SummariesToggledEvent;

	/**
	 * Event is fired after summary rows are toggled
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "summariesToggled", optionValue: SummariesToggledEvent): void;

	/**
	 * Event is fired when OK button is clicked in drop down
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownOKClicked"): DropDownOKClickedEvent;

	/**
	 * Event is fired when OK button is clicked in drop down
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownOKClicked", optionValue: DropDownOKClickedEvent): void;

	/**
	 * Event is fired when Cancel button is clicked in drop down.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownCancelClicked"): DropDownCancelClickedEvent;

	/**
	 * Event is fired when Cancel button is clicked in drop down.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridSummaries(optionLiteral: 'option', optionName: "dropDownCancelClicked", optionValue: DropDownCancelClickedEvent): void;
	igGridSummaries(options: IgGridSummaries): JQuery;
	igGridSummaries(optionLiteral: 'option', optionName: string): any;
	igGridSummaries(optionLiteral: 'option', options: IgGridSummaries): JQuery;
	igGridSummaries(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridSummaries(methodName: string, ...methodParams: any[]): any;
}
interface IgGridTooltipsColumnSettings {
	/**
	 * Either key or index must be set in every column setting.
	 *
	 */
	columnKey?: string;

	/**
	 * Either key or index must be set in every column setting.
	 *
	 */
	columnIndex?: number;

	/**
	 * Enables / disables tooltips on the specified column. By default tooltips are displayed for each column. Note: This option is mandatory.
	 *
	 */
	allowTooltips?: boolean;

	/**
	 * Specifies the maximum width (in pixels) of the tooltip when shown for the specified column. If unset the width of the column will be used instead.
	 *
	 */
	maxWidth?: number;

	/**
	 * Option for IgGridTooltipsColumnSettings
	 */
	[optionName: string]: any;
}

interface IgGridTooltips {
	/**
	 * Determines the tooltip visibility option
	 *
	 *
	 * Valid values:
	 * "always" tooltips always show for hovered elements
	 * "never" tooltips do not show automatically
	 * "overflow" tooltips show only when the underlying data overflows its container
	 */
	visibility?: string;

	/**
	 * Controls the tooltip's style
	 *
	 *
	 * Valid values:
	 * "tooltip" The tooltip will be positioned according to the mouse cursor. Will render the tooltip content as plain text.
	 * "popover" The tooltip will be positioned according to the target element with an arrow pointing the element. This style is more suitable for touch-supported environments. Will render the tooltip content as HTML.
	 */
	style?: string;

	/**
	 * The time in milliseconds after which tooltip will show when
	 * mouse cursor is hovered over a cell.
	 *
	 */
	showDelay?: number;

	/**
	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
	 * cursor gets outside of the cell.
	 *
	 */
	hideDelay?: number;

	/**
	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
	 *
	 */
	columnSettings?: IgGridTooltipsColumnSettings;

	/**
	 * Sets the time tooltip fades in and out when showing/hiding
	 *
	 */
	fadeTimespan?: number;

	/**
	 * Sets the left position of the tooltip relative to the mouse cursor
	 *
	 */
	cursorLeftOffset?: number;

	/**
	 * Sets the top position of the tooltip relative to the mouse cursor
	 *
	 */
	cursorTopOffset?: number;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	inherit?: boolean;

	/**
	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
	 */
	tooltipShowing?: TooltipShowingEvent;

	/**
	 * Event fired after a tooltip is shown
	 */
	tooltipShown?: TooltipShownEvent;

	/**
	 * Event fired when the mouse has left an element and the tooltip is about to hide
	 */
	tooltipHiding?: TooltipHidingEvent;

	/**
	 * Event fired after a tooltip is hidden
	 */
	tooltipHidden?: TooltipHiddenEvent;

	/**
	 * Option for igGridTooltips
	 */
	[optionName: string]: any;
}
interface IgGridTooltipsMethods {
	/**
	 * Destroys the tooltip widget.
	 */
	destroy(): void;

	/**
	 * Returns the ID of the parent div element bounding the ruler and the tooltip container
	 */
	id(): string;
}
interface JQuery {
	data(propertyName: "igGridTooltips"): IgGridTooltipsMethods;
}

interface JQuery {
	igGridTooltips(methodName: "destroy"): void;
	igGridTooltips(methodName: "id"): string;

	/**
	 * Determines the tooltip visibility option
	 *
	 */

	igGridTooltips(optionLiteral: 'option', optionName: "visibility"): string;

	/**
	 * Determines the tooltip visibility option
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridTooltips(optionLiteral: 'option', optionName: "visibility", optionValue: string): void;

	/**
	 * Controls the tooltip's style
	 *
	 */

	igGridTooltips(optionLiteral: 'option', optionName: "style"): string;

	/**
	 * Controls the tooltip's style
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridTooltips(optionLiteral: 'option', optionName: "style", optionValue: string): void;

	/**
	 * The time in milliseconds after which tooltip will show when
	 * mouse cursor is hovered over a cell.
	 *
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "showDelay"): number;

	/**
	 * The time in milliseconds after which tooltip will show when
	 * mouse cursor is hovered over a cell.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "showDelay", optionValue: number): void;

	/**
	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
	 * cursor gets outside of the cell.
	 *
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "hideDelay"): number;

	/**
	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
	 * cursor gets outside of the cell.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "hideDelay", optionValue: number): void;

	/**
	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
	 *
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "columnSettings"): IgGridTooltipsColumnSettings;

	/**
	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridTooltipsColumnSettings): void;

	/**
	 * The time tooltip fades in and out when showing/hiding
	 *
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "fadeTimespan"): number;

	/**
	 * Sets the time tooltip fades in and out when showing/hiding
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "fadeTimespan", optionValue: number): void;

	/**
	 * The left position of the tooltip relative to the mouse cursor
	 *
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "cursorLeftOffset"): number;

	/**
	 * Sets the left position of the tooltip relative to the mouse cursor
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "cursorLeftOffset", optionValue: number): void;

	/**
	 * The top position of the tooltip relative to the mouse cursor
	 *
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "cursorTopOffset"): number;

	/**
	 * Sets the top position of the tooltip relative to the mouse cursor
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "cursorTopOffset", optionValue: number): void;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;

	/**
	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
	 *
	 * @optionValue Define event handler function.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;

	/**
	 * Event fired after a tooltip is shown
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;

	/**
	 * Event fired after a tooltip is shown
	 *
	 * @optionValue Define event handler function.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;

	/**
	 * Event fired when the mouse has left an element and the tooltip is about to hide
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;

	/**
	 * Event fired when the mouse has left an element and the tooltip is about to hide
	 *
	 * @optionValue Define event handler function.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;

	/**
	 * Event fired after a tooltip is hidden
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;

	/**
	 * Event fired after a tooltip is hidden
	 *
	 * @optionValue Define event handler function.
	 */
	igGridTooltips(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;
	igGridTooltips(options: IgGridTooltips): JQuery;
	igGridTooltips(optionLiteral: 'option', optionName: string): any;
	igGridTooltips(optionLiteral: 'option', options: IgGridTooltips): JQuery;
	igGridTooltips(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridTooltips(methodName: string, ...methodParams: any[]): any;
}
interface IgGridUpdatingColumnSetting {
	/**
	 * Identifies the grid column by key.
	 *
	 */
	columnKey?: string;

	/**
	 * Specifies the type of editor to use for the column.
	 *
	 *
	 * Valid values:
	 * "text" An igTextEditor will be created
	 * "mask" An igMaskEditor will be created
	 * "date" An igDateEditor will be created
	 * "datepicker" An igDatePicker will be created
	 * "timepicker" An igTimePikcer will be created
	 * "numeric" An igNumericEditor will be created
	 * "checkbox" An igCheckboxEditor will be created
	 * "currency" An igCurrencyEditor will be created
	 * "percent" An igPercentEditor will be created
	 * "combo" An igCombo editor is created. Both the JS and CSS files used by ui.igCombo should be available.
	 * "rating" An igRating editor is created. Both the JS and CSS files used by ui.igRating should be available.
	 */
	editorType?: string;

	/**
	 * Specifies а custom editor provider instance. More information about editor providers can be found [here](http://www.igniteui.com/help/implementing-custom-editor-provider) and [here](http://www.igniteui.com/help/working-with-combo-editor-provider).
	 * It should either extend $.ig.EditorProvider or have definitions for the following methods:
	 * $.ig.EditorProvider = $.ig.EditorProvider|| $.ig.EditorProvider.extend({
	 * createEditor: function (callbacks, key, editorOptions, tabIndex, format, element) {},
	 * attachErrorEvents: function (errorShowing, errorShown, errorHidden) {},
	 * getEditor: function () {},
	 * refreshValue: function () {},
	 * getValue: function () {},
	 * setValue: function (val) {},
	 * setSize: function (width, height) {},
	 * setFocus: function () {},
	 * removeFromParent: function () {},
	 * destroy: function () {},
	 * validator: function () {},
	 * validate: function (noLabel) {},
	 * isValid: function () {}
	 * });
	 *
	 */
	editorProvider?: any;

	/**
	 * Specifies options to initialize the corresponding editor with.
	 *
	 */
	editorOptions?: any;

	/**
	 * Specifies if the end-user will be allowed to leave the editor's value empty during edit mode or not.
	 *
	 */
	required?: boolean;

	/**
	 * Specifies if the column is read-only. In 'cell' and 'row' [editMode](ui.iggridupdating#options:editMode) no editor will be created for read-only columns. In 'dialog' mode enabling [showReadonlyEditors](ui.iggridupdating#options:rowEditDialogOptions.showReadonlyEditors) will display disabled editors for such columns.
	 *
	 */
	readOnly?: boolean;

	/**
	 * Specifies if the column's value should be validated or not. The validation is done based on the rules of the corresponding editor.
	 *
	 */
	validation?: boolean;

	/**
	 * Specifies the default value for the column when adding new rows. When in edit mode for adding a row the value will be pre-filled in the column's editor (if the column is not read-only). The value should be of the type specified for the column in the grid's [columns](ui.iggrid#options:columns) collection.
	 *
	 */
	defaultValue?: any;

	/**
	 * Option for IgGridUpdatingColumnSetting
	 */
	[optionName: string]: any;
}

interface IgGridUpdatingRowEditDialogOptions {
	/**
	 * Controls the containment of the dialog's drag operation.
	 *
	 *
	 * Valid values:
	 * "owner" The row edit dialog will be draggable only in the grid area.
	 * "window" The row edit dialog will be draggable in the whole window area.
	 */
	containment?: string;

	/**
	 * Controls the default row edit dialog width.
	 *
	 *
	 * Valid values:
	 * "string" The dialog window width in pixels (400px).
	 * "number" The dialog window width as a number (400).
	 */
	width?: string|number;

	/**
	 * Controls the default row edit dialog height.
	 *
	 *
	 * Valid values:
	 * "string" The dialog window height in pixels (350px).
	 * "number" The dialog window height as a number (350).
	 */
	height?: string|number;

	/**
	 * Specifies the animation duration for the opening and closing operations.
	 *
	 */
	animationDuration?: number;

	/**
	 * Controls if editors should be rendered for read-only columns. If rendered, these editors will be disabled.
	 *
	 */
	showReadonlyEditors?: boolean;

	/**
	 * Controls if editors should be rendered for hidden columns.
	 *
	 */
	showEditorsForHiddenColumns?: boolean;

	/**
	 * Controls the width of the column containing the column names in the default row edit dialog.
	 *
	 *
	 * Valid values:
	 * "string" The width of the column in pixels (100px) or percents (20%).
	 * "number" The width of the column as a number (100) in pixels.
	 * "null" The width of the column will be left empty for the browser to size automatically.
	 */
	namesColumnWidth?: string|number;

	/**
	 * Controls the width of the column containing the editors in the default row edit dialog.
	 *
	 *
	 * Valid values:
	 * "string" The width of the column in pixels (100px) or percents (20%).
	 * "number" The width of the column as a number (100) in pixels.
	 * "null" The width of the column will be left empty for the browser to size automatically.
	 */
	editorsColumnWidth?: string|number;

	/**
	 * Controls the visibility of the done and cancel buttons for the dialog.
	 * If disabled the end-user will be able to stop editing only with the Enter and Esc keys.
	 *
	 */
	showDoneCancelButtons?: boolean;

	/**
	 * Specifies a template to be rendered against the currently edited record (or up-to-date key-value pairs in the case of not yet created records). It may contain an element decorated with the 'data-render-tmpl' attribute to specify where the control should render the editors template specified in the [editorsTemplate](ui.iggridupdating#options:rowEditDialogOptions.editorsTemplate) option. For custom dialogs, the elements can be decorated with 'data-editor-for-<columnKey>' attributes where columnKey is the key of the column that editor or input will be used to edit. If both dialogTemplate and [dialogTemplateSelector](ui.iggridupdating#options:rowEditDialogOptions.dialogTemplateSelector) are specified, dialogTemplateSelector will be used.The default template is '<table><colgroup><col></col><col></col></colgroup><tbody data-render-tmpl></tbody></table>'.
	 *
	 */
	dialogTemplate?: string;

	/**
	 * Specifies a selector to a template rendered against the currently edited record (or up-to-date key-value pairs in the case of not yet created records). It may contain an element decorated with the 'data-render-tmpl' attribute to specify where the control should render the editors template specified in the [editorsTemplate](ui.iggridupdating#options:rowEditDialogOptions.editorsTemplate) option. For custom dialogs, the elements can be decorated with 'data-editor-for-<columnKey>' attributes where columnKey is the key of the column that editor or input will be used to edit. If both [dialogTemplate](ui.iggridupdating#options:rowEditDialogOptions.dialogTemplate) and dialogTemplateSelector are specified, dialogTemplateSelector will be used.The default template is '<table><colgroup><col></col><col></col></colgroup><tbody data-render-tmpl></tbody></table>'.
	 *
	 */
	dialogTemplateSelector?: string;

	/**
	 * Specifies a template to be executed for each column in the grid's column collection (or just the read-write columns if [showReadonlyEditors](ui.iggridupdating#options:rowEditDialogOptions.showReadonlyEditors) is false). Decorate the element to be used as an editor with 'data-editor-for-${key}'. The ${key} template tag should be replaced with the chosen templating engine's syntax for rendering values. If any editors for columns are specified in the dialog markup they will be exluded from the data the template will be rendered for. This property is ignored if [dialogTemplate](ui.iggridupdating#options:rowEditDialogOptions.dialogTemplate) does not include an element with the 'data-render-tmpl' attribute. If both editorsTemplate and [editorsTemplateSelector](ui.iggridupdating#options:rowEditDialogOptions.editorsTemplateSelector) are specified, editorsTemplateSelector will be used.
	 * The default template is '<tr><td>${headerText}</td><td><input data-editor-for-${key} /></td></tr>'
	 *
	 */
	editorsTemplate?: string;

	/**
	 * Specifies a selector to a template to be executed for each column in the grid's column collection (or just the read-write columns if [showReadonlyEditors](ui.iggridupdating#options:rowEditDialogOptions.showReadonlyEditors) is false). Decorate the element to be used as an editor with 'data-editor-for-${key}'. The ${key} template tag should be replaced with the chosen templating engine's syntax for rendering values. If any editors for columns are specified in the dialog markup they will be exluded from the data the template will be rendered for. This property is ignored if [dialogTemplate](ui.iggridupdating#options:rowEditDialogOptions.dialogTemplate) does not include an element with the 'data-render-tmpl' attribute. If both [editorsTemplate](ui.iggridupdating#options:rowEditDialogOptions.editorsTemplate) and editorsTemplateSelector are specified, editorsTemplateSelector will be used.
	 * The default template is '<tr><td>${headerText}</td><td><input data-editor-for-${key} /></td></tr>'
	 *
	 */
	editorsTemplateSelector?: string;

	/**
	 * Option for IgGridUpdatingRowEditDialogOptions
	 */
	[optionName: string]: any;
}

interface IgGridUpdatingLocale {
	/**
	 * Specifies the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
	 *
	 */
	doneLabel?: string;

	/**
	 * Specifies the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
	 *
	 */
	doneTooltip?: string;

	/**
	 * Specifies the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
	 *
	 */
	cancelLabel?: string;

	/**
	 * Specifies the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
	 *
	 */
	cancelTooltip?: string;

	/**
	 * Specifies the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
	 *
	 */
	addRowLabel?: string;

	/**
	 * Specifies the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
	 *
	 */
	addRowTooltip?: string;

	/**
	 * Specifies the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
	 *
	 */
	deleteRowLabel?: string;

	/**
	 * Specifies the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
	 *
	 */
	deleteRowTooltip?: string;

	/**
	 * Option for IgGridUpdatingLocale
	 */
	[optionName: string]: any;
}

interface EditRowStartingEvent {
	(event: Event, ui: EditRowStartingEventUIParam): void;
}

interface EditRowStartingEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the row's PK value.
	 */
	rowID?: any;

	/**
	 * Checks if the edit mode is for adding a new row.
	 */
	rowAdding?: boolean;
}

interface EditRowStartedEvent {
	(event: Event, ui: EditRowStartedEventUIParam): void;
}

interface EditRowStartedEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the row's PK value.
	 */
	rowID?: any;

	/**
	 * Checks if the edit mode is for adding a new row.
	 */
	rowAdding?: boolean;
}

interface EditRowEndingEvent {
	(event: Event, ui: EditRowEndingEventUIParam): void;
}

interface EditRowEndingEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Check if any of the values is changed which will cause update in the data source. Can be manually set to false to prevent this update.
	 */
	update?: boolean;

	/**
	 * Checks if the edit mode is for adding a new row.
	 */
	rowAdding?: boolean;

	/**
	 * Gets or set the new value for the column with the specified key.
	 */
	values?: any;

	/**
	 * Gets the old value for the column with the specified key.
	 */
	oldValues?: any;
}

interface EditRowEndedEvent {
	(event: Event, ui: EditRowEndedEventUIParam): void;
}

interface EditRowEndedEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the row's PK value.
	 */
	rowID?: any;

	/**
	 * Check if any of the values is changed which will cause update in the data source.
	 */
	update?: boolean;

	/**
	 * Check if the edit mode is for adding a new row.
	 */
	rowAdding?: boolean;

	/**
	 * Gets the new value for the column with the specified key.
	 */
	values?: any;

	/**
	 * Gets the old value for the column with the specified key.
	 */
	oldValues?: any;
}

interface EditCellStartingEvent {
	(event: Event, ui: EditCellStartingEventUIParam): void;
}

interface EditCellStartingEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the row's PK value.
	 */
	rowID?: any;

	/**
	 * Gets the index of the column.
	 */
	columnIndex?: number;

	/**
	 * Gets the key of the column.
	 */
	columnKey?: string;

	/**
	 * Gets a reference to the editor used for editing the column.
	 */
	editor?: any;

	/**
	 * Gets or set the value of the editor.
	 */
	value?: any;

	/**
	 * Checks if the edit mode is for adding a new row.
	 */
	rowAdding?: boolean;
}

interface EditCellStartedEvent {
	(event: Event, ui: EditCellStartedEventUIParam): void;
}

interface EditCellStartedEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the row's PK value.
	 */
	rowID?: any;

	/**
	 * Gets the index of the column.
	 */
	columnIndex?: number;

	/**
	 * Gets the key of the column.
	 */
	columnKey?: string;

	/**
	 * Gets a reference to the editor used for editing the column.
	 */
	editor?: any;

	/**
	 * Gets or set the value of the editor.
	 */
	value?: any;

	/**
	 * Checks if the edit mode is for adding a new row.
	 */
	rowAdding?: boolean;
}

interface EditCellEndingEvent {
	(event: Event, ui: EditCellEndingEventUIParam): void;
}

interface EditCellEndingEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the row's PK value.
	 */
	rowID?: any;

	/**
	 * Gets the index of the column.
	 */
	columnIndex?: number;

	/**
	 * Gets the key of the column.
	 */
	columnKey?: string;

	/**
	 * Gets a reference to the editor used for editing the column.
	 */
	editor?: any;

	/**
	 * Gets or set the value of the editor.
	 */
	value?: any;

	/**
	 * Gets the old value.
	 */
	oldValue?: any;

	/**
	 * Check if the value is changed which will cause update in the data source. Can be manually set to false to prevent this update.
	 */
	update?: boolean;

	/**
	 * Check if the edit mode is for adding a new row.
	 */
	rowAdding?: boolean;
}

interface EditCellEndedEvent {
	(event: Event, ui: EditCellEndedEventUIParam): void;
}

interface EditCellEndedEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the row's PK value.
	 */
	rowID?: any;

	/**
	 * Gets the index of the column.
	 */
	columnIndex?: number;

	/**
	 * Gets the key of the column.
	 */
	columnKey?: string;

	/**
	 * Gets a reference to the editor used for editing the column.
	 */
	editor?: any;

	/**
	 * Gets the new value.
	 */
	value?: any;

	/**
	 * Gets the old value.
	 */
	oldValue?: any;

	/**
	 * Check if the value is changed which will cause update in the data source. Can be manually set to false to prevent this update.
	 */
	update?: boolean;

	/**
	 * Check if the edit mode is for adding a new row.
	 */
	rowAdding?: boolean;
}

interface RowAddingEvent {
	(event: Event, ui: RowAddingEventUIParam): void;
}

interface RowAddingEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the value for the column with the specified key.
	 */
	values?: any;

	/**
	 * Gets the default value (before editing) for the column with the specified key.
	 */
	oldValues?: any;
}

interface RowAddedEvent {
	(event: Event, ui: RowAddedEventUIParam): void;
}

interface RowAddedEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the value for the column with the specified key.
	 */
	values?: any;

	/**
	 * Gets the default value (before editing) for the column with the specified key.
	 */
	oldValues?: any;
}

interface RowDeletingEvent {
	(event: Event, ui: RowDeletingEventUIParam): void;
}

interface RowDeletingEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets a jQuery object containing the TR element of the row to delete.
	 */
	element?: any;

	/**
	 * Gets the row's PK value.
	 */
	rowID?: any;
}

interface RowDeletedEvent {
	(event: Event, ui: RowDeletedEventUIParam): void;
}

interface RowDeletedEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets a jQuery object containing the TR element of the deleted row.
	 */
	element?: any;

	/**
	 * Gets the row's PK value.
	 */
	rowID?: any;
}

interface DataDirtyEvent {
	(event: Event, ui: DataDirtyEventUIParam): void;
}

interface DataDirtyEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;
}

interface GeneratePrimaryKeyValueEvent {
	(event: Event, ui: GeneratePrimaryKeyValueEventUIParam): void;
}

interface GeneratePrimaryKeyValueEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets the auto-generated primary key (the number of records in the data source + 1) or set a custom unique primary key for the new row.
	 */
	value?: any;
}

interface RowEditDialogBeforeOpenEvent {
	(event: Event, ui: RowEditDialogBeforeOpenEventUIParam): void;
}

interface RowEditDialogBeforeOpenEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets a reference to row edit dialog DOM element.
	 */
	dialogElement?: any;
}

interface RowEditDialogAfterOpenEvent {
	(event: Event, ui: RowEditDialogAfterOpenEventUIParam): void;
}

interface RowEditDialogAfterOpenEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets a reference to row edit dialog DOM element.
	 */
	dialogElement?: any;
}

interface RowEditDialogBeforeCloseEvent {
	(event: Event, ui: RowEditDialogBeforeCloseEventUIParam): void;
}

interface RowEditDialogBeforeCloseEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets a reference to row edit dialog DOM element.
	 */
	dialogElement?: any;
}

interface RowEditDialogAfterCloseEvent {
	(event: Event, ui: RowEditDialogAfterCloseEventUIParam): void;
}

interface RowEditDialogAfterCloseEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets a reference to row edit dialog DOM element.
	 */
	dialogElement?: any;
}

interface RowEditDialogContentsRenderedEvent {
	(event: Event, ui: RowEditDialogContentsRenderedEventUIParam): void;
}

interface RowEditDialogContentsRenderedEventUIParam {
	/**
	 * Gets a reference to GridUpdating.
	 */
	owner?: any;

	/**
	 * Gets a reference to row edit dialog DOM element.
	 */
	dialogElement?: any;
}

interface IgGridUpdating {
	/**
	 * A list of custom column options that specify editing and validation settings for a specific column.
	 *
	 */
	columnSettings?: IgGridUpdatingColumnSetting[];

	/**
	 * Specifies the edit mode.
	 *
	 *
	 * Valid values:
	 * "row" Editors are shown for all columns that are not read-only. The editor of the clicked cell receives initial focus. Done and Cancel buttons may be displayed based on the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) property.
	 * "cell" An editor is shown for the cell entering edit mode. The Done and Cancel buttons are not supported for this mode.
	 * "dialog" A popup dialog is used with seperate settings available through the [rowEditDialogOptions](ui.iggridupdating#options:rowEditDialogOptions) property.
	 * "none" Editing through the UI is disabled.
	 */
	editMode?: string;

	/**
	 * Specifies if deleting rows through the UI is enabled.
	 *
	 */
	enableDeleteRow?: boolean;

	/**
	 * Specifies if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
	 *
	 */
	enableAddRow?: boolean;

	/**
	 * Specifies if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
	 *
	 */
	validation?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
	 */
	doneLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
	 */
	doneTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
	 */
	cancelLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
	 */
	cancelTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
	 */
	addRowLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
	 */
	addRowTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
	 */
	deleteRowLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
	 */
	deleteRowTooltip?: string;

	/**
	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
	 *
	 */
	showDoneCancelButtons?: boolean;

	/**
	 * Specifies if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
	 *
	 */
	enableDataDirtyException?: boolean;

	/**
	 * Specifies how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
	 *
	 */
	startEditTriggers?: string|Array<any>;

	/**
	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
	 *
	 */
	horizontalMoveOnEnter?: boolean;

	/**
	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
	 *
	 */
	excelNavigationMode?: boolean;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
	 *
	 */
	saveChangesSuccessHandler?: Function|string;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
	 *
	 */
	saveChangesErrorHandler?: Function|string;

	/**
	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
	 *
	 */
	swipeDistance?: string|number;

	/**
	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
	 *
	 */
	wrapAround?: boolean;

	/**
	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
	 *
	 */
	rowEditDialogOptions?: IgGridUpdatingRowEditDialogOptions;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Enables/disables feature inheritance for the child layouts in igHierarchicalGrid.
	 */
	inherit?: boolean;
	locale?: IgGridUpdatingLocale;

	/**
	 * Event fired before row editing begins.
	 * Return false in order to cancel editing.
	 */
	editRowStarting?: EditRowStartingEvent;

	/**
	 * Event fired after row editing begins.
	 */
	editRowStarted?: EditRowStartedEvent;

	/**
	 * Event fired before row editing ends.
	 * Return false in order to prevent the grid from exiting edit mode.
	 */
	editRowEnding?: EditRowEndingEvent;

	/**
	 * Event fired after row editing ends.
	 */
	editRowEnded?: EditRowEndedEvent;

	/**
	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
	 * Return false in order to cancel editing.
	 */
	editCellStarting?: EditCellStartingEvent;

	/**
	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
	 */
	editCellStarted?: EditCellStartedEvent;

	/**
	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
	 */
	editCellEnding?: EditCellEndingEvent;

	/**
	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
	 */
	editCellEnded?: EditCellEndedEvent;

	/**
	 * Event fired before adding a new row.
	 * Return false in order to cancel the adding of the new row to the data source.
	 */
	rowAdding?: RowAddingEvent;

	/**
	 * Event fired after adding a new row.
	 */
	rowAdded?: RowAddedEvent;

	/**
	 * Event fired before deleting a row.
	 * Return false in order to cancel the row's deletion.
	 */
	rowDeleting?: RowDeletingEvent;

	/**
	 * Event fired after a row is deleted.
	 */
	rowDeleted?: RowDeletedEvent;

	/**
	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
	 * Return false in order to prevent the exception.
	 */
	dataDirty?: DataDirtyEvent;

	/**
	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
	 */
	generatePrimaryKeyValue?: GeneratePrimaryKeyValueEvent;

	/**
	 * Event fired before the row edit dialog is opened.
	 */
	rowEditDialogBeforeOpen?: RowEditDialogBeforeOpenEvent;

	/**
	 * Event fired after the row edit dialog is opened.
	 */
	rowEditDialogAfterOpen?: RowEditDialogAfterOpenEvent;

	/**
	 * Event fired before the row edit dialog is closed.
	 */
	rowEditDialogBeforeClose?: RowEditDialogBeforeCloseEvent;

	/**
	 * Event fired after the row edit dialog is closed.
	 */
	rowEditDialogAfterClose?: RowEditDialogAfterCloseEvent;

	/**
	 * Event fired after the row edit dialog is rendered.
	 */
	rowEditDialogContentsRendered?: RowEditDialogContentsRenderedEvent;

	/**
	 * Option for igGridUpdating
	 */
	[optionName: string]: any;
}
interface IgGridUpdatingMethods {
	/**
	 * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
	 * If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
	 *
	 * @param rowId The primary key of the row the cell is a child of.
	 * @param colKey The column key of the cell.
	 * @param value The new value for the cell.
	 */
	setCellValue(rowId: Object, colKey: string, value: Object): void;

	/**
	 * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
	 * If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
	 *
	 * @param rowId The primary key of the row to update.
	 * @param values Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
	 */
	updateRow(rowId: Object, values: Object): void;

	/**
	 * Adds a new row to the grid. It also creates a transaction and updates the UI.
	 *
	 * @param values Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
	 */
	addRow(values: Object): void;

	/**
	 * Deletes a row from the grid. It also creates a transaction and updates the UI.
	 *
	 * @param rowId The primary key of the row to delete.
	 */
	deleteRow(rowId: Object): void;

	/**
	 * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).
	 *
	 * @param rowId The row id.
	 * @param column The column key or index.
	 * @param raiseEvents Specifies whether or not updating events should be raised for this operation.
	 */
	startEdit(rowId: Object, column: Object, raiseEvents?: boolean): boolean;

	/**
	 * Starts editing for adding a new row.
	 *
	 * @param raiseEvents Specifies whether or not updating events should be raised for this operation.
	 */
	startAddRowEdit(raiseEvents?: boolean): boolean;

	/**
	 * Ends the currently active edit mode.
	 *
	 * @param update Specifies if the edit process should accept the current changes. Default is 'false'.
	 * @param raiseEvents Specifies whether or not updating events should be raised for this operation.
	 */
	endEdit(update?: boolean, raiseEvents?: boolean): boolean;

	/**
	 * Finds and returns the key of the first column the editor for which has invalid value.
	 */
	findInvalid(): string;

	/**
	 * Checks if the grid is in edit mode.
	 */
	isEditing(): boolean;

	/**
	 * Gets the editor for a column by the column key. That method can be used only after the editor has been created.
	 *
	 * @param key The key of the column.
	 */
	editorForKey(key: string): Object;

	/**
	 * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
	 *
	 * @param cell Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
	 * @param create Requests to create the editor if it has not been created yet.
	 */
	editorForCell(cell: string, create?: boolean): Object;

	/**
	 * Destroys igGridUpdating.
	 */
	destroy(): Object;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.iggridupdating#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.iggridupdating#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridupdating#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridupdating#options:language) or [locale](ui.iggridupdating#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Shows the delete button for specific row.
	 *
	 * @param row A jQuery object of the targeted row.
	 */
	showDeleteButtonFor(row: Object): void;

	/**
	 * Hides the delete button.
	 */
	hideDeleteButton(): void;
}
interface JQuery {
	data(propertyName: "igGridUpdating"): IgGridUpdatingMethods;
}

interface JQuery {
	igGridUpdating(methodName: "setCellValue", rowId: Object, colKey: string, value: Object): void;
	igGridUpdating(methodName: "updateRow", rowId: Object, values: Object): void;
	igGridUpdating(methodName: "addRow", values: Object): void;
	igGridUpdating(methodName: "deleteRow", rowId: Object): void;
	igGridUpdating(methodName: "startEdit", rowId: Object, column: Object, raiseEvents?: boolean): boolean;
	igGridUpdating(methodName: "startAddRowEdit", raiseEvents?: boolean): boolean;
	igGridUpdating(methodName: "endEdit", update?: boolean, raiseEvents?: boolean): boolean;
	igGridUpdating(methodName: "findInvalid"): string;
	igGridUpdating(methodName: "isEditing"): boolean;
	igGridUpdating(methodName: "editorForKey", key: string): Object;
	igGridUpdating(methodName: "editorForCell", cell: string, create?: boolean): Object;
	igGridUpdating(methodName: "destroy"): Object;
	igGridUpdating(methodName: "changeRegional"): void;
	igGridUpdating(methodName: "changeLocale"): void;
	igGridUpdating(methodName: "showDeleteButtonFor", row: Object): void;
	igGridUpdating(methodName: "hideDeleteButton"): void;

	/**
	 * A list of custom column options that specify editing and validation settings for a specific column.
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "columnSettings"): IgGridUpdatingColumnSetting[];

	/**
	 * A list of custom column options that specify editing and validation settings for a specific column.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridUpdatingColumnSetting[]): void;

	/**
	 * Gets the edit mode.
	 *
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "editMode"): string;

	/**
	 * Sets the edit mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "editMode", optionValue: string): void;

	/**
	 * Gets if deleting rows through the UI is enabled.
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "enableDeleteRow"): boolean;

	/**
	 * Sets if deleting rows through the UI is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "enableDeleteRow", optionValue: boolean): void;

	/**
	 * Gets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "enableAddRow"): boolean;

	/**
	 * Sets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "enableAddRow", optionValue: boolean): void;

	/**
	 * Gets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "validation"): boolean;

	/**
	 * Sets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "validation", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "doneLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "doneLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "doneTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "doneTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "cancelLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "cancelLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "cancelTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "cancelTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "addRowLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "addRowLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "addRowTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "addRowTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "deleteRowLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "deleteRowLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "deleteRowTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "deleteRowTooltip", optionValue: string): void;

	/**
	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "showDoneCancelButtons"): boolean;

	/**
	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "showDoneCancelButtons", optionValue: boolean): void;

	/**
	 * Gets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "enableDataDirtyException"): boolean;

	/**
	 * Sets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "enableDataDirtyException", optionValue: boolean): void;

	/**
	 * Gets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
	 *
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "startEditTriggers"): string|Array<any>;

	/**
	 * Sets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "startEditTriggers", optionValue: string|Array<any>): void;

	/**
	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "horizontalMoveOnEnter"): boolean;

	/**
	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "horizontalMoveOnEnter", optionValue: boolean): void;

	/**
	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "excelNavigationMode"): boolean;

	/**
	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "excelNavigationMode", optionValue: boolean): void;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
	 *
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "saveChangesSuccessHandler"): Function|string;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "saveChangesSuccessHandler", optionValue: Function|string): void;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
	 *
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "saveChangesErrorHandler"): Function|string;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "saveChangesErrorHandler", optionValue: Function|string): void;

	/**
	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
	 *
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "swipeDistance"): string|number;

	/**
	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igGridUpdating(optionLiteral: 'option', optionName: "swipeDistance", optionValue: string|number): void;

	/**
	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "wrapAround"): boolean;

	/**
	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "wrapAround", optionValue: boolean): void;

	/**
	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogOptions"): IgGridUpdatingRowEditDialogOptions;

	/**
	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogOptions", optionValue: IgGridUpdatingRowEditDialogOptions): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
	 *
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Enables/disables feature inheritance for the child layouts in igHierarchicalGrid.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * Enables/disables feature inheritance for the child layouts in igHierarchicalGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
	igGridUpdating(optionLiteral: 'option', optionName: "locale"): IgGridUpdatingLocale;
	igGridUpdating(optionLiteral: 'option', optionName: "locale", optionValue: IgGridUpdatingLocale): void;

	/**
	 * Event fired before row editing begins.
	 * Return false in order to cancel editing.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editRowStarting"): EditRowStartingEvent;

	/**
	 * Event fired before row editing begins.
	 * Return false in order to cancel editing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editRowStarting", optionValue: EditRowStartingEvent): void;

	/**
	 * Event fired after row editing begins.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editRowStarted"): EditRowStartedEvent;

	/**
	 * Event fired after row editing begins.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editRowStarted", optionValue: EditRowStartedEvent): void;

	/**
	 * Event fired before row editing ends.
	 * Return false in order to prevent the grid from exiting edit mode.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editRowEnding"): EditRowEndingEvent;

	/**
	 * Event fired before row editing ends.
	 * Return false in order to prevent the grid from exiting edit mode.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editRowEnding", optionValue: EditRowEndingEvent): void;

	/**
	 * Event fired after row editing ends.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editRowEnded"): EditRowEndedEvent;

	/**
	 * Event fired after row editing ends.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editRowEnded", optionValue: EditRowEndedEvent): void;

	/**
	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
	 * Return false in order to cancel editing.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editCellStarting"): EditCellStartingEvent;

	/**
	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
	 * Return false in order to cancel editing.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editCellStarting", optionValue: EditCellStartingEvent): void;

	/**
	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editCellStarted"): EditCellStartedEvent;

	/**
	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editCellStarted", optionValue: EditCellStartedEvent): void;

	/**
	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editCellEnding"): EditCellEndingEvent;

	/**
	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editCellEnding", optionValue: EditCellEndingEvent): void;

	/**
	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editCellEnded"): EditCellEndedEvent;

	/**
	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "editCellEnded", optionValue: EditCellEndedEvent): void;

	/**
	 * Event fired before adding a new row.
	 * Return false in order to cancel the adding of the new row to the data source.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowAdding"): RowAddingEvent;

	/**
	 * Event fired before adding a new row.
	 * Return false in order to cancel the adding of the new row to the data source.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowAdding", optionValue: RowAddingEvent): void;

	/**
	 * Event fired after adding a new row.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowAdded"): RowAddedEvent;

	/**
	 * Event fired after adding a new row.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowAdded", optionValue: RowAddedEvent): void;

	/**
	 * Event fired before deleting a row.
	 * Return false in order to cancel the row's deletion.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowDeleting"): RowDeletingEvent;

	/**
	 * Event fired before deleting a row.
	 * Return false in order to cancel the row's deletion.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowDeleting", optionValue: RowDeletingEvent): void;

	/**
	 * Event fired after a row is deleted.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowDeleted"): RowDeletedEvent;

	/**
	 * Event fired after a row is deleted.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowDeleted", optionValue: RowDeletedEvent): void;

	/**
	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
	 * Return false in order to prevent the exception.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "dataDirty"): DataDirtyEvent;

	/**
	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
	 * Return false in order to prevent the exception.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "dataDirty", optionValue: DataDirtyEvent): void;

	/**
	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "generatePrimaryKeyValue"): GeneratePrimaryKeyValueEvent;

	/**
	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "generatePrimaryKeyValue", optionValue: GeneratePrimaryKeyValueEvent): void;

	/**
	 * Event fired before the row edit dialog is opened.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeOpen"): RowEditDialogBeforeOpenEvent;

	/**
	 * Event fired before the row edit dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeOpen", optionValue: RowEditDialogBeforeOpenEvent): void;

	/**
	 * Event fired after the row edit dialog is opened.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterOpen"): RowEditDialogAfterOpenEvent;

	/**
	 * Event fired after the row edit dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterOpen", optionValue: RowEditDialogAfterOpenEvent): void;

	/**
	 * Event fired before the row edit dialog is closed.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeClose"): RowEditDialogBeforeCloseEvent;

	/**
	 * Event fired before the row edit dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeClose", optionValue: RowEditDialogBeforeCloseEvent): void;

	/**
	 * Event fired after the row edit dialog is closed.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterClose"): RowEditDialogAfterCloseEvent;

	/**
	 * Event fired after the row edit dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterClose", optionValue: RowEditDialogAfterCloseEvent): void;

	/**
	 * Event fired after the row edit dialog is rendered.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogContentsRendered"): RowEditDialogContentsRenderedEvent;

	/**
	 * Event fired after the row edit dialog is rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogContentsRendered", optionValue: RowEditDialogContentsRenderedEvent): void;
	igGridUpdating(options: IgGridUpdating): JQuery;
	igGridUpdating(optionLiteral: 'option', optionName: string): any;
	igGridUpdating(optionLiteral: 'option', options: IgGridUpdating): JQuery;
	igGridUpdating(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igGridUpdating(methodName: string, ...methodParams: any[]): any;
}
interface ActionExecutingEvent {
	(event: Event, ui: ActionExecutingEventUIParam): void;
}

interface ActionExecutingEventUIParam {}

interface ActionExecutedEvent {
	(event: Event, ui: ActionExecutedEventUIParam): void;
}

interface ActionExecutedEventUIParam {}

interface ToolbarCollapsingEvent {
	(event: Event, ui: ToolbarCollapsingEventUIParam): void;
}

interface ToolbarCollapsingEventUIParam {}

interface ToolbarCollapsedEvent {
	(event: Event, ui: ToolbarCollapsedEventUIParam): void;
}

interface ToolbarCollapsedEventUIParam {}

interface ToolbarExpandingEvent {
	(event: Event, ui: ToolbarExpandingEventUIParam): void;
}

interface ToolbarExpandingEventUIParam {}

interface ToolbarExpandedEvent {
	(event: Event, ui: ToolbarExpandedEventUIParam): void;
}

interface ToolbarExpandedEventUIParam {}

interface CutEvent {
	(event: Event, ui: CutEventUIParam): void;
}

interface CutEventUIParam {}

interface CopyEvent {
	(event: Event, ui: CopyEventUIParam): void;
}

interface CopyEventUIParam {}

interface PasteEvent {
	(event: Event, ui: PasteEventUIParam): void;
}

interface PasteEventUIParam {}

interface UndoEvent {
	(event: Event, ui: UndoEventUIParam): void;
}

interface UndoEventUIParam {}

interface RedoEvent {
	(event: Event, ui: RedoEventUIParam): void;
}

interface RedoEventUIParam {}

interface WorkspaceResizedEvent {
	(event: Event, ui: WorkspaceResizedEventUIParam): void;
}

interface WorkspaceResizedEventUIParam {}

interface IgHtmlEditor {
	/**
	 * Shows/hides the "Formatting" toolbar.
	 *
	 */
	showFormattingToolbar?: boolean;

	/**
	 * Shows/hides the "Text" toolbar.
	 *
	 */
	showTextToolbar?: boolean;

	/**
	 * Shows/hides the "Insert Object" toolbar.
	 *
	 */
	showInsertObjectToolbar?: boolean;

	/**
	 * Shows/hides the "Copy Paste" toolbar.
	 *
	 */
	showCopyPasteToolbar?: boolean;

	/**
	 * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 */
	width?: string|number;

	/**
	 * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 */
	height?: string|number;

	/**
	 * The html editor toolbars list.
	 *
	 */
	toolbarSettings?: any[];

	/**
	 * The html editor custom toolbars list.
	 *
	 */
	customToolbars?: any[];

	/**
	 * The name attribute of the html editor source view.
	 *
	 */
	inputName?: string;

	/**
	 * Used to render inside the html editor as initial content
	 *
	 */
	value?: string;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired after the html editor widget has been rendered.
	 */
	rendered?: RenderedEvent;

	/**
	 * Event fired before the html editor widget is rendered.
	 */
	rendering?: RenderingEvent;

	/**
	 * Event fired before a toolbar item is clicked.
	 */
	actionExecuting?: ActionExecutingEvent;

	/**
	 * Event fired after a toolbar item is clicked.
	 */
	actionExecuted?: ActionExecutedEvent;

	/**
	 * Event fired before a toolbar is collapsed.
	 */
	toolbarCollapsing?: ToolbarCollapsingEvent;

	/**
	 * Event fired after a toolbar is collapsed.
	 */
	toolbarCollapsed?: ToolbarCollapsedEvent;

	/**
	 * Event fired before a toolbar is expanded.
	 */
	toolbarExpanding?: ToolbarExpandingEvent;

	/**
	 * Event fired after a toolbar is expanded.
	 */
	toolbarExpanded?: ToolbarExpandedEvent;

	/**
	 * Event is fired on keyboard cut action.
	 */
	cut?: CutEvent;

	/**
	 * Event is fired on keyboard copy action.
	 */
	copy?: CopyEvent;

	/**
	 * Event is fired on keyboard paste action.
	 */
	paste?: PasteEvent;

	/**
	 * Event is fired on keyboard undo action.
	 */
	undo?: UndoEvent;

	/**
	 * Event is fired on keyboard redo action.
	 */
	redo?: RedoEvent;

	/**
	 * Event is fired after the workspace has been resized
	 */
	workspaceResized?: WorkspaceResizedEvent;

	/**
	 * Option for igHtmlEditor
	 */
	[optionName: string]: any;
}
interface IgHtmlEditorMethods {
	/**
	 * Returns the element on which the widget was instantiated
	 */
	widget(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.ightmleditor#options:language)
	 *             Note that this method is for rare scenarios, use [language](ui.ightmleditor#options:language) or [locale](ui.ightmleditor#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Resizes the height of the workspace
	 */
	resizeWorkspace(): void;

	/**
	 * Gets the content of the html editor.
	 *
	 * @param format Returns the content as html or plain text. Values can be "text" or "html".
	 */
	getContent(format: string): string;

	/**
	 * Sets the content of the html editor.
	 *
	 * @param content The content which will be set.
	 * @param format The content type: "text" or "html".
	 */
	setContent(content: string, format: string): void;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;

	/**
	 * Executes htmleditor commands.
	 *
	 * @param actionName The command name.
	 * @param args Additional parameter for the command.
	 */
	executeAction(actionName: string, args?: Object): void;

	/**
	 * Returns true/false if the editor contents were modified or not.
	 */
	isDirty(): Object;

	/**
	 * Returns the window object associated with the Html Editor's content editable area
	 */
	contentWindow(): Object;

	/**
	 * Returns the document object associated with the Html Editor's content editable area
	 */
	contentDocument(): Object;

	/**
	 * Returns the content editable associated with this Html Editor
	 */
	contentEditable(): Object;

	/**
	 * Returns Selection object that represent the current selection in the content editable
	 */
	selection(): Object;

	/**
	 * Returns Range object that represent the current range in the content editable
	 */
	range(): Object;

	/**
	 * Inserts the provided content at the position of the caret.
	 *
	 * @param element Accepts html string, DOM element or a jQuery object.
	 */
	insertAtCaret(element: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igHtmlEditor"): IgHtmlEditorMethods;
}

interface IgPathFinder {
	items?: any;

	/**
	 * Option for igPathFinder
	 */
	[optionName: string]: any;
}

interface ApplyEvent {
	(event: Event, ui: ApplyEventUIParam): void;
}

interface ApplyEventUIParam {}

interface CancelEvent {
	(event: Event, ui: CancelEventUIParam): void;
}

interface CancelEventUIParam {}

interface ShowEvent {
	(event: Event, ui: ShowEventUIParam): void;
}

interface ShowEventUIParam {}

interface HideEvent {
	(event: Event, ui: HideEventUIParam): void;
}

interface HideEventUIParam {}

interface IgHtmlEditorPopover {
	item?: any;
	target?: any;
	isHidden?: boolean;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;
	apply?: ApplyEvent;
	cancel?: CancelEvent;
	show?: ShowEvent;
	hide?: HideEvent;

	/**
	 * Option for igHtmlEditorPopover
	 */
	[optionName: string]: any;
}
interface IgHtmlEditorPopoverMethods {
	show(item: Object): void;
	hide(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;

	/**
	 * Destroy is part of the jQuery UI widget API and does the following:
	 * 1. Remove custom CSS classes that were added.
	 * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
	 * 3. Unbind all events that were bound.
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igHtmlEditorPopover"): IgHtmlEditorPopoverMethods;
}

interface IgLinkPropertiesDialog {
	item?: any;
	target?: any;
	isHidden?: boolean;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;
	apply?: ApplyEvent;
	cancel?: CancelEvent;
	show?: ShowEvent;
	hide?: HideEvent;

	/**
	 * Option for igLinkPropertiesDialog
	 */
	[optionName: string]: any;
}
interface IgLinkPropertiesDialogMethods {
	show(item: Object): void;
	hide(): void;
}
interface JQuery {
	data(propertyName: "igLinkPropertiesDialog"): IgLinkPropertiesDialogMethods;
}

interface IgTablePropertiesDialog {
	item?: any;
	target?: any;
	isHidden?: boolean;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;
	apply?: ApplyEvent;
	cancel?: CancelEvent;
	show?: ShowEvent;
	hide?: HideEvent;

	/**
	 * Option for igTablePropertiesDialog
	 */
	[optionName: string]: any;
}
interface IgTablePropertiesDialogMethods {
	show(item: Object): void;
	hide(): void;
}
interface JQuery {
	data(propertyName: "igTablePropertiesDialog"): IgTablePropertiesDialogMethods;
}

interface IgImagePropertiesDialog {
	item?: any;
	target?: any;
	isHidden?: boolean;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;
	apply?: ApplyEvent;
	cancel?: CancelEvent;
	show?: ShowEvent;
	hide?: HideEvent;

	/**
	 * Option for igImagePropertiesDialog
	 */
	[optionName: string]: any;
}
interface IgImagePropertiesDialogMethods {
	show(item: Object): void;
	hide(): void;
}
interface JQuery {
	data(propertyName: "igImagePropertiesDialog"): IgImagePropertiesDialogMethods;
}

declare namespace Infragistics {
class SelectionWrapper {
	constructor(NODE: any);
	getSelectedItem(): void;
	getSelectionAsText(): void;
	select(element: Object): void;
	insertElement(element: Object): void;
	execCommand(name: Object, args: Object): void;
	replaceNode(newNode: Object): void;
	insertTable(table: Object): void;
	focus(): void;
}
}
interface IgniteUIStatic {
SelectionWrapper: typeof Infragistics.SelectionWrapper;
}

declare namespace Infragistics {
class ToolbarHelper {
	analyse(el: Object): void;
}
}

interface JQuery {
	igHtmlEditor(methodName: "widget"): void;
	igHtmlEditor(methodName: "changeLocale"): void;
	igHtmlEditor(methodName: "resizeWorkspace"): void;
	igHtmlEditor(methodName: "getContent", format: string): string;
	igHtmlEditor(methodName: "setContent", content: string, format: string): void;
	igHtmlEditor(methodName: "destroy"): void;
	igHtmlEditor(methodName: "executeAction", actionName: string, args?: Object): void;
	igHtmlEditor(methodName: "isDirty"): Object;
	igHtmlEditor(methodName: "contentWindow"): Object;
	igHtmlEditor(methodName: "contentDocument"): Object;
	igHtmlEditor(methodName: "contentEditable"): Object;
	igHtmlEditor(methodName: "selection"): Object;
	igHtmlEditor(methodName: "range"): Object;
	igHtmlEditor(methodName: "insertAtCaret", element: Object): void;
	igHtmlEditor(methodName: "changeGlobalLanguage"): void;
	igHtmlEditor(methodName: "changeGlobalRegional"): void;

	/**
	 * Shows/hides the "Formatting" toolbar.
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "showFormattingToolbar"): boolean;

	/**
	 * Shows/hides the "Formatting" toolbar.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "showFormattingToolbar", optionValue: boolean): void;

	/**
	 * Shows/hides the "Text" toolbar.
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "showTextToolbar"): boolean;

	/**
	 * Shows/hides the "Text" toolbar.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "showTextToolbar", optionValue: boolean): void;

	/**
	 * Shows/hides the "Insert Object" toolbar.
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "showInsertObjectToolbar"): boolean;

	/**
	 * Shows/hides the "Insert Object" toolbar.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "showInsertObjectToolbar", optionValue: boolean): void;

	/**
	 * Shows/hides the "Copy Paste" toolbar.
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "showCopyPasteToolbar"): boolean;

	/**
	 * Shows/hides the "Copy Paste" toolbar.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "showCopyPasteToolbar", optionValue: boolean): void;

	/**
	 * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 */

	igHtmlEditor(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHtmlEditor(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 */

	igHtmlEditor(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHtmlEditor(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * The html editor toolbars list.
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarSettings"): any[];

	/**
	 * The html editor toolbars list.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarSettings", optionValue: any[]): void;

	/**
	 * The html editor custom toolbars list.
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "customToolbars"): any[];

	/**
	 * The html editor custom toolbars list.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "customToolbars", optionValue: any[]): void;

	/**
	 * The name attribute of the html editor source view.
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "inputName"): string;

	/**
	 * The name attribute of the html editor source view.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;

	/**
	 * Used to render inside the html editor as initial content
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "value"): string;

	/**
	 * Used to render inside the html editor as initial content
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "value", optionValue: string): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igHtmlEditor(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHtmlEditor(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired after the html editor widget has been rendered.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Event fired after the html editor widget has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Event fired before the html editor widget is rendered.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Event fired before the html editor widget is rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Event fired before a toolbar item is clicked.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "actionExecuting"): ActionExecutingEvent;

	/**
	 * Event fired before a toolbar item is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "actionExecuting", optionValue: ActionExecutingEvent): void;

	/**
	 * Event fired after a toolbar item is clicked.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "actionExecuted"): ActionExecutedEvent;

	/**
	 * Event fired after a toolbar item is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "actionExecuted", optionValue: ActionExecutedEvent): void;

	/**
	 * Event fired before a toolbar is collapsed.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarCollapsing"): ToolbarCollapsingEvent;

	/**
	 * Event fired before a toolbar is collapsed.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarCollapsing", optionValue: ToolbarCollapsingEvent): void;

	/**
	 * Event fired after a toolbar is collapsed.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarCollapsed"): ToolbarCollapsedEvent;

	/**
	 * Event fired after a toolbar is collapsed.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarCollapsed", optionValue: ToolbarCollapsedEvent): void;

	/**
	 * Event fired before a toolbar is expanded.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarExpanding"): ToolbarExpandingEvent;

	/**
	 * Event fired before a toolbar is expanded.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarExpanding", optionValue: ToolbarExpandingEvent): void;

	/**
	 * Event fired after a toolbar is expanded.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarExpanded"): ToolbarExpandedEvent;

	/**
	 * Event fired after a toolbar is expanded.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "toolbarExpanded", optionValue: ToolbarExpandedEvent): void;

	/**
	 * Event is fired on keyboard cut action.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "cut"): CutEvent;

	/**
	 * Event is fired on keyboard cut action.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "cut", optionValue: CutEvent): void;

	/**
	 * Event is fired on keyboard copy action.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "copy"): CopyEvent;

	/**
	 * Event is fired on keyboard copy action.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "copy", optionValue: CopyEvent): void;

	/**
	 * Event is fired on keyboard paste action.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "paste"): PasteEvent;

	/**
	 * Event is fired on keyboard paste action.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "paste", optionValue: PasteEvent): void;

	/**
	 * Event is fired on keyboard undo action.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "undo"): UndoEvent;

	/**
	 * Event is fired on keyboard undo action.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "undo", optionValue: UndoEvent): void;

	/**
	 * Event is fired on keyboard redo action.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "redo"): RedoEvent;

	/**
	 * Event is fired on keyboard redo action.
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "redo", optionValue: RedoEvent): void;

	/**
	 * Event is fired after the workspace has been resized
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "workspaceResized"): WorkspaceResizedEvent;

	/**
	 * Event is fired after the workspace has been resized
	 *
	 * @optionValue Define event handler function.
	 */
	igHtmlEditor(optionLiteral: 'option', optionName: "workspaceResized", optionValue: WorkspaceResizedEvent): void;
	igHtmlEditor(options: IgHtmlEditor): JQuery;
	igHtmlEditor(optionLiteral: 'option', optionName: string): any;
	igHtmlEditor(optionLiteral: 'option', options: IgHtmlEditor): JQuery;
	igHtmlEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igHtmlEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igPathFinder(optionLiteral: 'option', optionName: "items"): any;
	igPathFinder(optionLiteral: 'option', optionName: "items", optionValue: any): void;
	igPathFinder(options: IgPathFinder): JQuery;
	igPathFinder(optionLiteral: 'option', optionName: string): any;
	igPathFinder(optionLiteral: 'option', options: IgPathFinder): JQuery;
	igPathFinder(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igPathFinder(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igHtmlEditorPopover(methodName: "show", item: Object): void;
	igHtmlEditorPopover(methodName: "hide"): void;
	igHtmlEditorPopover(methodName: "changeLocale", $container: Object): void;
	igHtmlEditorPopover(methodName: "changeGlobalLanguage"): void;
	igHtmlEditorPopover(methodName: "changeGlobalRegional"): void;
	igHtmlEditorPopover(methodName: "destroy"): void;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "item"): any;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "item", optionValue: any): void;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "target"): any;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "target", optionValue: any): void;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "isHidden"): boolean;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "isHidden", optionValue: boolean): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igHtmlEditorPopover(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igHtmlEditorPopover(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "apply"): ApplyEvent;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "apply", optionValue: ApplyEvent): void;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "cancel"): CancelEvent;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "cancel", optionValue: CancelEvent): void;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "show"): ShowEvent;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "show", optionValue: ShowEvent): void;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "hide"): HideEvent;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: "hide", optionValue: HideEvent): void;
	igHtmlEditorPopover(options: IgHtmlEditorPopover): JQuery;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: string): any;
	igHtmlEditorPopover(optionLiteral: 'option', options: IgHtmlEditorPopover): JQuery;
	igHtmlEditorPopover(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igHtmlEditorPopover(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igLinkPropertiesDialog(methodName: "show", item: Object): void;
	igLinkPropertiesDialog(methodName: "hide"): void;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "item"): any;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "item", optionValue: any): void;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "target"): any;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "target", optionValue: any): void;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "isHidden"): boolean;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "isHidden", optionValue: boolean): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "apply"): ApplyEvent;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "apply", optionValue: ApplyEvent): void;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "cancel"): CancelEvent;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "cancel", optionValue: CancelEvent): void;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "show"): ShowEvent;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "show", optionValue: ShowEvent): void;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "hide"): HideEvent;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: "hide", optionValue: HideEvent): void;
	igLinkPropertiesDialog(options: IgLinkPropertiesDialog): JQuery;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: string): any;
	igLinkPropertiesDialog(optionLiteral: 'option', options: IgLinkPropertiesDialog): JQuery;
	igLinkPropertiesDialog(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igLinkPropertiesDialog(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igTablePropertiesDialog(methodName: "show", item: Object): void;
	igTablePropertiesDialog(methodName: "hide"): void;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "item"): any;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "item", optionValue: any): void;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "target"): any;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "target", optionValue: any): void;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "isHidden"): boolean;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "isHidden", optionValue: boolean): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igTablePropertiesDialog(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTablePropertiesDialog(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "apply"): ApplyEvent;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "apply", optionValue: ApplyEvent): void;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "cancel"): CancelEvent;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "cancel", optionValue: CancelEvent): void;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "show"): ShowEvent;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "show", optionValue: ShowEvent): void;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "hide"): HideEvent;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: "hide", optionValue: HideEvent): void;
	igTablePropertiesDialog(options: IgTablePropertiesDialog): JQuery;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: string): any;
	igTablePropertiesDialog(optionLiteral: 'option', options: IgTablePropertiesDialog): JQuery;
	igTablePropertiesDialog(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTablePropertiesDialog(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igImagePropertiesDialog(methodName: "show", item: Object): void;
	igImagePropertiesDialog(methodName: "hide"): void;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "item"): any;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "item", optionValue: any): void;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "target"): any;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "target", optionValue: any): void;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "isHidden"): boolean;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "isHidden", optionValue: boolean): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igImagePropertiesDialog(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igImagePropertiesDialog(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "apply"): ApplyEvent;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "apply", optionValue: ApplyEvent): void;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "cancel"): CancelEvent;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "cancel", optionValue: CancelEvent): void;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "show"): ShowEvent;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "show", optionValue: ShowEvent): void;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "hide"): HideEvent;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: "hide", optionValue: HideEvent): void;
	igImagePropertiesDialog(options: IgImagePropertiesDialog): JQuery;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: string): any;
	igImagePropertiesDialog(optionLiteral: 'option', options: IgImagePropertiesDialog): JQuery;
	igImagePropertiesDialog(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igImagePropertiesDialog(methodName: string, ...methodParams: any[]): any;
}
interface IgLayoutManagerBorderLayout {
	/**
	 * Option specifying the width of the left region, either in px or percentages
	 *
	 */
	leftWidth?: string;

	/**
	 * Option specifying the width of the right region, either in px or percentages
	 *
	 */
	rightWidth?: string;

	/**
	 * Option specifying whether the footer region in the border layout will be hidden or shown
	 *
	 */
	showFooter?: boolean;

	/**
	 * Option specifying whether the header region in the border layout will be hidden or shown
	 *
	 */
	showHeader?: boolean;

	/**
	 * Option specifying whether the left region in the border layout will be hidden or shown
	 *
	 */
	showLeft?: boolean;

	/**
	 * Option specifying whether the right region in the border layout will be hidden or shown
	 *
	 */
	showRight?: boolean;

	/**
	 * Option for IgLayoutManagerBorderLayout
	 */
	[optionName: string]: any;
}

interface IgLayoutManagerGridLayout {
	/**
	 * Specifies the duration of the animations in the layout manager"s grid layout
	 *
	 */
	animationDuration?: number;

	/**
	 * Number of columns in the grid
	 *
	 */
	cols?: number;

	/**
	 * Accepts number, string with height in px, percents,                        or asterisk (*) which will distribute all the height between all the columns equally.
	 *                         It can also accept an array, specifying height for each column. If more than one column
	 *                         has an asterisk value, the remaining height will be equally distributed between these columns.
	 *                     array The column height can be set as an array of heights.
	 *
	 */
	columnHeight?: string|number|Array<any>;

	/**
	 * Accepts number or string with width in px, percents                        or asterisk (*) which will distribute all the width between all the columns equally.
	 *                         It can also accept an array, specifying width for each column. If more than one column
	 *                         has an asterisk value, the remaining width will be equally distributed between these columns.
	 *                     array The column width can be set as an array of widths.
	 *
	 */
	columnWidth?: string|number|Array<any>;

	/**
	 * Specifies the margin left css property for items
	 *
	 */
	marginLeft?: number;

	/**
	 * Specifies the margin top css property for items
	 *
	 */
	marginTop?: number;

	/**
	 * Specifies whether the previous set options should be overriden when setting options
	 *
	 */
	overrideConfigOnSetOption?: boolean;

	/**
	 * Specified whether the items should rearrange to fit in the container when it is resized.
	 *                         Have effect only when fixed columnWidth option is set.
	 *
	 */
	rearrangeItems?: boolean;

	/**
	 * Number of rows in the grid
	 *
	 */
	rows?: number;

	/**
	 * Option for IgLayoutManagerGridLayout
	 */
	[optionName: string]: any;
}

interface IgLayoutManagerItem {
	/**
	 * Column index of the item in the grid
	 *
	 */
	colIndex?: number;

	/**
	 * ColSpan of the item
	 *
	 */
	colSpan?: number;

	/**
	 * Gets/Sets individual item height, either in px or percentage
	 *                         string The default height can be set in pixels (px), %, em and other units.
	 *
	 */
	height?: string;

	/**
	 * Row index of the item in the grid
	 *
	 */
	rowIndex?: number;

	/**
	 * RowSpan of the item
	 *
	 */
	rowSpan?: number;

	/**
	 * Gets/Sets individual item width, either in px or percentage
	 *                         string The default width can be set in pixels (px), %, em and other units.
	 *
	 */
	width?: number;

	/**
	 * Option for IgLayoutManagerItem
	 */
	[optionName: string]: any;
}

interface InternalResizedEvent {
	(event: Event, ui: InternalResizedEventUIParam): void;
}

interface InternalResizedEventUIParam {
	/**
	 * Used to get a reference to the layout manager performing resizing.
	 */
	owner?: any;
}

interface InternalResizingEvent {
	(event: Event, ui: InternalResizingEventUIParam): void;
}

interface InternalResizingEventUIParam {
	/**
	 * Used to get a reference to the layout manager performing resizing.
	 */
	owner?: any;
}

interface ItemRenderedEvent {
	(event: Event, ui: ItemRenderedEventUIParam): void;
}

interface ItemRenderedEventUIParam {
	/**
	 * Used to get reference to the igLayoutManager.
	 */
	owner?: any;

	/**
	 * Used to get a reference of item's settings, such as colspan ,rowspan, etc.
	 */
	itemData?: any;

	/**
	 * Used to get a reference of the item's index, if the layout is flow or vertical
	 */
	index?: any;

	/**
	 * Used to get a reference to the rendered item
	 */
	item?: any;
}

interface ItemRenderingEvent {
	(event: Event, ui: ItemRenderingEventUIParam): void;
}

interface ItemRenderingEventUIParam {
	/**
	 * Used to get reference to the igLayoutManager.
	 */
	owner?: any;

	/**
	 * Used to get a reference of item's settings, such as colspan ,rowspan, etc.
	 */
	itemData?: any;

	/**
	 * Used to get a reference of the item's index, if the layout is flow or vertical
	 */
	index?: any;

	/**
	 * Used to get a reference to the rendered item
	 */
	item?: any;
}

interface IgLayoutManager {
	/**
	 * Options specific to a border layout
	 *
	 */
	borderLayout?: IgLayoutManagerBorderLayout;

	/**
	 * Options specific to grid layout mode
	 *
	 */
	gridLayout?: IgLayoutManagerGridLayout;

	/**
	 * Gets/Sets height of the layout container.
	 *
	 */
	height?: string|number;

	/**
	 * Number of items to render, this is only applicable to layouts: vertical and flow
	 *
	 */
	itemCount?: number;

	/**
	 * An array of item descriptions
	 *                     this assumes the container is empty, and every item
	 *                     is described by rowspan, colspan, etc. - otherwise values of
	 *                     1 are assumed
	 *                     items can have various properties some of which may not be applicable
	 *                     depending on the layoutMode.
	 *                     for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
	 *
	 */
	items?: IgLayoutManagerItem[];

	/**
	 * Defines the layout type
	 *                 grid Column type can be set with grid layout
	 *                 border Column type can be set with border layout
	 *                 flow Column type can be set with flow layout
	 *                 column Column type can be set with column layout
	 *                 vertical Column type can be set with vertical layout
	 *
	 *
	 * Valid values:
	 * "grid"
	 * "border"
	 * "flow"
	 * "column"
	 * "vertical"
	 */
	layoutMode?: any;

	/**
	 * Gets/Sets width of the layout container.
	 *
	 */
	width?: string|number;

	/**
	 * Event fired after items are resized.
	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
	 */
	internalResized?: InternalResizedEvent;

	/**
	 * Event fired before items are resized.
	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
	 */
	internalResizing?: InternalResizingEvent;

	/**
	 * Event fired after an item has been rendered in the container.
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get reference to the igLayoutManager.
	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
	 *                     Use ui.item to get a reference to the rendered item
	 */
	itemRendered?: ItemRenderedEvent;

	/**
	 * Event fired before an item is rendered in the container.
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get reference to the igLayoutManager.
	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
	 *                     Use ui.item to get a reference to the rendered item
	 */
	itemRendering?: ItemRenderingEvent;

	/**
	 * Event fired after all items are rendered.
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get reference to the igLayoutManager.
	 */
	rendered?: RenderedEvent;

	/**
	 * Option for igLayoutManager
	 */
	[optionName: string]: any;
}
interface IgLayoutManagerMethods {
	/**
	 * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
	 *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
	 *
	 * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
	 * @param animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
	 * @param event Indicates the browser even which triggered this action (not API).
	 */
	reflow(forceReflow?: boolean, animationDuration?: number, event?: Object): void;

	/**
	 * Destroy is part of the jQuery UI widget API and does the following:
	 *                     1. Remove custom CSS classes that were added.
	 *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
	 *                     3. Unbind all events that were bound.
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igLayoutManager"): IgLayoutManagerMethods;
}

interface JQuery {
	igLayoutManager(methodName: "reflow", forceReflow?: boolean, animationDuration?: number, event?: Object): void;
	igLayoutManager(methodName: "destroy"): void;

	/**
	 * Options specific to a border layout
	 *
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "borderLayout"): IgLayoutManagerBorderLayout;

	/**
	 * Options specific to a border layout
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "borderLayout", optionValue: IgLayoutManagerBorderLayout): void;

	/**
	 * Options specific to grid layout mode
	 *
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "gridLayout"): IgLayoutManagerGridLayout;

	/**
	 * Options specific to grid layout mode
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "gridLayout", optionValue: IgLayoutManagerGridLayout): void;

	/**
	 * Gets/Sets height of the layout container.
	 *
	 */

	igLayoutManager(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets height of the layout container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igLayoutManager(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Number of items to render, this is only applicable to layouts: vertical and flow
	 *
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "itemCount"): number;

	/**
	 * Number of items to render, this is only applicable to layouts: vertical and flow
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "itemCount", optionValue: number): void;

	/**
	 * An array of item descriptions
	 *                     this assumes the container is empty, and every item
	 *                     is described by rowspan, colspan, etc. - otherwise values of
	 *                     1 are assumed
	 *                     items can have various properties some of which may not be applicable
	 *                     depending on the layoutMode.
	 *                     for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
	 *
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "items"): IgLayoutManagerItem[];

	/**
	 * An array of item descriptions
	 *                     this assumes the container is empty, and every item
	 *                     is described by rowspan, colspan, etc. - otherwise values of
	 *                     1 are assumed
	 *                     items can have various properties some of which may not be applicable
	 *                     depending on the layoutMode.
	 *                     for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "items", optionValue: IgLayoutManagerItem[]): void;

	/**
	 * Defines the layout type
	 *                 grid Column type can be set with grid layout
	 *                 border Column type can be set with border layout
	 *                 flow Column type can be set with flow layout
	 *                 column Column type can be set with column layout
	 *                 vertical Column type can be set with vertical layout
	 *
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "layoutMode"): any;

	/**
	 * Defines the layout type
	 *                 grid Column type can be set with grid layout
	 *                 border Column type can be set with border layout
	 *                 flow Column type can be set with flow layout
	 *                 column Column type can be set with column layout
	 *                 vertical Column type can be set with vertical layout
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "layoutMode", optionValue: any): void;

	/**
	 * Gets/Sets width of the layout container.
	 *
	 */

	igLayoutManager(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets width of the layout container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igLayoutManager(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Event fired after items are resized.
	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "internalResized"): InternalResizedEvent;

	/**
	 * Event fired after items are resized.
	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
	 *
	 * @optionValue Define event handler function.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "internalResized", optionValue: InternalResizedEvent): void;

	/**
	 * Event fired before items are resized.
	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "internalResizing"): InternalResizingEvent;

	/**
	 * Event fired before items are resized.
	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
	 *
	 * @optionValue Define event handler function.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "internalResizing", optionValue: InternalResizingEvent): void;

	/**
	 * Event fired after an item has been rendered in the container.
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get reference to the igLayoutManager.
	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
	 *                     Use ui.item to get a reference to the rendered item
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "itemRendered"): ItemRenderedEvent;

	/**
	 * Event fired after an item has been rendered in the container.
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get reference to the igLayoutManager.
	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
	 *                     Use ui.item to get a reference to the rendered item
	 *
	 * @optionValue Define event handler function.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "itemRendered", optionValue: ItemRenderedEvent): void;

	/**
	 * Event fired before an item is rendered in the container.
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get reference to the igLayoutManager.
	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
	 *                     Use ui.item to get a reference to the rendered item
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "itemRendering"): ItemRenderingEvent;

	/**
	 * Event fired before an item is rendered in the container.
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get reference to the igLayoutManager.
	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
	 *                     Use ui.item to get a reference to the rendered item
	 *
	 * @optionValue Define event handler function.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "itemRendering", optionValue: ItemRenderingEvent): void;

	/**
	 * Event fired after all items are rendered.
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get reference to the igLayoutManager.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Event fired after all items are rendered.
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get reference to the igLayoutManager.
	 *
	 * @optionValue Define event handler function.
	 */
	igLayoutManager(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
	igLayoutManager(options: IgLayoutManager): JQuery;
	igLayoutManager(optionLiteral: 'option', optionName: string): any;
	igLayoutManager(optionLiteral: 'option', options: IgLayoutManager): JQuery;
	igLayoutManager(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igLayoutManager(methodName: string, ...methodParams: any[]): any;
}
interface IgLinearGaugeRange {
	/**
	 * Gets or sets the name of the range.
	 */
	name?: string;

	/**
	 * Gets or sets the brush to use to fill the range.
	 */
	brush?: string;

	/**
	 * Gets or sets the outline to use when rendering the range.
	 */
	outline?: string;

	/**
	 * Gets or sets the value at which the range starts along the scale.
	 */
	startValue?: number;

	/**
	 * Gets or sets the value at which the range ends along the scale.
	 */
	endValue?: number;

	/**
	 * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the inner edge of the range.
	 * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
	 */
	innerStartExtent?: number;

	/**
	 * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the inner edge of the range.
	 * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
	 */
	innerEndExtent?: number;

	/**
	 * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the outer edge of the range.
	 * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
	 */
	outerStartExtent?: number;

	/**
	 * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the outer edge of the range.
	 * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
	 */
	outerEndExtent?: number;

	/**
	 * Gets or sets the stroke thickness to use when rendering this range's outline.
	 */
	strokeThickness?: number;

	/**
	 * Option for IgLinearGaugeRange
	 */
	[optionName: string]: any;
}

interface IgLinearGauge {
	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * Gets or sets the scale ranges to render on the linear gauge.
	 */
	ranges?: IgLinearGaugeRange[];

	/**
	 * Gets or sets the ranges' tooltip template.
	 */
	rangeToolTipTemplate?: string;

	/**
	 * Gets or sets the needle's tooltip template.
	 */
	needleToolTipTemplate?: string;

	/**
	 * Gets or sets the orientation of the scale.
	 *
	 * Valid values:
	 * "horizontal" The scale has a horizontal orientation.
	 * "vertical" The scale has a vertical orientation.
	 */
	orientation?: string;

	/**
	 * Gets or sets a collection of brushes to be used as the palette for linear gauge ranges.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	rangeBrushes?: any;

	/**
	 * Gets or sets a collection of brushes to be used as the palette for linear gauge outlines.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	rangeOutlines?: any;

	/**
	 * Gets or sets the minimum value of the scale.
	 */
	minimumValue?: number;

	/**
	 * Gets or sets the maximum value of the scale.
	 */
	maximumValue?: number;

	/**
	 * Gets or sets the value at which the needle is positioned.
	 */
	value?: number;

	/**
	 * Gets or sets the shape to use when rendering the needle from a number of options.
	 *
	 * Valid values:
	 * "custom" A custom user defined needle shape.
	 * "rectangle" A needle shaped like a rectangle.
	 * "triangle" A needle shaped like a triangle.
	 * "needle" A needle shaped like a needle.
	 * "trapezoid" A needle shaped like a trapezoid.
	 */
	needleShape?: string;

	/**
	 * Gets or sets the name used for needle.
	 */
	needleName?: string;

	/**
	 * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	rangeInnerExtent?: number;

	/**
	 * Gets or sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	scaleInnerExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	rangeOuterExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	scaleOuterExtent?: number;

	/**
	 * Gets or sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	needleInnerExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	needleOuterExtent?: number;

	/**
	 * Gets or sets the width of the needle's inner base.
	 */
	needleInnerBaseWidth?: number;

	/**
	 * Gets or sets the width of the needle's outer base.
	 */
	needleOuterBaseWidth?: number;

	/**
	 * Gets or sets the width of the needle's inner point.
	 */
	needleInnerPointWidth?: number;

	/**
	 * Gets or sets the width of the needle's outer point.
	 */
	needleOuterPointWidth?: number;

	/**
	 * Gets or sets the extent of the needle's inner point.
	 */
	needleInnerPointExtent?: number;

	/**
	 * Gets or sets the extent of the needle's outer point.
	 */
	needleOuterPointExtent?: number;

	/**
	 * Gets or sets the interval to use for the scale.
	 */
	interval?: number;

	/**
	 * A value to start adding tickmarks, added to the scale's MinimumValue.
	 */
	ticksPostInitial?: number;

	/**
	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
	 */
	ticksPreTerminal?: number;

	/**
	 * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
	 */
	labelInterval?: number;

	/**
	 * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
	 * Values further from zero than 1 can be used to hide the labels of the linear gauge.
	 */
	labelExtent?: number;

	/**
	 * A value to start adding labels, added to the scale's MinimumValue.
	 */
	labelsPostInitial?: number;

	/**
	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
	 */
	labelsPreTerminal?: number;

	/**
	 * Gets or sets the number of minor tickmarks to place between major tickmarks.
	 */
	minorTickCount?: number;

	/**
	 * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	tickStartExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	tickEndExtent?: number;

	/**
	 * Gets or sets the stroke thickness to use when rendering ticks.
	 */
	tickStrokeThickness?: number;

	/**
	 * Gets or sets the brush to use for the major tickmarks.
	 */
	tickBrush?: string;

	/**
	 * Gets or sets the brush to use for the label font.
	 */
	fontBrush?: string;

	/**
	 * Gets or sets the needle breadth.
	 */
	needleBreadth?: number;

	/**
	 * Gets or sets the brush to use for needle element.
	 */
	needleBrush?: string;

	/**
	 * Gets or sets the brush to use for the outline of needle element.
	 */
	needleOutline?: string;

	/**
	 * Gets or sets the stroke thickness to use when rendering single actual value element.
	 */
	needleStrokeThickness?: number;

	/**
	 * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	minorTickStartExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	minorTickEndExtent?: number;

	/**
	 * Gets or sets the stroke thickness to use when rendering minor ticks.
	 */
	minorTickStrokeThickness?: number;

	/**
	 * Gets or sets the brush to use for the minor tickmarks.
	 */
	minorTickBrush?: string;

	/**
	 * Gets or sets a value indicating whether the scale is inverted.
	 * When the scale is inverted the direction in which the scale values increase is right to left.
	 */
	isScaleInverted?: boolean;

	/**
	 * Gets or sets the brush to use to fill the backing of the linear gauge.
	 */
	backingBrush?: string;

	/**
	 * Gets or sets the brush to use for the outline of the backing.
	 */
	backingOutline?: string;

	/**
	 * Gets or sets the stroke thickness of the backing outline.
	 */
	backingStrokeThickness?: number;

	/**
	 * Gets or sets the inner extent of the linear gauge backing.
	 */
	backingInnerExtent?: number;

	/**
	 * Gets or sets the outer extent of the linear gauge backing.
	 */
	backingOuterExtent?: number;

	/**
	 * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	scaleStartExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	scaleEndExtent?: number;

	/**
	 * Gets or sets the brush to use to fill the scale of the linear gauge.
	 */
	scaleBrush?: string;

	/**
	 * Gets or sets the brush to use for the outline of the scale.
	 */
	scaleOutline?: string;

	/**
	 * Gets or sets the stroke thickness of the scale outline.
	 */
	scaleStrokeThickness?: number;

	/**
	 * Gets or sets whether needle dragging is enabled or not.
	 */
	isNeedleDraggingEnabled?: boolean;

	/**
	 * Gets or sets the number of milliseconds over which changes to the linear gauge should be animated.
	 */
	transitionDuration?: number;

	/**
	 * Gets or sets the time in milliseconds that tooltip appearance is delayed with.
	 */
	showToolTipTimeout?: number;

	/**
	 * Gets or sets a value indicating whether tooltips are enabled.
	 */
	showToolTip?: boolean;

	/**
	 * Gets or sets the font.
	 */
	font?: string;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is raised when a label of the the gauge is formatted.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
	 * Use ui.value to obtain the value on the the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 */
	formatLabel?: FormatLabelEvent;

	/**
	 * Event which is raised when a label of the linear gauge is aligned along the scale.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
	 * Use ui.value to obtain the value on the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 * Use ui.width to obtain the width of the label.
	 * Use ui.height to obtain the height of the label.
	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
	 */
	alignLabel?: AlignLabelEvent;

	/**
	 * Occurs when the Value property changes.
	 */
	valueChanged?: ValueChangedEvent;

	/**
	 * Option for igLinearGauge
	 */
	[optionName: string]: any;
}
interface IgLinearGaugeMethods {
	/**
	 * Returns a string containing the names of all the ranges delimited with a \n symbol.
	 */
	getRangeNames(): string;

	/**
	 * Adds a new range to the linear gauge.
	 *
	 * @param value The range object to be added.
	 */
	addRange(value: Object): void;

	/**
	 * Removes a range from the linear gauge.
	 *
	 * @param value A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
	 */
	removeRange(value: Object): void;

	/**
	 * Updates the specified range of the linear gauge.
	 *
	 * @param value The range object to be updated.
	 */
	updateRange(value: Object): void;

	/**
	 * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
	 *
	 * @param x
	 * @param y
	 */
	getValueForPoint(x: Object, y: Object): number;

	/**
	 * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
	 *
	 * @param x The x coordinate of the point.
	 * @param y The y coordinate of the point.
	 */
	needleContainsPoint(x: number, y: number): void;

	/**
	 * Returns information about how the linear gauge is rendered.
	 */
	exportVisualData(): Object;

	/**
	 * Causes all pending changes of the linear gauge e.g. by changed property values to be rendered immediately.
	 */
	flush(): void;

	/**
	 * Destroys widget.
	 */
	destroy(): void;

	/**
	 * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
	 */
	styleUpdated(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igLinearGauge"): IgLinearGaugeMethods;
}

interface JQuery {
	igLinearGauge(methodName: "getRangeNames"): string;
	igLinearGauge(methodName: "addRange", value: Object): void;
	igLinearGauge(methodName: "removeRange", value: Object): void;
	igLinearGauge(methodName: "updateRange", value: Object): void;
	igLinearGauge(methodName: "getValueForPoint", x: Object, y: Object): number;
	igLinearGauge(methodName: "needleContainsPoint", x: number, y: number): void;
	igLinearGauge(methodName: "exportVisualData"): Object;
	igLinearGauge(methodName: "flush"): void;
	igLinearGauge(methodName: "destroy"): void;
	igLinearGauge(methodName: "styleUpdated"): void;
	igLinearGauge(methodName: "changeLocale", $container: Object): void;
	igLinearGauge(methodName: "changeGlobalLanguage"): void;
	igLinearGauge(methodName: "changeGlobalRegional"): void;

	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets  the scale ranges to render on the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "ranges"): IgLinearGaugeRange[];

	/**
	 * Sets the scale ranges to render on the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "ranges", optionValue: IgLinearGaugeRange[]): void;

	/**
	 * Gets  the ranges' tooltip template.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeToolTipTemplate"): string;

	/**
	 * Sets the ranges' tooltip template.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeToolTipTemplate", optionValue: string): void;

	/**
	 * Gets  the needle's tooltip template.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleToolTipTemplate"): string;

	/**
	 * Sets the needle's tooltip template.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleToolTipTemplate", optionValue: string): void;

	/**
	 * Gets  the orientation of the scale.
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "orientation"): string;

	/**
	 * Sets the orientation of the scale.
	 *
	 * @optionValue New value to be set.
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "orientation", optionValue: string): void;

	/**
	 * Gets  a collection of brushes to be used as the palette for linear gauge ranges.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeBrushes"): any;

	/**
	 * Sets a collection of brushes to be used as the palette for linear gauge ranges.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeBrushes", optionValue: any): void;

	/**
	 * Gets  a collection of brushes to be used as the palette for linear gauge outlines.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeOutlines"): any;

	/**
	 * Sets a collection of brushes to be used as the palette for linear gauge outlines.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeOutlines", optionValue: any): void;

	/**
	 * Gets  the minimum value of the scale.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minimumValue"): number;

	/**
	 * Sets the minimum value of the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minimumValue", optionValue: number): void;

	/**
	 * Gets  the maximum value of the scale.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "maximumValue"): number;

	/**
	 * Sets the maximum value of the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "maximumValue", optionValue: number): void;

	/**
	 * Gets  the value at which the needle is positioned.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "value"): number;

	/**
	 * Sets the value at which the needle is positioned.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "value", optionValue: number): void;

	/**
	 * Gets  the shape to use when rendering the needle from a number of options.
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "needleShape"): string;

	/**
	 * Sets the shape to use when rendering the needle from a number of options.
	 *
	 * @optionValue New value to be set.
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "needleShape", optionValue: string): void;

	/**
	 * Gets  the name used for needle.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleName"): string;

	/**
	 * Sets the name used for needle.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleName", optionValue: string): void;

	/**
	 * Gets  the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeInnerExtent"): number;

	/**
	 * Sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeInnerExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleInnerExtent"): number;

	/**
	 * Sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleInnerExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeOuterExtent"): number;

	/**
	 * Sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "rangeOuterExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleOuterExtent"): number;

	/**
	 * Sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleOuterExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleInnerExtent"): number;

	/**
	 * Sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleInnerExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOuterExtent"): number;

	/**
	 * Sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOuterExtent", optionValue: number): void;

	/**
	 * Gets  the width of the needle's inner base.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleInnerBaseWidth"): number;

	/**
	 * Sets the width of the needle's inner base.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleInnerBaseWidth", optionValue: number): void;

	/**
	 * Gets  the width of the needle's outer base.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOuterBaseWidth"): number;

	/**
	 * Sets the width of the needle's outer base.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOuterBaseWidth", optionValue: number): void;

	/**
	 * Gets  the width of the needle's inner point.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleInnerPointWidth"): number;

	/**
	 * Sets the width of the needle's inner point.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleInnerPointWidth", optionValue: number): void;

	/**
	 * Gets  the width of the needle's outer point.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOuterPointWidth"): number;

	/**
	 * Sets the width of the needle's outer point.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOuterPointWidth", optionValue: number): void;

	/**
	 * Gets  the extent of the needle's inner point.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleInnerPointExtent"): number;

	/**
	 * Sets the extent of the needle's inner point.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleInnerPointExtent", optionValue: number): void;

	/**
	 * Gets  the extent of the needle's outer point.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOuterPointExtent"): number;

	/**
	 * Sets the extent of the needle's outer point.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOuterPointExtent", optionValue: number): void;

	/**
	 * Gets  the interval to use for the scale.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "interval"): number;

	/**
	 * Sets the interval to use for the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "interval", optionValue: number): void;

	/**
	 * A value to start adding tickmarks, added to the scale's MinimumValue.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "ticksPostInitial"): number;

	/**
	 * A value to start adding tickmarks, added to the scale's MinimumValue.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "ticksPostInitial", optionValue: number): void;

	/**
	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "ticksPreTerminal"): number;

	/**
	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "ticksPreTerminal", optionValue: number): void;

	/**
	 * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "labelInterval"): number;

	/**
	 * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "labelInterval", optionValue: number): void;

	/**
	 * Gets  the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
	 * Values further from zero than 1 can be used to hide the labels of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "labelExtent"): number;

	/**
	 * Sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
	 * Values further from zero than 1 can be used to hide the labels of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "labelExtent", optionValue: number): void;

	/**
	 * A value to start adding labels, added to the scale's MinimumValue.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "labelsPostInitial"): number;

	/**
	 * A value to start adding labels, added to the scale's MinimumValue.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "labelsPostInitial", optionValue: number): void;

	/**
	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "labelsPreTerminal"): number;

	/**
	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "labelsPreTerminal", optionValue: number): void;

	/**
	 * Gets  the number of minor tickmarks to place between major tickmarks.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickCount"): number;

	/**
	 * Sets the number of minor tickmarks to place between major tickmarks.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickCount", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "tickStartExtent"): number;

	/**
	 * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "tickStartExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "tickEndExtent"): number;

	/**
	 * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "tickEndExtent", optionValue: number): void;

	/**
	 * Gets  the stroke thickness to use when rendering ticks.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "tickStrokeThickness"): number;

	/**
	 * Sets the stroke thickness to use when rendering ticks.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "tickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the brush to use for the major tickmarks.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "tickBrush"): string;

	/**
	 * Sets the brush to use for the major tickmarks.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "tickBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the label font.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "fontBrush"): string;

	/**
	 * Sets the brush to use for the label font.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "fontBrush", optionValue: string): void;

	/**
	 * Gets  the needle breadth.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleBreadth"): number;

	/**
	 * Sets the needle breadth.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleBreadth", optionValue: number): void;

	/**
	 * Gets  the brush to use for needle element.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleBrush"): string;

	/**
	 * Sets the brush to use for needle element.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the outline of needle element.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOutline"): string;

	/**
	 * Sets the brush to use for the outline of needle element.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleOutline", optionValue: string): void;

	/**
	 * Gets  the stroke thickness to use when rendering single actual value element.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleStrokeThickness"): number;

	/**
	 * Sets the stroke thickness to use when rendering single actual value element.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "needleStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickStartExtent"): number;

	/**
	 * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickStartExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickEndExtent"): number;

	/**
	 * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickEndExtent", optionValue: number): void;

	/**
	 * Gets  the stroke thickness to use when rendering minor ticks.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickStrokeThickness"): number;

	/**
	 * Sets the stroke thickness to use when rendering minor ticks.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the brush to use for the minor tickmarks.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickBrush"): string;

	/**
	 * Sets the brush to use for the minor tickmarks.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "minorTickBrush", optionValue: string): void;

	/**
	 * Gets  a value indicating whether the scale is inverted.
	 * When the scale is inverted the direction in which the scale values increase is right to left.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "isScaleInverted"): boolean;

	/**
	 * Sets a value indicating whether the scale is inverted.
	 * When the scale is inverted the direction in which the scale values increase is right to left.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "isScaleInverted", optionValue: boolean): void;

	/**
	 * Gets  the brush to use to fill the backing of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingBrush"): string;

	/**
	 * Sets the brush to use to fill the backing of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the outline of the backing.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingOutline"): string;

	/**
	 * Sets the brush to use for the outline of the backing.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingOutline", optionValue: string): void;

	/**
	 * Gets  the stroke thickness of the backing outline.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingStrokeThickness"): number;

	/**
	 * Sets the stroke thickness of the backing outline.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the inner extent of the linear gauge backing.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingInnerExtent"): number;

	/**
	 * Sets the inner extent of the linear gauge backing.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingInnerExtent", optionValue: number): void;

	/**
	 * Gets  the outer extent of the linear gauge backing.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingOuterExtent"): number;

	/**
	 * Sets the outer extent of the linear gauge backing.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "backingOuterExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleStartExtent"): number;

	/**
	 * Sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleStartExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleEndExtent"): number;

	/**
	 * Sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleEndExtent", optionValue: number): void;

	/**
	 * Gets  the brush to use to fill the scale of the linear gauge.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleBrush"): string;

	/**
	 * Sets the brush to use to fill the scale of the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the outline of the scale.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleOutline"): string;

	/**
	 * Sets the brush to use for the outline of the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleOutline", optionValue: string): void;

	/**
	 * Gets  the stroke thickness of the scale outline.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleStrokeThickness"): number;

	/**
	 * Sets the stroke thickness of the scale outline.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "scaleStrokeThickness", optionValue: number): void;

	/**
	 * Gets  whether needle dragging is enabled or not.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "isNeedleDraggingEnabled"): boolean;

	/**
	 * Sets whether needle dragging is enabled or not.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "isNeedleDraggingEnabled", optionValue: boolean): void;

	/**
	 * Gets  the number of milliseconds over which changes to the linear gauge should be animated.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "transitionDuration"): number;

	/**
	 * Sets the number of milliseconds over which changes to the linear gauge should be animated.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;

	/**
	 * Gets  the time in milliseconds that tooltip appearance is delayed with.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "showToolTipTimeout"): number;

	/**
	 * Sets the time in milliseconds that tooltip appearance is delayed with.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "showToolTipTimeout", optionValue: number): void;

	/**
	 * Gets  a value indicating whether tooltips are enabled.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "showToolTip"): boolean;

	/**
	 * Sets a value indicating whether tooltips are enabled.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "showToolTip", optionValue: boolean): void;

	/**
	 * Gets  the font.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "font"): string;

	/**
	 * Sets the font.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "font", optionValue: string): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igLinearGauge(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is raised when a label of the the gauge is formatted.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
	 * Use ui.value to obtain the value on the the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "formatLabel"): FormatLabelEvent;

	/**
	 * Event which is raised when a label of the the gauge is formatted.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
	 * Use ui.value to obtain the value on the the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 *
	 * @optionValue Define event handler function.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "formatLabel", optionValue: FormatLabelEvent): void;

	/**
	 * Event which is raised when a label of the linear gauge is aligned along the scale.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
	 * Use ui.value to obtain the value on the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 * Use ui.width to obtain the width of the label.
	 * Use ui.height to obtain the height of the label.
	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "alignLabel"): AlignLabelEvent;

	/**
	 * Event which is raised when a label of the linear gauge is aligned along the scale.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
	 * Use ui.value to obtain the value on the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 * Use ui.width to obtain the width of the label.
	 * Use ui.height to obtain the height of the label.
	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
	 *
	 * @optionValue Define event handler function.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "alignLabel", optionValue: AlignLabelEvent): void;

	/**
	 * Occurs when the Value property changes.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "valueChanged"): ValueChangedEvent;

	/**
	 * Occurs when the Value property changes.
	 *
	 * @optionValue New value to be set.
	 */
	igLinearGauge(optionLiteral: 'option', optionName: "valueChanged", optionValue: ValueChangedEvent): void;
	igLinearGauge(options: IgLinearGauge): JQuery;
	igLinearGauge(optionLiteral: 'option', optionName: string): any;
	igLinearGauge(optionLiteral: 'option', options: IgLinearGauge): JQuery;
	igLinearGauge(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igLinearGauge(methodName: string, ...methodParams: any[]): any;
}
interface IgMapCrosshairPoint {
	/**
	 * The x coordinate.
	 */
	x?: number;

	/**
	 * The y coordinate.
	 */
	y?: number;

	/**
	 * Option for IgMapCrosshairPoint
	 */
	[optionName: string]: any;
}

interface IgMapBackgroundContent {
	/**
	 * Type of the background content for the map.
	 *
	 * Valid values:
	 * "openStreet" Specify the background content to display OpenStreetMap geographic data. Set as default.
	 * "cloudMade"  Specify the background content to display CloudMade geographic data.
	 * "bing"  Specify the background content to BingMaps geographic data.
	 */
	type?: string;

	/**
	 * Gets or sets the key.
	 */
	key?: string;

	/**
	 * Gets or sets the parameter.
	 */
	parameter?: string;

	/**
	 * Gets or sets the map tile image uri.
	 *                 For Bing Maps this is populated by bing imagery.
	 *                 For Open Street Map this option can accept custom URL for the tiles. Default is: 'tile.openstreetmap.org/{Z}/{X}/{Y}.png'. No protocol set means that 'http://' or 'https://' will be prepended automatically depending on the hosting site protocol. {Z} - denotes tile zoom, {X} - denotes tile horizontal position, {Y} - denotes tile vertical position.
	 */
	tilePath?: string;

	/**
	 * Gets or sets the type of the imagery.
	 */
	imagerySet?: string;

	/**
	 * Gets or sets the bing maps url
	 */
	bingUrl?: string;

	/**
	 * Option for IgMapBackgroundContent
	 */
	[optionName: string]: any;
}

interface IgMapSeries {
	/**
	 * Type of the series.
	 *
	 * Valid values:
	 * "geographicSymbolSeries" Specify the series as geographic Symbol Series series.
	 * "geographicPolyLine" Specify the series as geographic Polyline series.
	 * "geographicScatterArea" Specify the series as geographic Scatter Area series.
	 * "geographicShape" Specify the series as geographic Shape series.
	 * "geographicContourLine" Specify the series as geographic Contour Line series.
	 * "geographicHighDensityScatter" Specify the series as geographic High Density Scatter series.
	 * "geographicProportionalSymbol" Specify the series as geographic Proportional Symbol series.
	 */
	type?: string;

	/**
	 * The unique identifier of the series.
	 */
	name?: string;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 */
	dataSource?: any;

	/**
	 * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Set to true in order to have an existing series removed from the map, by name
	 */
	remove?: boolean;

	/**
	 * Whether the map should render a tooltip.
	 */
	showTooltip?: boolean;

	/**
	 * The triangulated file source URI or an instance of $.ig.ShapeDataSource.
	 */
	shapeDataSource?: string;

	/**
	 * String The database source URI.
	 */
	databaseSource?: string;

	/**
	 * The triangulated file source URI or an instance of $.ig.TriangulationDataSource.
	 */
	triangulationDataSource?: string;

	/**
	 * Gets or sets the LegendItemBadgeTemplate property.
	 * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
	 * the series object itself.
	 * The provided object should have properties called render and optionally measure.
	 * These are functions which will be called that will be called to handle the user specified custom rendering.
	 * measure will be passed an object that looks like this:
	 * {
	 * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 * width: [if value is present, specifies the available width, user may set to desired width for content],
	 * height: [if value is present, specifies the available height, user may set to desired height for content],
	 * isConstant: [user should set to true if desired with and height will always be the same for this template],
	 * data: [if present, represents the contextual data for this template]
	 * }
	 * render will be passed an object that looks like this:
	 * {
	 * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 * xPosition: [if present, specifies the x position at which to render the content],
	 * yPosition: [if present, specifies the y position at which to render the content],
	 * availableWidth: [if present, specifies the available width in which to render the content],
	 * availableHeight: [if present, specifies the available height in which to render the content],
	 * data: [if present, specifies the data that is in context for this content],
	 * isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
	 * }
	 */
	legendItemBadgeTemplate?: any;

	/**
	 * Gets or sets the LegendItemTemplate property.
	 * The legend item control content is created according to the LegendItemTemplate on-demand by
	 * the series object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	legendItemTemplate?: any;

	/**
	 * Gets or sets the DiscreteLegendItemTemplate property.
	 * The legend item control content is created according to the DiscreteLegendItemTemplate on-demand by
	 * the series object itself.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	discreteLegendItemTemplate?: any;

	/**
	 * Gets or sets the duration of the current series's morph.
	 */
	transitionDuration?: number;

	/**
	 * Gets or sets the current series object's rendering resolution.
	 */
	resolution?: number;

	/**
	 * Gets or sets the Title property.
	 * The legend item control is created according to the Title on-demand by
	 * the series object itself.
	 */
	title?: string;

	/**
	 * Gets or sets the brush to use for the series.
	 */
	brush?: string;

	/**
	 * Gets or sets the brush to use for the outline of the series.
	 * Some series types, such as LineSeries, do not display outlines.
	 */
	outline?: string;

	/**
	 * Gets or sets the width of the current series object's line thickness.
	 */
	thickness?: number;

	/**
	 * The source of triangulation data.
	 * This property is optional.  If it is left as null, the triangulation will be created based on the items in the data source.  Triangulation is a demanding operation, so the runtime performance will be better when specifying a TriangulationSource, especially when a large number of data items are present.
	 */
	trianglesSource?: any;

	/**
	 * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the first vertex point in the data source.
	 */
	triangleVertexMemberPath1?: string;

	/**
	 * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the second vertex point in the data source.
	 */
	triangleVertexMemberPath2?: string;

	/**
	 * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the third vertex point in the data source.
	 */
	triangleVertexMemberPath3?: string;

	/**
	 * The ColorScale used to resolve the color values of points in the series.
	 */
	colorScale?: any;

	/**
	 * The name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.
	 */
	colorMemberPath?: string;

	/**
	 * The minimum scale at which this series becomes visible.
	 * The default value for this property is 1.0, which means the series will always be visible.  At a VisibleFromScale setting of 0.0, the series will never be visible.  At a VisibleFromScale setting of 0.5, the series will be visible as long as the map is zoomed in to at least 200%.
	 */
	visibleFromScale?: number;

	/**
	 * The name of the property of data source items which contains the longitude coordinate of the symbol.
	 */
	longitudeMemberPath?: string;

	/**
	 * The name of the property of data source items which contains the latitude coordinate of the symbol.
	 */
	latitudeMemberPath?: string;

	/**
	 * Gets or sets the marker type for the current series object.If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
	 *
	 *
	 * Valid values:
	 * "unset"
	 * "none"
	 * "automatic"
	 * "circle"
	 * "triangle"
	 * "pyramid"
	 * "square"
	 * "diamond"
	 * "pentagon"
	 * "hexagon"
	 * "tetragram"
	 * "pentagram"
	 * "hexagram"
	 */
	markerType?: string;

	/**
	 * Gets or sets the MarkerTemplate for the current series object.
	 * The provided object should have properties called render and optionally measure.
	 * These are functions which will be called that will be called to handle the user specified custom rendering.
	 * measure will be passed an object that looks like this:
	 * {
	 * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 * width: [if value is present, specifies the available width, user may set to desired width for content],
	 * height: [if value is present, specifies the available height, user may set to desired height for content],
	 * isConstant: [user should set to true if desired with and height will always be the same for this template],
	 * data: [if present, represents the contextual data for this template]
	 * }
	 * render will be passed an object that looks like this:
	 * {
	 * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
	 * xPosition: [if present, specifies the x position at which to render the content],
	 * yPosition: [if present, specifies the y position at which to render the content],
	 * availableWidth: [if present, specifies the available width in which to render the content],
	 * availableHeight: [if present, specifies the available height in which to render the content],
	 * data: [if present, specifies the data that is in context for this content],
	 * isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
	 * }
	 */
	markerTemplate?: any;

	/**
	 * The name of the property on data source items which, for each shape, contains a list of points to be converted to a polygon.
	 * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.
	 */
	shapeMemberPath?: string;

	/**
	 * The StyleSelector which is used to select a style for each Shape.
	 */
	shapeStyleSelector?: any;

	/**
	 * The default style to apply to all Shapes in the series.
	 */
	shapeStyle?: any;

	/**
	 * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
	 */
	markerBrush?: string;

	/**
	 * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
	 */
	markerOutline?: string;

	/**
	 * Gets or sets the MarkerCollisionAvoidance
	 *
	 * Valid values:
	 * "none" No collision avoidance is attempted.
	 * "omit" Markers that collide will be omitted.
	 * "fade" Markers that collide will be faded in opacity.
	 * "omitAndShift" Markers that collide may be shifted or omitted.
	 */
	markerCollisionAvoidance?: string;

	/**
	 * The ValueBrushScale to use when determining Brushes for each Shape, based on the values found in FillMemberPath.
	 */
	fillScale?: any;

	/**
	 * The name of the property on data source items which contains a numeric value to convert to a Brush using the FillScale.
	 */
	fillMemberPath?: string;

	/**
	 * Gets or sets the trend type for the current scatter series.
	 *
	 * Valid values:
	 * "none" No trendline should display.
	 * "linearFit" Linear fit.
	 * "quadraticFit" Quadratic polynomial fit.
	 * "cubicFit" Cubic polynomial fit.
	 * "quarticFit" Quartic polynomial fit.
	 * "quinticFit" Quintic polynomial fit.
	 * "logarithmicFit" Logarithmic fit.
	 * "exponentialFit" Exponential fit.
	 * "powerLawFit" Powerlaw fit.
	 * "simpleAverage" Simple moving average.
	 * "exponentialAverage" Exponential moving average.
	 * "modifiedAverage" Modified moving average.
	 * "cumulativeAverage" Cumulative moving average.
	 * "weightedAverage" Weighted moving average.
	 */
	trendLineType?: string;

	/**
	 * Gets or sets the brush to use to draw the trend line.
	 */
	trendLineBrush?: string;

	/**
	 * Gets or sets the thickness of the current scatter series object's trend line.
	 */
	trendLineThickness?: number;

	/**
	 * Gets or sets the moving average period for the current scatter series object.
	 * The typical, and initial, value for trend line period is 7.
	 */
	trendLinePeriod?: number;

	/**
	 * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.
	 */
	trendLineZIndex?: number;

	/**
	 * Gets or sets the maximum number of markerItems displayed by the current series.
	 * If more than the specified number of markerItems are visible, the series will automatically
	 * choose a representative set.
	 */
	maximumMarkers?: number;

	/**
	 * Gets or sets the radius mapping property for the current series object.
	 */
	radiusMemberPath?: string;

	/**
	 * Gets or sets the radius size scale for the bubbles.
	 */
	radiusScale?: any;

	/**
	 * Gets or sets the Label mapping property for the current series object.
	 */
	labelMemberPath?: string;

	/**
	 * Gets or sets whether to clip the series to the bounds.
	 * Setting this to true can affect performance.
	 */
	clipSeriesToBounds?: boolean;

	/**
	 * Gets or sets the item path that provides the values for the current series.
	 */
	valueMemberPath?: string;

	/**
	 * Determines how unknown values will be plotted on the map. Null and Double.NaN are two examples of unknown values.
	 *
	 * Valid values:
	 * "linearInterpolate" Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
	 * "dontPlot" Do not plot the unknown value on the map.
	 */
	unknownValuePlotting?: string;

	/**
	 * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
	 */
	angleMemberPath?: number;

	/**
	 * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian
	 * spiral based interpolation.
	 */
	useCartesianInterpolation?: boolean;

	/**
	 * Gets or sets the Stiffness property.
	 */
	stiffness?: number;

	/**
	 * Gets or sets the brush to use for negative portions of the series.
	 */
	negativeBrush?: string;

	/**
	 * Gets or sets the type of spline to be rendered.
	 *
	 * Valid values:
	 * "natural" Calculates the spline using a natural spline calculation formula.
	 * "clamped" Calculated the spline using a clamped spline calculation formula.
	 */
	splineType?: string;

	/**
	 * Gets or sets the value mapping property for the current series object.
	 */
	lowMemberPath?: string;

	/**
	 * Gets or sets the value mapping property for the current series object.
	 */
	highMemberPath?: string;

	/**
	 * Gets or sets the value mapping property for the current series object.
	 */
	openMemberPath?: string;

	/**
	 * Gets or sets the close mapping property for the current series object.
	 */
	closeMemberPath?: string;

	/**
	 * Gets or sets the volume mapping property for the current series object.
	 */
	volumeMemberPath?: string;

	/**
	 * Gets or sets the number of values to hide at the beginning of the indicator.
	 */
	ignoreFirst?: number;

	/**
	 * Gets or sets the moving average period for the current AverageDirectionalIndexIndicator object.
	 * The typical, and initial, value for AverageDirectionalIndexIndicator periods is 14.
	 */
	period?: number;

	/**
	 * Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
	 * The typical, and initial, value for short AVO periods is 10.
	 */
	shortPeriod?: number;

	/**
	 * Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
	 * The typical, and initial, value for long AVO periods is 30.
	 */
	longPeriod?: number;

	/**
	 * Gets or sets the ContourValueResolver used to determine the numeric values of contours.
	 */
	valueResolver?: any;

	/**
	 * Gets or sets the resolution at which to filter out shapes in the series.
	 * For example, if the shapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.
	 */
	shapeFilterResolution?: number;

	/**
	 * Gets or sets the whether to use use brute force mode.
	 */
	useBruteForce?: boolean;

	/**
	 * Gets or sets the whether to progressively load the data into the map.
	 */
	progressiveLoad?: boolean;

	/**
	 * Gets or sets the whether the map reacts to mouse move events.
	 */
	mouseOverEnabled?: boolean;

	/**
	 * Gets or sets the whether to use squares when halting a render traversal rather than the shape of the coalesced area.
	 */
	useSquareCutoffStyle?: boolean;

	/**
	 * Gets or sets the density value that maps to the minimum heat color.
	 */
	heatMinimum?: number;

	/**
	 * Gets or sets the value that maps to the maximum heat color.
	 */
	heatMaximum?: number;

	/**
	 * Option for IgMapSeries
	 */
	[optionName: string]: any;
}

interface TriangulationStatusChangedEvent {
	(event: Event, ui: TriangulationStatusChangedEventUIParam): void;
}

interface TriangulationStatusChangedEventUIParam {
	/**
	 * Used to get reference to map object.
	 */
	map?: any;

	/**
	 * Used to get reference to current series object.
	 */
	series?: any;

	/**
	 * Used to get current status.
	 */
	currentStatus?: any;
}

interface IgMap {
	/**
	 * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 */
	dataSource?: any;

	/**
	 * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Sets or gets the automatic width to add when automatically adding margins to the map.
	 */
	autoMarginWidth?: number;

	/**
	 * Sets or gets the automatic height to add when automatically adding margins to the map.
	 */
	autoMarginHeight?: number;

	/**
	 * Gets or sets the current Map's crosshair visibility override.
	 *
	 * Valid values:
	 * "visible" Crosshair should be visible.
	 * "collapsed" Crosshair should not be visible.
	 */
	crosshairVisibility?: string;

	/**
	 * Gets or sets the cross hair point (in world coordinates)
	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
	 * case the relevant crosshair line is hidden.
	 */
	crosshairPoint?: IgMapCrosshairPoint;

	/**
	 * Gets or sets the brush used as the background for the current Map object's plot area.
	 */
	plotAreaBackground?: string;

	/**
	 * Gets or sets the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
	 *
	 * Valid values:
	 * "none" User gesture will not change the state of the map.
	 * "dragZoom" User gesture will start a drag rectangle to zoom the map.
	 * "dragPan" User gesture will start a pan action to move the map's window.
	 */
	defaultInteraction?: string;

	/**
	 * Gets or sets the current Map's DragModifier property.
	 *
	 * Valid values:
	 * "none" No modifier key is set.
	 * "alt" The modifier is set to alt key.
	 * "control" The modifier is set to control key.
	 * "shift" The modifier is set to shift key.
	 */
	dragModifier?: string;

	/**
	 * Gets or sets the current Map's PanModifier property.
	 *
	 * Valid values:
	 * "none" No modifier key is set.
	 * "alt" The modifier is set to alt key.
	 * "control" The modifier is set to control key.
	 * "shift" The modifier is set to shift key.
	 */
	panModifier?: string;

	/**
	 * Gets or sets the preview rectangle.
	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
	 * strokePath is hidden.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	previewRect?: any;

	/**
	 * A rectangle representing the portion of the map currently in view.
	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	windowRect?: any;

	/**
	 * Gets or sets the current Map's zoomability.
	 */
	zoomable?: boolean;

	/**
	 * Gets or sets the current Map's zoom scale.
	 */
	windowScale?: number;

	/**
	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
	 *
	 *
	 * Valid values:
	 * "deferred" Defer the view update until after the user action is complete.
	 * "immediate" Update the view immediately while the user action is happening.
	 */
	windowResponse?: string;

	/**
	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
	 * Decrease this value if you want to allow for further zooming into the viewer.
	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
	 */
	windowRectMinWidth?: number;

	/**
	 * A number between 0 and 1 determining the position of the horizontal scroll.
	 * This property is effectively a shortcut to the X position of the WindowRect property.
	 */
	windowPositionHorizontal?: number;

	/**
	 * A number between 0 and 1 determining the position of the vertical scroll.
	 * This property is effectively a shortcut to the Y position of the WindowRect property.
	 */
	windowPositionVertical?: number;

	/**
	 * Gets or sets the template to use for circle markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of circle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	circleMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for triangle markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of triangle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	triangleMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for pyramid markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of pyramid.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	pyramidMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for square markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of square.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	squareMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for diamond markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of diamond.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	diamondMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for pentagon markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of pentagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	pentagonMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for hexagon markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of hexagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	hexagonMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for tetragram markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of tetragram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	tetragramMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for pentragram markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of pentagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	pentagramMarkerTemplate?: any;

	/**
	 * Gets or sets the template to use for hexagram markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of hexagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	hexagramMarkerTemplate?: any;

	/**
	 * The background image uri use in the overview detail pane.
	 */
	overviewPlusDetailPaneBackgroundImageUri?: string;

	/**
	 * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
	 */
	useTiledZooming?: boolean;

	/**
	 * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
	 */
	preferHigherResolutionTiles?: boolean;

	/**
	 * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
	 */
	zoomTileCacheSize?: number;

	/**
	 * Background content object
	 */
	backgroundContent?: IgMapBackgroundContent;

	/**
	 * An array of series objects
	 */
	series?: IgMapSeries[];

	/**
	 * The swatch used to style this widget
	 */
	theme?: string;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipShowing?: TooltipShowingEvent;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipShown?: TooltipShownEvent;

	/**
	 * Event fired when the mouse has left a series and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipHiding?: TooltipHidingEvent;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	tooltipHidden?: TooltipHiddenEvent;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 */
	browserNotSupported?: BrowserNotSupportedEvent;

	/**
	 * Occurs when the cursors are moved over a series in this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesCursorMouseMove?: SeriesCursorMouseMoveEvent;

	/**
	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseLeftButtonDown?: SeriesMouseLeftButtonDownEvent;

	/**
	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseLeftButtonUp?: SeriesMouseLeftButtonUpEvent;

	/**
	 * Occurs when the left mouse pointer moves while over an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseMove?: SeriesMouseMoveEvent;

	/**
	 * Occurs when the left mouse pointer enters an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseEnter?: SeriesMouseEnterEvent;

	/**
	 * Occurs when the left mouse pointer leaves an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	seriesMouseLeave?: SeriesMouseLeaveEvent;

	/**
	 * Occurs just after the current Map's window rectangle is changed.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 */
	windowRectChanged?: WindowRectChangedEvent;

	/**
	 * Occurs just after the current Map's grid area rectangle is changed.
	 * The grid area may change as the result of the Map being resized.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 */
	gridAreaRectChanged?: GridAreaRectChangedEvent;

	/**
	 * Raised when the map's processing for an update has completed.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 */
	refreshCompleted?: RefreshCompletedEvent;

	/**
	 * Event fired when the status of an ongoing Triangulation has changed.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.currentStatus to get current status.
	 */
	triangulationStatusChanged?: TriangulationStatusChangedEvent;

	/**
	 * Option for igMap
	 */
	[optionName: string]: any;
}
interface IgMapMethods {
	option(): void;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;

	/**
	 * Returns the ID of parent element holding the map.
	 */
	id(): string;

	/**
	 * Exports the map to a PNG image.
	 *
	 * @param width The width of the image.
	 * @param height The height of the image.
	 */
	exportImage(width?: Object, height?: Object): Object;

	/**
	 * Notify the map that styles it draws colors from may have been updated.
	 */
	styleUpdated(): Object;

	/**
	 * Resets the zoom level of the map to default.
	 */
	resetZoom(): Object;

	/**
	 * Adds a new item to the data source and notifies the map.
	 *
	 * @param item The item that we want to add to the data source.
	 * @param targetName The name of the series bound to the data source.
	 */
	addItem(item: Object, targetName: string): void;

	/**
	 * Inserts a new item to the data source and notifies the map.
	 *
	 * @param item the new item that we want to insert in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 * @param targetName The name of the series bound to the data source.
	 */
	insertItem(item: Object, index: number, targetName: string): void;

	/**
	 * Deletes an item from the data source and notifies the map.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 * @param targetName The name of the series bound to the data source.
	 */
	removeItem(index: number, targetName: string): void;

	/**
	 * Updates an item in the data source and notifies the map.
	 *
	 * @param index The index of the item in the data source that we want to change.
	 * @param item The new item object that will be set in the data source.
	 * @param targetName The name of the series bound to the data source.
	 */
	setItem(index: number, item: Object, targetName: string): void;

	/**
	 * Notifies the the map that an item has been set in an associated data source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source that has been changed.
	 * @param newItem the new item that has been set in the collection.
	 * @param oldItem the old item that has been overwritten in the collection.
	 */
	notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;

	/**
	 * Notifies the the map that the items have been cleared from an associated data source.
	 *                 It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 */
	notifyClearItems(dataSource: Object): Object;

	/**
	 * Notifies the the target series that an item has been inserted at the specified index in its data source.
	 *                 It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source where the new item has been inserted.
	 * @param newItem the new item that has been set in the collection.
	 */
	notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;

	/**
	 * Notifies the the target series that an item has been removed from the specified index in its data source.
	 *                 It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source from where the old item has been removed.
	 * @param oldItem the old item that has been removed from the collection.
	 */
	notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;

	/**
	 * Notifies the target series or axis that it should scroll the requested data item into view.
	 *
	 * @param targetName The name of the series or axis notify.
	 * @param item The data item to bring into view, if possible.
	 */
	scrollIntoView(targetName: string, item: Object): Object;

	/**
	 * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.
	 * For example you can use this method if you want to find where longitude 50 stands scaled to map's width.
	 *
	 * @param targetName Either xAxis or yAxis to notify.
	 * @param unscaledValue The value in axis space to translate into map space.
	 */
	scaleValue(targetName: string, unscaledValue: number): number;

	/**
	 * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.
	 * For example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.
	 *
	 * @param targetName Either xAxis or yAxis to notify.
	 * @param scaledValue The value in map space to translate into axis space.
	 */
	unscaleValue(targetName: string, scaledValue: number): number;

	/**
	 * Manually starts a tiled zoom if one isn't already running.
	 */
	startTiledZoomingIfNecessary(): void;

	/**
	 * Manually ends a tiled zoom if one is running.
	 */
	endTiledZoomingIfRunning(): void;

	/**
	 * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..
	 */
	clearTileZoomCache(): void;

	/**
	 * Forces any pending deferred work to render on the map before continuing
	 */
	flush(): void;

	/**
	 * Exports visual data from the map to aid in unit testing
	 */
	exportVisualData(): void;

	/**
	 * Gets the actual minimum value of the target xAxis or yAxis
	 *
	 * @param targetName
	 */
	getActualMinimumValue(targetName: Object): void;

	/**
	 * Gets the actual maximum value of the target xAxis or yAxis
	 *
	 * @param targetName
	 */
	getActualMaximumValue(targetName: Object): void;

	/**
	 * Notifies the map that the container was resized
	 */
	notifyContainerResized(): void;

	/**
	 * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).
	 *
	 * @param rect The geographic area rectangle.
	 */
	zoomToGeographic(rect: Object): Object;

	/**
	 * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
	 *
	 * @param rect The geographic area rectangle.
	 */
	getGeographicFromZoom(rect: Object): Object;

	/**
	 * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
	 *
	 * @param rect The geographic area rectangle.
	 */
	getZoomFromGeographic(rect: Object): Object;

	/**
	 * Creates a print preview page with the map, hiding all other elements on the page.
	 */
	print(): void;

	/**
	 * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
	 *
	 * @param targetName The name of the series to render.
	 * @param animate Whether the change should be animated, if possible.
	 */
	renderSeries(targetName: string, animate: boolean): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igMap"): IgMapMethods;
}

interface JQuery {
	igMap(methodName: "option"): void;
	igMap(methodName: "destroy"): void;
	igMap(methodName: "id"): string;
	igMap(methodName: "exportImage", width?: Object, height?: Object): Object;
	igMap(methodName: "styleUpdated"): Object;
	igMap(methodName: "resetZoom"): Object;
	igMap(methodName: "addItem", item: Object, targetName: string): void;
	igMap(methodName: "insertItem", item: Object, index: number, targetName: string): void;
	igMap(methodName: "removeItem", index: number, targetName: string): void;
	igMap(methodName: "setItem", index: number, item: Object, targetName: string): void;
	igMap(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
	igMap(methodName: "notifyClearItems", dataSource: Object): Object;
	igMap(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
	igMap(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
	igMap(methodName: "scrollIntoView", targetName: string, item: Object): Object;
	igMap(methodName: "scaleValue", targetName: string, unscaledValue: number): number;
	igMap(methodName: "unscaleValue", targetName: string, scaledValue: number): number;
	igMap(methodName: "startTiledZoomingIfNecessary"): void;
	igMap(methodName: "endTiledZoomingIfRunning"): void;
	igMap(methodName: "clearTileZoomCache"): void;
	igMap(methodName: "flush"): void;
	igMap(methodName: "exportVisualData"): void;
	igMap(methodName: "getActualMinimumValue", targetName: Object): void;
	igMap(methodName: "getActualMaximumValue", targetName: Object): void;
	igMap(methodName: "notifyContainerResized"): void;
	igMap(methodName: "zoomToGeographic", rect: Object): Object;
	igMap(methodName: "getGeographicFromZoom", rect: Object): Object;
	igMap(methodName: "getZoomFromGeographic", rect: Object): Object;
	igMap(methodName: "print"): void;
	igMap(methodName: "renderSeries", targetName: string, animate: boolean): void;
	igMap(methodName: "changeLocale", $container: Object): void;
	igMap(methodName: "changeGlobalLanguage"): void;
	igMap(methodName: "changeGlobalRegional"): void;

	/**
	 * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igMap(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igMap(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igMap(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igMap(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 */
	igMap(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
	 */
	igMap(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	igMap(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
	 */
	igMap(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Sets or gets the automatic width to add when automatically adding margins to the map.
	 */
	igMap(optionLiteral: 'option', optionName: "autoMarginWidth"): number;

	/**
	 * Sets or gets the automatic width to add when automatically adding margins to the map.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "autoMarginWidth", optionValue: number): void;

	/**
	 * Sets or gets the automatic height to add when automatically adding margins to the map.
	 */
	igMap(optionLiteral: 'option', optionName: "autoMarginHeight"): number;

	/**
	 * Sets or gets the automatic height to add when automatically adding margins to the map.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "autoMarginHeight", optionValue: number): void;

	/**
	 * Gets  the current Map's crosshair visibility override.
	 */

	igMap(optionLiteral: 'option', optionName: "crosshairVisibility"): string;

	/**
	 * Sets the current Map's crosshair visibility override.
	 *
	 * @optionValue New value to be set.
	 */

	igMap(optionLiteral: 'option', optionName: "crosshairVisibility", optionValue: string): void;

	/**
	 * Gets  the cross hair point (in world coordinates)
	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
	 * case the relevant crosshair line is hidden.
	 */
	igMap(optionLiteral: 'option', optionName: "crosshairPoint"): IgMapCrosshairPoint;

	/**
	 * Sets the cross hair point (in world coordinates)
	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
	 * case the relevant crosshair line is hidden.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "crosshairPoint", optionValue: IgMapCrosshairPoint): void;

	/**
	 * Gets  the brush used as the background for the current Map object's plot area.
	 */
	igMap(optionLiteral: 'option', optionName: "plotAreaBackground"): string;

	/**
	 * Sets the brush used as the background for the current Map object's plot area.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "plotAreaBackground", optionValue: string): void;

	/**
	 * Gets  the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
	 */

	igMap(optionLiteral: 'option', optionName: "defaultInteraction"): string;

	/**
	 * Sets the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
	 *
	 * @optionValue New value to be set.
	 */

	igMap(optionLiteral: 'option', optionName: "defaultInteraction", optionValue: string): void;

	/**
	 * Gets  the current Map's DragModifier property.
	 */

	igMap(optionLiteral: 'option', optionName: "dragModifier"): string;

	/**
	 * Sets the current Map's DragModifier property.
	 *
	 * @optionValue New value to be set.
	 */

	igMap(optionLiteral: 'option', optionName: "dragModifier", optionValue: string): void;

	/**
	 * Gets  the current Map's PanModifier property.
	 */

	igMap(optionLiteral: 'option', optionName: "panModifier"): string;

	/**
	 * Sets the current Map's PanModifier property.
	 *
	 * @optionValue New value to be set.
	 */

	igMap(optionLiteral: 'option', optionName: "panModifier", optionValue: string): void;

	/**
	 * Gets  the preview rectangle.
	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
	 * strokePath is hidden.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	igMap(optionLiteral: 'option', optionName: "previewRect"): any;

	/**
	 * Sets the preview rectangle.
	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
	 * strokePath is hidden.
	 * The provided object should have numeric properties called left, top, width and height.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "previewRect", optionValue: any): void;

	/**
	 * A rectangle representing the portion of the map currently in view.
	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	igMap(optionLiteral: 'option', optionName: "windowRect"): any;

	/**
	 * A rectangle representing the portion of the map currently in view.
	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
	 * The provided object should have numeric properties called left, top, width and height.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "windowRect", optionValue: any): void;

	/**
	 * Gets  the current Map's zoomability.
	 */
	igMap(optionLiteral: 'option', optionName: "zoomable"): boolean;

	/**
	 * Sets the current Map's zoomability.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "zoomable", optionValue: boolean): void;

	/**
	 * Gets  the current Map's zoom scale.
	 */
	igMap(optionLiteral: 'option', optionName: "windowScale"): number;

	/**
	 * Sets the current Map's zoom scale.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "windowScale", optionValue: number): void;

	/**
	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
	 *
	 */

	igMap(optionLiteral: 'option', optionName: "windowResponse"): string;

	/**
	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMap(optionLiteral: 'option', optionName: "windowResponse", optionValue: string): void;

	/**
	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
	 * Decrease this value if you want to allow for further zooming into the viewer.
	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
	 */
	igMap(optionLiteral: 'option', optionName: "windowRectMinWidth"): number;

	/**
	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
	 * Decrease this value if you want to allow for further zooming into the viewer.
	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "windowRectMinWidth", optionValue: number): void;

	/**
	 * A number between 0 and 1 determining the position of the horizontal scroll.
	 * This property is effectively a shortcut to the X position of the WindowRect property.
	 */
	igMap(optionLiteral: 'option', optionName: "windowPositionHorizontal"): number;

	/**
	 * A number between 0 and 1 determining the position of the horizontal scroll.
	 * This property is effectively a shortcut to the X position of the WindowRect property.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "windowPositionHorizontal", optionValue: number): void;

	/**
	 * A number between 0 and 1 determining the position of the vertical scroll.
	 * This property is effectively a shortcut to the Y position of the WindowRect property.
	 */
	igMap(optionLiteral: 'option', optionName: "windowPositionVertical"): number;

	/**
	 * A number between 0 and 1 determining the position of the vertical scroll.
	 * This property is effectively a shortcut to the Y position of the WindowRect property.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "windowPositionVertical", optionValue: number): void;

	/**
	 * Gets  the template to use for circle markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of circle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "circleMarkerTemplate"): any;

	/**
	 * Sets the template to use for circle markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of circle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "circleMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for triangle markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of triangle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "triangleMarkerTemplate"): any;

	/**
	 * Sets the template to use for triangle markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of triangle.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "triangleMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for pyramid markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of pyramid.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "pyramidMarkerTemplate"): any;

	/**
	 * Sets the template to use for pyramid markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of pyramid.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "pyramidMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for square markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of square.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "squareMarkerTemplate"): any;

	/**
	 * Sets the template to use for square markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of square.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "squareMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for diamond markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of diamond.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "diamondMarkerTemplate"): any;

	/**
	 * Sets the template to use for diamond markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of diamond.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "diamondMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for pentagon markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of pentagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "pentagonMarkerTemplate"): any;

	/**
	 * Sets the template to use for pentagon markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of pentagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "pentagonMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for hexagon markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of hexagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "hexagonMarkerTemplate"): any;

	/**
	 * Sets the template to use for hexagon markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of hexagon.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "hexagonMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for tetragram markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of tetragram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "tetragramMarkerTemplate"): any;

	/**
	 * Sets the template to use for tetragram markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of tetragram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "tetragramMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for pentragram markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of pentagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "pentagramMarkerTemplate"): any;

	/**
	 * Sets the template to use for pentragram markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of pentagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "pentagramMarkerTemplate", optionValue: any): void;

	/**
	 * Gets  the template to use for hexagram markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of hexagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 */
	igMap(optionLiteral: 'option', optionName: "hexagramMarkerTemplate"): any;

	/**
	 * Sets the template to use for hexagram markers on the map.
	 * Defines the marker template used for
	 * series with a marker type of hexagram.
	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "hexagramMarkerTemplate", optionValue: any): void;

	/**
	 * The background image uri use in the overview detail pane.
	 */
	igMap(optionLiteral: 'option', optionName: "overviewPlusDetailPaneBackgroundImageUri"): string;

	/**
	 * The background image uri use in the overview detail pane.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "overviewPlusDetailPaneBackgroundImageUri", optionValue: string): void;

	/**
	 * Whether the series viewer should use cached tiles during zooms rather than the default live content.
	 */
	igMap(optionLiteral: 'option', optionName: "useTiledZooming"): boolean;

	/**
	 * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "useTiledZooming", optionValue: boolean): void;

	/**
	 * Whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
	 */
	igMap(optionLiteral: 'option', optionName: "preferHigherResolutionTiles"): boolean;

	/**
	 * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "preferHigherResolutionTiles", optionValue: boolean): void;

	/**
	 * The maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
	 */
	igMap(optionLiteral: 'option', optionName: "zoomTileCacheSize"): number;

	/**
	 * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "zoomTileCacheSize", optionValue: number): void;

	/**
	 * Background content object
	 */
	igMap(optionLiteral: 'option', optionName: "backgroundContent"): IgMapBackgroundContent;

	/**
	 * Background content object
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "backgroundContent", optionValue: IgMapBackgroundContent): void;

	/**
	 * An array of series objects
	 */
	igMap(optionLiteral: 'option', optionName: "series"): IgMapSeries[];

	/**
	 * An array of series objects
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "series", optionValue: IgMapSeries[]): void;

	/**
	 * The swatch used to style this widget
	 */
	igMap(optionLiteral: 'option', optionName: "theme"): string;

	/**
	 * The swatch used to style this widget
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "theme", optionValue: string): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igMap(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igMap(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igMap(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igMap(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igMap(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;

	/**
	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igMap(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igMap(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;

	/**
	 * Event fired after a tooltip is shown
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igMap(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;

	/**
	 * Event fired when the mouse has left a series and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igMap(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;

	/**
	 * Event fired when the mouse has left a series and the tooltip is about to hide
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igMap(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 */
	igMap(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;

	/**
	 * Event fired after a tooltip is hidden
	 * Function takes arguments evt and ui.
	 * Use ui.element to get reference to tooltip DOM element.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 *
	 * @optionValue Define event handler function.
	 */
	igMap(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 */
	igMap(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;

	/**
	 * Event fired when the control is displayed on a non HTML5 compliant browser
	 *
	 * @optionValue Define event handler function.
	 */
	igMap(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;

	/**
	 * Occurs when the cursors are moved over a series in this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesCursorMouseMove"): SeriesCursorMouseMoveEvent;

	/**
	 * Occurs when the cursors are moved over a series in this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesCursorMouseMove", optionValue: SeriesCursorMouseMoveEvent): void;

	/**
	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseLeftButtonDown"): SeriesMouseLeftButtonDownEvent;

	/**
	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseLeftButtonDown", optionValue: SeriesMouseLeftButtonDownEvent): void;

	/**
	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseLeftButtonUp"): SeriesMouseLeftButtonUpEvent;

	/**
	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseLeftButtonUp", optionValue: SeriesMouseLeftButtonUpEvent): void;

	/**
	 * Occurs when the left mouse pointer moves while over an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseMove"): SeriesMouseMoveEvent;

	/**
	 * Occurs when the left mouse pointer moves while over an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseMove", optionValue: SeriesMouseMoveEvent): void;

	/**
	 * Occurs when the left mouse pointer enters an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseEnter"): SeriesMouseEnterEvent;

	/**
	 * Occurs when the left mouse pointer enters an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseEnter", optionValue: SeriesMouseEnterEvent): void;

	/**
	 * Occurs when the left mouse pointer leaves an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseLeave"): SeriesMouseLeaveEvent;

	/**
	 * Occurs when the left mouse pointer leaves an element of this map.
	 * Function takes arguments evt and ui.
	 * Use ui.item to get reference to current series item object.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.actualItemBrush to get item brush.
	 * Use ui.actualSeriesBrush to get series brush.
	 * Use ui.positionX to get mouse X position.
	 * Use ui.positionY to get mouse Y position.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "seriesMouseLeave", optionValue: SeriesMouseLeaveEvent): void;

	/**
	 * Occurs just after the current Map's window rectangle is changed.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 */
	igMap(optionLiteral: 'option', optionName: "windowRectChanged"): WindowRectChangedEvent;

	/**
	 * Occurs just after the current Map's window rectangle is changed.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "windowRectChanged", optionValue: WindowRectChangedEvent): void;

	/**
	 * Occurs just after the current Map's grid area rectangle is changed.
	 * The grid area may change as the result of the Map being resized.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 */
	igMap(optionLiteral: 'option', optionName: "gridAreaRectChanged"): GridAreaRectChangedEvent;

	/**
	 * Occurs just after the current Map's grid area rectangle is changed.
	 * The grid area may change as the result of the Map being resized.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 * Use ui.newHeight to get new height value.
	 * Use ui.newLeft to get new left value.
	 * Use ui.newTop to get new top value.
	 * Use ui.newWidth to get new top value.
	 * Use ui.oldHeight to get old height value.
	 * Use ui.oldLeft to get old left value.
	 * Use ui.oldTop to get old top value.
	 * Use ui.oldWidth to get old top value.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "gridAreaRectChanged", optionValue: GridAreaRectChangedEvent): void;

	/**
	 * Raised when the map's processing for an update has completed.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 */
	igMap(optionLiteral: 'option', optionName: "refreshCompleted"): RefreshCompletedEvent;

	/**
	 * Raised when the map's processing for an update has completed.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 *
	 * @optionValue New value to be set.
	 */
	igMap(optionLiteral: 'option', optionName: "refreshCompleted", optionValue: RefreshCompletedEvent): void;

	/**
	 * Event fired when the status of an ongoing Triangulation has changed.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.currentStatus to get current status.
	 */
	igMap(optionLiteral: 'option', optionName: "triangulationStatusChanged"): TriangulationStatusChangedEvent;

	/**
	 * Event fired when the status of an ongoing Triangulation has changed.
	 * Function takes arguments evt and ui.
	 * Use ui.map to get reference to map object.
	 * Use ui.series to get reference to current series object.
	 * Use ui.currentStatus to get current status.
	 *
	 * @optionValue Define event handler function.
	 */
	igMap(optionLiteral: 'option', optionName: "triangulationStatusChanged", optionValue: TriangulationStatusChangedEvent): void;
	igMap(options: IgMap): JQuery;
	igMap(optionLiteral: 'option', optionName: string): any;
	igMap(optionLiteral: 'option', options: IgMap): JQuery;
	igMap(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igMap(methodName: string, ...methodParams: any[]): any;
}
interface IgNotifierHeaderTemplate {
	/**
	 * Controls whether the popover renders a functional close button
	 *
	 */
	closeButton?: boolean;

	/**
	 * Sets the content for the popover header.
	 *
	 */
	title?: string;

	/**
	 * Option for IgNotifierHeaderTemplate
	 */
	[optionName: string]: any;
}

interface IgNotifier {
	/**
	 * Gets/Sets the current state of the igNotifier messages. State controls what CSS classes are applied to the messages and target and has interactions with other options as well.
	 *
	 *
	 * Valid values:
	 * "success" Messages and target CSS have success styles applied.
	 * "info" Messages have info applied. Target is unaffected.
	 * "warning" Messages and target CSS have warning styles applied.
	 * "error" Messages and target CSS have error styles applied.
	 */
	state?: string;

	/**
	 * Controls the level of notifications shown by automatic and manual messages using the [notify](ui.ignotifier#methods:notify) method. Use [show](ui.ignotifier#methods:show) to ignore the level.
	 *
	 *
	 * Valid values:
	 * "success" Show all types of messages
	 * "info" Show everything from info level messages up
	 * "warning" Show everything from warning level messages up
	 * "error" Show only error messages
	 */
	notifyLevel?: string;

	/**
	 * Controls where the popover DOM should be attached to (only applies to popovers).
	 *
	 *
	 * Valid values:
	 * "string" A valid jQuery selector for the element
	 * "object" A reference to the parent jQuery object
	 */
	appendTo?: string|Object;

	/**
	 * Controls the positioning mode of messages. Setting a mode will override the default behavior which is auto.Note: Inline element uses a block container as is always placed after the target.
	 *
	 *
	 * Valid values:
	 * "auto" Uses popover for info and warning messages and inline for errors and success.
	 * "popover" Displays messages in a configurable popover.
	 * "inline" Displays messages in a simplified notification text under the target.
	 */
	mode?: string;

	/**
	 * Allows setting the respective state CSS on the target element (used to apply border color by default)
	 *
	 */
	allowCSSOnTarget?: boolean;

	/**
	 * Allows rendering a span with the respective state CSS to display jQuery UI framework icons
	 *
	 */
	showIcon?: boolean;

	/**
	 * Gets/Sets the content for the popover container. Templated with parameters by default: {0} - icon container class, {1} - the icon class and {2} - message text.
	 *
	 *
	 * Valid values:
	 * "string" String content of the popover container
	 * "function" Function which is a callback that should return the content. Use the 'this' value to access the target DOM element and passed argument for state value. Result can also include the same template parametes.
	 */
	contentTemplate?: string|Function;

	/**
	 * Sets the content for the popover header
	 *
	 */
	headerTemplate?: IgNotifierHeaderTemplate;

	/**
	 * Sets the event on which the notification will be shown. Predefined values are "mouseenter", "click" and "focus"
	 *
	 *
	 * Valid values:
	 * "mouseenter" The popover is shown on mouse enter in the target element
	 * "click" The popover is shown on click on the target element
	 * "focus" The popover is shown on focusing the target element
	 * "manual" The popover is shown manually
	 */
	showOn?: string;

	/**
	 * Controls whether the popover will close on blur or not. This option has effect only when the corresponding [showOn](ui.ignotifier#options:showOn) is set (manual by default)
	 *
	 */
	closeOnBlur?: boolean;

	/**
	 * Gets/Sets the time in milliseconds the notification fades in and out when showing/hiding
	 *
	 */
	animationDuration?: number;

	/**
	 * Gets/Sets the distance in pixels a notification popover slides outwards as it's shown.
	 *
	 */
	animationSlideDistance?: number;

	/**
	 * Selectors indicating which items should show popovers.
	 */
	selectors?: string;

	/**
	 * controls the direction in which the control shows relative to the target element
	 *
	 *
	 * Valid values:
	 * "auto" lets the control show on the side where enough space is available with the priority specified by the [directionPriority](ui.%%WidgetNameLowered%%#options:directionPriority) property
	 * "left" shows popover on the left side of the target element
	 * "right" shows popover on the right side of the target element
	 * "top" shows popover on the top of the target element
	 * "bottom" shows popover on the bottom of the target element
	 */
	direction?: string;

	/**
	 * Controls the priority in which the control searches for space to show relative to the target element.
	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
	 *
	 */
	directionPriority?: any[];

	/**
	 * controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
	 *
	 *
	 * Valid values:
	 * "auto" lets the control choose a position depending on available space with the following priority balanced > end > start
	 * "balanced" the popover is positioned at the middle of the target element
	 * "start" the popover is positioned at the beginning of the target element
	 * "end" the popover is positioned at the end of the target element
	 */
	position?: string;

	/**
	 * defines width for the popover. leave null for auto.
	 *
	 */
	width?: number|string;

	/**
	 * defines height for the popover. leave null for auto
	 *
	 */
	height?: number|string;

	/**
	 * defines width the popover won't go under the value even if no specific one is set.
	 *
	 */
	minWidth?: number|string;

	/**
	 * defines width the popover won't exceed even if no specific one is set.
	 *
	 */
	maxWidth?: number|string;

	/**
	 * defines height the popover won't exceed even if no specific one is set.
	 *
	 */
	maxHeight?: number|string;

	/**
	 * Sets the containment for the popover. Accepts a jQuery object
	 *
	 */
	containment?: any;

	/**
	 * Event fired before popover is shown.
	 */
	showing?: ShowingEvent;

	/**
	 * Event fired after popover is shown.
	 */
	shown?: ShownEvent;

	/**
	 * Event fired before popover is hidden.
	 */
	hiding?: HidingEvent;

	/**
	 * Event fired after popover is hidden.
	 */
	hidden?: HiddenEvent;

	/**
	 * Option for igNotifier
	 */
	[optionName: string]: any;
}
interface IgNotifierMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.ignotifier#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.ignotifier#options:language) or [locale](ui.ignotifier#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.
	 *
	 * @param state The state to show notification for.
	 * @param message Optional message to show, overrides defaults.
	 */
	notify(state: Object, message?: string): void;

	/**
	 * Returns true if the notification is currently visible
	 */
	isVisible(): boolean;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;

	/**
	 * Returns the ID of the element the popover is attached to
	 */
	id(): string;

	/**
	 * Returns the container for the popover contents
	 */
	container(): Object;

	/**
	 * Shows the popover for the specified target
	 *
	 * @param trg The element to show popover for.
	 * @param content The string to set for the popover to show.
	 */
	show(trg?: Element, content?: string): void;

	/**
	 * Hides the popover for the specified target
	 */
	hide(): void;

	/**
	 * Gets the currently set content for the popover container
	 */
	getContent(): string;

	/**
	 * Sets the content for the popover container
	 *
	 * @param newCnt The popover content to set.
	 */
	setContent(newCnt: string): void;

	/**
	 * Gets the popover current target
	 */
	target(): Object;

	/**
	 * Gets the current coordinates of the popover
	 */
	getCoordinates(): Object;

	/**
	 * Sets the popover to specific coordinates.
	 *
	 * @param pos The popover coordinates in pixels.
	 */
	setCoordinates(pos: Object): void;
}
interface JQuery {
	data(propertyName: "igNotifier"): IgNotifierMethods;
}

interface JQuery {
	igNotifier(methodName: "changeLocale"): void;
	igNotifier(methodName: "notify", state: Object, message?: string): void;
	igNotifier(methodName: "isVisible"): boolean;
	igNotifier(methodName: "destroy"): void;
	igNotifier(methodName: "id"): string;
	igNotifier(methodName: "container"): Object;
	igNotifier(methodName: "show", trg?: Element, content?: string): void;
	igNotifier(methodName: "hide"): void;
	igNotifier(methodName: "getContent"): string;
	igNotifier(methodName: "setContent", newCnt: string): void;
	igNotifier(methodName: "target"): Object;
	igNotifier(methodName: "getCoordinates"): Object;
	igNotifier(methodName: "setCoordinates", pos: Object): void;

	/**
	 * Gets/Sets the current state of the igNotifier messages. State controls what CSS classes are applied to the messages and target and has interactions with other options as well.
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "state"): string;

	/**
	 * /Sets the current state of the igNotifier messages. State controls what CSS classes are applied to the messages and target and has interactions with other options as well.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "state", optionValue: string): void;

	/**
	 * Controls the level of notifications shown by automatic and manual messages using the [notify](ui.ignotifier#methods:notify) method. Use [show](ui.ignotifier#methods:show) to ignore the level.
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "notifyLevel"): string;

	/**
	 * Controls the level of notifications shown by automatic and manual messages using the [notify](ui.ignotifier#methods:notify) method. Use [show](ui.ignotifier#methods:show) to ignore the level.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "notifyLevel", optionValue: string): void;

	/**
	 * Controls where the popover DOM should be attached to (only applies to popovers).
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "appendTo"): string|Object;

	/**
	 * Controls where the popover DOM should be attached to (only applies to popovers).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "appendTo", optionValue: string|Object): void;

	/**
	 * Controls the positioning mode of messages. Setting a mode will override the default behavior which is auto.Note: Inline element uses a block container as is always placed after the target.
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Controls the positioning mode of messages. Setting a mode will override the default behavior which is auto.Note: Inline element uses a block container as is always placed after the target.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Allows setting the respective state CSS on the target element (used to apply border color by default)
	 *
	 */
	igNotifier(optionLiteral: 'option', optionName: "allowCSSOnTarget"): boolean;

	/**
	 * Allows setting the respective state CSS on the target element (used to apply border color by default)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNotifier(optionLiteral: 'option', optionName: "allowCSSOnTarget", optionValue: boolean): void;

	/**
	 * Allows rendering a span with the respective state CSS to display jQuery UI framework icons
	 *
	 */
	igNotifier(optionLiteral: 'option', optionName: "showIcon"): boolean;

	/**
	 * Allows rendering a span with the respective state CSS to display jQuery UI framework icons
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNotifier(optionLiteral: 'option', optionName: "showIcon", optionValue: boolean): void;

	/**
	 * Gets/Sets the content for the popover container. Templated with parameters by default: {0} - icon container class, {1} - the icon class and {2} - message text.
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "contentTemplate"): string|Function;

	/**
	 * /Sets the content for the popover container. Templated with parameters by default: {0} - icon container class, {1} - the icon class and {2} - message text.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "contentTemplate", optionValue: string|Function): void;

	/**
	 * The content for the popover header
	 *
	 */
	igNotifier(optionLiteral: 'option', optionName: "headerTemplate"): IgNotifierHeaderTemplate;

	/**
	 * Sets the content for the popover header
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNotifier(optionLiteral: 'option', optionName: "headerTemplate", optionValue: IgNotifierHeaderTemplate): void;

	/**
	 * Sets the event on which the notification will be shown. Predefined values are "mouseenter", "click" and "focus"
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "showOn"): string;

	/**
	 * Sets the event on which the notification will be shown. Predefined values are "mouseenter", "click" and "focus"
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "showOn", optionValue: string): void;

	/**
	 * Controls whether the popover will close on blur or not. This option has effect only when the corresponding [showOn](ui.ignotifier#options:showOn) is set (manual by default)
	 *
	 */
	igNotifier(optionLiteral: 'option', optionName: "closeOnBlur"): boolean;

	/**
	 * Controls whether the popover will close on blur or not. This option has effect only when the corresponding [showOn](ui.ignotifier#options:showOn) is set (manual by default)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNotifier(optionLiteral: 'option', optionName: "closeOnBlur", optionValue: boolean): void;

	/**
	 * Gets/Sets the time in milliseconds the notification fades in and out when showing/hiding
	 *
	 */
	igNotifier(optionLiteral: 'option', optionName: "animationDuration"): number;

	/**
	 * /Sets the time in milliseconds the notification fades in and out when showing/hiding
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNotifier(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;

	/**
	 * Gets/Sets the distance in pixels a notification popover slides outwards as it's shown.
	 *
	 */
	igNotifier(optionLiteral: 'option', optionName: "animationSlideDistance"): number;

	/**
	 * /Sets the distance in pixels a notification popover slides outwards as it's shown.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNotifier(optionLiteral: 'option', optionName: "animationSlideDistance", optionValue: number): void;

	/**
	 * Selectors indicating which items should show popovers.
	 */
	igNotifier(optionLiteral: 'option', optionName: "selectors"): string;

	/**
	 * Selectors indicating which items should show popovers.
	 *
	 * @optionValue New value to be set.
	 */
	igNotifier(optionLiteral: 'option', optionName: "selectors", optionValue: string): void;

	/**
	 * Controls the direction in which the control shows relative to the target element
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "direction"): string;

	/**
	 * Controls the direction in which the control shows relative to the target element
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "direction", optionValue: string): void;

	/**
	 * Controls the priority in which the control searches for space to show relative to the target element.
	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
	 *
	 */
	igNotifier(optionLiteral: 'option', optionName: "directionPriority"): any[];

	/**
	 * Controls the priority in which the control searches for space to show relative to the target element.
	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNotifier(optionLiteral: 'option', optionName: "directionPriority", optionValue: any[]): void;

	/**
	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "position"): string;

	/**
	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "position", optionValue: string): void;

	/**
	 * Defines width for the popover. leave null for auto.
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "width"): number|string;

	/**
	 * Defines width for the popover. leave null for auto.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "width", optionValue: number|string): void;

	/**
	 * Defines height for the popover. leave null for auto
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "height"): number|string;

	/**
	 * Defines height for the popover. leave null for auto
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "height", optionValue: number|string): void;

	/**
	 * Defines width the popover won't go under the value even if no specific one is set.
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "minWidth"): number|string;

	/**
	 * Defines width the popover won't go under the value even if no specific one is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "minWidth", optionValue: number|string): void;

	/**
	 * Defines width the popover won't exceed even if no specific one is set.
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "maxWidth"): number|string;

	/**
	 * Defines width the popover won't exceed even if no specific one is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "maxWidth", optionValue: number|string): void;

	/**
	 * Defines height the popover won't exceed even if no specific one is set.
	 *
	 */

	igNotifier(optionLiteral: 'option', optionName: "maxHeight"): number|string;

	/**
	 * Defines height the popover won't exceed even if no specific one is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igNotifier(optionLiteral: 'option', optionName: "maxHeight", optionValue: number|string): void;

	/**
	 * The containment for the popover. Accepts a jQuery object
	 *
	 */
	igNotifier(optionLiteral: 'option', optionName: "containment"): any;

	/**
	 * Sets the containment for the popover. Accepts a jQuery object
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igNotifier(optionLiteral: 'option', optionName: "containment", optionValue: any): void;

	/**
	 * Event fired before popover is shown.
	 */
	igNotifier(optionLiteral: 'option', optionName: "showing"): ShowingEvent;

	/**
	 * Event fired before popover is shown.
	 *
	 * @optionValue Define event handler function.
	 */
	igNotifier(optionLiteral: 'option', optionName: "showing", optionValue: ShowingEvent): void;

	/**
	 * Event fired after popover is shown.
	 */
	igNotifier(optionLiteral: 'option', optionName: "shown"): ShownEvent;

	/**
	 * Event fired after popover is shown.
	 *
	 * @optionValue Define event handler function.
	 */
	igNotifier(optionLiteral: 'option', optionName: "shown", optionValue: ShownEvent): void;

	/**
	 * Event fired before popover is hidden.
	 */
	igNotifier(optionLiteral: 'option', optionName: "hiding"): HidingEvent;

	/**
	 * Event fired before popover is hidden.
	 *
	 * @optionValue Define event handler function.
	 */
	igNotifier(optionLiteral: 'option', optionName: "hiding", optionValue: HidingEvent): void;

	/**
	 * Event fired after popover is hidden.
	 */
	igNotifier(optionLiteral: 'option', optionName: "hidden"): HiddenEvent;

	/**
	 * Event fired after popover is hidden.
	 *
	 * @optionValue Define event handler function.
	 */
	igNotifier(optionLiteral: 'option', optionName: "hidden", optionValue: HiddenEvent): void;
	igNotifier(options: IgNotifier): JQuery;
	igNotifier(optionLiteral: 'option', optionName: string): any;
	igNotifier(optionLiteral: 'option', options: IgNotifier): JQuery;
	igNotifier(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igNotifier(methodName: string, ...methodParams: any[]): any;
}
interface IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions {
	/**
	 * The value is applied to XmlHttpRequest.withCredentials if supported by the user agent.
	 * Setting this property to true will allow IE8/IE9 to make authenticated cross-origin requests to tusted domains through XmlHttpRequest instead of XDomainRequest
	 * and will prompt the user for credentials.
	 */
	withCredentials?: boolean;

	/**
	 * A callback to be invoked right before the request is send to the server. Extends beforeSend callback of jQuery.ajax’s options object.
	 */
	beforeSend?: Function;

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings {
	/**
	 * Optional="true" a value indicating whether a NON EMPTY clause is present on ROWS axis. Default value is true
	 */
	nonEmptyOnRows?: boolean;

	/**
	 * Optional="true" a value indicating whether a NON EMPTY clause is present on COLUMNS axis. Default value is true
	 */
	nonEmptyOnColumns?: boolean;

	/**
	 * Optional="true" a value indicating whether a members' set expressions on ROWS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
	 */
	addCalculatedMembersOnRows?: boolean;

	/**
	 * Optional="true" a value indicating whether a members' set expressions on COLUMNS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
	 */
	addCalculatedMembersOnColumns?: boolean;

	/**
	 * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on ROWS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
	 */
	dimensionPropertiesOnRows?: any[];

	/**
	 * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on COLUMNS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
	 */
	dimensionPropertiesOnColumns?: any[];

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsXmlaOptions {
	/**
	 * Optional="false" The URL of the XMLA server.
	 */
	serverUrl?: string;

	/**
	 * The catalog name.
	 */
	catalog?: string;

	/**
	 * The name of the cube in the data source.
	 */
	cube?: string;

	/**
	 * The name of the measure group in the data source.
	 */
	measureGroup?: string;

	/**
	 * An object containing information about how the request to the XMLA server should be processed.
	 */
	requestOptions?: IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions;

	/**
	 * Enables/disables caching of the XMLA result object.
	 */
	enableResultCache?: boolean;

	/**
	 * Additional properties sent with every discover request.
	 * The object is treated as a key/value store where each property name is used as the key and the property value as the value.
	 */
	discoverProperties?: any;

	/**
	 * Additional properties sent with every execute request.
	 * The object is treated as a key/value store where each property name is used as the key and the property value as the value.
	 */
	executeProperties?: any;

	/**
	 * Optional="true" a javascript object containing information about how the request to the xmla server should be processed
	 */
	mdxSettings?: IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings;

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsXmlaOptions
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure {
	/**
	 * Optional="false" A unique name for the measure.
	 */
	name?: string;

	/**
	 * A caption for the measure.
	 */
	caption?: string;

	/**
	 * Optional="false" An aggregator function called when each cell is evaluated.
	 * Returns a value for the cell. If the returned value is null, no cell will be created in for the data source result.
	 */
	aggregator?: Function;

	/**
	 * The path used when displaying the measure in the user interface. Nested folders are indicated by a backslash (\).
	 */
	displayFolder?: string;

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension {
	/**
	 * A unique name for the measures dimension.
	 * The default value is "Measures". This name is used to create the names of dimensions using the following pattern:
	 * [<measuresDimensionMetadata.name>].[<measureMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the measures dimension.
	 * The default value is "Measures".
	 */
	caption?: string;

	/**
	 * An array of measure metadata objects.
	 */
	measures?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure[];

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel {
	/**
	 * Optional="false" A name for the level.
	 * The unique name of the level is formed using the following pattern:
	 * {<hierarchy.uniqueName>}.[<levelMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the level.
	 */
	caption?: string;

	/**
	 * A function called for each item of the data source array when level members are created.
	 * Based on the item parameter the function should return a value that will form the $.ig.Member’s name and caption.
	 */
	memberProvider?: Function;

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie {
	/**
	 * Optional="false" A name for the hierarchy.
	 * The unique name of the hierarchy is formed using the following pattern:
	 * [<parentDimension.name>].[<hierarchyMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the hierarchy.
	 */
	caption?: string;

	/**
	 * The path to be used when displaying the hierarchy in the user interface.
	 * Nested folders are indicated by a backslash (\).
	 * The folder hierarchy will appear under parent dimension node.
	 */
	displayFolder?: string;

	/**
	 * An array of level metadata objects.
	 */
	levels?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel[];

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension {
	/**
	 * Optional="false" A unique name for the dimension.
	 */
	name?: string;

	/**
	 * A caption for the dimension.
	 */
	caption?: string;

	/**
	 * An array of hierarchy metadata objects.
	 */
	hierarchies?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie[];

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube {
	/**
	 * Optional="false" A unique name for the cube.
	 */
	name?: string;

	/**
	 * A caption for the cube.
	 */
	caption?: string;

	/**
	 * An object providing information about the measures' root node.
	 */
	measuresDimension?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension;

	/**
	 * An array of dimension metadata objects.
	 */
	dimensions?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension[];

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadata {
	/**
	 * Optional="false" Metadata used for the creation of the cube.
	 */
	cube?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube;

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadata
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptionsFlatDataOptions {
	/**
	 * Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
	 */
	dataSource?: any;

	/**
	 * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * See $.ig.DataSource.
	 * string Specifies the name of the property in which data records are held if the response is wrapped.
	 * null Option is ignored.
	 */
	responseDataKey?: string;

	/**
	 * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 * null Option is ignored.
	 */
	responseDataType?: string;

	/**
	 * Optional="false" An object containing processing instructions for the $.ig.DataSource data.
	 */
	metadata?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadata;

	/**
	 * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptions
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDataSourceOptions {
	/**
	 * Settings for creating an instance of $.ig.OlapXmlaDataSource.
	 */
	xmlaOptions?: IgPivotDataSelectorDataSourceOptionsXmlaOptions;

	/**
	 * Settings for creating an instance of $.ig.OlapFlatDataSource.
	 */
	flatDataOptions?: IgPivotDataSelectorDataSourceOptionsFlatDataOptions;

	/**
	 * A list of measure names separated by comma (,). These will be the measures of the data source.
	 */
	measures?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
	 */
	filters?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
	 */
	rows?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
	 */
	columns?: string;

	/**
	 * Option for IgPivotDataSelectorDataSourceOptions
	 */
	[optionName: string]: any;
}

interface IgPivotDataSelectorDragAndDropSettings {
	/**
	 * Which element the draggable helper should be appended to while dragging.
	 */
	appendTo?: any;

	/**
	 * Specifies the containment for the drag helper. The area inside of which thehelper is contained would be scrollable while dragging.
	 *
	 */
	containment?: boolean|string|Array<any>;

	/**
	 * Specifies z-index that would be set for the drag helper.
	 */
	zIndex?: number;

	/**
	 * Option for IgPivotDataSelectorDragAndDropSettings
	 */
	[optionName: string]: any;
}

interface DataSelectorRenderedEvent {
	(event: Event, ui: DataSelectorRenderedEventUIParam): void;
}

interface DataSelectorRenderedEventUIParam {
	/**
	 * Gets a reference to the data selector.
	 */
	owner?: any;
}

interface DataSourceInitializedEvent {
	(event: Event, ui: DataSourceInitializedEventUIParam): void;
}

interface DataSourceInitializedEventUIParam {
	/**
	 * Gets a reference to the data selector.
	 */
	owner?: any;

	/**
	 * Gets a reference to the data source.
	 */
	dataSource?: any;

	/**
	 * See if an error has occured during initialization.
	 */
	error?: string;

	/**
	 * Gets a reference to the root of the data source metatadata root item.
	 */
	metadataTreeRoot?: any;
}

interface DataSourceUpdatedEvent {
	(event: Event, ui: DataSourceUpdatedEventUIParam): void;
}

interface DataSourceUpdatedEventUIParam {
	/**
	 * Gets a reference to the data selector.
	 */
	owner?: any;

	/**
	 * Gets a reference to the data source.
	 */
	dataSource?: any;

	/**
	 * See if an error has occured during update.
	 */
	error?: string;

	/**
	 * Gets the result of the update operation.
	 */
	result?: any;
}

interface DeferUpdateChangedEvent {
	(event: Event, ui: DeferUpdateChangedEventUIParam): void;
}

interface DeferUpdateChangedEventUIParam {
	/**
	 * Gets a reference to the data selector.
	 */
	owner?: any;

	/**
	 * Gets the defer update value.
	 */
	deferUpdate?: boolean;
}

interface DragStartEvent {
	(event: Event, ui: DragStartEventUIParam): void;
}

interface DragStartEventUIParam {
	/**
	 * Gets a reference to the data.
	 */
	metadata?: any;

	/**
	 * Gets a reference to the helper.
	 */
	helper?: string;

	/**
	 * Gets a reference to the offset.
	 */
	offset?: any;

	/**
	 * Gets a reference to the original position of the draggable element.
	 */
	originalPosition?: any;

	/**
	 * Gets a reference to the current position of the draggable element.
	 */
	position?: any;
}

interface DragEvent {
	(event: Event, ui: DragEventUIParam): void;
}

interface DragEventUIParam {
	/**
	 * Gets a reference to the data.
	 */
	metadata?: any;

	/**
	 * Gets a reference to the helper.
	 */
	helper?: string;

	/**
	 * Gets a reference to the offset.
	 */
	offset?: any;

	/**
	 * Gets a reference to the original position of the draggable element.
	 */
	originalPosition?: any;

	/**
	 * Gets a reference to the current position of the draggable element.
	 */
	position?: any;
}

interface DragStopEvent {
	(event: Event, ui: DragStopEventUIParam): void;
}

interface DragStopEventUIParam {
	/**
	 * Gets a reference to the helper.
	 */
	helper?: string;

	/**
	 * Gets a reference to the offset.
	 */
	offset?: any;

	/**
	 * Gets a reference to the original position of the draggable element.
	 */
	originalPosition?: any;

	/**
	 * Gets a reference to the current position of the draggable element.
	 */
	position?: any;
}

interface MetadataDroppingEvent {
	(event: Event, ui: MetadataDroppingEventUIParam): void;
}

interface MetadataDroppingEventUIParam {
	/**
	 * A reference to the drop target.
	 */
	targetElement?: string;

	/**
	 * A reference to the dragged element.
	 */
	draggedElement?: string;

	/**
	 * Gets a reference to the data.
	 */
	metadata?: any;

	/**
	 * Gets the index at which the metadata will be inserted.
	 */
	metadataIndex?: number;

	/**
	 * Gets a reference to the helper.
	 */
	helper?: string;

	/**
	 * Gets a reference to the offset.
	 */
	offset?: any;

	/**
	 * Gets a reference to the current position of the draggable element.
	 */
	position?: any;
}

interface MetadataDroppedEvent {
	(event: Event, ui: MetadataDroppedEventUIParam): void;
}

interface MetadataDroppedEventUIParam {
	/**
	 * A reference to the drop target.
	 */
	targetElement?: string;

	/**
	 * A reference to the dragged element.
	 */
	draggedElement?: string;

	/**
	 * Gets a reference to the data.
	 */
	metadata?: any;

	/**
	 * Gets the index at which the metadata is inserted.
	 */
	metadataIndex?: number;

	/**
	 * Gets a reference to the helper.
	 */
	helper?: string;

	/**
	 * Gets a reference to the offset.
	 */
	offset?: any;

	/**
	 * Gets a reference to the current position of the draggable element.
	 */
	position?: any;
}

interface MetadataRemovingEvent {
	(event: Event, ui: MetadataRemovingEventUIParam): void;
}

interface MetadataRemovingEventUIParam {
	/**
	 * A reference to the dragged element.
	 */
	targetElement?: string;

	/**
	 * Gets a reference to the data.
	 */
	metadata?: any;
}

interface MetadataRemovedEvent {
	(event: Event, ui: MetadataRemovedEventUIParam): void;
}

interface MetadataRemovedEventUIParam {
	/**
	 * Gets a reference to the data.
	 */
	metadata?: any;
}

interface FilterDropDownOpeningEvent {
	(event: Event, ui: FilterDropDownOpeningEventUIParam): void;
}

interface FilterDropDownOpeningEventUIParam {
	/**
	 * A reference to the hierarchy.
	 */
	hierarchy?: any;
}

interface FilterDropDownOpenedEvent {
	(event: Event, ui: FilterDropDownOpenedEventUIParam): void;
}

interface FilterDropDownOpenedEventUIParam {
	/**
	 * A reference to the hierarchy.
	 */
	hierarchy?: any;

	/**
	 * A reference to the drop down.
	 */
	dropDownElement?: string;
}

interface FilterMembersLoadedEvent {
	(event: Event, ui: FilterMembersLoadedEventUIParam): void;
}

interface FilterMembersLoadedEventUIParam {
	/**
	 * Gets the parent node or the igTree instance in the initial load.
	 */
	parent?: string;

	/**
	 * A collection with the root filter members .
	 */
	rootFilterMembers?: any[];

	/**
	 * A collection with the newly loaded filter members.
	 */
	filterMembers?: any[];
}

interface FilterDropDownOkEvent {
	(event: Event, ui: FilterDropDownOkEventUIParam): void;
}

interface FilterDropDownOkEventUIParam {
	/**
	 * A reference to the hierarchy.
	 */
	hierarchy?: any;

	/**
	 * A collection with the selected filter members. If all filter members are selected the collection will be empty.
	 */
	filterMembers?: any[];

	/**
	 * A reference to the drop down.
	 */
	dropDownElement?: string;
}

interface FilterDropDownClosingEvent {
	(event: Event, ui: FilterDropDownClosingEventUIParam): void;
}

interface FilterDropDownClosingEventUIParam {
	/**
	 * A reference to the hierarchy.
	 */
	hierarchy?: any;

	/**
	 * A reference to the drop down.
	 */
	dropDownElement?: string;
}

interface FilterDropDownClosedEvent {
	(event: Event, ui: FilterDropDownClosedEventUIParam): void;
}

interface FilterDropDownClosedEventUIParam {
	/**
	 * A reference to the hierarchy.
	 */
	hierarchy?: any;
}

interface IgPivotDataSelector {
	/**
	 *
	 *
	 * Valid values:
	 * "string" The widget width can be set in pixels (px) and percentage (%). The recommended width is 250px.
	 * "number" The widget width can be set as a number.
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
	 *
	 *
	 * Valid values:
	 * "string" The widget height can be set in pixels (px) and percentage (%).
	 * "number" The widget height can be set as a number.
	 * "null" will stretch vertically to fit data, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 *
	 */
	dataSource?: any;

	/**
	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
	 *
	 */
	dataSourceOptions?: IgPivotDataSelectorDataSourceOptions;

	/**
	 * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
	 *
	 */
	deferUpdate?: boolean;

	/**
	 * Settings for the drag and drop functionality of the igPivotDataSelector.
	 *
	 */
	dragAndDropSettings?: IgPivotDataSelectorDragAndDropSettings;

	/**
	 * Specifies the parent for the drop downs.
	 */
	dropDownParent?: any;

	/**
	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
	 *
	 */
	disableRowsDropArea?: boolean;

	/**
	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
	 *
	 */
	disableColumnsDropArea?: boolean;

	/**
	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
	 *
	 */
	disableMeasuresDropArea?: boolean;

	/**
	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
	 *
	 */
	disableFiltersDropArea?: boolean;

	/**
	 * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
	 *
	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
	 * paramType="string" The unique name of the item.
	 * returnType="bool"  The function must return true if the item should be accepted.
	 */
	customMoveValidation?: Function;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
	 */
	dataSelectorRendered?: DataSelectorRenderedEvent;

	/**
	 * Fired after the data source has initialized.
	 */
	dataSourceInitialized?: DataSourceInitializedEvent;

	/**
	 * Fired after the data source has updated.
	 */
	dataSourceUpdated?: DataSourceUpdatedEvent;

	/**
	 * Fired when the defer update checkbox changes.
	 */
	deferUpdateChanged?: DeferUpdateChangedEvent;

	/**
	 * Fired on drag start. Return false to cancel the drag.
	 */
	dragStart?: DragStartEvent;

	/**
	 * Fired on drag. Return false to cancel the dragging.
	 */
	drag?: DragEvent;

	/**
	 * Fired on drag stop.
	 */
	dragStop?: DragStopEvent;

	/**
	 * Fired before a metadata item drop. Return false to cancel the drop.
	 */
	metadataDropping?: MetadataDroppingEvent;

	/**
	 * Fired after a metadata item drop.
	 */
	metadataDropped?: MetadataDroppedEvent;

	/**
	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
	 */
	metadataRemoving?: MetadataRemovingEvent;

	/**
	 * Fired after a metadata item is removed when the user clicks the close icon.
	 */
	metadataRemoved?: MetadataRemovedEvent;

	/**
	 * Fired before the filter members drop down opens. Return false to cancel the opening.
	 */
	filterDropDownOpening?: FilterDropDownOpeningEvent;

	/**
	 * Fired after the filter members drop down opens.
	 */
	filterDropDownOpened?: FilterDropDownOpenedEvent;

	/**
	 * Fired after the filter members are loaded.
	 */
	filterMembersLoaded?: FilterMembersLoadedEvent;

	/**
	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
	 */
	filterDropDownOk?: FilterDropDownOkEvent;

	/**
	 * Fired before the filter members drop down closes. Return false to cancel the closing.
	 */
	filterDropDownClosing?: FilterDropDownClosingEvent;

	/**
	 * Fired after the filter members drop down closes.
	 */
	filterDropDownClosed?: FilterDropDownClosedEvent;

	/**
	 * Option for igPivotDataSelector
	 */
	[optionName: string]: any;
}
interface IgPivotDataSelectorMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igpivotdataselector#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igpivotdataselector#options:language) or [locale](ui.igpivotdataselector#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Updates the data source.
	 */
	update(): void;

	/**
	 * Destroy is part of the jQuery UI widget API and does the following:
	 * 1. Remove custom CSS classes that were added.
	 * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
	 * 3. Unbind all events that were bound.
	 */
	destroy(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igPivotDataSelector"): IgPivotDataSelectorMethods;
}

interface JQuery {
	igPivotDataSelector(methodName: "changeLocale"): void;
	igPivotDataSelector(methodName: "update"): void;
	igPivotDataSelector(methodName: "destroy"): void;
	igPivotDataSelector(methodName: "changeGlobalLanguage"): void;
	igPivotDataSelector(methodName: "changeGlobalRegional"): void;

	/**
	 * *
	 */

	igPivotDataSelector(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * *
	 *
	 * @optionValue New value to be set.
	 */

	igPivotDataSelector(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
	 *
	 */

	igPivotDataSelector(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPivotDataSelector(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceOptions"): IgPivotDataSelectorDataSourceOptions;

	/**
	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceOptions", optionValue: IgPivotDataSelectorDataSourceOptions): void;

	/**
	 * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "deferUpdate"): boolean;

	/**
	 * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "deferUpdate", optionValue: boolean): void;

	/**
	 * Settings for the drag and drop functionality of the igPivotDataSelector.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dragAndDropSettings"): IgPivotDataSelectorDragAndDropSettings;

	/**
	 * Settings for the drag and drop functionality of the igPivotDataSelector.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dragAndDropSettings", optionValue: IgPivotDataSelectorDragAndDropSettings): void;

	/**
	 * Gets the parent for the drop downs.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dropDownParent"): any;

	/**
	 * Sets the parent for the drop downs.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dropDownParent", optionValue: any): void;

	/**
	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "disableRowsDropArea"): boolean;

	/**
	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "disableRowsDropArea", optionValue: boolean): void;

	/**
	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "disableColumnsDropArea"): boolean;

	/**
	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "disableColumnsDropArea", optionValue: boolean): void;

	/**
	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "disableMeasuresDropArea"): boolean;

	/**
	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "disableMeasuresDropArea", optionValue: boolean): void;

	/**
	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "disableFiltersDropArea"): boolean;

	/**
	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "disableFiltersDropArea", optionValue: boolean): void;

	/**
	 * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
	 *
	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
	 * paramType="string" The unique name of the item.
	 * returnType="bool"  The function must return true if the item should be accepted.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "customMoveValidation"): Function;

	/**
	 * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
	 *
	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
	 * paramType="string" The unique name of the item.
	 * returnType="bool"  The function must return true if the item should be accepted.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "customMoveValidation", optionValue: Function): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igPivotDataSelector(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPivotDataSelector(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSelectorRendered"): DataSelectorRenderedEvent;

	/**
	 * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSelectorRendered", optionValue: DataSelectorRenderedEvent): void;

	/**
	 * Fired after the data source has initialized.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceInitialized"): DataSourceInitializedEvent;

	/**
	 * Fired after the data source has initialized.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceInitialized", optionValue: DataSourceInitializedEvent): void;

	/**
	 * Fired after the data source has updated.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceUpdated"): DataSourceUpdatedEvent;

	/**
	 * Fired after the data source has updated.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceUpdated", optionValue: DataSourceUpdatedEvent): void;

	/**
	 * Fired when the defer update checkbox changes.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "deferUpdateChanged"): DeferUpdateChangedEvent;

	/**
	 * Fired when the defer update checkbox changes.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "deferUpdateChanged", optionValue: DeferUpdateChangedEvent): void;

	/**
	 * Fired on drag start. Return false to cancel the drag.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dragStart"): DragStartEvent;

	/**
	 * Fired on drag start. Return false to cancel the drag.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dragStart", optionValue: DragStartEvent): void;

	/**
	 * Fired on drag. Return false to cancel the dragging.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "drag"): DragEvent;

	/**
	 * Fired on drag. Return false to cancel the dragging.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "drag", optionValue: DragEvent): void;

	/**
	 * Fired on drag stop.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dragStop"): DragStopEvent;

	/**
	 * Fired on drag stop.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "dragStop", optionValue: DragStopEvent): void;

	/**
	 * Fired before a metadata item drop. Return false to cancel the drop.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "metadataDropping"): MetadataDroppingEvent;

	/**
	 * Fired before a metadata item drop. Return false to cancel the drop.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "metadataDropping", optionValue: MetadataDroppingEvent): void;

	/**
	 * Fired after a metadata item drop.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "metadataDropped"): MetadataDroppedEvent;

	/**
	 * Fired after a metadata item drop.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "metadataDropped", optionValue: MetadataDroppedEvent): void;

	/**
	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "metadataRemoving"): MetadataRemovingEvent;

	/**
	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "metadataRemoving", optionValue: MetadataRemovingEvent): void;

	/**
	 * Fired after a metadata item is removed when the user clicks the close icon.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "metadataRemoved"): MetadataRemovedEvent;

	/**
	 * Fired after a metadata item is removed when the user clicks the close icon.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "metadataRemoved", optionValue: MetadataRemovedEvent): void;

	/**
	 * Fired before the filter members drop down opens. Return false to cancel the opening.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOpening"): FilterDropDownOpeningEvent;

	/**
	 * Fired before the filter members drop down opens. Return false to cancel the opening.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOpening", optionValue: FilterDropDownOpeningEvent): void;

	/**
	 * Fired after the filter members drop down opens.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOpened"): FilterDropDownOpenedEvent;

	/**
	 * Fired after the filter members drop down opens.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOpened", optionValue: FilterDropDownOpenedEvent): void;

	/**
	 * Fired after the filter members are loaded.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterMembersLoaded"): FilterMembersLoadedEvent;

	/**
	 * Fired after the filter members are loaded.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterMembersLoaded", optionValue: FilterMembersLoadedEvent): void;

	/**
	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOk"): FilterDropDownOkEvent;

	/**
	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOk", optionValue: FilterDropDownOkEvent): void;

	/**
	 * Fired before the filter members drop down closes. Return false to cancel the closing.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownClosing"): FilterDropDownClosingEvent;

	/**
	 * Fired before the filter members drop down closes. Return false to cancel the closing.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownClosing", optionValue: FilterDropDownClosingEvent): void;

	/**
	 * Fired after the filter members drop down closes.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownClosed"): FilterDropDownClosedEvent;

	/**
	 * Fired after the filter members drop down closes.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownClosed", optionValue: FilterDropDownClosedEvent): void;
	igPivotDataSelector(options: IgPivotDataSelector): JQuery;
	igPivotDataSelector(optionLiteral: 'option', optionName: string): any;
	igPivotDataSelector(optionLiteral: 'option', options: IgPivotDataSelector): JQuery;
	igPivotDataSelector(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igPivotDataSelector(methodName: string, ...methodParams: any[]): any;
}
interface IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions {
	/**
	 * The value is applied to XmlHttpRequest.withCredentials if supported by the user agent.
	 * Setting this property to true will allow IE8/IE9 to make authenticated cross-origin requests to tusted domains through XmlHttpRequest instead of XDomainRequest
	 * and will prompt the user for credentials.
	 */
	withCredentials?: boolean;

	/**
	 * A callback to be invoked right before the request is send to the server. Extends beforeSend callback of jQuery.ajax's options object.
	 */
	beforeSend?: Function;

	/**
	 * Option for IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings {
	/**
	 * Optional="true" a value indicating whether a NON EMPTY clause is present on ROWS axis. Default value is true
	 */
	nonEmptyOnRows?: boolean;

	/**
	 * Optional="true" a value indicating whether a NON EMPTY clause is present on COLUMNS axis. Default value is true
	 */
	nonEmptyOnColumns?: boolean;

	/**
	 * Optional="true" a value indicating whether a members' set expressions on ROWS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
	 */
	addCalculatedMembersOnRows?: boolean;

	/**
	 * Optional="true" a value indicating whether a members' set expressions on COLUMNS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
	 */
	addCalculatedMembersOnColumns?: boolean;

	/**
	 * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on ROWS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
	 */
	dimensionPropertiesOnRows?: any[];

	/**
	 * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on COLUMNS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
	 */
	dimensionPropertiesOnColumns?: any[];

	/**
	 * Option for IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsXmlaOptions {
	/**
	 * Optional="false" The URL of the XMLA server.
	 */
	serverUrl?: string;

	/**
	 * The catalog name.
	 */
	catalog?: string;

	/**
	 * The name of the cube in the data source.
	 */
	cube?: string;

	/**
	 * The name of the measure group in the data source.
	 */
	measureGroup?: string;

	/**
	 * An object containing information about how the request to the XMLA server should be processed.
	 */
	requestOptions?: IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions;

	/**
	 * Enables/disables caching of the XMLA result object.
	 */
	enableResultCache?: boolean;

	/**
	 * Additional properties sent with every discover request.
	 * The object is treated as a key/value store where each property name is used as the key and the property value as the value.
	 */
	discoverProperties?: any;

	/**
	 * Additional properties sent with every execute request.
	 * The object is treated as a key/value store where each property name is used as the key and the property value as the value.
	 */
	executeProperties?: any;

	/**
	 * Optional="true" a javascript object containing information about how the request to the xmla server should be processed
	 */
	mdxSettings?: IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings;

	/**
	 * Option for IgPivotGridDataSourceOptionsXmlaOptions
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure {
	/**
	 * Optional="false" A unique name for the measure.
	 */
	name?: string;

	/**
	 * A caption for the measure.
	 */
	caption?: string;

	/**
	 * Optional="false" An aggregator function called when each cell is evaluated.
	 * Returns a value for the cell. If the returned value is null, no cell will be created in for the data source result.
	 */
	aggregator?: Function;

	/**
	 * The path used when displaying the measure in the user interface. Nested folders are indicated by a backslash (\).
	 */
	displayFolder?: string;

	/**
	 * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension {
	/**
	 * A unique name for the measures dimension.
	 * The default value is "Measures". This name is used to create the names of dimensions using the following pattern:
	 * [<measuresDimensionMetadata.name>].[<measureMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the measures dimension.
	 * The default value is "Measures".
	 */
	caption?: string;

	/**
	 * An array of measure metadata objects.
	 */
	measures?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure[];

	/**
	 * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel {
	/**
	 * Optional="false" A name for the level.
	 * The unique name of the level is formed using the following pattern:
	 * {<hierarchy.uniqueName>}.[<levelMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the level.
	 */
	caption?: string;

	/**
	 * A function called for each item of the data source array when level members are created.
	 * Based on the item parameter the function should return a value that will form the $.ig.Member's name and caption.
	 */
	memberProvider?: Function;

	/**
	 * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie {
	/**
	 * Optional="false" A name for the hierarchy.
	 * The unique name of the hierarchy is formed using the following pattern:
	 * [<parentDimension.name>].[<hierarchyMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the hierarchy.
	 */
	caption?: string;

	/**
	 * The path to be used when displaying the hierarchy in the user interface.
	 * Nested folders are indicated by a backslash (\).
	 * The folder hierarchy will appear under parent dimension node.
	 */
	displayFolder?: string;

	/**
	 * An array of level metadata objects.
	 */
	levels?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel[];

	/**
	 * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension {
	/**
	 * Optional="false" A unique name for the dimension.
	 */
	name?: string;

	/**
	 * A caption for the dimension.
	 */
	caption?: string;

	/**
	 * An array of hierarchy metadata objects.
	 */
	hierarchies?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie[];

	/**
	 * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube {
	/**
	 * Optional="false" A unique name for the cube.
	 */
	name?: string;

	/**
	 * A caption for the cube.
	 */
	caption?: string;

	/**
	 * An object providing information about the measures' root node.
	 */
	measuresDimension?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension;

	/**
	 * An array of dimension metadata objects.
	 */
	dimensions?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension[];

	/**
	 * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadata {
	/**
	 * Optional="false" Metadata used for the creation of the cube.
	 */
	cube?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube;

	/**
	 * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadata
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptionsFlatDataOptions {
	/**
	 * Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
	 */
	dataSource?: any;

	/**
	 * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * See $.ig.DataSource.
	 * string Specifies the name of the property in which data records are held if the response is wrapped.
	 * null Option is ignored.
	 */
	responseDataKey?: string;

	/**
	 * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 * null Option is ignored.
	 */
	responseDataType?: string;

	/**
	 * Optional="false" An object containing processing instructions for the $.ig.DataSource data.
	 */
	metadata?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadata;

	/**
	 * Option for IgPivotGridDataSourceOptionsFlatDataOptions
	 */
	[optionName: string]: any;
}

interface IgPivotGridDataSourceOptions {
	/**
	 * Settings for creating an instance of $.ig.OlapXmlaDataSource.
	 */
	xmlaOptions?: IgPivotGridDataSourceOptionsXmlaOptions;

	/**
	 * Settings for creating an instance of $.ig.OlapFlatDataSource.
	 */
	flatDataOptions?: IgPivotGridDataSourceOptionsFlatDataOptions;

	/**
	 * A list of measure names separated by comma (,). These will be the measures of the data source.
	 */
	measures?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
	 */
	filters?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
	 */
	rows?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
	 */
	columns?: string;

	/**
	 * Option for IgPivotGridDataSourceOptions
	 */
	[optionName: string]: any;
}

interface IgPivotGridLevelSortDirection {
	/**
	 * Specifies the unique name of the level, which will be sorted.
	 */
	levelUniqueName?: string;

	/**
	 * optional="true" Specifies the sort direction. If no direction is specified, the level is going to be sorted in the direction specified by the firstLevelSortDirection option.
	 */
	sortDirection?: any;

	/**
	 * optional="true" Specifies what type of sorting will be applied to the header cells. If no behavior is specified, the level is going to be sorted with the behavior specified in the defaultLevelSortBehavior option.
	 *
	 * Valid values:
	 * "system" Sorts the headers by a specified sort key.
	 * "alphabetical" Sorts alphabetically the header captions.
	 */
	sortBehavior?: string;

	/**
	 * Option for IgPivotGridLevelSortDirection
	 */
	[optionName: string]: any;
}

interface IgPivotGridGridOptionsFeatures {
	/**
	 * Option for IgPivotGridGridOptionsFeatures
	 */
	[optionName: string]: any;
}

interface IgPivotGridGridOptions {
	/**
	 * Default column width that will be set for all columns.
	 */
	defaultColumnWidth?: string|number;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable.
	 *
	 */
	fixedHeaders?: boolean;

	/**
	 * Caption text that will be shown above the pivot grid header.
	 */
	caption?: string;

	/**
	 * A list of grid features definitions. The supported features are Resizing and Tooltips. Each feature goes with its separate options that are documented for the feature accordingly.
	 *
	 */
	features?: IgPivotGridGridOptionsFeatures;

	/**
	 * Initial tabIndex attribute that will be set on the container element.
	 *
	 */
	tabIndex?: number;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling). Note that if a custom jQuery template is set, this has no effect and CSS for the row should be adjusted manually in the template contents.
	 */
	alternateRowStyles?: boolean;

	/**
	 * Enables/disables rendering of ui-state-hover classes when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 */
	enableHoverStyles?: boolean;

	/**
	 * Option for IgPivotGridGridOptions
	 */
	[optionName: string]: any;
}

interface IgPivotGridDragAndDropSettings {
	/**
	 * Which element the draggable helper should be appended to while dragging.
	 */
	appendTo?: any;

	/**
	 * Specifies the containment for the drag helper. The area inside of which thehelper is contained would be scrollable while dragging.
	 *
	 */
	containment?: boolean|string|Array<any>;

	/**
	 * Specifies z-index that would be set for the drag helper.
	 */
	zIndex?: number;

	/**
	 * Option for IgPivotGridDragAndDropSettings
	 */
	[optionName: string]: any;
}

interface PivotGridHeadersRenderedEvent {
	(event: Event, ui: PivotGridHeadersRenderedEventUIParam): void;
}

interface PivotGridHeadersRenderedEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets a reference to the igGrid widget, which holds the headers.
	 */
	grid?: any;

	/**
	 * Gets a reference to the headers table DOM element.
	 */
	table?: Element;
}

interface PivotGridRenderedEvent {
	(event: Event, ui: PivotGridRenderedEventUIParam): void;
}

interface PivotGridRenderedEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets reference to the igGrid widget, which represents the data.
	 */
	grid?: any;
}

interface TupleMemberExpandingEvent {
	(event: Event, ui: TupleMemberExpandingEventUIParam): void;
}

interface TupleMemberExpandingEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets a reference to the data source.
	 */
	dataSource?: any;

	/**
	 * Gets the name of axis, which holds the member and the tuple.
	 */
	axisName?: string;

	/**
	 * Gets the index of the tuple in the axis.
	 */
	tupleIndex?: number;

	/**
	 * Gets the index of the member in the tuple.
	 */
	memberIndex?: number;
}

interface TupleMemberExpandedEvent {
	(event: Event, ui: TupleMemberExpandedEventUIParam): void;
}

interface TupleMemberExpandedEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets a reference to the data source.
	 */
	dataSource?: any;

	/**
	 * Gets the name of axis, which holds the member and the tuple.
	 */
	axisName?: string;

	/**
	 * Gets the index of the tuple in the axis.
	 */
	tupleIndex?: number;

	/**
	 * Gets the index of the member in the tuple.
	 */
	memberIndex?: number;
}

interface TupleMemberCollapsingEvent {
	(event: Event, ui: TupleMemberCollapsingEventUIParam): void;
}

interface TupleMemberCollapsingEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets a reference to the data source.
	 */
	dataSource?: any;

	/**
	 * Gets the name of axis, which holds the member and the tuple.
	 */
	axisName?: string;

	/**
	 * Gets the index of the tuple in the axis.
	 */
	tupleIndex?: number;

	/**
	 * Gets the index of the member in the tuple.
	 */
	memberIndex?: number;
}

interface TupleMemberCollapsedEvent {
	(event: Event, ui: TupleMemberCollapsedEventUIParam): void;
}

interface TupleMemberCollapsedEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets a reference to the data source.
	 */
	dataSource?: any;

	/**
	 * Gets the name of axis, which holds the member and the tuple.
	 */
	axisName?: string;

	/**
	 * Gets the index of the tuple in the axis.
	 */
	tupleIndex?: number;

	/**
	 * Gets the index of the member in the tuple.
	 */
	memberIndex?: number;
}

interface SortingEvent {
	(event: Event, ui: SortingEventUIParam): void;
}

interface SortingEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets an array of the tuple indices and sort directions that will be used.
	 */
	sortDirections?: any[];
}

interface SortedEvent {
	(event: Event, ui: SortedEventUIParam): void;
}

interface SortedEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets an array of the tuple indices and sort directions that were passed to the table view.
	 */
	sortDirections?: any[];

	/**
	 * Gets an array of the tuple indices and sort directions that were actually applied to the table view.
	 */
	appliedSortDirections?: any[];
}

interface HeadersSortingEvent {
	(event: Event, ui: HeadersSortingEventUIParam): void;
}

interface HeadersSortingEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets an array of the level names and sort directions that will be used.
	 */
	levelSortDirections?: any[];
}

interface HeadersSortedEvent {
	(event: Event, ui: HeadersSortedEventUIParam): void;
}

interface HeadersSortedEventUIParam {
	/**
	 * Gets a reference to the pivot grid.
	 */
	owner?: any;

	/**
	 * Gets an array of the level names and sort directions that were used.
	 */
	levelSortDirections?: any[];

	/**
	 * Gets an array of the level names and sort directions that were actually applied to the table view.
	 */
	appliedLevelSortDirections?: any[];
}

interface IgPivotGrid {
	/**
	 *
	 *
	 * Valid values:
	 * "null" Will stretch to fit the data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * This is the total height of the grid.
	 *
	 *
	 * Valid values:
	 * "null" Will stretch vertically to fit data, if no other heights are defined
	 */
	height?: string|number;

	/**
	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 *
	 */
	dataSource?: any;

	/**
	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
	 *
	 */
	dataSourceOptions?: IgPivotGridDataSourceOptions;

	/**
	 * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
	 *
	 */
	deferUpdate?: boolean;

	/**
	 * A boolean value indicating whether a parent in the columns is in front of its children.
	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 *
	 */
	isParentInFrontForColumns?: boolean;

	/**
	 * A boolean value indicating whether a parent in the rows is in front of its children.
	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 *
	 */
	isParentInFrontForRows?: boolean;

	/**
	 * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
	 *
	 */
	compactColumnHeaders?: boolean;

	/**
	 * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
	 *
	 */
	compactRowHeaders?: boolean;

	/**
	 * A value indicating whether the layout that row headers should be arranged.standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.
	 * superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).
	 * tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The column's width is dependent on the defaultRowHEaderWidth, which can be set to "null" to enable the built-in auto-sizing functionality).
	 *
	 *
	 * Valid values:
	 * "standard"
	 * "superCompact"
	 * "tree"
	 */
	rowHeadersLayout?: any;

	/**
	 * The indentation for every level column when the compactColumnHeaders is set to true.
	 *
	 */
	compactColumnHeaderIndentation?: number;

	/**
	 * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
	 *
	 */
	compactRowHeaderIndentation?: number;

	/**
	 * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
	 */
	rowHeaderLinkGroupIndentation?: number;

	/**
	 * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
	 */
	treeRowHeaderIndentation?: number;

	/**
	 * Specifies the width of the row headers.
	 *
	 */
	defaultRowHeaderWidth?: number;

	/**
	 * Enables sorting of the value cells in columns.
	 *
	 */
	allowSorting?: boolean;

	/**
	 * Specifies the default sort direction for the rows.
	 *
	 */
	firstSortDirection?: any;

	/**
	 * Enables sorting of the header cells in rows.
	 *
	 */
	allowHeaderRowsSorting?: boolean;

	/**
	 * Enables sorting of the header cells in columns.
	 *
	 */
	allowHeaderColumnsSorting?: boolean;

	/**
	 * An array of level sort direction items, which predefine the sorted header cells.
	 *
	 */
	levelSortDirections?: IgPivotGridLevelSortDirection[];

	/**
	 * Specifies the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
	 *
	 * Valid values:
	 * "system" Sorts the headers by a specified sort key.
	 * "alphabetical" Sorts alphabetically the header captions.
	 */
	defaultLevelSortBehavior?: string;

	/**
	 * Specifies the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
	 *
	 */
	firstLevelSortDirection?: any;

	/**
	 * Options specific to the igGrid that will render the pivot grid view.
	 *
	 */
	gridOptions?: IgPivotGridGridOptions;

	/**
	 * Settings for the drag and drop functionality of the igPivotGrid.
	 *
	 */
	dragAndDropSettings?: IgPivotGridDragAndDropSettings;

	/**
	 * Specifies the parent for the drop downs.
	 */
	dropDownParent?: any;

	/**
	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
	 *
	 */
	disableRowsDropArea?: boolean;

	/**
	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
	 *
	 */
	disableColumnsDropArea?: boolean;

	/**
	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
	 *
	 */
	disableMeasuresDropArea?: boolean;

	/**
	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
	 *
	 */
	disableFiltersDropArea?: boolean;

	/**
	 * Hide the rows drop area.
	 *
	 */
	hideRowsDropArea?: boolean;

	/**
	 * Hide the columns drop area.
	 *
	 */
	hideColumnsDropArea?: boolean;

	/**
	 * Hide the measures drop area.
	 *
	 */
	hideMeasuresDropArea?: boolean;

	/**
	 * Hide the filters drop area.
	 *
	 */
	hideFiltersDropArea?: boolean;

	/**
	 * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
	 *
	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
	 * paramType="string" The unique name of the item.
	 * returnType="bool"  The function must return true if the item should be accepted.
	 */
	customMoveValidation?: Function;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired after the data source has initialized.
	 */
	dataSourceInitialized?: DataSourceInitializedEvent;

	/**
	 * Fired after the data source has updated.
	 */
	dataSourceUpdated?: DataSourceUpdatedEvent;

	/**
	 * Event fired after the headers have been rendered.
	 */
	pivotGridHeadersRendered?: PivotGridHeadersRenderedEvent;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 */
	pivotGridRendered?: PivotGridRenderedEvent;

	/**
	 * Fired before the expand of the tuple member. Return false to cancel the expanding.
	 */
	tupleMemberExpanding?: TupleMemberExpandingEvent;

	/**
	 * Fired after the expand of the tuple member.
	 */
	tupleMemberExpanded?: TupleMemberExpandedEvent;

	/**
	 * Fired before the collapse of the tuple member. Return false to cancel the collapsing.
	 */
	tupleMemberCollapsing?: TupleMemberCollapsingEvent;

	/**
	 * Fired after the collapse of the tuple member.
	 */
	tupleMemberCollapsed?: TupleMemberCollapsedEvent;

	/**
	 * Fired before the sorting of the columns. Return false to cancel the sorting.
	 */
	sorting?: SortingEvent;

	/**
	 * Fired after the sorting of the columns.
	 */
	sorted?: SortedEvent;

	/**
	 * Fired before the sorting of the headers. Return false to cancel the sorting.
	 */
	headersSorting?: HeadersSortingEvent;

	/**
	 * Fired after the sorting of the headers.
	 */
	headersSorted?: HeadersSortedEvent;

	/**
	 * Fired on drag start. Return false to cancel the dragging.
	 */
	dragStart?: DragStartEvent;

	/**
	 * Fired on drag. Return false to cancel the drag.
	 */
	drag?: DragEvent;

	/**
	 * Fired on drag stop.
	 */
	dragStop?: DragStopEvent;

	/**
	 * Fired before a metadata item drop. Return false to cancel the drop.
	 */
	metadataDropping?: MetadataDroppingEvent;

	/**
	 * Fired after a metadata item drop.
	 */
	metadataDropped?: MetadataDroppedEvent;

	/**
	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
	 */
	metadataRemoving?: MetadataRemovingEvent;

	/**
	 * Fired after a metadata item is removed when the user clicks the close icon.
	 */
	metadataRemoved?: MetadataRemovedEvent;

	/**
	 * Fired before the filter members drop down opens. Return false to cancel the opening.
	 */
	filterDropDownOpening?: FilterDropDownOpeningEvent;

	/**
	 * Fired after the filter members drop down opens.
	 */
	filterDropDownOpened?: FilterDropDownOpenedEvent;

	/**
	 * Fired after the filter members are loaded.
	 */
	filterMembersLoaded?: FilterMembersLoadedEvent;

	/**
	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
	 */
	filterDropDownOk?: FilterDropDownOkEvent;

	/**
	 * Fired before the filter members drop down closes. Return false to cancel the closing.
	 */
	filterDropDownClosing?: FilterDropDownClosingEvent;

	/**
	 * Fired after the filter members drop down closes.
	 */
	filterDropDownClosed?: FilterDropDownClosedEvent;

	/**
	 * Option for igPivotGrid
	 */
	[optionName: string]: any;
}
interface IgPivotGridMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igpivotgrid#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igpivotgrid#options:language) or [locale](ui.igpivotgrid#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igpivotgrid#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.igpivotgrid#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Returns the igGrid instance used to render the OLAP data.
	 */
	grid(): Object;

	/**
	 * Triggers an update on the data source and the igPivotGrid.
	 */
	updateGrid(): void;

	/**
	 * Expands a member from the data source and returns true if the expand succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
	 *
	 * @param tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
	 * @param tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
	 * @param memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
	 * @param shouldUpdate A flag indicating whether the data source should be updated after the expand.
	 */
	expandTupleMember(tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean;

	/**
	 * Collapses a member from the data source and returns true if the collapse succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
	 *
	 * @param tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
	 * @param tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
	 * @param memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
	 * @param shouldUpdate A flag indicating whether the data source should be updated after the expand.
	 */
	collapseTupleMember(tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean;

	/**
	 * Returns an array with the applied sort directions on the igPivotGrid's columns. The returned array contains objects with the following properties:
	 *
	 * memberNames: The names of the members in the tuple.
	 * tupleIndex: The index of the tuple on the column axis in the original unsorted result.
	 * sortDirection: The direction of the sort - ascending or descending.
	 */
	appliedColumnSortDirections(): any[];

	/**
	 * Returns an array with the applied level sort direction items, which were used for the sorting of the header cells. The returned array contains objects with the following properties:
	 *
	 * levelUniqueName: Specifies the unique name of the level, which was sorted.
	 * sortDirection: The direction of the header sort - ascending or descending.
	 */
	appliedLevelSortDirections(): any[];

	/**
	 * Destroy is part of the jQuery UI widget API and does the following:
	 * 1. Remove custom CSS classes that were added.
	 * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
	 * 3. Unbind all events that were bound.
	 */
	destroy(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igPivotGrid"): IgPivotGridMethods;
}

interface JQuery {
	igPivotGrid(methodName: "changeLocale"): void;
	igPivotGrid(methodName: "changeRegional"): void;
	igPivotGrid(methodName: "grid"): Object;
	igPivotGrid(methodName: "updateGrid"): void;
	igPivotGrid(methodName: "expandTupleMember", tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean;
	igPivotGrid(methodName: "collapseTupleMember", tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean;
	igPivotGrid(methodName: "appliedColumnSortDirections"): any[];
	igPivotGrid(methodName: "appliedLevelSortDirections"): any[];
	igPivotGrid(methodName: "destroy"): void;
	igPivotGrid(methodName: "changeGlobalLanguage"): void;
	igPivotGrid(methodName: "changeGlobalRegional"): void;

	/**
	 * *
	 */

	igPivotGrid(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * *
	 *
	 * @optionValue New value to be set.
	 */

	igPivotGrid(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * This is the total height of the grid.
	 *
	 */

	igPivotGrid(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * This is the total height of the grid.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPivotGrid(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dataSourceOptions"): IgPivotGridDataSourceOptions;

	/**
	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dataSourceOptions", optionValue: IgPivotGridDataSourceOptions): void;

	/**
	 * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "deferUpdate"): boolean;

	/**
	 * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "deferUpdate", optionValue: boolean): void;

	/**
	 * A boolean value indicating whether a parent in the columns is in front of its children.
	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "isParentInFrontForColumns"): boolean;

	/**
	 * A boolean value indicating whether a parent in the columns is in front of its children.
	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "isParentInFrontForColumns", optionValue: boolean): void;

	/**
	 * A boolean value indicating whether a parent in the rows is in front of its children.
	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "isParentInFrontForRows"): boolean;

	/**
	 * A boolean value indicating whether a parent in the rows is in front of its children.
	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "isParentInFrontForRows", optionValue: boolean): void;

	/**
	 * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "compactColumnHeaders"): boolean;

	/**
	 * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "compactColumnHeaders", optionValue: boolean): void;

	/**
	 * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "compactRowHeaders"): boolean;

	/**
	 * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "compactRowHeaders", optionValue: boolean): void;

	/**
	 * A value indicating whether the layout that row headers should be arranged.standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.
	 * superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).
	 * tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The column's width is dependent on the defaultRowHEaderWidth, which can be set to "null" to enable the built-in auto-sizing functionality).
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "rowHeadersLayout"): any;

	/**
	 * A value indicating whether the layout that row headers should be arranged.standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.
	 * superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).
	 * tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The column's width is dependent on the defaultRowHEaderWidth, which can be set to "null" to enable the built-in auto-sizing functionality).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "rowHeadersLayout", optionValue: any): void;

	/**
	 * The indentation for every level column when the compactColumnHeaders is set to true.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "compactColumnHeaderIndentation"): number;

	/**
	 * The indentation for every level column when the compactColumnHeaders is set to true.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "compactColumnHeaderIndentation", optionValue: number): void;

	/**
	 * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "compactRowHeaderIndentation"): number;

	/**
	 * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "compactRowHeaderIndentation", optionValue: number): void;

	/**
	 * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "rowHeaderLinkGroupIndentation"): number;

	/**
	 * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "rowHeaderLinkGroupIndentation", optionValue: number): void;

	/**
	 * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "treeRowHeaderIndentation"): number;

	/**
	 * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "treeRowHeaderIndentation", optionValue: number): void;

	/**
	 * Gets the width of the row headers.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "defaultRowHeaderWidth"): number;

	/**
	 * Sets the width of the row headers.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "defaultRowHeaderWidth", optionValue: number): void;

	/**
	 * Enables sorting of the value cells in columns.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "allowSorting"): boolean;

	/**
	 * Enables sorting of the value cells in columns.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "allowSorting", optionValue: boolean): void;

	/**
	 * Gets the default sort direction for the rows.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "firstSortDirection"): any;

	/**
	 * Sets the default sort direction for the rows.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "firstSortDirection", optionValue: any): void;

	/**
	 * Enables sorting of the header cells in rows.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "allowHeaderRowsSorting"): boolean;

	/**
	 * Enables sorting of the header cells in rows.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "allowHeaderRowsSorting", optionValue: boolean): void;

	/**
	 * Enables sorting of the header cells in columns.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "allowHeaderColumnsSorting"): boolean;

	/**
	 * Enables sorting of the header cells in columns.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "allowHeaderColumnsSorting", optionValue: boolean): void;

	/**
	 * An array of level sort direction items, which predefine the sorted header cells.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "levelSortDirections"): IgPivotGridLevelSortDirection[];

	/**
	 * An array of level sort direction items, which predefine the sorted header cells.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "levelSortDirections", optionValue: IgPivotGridLevelSortDirection[]): void;

	/**
	 * Gets the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
	 */

	igPivotGrid(optionLiteral: 'option', optionName: "defaultLevelSortBehavior"): string;

	/**
	 * Sets the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
	 *
	 * @optionValue New value to be set.
	 */

	igPivotGrid(optionLiteral: 'option', optionName: "defaultLevelSortBehavior", optionValue: string): void;

	/**
	 * Gets the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "firstLevelSortDirection"): any;

	/**
	 * Sets the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "firstLevelSortDirection", optionValue: any): void;

	/**
	 * Options specific to the igGrid that will render the pivot grid view.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "gridOptions"): IgPivotGridGridOptions;

	/**
	 * Options specific to the igGrid that will render the pivot grid view.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "gridOptions", optionValue: IgPivotGridGridOptions): void;

	/**
	 * Settings for the drag and drop functionality of the igPivotGrid.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dragAndDropSettings"): IgPivotGridDragAndDropSettings;

	/**
	 * Settings for the drag and drop functionality of the igPivotGrid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dragAndDropSettings", optionValue: IgPivotGridDragAndDropSettings): void;

	/**
	 * Gets the parent for the drop downs.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dropDownParent"): any;

	/**
	 * Sets the parent for the drop downs.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dropDownParent", optionValue: any): void;

	/**
	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "disableRowsDropArea"): boolean;

	/**
	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "disableRowsDropArea", optionValue: boolean): void;

	/**
	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "disableColumnsDropArea"): boolean;

	/**
	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "disableColumnsDropArea", optionValue: boolean): void;

	/**
	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "disableMeasuresDropArea"): boolean;

	/**
	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "disableMeasuresDropArea", optionValue: boolean): void;

	/**
	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "disableFiltersDropArea"): boolean;

	/**
	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "disableFiltersDropArea", optionValue: boolean): void;

	/**
	 * Hide the rows drop area.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "hideRowsDropArea"): boolean;

	/**
	 * Hide the rows drop area.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "hideRowsDropArea", optionValue: boolean): void;

	/**
	 * Hide the columns drop area.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "hideColumnsDropArea"): boolean;

	/**
	 * Hide the columns drop area.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "hideColumnsDropArea", optionValue: boolean): void;

	/**
	 * Hide the measures drop area.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "hideMeasuresDropArea"): boolean;

	/**
	 * Hide the measures drop area.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "hideMeasuresDropArea", optionValue: boolean): void;

	/**
	 * Hide the filters drop area.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "hideFiltersDropArea"): boolean;

	/**
	 * Hide the filters drop area.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "hideFiltersDropArea", optionValue: boolean): void;

	/**
	 * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
	 *
	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
	 * paramType="string" The unique name of the item.
	 * returnType="bool"  The function must return true if the item should be accepted.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "customMoveValidation"): Function;

	/**
	 * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
	 *
	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
	 * paramType="string" The unique name of the item.
	 * returnType="bool"  The function must return true if the item should be accepted.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "customMoveValidation", optionValue: Function): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igPivotGrid(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPivotGrid(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired after the data source has initialized.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dataSourceInitialized"): DataSourceInitializedEvent;

	/**
	 * Fired after the data source has initialized.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dataSourceInitialized", optionValue: DataSourceInitializedEvent): void;

	/**
	 * Fired after the data source has updated.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dataSourceUpdated"): DataSourceUpdatedEvent;

	/**
	 * Fired after the data source has updated.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dataSourceUpdated", optionValue: DataSourceUpdatedEvent): void;

	/**
	 * Event fired after the headers have been rendered.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "pivotGridHeadersRendered"): PivotGridHeadersRenderedEvent;

	/**
	 * Event fired after the headers have been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "pivotGridHeadersRendered", optionValue: PivotGridHeadersRenderedEvent): void;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "pivotGridRendered"): PivotGridRenderedEvent;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 *
	 * @optionValue Define event handler function.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "pivotGridRendered", optionValue: PivotGridRenderedEvent): void;

	/**
	 * Fired before the expand of the tuple member. Return false to cancel the expanding.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberExpanding"): TupleMemberExpandingEvent;

	/**
	 * Fired before the expand of the tuple member. Return false to cancel the expanding.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberExpanding", optionValue: TupleMemberExpandingEvent): void;

	/**
	 * Fired after the expand of the tuple member.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberExpanded"): TupleMemberExpandedEvent;

	/**
	 * Fired after the expand of the tuple member.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberExpanded", optionValue: TupleMemberExpandedEvent): void;

	/**
	 * Fired before the collapse of the tuple member. Return false to cancel the collapsing.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberCollapsing"): TupleMemberCollapsingEvent;

	/**
	 * Fired before the collapse of the tuple member. Return false to cancel the collapsing.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberCollapsing", optionValue: TupleMemberCollapsingEvent): void;

	/**
	 * Fired after the collapse of the tuple member.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberCollapsed"): TupleMemberCollapsedEvent;

	/**
	 * Fired after the collapse of the tuple member.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberCollapsed", optionValue: TupleMemberCollapsedEvent): void;

	/**
	 * Fired before the sorting of the columns. Return false to cancel the sorting.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "sorting"): SortingEvent;

	/**
	 * Fired before the sorting of the columns. Return false to cancel the sorting.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "sorting", optionValue: SortingEvent): void;

	/**
	 * Fired after the sorting of the columns.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "sorted"): SortedEvent;

	/**
	 * Fired after the sorting of the columns.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "sorted", optionValue: SortedEvent): void;

	/**
	 * Fired before the sorting of the headers. Return false to cancel the sorting.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "headersSorting"): HeadersSortingEvent;

	/**
	 * Fired before the sorting of the headers. Return false to cancel the sorting.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "headersSorting", optionValue: HeadersSortingEvent): void;

	/**
	 * Fired after the sorting of the headers.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "headersSorted"): HeadersSortedEvent;

	/**
	 * Fired after the sorting of the headers.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "headersSorted", optionValue: HeadersSortedEvent): void;

	/**
	 * Fired on drag start. Return false to cancel the dragging.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dragStart"): DragStartEvent;

	/**
	 * Fired on drag start. Return false to cancel the dragging.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dragStart", optionValue: DragStartEvent): void;

	/**
	 * Fired on drag. Return false to cancel the drag.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "drag"): DragEvent;

	/**
	 * Fired on drag. Return false to cancel the drag.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "drag", optionValue: DragEvent): void;

	/**
	 * Fired on drag stop.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dragStop"): DragStopEvent;

	/**
	 * Fired on drag stop.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "dragStop", optionValue: DragStopEvent): void;

	/**
	 * Fired before a metadata item drop. Return false to cancel the drop.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "metadataDropping"): MetadataDroppingEvent;

	/**
	 * Fired before a metadata item drop. Return false to cancel the drop.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "metadataDropping", optionValue: MetadataDroppingEvent): void;

	/**
	 * Fired after a metadata item drop.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "metadataDropped"): MetadataDroppedEvent;

	/**
	 * Fired after a metadata item drop.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "metadataDropped", optionValue: MetadataDroppedEvent): void;

	/**
	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "metadataRemoving"): MetadataRemovingEvent;

	/**
	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "metadataRemoving", optionValue: MetadataRemovingEvent): void;

	/**
	 * Fired after a metadata item is removed when the user clicks the close icon.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "metadataRemoved"): MetadataRemovedEvent;

	/**
	 * Fired after a metadata item is removed when the user clicks the close icon.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "metadataRemoved", optionValue: MetadataRemovedEvent): void;

	/**
	 * Fired before the filter members drop down opens. Return false to cancel the opening.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOpening"): FilterDropDownOpeningEvent;

	/**
	 * Fired before the filter members drop down opens. Return false to cancel the opening.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOpening", optionValue: FilterDropDownOpeningEvent): void;

	/**
	 * Fired after the filter members drop down opens.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOpened"): FilterDropDownOpenedEvent;

	/**
	 * Fired after the filter members drop down opens.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOpened", optionValue: FilterDropDownOpenedEvent): void;

	/**
	 * Fired after the filter members are loaded.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterMembersLoaded"): FilterMembersLoadedEvent;

	/**
	 * Fired after the filter members are loaded.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterMembersLoaded", optionValue: FilterMembersLoadedEvent): void;

	/**
	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOk"): FilterDropDownOkEvent;

	/**
	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOk", optionValue: FilterDropDownOkEvent): void;

	/**
	 * Fired before the filter members drop down closes. Return false to cancel the closing.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownClosing"): FilterDropDownClosingEvent;

	/**
	 * Fired before the filter members drop down closes. Return false to cancel the closing.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownClosing", optionValue: FilterDropDownClosingEvent): void;

	/**
	 * Fired after the filter members drop down closes.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownClosed"): FilterDropDownClosedEvent;

	/**
	 * Fired after the filter members drop down closes.
	 *
	 * @optionValue New value to be set.
	 */
	igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownClosed", optionValue: FilterDropDownClosedEvent): void;
	igPivotGrid(options: IgPivotGrid): JQuery;
	igPivotGrid(optionLiteral: 'option', optionName: string): any;
	igPivotGrid(optionLiteral: 'option', options: IgPivotGrid): JQuery;
	igPivotGrid(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igPivotGrid(methodName: string, ...methodParams: any[]): any;
}
interface IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions {
	/**
	 * The value is applied to XmlHttpRequest.withCredentials if supported by the user agent.
	 * Setting this property to true will allow IE8/IE9 to make authenticated cross-origin requests to tusted domains through XmlHttpRequest instead of XDomainRequest
	 * and will prompt the user for credentials.
	 */
	withCredentials?: boolean;

	/**
	 * A callback to be invoked right before the request is send to the server. Extends beforeSend callback of jQuery.ajax’s options object.
	 */
	beforeSend?: Function;

	/**
	 * Option for IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings {
	/**
	 * Optional="true" a value indicating whether a NON EMPTY clause is present on ROWS axis. Default value is true
	 */
	nonEmptyOnRows?: boolean;

	/**
	 * Optional="true" a value indicating whether a NON EMPTY clause is present on COLUMNS axis. Default value is true
	 */
	nonEmptyOnColumns?: boolean;

	/**
	 * Optional="true" a value indicating whether a members' set expressions on ROWS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
	 */
	addCalculatedMembersOnRows?: boolean;

	/**
	 * Optional="true" a value indicating whether a members' set expressions on COLUMNS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
	 */
	addCalculatedMembersOnColumns?: boolean;

	/**
	 * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on ROWS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
	 */
	dimensionPropertiesOnRows?: any[];

	/**
	 * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on COLUMNS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
	 */
	dimensionPropertiesOnColumns?: any[];

	/**
	 * Option for IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsXmlaOptions {
	/**
	 * Optional="false" The URL of the XMLA server.
	 */
	serverUrl?: string;

	/**
	 * The catalog name.
	 */
	catalog?: string;

	/**
	 * The name of the cube in the data source.
	 */
	cube?: string;

	/**
	 * The name of the measure group in the data source.
	 */
	measureGroup?: string;

	/**
	 * An object containing information about how the request to the XMLA server should be processed.
	 */
	requestOptions?: IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions;

	/**
	 * Enables/disables caching of the XMLA result object.
	 */
	enableResultCache?: boolean;

	/**
	 * Additional properties sent with every discover request.
	 * The object is treated as a key/value store where each property name is used as the key and the property value as the value.
	 */
	discoverProperties?: any;

	/**
	 * Additional properties sent with every execute request.
	 * The object is treated as a key/value store where each property name is used as the key and the property value as the value.
	 */
	executeProperties?: any;

	/**
	 * Optional="true" a javascript object containing information about how the request to the xmla server should be processed
	 */
	mdxSettings?: IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings;

	/**
	 * Option for IgPivotViewDataSourceOptionsXmlaOptions
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure {
	/**
	 * Optional="false" A unique name for the measure.
	 */
	name?: string;

	/**
	 * A caption for the measure.
	 */
	caption?: string;

	/**
	 * Optional="false" An aggregator function called when each cell is evaluated.
	 * Returns a value for the cell. If the returned value is null, no cell will be created in for the data source result.
	 */
	aggregator?: Function;

	/**
	 * The path used when displaying the measure in the user interface. Nested folders are indicated by a backslash (\).
	 */
	displayFolder?: string;

	/**
	 * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension {
	/**
	 * A unique name for the measures dimension.
	 * The default value is "Measures". This name is used to create the names of dimensions using the following pattern:
	 * [<measuresDimensionMetadata.name>].[<measureMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the measures dimension.
	 * The default value is "Measures".
	 */
	caption?: string;

	/**
	 * An array of measure metadata objects.
	 */
	measures?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure[];

	/**
	 * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel {
	/**
	 * Optional="false" A name for the level.
	 * The unique name of the level is formed using the following pattern:
	 * {<hierarchy.uniqueName>}.[<levelMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the level.
	 */
	caption?: string;

	/**
	 * A function called for each item of the data source array when level members are created.
	 * Based on the item parameter the function should return a value that will form the $.ig.Member’s name and caption.
	 */
	memberProvider?: Function;

	/**
	 * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie {
	/**
	 * Optional="false" A name for the hierarchy.
	 * The unique name of the hierarchy is formed using the following pattern:
	 * [<parentDimension.name>].[<hierarchyMetadata.name>]
	 */
	name?: string;

	/**
	 * A caption for the hierarchy.
	 */
	caption?: string;

	/**
	 * The path to be used when displaying the hierarchy in the user interface.
	 * Nested folders are indicated by a backslash (\).
	 * The folder hierarchy will appear under parent dimension node.
	 */
	displayFolder?: string;

	/**
	 * An array of level metadata objects.
	 */
	levels?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel[];

	/**
	 * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension {
	/**
	 * Optional="false" A unique name for the dimension.
	 */
	name?: string;

	/**
	 * A caption for the dimension.
	 */
	caption?: string;

	/**
	 * An array of hierarchy metadata objects.
	 */
	hierarchies?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie[];

	/**
	 * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube {
	/**
	 * Optional="false" A unique name for the cube.
	 */
	name?: string;

	/**
	 * A caption for the cube.
	 */
	caption?: string;

	/**
	 * An object providing information about the measures' root node.
	 */
	measuresDimension?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension;

	/**
	 * An array of dimension metadata objects.
	 */
	dimensions?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension[];

	/**
	 * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadata {
	/**
	 * Optional="false" Metadata used for the creation of the cube.
	 */
	cube?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube;

	/**
	 * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadata
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptionsFlatDataOptions {
	/**
	 * Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
	 */
	dataSource?: any;

	/**
	 * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 */
	dataSourceType?: string;

	/**
	 * See $.ig.DataSource.
	 * string  Specifies the name of the property in which data records are held if the response is wrapped.
	 * null  Option is ignored.
	 */
	responseDataKey?: string;

	/**
	 * String  Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 * null  Option is ignored.
	 */
	responseDataType?: string;

	/**
	 * Optional="false" An object containing processing instructions for the $.ig.DataSource data.
	 */
	metadata?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadata;

	/**
	 * Option for IgPivotViewDataSourceOptionsFlatDataOptions
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSourceOptions {
	/**
	 * Settings for creating an instance of $.ig.OlapXmlaDataSource.
	 */
	xmlaOptions?: IgPivotViewDataSourceOptionsXmlaOptions;

	/**
	 * Settings for creating an instance of $.ig.OlapFlatDataSource.
	 */
	flatDataOptions?: IgPivotViewDataSourceOptionsFlatDataOptions;

	/**
	 * A list of measure names separated by comma (,). These will be the measures of the data source.
	 */
	measures?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
	 */
	filters?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
	 */
	rows?: string;

	/**
	 * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
	 */
	columns?: string;

	/**
	 * Option for IgPivotViewDataSourceOptions
	 */
	[optionName: string]: any;
}

interface IgPivotViewPivotGridOptionsLevelSortDirection {
	/**
	 * Specifies the unique name of the level, which will be sorted.
	 */
	levelUniqueName?: string;

	/**
	 * optional="true" Specifies the sort direction. If no direction is specified,the level is going to be sorted in the direction specified by the firstLevelSortDirection option.
	 *
	 */
	sortDirection?: any;

	/**
	 * Option for IgPivotViewPivotGridOptionsLevelSortDirection
	 */
	[optionName: string]: any;
}

interface IgPivotViewPivotGridOptionsGridOptionsFeatures {
	/**
	 * Option for IgPivotViewPivotGridOptionsGridOptionsFeatures
	 */
	[optionName: string]: any;
}

interface IgPivotViewPivotGridOptionsGridOptions {
	/**
	 * Default column width that will be set for all columns.
	 *
	 * Valid values:
	 * "string" The default column width can be set in pixels (px).
	 * "number" The default column width can be set as a number.
	 */
	defaultColumnWidth?: string|number;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable.
	 */
	fixedHeaders?: boolean;

	/**
	 * Caption text that will be shown above the pivot grid header.
	 */
	caption?: string;

	/**
	 * A list of grid features definitions. The supported features are Resizing and Tooltips. Each feature goes with its separate options that are documented for the feature accordingly.
	 */
	features?: IgPivotViewPivotGridOptionsGridOptionsFeatures;

	/**
	 * Initial tabIndex attribute that will be set on the container element.
	 */
	tabIndex?: number;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling). Note that if a custom jQuery template is set, this has no effect and CSS for the row should be adjusted manually in the template contents.
	 */
	alternateRowStyles?: boolean;

	/**
	 * Enables/disables rendering of ui-state-hover classes when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 */
	enableHoverStyles?: boolean;

	/**
	 * Option for IgPivotViewPivotGridOptionsGridOptions
	 */
	[optionName: string]: any;
}

interface IgPivotViewPivotGridOptionsDragAndDropSettings {
	/**
	 * Which element the draggable helper should be appended to while dragging.
	 */
	appendTo?: any;

	/**
	 * Specifies the containment for the drag helper. The area inside of which thehelper is contained would be scrollable while dragging.
	 *
	 */
	containment?: boolean|string|Array<any>;

	/**
	 * Specifies z-index that would be set for the drag helper.
	 */
	zIndex?: number;

	/**
	 * Option for IgPivotViewPivotGridOptionsDragAndDropSettings
	 */
	[optionName: string]: any;
}

interface IgPivotViewPivotGridOptions {
	/**
	 * A boolean value indicating whether a parent in the columns is in front of its children.
	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 */
	isParentInFrontForColumns?: boolean;

	/**
	 * A boolean value indicating whether a parent in the rows is in front of its children.
	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
	 */
	isParentInFrontForRows?: boolean;

	/**
	 * A boolean value indicating wheter the column headers should be arranged for compact header layout – each hieararchy is in a single row.
	 */
	compactColumnHeaders?: boolean;

	/**
	 * A value indicating wheter the layout that row headers should be arranged. For compact header layout – each hieararchy is in a single column.
	 */
	rowHeadersLayout?: any;

	/**
	 * The indentation for every level column when the compactColumnHeaders is set to true.
	 */
	compactColumnHeaderIndentation?: number;

	/**
	 * The indentation for every level row when the rowHeadersLayout is set to 'compact'.
	 */
	compactRowHeaderIndentation?: number;

	/**
	 * Typle="number" Specifies the width of the row headers.
	 */
	defaultRowHeaderWidth?: number;

	/**
	 * Enables sorting of the value cells in columns.
	 */
	allowSorting?: boolean;

	/**
	 * Spefies the default sort direction for the rows.
	 */
	firstSortDirection?: any;

	/**
	 * Enables sorting of the header cells in rows.
	 */
	allowHeaderRowsSorting?: boolean;

	/**
	 * Enables sorting of the header cells in columns.
	 */
	allowHeaderColumnsSorting?: boolean;

	/**
	 * An array of level sort direction items, which predefine the sorted header cells.
	 */
	levelSortDirections?: IgPivotViewPivotGridOptionsLevelSortDirection[];

	/**
	 * Spefies the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
	 */
	firstLevelSortDirection?: any;

	/**
	 * Options specific to the igGrid that will render the pivot grid view.
	 */
	gridOptions?: IgPivotViewPivotGridOptionsGridOptions;

	/**
	 * Settings for the drag and drop functionality of the igPivotDataSelector.
	 */
	dragAndDropSettings?: IgPivotViewPivotGridOptionsDragAndDropSettings;

	/**
	 * Specifies the parent for the drop downs.
	 */
	dropDownParent?: any;

	/**
	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
	 */
	disableRowsDropArea?: boolean;

	/**
	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
	 */
	disableColumnsDropArea?: boolean;

	/**
	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
	 */
	disableMeasuresDropArea?: boolean;

	/**
	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
	 */
	disableFiltersDropArea?: boolean;

	/**
	 * Hide the rows drop area.
	 */
	hideRowsDropArea?: boolean;

	/**
	 * Hide the columns drop area.
	 */
	hideColumnsDropArea?: boolean;

	/**
	 * Hide the measures drop area.
	 */
	hideMeasuresDropArea?: boolean;

	/**
	 * Hide the filters drop area.
	 */
	hideFiltersDropArea?: boolean;

	/**
	 * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
	 * paramType="string" The unique name of the item.
	 * returnType="bool"  The function must return true if the item should be accepted.
	 */
	customMoveValidation?: Function;

	/**
	 * Option for IgPivotViewPivotGridOptions
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSelectorOptionsDragAndDropSettings {
	/**
	 * Which element the draggable helper should be appended to while dragging.
	 */
	appendTo?: any;

	/**
	 * Specifies the containment for the drag helper. The area inside of which thehelper is contained would be scrollable while dragging.
	 *
	 */
	containment?: boolean|string|Array<any>;

	/**
	 * Specifies z-index that would be set for the drag helper.
	 */
	zIndex?: number;

	/**
	 * Option for IgPivotViewDataSelectorOptionsDragAndDropSettings
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSelectorOptions {
	/**
	 * Settings for the drag and drop functionality of the igPivotDataSelector.
	 */
	dragAndDropSettings?: IgPivotViewDataSelectorOptionsDragAndDropSettings;

	/**
	 * Specifies the parent for the drop downs.
	 */
	dropDownParent?: any;

	/**
	 * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
	 * paramType="string" The unique name of the item.
	 * returnType="bool"  The function must return true if the item should be accepted.
	 */
	customMoveValidation?: Function;

	/**
	 * Option for IgPivotViewDataSelectorOptions
	 */
	[optionName: string]: any;
}

interface IgPivotViewPivotGridPanel {
	/**
	 * Determines if the panel containing the igPivotGrid will be resizable.
	 */
	resizable?: boolean;

	/**
	 * Determines if the panel containing the igPivotGrid will be collapsible.
	 */
	collapsible?: boolean;

	/**
	 * Determines if the panel containing the igPivotGrid will initially collapsed.
	 */
	collapsed?: boolean;

	/**
	 * Determines the size of the igPivotGrid panel.
	 *
	 * Valid values:
	 * "string" The panel size can be set in pixels (px).
	 * "number" The size can be set as a number.
	 * "null" will automatically size the panel.
	 */
	size?: string|number;

	/**
	 * Option for IgPivotViewPivotGridPanel
	 */
	[optionName: string]: any;
}

interface IgPivotViewDataSelectorPanel {
	/**
	 * Determines the position of the data selector panel inside the igPivotView widget.
	 */
	location?: any;

	/**
	 * Determines if the panel containing the igPivotDataSelector will be resizable.
	 */
	resizable?: boolean;

	/**
	 * Determines if the panel containing the igPivotDataSelector will be collapsible.
	 */
	collapsible?: boolean;

	/**
	 * Determines if the panel containing the igPivotDataSelector will initially collapsed.
	 */
	collapsed?: boolean;

	/**
	 * Determines the size of the igPivotDataSelector  panel. The recommended value is 250px.
	 *
	 * Valid values:
	 * "string" The panel size can be set in pixels (px).
	 * "number" The size can be set as a number.
	 * "null" will automatically size the panel.
	 */
	size?: string|number;

	/**
	 * Option for IgPivotViewDataSelectorPanel
	 */
	[optionName: string]: any;
}

interface IgPivotView {
	/**
	 *
	 *
	 * Valid values:
	 * "string" The widget width can be set in pixels (px) and percentage (%).
	 * "number" The widget width can be set as a number.
	 * "null" will stretch to fit the parent, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 *
	 *
	 * Valid values:
	 * "string" The widget height can be set in pixels (px) and percentage (%).
	 * "number" The widget height can be set as a number.
	 * "null" will stretch vertically to fit the parent, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 *
	 */
	dataSource?: any;

	/**
	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
	 *
	 */
	dataSourceOptions?: IgPivotViewDataSourceOptions;

	/**
	 * Configuration settings that will be assigned to the igPivotGrid widget.
	 *
	 */
	pivotGridOptions?: IgPivotViewPivotGridOptions;

	/**
	 * Configuration settings that will be assigned to the igPivotDataSelector widget.
	 *
	 */
	dataSelectorOptions?: IgPivotViewDataSelectorOptions;

	/**
	 * Configuration settings for the panel containing the igPivotGrid.
	 *
	 */
	pivotGridPanel?: IgPivotViewPivotGridPanel;

	/**
	 * Configuration settings for the panel containing the igPivotDataSelector.
	 *
	 */
	dataSelectorPanel?: IgPivotViewDataSelectorPanel;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Option for igPivotView
	 */
	[optionName: string]: any;
}
interface IgPivotViewMethods {
	/**
	 * Returns the igPivotGrid instance of the pivot view.
	 */
	pivotGrid(): Object;

	/**
	 * Returns the igPivotDataSelector instance of the pivot view.
	 */
	dataSelector(): Object;

	/**
	 * Returns the igSplitter instance used to separate the pivot grid and the data selector.
	 */
	splitter(): Object;

	/**
	 * Destroy is part of the jQuery UI widget API and does the following:
	 * 1. Remove custom CSS classes that were added.
	 * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
	 * 3. Unbind all events that were bound.
	 */
	destroy(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igPivotView"): IgPivotViewMethods;
}

interface JQuery {
	igPivotView(methodName: "pivotGrid"): Object;
	igPivotView(methodName: "dataSelector"): Object;
	igPivotView(methodName: "splitter"): Object;
	igPivotView(methodName: "destroy"): void;
	igPivotView(methodName: "changeLocale", $container: Object): void;
	igPivotView(methodName: "changeGlobalLanguage"): void;
	igPivotView(methodName: "changeGlobalRegional"): void;

	/**
	 * *
	 */

	igPivotView(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * *
	 *
	 * @optionValue New value to be set.
	 */

	igPivotView(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * *
	 */

	igPivotView(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * *
	 *
	 * @optionValue New value to be set.
	 */

	igPivotView(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 *
	 */
	igPivotView(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotView(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
	 *
	 */
	igPivotView(optionLiteral: 'option', optionName: "dataSourceOptions"): IgPivotViewDataSourceOptions;

	/**
	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotView(optionLiteral: 'option', optionName: "dataSourceOptions", optionValue: IgPivotViewDataSourceOptions): void;

	/**
	 * Configuration settings that will be assigned to the igPivotGrid widget.
	 *
	 */
	igPivotView(optionLiteral: 'option', optionName: "pivotGridOptions"): IgPivotViewPivotGridOptions;

	/**
	 * Configuration settings that will be assigned to the igPivotGrid widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotView(optionLiteral: 'option', optionName: "pivotGridOptions", optionValue: IgPivotViewPivotGridOptions): void;

	/**
	 * Configuration settings that will be assigned to the igPivotDataSelector widget.
	 *
	 */
	igPivotView(optionLiteral: 'option', optionName: "dataSelectorOptions"): IgPivotViewDataSelectorOptions;

	/**
	 * Configuration settings that will be assigned to the igPivotDataSelector widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotView(optionLiteral: 'option', optionName: "dataSelectorOptions", optionValue: IgPivotViewDataSelectorOptions): void;

	/**
	 * Configuration settings for the panel containing the igPivotGrid.
	 *
	 */
	igPivotView(optionLiteral: 'option', optionName: "pivotGridPanel"): IgPivotViewPivotGridPanel;

	/**
	 * Configuration settings for the panel containing the igPivotGrid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotView(optionLiteral: 'option', optionName: "pivotGridPanel", optionValue: IgPivotViewPivotGridPanel): void;

	/**
	 * Configuration settings for the panel containing the igPivotDataSelector.
	 *
	 */
	igPivotView(optionLiteral: 'option', optionName: "dataSelectorPanel"): IgPivotViewDataSelectorPanel;

	/**
	 * Configuration settings for the panel containing the igPivotDataSelector.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotView(optionLiteral: 'option', optionName: "dataSelectorPanel", optionValue: IgPivotViewDataSelectorPanel): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igPivotView(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotView(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igPivotView(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPivotView(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igPivotView(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPivotView(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igPivotView(options: IgPivotView): JQuery;
	igPivotView(optionLiteral: 'option', optionName: string): any;
	igPivotView(optionLiteral: 'option', options: IgPivotView): JQuery;
	igPivotView(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igPivotView(methodName: string, ...methodParams: any[]): any;
}
interface IgPopover {
	/**
	 * Controls whether the popover will close on blur or not
	 *
	 */
	closeOnBlur?: boolean;

	/**
	 * controls the direction in which the control shows relative to the target element
	 *
	 *
	 * Valid values:
	 * "auto" lets the control show on the side where enough space is available with the priority specified by the [directionPriority](ui.%%WidgetNameLowered%%#options:directionPriority) property
	 * "left" shows popover on the left side of the target element
	 * "right" shows popover on the right side of the target element
	 * "top" shows popover on the top of the target element
	 * "bottom" shows popover on the bottom of the target element
	 */
	direction?: string;

	/**
	 * Controls the priority in which the control searches for space to show relative to the target element.
	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
	 *
	 */
	directionPriority?: any[];

	/**
	 * controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
	 *
	 *
	 * Valid values:
	 * "auto" lets the control choose a position depending on available space with the following priority balanced > end > start
	 * "balanced" the popover is positioned at the middle of the target element
	 * "start" the popover is positioned at the beginning of the target element
	 * "end" the popover is positioned at the end of the target element
	 */
	position?: string;

	/**
	 * defines width for the popover. leave null for auto.
	 *
	 */
	width?: number|string;

	/**
	 * defines height for the popover. leave null for auto
	 *
	 */
	height?: number|string;

	/**
	 * defines width the popover won't go under the value even if no specific one is set.
	 *
	 */
	minWidth?: number|string;

	/**
	 * defines width the popover won't exceed even if no specific one is set.
	 *
	 */
	maxWidth?: number|string;

	/**
	 * defines height the popover won't exceed even if no specific one is set.
	 *
	 */
	maxHeight?: number|string;

	/**
	 * Sets the time popover fades in and out when showing/hiding
	 *
	 */
	animationDuration?: number;

	/**
	 * sets the content for the popover container. If left null the content will be get from the target.
	 *
	 *
	 * Valid values:
	 * "string" String content of the popover container
	 * "function" Function which is a callback that should return the content. Use the 'this' value to access the target DOM element.
	 */
	contentTemplate?: string|Function;

	/**
	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
	 *
	 */
	selectors?: string;

	/**
	 * Sets the content for the popover header
	 *
	 */
	headerTemplate?: IgPopoverHeaderTemplate;

	/**
	 * sets the event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
	 *
	 *
	 * Valid values:
	 * "mouseenter" the popover is shown on mouse enter in the target element
	 * "click" the popover is shown on click on the target element
	 * "focus" the popover is shown on focusing the target element
	 */
	showOn?: string;

	/**
	 * Sets the containment for the popover. Accepts a jQuery object
	 *
	 */
	containment?: any;

	/**
	 * Controls where the popover DOM should be attached to.
	 *
	 *
	 * Valid values:
	 * "string" A valid jQuery selector for the element
	 * "object" A reference to the parent jQuery object
	 */
	appendTo?: string|Object;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before popover is shown.
	 */
	showing?: ShowingEvent;

	/**
	 * Event fired after popover is shown.
	 */
	shown?: ShownEvent;

	/**
	 * Event fired before popover is hidden.
	 */
	hiding?: HidingEvent;

	/**
	 * Event fired after popover is hidden.
	 */
	hidden?: HiddenEvent;

	/**
	 * Option for igPopover
	 */
	[optionName: string]: any;
}
interface IgPopoverMethods {
	/**
	 * Destroys the popover widget.
	 */
	destroy(): void;

	/**
	 * Returns the ID of the element the popover is attached to
	 */
	id(): string;

	/**
	 * Returns the container for the popover contents
	 */
	container(): Object;

	/**
	 * Shows the popover for the specified target
	 *
	 * @param trg The element to show popover for.
	 * @param content The string to set for the popover to show.
	 */
	show(trg?: Element, content?: string): void;

	/**
	 * Hides the popover for the specified target
	 */
	hide(): void;

	/**
	 * Gets the currently set content for the popover container
	 */
	getContent(): string;

	/**
	 * Sets the content for the popover container
	 *
	 * @param newCnt The popover content to set.
	 */
	setContent(newCnt: string): void;

	/**
	 * Gets the popover current target
	 */
	target(): Object;

	/**
	 * Gets the current coordinates of the popover
	 */
	getCoordinates(): Object;

	/**
	 * Sets the popover to specific coordinates.
	 *
	 * @param pos The popover coordinates in pixels.
	 */
	setCoordinates(pos: Object): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igPopover"): IgPopoverMethods;
}

interface JQuery {
	igPopover(methodName: "destroy"): void;
	igPopover(methodName: "id"): string;
	igPopover(methodName: "container"): Object;
	igPopover(methodName: "show", trg?: Element, content?: string): void;
	igPopover(methodName: "hide"): void;
	igPopover(methodName: "getContent"): string;
	igPopover(methodName: "setContent", newCnt: string): void;
	igPopover(methodName: "target"): Object;
	igPopover(methodName: "getCoordinates"): Object;
	igPopover(methodName: "setCoordinates", pos: Object): void;
	igPopover(methodName: "changeLocale", $container: Object): void;
	igPopover(methodName: "changeGlobalLanguage"): void;
	igPopover(methodName: "changeGlobalRegional"): void;

	/**
	 * Controls whether the popover will close on blur or not
	 *
	 */
	igPopover(optionLiteral: 'option', optionName: "closeOnBlur"): boolean;

	/**
	 * Controls whether the popover will close on blur or not
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPopover(optionLiteral: 'option', optionName: "closeOnBlur", optionValue: boolean): void;

	/**
	 * Controls the direction in which the control shows relative to the target element
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "direction"): string;

	/**
	 * Controls the direction in which the control shows relative to the target element
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "direction", optionValue: string): void;

	/**
	 * Controls the priority in which the control searches for space to show relative to the target element.
	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
	 *
	 */
	igPopover(optionLiteral: 'option', optionName: "directionPriority"): any[];

	/**
	 * Controls the priority in which the control searches for space to show relative to the target element.
	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPopover(optionLiteral: 'option', optionName: "directionPriority", optionValue: any[]): void;

	/**
	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "position"): string;

	/**
	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "position", optionValue: string): void;

	/**
	 * Defines width for the popover. leave null for auto.
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "width"): number|string;

	/**
	 * Defines width for the popover. leave null for auto.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "width", optionValue: number|string): void;

	/**
	 * Defines height for the popover. leave null for auto
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "height"): number|string;

	/**
	 * Defines height for the popover. leave null for auto
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "height", optionValue: number|string): void;

	/**
	 * Defines width the popover won't go under the value even if no specific one is set.
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "minWidth"): number|string;

	/**
	 * Defines width the popover won't go under the value even if no specific one is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "minWidth", optionValue: number|string): void;

	/**
	 * Defines width the popover won't exceed even if no specific one is set.
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "maxWidth"): number|string;

	/**
	 * Defines width the popover won't exceed even if no specific one is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "maxWidth", optionValue: number|string): void;

	/**
	 * Defines height the popover won't exceed even if no specific one is set.
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "maxHeight"): number|string;

	/**
	 * Defines height the popover won't exceed even if no specific one is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "maxHeight", optionValue: number|string): void;

	/**
	 * The time popover fades in and out when showing/hiding
	 *
	 */
	igPopover(optionLiteral: 'option', optionName: "animationDuration"): number;

	/**
	 * Sets the time popover fades in and out when showing/hiding
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPopover(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;

	/**
	 * The content for the popover container. If left null the content will be get from the target.
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "contentTemplate"): string|Function;

	/**
	 * Sets the content for the popover container. If left null the content will be get from the target.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "contentTemplate", optionValue: string|Function): void;

	/**
	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
	 *
	 */
	igPopover(optionLiteral: 'option', optionName: "selectors"): string;

	/**
	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPopover(optionLiteral: 'option', optionName: "selectors", optionValue: string): void;

	/**
	 * The content for the popover header
	 *
	 */
	igPopover(optionLiteral: 'option', optionName: "headerTemplate"): IgPopoverHeaderTemplate;

	/**
	 * Sets the content for the popover header
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPopover(optionLiteral: 'option', optionName: "headerTemplate", optionValue: IgPopoverHeaderTemplate): void;

	/**
	 * The event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "showOn"): string;

	/**
	 * Sets the event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "showOn", optionValue: string): void;

	/**
	 * The containment for the popover. Accepts a jQuery object
	 *
	 */
	igPopover(optionLiteral: 'option', optionName: "containment"): any;

	/**
	 * Sets the containment for the popover. Accepts a jQuery object
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPopover(optionLiteral: 'option', optionName: "containment", optionValue: any): void;

	/**
	 * Controls where the popover DOM should be attached to.
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "appendTo"): string|Object;

	/**
	 * Controls where the popover DOM should be attached to.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "appendTo", optionValue: string|Object): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igPopover(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPopover(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igPopover(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igPopover(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igPopover(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igPopover(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before popover is shown.
	 */
	igPopover(optionLiteral: 'option', optionName: "showing"): ShowingEvent;

	/**
	 * Event fired before popover is shown.
	 *
	 * @optionValue Define event handler function.
	 */
	igPopover(optionLiteral: 'option', optionName: "showing", optionValue: ShowingEvent): void;

	/**
	 * Event fired after popover is shown.
	 */
	igPopover(optionLiteral: 'option', optionName: "shown"): ShownEvent;

	/**
	 * Event fired after popover is shown.
	 *
	 * @optionValue Define event handler function.
	 */
	igPopover(optionLiteral: 'option', optionName: "shown", optionValue: ShownEvent): void;

	/**
	 * Event fired before popover is hidden.
	 */
	igPopover(optionLiteral: 'option', optionName: "hiding"): HidingEvent;

	/**
	 * Event fired before popover is hidden.
	 *
	 * @optionValue Define event handler function.
	 */
	igPopover(optionLiteral: 'option', optionName: "hiding", optionValue: HidingEvent): void;

	/**
	 * Event fired after popover is hidden.
	 */
	igPopover(optionLiteral: 'option', optionName: "hidden"): HiddenEvent;

	/**
	 * Event fired after popover is hidden.
	 *
	 * @optionValue Define event handler function.
	 */
	igPopover(optionLiteral: 'option', optionName: "hidden", optionValue: HiddenEvent): void;
	igPopover(options: IgPopover): JQuery;
	igPopover(optionLiteral: 'option', optionName: string): any;
	igPopover(optionLiteral: 'option', options: IgPopover): JQuery;
	igPopover(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igPopover(methodName: string, ...methodParams: any[]): any;
}
interface ErrorMessageDisplayingEvent {
	(event: Event, ui: ErrorMessageDisplayingEventUIParam): void;
}

interface ErrorMessageDisplayingEventUIParam {
	/**
	 * Used to obtain reference to the barcode widget.
	 */
	owner?: any;

	/**
	 * Used to get or set the error message that is to be shown.
	 */
	errorMessage?: any;
}

interface DataChangedEvent {
	(event: Event, ui: DataChangedEventUIParam): void;
}

interface DataChangedEventUIParam {
	/**
	 * Used to obtain reference to the barcode widget.
	 */
	owner?: any;

	/**
	 * Used to obtain the new data.
	 */
	newData?: any;
}

interface IgQRCodeBarcode {
	/**
	 * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Gets or sets the brush to use to fill the backing of the barcode.
	 */
	backingBrush?: string;

	/**
	 * Gets or sets the brush to use for the outline of the backing.
	 */
	backingOutline?: string;

	/**
	 * Gets or sets the stroke thickness of the backing outline.
	 */
	backingStrokeThickness?: number;

	/**
	 * Gets or sets the brush to use to fill the background of the bars.
	 */
	barBrush?: string;

	/**
	 * Gets or sets the brush to use for the label font.
	 */
	fontBrush?: string;

	/**
	 * Gets or sets the font of the text displayed by the control.
	 */
	font?: string;

	/**
	 * Gets or sets the data value.
	 */
	data?: string;

	/**
	 * Gets or sets the message text displayed when some error occurs.
	 */
	errorMessageText?: string;

	/**
	 * Gets or sets the stretch.
	 *
	 * Valid values:
	 * "none"
	 * "fill"
	 * "uniform"
	 * "uniformToFill"
	 */
	stretch?: string;

	/**
	 * Gets or sets a value which specifies how the grid fills within the barcode control dimensions.
	 *
	 * Valid values:
	 * "fillSpace" FillSpace mode ensures that the barcode grid fills the control dimensions.
	 * "ensureEqualSize" EnsureEqualSize mode ensures that every grid column/row has the same pixels number width/height. The sum of all columns/rows pixels may be less than the width/height of the control.
	 */
	barsFillMode?: string;

	/**
	 * Gets or sets the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
	 */
	widthToHeightRatio?: number;

	/**
	 * Gets or sets the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
	 */
	xDimension?: number;

	/**
	 * Gets or sets the error correction level of the QR Code symbol.
	 *
	 * Valid values:
	 * "low" Low error correction level allows recovery of 7% of the symbol codewords.
	 * "medium" Medium error correction level allows recovery of 15% of the symbol codewords.
	 * "quartil" Quartil error correction level allows recovery of 25% of the symbol codewords.
	 * "high" High error correction level allows recovery of 30% of the symbol codewords.
	 */
	errorCorrectionLevel?: string;

	/**
	 * Gets or sets the size version of the QR Code symbol.
	 *
	 * Valid values:
	 * "undefined" If set, the QR code barcode sets internally the smallest version that will accommodate the data.
	 * "version1" Version1 defines size of 21x21 modules for the symbol.
	 * "version2" Version2 defines size of 25x25 modules for the symbol.
	 * "version3" Version3 defines size of 29x29 modules for the symbol.
	 * "version4" Version4 defines size of 33x33 modules for the symbol.
	 * "version5" Version5 defines size of 37x37 modules for the symbol.
	 * "version6" Version6 defines size of 41x41 modules for the symbol.
	 * "version7" Version7 defines size of 45x45 modules for the symbol.
	 * "version8" Version8 defines size of 49x49 modules for the symbol.
	 * "version9" Version9 defines size of 53x53 modules for the symbol.
	 * "version10" Version10 defines size of 57x57 modules for the symbol.
	 * "version11" Version11 defines size of 61x61 modules for the symbol.
	 * "version12" Version12 defines size of 65x65 modules for the symbol.
	 * "version13" Version13 defines size of 69x69 modules for the symbol.
	 * "version14" Version14 defines size of 73x73 modules for the symbol.
	 * "version15" Version15 defines size of 77x77 modules for the symbol.
	 * "version16" Version16 defines size of 81x81 modules for the symbol.
	 * "version17" Version17 defines size of 85x85 modules for the symbol.
	 * "version18" Version18 defines size of 89x89 modules for the symbol.
	 * "version19" Version19 defines size of 93x93 modules for the symbol.
	 * "version20" Version20 defines size of 97x97 modules for the symbol.
	 * "version21" Version21 defines size of 101x101 modules for the symbol.
	 * "version22" Version22 defines size of 105x105 modules for the symbol.
	 * "version23" Version23 defines size of 109x109 modules for the symbol.
	 * "version24" Version24 defines size of 113x113 modules for the symbol.
	 * "version25" Version25 defines size of 117x117 modules for the symbol.
	 * "version26" Version26 defines size of 121x121 modules for the symbol.
	 * "version27" Version27 defines size of 125x125 modules for the symbol.
	 * "version28" Version28 defines size of 129x129 modules for the symbol.
	 * "version29" Version29 defines size of 133x133 modules for the symbol.
	 * "version30" Version30 defines size of 137x137 modules for the symbol.
	 * "version31" Version31 defines size of 141x141 modules for the symbol.
	 * "version32" Version32 defines size of 145x145 modules for the symbol.
	 * "version33" Version33 defines size of 149x149 modules for the symbol.
	 * "version34" Version34 defines size of 153x153 modules for the symbol.
	 * "version35" Version35 defines size of 157x157 modules for the symbol.
	 * "version36" Version36 defines size of 161x161 modules for the symbol.
	 * "version37" Version37 defines size of 165x165 modules for the symbol.
	 * "version38" Version38 defines size of 169x169 modules for the symbol.
	 * "version39" Version39 defines size of 173x173 modules for the symbol.
	 * "version40" Version40 defines size of 177x177 modules for the symbol.
	 */
	sizeVersion?: string;

	/**
	 * Gets or sets the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
	 *
	 * Valid values:
	 * "undefined" When Undefined encoding mode is set, the QR code barcode internally switches between modes as necessary in order to achieve the most efficient conversion of data into a binary string.
	 * "numeric" Numeric mode encodes data from decimal digit set (0-9). Normally 3 data characters are represented by 10 bits.
	 * "alphanumeric" Alphanumeric mode encodes data from a set of 45 characters (digits 0-9, upper case letters A-Z, nine other characters: space, $ % * + _ . / : ). Normally two input characters are represented by 11 bits.
	 * "byte" In Byte mode the data is encoded at 8 bits per character. The character set of the Byte encoding mode is byte data (by default it is ISO/IEC 8859-1 character set).
	 * "kanji" The Kanji mode efficiently encodes Kanji characters in accordance with the Shift JIS system based on JIS X 0208. Each two-byte character value is compacted to a 13-bit binary codeword.
	 */
	encodingMode?: string;

	/**
	 * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
	 * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
	 */
	eciNumber?: number;

	/**
	 * Gets or sets a value indicating whether to show the ECI header.
	 *
	 * Valid values:
	 * "hide" Hide the header.
	 * "show" Show the header.
	 */
	eciHeaderDisplayMode?: string;

	/**
	 * Gets or sets the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specifications.
	 *
	 * Valid values:
	 * "none" Do not use any Fnc1 symbols, i.e. the data is not identified according to specific predefined industry or application specifications.
	 * "gs1" Uses Fnc1 symbol in the first position of the character in Code 128 symbols and designates data formatted in accordance with the GS1 General Specification.
	 * "industry" Uses Fnc1 symbol in the second position of the character in Code 128 symbols and designates data formatted in accordance with a specific industry application previously agreed with AIM Inc.
	 */
	fnc1Mode?: string;

	/**
	 * Gets or sets the Application Indicator assigned to identify the specification concerned by AIM International.
	 * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
	 */
	applicationIndicator?: string;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Occurs when an error has happened.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the barcode widget.
	 * Use ui.errorMessage to get or set the error message that is to be shown.
	 */
	errorMessageDisplaying?: ErrorMessageDisplayingEvent;

	/**
	 * Occurs when the data has changed.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the barcode widget.
	 * Use ui.newData to obtain the new data.
	 */
	dataChanged?: DataChangedEvent;

	/**
	 * Option for igQRCodeBarcode
	 */
	[optionName: string]: any;
}
interface IgQRCodeBarcodeMethods {
	/**
	 * Returns information about how the barcode is rendered.
	 */
	exportVisualData(): Object;

	/**
	 * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.
	 */
	flush(): void;

	/**
	 * Destroys widget.
	 */
	destroy(): void;

	/**
	 * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
	 */
	styleUpdated(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igQRCodeBarcode"): IgQRCodeBarcodeMethods;
}

interface JQuery {
	igQRCodeBarcode(methodName: "exportVisualData"): Object;
	igQRCodeBarcode(methodName: "flush"): void;
	igQRCodeBarcode(methodName: "destroy"): void;
	igQRCodeBarcode(methodName: "styleUpdated"): void;
	igQRCodeBarcode(methodName: "changeLocale", $container: Object): void;
	igQRCodeBarcode(methodName: "changeGlobalLanguage"): void;
	igQRCodeBarcode(methodName: "changeGlobalRegional"): void;

	/**
	 * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Gets  the brush to use to fill the backing of the barcode.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "backingBrush"): string;

	/**
	 * Sets the brush to use to fill the backing of the barcode.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "backingBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the outline of the backing.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "backingOutline"): string;

	/**
	 * Sets the brush to use for the outline of the backing.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "backingOutline", optionValue: string): void;

	/**
	 * Gets  the stroke thickness of the backing outline.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "backingStrokeThickness"): number;

	/**
	 * Sets the stroke thickness of the backing outline.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "backingStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the brush to use to fill the background of the bars.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "barBrush"): string;

	/**
	 * Sets the brush to use to fill the background of the bars.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "barBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the label font.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "fontBrush"): string;

	/**
	 * Sets the brush to use for the label font.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "fontBrush", optionValue: string): void;

	/**
	 * Gets  the font of the text displayed by the control.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "font"): string;

	/**
	 * Sets the font of the text displayed by the control.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "font", optionValue: string): void;

	/**
	 * Gets  the data value.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "data"): string;

	/**
	 * Sets the data value.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "data", optionValue: string): void;

	/**
	 * Gets  the message text displayed when some error occurs.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "errorMessageText"): string;

	/**
	 * Sets the message text displayed when some error occurs.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "errorMessageText", optionValue: string): void;

	/**
	 * Gets  the stretch.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "stretch"): string;

	/**
	 * Sets the stretch.
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "stretch", optionValue: string): void;

	/**
	 * Gets  a value which specifies how the grid fills within the barcode control dimensions.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "barsFillMode"): string;

	/**
	 * Sets a value which specifies how the grid fills within the barcode control dimensions.
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "barsFillMode", optionValue: string): void;

	/**
	 * Gets  the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "widthToHeightRatio"): number;

	/**
	 * Sets the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "widthToHeightRatio", optionValue: number): void;

	/**
	 * Gets  the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "xDimension"): number;

	/**
	 * Sets the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "xDimension", optionValue: number): void;

	/**
	 * Gets  the error correction level of the QR Code symbol.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "errorCorrectionLevel"): string;

	/**
	 * Sets the error correction level of the QR Code symbol.
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "errorCorrectionLevel", optionValue: string): void;

	/**
	 * Gets  the size version of the QR Code symbol.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "sizeVersion"): string;

	/**
	 * Sets the size version of the QR Code symbol.
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "sizeVersion", optionValue: string): void;

	/**
	 * Gets  the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "encodingMode"): string;

	/**
	 * Sets the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "encodingMode", optionValue: string): void;

	/**
	 * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
	 * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "eciNumber"): number;

	/**
	 * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
	 * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "eciNumber", optionValue: number): void;

	/**
	 * Gets  a value indicating whether to show the ECI header.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "eciHeaderDisplayMode"): string;

	/**
	 * Sets a value indicating whether to show the ECI header.
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "eciHeaderDisplayMode", optionValue: string): void;

	/**
	 * Gets  the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specifications.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "fnc1Mode"): string;

	/**
	 * Sets the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specifications.
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "fnc1Mode", optionValue: string): void;

	/**
	 * Gets  the Application Indicator assigned to identify the specification concerned by AIM International.
	 * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "applicationIndicator"): string;

	/**
	 * Sets the Application Indicator assigned to identify the specification concerned by AIM International.
	 * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "applicationIndicator", optionValue: string): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igQRCodeBarcode(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Occurs when an error has happened.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the barcode widget.
	 * Use ui.errorMessage to get or set the error message that is to be shown.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "errorMessageDisplaying"): ErrorMessageDisplayingEvent;

	/**
	 * Occurs when an error has happened.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the barcode widget.
	 * Use ui.errorMessage to get or set the error message that is to be shown.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "errorMessageDisplaying", optionValue: ErrorMessageDisplayingEvent): void;

	/**
	 * Occurs when the data has changed.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the barcode widget.
	 * Use ui.newData to obtain the new data.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "dataChanged"): DataChangedEvent;

	/**
	 * Occurs when the data has changed.
	 * Function takes first argument evt and second argument ui.
	 * Use ui.owner to obtain reference to the barcode widget.
	 * Use ui.newData to obtain the new data.
	 *
	 * @optionValue New value to be set.
	 */
	igQRCodeBarcode(optionLiteral: 'option', optionName: "dataChanged", optionValue: DataChangedEvent): void;
	igQRCodeBarcode(options: IgQRCodeBarcode): JQuery;
	igQRCodeBarcode(optionLiteral: 'option', optionName: string): any;
	igQRCodeBarcode(optionLiteral: 'option', options: IgQRCodeBarcode): JQuery;
	igQRCodeBarcode(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igQRCodeBarcode(methodName: string, ...methodParams: any[]): any;
}
interface IgRadialGaugeRange {
	/**
	 * Gets or sets the name of the range.
	 */
	name?: string;

	/**
	 * Gets or sets the starting value of the range.
	 */
	startValue?: number;

	/**
	 * Gets or sets the ending value of the range.
	 */
	endValue?: number;

	/**
	 * Gets or sets the starting value of the outer extent of the range.
	 */
	outerStartExtent?: number;

	/**
	 * Gets or sets the ending value of the outer extent of the range.
	 */
	outerEndExtent?: number;

	/**
	 * Gets or sets the starting value of the inner extent of the range.
	 */
	innerStartExtent?: number;

	/**
	 * Gets or sets the ending value of the inner extent of the range.
	 */
	innerEndExtent?: number;

	/**
	 * Gets or sets the brush for the entire range.
	 */
	brush?: string;

	/**
	 * Gets or sets the brush for the outline of the range.
	 */
	outline?: string;

	/**
	 * Gets or sets the thickness of the range outline.
	 */
	strokeThickness?: number;

	/**
	 * Gets or sets the flag used to determine if the range should be removed. If set to true, the range (if existing) is removed.
	 */
	remove?: boolean;

	/**
	 * Option for IgRadialGaugeRange
	 */
	[optionName: string]: any;
}

interface IgRadialGauge {
	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * Gets or sets the scale ranges to render on the linear gauge.
	 */
	ranges?: IgRadialGaugeRange[];

	/**
	 * Gets or sets a collection of brushes to be used as the palette for gauge ranges.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	rangeBrushes?: any;

	/**
	 * Gets or sets a collection of brushes to be used as the palette for gauge outlines.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	rangeOutlines?: any;

	/**
	 * Gets or sets the minimum value of the scale.
	 */
	minimumValue?: number;

	/**
	 * Gets or sets the maximum value of the scale.
	 */
	maximumValue?: number;

	/**
	 * Gets or sets the interval to use for the scale.
	 */
	interval?: number;

	/**
	 * Gets or sets the x position of the center of the gauge with the value ranging from 0 to 1.
	 */
	centerX?: number;

	/**
	 * Gets or sets the y position of the center of the gauge with the value ranging from 0 to 1.
	 */
	centerY?: number;

	/**
	 * Gets or sets the value at which to point the needle of the gauge.
	 */
	value?: number;

	/**
	 * Gets or sets the start angle for the scale in degrees.
	 */
	scaleStartAngle?: number;

	/**
	 * Gets or sets the end angle for the scale in degrees.
	 */
	scaleEndAngle?: number;

	/**
	 * Gets or sets the direction in which the scale sweeps around the center from the start angle to end angle.
	 *
	 * Valid values:
	 * "counterclockwise" In a direction opposite the typical forward movement of the hands of a clock.
	 * "clockwise" In a direction corresponding to the typical forward movement of the hands of a clock.
	 */
	scaleSweepDirection?: string;

	/**
	 * Gets or sets the number of milliseconds over which changes to the gauge should be animated.
	 */
	transitionDuration?: number;

	/**
	 * Gets or sets the easing function used to morph the current series.
	 */
	transitionEasingFunction?: any;

	/**
	 * Gets or sets the brush to use when rendering the fill of the needle.
	 */
	needleBrush?: string;

	/**
	 * Gets or sets the brush to use when rendering the outline of the needle.
	 */
	needleOutline?: string;

	/**
	 * Gets or sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	needleStartExtent?: number;

	/**
	 * Gets or sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	needleEndExtent?: number;

	/**
	 * Gets or sets the shape to use when rendering the needle from a number of options.
	 *
	 * Valid values:
	 * "none" No shape.
	 * "rectangle" A rectangle shape.
	 * "triangle" A triangle shape.
	 * "needle" A needle shape.
	 * "trapezoid" A trapezoid shape.
	 * "rectangleWithBulb" A rectangle shape with a bulb at the end.
	 * "triangleWithBulb" A triangle shape with a bulb at the end.
	 * "needleWithBulb" A needle shape with a bulb at the end.
	 * "trapezoidWithBulb" A trapezoid shape with a bulb at the end.
	 */
	needleShape?: string;

	/**
	 * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	needleStartWidthRatio?: number;

	/**
	 * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	needleEndWidthRatio?: number;

	/**
	 * Gets or sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	needleBaseFeatureWidthRatio?: number;

	/**
	 * Gets or sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	needleBaseFeatureExtent?: number;

	/**
	 * Gets or sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	needlePointFeatureWidthRatio?: number;

	/**
	 * Gets or sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	needlePointFeatureExtent?: number;

	/**
	 * Gets or sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	needlePivotWidthRatio?: number;

	/**
	 * Gets or sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
	 */
	needlePivotInnerWidthRatio?: number;

	/**
	 * Gets or sets the shape to use for the needle cap.
	 *
	 * Valid values:
	 * "none" No pivot shape.
	 * "circle" A circle shaped pivot.
	 * "circleWithHole" A circle pivot with a hole in it.
	 * "circleOverlay" A circle pivot overlayed on top of the needle.
	 * "circleOverlayWithHole" A circle pivot with a hole in it overlayed on top of the needle.
	 * "circleUnderlay" A circle pivot rendered underneath the needle.
	 * "circleUnderlayWithHole" A circle pivot with a hold in it rendered underneath the needle.
	 */
	needlePivotShape?: string;

	/**
	 * Gets or sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	scaleStartExtent?: number;

	/**
	 * Gets or sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
	 */
	needlePivotBrush?: string;

	/**
	 * Gets or sets the brush to use for the outlines of the needle cap.
	 */
	needlePivotOutline?: string;

	/**
	 * Gets or sets the stroke thickness of the needle outline.
	 */
	needleStrokeThickness?: number;

	/**
	 * Gets or sets the stroke thickness to use for the outline of the needle cap.
	 */
	needlePivotStrokeThickness?: number;

	/**
	 * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	scaleEndExtent?: number;

	/**
	 * Gets or sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	labelExtent?: number;

	/**
	 * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
	 */
	labelInterval?: number;

	/**
	 * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	tickStartExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	tickEndExtent?: number;

	/**
	 * Gets or sets the stroke thickness to use when rendering ticks.
	 */
	tickStrokeThickness?: number;

	/**
	 * Gets or sets the brush to use for the major tickmarks.
	 */
	tickBrush?: string;

	/**
	 * Gets or sets the brush to use for the label font.
	 */
	fontBrush?: string;

	/**
	 * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	minorTickStartExtent?: number;

	/**
	 * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	minorTickEndExtent?: number;

	/**
	 * Gets or sets the stroke thickness to use when rendering minor ticks.
	 */
	minorTickStrokeThickness?: number;

	/**
	 * Gets or sets the brush to use for the minor tickmarks.
	 */
	minorTickBrush?: string;

	/**
	 * Gets or sets the number of minor tickmarks to place between major tickmarks.
	 */
	minorTickCount?: number;

	/**
	 * Gets or sets the brush to use to fill the background of the scale.
	 */
	scaleBrush?: string;

	/**
	 * Gets or sets the brush to use to fill the backing of the gauge.
	 */
	backingBrush?: string;

	/**
	 * Gets or sets the brush to use for the outline of the backing.
	 */
	backingOutline?: string;

	/**
	 * Gets or sets the stroke thickness of the backing outline.
	 */
	backingStrokeThickness?: number;

	/**
	 * Gets or sets the outer extent of the gauge backing.
	 */
	backingOuterExtent?: number;

	/**
	 * Gets or sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
	 */
	backingOversweep?: number;

	/**
	 * Gets or sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
	 */
	scaleOversweep?: number;

	/**
	 * Gets or sets the oversweep shape to use for the excess fill area for the scale.
	 *
	 * Valid values:
	 * "auto" A default oversweep shape.
	 * "circular" A circular oversweep shape.
	 * "fitted" A fitted oversweep shape.
	 */
	scaleOversweepShape?: string;

	/**
	 * Gets or sets the corner rounding radius to use for the fitted scale backings.
	 */
	backingCornerRadius?: number;

	/**
	 * Gets or sets the inner extent of the gauge backing.
	 */
	backingInnerExtent?: number;

	/**
	 * Gets or sets the type of shape to use for the backing of the gauge.
	 *
	 * Valid values:
	 * "circular" A circular backing shape.
	 * "fitted" A fitted backing shape.
	 */
	backingShape?: string;

	/**
	 * Gets or sets the multiplying factor to apply to the normal radius of the gauge.
	 * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
	 * This introduces a multiplicative factor to that value.
	 */
	radiusMultiplier?: number;

	/**
	 * Gets or sets the strategy to use for omitting labels if the first and last label have the same value.
	 *
	 * Valid values:
	 * "omitLast" Omit the last label.
	 * "omitFirst" Omit the first label.
	 * "omitNeither" Omit no labels.
	 * "omitBoth" Omit both labels.
	 */
	duplicateLabelOmissionStrategy?: string;

	/**
	 * Gets or sets whether needle dragging is enabled or not.
	 */
	isNeedleDraggingEnabled?: boolean;

	/**
	 * Gets or sets whether the needle is constrained within the minimum and maximum value range during dragging.
	 */
	isNeedleDraggingConstrained?: boolean;

	/**
	 * Gets or sets the font.
	 */
	font?: string;

	/**
	 * Gets the transition progress of the animation when the control is animating.
	 */
	transitionProgress?: number;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is raised when a label of the gauge is formatted.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
	 * Use ui.startAngle to obtain the starting angle of gauge scale.
	 * Use ui.endAngle to obtain the ending angle of gauge scale.
	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
	 * Use ui.value to obtain the value on the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 */
	formatLabel?: FormatLabelEvent;

	/**
	 * Event which is raised when a label of the gauge is aligned along the scale.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
	 * Use ui.startAngle to obtain the starting angle of gauge scale.
	 * Use ui.endAngle to obtain the ending angle of gauge scale.
	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
	 * Use ui.value to obtain the value on the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 * Use ui.width to obtain the width of the label.
	 * Use ui.height to obtain the height of the label.
	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
	 */
	alignLabel?: AlignLabelEvent;

	/**
	 * Occurs when the Value property changes.
	 */
	valueChanged?: ValueChangedEvent;

	/**
	 * Option for igRadialGauge
	 */
	[optionName: string]: any;
}
interface IgRadialGaugeMethods {
	/**
	 * Returns a string containing the names of all the ranges delimited with a \n symbol.
	 */
	getRangeNames(): string;

	/**
	 * Adds a new range to the radial gauge.
	 *
	 * @param value
	 */
	addRange(value: Object): void;

	/**
	 * Removes a specified range.
	 *
	 * @param value
	 */
	removeRange(value: Object): void;

	/**
	 * Updates the range.
	 *
	 * @param value
	 */
	updateRange(value: Object): void;

	/**
	 * Clears the ranges in the radial gauge.
	 */
	clearRanges(): void;

	/**
	 * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.
	 *
	 * @param value
	 */
	scaleValue(value: Object): void;

	/**
	 * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
	 *
	 * @param value
	 */
	unscaleValue(value: Object): void;

	/**
	 * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
	 *
	 * @param x
	 * @param y
	 */
	getValueForPoint(x: Object, y: Object): number;

	/**
	 * Gets the point on the gauge for a given scale value and extent.
	 *
	 * @param value
	 * @param extent
	 */
	getPointForValue(value: Object, extent: Object): void;

	/**
	 * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
	 *
	 * @param x
	 * @param y
	 */
	needleContainsPoint(x: Object, y: Object): void;

	/**
	 * Exports the visual data for the radial gauge.
	 */
	exportVisualData(): void;

	/**
	 * Flushes the gauge.
	 */
	flush(): void;

	/**
	 * Destroys widget.
	 */
	destroy(): void;

	/**
	 * Returns true if the style was updated for the radial gauge.
	 */
	styleUpdated(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igRadialGauge"): IgRadialGaugeMethods;
}

interface JQuery {
	igRadialGauge(methodName: "getRangeNames"): string;
	igRadialGauge(methodName: "addRange", value: Object): void;
	igRadialGauge(methodName: "removeRange", value: Object): void;
	igRadialGauge(methodName: "updateRange", value: Object): void;
	igRadialGauge(methodName: "clearRanges"): void;
	igRadialGauge(methodName: "scaleValue", value: Object): void;
	igRadialGauge(methodName: "unscaleValue", value: Object): void;
	igRadialGauge(methodName: "getValueForPoint", x: Object, y: Object): number;
	igRadialGauge(methodName: "getPointForValue", value: Object, extent: Object): void;
	igRadialGauge(methodName: "needleContainsPoint", x: Object, y: Object): void;
	igRadialGauge(methodName: "exportVisualData"): void;
	igRadialGauge(methodName: "flush"): void;
	igRadialGauge(methodName: "destroy"): void;
	igRadialGauge(methodName: "styleUpdated"): void;
	igRadialGauge(methodName: "changeLocale", $container: Object): void;
	igRadialGauge(methodName: "changeGlobalLanguage"): void;
	igRadialGauge(methodName: "changeGlobalRegional"): void;

	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets  the scale ranges to render on the linear gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "ranges"): IgRadialGaugeRange[];

	/**
	 * Sets the scale ranges to render on the linear gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "ranges", optionValue: IgRadialGaugeRange[]): void;

	/**
	 * Gets  a collection of brushes to be used as the palette for gauge ranges.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "rangeBrushes"): any;

	/**
	 * Sets a collection of brushes to be used as the palette for gauge ranges.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "rangeBrushes", optionValue: any): void;

	/**
	 * Gets  a collection of brushes to be used as the palette for gauge outlines.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "rangeOutlines"): any;

	/**
	 * Sets a collection of brushes to be used as the palette for gauge outlines.
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "rangeOutlines", optionValue: any): void;

	/**
	 * Gets  the minimum value of the scale.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minimumValue"): number;

	/**
	 * Sets the minimum value of the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minimumValue", optionValue: number): void;

	/**
	 * Gets  the maximum value of the scale.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "maximumValue"): number;

	/**
	 * Sets the maximum value of the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "maximumValue", optionValue: number): void;

	/**
	 * Gets  the interval to use for the scale.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "interval"): number;

	/**
	 * Sets the interval to use for the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "interval", optionValue: number): void;

	/**
	 * Gets  the x position of the center of the gauge with the value ranging from 0 to 1.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "centerX"): number;

	/**
	 * Sets the x position of the center of the gauge with the value ranging from 0 to 1.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "centerX", optionValue: number): void;

	/**
	 * Gets  the y position of the center of the gauge with the value ranging from 0 to 1.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "centerY"): number;

	/**
	 * Sets the y position of the center of the gauge with the value ranging from 0 to 1.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "centerY", optionValue: number): void;

	/**
	 * Gets  the value at which to point the needle of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "value"): number;

	/**
	 * Sets the value at which to point the needle of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "value", optionValue: number): void;

	/**
	 * Gets  the start angle for the scale in degrees.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleStartAngle"): number;

	/**
	 * Sets the start angle for the scale in degrees.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleStartAngle", optionValue: number): void;

	/**
	 * Gets  the end angle for the scale in degrees.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleEndAngle"): number;

	/**
	 * Sets the end angle for the scale in degrees.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleEndAngle", optionValue: number): void;

	/**
	 * Gets  the direction in which the scale sweeps around the center from the start angle to end angle.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "scaleSweepDirection"): string;

	/**
	 * Sets the direction in which the scale sweeps around the center from the start angle to end angle.
	 *
	 * @optionValue New value to be set.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "scaleSweepDirection", optionValue: string): void;

	/**
	 * Gets  the number of milliseconds over which changes to the gauge should be animated.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "transitionDuration"): number;

	/**
	 * Sets the number of milliseconds over which changes to the gauge should be animated.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;

	/**
	 * Gets  the easing function used to morph the current series.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "transitionEasingFunction"): any;

	/**
	 * Sets the easing function used to morph the current series.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "transitionEasingFunction", optionValue: any): void;

	/**
	 * Gets  the brush to use when rendering the fill of the needle.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleBrush"): string;

	/**
	 * Sets the brush to use when rendering the fill of the needle.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use when rendering the outline of the needle.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleOutline"): string;

	/**
	 * Sets the brush to use when rendering the outline of the needle.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleOutline", optionValue: string): void;

	/**
	 * Gets  the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleStartExtent"): number;

	/**
	 * Sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleStartExtent", optionValue: number): void;

	/**
	 * Gets  the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleEndExtent"): number;

	/**
	 * Sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleEndExtent", optionValue: number): void;

	/**
	 * Gets  the shape to use when rendering the needle from a number of options.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "needleShape"): string;

	/**
	 * Sets the shape to use when rendering the needle from a number of options.
	 *
	 * @optionValue New value to be set.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "needleShape", optionValue: string): void;

	/**
	 * Gets  the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleStartWidthRatio"): number;

	/**
	 * Sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleStartWidthRatio", optionValue: number): void;

	/**
	 * Gets  the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleEndWidthRatio"): number;

	/**
	 * Sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleEndWidthRatio", optionValue: number): void;

	/**
	 * Gets  the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleBaseFeatureWidthRatio"): number;

	/**
	 * Sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleBaseFeatureWidthRatio", optionValue: number): void;

	/**
	 * Gets  the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleBaseFeatureExtent"): number;

	/**
	 * Sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleBaseFeatureExtent", optionValue: number): void;

	/**
	 * Gets  the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePointFeatureWidthRatio"): number;

	/**
	 * Sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePointFeatureWidthRatio", optionValue: number): void;

	/**
	 * Gets  the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePointFeatureExtent"): number;

	/**
	 * Sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePointFeatureExtent", optionValue: number): void;

	/**
	 * Gets  the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotWidthRatio"): number;

	/**
	 * Sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotWidthRatio", optionValue: number): void;

	/**
	 * Gets  the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotInnerWidthRatio"): number;

	/**
	 * Sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotInnerWidthRatio", optionValue: number): void;

	/**
	 * Gets  the shape to use for the needle cap.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotShape"): string;

	/**
	 * Sets the shape to use for the needle cap.
	 *
	 * @optionValue New value to be set.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotShape", optionValue: string): void;

	/**
	 * Gets  the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleStartExtent"): number;

	/**
	 * Sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleStartExtent", optionValue: number): void;

	/**
	 * Gets  the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotBrush"): string;

	/**
	 * Sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the outlines of the needle cap.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotOutline"): string;

	/**
	 * Sets the brush to use for the outlines of the needle cap.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotOutline", optionValue: string): void;

	/**
	 * Gets  the stroke thickness of the needle outline.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleStrokeThickness"): number;

	/**
	 * Sets the stroke thickness of the needle outline.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needleStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the stroke thickness to use for the outline of the needle cap.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotStrokeThickness"): number;

	/**
	 * Sets the stroke thickness to use for the outline of the needle cap.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "needlePivotStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleEndExtent"): number;

	/**
	 * Sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleEndExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "labelExtent"): number;

	/**
	 * Sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "labelExtent", optionValue: number): void;

	/**
	 * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "labelInterval"): number;

	/**
	 * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "labelInterval", optionValue: number): void;

	/**
	 * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "tickStartExtent"): number;

	/**
	 * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "tickStartExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "tickEndExtent"): number;

	/**
	 * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "tickEndExtent", optionValue: number): void;

	/**
	 * Gets  the stroke thickness to use when rendering ticks.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "tickStrokeThickness"): number;

	/**
	 * Sets the stroke thickness to use when rendering ticks.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "tickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the brush to use for the major tickmarks.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "tickBrush"): string;

	/**
	 * Sets the brush to use for the major tickmarks.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "tickBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the label font.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "fontBrush"): string;

	/**
	 * Sets the brush to use for the label font.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "fontBrush", optionValue: string): void;

	/**
	 * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickStartExtent"): number;

	/**
	 * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickStartExtent", optionValue: number): void;

	/**
	 * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickEndExtent"): number;

	/**
	 * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickEndExtent", optionValue: number): void;

	/**
	 * Gets  the stroke thickness to use when rendering minor ticks.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickStrokeThickness"): number;

	/**
	 * Sets the stroke thickness to use when rendering minor ticks.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the brush to use for the minor tickmarks.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickBrush"): string;

	/**
	 * Sets the brush to use for the minor tickmarks.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickBrush", optionValue: string): void;

	/**
	 * Gets  the number of minor tickmarks to place between major tickmarks.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickCount"): number;

	/**
	 * Sets the number of minor tickmarks to place between major tickmarks.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "minorTickCount", optionValue: number): void;

	/**
	 * Gets  the brush to use to fill the background of the scale.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleBrush"): string;

	/**
	 * Sets the brush to use to fill the background of the scale.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use to fill the backing of the gauge.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingBrush"): string;

	/**
	 * Sets the brush to use to fill the backing of the gauge.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingBrush", optionValue: string): void;

	/**
	 * Gets  the brush to use for the outline of the backing.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingOutline"): string;

	/**
	 * Sets the brush to use for the outline of the backing.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingOutline", optionValue: string): void;

	/**
	 * Gets  the stroke thickness of the backing outline.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingStrokeThickness"): number;

	/**
	 * Sets the stroke thickness of the backing outline.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the outer extent of the gauge backing.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingOuterExtent"): number;

	/**
	 * Sets the outer extent of the gauge backing.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingOuterExtent", optionValue: number): void;

	/**
	 * Gets  the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingOversweep"): number;

	/**
	 * Sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingOversweep", optionValue: number): void;

	/**
	 * Gets  the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleOversweep"): number;

	/**
	 * Sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "scaleOversweep", optionValue: number): void;

	/**
	 * Gets  the oversweep shape to use for the excess fill area for the scale.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "scaleOversweepShape"): string;

	/**
	 * Sets the oversweep shape to use for the excess fill area for the scale.
	 *
	 * @optionValue New value to be set.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "scaleOversweepShape", optionValue: string): void;

	/**
	 * Gets  the corner rounding radius to use for the fitted scale backings.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingCornerRadius"): number;

	/**
	 * Sets the corner rounding radius to use for the fitted scale backings.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingCornerRadius", optionValue: number): void;

	/**
	 * Gets  the inner extent of the gauge backing.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingInnerExtent"): number;

	/**
	 * Sets the inner extent of the gauge backing.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "backingInnerExtent", optionValue: number): void;

	/**
	 * Gets  the type of shape to use for the backing of the gauge.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "backingShape"): string;

	/**
	 * Sets the type of shape to use for the backing of the gauge.
	 *
	 * @optionValue New value to be set.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "backingShape", optionValue: string): void;

	/**
	 * Gets  the multiplying factor to apply to the normal radius of the gauge.
	 * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
	 * This introduces a multiplicative factor to that value.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "radiusMultiplier"): number;

	/**
	 * Sets the multiplying factor to apply to the normal radius of the gauge.
	 * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
	 * This introduces a multiplicative factor to that value.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "radiusMultiplier", optionValue: number): void;

	/**
	 * Gets  the strategy to use for omitting labels if the first and last label have the same value.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "duplicateLabelOmissionStrategy"): string;

	/**
	 * Sets the strategy to use for omitting labels if the first and last label have the same value.
	 *
	 * @optionValue New value to be set.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "duplicateLabelOmissionStrategy", optionValue: string): void;

	/**
	 * Gets  whether needle dragging is enabled or not.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "isNeedleDraggingEnabled"): boolean;

	/**
	 * Sets whether needle dragging is enabled or not.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "isNeedleDraggingEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether the needle is constrained within the minimum and maximum value range during dragging.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "isNeedleDraggingConstrained"): boolean;

	/**
	 * Sets whether the needle is constrained within the minimum and maximum value range during dragging.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "isNeedleDraggingConstrained", optionValue: boolean): void;

	/**
	 * Gets  the font.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "font"): string;

	/**
	 * Sets the font.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "font", optionValue: string): void;

	/**
	 * Gets the transition progress of the animation when the control is animating.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "transitionProgress"): number;

	/**
	 * The transition progress of the animation when the control is animating.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "transitionProgress", optionValue: number): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igRadialGauge(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is raised when a label of the gauge is formatted.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
	 * Use ui.startAngle to obtain the starting angle of gauge scale.
	 * Use ui.endAngle to obtain the ending angle of gauge scale.
	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
	 * Use ui.value to obtain the value on the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "formatLabel"): FormatLabelEvent;

	/**
	 * Event which is raised when a label of the gauge is formatted.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
	 * Use ui.startAngle to obtain the starting angle of gauge scale.
	 * Use ui.endAngle to obtain the ending angle of gauge scale.
	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
	 * Use ui.value to obtain the value on the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 *
	 * @optionValue Define event handler function.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "formatLabel", optionValue: FormatLabelEvent): void;

	/**
	 * Event which is raised when a label of the gauge is aligned along the scale.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
	 * Use ui.startAngle to obtain the starting angle of gauge scale.
	 * Use ui.endAngle to obtain the ending angle of gauge scale.
	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
	 * Use ui.value to obtain the value on the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 * Use ui.width to obtain the width of the label.
	 * Use ui.height to obtain the height of the label.
	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "alignLabel"): AlignLabelEvent;

	/**
	 * Event which is raised when a label of the gauge is aligned along the scale.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to gauge widget.
	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
	 * Use ui.startAngle to obtain the starting angle of gauge scale.
	 * Use ui.endAngle to obtain the ending angle of gauge scale.
	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
	 * Use ui.value to obtain the value on the gauge scale associated with the label.
	 * Use ui.label to obtain the string value of the label.
	 * Use ui.width to obtain the width of the label.
	 * Use ui.height to obtain the height of the label.
	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
	 *
	 * @optionValue Define event handler function.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "alignLabel", optionValue: AlignLabelEvent): void;

	/**
	 * Occurs when the Value property changes.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "valueChanged"): ValueChangedEvent;

	/**
	 * Occurs when the Value property changes.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialGauge(optionLiteral: 'option', optionName: "valueChanged", optionValue: ValueChangedEvent): void;
	igRadialGauge(options: IgRadialGauge): JQuery;
	igRadialGauge(optionLiteral: 'option', optionName: string): any;
	igRadialGauge(optionLiteral: 'option', options: IgRadialGauge): JQuery;
	igRadialGauge(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igRadialGauge(methodName: string, ...methodParams: any[]): any;
}
interface IgRadialMenuItem {
	/**
	 * Gets or sets a value indicating what type of item is being provided.
	 *
	 *
	 * Valid values:
	 * "button"
	 * "coloritem"
	 * "colorwell"
	 * "list"
	 * "numericitem"
	 * "numericgauge"
	 */
	type?: string;

	/**
	 * Gets or sets the unique name of the item within the menu.
	 */
	name?: string;

	/**
	 * Gets or sets the name of the child item that represents the most recently interacted with item. Note other item properties may be set to "{RecentItem}" to have them automatically set to values of the associated recent child item.
	 */
	recentItemName?: string;

	/**
	 * Returns or sets the value of the numeric item.
	 */
	value?: number;

	/**
	 * Returns or sets the value while the user is interacting with the element.
	 */
	pendingValue?: any;

	/**
	 * Returns or sets a boolean indicating if the children should be rotated to align with the location of this element.
	 */
	autoRotateChildren?: boolean;

	/**
	 * Returns or sets the brush used for the arc displayed within the tool when checked.
	 */
	checkedHighlightBrush?: string;

	/**
	 * Returns or sets the foreground for the inner area of the item.
	 */
	foreground?: string;

	/**
	 * Returns or sets the brush used for the arc displayed within the tool when hot tracked.
	 */
	highlightBrush?: string;

	/**
	 * Returns or sets the background of the inner area of the menu item.
	 */
	innerAreaFill?: string;

	/**
	 * Returns or sets the brush for the background of the inner area of the menu item that is under the pointer.
	 */
	innerAreaHotTrackFill?: string;

	/**
	 * Returns or sets the brush for the default border of the inner area for the menu item that is under the pointer.
	 */
	innerAreaHotTrackStroke?: string;

	/**
	 * Returns or sets the brush for the default border of the inner area for the menu item.
	 */
	innerAreaStroke?: string;

	/**
	 * Returns or sets the thickness of the border for the inner area for the menu item.
	 */
	innerAreaStrokeThickness?: number;

	/**
	 * Returns or sets a boolean indicating whether the item is enabled.
	 */
	isEnabled?: boolean;

	/**
	 * Returns or sets a boolean indicating if a tooltip may be displayed for the item.
	 */
	isToolTipEnabled?: boolean;

	/**
	 * Returns or sets the brush for the background of the button within the outer ring for a menu item that is under the pointer.
	 */
	outerRingButtonHotTrackFill?: string;

	/**
	 * Returns or sets the foreground of the buttons in the outer ring of the menu that is under the pointer.
	 */
	outerRingButtonHotTrackForeground?: string;

	/**
	 * Returns or sets the brush for the default border of the button within the outer ring for a menu item that is under the pointer.
	 */
	outerRingButtonHotTrackStroke?: string;

	/**
	 * Returns or sets the default background of the button within the outer ring for a menu item.
	 */
	outerRingButtonFill?: string;

	/**
	 * Returns or sets the brush for the foreground of the buttons in the outer ring of the menu.
	 */
	outerRingButtonForeground?: string;

	/**
	 * Returns or sets the brush for the default border of the button within the outer ring for a menu item.
	 */
	outerRingButtonStroke?: string;

	/**
	 * Returns or sets the width of the outline of a button in the outer ring of the menu.
	 */
	outerRingButtonStrokeThickness?: number;

	/**
	 * Returns or sets the tooltip to be displayed for the radial menu item.
	 */
	toolTip?: any;

	/**
	 * Returns or sets the wedge at which the item should be positioned.
	 */
	wedgeIndex?: number;

	/**
	 * Returns or sets the number of wedges that the item should occupy.
	 */
	wedgeSpan?: number;

	/**
	 * Returns or sets a boolean indicating if the RecentItem property is updated when a child item is clicked.
	 */
	autoUpdateRecentItem?: boolean;

	/**
	 * Returns or sets an enumeration indicating where the child items are displayed.
	 *
	 * Valid values:
	 * "asChildren" The Items are displayed within a separate level that is accessed by clicking on the button in the outer ring of the xamRadialMenu for the parent.
	 * "asSiblingsWhenChecked" The items are displayed as siblings of the parent as long as the IsChecked is set to true.
	 * "none" The child items are not displayed.
	 */
	childItemPlacement?: string;

	/**
	 * Returns or sets a value indicating how the IsChecked property may be changed.
	 *
	 * Valid values:
	 * "none" The item is not checkable
	 * "checkBox" The item is checkable and may be independantly checked or unchecked without affecting other items.
	 * "radioButton" The item is checkable. Only 1 item from the items with the same GroupName may be checked at a time and the checked item may not be unchecked.
	 * "radioButtonAllowAllUp" The item is checkable. Only 1 item from the items with the same GroupName may be checked at a time and the checked item may not be checked allowing all items to be unchecked.
	 */
	checkBehavior?: string;

	/**
	 * Returns or sets a boolean indicating if the item is displayed as checked.
	 */
	isChecked?: boolean;

	/**
	 * Returns or sets the name used to identify which RadioButton type items will be grouped together when determining the item to uncheck when the item is checked.
	 */
	groupName?: string;

	/**
	 * Returns or sets the header of the menu item.
	 */
	header?: any;

	/**
	 * Returns or sets the uri of the image for the item.
	 */
	iconUri?: string;

	/**
	 * Returns or sets the color that the item represents.
	 * Note: When the Color property is set, several of the brush properties are changed.
	 */
	color?: any;

	/**
	 * Returns or sets the brush used to render the line that represents the PendingValue
	 */
	pendingValueNeedleBrush?: string;

	/**
	 * Returns or sets a boolean indicating whether space should be left before the first tickmark.
	 */
	reserveFirstSlice?: boolean;

	/**
	 * Returns or sets the amount that the PendingValue should be adjusted when incrementing or decrementing the value.
	 */
	smallIncrement?: number;

	/**
	 * Returns or sets the brush used to render the tick marks.
	 */
	tickBrush?: string;

	/**
	 * Returns or sets the values of the ticks.
	 */
	ticks?: any;

	/**
	 * Returns or sets the starting color for the track.
	 */
	trackStartColor?: any;

	/**
	 * Returns or sets the ending color for the track.
	 */
	trackEndColor?: any;

	/**
	 * Returns or sets the brush used to represent the Value
	 */
	valueNeedleBrush?: string;

	/**
	 * Cancel="false" Invoked when one navigates back to the item after viewing the child items.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 * Use ui.item to obtain reference to the item.
	 */
	closed?: any;

	/**
	 * Cancel="false" Invoked when one navigates to the view the child items.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 * Use ui.item to obtain reference to the item.
	 */
	opened?: any;

	/**
	 * Cancel="false" Occurs when the IsChecked is changed to true.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 * Use ui.item to obtain reference to the item.
	 */
	checked?: any;

	/**
	 * Cancel="false" Occurs when the item area is clicked.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 * Use ui.item to obtain reference to the item.
	 */
	click?: any;

	/**
	 * Cancel="false" Occurs when the IsChecked is changed to false.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 * Use ui.item to obtain reference to the item.
	 */
	unchecked?: any;

	/**
	 * Cancel="false" Event invoked when the Color property is changed.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 * Use ui.oldValue to obtain the previous value.
	 * Use ui.newValue to obtain the new value.
	 * Use ui.item to obtain reference to the item.
	 */
	colorChanged?: any;

	/**
	 * Cancel="false" Occurs when the item area of a descendant color well is clicked.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 * Use ui.item to obtain reference to the item.
	 */
	colorWellClick?: any;

	/**
	 * Cancel="false" Event invoked when the Value property is changed.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 * Use ui.oldValue to obtain the previous value.
	 * Use ui.newValue to obtain the new value.
	 * Use ui.item to obtain reference to the item.
	 */
	valueChanged?: any;

	/**
	 * Cancel="false" Event invoked when the PendingValue property is changed.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 * Use ui.oldValue to obtain the previous value.
	 * Use ui.newValue to obtain the new value.
	 * Use ui.item to obtain reference to the item.
	 */
	pendingValueChanged?: any;

	/**
	 * Option for IgRadialMenuItem
	 */
	[optionName: string]: any;
}

interface ClosedEvent {
	(event: Event, ui: ClosedEventUIParam): void;
}

interface ClosedEventUIParam {
	/**
	 * Used to obtain reference to menu widget.
	 */
	owner?: any;
}

interface OpenedEvent {
	(event: Event, ui: OpenedEventUIParam): void;
}

interface OpenedEventUIParam {
	/**
	 * Used to obtain reference to menu widget.
	 */
	owner?: any;
}

interface IgRadialMenu {
	/**
	 * Gets or sets the items in the menu.
	 */
	items?: IgRadialMenuItem[];

	/**
	 * Gets or sets the name of the item within the menu whose children are currently displayed.
	 */
	currentOpenMenuItemName?: string;

	/**
	 * Returns or sets the width of the center button content.
	 */
	centerButtonContentWidth?: number;

	/**
	 * Returns or sets the height of the center button content.
	 */
	centerButtonContentHeight?: number;

	/**
	 * Returns or sets the background of the center button of the menu when the IsOpen property is false.
	 */
	centerButtonClosedFill?: string;

	/**
	 * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen property is false.
	 */
	centerButtonClosedStroke?: string;

	/**
	 * Returns or sets the background of the center button of the menu when the IsOpen property is true.
	 */
	centerButtonFill?: string;

	/**
	 * Returns or sets the background of the center button of the menu when under the pointer.
	 */
	centerButtonHotTrackFill?: string;

	/**
	 * Returns or sets the brush used for the outline of the ring of the center button when under the pointer.
	 */
	centerButtonHotTrackStroke?: string;

	/**
	 * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen is true.
	 */
	centerButtonStroke?: string;

	/**
	 * Returns or sets the width of the outline of the inner rings of the menu.
	 */
	centerButtonStrokeThickness?: number;

	/**
	 * The font for the control
	 */
	font?: string;

	/**
	 * Returns or sets a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
	 */
	isOpen?: boolean;

	/**
	 * Returns or sets the brush for the backing of the radial menu.
	 */
	menuBackground?: string;

	/**
	 * Returns or sets the duration of the animation performed when the IsOpen property is changed.
	 */
	menuItemOpenCloseAnimationDuration?: number;

	/**
	 * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
	 */
	menuItemOpenCloseAnimationEasingFunction?: any;

	/**
	 * Returns or sets the duration of the animation performed when the IsOpen property is changed.
	 */
	menuOpenCloseAnimationDuration?: number;

	/**
	 * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
	 */
	menuOpenCloseAnimationEasingFunction?: any;

	/**
	 * Returns or sets the minimum number of wedges displayed by the menu.
	 */
	minWedgeCount?: number;

	/**
	 * Returns or sets the background of the outer ring of the menu.
	 */
	outerRingFill?: string;

	/**
	 * Returns or sets the thickness of the outer ring of the menu.
	 */
	outerRingThickness?: number;

	/**
	 * Returns or sets the brush used for the outline of the outer ring.
	 */
	outerRingStroke?: string;

	/**
	 * Returns or sets the width of the outline of the outer ring of the menu.
	 */
	outerRingStrokeThickness?: number;

	/**
	 * Returns or sets the starting angle of the items in degrees.
	 */
	rotationInDegrees?: number;

	/**
	 * Returns or sets the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
	 */
	rotationAsPercentageOfWedge?: number;

	/**
	 * Returns or sets the amount of padding around each wedge in degrees.
	 */
	wedgePaddingInDegrees?: number;
	pixelScalingRatio?: number;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Invoked when the IsOpen property is changed to false.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 */
	closed?: ClosedEvent;

	/**
	 * Invoked when the IsOpen property is changed to true.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 */
	opened?: OpenedEvent;

	/**
	 * Option for igRadialMenu
	 */
	[optionName: string]: any;
}
interface IgRadialMenuMethods {
	/**
	 * Gets or sets the value of a property for the item created with the specified key
	 *
	 * @param itemKey The name of the item
	 * @param key The name of the property/option
	 * @param value The new value for the property or undefined to obtain the current value
	 */
	itemOption(itemKey: string, key: string, value: Object): Object;

	/**
	 * Exports visual data from the radial menu to aid in unit testing
	 */
	exportVisualData(): void;

	/**
	 * Forces any pending deferred work to render on the radial menu before continuing
	 */
	flush(): void;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;

	/**
	 * Notify the radial menu that style information used for rendering the menu may have been updated.
	 */
	styleUpdated(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igRadialMenu"): IgRadialMenuMethods;
}

interface JQuery {
	igRadialMenu(methodName: "itemOption", itemKey: string, key: string, value: Object): Object;
	igRadialMenu(methodName: "exportVisualData"): void;
	igRadialMenu(methodName: "flush"): void;
	igRadialMenu(methodName: "destroy"): void;
	igRadialMenu(methodName: "styleUpdated"): void;
	igRadialMenu(methodName: "changeLocale", $container: Object): void;
	igRadialMenu(methodName: "changeGlobalLanguage"): void;
	igRadialMenu(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets  the items in the menu.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "items"): IgRadialMenuItem[];

	/**
	 * Sets the items in the menu.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "items", optionValue: IgRadialMenuItem[]): void;

	/**
	 * Gets  the name of the item within the menu whose children are currently displayed.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "currentOpenMenuItemName"): string;

	/**
	 * Sets the name of the item within the menu whose children are currently displayed.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "currentOpenMenuItemName", optionValue: string): void;

	/**
	 * Returns  the width of the center button content.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonContentWidth"): number;

	/**
	 * Returns or sets the width of the center button content.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonContentWidth", optionValue: number): void;

	/**
	 * Returns  the height of the center button content.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonContentHeight"): number;

	/**
	 * Returns or sets the height of the center button content.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonContentHeight", optionValue: number): void;

	/**
	 * Returns  the background of the center button of the menu when the IsOpen property is false.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonClosedFill"): string;

	/**
	 * Returns or sets the background of the center button of the menu when the IsOpen property is false.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonClosedFill", optionValue: string): void;

	/**
	 * Returns  the brush used for the outline of the ring of the center button when the IsOpen property is false.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonClosedStroke"): string;

	/**
	 * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen property is false.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonClosedStroke", optionValue: string): void;

	/**
	 * Returns  the background of the center button of the menu when the IsOpen property is true.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonFill"): string;

	/**
	 * Returns or sets the background of the center button of the menu when the IsOpen property is true.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonFill", optionValue: string): void;

	/**
	 * Returns  the background of the center button of the menu when under the pointer.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonHotTrackFill"): string;

	/**
	 * Returns or sets the background of the center button of the menu when under the pointer.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonHotTrackFill", optionValue: string): void;

	/**
	 * Returns  the brush used for the outline of the ring of the center button when under the pointer.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonHotTrackStroke"): string;

	/**
	 * Returns or sets the brush used for the outline of the ring of the center button when under the pointer.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonHotTrackStroke", optionValue: string): void;

	/**
	 * Returns  the brush used for the outline of the ring of the center button when the IsOpen is true.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonStroke"): string;

	/**
	 * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen is true.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonStroke", optionValue: string): void;

	/**
	 * Returns  the width of the outline of the inner rings of the menu.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonStrokeThickness"): number;

	/**
	 * Returns or sets the width of the outline of the inner rings of the menu.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "centerButtonStrokeThickness", optionValue: number): void;

	/**
	 * The font for the control
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "font"): string;

	/**
	 * The font for the control
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "font", optionValue: string): void;

	/**
	 * Returns  a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "isOpen"): boolean;

	/**
	 * Returns or sets a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "isOpen", optionValue: boolean): void;

	/**
	 * Returns  the brush for the backing of the radial menu.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuBackground"): string;

	/**
	 * Returns or sets the brush for the backing of the radial menu.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuBackground", optionValue: string): void;

	/**
	 * Returns  the duration of the animation performed when the IsOpen property is changed.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuItemOpenCloseAnimationDuration"): number;

	/**
	 * Returns or sets the duration of the animation performed when the IsOpen property is changed.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuItemOpenCloseAnimationDuration", optionValue: number): void;

	/**
	 * Returns  the easing function applied to the animation that occurs when the IsOpen property is changed.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuItemOpenCloseAnimationEasingFunction"): any;

	/**
	 * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuItemOpenCloseAnimationEasingFunction", optionValue: any): void;

	/**
	 * Returns  the duration of the animation performed when the IsOpen property is changed.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuOpenCloseAnimationDuration"): number;

	/**
	 * Returns or sets the duration of the animation performed when the IsOpen property is changed.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuOpenCloseAnimationDuration", optionValue: number): void;

	/**
	 * Returns  the easing function applied to the animation that occurs when the IsOpen property is changed.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuOpenCloseAnimationEasingFunction"): any;

	/**
	 * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "menuOpenCloseAnimationEasingFunction", optionValue: any): void;

	/**
	 * Returns  the minimum number of wedges displayed by the menu.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "minWedgeCount"): number;

	/**
	 * Returns or sets the minimum number of wedges displayed by the menu.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "minWedgeCount", optionValue: number): void;

	/**
	 * Returns  the background of the outer ring of the menu.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "outerRingFill"): string;

	/**
	 * Returns or sets the background of the outer ring of the menu.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "outerRingFill", optionValue: string): void;

	/**
	 * Returns  the thickness of the outer ring of the menu.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "outerRingThickness"): number;

	/**
	 * Returns or sets the thickness of the outer ring of the menu.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "outerRingThickness", optionValue: number): void;

	/**
	 * Returns  the brush used for the outline of the outer ring.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "outerRingStroke"): string;

	/**
	 * Returns or sets the brush used for the outline of the outer ring.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "outerRingStroke", optionValue: string): void;

	/**
	 * Returns  the width of the outline of the outer ring of the menu.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "outerRingStrokeThickness"): number;

	/**
	 * Returns or sets the width of the outline of the outer ring of the menu.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "outerRingStrokeThickness", optionValue: number): void;

	/**
	 * Returns  the starting angle of the items in degrees.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "rotationInDegrees"): number;

	/**
	 * Returns or sets the starting angle of the items in degrees.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "rotationInDegrees", optionValue: number): void;

	/**
	 * Returns  the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "rotationAsPercentageOfWedge"): number;

	/**
	 * Returns or sets the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "rotationAsPercentageOfWedge", optionValue: number): void;

	/**
	 * Returns  the amount of padding around each wedge in degrees.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "wedgePaddingInDegrees"): number;

	/**
	 * Returns or sets the amount of padding around each wedge in degrees.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "wedgePaddingInDegrees", optionValue: number): void;
	igRadialMenu(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;
	igRadialMenu(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igRadialMenu(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igRadialMenu(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Invoked when the IsOpen property is changed to false.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "closed"): ClosedEvent;

	/**
	 * Invoked when the IsOpen property is changed to false.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "closed", optionValue: ClosedEvent): void;

	/**
	 * Invoked when the IsOpen property is changed to true.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "opened"): OpenedEvent;

	/**
	 * Invoked when the IsOpen property is changed to true.
	 * Function takes a first argument ui.
	 * Use ui.owner to obtain reference to menu widget.
	 *
	 * @optionValue New value to be set.
	 */
	igRadialMenu(optionLiteral: 'option', optionName: "opened", optionValue: OpenedEvent): void;
	igRadialMenu(options: IgRadialMenu): JQuery;
	igRadialMenu(optionLiteral: 'option', optionName: string): any;
	igRadialMenu(optionLiteral: 'option', options: IgRadialMenu): JQuery;
	igRadialMenu(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igRadialMenu(methodName: string, ...methodParams: any[]): any;
}
interface HoverChangeEvent {
	(event: Event, ui: HoverChangeEventUIParam): void;
}

interface HoverChangeEventUIParam {
	/**
	 * Gets the new hovered value.
	 */
	value?: number;

	/**
	 * Gets the old value.
	 */
	oldValue?: number;
}

interface ValueChangeEvent {
	(event: Event, ui: ValueChangeEventUIParam): void;
}

interface ValueChangeEventUIParam {
	/**
	 * Gets the new selected value.
	 */
	value?: number;

	/**
	 * Gets the previously selected value.
	 */
	oldValue?: number;
}

interface IgRating {
	/**
	 * Gets a vertical or horizontal orientation for the votes.
	 * Change of that option is not supported after igRating was created.
	 *
	 */
	vertical?: boolean;

	/**
	 * Gets/Sets value (selected votes or percent). If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the value is used as number of selected votes or as a percent of the votes.
	 *
	 */
	value?: number|string;

	/**
	 * Gets/Sets value-hover (hovered votes or percent of hovered votes). The default is same as value. If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the valueHover is used as number of hovered votes or as a percent of the hovered votes.
	 *
	 */
	valueHover?: number|string;

	/**
	 * Gets/Sets number of votes.
	 *
	 */
	voteCount?: number;

	/**
	 * Gets/Sets custom width of a vote in pixels. In case of 0 the run time style value is used.
	 *
	 */
	voteWidth?: number;

	/**
	 * Gets/Sets custom height of a vote in pixels. In case of 0 the run time style value is used.
	 *
	 */
	voteHeight?: number;

	/**
	 * Gets the direction of selected and hovered votes. Change of that option is not supported after igRating was created.
	 * Value true: from left to right or from top to bottom.
	 * Value false: from right to left or from bottom to left.
	 *
	 */
	swapDirection?: boolean;

	/**
	 * Gets/Sets percent or vote number to measure value and value-hover.
	 * Value true: value is measured as percent (from 0 to 1).
	 * Value false: value is measured in number of voted (from 0 to voteCount)
	 *
	 */
	valueAsPercent?: boolean;

	/**
	 * Gets if igRating can have focus. Change of that option is not supported after igRating was created.
	 * Value true: can get focus and process key events.
	 * Value false: cannot get focus.
	 *
	 */
	focusable?: boolean;

	/**
	 * Gets/Sets precision. Precision of value and valueHover.
	 *
	 *
	 * Valid values:
	 * "exact" Value corresponds location of mouse.
	 * "half" Value is rounded to the half of vote.
	 * "whole" Value is rounded to the number of votes.
	 */
	precision?: string;

	/**
	 * Gets/Sets part of vote-size, which is considered as zero value.
	 * It has effect only when precision is set to "half" or "whole".
	 * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
	 * Same is applied for mouseover as well.
	 *
	 */
	precisionZeroVote?: number;

	/**
	 * Gets/Sets number of decimal places used to round value and value-hover.
	 * Negative value will disable that option and value will not be rounded.
	 * Notes:
	 * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
	 * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
	 * If it is larger than 15, then 15 is used.
	 *
	 */
	roundedDecimalPlaces?: number;

	/**
	 * Gets/Sets selector for css classes.
	 * That option allows replacing all default css styles by custom values.
	 * Application should provide css classes for all members defined in the css options with "theme" selector.
	 *
	 */
	theme?: string;

	/**
	 * Gets/Sets object which contains options supported by igValidator.
	 * Note that for onblur validation depends on the [focusable](ui.igrating#options:focusable) option.
	 *
	 */
	validatorOptions?: any;

	/**
	 * Gets/Sets custom css votes.
	 * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
	 * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
	 * Item at index [0] on second level is used for css class of vote in normal state.
	 * Item at index [1] on second level is used for css class of vote in selected state.
	 * Item at index [2] on second level is used for css class of vote in hover state.
	 * Examples:
	 * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
	 * will customize only second vote with [normalCss](ui.igrating#theming:ui-igrating ui-state-default ui-widget-content) for normal state, [hoverCss](ui.igrating#theming:ui-igrating-hover ui-state-hover) for hover state and [selectedCss](ui.igrating#theming:ui-igrating-voteselected) for selected state.
	 * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
	 * will customize selected and hover states for first 3 votes with classes h# and s#.
	 *
	 */
	cssVotes?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired before hover value is changed.
	 * If the application returns false, then the action is canceled and the value remains unchanged.
	 */
	hoverChange?: HoverChangeEvent;

	/**
	 * Fired before (selected) value is changed.
	 * If the application returns false, then the action is canceled and the value remains unchanged.
	 */
	valueChange?: ValueChangeEvent;

	/**
	 * Option for igRating
	 */
	[optionName: string]: any;
}
interface IgRatingMethods {
	/**
	 * Gets reference to [igValidator](ui.igvalidator) used by igRating.
	 *
	 * @param destroy Request to destroy validator.
	 */
	validator(destroy?: boolean): Object;

	/**
	 * Triggers validation.
	 */
	validate(): boolean;

	/**
	 * Gets/Sets (selected) value.
	 *
	 * @param val New value which is rendered with selected css.
	 * @return number|object If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
	 */
	value(val: number): number|Object;

	/**
	 * Gets/Sets hover value.
	 *
	 * @param val New value which will be rendered with hover css when rating gets mouse.
	 * @return number|object If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
	 */
	valueHover(val?: number): number|Object;

	/**
	 * Checks if igRating has focus.
	 */
	hasFocus(): boolean;

	/**
	 * Sets focus to igRating. That has effect only when options.focusable is enabled.
	 */
	focus(): Object;

	/**
	 * Destroys igRating widget.
	 */
	destroy(): Object;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igRating"): IgRatingMethods;
}

interface JQuery {
	igRating(methodName: "validator", destroy?: boolean): Object;
	igRating(methodName: "validate"): boolean;
	igRating(methodName: "value", val: number): number|Object;
	igRating(methodName: "valueHover", val?: number): number|Object;
	igRating(methodName: "hasFocus"): boolean;
	igRating(methodName: "focus"): Object;
	igRating(methodName: "destroy"): Object;
	igRating(methodName: "changeLocale", $container: Object): void;
	igRating(methodName: "changeGlobalLanguage"): void;
	igRating(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets a vertical or horizontal orientation for the votes.
	 * Change of that option is not supported after igRating was created.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "vertical"): boolean;

	/**
	 * A vertical or horizontal orientation for the votes.
	 * Change of that option is not supported after igRating was created.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "vertical", optionValue: boolean): void;

	/**
	 * Gets/Sets value (selected votes or percent). If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the value is used as number of selected votes or as a percent of the votes.
	 *
	 */

	igRating(optionLiteral: 'option', optionName: "value"): number|string;

	/**
	 * /Sets value (selected votes or percent). If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the value is used as number of selected votes or as a percent of the votes.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igRating(optionLiteral: 'option', optionName: "value", optionValue: number|string): void;

	/**
	 * Gets/Sets value-hover (hovered votes or percent of hovered votes). The default is same as value. If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the valueHover is used as number of hovered votes or as a percent of the hovered votes.
	 *
	 */

	igRating(optionLiteral: 'option', optionName: "valueHover"): number|string;

	/**
	 * /Sets value-hover (hovered votes or percent of hovered votes). The default is same as value. If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the valueHover is used as number of hovered votes or as a percent of the hovered votes.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igRating(optionLiteral: 'option', optionName: "valueHover", optionValue: number|string): void;

	/**
	 * Gets/Sets number of votes.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "voteCount"): number;

	/**
	 * /Sets number of votes.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "voteCount", optionValue: number): void;

	/**
	 * Gets/Sets custom width of a vote in pixels. In case of 0 the run time style value is used.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "voteWidth"): number;

	/**
	 * /Sets custom width of a vote in pixels. In case of 0 the run time style value is used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "voteWidth", optionValue: number): void;

	/**
	 * Gets/Sets custom height of a vote in pixels. In case of 0 the run time style value is used.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "voteHeight"): number;

	/**
	 * /Sets custom height of a vote in pixels. In case of 0 the run time style value is used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "voteHeight", optionValue: number): void;

	/**
	 * Gets the direction of selected and hovered votes. Change of that option is not supported after igRating was created.
	 * Value true: from left to right or from top to bottom.
	 * Value false: from right to left or from bottom to left.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "swapDirection"): boolean;

	/**
	 * The direction of selected and hovered votes. Change of that option is not supported after igRating was created.
	 * Value true: from left to right or from top to bottom.
	 * Value false: from right to left or from bottom to left.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "swapDirection", optionValue: boolean): void;

	/**
	 * Gets/Sets percent or vote number to measure value and value-hover.
	 * Value true: value is measured as percent (from 0 to 1).
	 * Value false: value is measured in number of voted (from 0 to voteCount)
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "valueAsPercent"): boolean;

	/**
	 * /Sets percent or vote number to measure value and value-hover.
	 * Value true: value is measured as percent (from 0 to 1).
	 * Value false: value is measured in number of voted (from 0 to voteCount)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "valueAsPercent", optionValue: boolean): void;

	/**
	 * Gets if igRating can have focus. Change of that option is not supported after igRating was created.
	 * Value true: can get focus and process key events.
	 * Value false: cannot get focus.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "focusable"): boolean;

	/**
	 * If igRating can have focus. Change of that option is not supported after igRating was created.
	 * Value true: can get focus and process key events.
	 * Value false: cannot get focus.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "focusable", optionValue: boolean): void;

	/**
	 * Gets/Sets precision. Precision of value and valueHover.
	 *
	 */

	igRating(optionLiteral: 'option', optionName: "precision"): string;

	/**
	 * /Sets precision. Precision of value and valueHover.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igRating(optionLiteral: 'option', optionName: "precision", optionValue: string): void;

	/**
	 * Gets/Sets part of vote-size, which is considered as zero value.
	 * It has effect only when precision is set to "half" or "whole".
	 * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
	 * Same is applied for mouseover as well.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "precisionZeroVote"): number;

	/**
	 * /Sets part of vote-size, which is considered as zero value.
	 * It has effect only when precision is set to "half" or "whole".
	 * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
	 * Same is applied for mouseover as well.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "precisionZeroVote", optionValue: number): void;

	/**
	 * Gets/Sets number of decimal places used to round value and value-hover.
	 * Negative value will disable that option and value will not be rounded.
	 * Notes:
	 * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
	 * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
	 * If it is larger than 15, then 15 is used.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "roundedDecimalPlaces"): number;

	/**
	 * /Sets number of decimal places used to round value and value-hover.
	 * Negative value will disable that option and value will not be rounded.
	 * Notes:
	 * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
	 * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
	 * If it is larger than 15, then 15 is used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "roundedDecimalPlaces", optionValue: number): void;

	/**
	 * Gets/Sets selector for css classes.
	 * That option allows replacing all default css styles by custom values.
	 * Application should provide css classes for all members defined in the css options with "theme" selector.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "theme"): string;

	/**
	 * /Sets selector for css classes.
	 * That option allows replacing all default css styles by custom values.
	 * Application should provide css classes for all members defined in the css options with "theme" selector.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "theme", optionValue: string): void;

	/**
	 * Gets/Sets object which contains options supported by igValidator.
	 * Note that for onblur validation depends on the [focusable](ui.igrating#options:focusable) option.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "validatorOptions"): any;

	/**
	 * /Sets object which contains options supported by igValidator.
	 * Note that for onblur validation depends on the [focusable](ui.igrating#options:focusable) option.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;

	/**
	 * Gets/Sets custom css votes.
	 * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
	 * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
	 * Item at index [0] on second level is used for css class of vote in normal state.
	 * Item at index [1] on second level is used for css class of vote in selected state.
	 * Item at index [2] on second level is used for css class of vote in hover state.
	 * Examples:
	 * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
	 * will customize only second vote with [normalCss](ui.igrating#theming:ui-igrating ui-state-default ui-widget-content) for normal state, [hoverCss](ui.igrating#theming:ui-igrating-hover ui-state-hover) for hover state and [selectedCss](ui.igrating#theming:ui-igrating-voteselected) for selected state.
	 * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
	 * will customize selected and hover states for first 3 votes with classes h# and s#.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "cssVotes"): any;

	/**
	 * /Sets custom css votes.
	 * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
	 * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
	 * Item at index [0] on second level is used for css class of vote in normal state.
	 * Item at index [1] on second level is used for css class of vote in selected state.
	 * Item at index [2] on second level is used for css class of vote in hover state.
	 * Examples:
	 * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
	 * will customize only second vote with [normalCss](ui.igrating#theming:ui-igrating ui-state-default ui-widget-content) for normal state, [hoverCss](ui.igrating#theming:ui-igrating-hover ui-state-hover) for hover state and [selectedCss](ui.igrating#theming:ui-igrating-voteselected) for selected state.
	 * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
	 * will customize selected and hover states for first 3 votes with classes h# and s#.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "cssVotes", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igRating(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igRating(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igRating(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired before hover value is changed.
	 * If the application returns false, then the action is canceled and the value remains unchanged.
	 */
	igRating(optionLiteral: 'option', optionName: "hoverChange"): HoverChangeEvent;

	/**
	 * Fired before hover value is changed.
	 * If the application returns false, then the action is canceled and the value remains unchanged.
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "hoverChange", optionValue: HoverChangeEvent): void;

	/**
	 * Fired before (selected) value is changed.
	 * If the application returns false, then the action is canceled and the value remains unchanged.
	 */
	igRating(optionLiteral: 'option', optionName: "valueChange"): ValueChangeEvent;

	/**
	 * Fired before (selected) value is changed.
	 * If the application returns false, then the action is canceled and the value remains unchanged.
	 *
	 * @optionValue New value to be set.
	 */
	igRating(optionLiteral: 'option', optionName: "valueChange", optionValue: ValueChangeEvent): void;
	igRating(options: IgRating): JQuery;
	igRating(optionLiteral: 'option', optionName: string): any;
	igRating(optionLiteral: 'option', options: IgRating): JQuery;
	igRating(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igRating(methodName: string, ...methodParams: any[]): any;
}
interface IgSchedulerAgendaViewSettings {
	/**
	 * Gets/Sets the number of days shown in AgendaView mode.
	 *
	 */
	dateRangeInterval?: number;

	/**
	 * Option for IgSchedulerAgendaViewSettings
	 */
	[optionName: string]: any;
}

interface IgSchedulerWeekViewSettings {
	/**
	 * Gets/Sets the week view display mode (whether to show all days or just working days).
	 *
	 */
	weekViewDisplayMode?: string;

	/**
	 * Gets/Sets whether to display all hours or just working hours.
	 *
	 */
	workingHoursDisplayMode?: string;

	/**
	 * Gets/Sets the time slots duration. 5, 6, 10, 15, 30 and 60 minutes are supported.
	 *
	 */
	timeSlotInterval?: string;

	/**
	 * Option for IgSchedulerWeekViewSettings
	 */
	[optionName: string]: any;
}

interface IgSchedulerDayViewSettings {
	/**
	 * Gets/Sets the time slots duration. 5, 6, 10, 15, 30 and 60 minutes are supported.
	 *
	 */
	timeSlotInterval?: string;

	/**
	 * Gets/Sets the number of days are visible at a time in the day view. 1 to 7 days are supported.
	 *
	 */
	dayViewNumberOfDays?: number;

	/**
	 * Gets/Sets whether to display all hours or just working hours.
	 *
	 */
	workingHoursDisplayMode?: string;

	/**
	 * Option for IgSchedulerDayViewSettings
	 */
	[optionName: string]: any;
}

interface IgSchedulerMonthViewSettings {
	/**
	 * Gets/Sets the type of content displayed in a MonthView day.
	 *
	 * auto  Depending on the screen size, indicates square indicator mode for the appointment in the Month View, if scheduler size is larger than 768px, otherwise identifies horizontal one.
	 * indicator  Indicates that a square indicator should be displayed.
	 * detailed  Indicates that the subject should be displayed.
	 */
	appointmentMode?: string;

	/**
	 * Gets/Sets the visibility of an AgendaView in a MonthView.  When true, the MonthView will display an AgendaView showing the Appointments for the currently selected day at the top of its list of Appointments.
	 *
	 */
	isAgendaVisible?: boolean;

	/**
	 * Gets/Sets the scope of appointments that are displayed in a MonthView's AgendaView.
	 *
	 * allAppointments  Indicates that appointments for all days should be displayed in an AgendaView when it is a secondary view within a MonthView.
	 * onlyAppointmentsForSelectedMonthViewDay  Indicates that only appointments for the day that is current selected in the associated MonthView should be displayed in an AgendaView that is associated with a MonthView as a secondary view.
	 */
	agendaVisibilityType?: string;

	/**
	 * Gets/Sets the orientation, which determines whether the MonthView and AgendaView views are split vertically or horizontally. This option can be used when the AgendaView is displayed in the MonthView.
	 *
	 * auto  Depending on the screen size, identifies vertical split if scheduler size is larger than 768px, otherwise identifies horizontal one.
	 * vertical  Identifies a vertical split between the Scheduler's views.
	 * horizontal  Identifies a horizontal split between the Scheduler's views.
	 */
	viewSplitOrientation?: string;

	/**
	 * Gets/sets the visibility of the horizontal separators between weeks in the MonthView.
	 *
	 */
	isHorizontalSeparatorVisibile?: boolean;

	/**
	 * Gets/sets the visibility of the vertical separators between days of the week in a MonthView.
	 *
	 */
	isVerticalSeparatorVisibile?: boolean;

	/**
	 * Gets/sets the visibility of the weekday names in MonthView.
	 *
	 */
	isWeekdayVisible?: boolean;

	/**
	 * Gets/sets the visibility of the week numbers in a MonthView.
	 *
	 */
	isWeekNumberVisible?: boolean;

	/**
	 * Gets/sets the visibility of the days from the previous month that occur in the first week of a given month.
	 *
	 */
	isPreviousMonthShown?: boolean;

	/**
	 * Gets/sets the visibility of the days from the next month that occur in the last week of a given month.
	 *
	 */
	isNextMonthShown?: boolean;

	/**
	 * Option for IgSchedulerMonthViewSettings
	 */
	[optionName: string]: any;
}

interface AgendaRangeChangingEvent {
	(event: Event, ui: AgendaRangeChangingEventUIParam): void;
}

interface AgendaRangeChangingEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the days to be shown in AgendaView mode.
	 */
	dateRangeInterval?: number;

	/**
	 * Gets a reference to the current AgendaView start date.
	 */
	currentAgendaRangeStartDate?: any;

	/**
	 * Gets a reference to the newly AgendaView start date.
	 */
	newAgendaRangeStartDate?: any;
}

interface AgendaRangeChangedEvent {
	(event: Event, ui: AgendaRangeChangedEventUIParam): void;
}

interface AgendaRangeChangedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the days to be shown in AgendaView mode.
	 */
	dateRangeInterval?: number;

	/**
	 * Gets a reference to the newly AgendaView start date.
	 */
	newAgendaRangeStartDate?: any;
}

interface DaySelectedEvent {
	(event: Event, ui: DaySelectedEventUIParam): void;
}

interface DaySelectedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to currently selected date.
	 */
	date?: any;
}

interface MonthChangingEvent {
	(event: Event, ui: MonthChangingEventUIParam): void;
}

interface MonthChangingEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to newly selected date.
	 */
	newSelectedDate?: any;

	/**
	 * Gets a reference to the currently selected date.
	 */
	currentSelectedDate?: any;
}

interface MonthChangedEvent {
	(event: Event, ui: MonthChangedEventUIParam): void;
}

interface MonthChangedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to newly selected date.
	 */
	newSelectedDate?: any;
}

interface WeekChangingEvent {
	(event: Event, ui: WeekChangingEventUIParam): void;
}

interface WeekChangingEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to newly selected date.
	 */
	newSelectedDate?: any;

	/**
	 * Gets a reference to the currently selected date.
	 */
	currentSelectedDate?: any;
}

interface WeekChangedEvent {
	(event: Event, ui: WeekChangedEventUIParam): void;
}

interface WeekChangedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to newly selected date.
	 */
	newSelectedDate?: any;
}

interface DayChangingEvent {
	(event: Event, ui: DayChangingEventUIParam): void;
}

interface DayChangingEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to newly selected date.
	 */
	newSelectedDate?: any;

	/**
	 * Gets a reference to the currently selected date.
	 */
	currentSelectedDate?: any;
}

interface DayChangedEvent {
	(event: Event, ui: DayChangedEventUIParam): void;
}

interface DayChangedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to newly selected date.
	 */
	newSelectedDate?: any;
}

interface ViewChangingEvent {
	(event: Event, ui: ViewChangingEventUIParam): void;
}

interface ViewChangingEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the currently selected view.
	 */
	currentSelectedView?: string;

	/**
	 * Gets a reference to the newly selected view.
	 */
	newSelectedView?: string;
}

interface ViewChangedEvent {
	(event: Event, ui: ViewChangedEventUIParam): void;
}

interface ViewChangedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the newly selected view.
	 */
	newSelectedView?: string;
}

interface AppointmentDialogOpeningEvent {
	(event: Event, ui: AppointmentDialogOpeningEventUIParam): void;
}

interface AppointmentDialogOpeningEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the appointment dialog.
	 */
	element?: any;

	/**
	 * Gets whether we are creating or updating an appointment.
	 */
	isAppointmentNew?: boolean;
}

interface AppointmentDialogOpenedEvent {
	(event: Event, ui: AppointmentDialogOpenedEventUIParam): void;
}

interface AppointmentDialogOpenedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the appointment dialog.
	 */
	element?: any;

	/**
	 * Gets whether we are creating or updating an appointment.
	 */
	isAppointmentNew?: boolean;
}

interface AppointmentDialogClosingEvent {
	(event: Event, ui: AppointmentDialogClosingEventUIParam): void;
}

interface AppointmentDialogClosingEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the appointment dialog.
	 */
	element?: any;

	/**
	 * Gets whether we are creating or updating an appointment.
	 */
	isAppointmentNew?: boolean;
}

interface AppointmentDialogClosedEvent {
	(event: Event, ui: AppointmentDialogClosedEventUIParam): void;
}

interface AppointmentDialogClosedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the appointment dialog.
	 */
	element?: any;

	/**
	 * Gets whether we are creating or updating an appointment.
	 */
	isAppointmentNew?: boolean;
}

interface AppointmentCreatingEvent {
	(event: Event, ui: AppointmentCreatingEventUIParam): void;
}

interface AppointmentCreatingEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the appointment which is going to be created.
	 */
	appointment?: any;
}

interface AppointmentCreatedEvent {
	(event: Event, ui: AppointmentCreatedEventUIParam): void;
}

interface AppointmentCreatedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the created appointment.
	 */
	appointment?: any;
}

interface AppointmentDeletingEvent {
	(event: Event, ui: AppointmentDeletingEventUIParam): void;
}

interface AppointmentDeletingEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the appointment which is going to be deleted.
	 */
	appointment?: any;
}

interface AppointmentDeletedEvent {
	(event: Event, ui: AppointmentDeletedEventUIParam): void;
}

interface AppointmentDeletedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets the id of the deleted appointment.
	 */
	appointmentId?: any;
}

interface AppointmentEditingEvent {
	(event: Event, ui: AppointmentEditingEventUIParam): void;
}

interface AppointmentEditingEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the original appointment.
	 */
	appointment?: any;

	/**
	 * Gets a reference to the appointment with the edited values.
	 */
	newAppointment?: any;
}

interface AppointmentEditedEvent {
	(event: Event, ui: AppointmentEditedEventUIParam): void;
}

interface AppointmentEditedEventUIParam {
	/**
	 * Gets a reference to the scheduler.
	 */
	owner?: any;

	/**
	 * Gets a reference to the edited appointment.
	 */
	appointment?: any;
}

interface IgScheduler {
	/**
	 * Lists of all the views, rendered in the Scheduler.
	 *
	 */
	views?: any[];

	/**
	 * Gets/Sets current view mode in the Scheduler. If this options is not defined, then the first defined view in the views property is taken.
	 *
	 *
	 * Valid values:
	 * "monthView" Enables MonthView in the Scheduler.
	 * "agendaView" Enables AgendaView in the Scheduler.
	 */
	viewMode?: string;

	/**
	 * Gets/Sets selected date in the Scheduler.
	 *
	 */
	selectedDate?: Date;

	/**
	 * Enables/Disables today button.
	 *
	 */
	enableTodayButton?: boolean;

	/**
	 * Gets/Sets the width of the control.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control.
	 *
	 *
	 * Valid values:
	 * "null" will fit the editor inside its parent container, if no other heights are defined.
	 */
	height?: string|number;

	/**
	 * Gets/Sets AgendaView settings.
	 *
	 */
	agendaViewSettings?: IgSchedulerAgendaViewSettings;

	/**
	 * Gets/Sets WeekView settings.
	 *
	 */
	weekViewSettings?: IgSchedulerWeekViewSettings;

	/**
	 * Gets/Sets DayView settings.
	 *
	 */
	dayViewSettings?: IgSchedulerDayViewSettings;

	/**
	 * Gets/Sets MonthView settings.
	 *
	 */
	monthViewSettings?: IgSchedulerMonthViewSettings;

	/**
	 * Gets/Sets whether the appointment dialog and the related day and appointment popups should be shown.
	 *
	 */
	appointmentDialogSuppress?: boolean;

	/**
	 * Gets/Sets dataSource of type $.ig.scheduler.ScheduleListDataSource.
	 *
	 */
	dataSource?: any;

	/**
	 * Gets the resources collection that holds the activities` owners
	 *
	 * //Initialize
	 * var resources = [
	 * { id: 1, displayName: "Trina Friesen" },
	 * { id: 2, displayName: "Mack Koch" }];
	 * $(".selector").%%WidgetName%%({
	 * resources: resources
	 * });
	 *
	 * // Get
	 * var resources = $(".selector").%%WidgetName%%("option", "resources");
	 */
	resources?: any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired before agenda view range is changed when using previous and next buttons (fired only in Agenda View)
	 */
	agendaRangeChanging?: AgendaRangeChangingEvent;

	/**
	 * Fired after agenda view range is changed when using previous and next buttons (fired only in Agenda View)
	 */
	agendaRangeChanged?: AgendaRangeChangedEvent;

	/**
	 * Fired when a day is selected from the datepicker calendar.
	 */
	daySelected?: DaySelectedEvent;

	/**
	 * Fired before changing the month begins, when using previous and next buttons (fired only in Month View)
	 */
	monthChanging?: MonthChangingEvent;

	/**
	 * Fired after month is changed when using previous and next buttons (fired only in Month View)
	 */
	monthChanged?: MonthChangedEvent;

	/**
	 * Fired before rendering of the scheduler begins.
	 */
	rendering?: RenderingEvent;

	/**
	 * Fired after rendering of the scheduler has finished.
	 */
	rendered?: RenderedEvent;

	/**
	 * Fired before changing the week begins, when using previous and next buttons (fired only in Week View)
	 */
	weekChanging?: WeekChangingEvent;

	/**
	 * Fired after week is changed when using previous and next buttons (fired only in Week View)
	 */
	weekChanged?: WeekChangedEvent;

	/**
	 * Fired before changing the day begins, when using previous and next buttons (fired only in Day View)
	 */
	dayChanging?: DayChangingEvent;

	/**
	 * Fired after day is changed when using previous and next buttons (fired only in Day View)
	 */
	dayChanged?: DayChangedEvent;

	/**
	 * Fired before the view is changed, when using the menu buttons.
	 */
	viewChanging?: ViewChangingEvent;

	/**
	 * Fired after the view is changed, when using the menu buttons.
	 */
	viewChanged?: ViewChangedEvent;

	/**
	 * Fired before opening the dialog for creating/editing appointment.
	 */
	appointmentDialogOpening?: AppointmentDialogOpeningEvent;

	/**
	 * Fired after opening the dialog for creating/editing appointment.
	 */
	appointmentDialogOpened?: AppointmentDialogOpenedEvent;

	/**
	 * Fired before closing the dialog for adding/editing appointment.
	 */
	appointmentDialogClosing?: AppointmentDialogClosingEvent;

	/**
	 * Fired after closing the dialog window for adding/editing appointment.
	 */
	appointmentDialogClosed?: AppointmentDialogClosedEvent;

	/**
	 * Fired before an appointment is created.
	 */
	appointmentCreating?: AppointmentCreatingEvent;

	/**
	 * Fired after an appointment is created.
	 */
	appointmentCreated?: AppointmentCreatedEvent;

	/**
	 * Fired before an appointment is deleted.
	 */
	appointmentDeleting?: AppointmentDeletingEvent;

	/**
	 * Fired after an appointment is deleted.
	 */
	appointmentDeleted?: AppointmentDeletedEvent;

	/**
	 * Fired before an appointment is edited.
	 */
	appointmentEditing?: AppointmentEditingEvent;

	/**
	 * Fired after an appointment is edited.
	 */
	appointmentEdited?: AppointmentEditedEvent;

	/**
	 * Option for igScheduler
	 */
	[optionName: string]: any;
}
interface IgSchedulerMethods {
	/**
	 * Creates an appointment and adds it to the appointment collection
	 *
	 * @param appointment appointment
	 */
	createAppointment(appointment: Object): Object;

	/**
	 * Gets reference to a collection of all appointments for the given time range
	 *
	 * @param start Start date.
	 * @param end End date.
	 */
	getAppointmentsInRange(start: Date, end: Date): Object;

	/**
	 * Deletes appointment from the appointment collection
	 *
	 * @param appointment appointment
	 */
	deleteAppointment(appointment: Object): Object;

	/**
	 * Deletes appointment from the appointment collection
	 *
	 * @param appointment appointment
	 * @param updateAppoinment updateAppoinment
	 */
	editAppointment(appointment: Object, updateAppoinment: Object): Object;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igscheduler#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igscheduler#options:language) or [locale](ui.igscheduler#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Destroys the widget
	 */
	destroy(): void;

	/**
	 * Gets reference to the today UI button.
	 */
	todayButton(): string;

	/**
	 * Gets reference to the previous UI button.
	 */
	previousButton(): string;

	/**
	 * Gets reference to the date range UI button.
	 */
	dateRangeButton(): string;

	/**
	 * Gets reference to the next UI button.
	 */
	nextButton(): string;

	/**
	 * Gets reference to the jQuery calendar UI control.
	 */
	getCalendar(): string;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igScheduler"): IgSchedulerMethods;
}

interface JQuery {
	igScheduler(methodName: "createAppointment", appointment: Object): Object;
	igScheduler(methodName: "getAppointmentsInRange", start: Date, end: Date): Object;
	igScheduler(methodName: "deleteAppointment", appointment: Object): Object;
	igScheduler(methodName: "editAppointment", appointment: Object, updateAppoinment: Object): Object;
	igScheduler(methodName: "changeLocale"): void;
	igScheduler(methodName: "destroy"): void;
	igScheduler(methodName: "todayButton"): string;
	igScheduler(methodName: "previousButton"): string;
	igScheduler(methodName: "dateRangeButton"): string;
	igScheduler(methodName: "nextButton"): string;
	igScheduler(methodName: "getCalendar"): string;
	igScheduler(methodName: "changeGlobalLanguage"): void;
	igScheduler(methodName: "changeGlobalRegional"): void;

	/**
	 * Lists of all the views, rendered in the Scheduler.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "views"): any[];

	/**
	 * Lists of all the views, rendered in the Scheduler.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "views", optionValue: any[]): void;

	/**
	 * Gets/Sets current view mode in the Scheduler. If this options is not defined, then the first defined view in the views property is taken.
	 *
	 */

	igScheduler(optionLiteral: 'option', optionName: "viewMode"): string;

	/**
	 * /Sets current view mode in the Scheduler. If this options is not defined, then the first defined view in the views property is taken.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igScheduler(optionLiteral: 'option', optionName: "viewMode", optionValue: string): void;

	/**
	 * Gets/Sets selected date in the Scheduler.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "selectedDate"): Date;

	/**
	 * /Sets selected date in the Scheduler.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "selectedDate", optionValue: Date): void;

	/**
	 * Enables/Disables today button.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "enableTodayButton"): boolean;

	/**
	 * Enables/Disables today button.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "enableTodayButton", optionValue: boolean): void;

	/**
	 * Gets/Sets the width of the control.
	 *
	 */

	igScheduler(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igScheduler(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control.
	 *
	 */

	igScheduler(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igScheduler(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets AgendaView settings.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "agendaViewSettings"): IgSchedulerAgendaViewSettings;

	/**
	 * /Sets AgendaView settings.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "agendaViewSettings", optionValue: IgSchedulerAgendaViewSettings): void;

	/**
	 * Gets/Sets WeekView settings.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "weekViewSettings"): IgSchedulerWeekViewSettings;

	/**
	 * /Sets WeekView settings.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "weekViewSettings", optionValue: IgSchedulerWeekViewSettings): void;

	/**
	 * Gets/Sets DayView settings.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "dayViewSettings"): IgSchedulerDayViewSettings;

	/**
	 * /Sets DayView settings.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "dayViewSettings", optionValue: IgSchedulerDayViewSettings): void;

	/**
	 * Gets/Sets MonthView settings.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "monthViewSettings"): IgSchedulerMonthViewSettings;

	/**
	 * /Sets MonthView settings.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "monthViewSettings", optionValue: IgSchedulerMonthViewSettings): void;

	/**
	 * Gets/Sets whether the appointment dialog and the related day and appointment popups should be shown.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogSuppress"): boolean;

	/**
	 * /Sets whether the appointment dialog and the related day and appointment popups should be shown.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogSuppress", optionValue: boolean): void;

	/**
	 * Gets/Sets dataSource of type $.ig.scheduler.ScheduleListDataSource.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * /Sets dataSource of type $.ig.scheduler.ScheduleListDataSource.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets the resources collection that holds the activities` owners
	 *
	 * //Initialize
	 * var resources = [
	 * { id: 1, displayName: "Trina Friesen" },
	 * { id: 2, displayName: "Mack Koch" }];
	 * $(".selector").%%WidgetName%%({
	 * resources: resources
	 * });
	 *
	 * // Get
	 * var resources = $(".selector").%%WidgetName%%("option", "resources");
	 */
	igScheduler(optionLiteral: 'option', optionName: "resources"): any;

	/**
	 * The resources collection that holds the activities` owners
	 *
	 * //Initialize
	 * var resources = [
	 * { id: 1, displayName: "Trina Friesen" },
	 * { id: 2, displayName: "Mack Koch" }];
	 * $(".selector").%%WidgetName%%({
	 * resources: resources
	 * });
	 *
	 * // Get
	 * var resources = $(".selector").%%WidgetName%%("option", "resources");
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "resources", optionValue: any): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igScheduler(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igScheduler(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igScheduler(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired before agenda view range is changed when using previous and next buttons (fired only in Agenda View)
	 */
	igScheduler(optionLiteral: 'option', optionName: "agendaRangeChanging"): AgendaRangeChangingEvent;

	/**
	 * Fired before agenda view range is changed when using previous and next buttons (fired only in Agenda View)
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "agendaRangeChanging", optionValue: AgendaRangeChangingEvent): void;

	/**
	 * Fired after agenda view range is changed when using previous and next buttons (fired only in Agenda View)
	 */
	igScheduler(optionLiteral: 'option', optionName: "agendaRangeChanged"): AgendaRangeChangedEvent;

	/**
	 * Fired after agenda view range is changed when using previous and next buttons (fired only in Agenda View)
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "agendaRangeChanged", optionValue: AgendaRangeChangedEvent): void;

	/**
	 * Fired when a day is selected from the datepicker calendar.
	 */
	igScheduler(optionLiteral: 'option', optionName: "daySelected"): DaySelectedEvent;

	/**
	 * Fired when a day is selected from the datepicker calendar.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "daySelected", optionValue: DaySelectedEvent): void;

	/**
	 * Fired before changing the month begins, when using previous and next buttons (fired only in Month View)
	 */
	igScheduler(optionLiteral: 'option', optionName: "monthChanging"): MonthChangingEvent;

	/**
	 * Fired before changing the month begins, when using previous and next buttons (fired only in Month View)
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "monthChanging", optionValue: MonthChangingEvent): void;

	/**
	 * Fired after month is changed when using previous and next buttons (fired only in Month View)
	 */
	igScheduler(optionLiteral: 'option', optionName: "monthChanged"): MonthChangedEvent;

	/**
	 * Fired after month is changed when using previous and next buttons (fired only in Month View)
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "monthChanged", optionValue: MonthChangedEvent): void;

	/**
	 * Fired before rendering of the scheduler begins.
	 */
	igScheduler(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Fired before rendering of the scheduler begins.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Fired after rendering of the scheduler has finished.
	 */
	igScheduler(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Fired after rendering of the scheduler has finished.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Fired before changing the week begins, when using previous and next buttons (fired only in Week View)
	 */
	igScheduler(optionLiteral: 'option', optionName: "weekChanging"): WeekChangingEvent;

	/**
	 * Fired before changing the week begins, when using previous and next buttons (fired only in Week View)
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "weekChanging", optionValue: WeekChangingEvent): void;

	/**
	 * Fired after week is changed when using previous and next buttons (fired only in Week View)
	 */
	igScheduler(optionLiteral: 'option', optionName: "weekChanged"): WeekChangedEvent;

	/**
	 * Fired after week is changed when using previous and next buttons (fired only in Week View)
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "weekChanged", optionValue: WeekChangedEvent): void;

	/**
	 * Fired before changing the day begins, when using previous and next buttons (fired only in Day View)
	 */
	igScheduler(optionLiteral: 'option', optionName: "dayChanging"): DayChangingEvent;

	/**
	 * Fired before changing the day begins, when using previous and next buttons (fired only in Day View)
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "dayChanging", optionValue: DayChangingEvent): void;

	/**
	 * Fired after day is changed when using previous and next buttons (fired only in Day View)
	 */
	igScheduler(optionLiteral: 'option', optionName: "dayChanged"): DayChangedEvent;

	/**
	 * Fired after day is changed when using previous and next buttons (fired only in Day View)
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "dayChanged", optionValue: DayChangedEvent): void;

	/**
	 * Fired before the view is changed, when using the menu buttons.
	 */
	igScheduler(optionLiteral: 'option', optionName: "viewChanging"): ViewChangingEvent;

	/**
	 * Fired before the view is changed, when using the menu buttons.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "viewChanging", optionValue: ViewChangingEvent): void;

	/**
	 * Fired after the view is changed, when using the menu buttons.
	 */
	igScheduler(optionLiteral: 'option', optionName: "viewChanged"): ViewChangedEvent;

	/**
	 * Fired after the view is changed, when using the menu buttons.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "viewChanged", optionValue: ViewChangedEvent): void;

	/**
	 * Fired before opening the dialog for creating/editing appointment.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogOpening"): AppointmentDialogOpeningEvent;

	/**
	 * Fired before opening the dialog for creating/editing appointment.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogOpening", optionValue: AppointmentDialogOpeningEvent): void;

	/**
	 * Fired after opening the dialog for creating/editing appointment.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogOpened"): AppointmentDialogOpenedEvent;

	/**
	 * Fired after opening the dialog for creating/editing appointment.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogOpened", optionValue: AppointmentDialogOpenedEvent): void;

	/**
	 * Fired before closing the dialog for adding/editing appointment.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogClosing"): AppointmentDialogClosingEvent;

	/**
	 * Fired before closing the dialog for adding/editing appointment.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogClosing", optionValue: AppointmentDialogClosingEvent): void;

	/**
	 * Fired after closing the dialog window for adding/editing appointment.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogClosed"): AppointmentDialogClosedEvent;

	/**
	 * Fired after closing the dialog window for adding/editing appointment.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDialogClosed", optionValue: AppointmentDialogClosedEvent): void;

	/**
	 * Fired before an appointment is created.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentCreating"): AppointmentCreatingEvent;

	/**
	 * Fired before an appointment is created.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentCreating", optionValue: AppointmentCreatingEvent): void;

	/**
	 * Fired after an appointment is created.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentCreated"): AppointmentCreatedEvent;

	/**
	 * Fired after an appointment is created.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentCreated", optionValue: AppointmentCreatedEvent): void;

	/**
	 * Fired before an appointment is deleted.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDeleting"): AppointmentDeletingEvent;

	/**
	 * Fired before an appointment is deleted.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDeleting", optionValue: AppointmentDeletingEvent): void;

	/**
	 * Fired after an appointment is deleted.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDeleted"): AppointmentDeletedEvent;

	/**
	 * Fired after an appointment is deleted.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentDeleted", optionValue: AppointmentDeletedEvent): void;

	/**
	 * Fired before an appointment is edited.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentEditing"): AppointmentEditingEvent;

	/**
	 * Fired before an appointment is edited.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentEditing", optionValue: AppointmentEditingEvent): void;

	/**
	 * Fired after an appointment is edited.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentEdited"): AppointmentEditedEvent;

	/**
	 * Fired after an appointment is edited.
	 *
	 * @optionValue New value to be set.
	 */
	igScheduler(optionLiteral: 'option', optionName: "appointmentEdited", optionValue: AppointmentEditedEvent): void;
	igScheduler(options: IgScheduler): JQuery;
	igScheduler(optionLiteral: 'option', optionName: string): any;
	igScheduler(optionLiteral: 'option', options: IgScheduler): JQuery;
	igScheduler(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igScheduler(methodName: string, ...methodParams: any[]): any;
}
interface ScrollingEvent {
	(event: Event, ui: ScrollingEventUIParam): void;
}

interface ScrollingEventUIParam {
	/**
	 * Gets a reference to the igScroll.
	 */
	owner?: any;

	/**
	 * Gets if the content is scrolled by the arrows. 0 - none used, -1 - Arrow Up/Left, 1 - Arrow Down/Right.
	 */
	smallIncrement?: number;

	/**
	 * Gets if the content is scrolled by the scrollbar track areas. 0 - none used, -1 - Scrolled Up/Left, 1 - Scrolled Down/Right.
	 */
	bigIncrement?: number;

	/**
	 * Gets which axis is being used to scroll - horizontal(true) or vertical(false).
	 */
	horizontal?: boolean;

	/**
	 * Gets how much the content will be scrolled horizontally.
	 */
	stepX?: number;

	/**
	 * Gets how much the content will be scrolled vertically.
	 */
	stepY?: number;
}

interface ScrolledEvent {
	(event: Event, ui: ScrolledEventUIParam): void;
}

interface ScrolledEventUIParam {
	/**
	 * Gets a reference to the igScroll.
	 */
	owner?: any;

	/**
	 * Gets if the content is scrolled by the arrows. 0 - none used, -1 - Arrow Up/Left, 1 - Arrow Down/Right.
	 */
	smallIncrement?: number;

	/**
	 * Gets if the content is scrolled by the scrollbar track areas. 0 - none used, -1 - Scrolled Up/Left, 1 - Scrolled Down/Right.
	 */
	bigIncrement?: number;

	/**
	 * Gets which axis is being used to scroll - horizontal(true) or vertical(false).
	 */
	horizontal?: boolean;
}

interface ThumbDragStartEvent {
	(event: Event, ui: ThumbDragStartEventUIParam): void;
}

interface ThumbDragStartEventUIParam {
	/**
	 * Gets a reference to the igScroll.
	 */
	owner?: any;

	/**
	 * Gets which axis is being used to scroll - horizontal(true) or vertical(false).
	 */
	horizontal?: boolean;
}

interface ThumbDragMoveEvent {
	(event: Event, ui: ThumbDragMoveEventUIParam): void;
}

interface ThumbDragMoveEventUIParam {
	/**
	 * Gets a reference to the igScroll.
	 */
	owner?: any;

	/**
	 * Gets which scrollbar thumb is being used - horizontal(true) or vertical(false).
	 */
	horizontal?: boolean;

	/**
	 * Gets how much the content will be scrolled horizontally.
	 */
	stepX?: number;

	/**
	 * Gets how much the content will be scrolled vertically.
	 */
	stepY?: number;
}

interface ThumbDragEndEvent {
	(event: Event, ui: ThumbDragEndEventUIParam): void;
}

interface ThumbDragEndEventUIParam {
	/**
	 * Gets a reference to the igScroll.
	 */
	owner?: any;

	/**
	 * Gets which scrollbar thumb is being used - horizontal(true) or vertical(false).
	 */
	horizontal?: boolean;
}

interface ResizingEvent {
	(event: Event, ui: ResizingEventUIParam): void;
}

interface ResizingEventUIParam {
	/**
	 * Used to obtain reference to igScroll.
	 */
	owner?: any;
}

interface ResizedEvent {
	(event: Event, ui: ResizedEventUIParam): void;
}

interface ResizedEventUIParam {
	/**
	 * Used to obtain reference to igScroll.
	 */
	owner?: any;
}

interface IgScroll {
	/**
	 * Sets or gets if the scrollbars should be always visible (on all environments). Otherwise it will be the default behavior. Note: this option is only for the custom scrollbars set through the scrollbarType option.
	 *
	 */
	alwaysVisible?: boolean;

	/**
	 * Sets or gets what type of scrollbars should be using the igScroll (on all environments).
	 *
	 *
	 * Valid values:
	 * "custom" Custom scrollbars with custom ui and events.
	 * "native" Native scrollbars
	 * "none" No scrollbars should be visible
	 */
	scrollbarType?: string;

	/**
	 * Sets or gets the minimum size of the thumb drag in pixels. For the vertical thumb it means its minimum height, for the horizontal thumb it means its minimum width. This affects only the custom scrollblar when scrollbarType is set to "custom".
	 *
	 */
	minThumbSize?: number|string;

	/**
	 * Sets or gets if igScroll can modify the DOM when it is initialized on certain element so that the content can be scrollable.
	 *
	 */
	modifyDOM?: boolean;

	/**
	 * Sets custom value for how high is actually the content. Useful when wanting to scroll and update the shown content manually.
	 *
	 */
	scrollHeight?: number;

	/**
	 * Sets custom value for what width is actually the content. Useful when wanting to scroll and update the shown content manually.
	 *
	 */
	scrollWidth?: number;

	/**
	 * Sets gets current vertical position of the content.
	 *
	 */
	scrollTop?: number;

	/**
	 * Sets gets current horizontal position of the content.
	 *
	 */
	scrollLeft?: number;

	/**
	 * Sets gets the step of the default scrolling behavior when using mouse wheel
	 *
	 */
	wheelStep?: number;

	/**
	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar arrows
	 *
	 */
	smallIncrementStep?: number;

	/**
	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar track areas.
	 *
	 */
	bigIncrementStep?: number;

	/**
	 * Sets gets if smoother scrolling with small intertia should be used when using mouse wheel
	 *
	 */
	smoothing?: boolean;

	/**
	 * Sets or gets the modifier for how many pixels will be scrolled when using the mouse wheel once. This is used only for the smooth scrolling behavior.
	 *
	 */
	smoothingStep?: number;

	/**
	 * Sets or gets the modifier for how long the scroll ‘animation’ lasts when using the mouse wheel once. This is used only for the smooth scrolling behavior.
	 *
	 */
	smoothingDuration?: number;

	/**
	 * Sets gets the modifier for how much the inertia scrolls on mobile devices
	 *
	 */
	inertiaStep?: number;

	/**
	 * Sets gets the modifier for how long the inertia last on mobile devices
	 *
	 */
	inertiaDuration?: number;

	/**
	 * Sets gets how much pixels of toleration there will be when initially swiping horizontally. This is to improve swiping up/down without scrolling left/right when not intended due to small deviation left/right
	 *
	 */
	swipeToleranceX?: number;

	/**
	 * Sets gets at least how many times the horizontal speed should be bigger so the inertia proceeds only horizontally without scrolling vertically. This is to improve interactions due to not perfectly swiping left/right with some deviation down/up
	 *
	 */
	inertiaDeltaX?: number;

	/**
	 * Sets gets at least how many times the vertical speed should be bigger so the inertia proceeds only vertically without scrolling horizontally. This is to improve interactions due to not perfectly swiping down/up with some deviation left/right
	 *
	 */
	inertiaDeltaY?: number;

	/**
	 * Sets gets elements that are linked to the main content horizontally. When the content is scrolled on X axis the linked elements scroll accordingly.
	 *
	 */
	syncedElemsH?: any[];

	/**
	 * Sets gets elements that are linked to the main content vertically. When the content is scrolled on Y axis the linked elements scroll accordingly.
	 *
	 */
	syncedElemsV?: any[];

	/**
	 * Sets gets html or jQuery element which is used for horizontal scrolling.
	 *
	 */
	scrollbarH?: string;

	/**
	 * Sets gets html or jQuery element which is used for vertical scrolling.
	 *
	 */
	scrollbarV?: string;

	/**
	 * Sets gets if only the linked horizontal scrollbar should be used for horizontal scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
	 *
	 */
	scrollOnlyHBar?: boolean;

	/**
	 * Sets gets if only the linked vertical scrollbar should be used for vertical scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
	 *
	 */
	scrollOnlyVBar?: boolean;

	/**
	 * Sets gets html or jQuery element to which the horizontal scrollbar will be appended to.
	 *
	 */
	scrollbarHParent?: string;

	/**
	 * Sets gets html or jQuery element to which the vertical scrollbar will be appended to.
	 *
	 */
	scrollbarVParent?: string;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is raised after the scroller has been rendered fully
	 */
	rendered?: RenderedEvent;

	/**
	 * Event which is raised before scrolling or before each step when having inertia.
	 * Return false in order to cancel action.
	 */
	scrolling?: ScrollingEvent;

	/**
	 * Event which is raised after scrolling has stopped.
	 */
	scrolled?: ScrolledEvent;

	/**
	 * Event which is raised when there is mouse click on the scrollbar's thumb drag.
	 */
	thumbDragStart?: ThumbDragStartEvent;

	/**
	 * Event which is raised when the thumb drag is being moved.
	 */
	thumbDragMove?: ThumbDragMoveEvent;

	/**
	 * Event which is raised on mouse up from the scrollbar's thumb drag.
	 */
	thumbDragEnd?: ThumbDragEndEvent;

	/**
	 * Event which is raised when the igScroll detects that the element is reizing.
	 * Function takes arguments evt and args.
	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
	 * Use args.owner to obtain reference to igScroll.
	 */
	resizing?: ResizingEvent;

	/**
	 * Event which is raised after the igScroll has finished resizing.
	 * Function takes arguments evt and args.
	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
	 * Use args.owner to obtain reference to igScroll.
	 */
	resized?: ResizedEvent;

	/**
	 * Option for igScroll
	 */
	[optionName: string]: any;
}
interface IgScrollMethods {
	refresh(): void;

	/**
	 * This method overrides the base method and does nothing, because the scoll container shouldn't change the container locales
	 * Note that this method is for rare scenarios, use [language](ui.igupload#options:language) or [locale](ui.igupload#options:locale) option setter
	 */
	changeLocale(): void;
	option(optionName: Object, value: Object): void;
	destroy(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igScroll"): IgScrollMethods;
}

interface JQuery {
	igScroll(methodName: "refresh"): void;
	igScroll(methodName: "changeLocale"): void;
	igScroll(methodName: "option", optionName: Object, value: Object): void;
	igScroll(methodName: "destroy"): void;
	igScroll(methodName: "changeGlobalLanguage"): void;
	igScroll(methodName: "changeGlobalRegional"): void;

	/**
	 * Sets or gets if the scrollbars should be always visible (on all environments). Otherwise it will be the default behavior. Note: this option is only for the custom scrollbars set through the scrollbarType option.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "alwaysVisible"): boolean;

	/**
	 * Sets or gets if the scrollbars should be always visible (on all environments). Otherwise it will be the default behavior. Note: this option is only for the custom scrollbars set through the scrollbarType option.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "alwaysVisible", optionValue: boolean): void;

	/**
	 * Sets or gets what type of scrollbars should be using the igScroll (on all environments).
	 *
	 */

	igScroll(optionLiteral: 'option', optionName: "scrollbarType"): string;

	/**
	 * Sets or gets what type of scrollbars should be using the igScroll (on all environments).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igScroll(optionLiteral: 'option', optionName: "scrollbarType", optionValue: string): void;

	/**
	 * Sets or gets the minimum size of the thumb drag in pixels. For the vertical thumb it means its minimum height, for the horizontal thumb it means its minimum width. This affects only the custom scrollblar when scrollbarType is set to "custom".
	 *
	 */

	igScroll(optionLiteral: 'option', optionName: "minThumbSize"): number|string;

	/**
	 * Sets or gets the minimum size of the thumb drag in pixels. For the vertical thumb it means its minimum height, for the horizontal thumb it means its minimum width. This affects only the custom scrollblar when scrollbarType is set to "custom".
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igScroll(optionLiteral: 'option', optionName: "minThumbSize", optionValue: number|string): void;

	/**
	 * Sets or gets if igScroll can modify the DOM when it is initialized on certain element so that the content can be scrollable.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "modifyDOM"): boolean;

	/**
	 * Sets or gets if igScroll can modify the DOM when it is initialized on certain element so that the content can be scrollable.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "modifyDOM", optionValue: boolean): void;

	/**
	 * Sets custom value for how high is actually the content. Useful when wanting to scroll and update the shown content manually.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollHeight"): number;

	/**
	 * Sets custom value for how high is actually the content. Useful when wanting to scroll and update the shown content manually.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollHeight", optionValue: number): void;

	/**
	 * Sets custom value for what width is actually the content. Useful when wanting to scroll and update the shown content manually.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollWidth"): number;

	/**
	 * Sets custom value for what width is actually the content. Useful when wanting to scroll and update the shown content manually.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollWidth", optionValue: number): void;

	/**
	 * Sets gets current vertical position of the content.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollTop"): number;

	/**
	 * Sets gets current vertical position of the content.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollTop", optionValue: number): void;

	/**
	 * Sets gets current horizontal position of the content.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollLeft"): number;

	/**
	 * Sets gets current horizontal position of the content.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollLeft", optionValue: number): void;

	/**
	 * Sets gets the step of the default scrolling behavior when using mouse wheel
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "wheelStep"): number;

	/**
	 * Sets gets the step of the default scrolling behavior when using mouse wheel
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "wheelStep", optionValue: number): void;

	/**
	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar arrows
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "smallIncrementStep"): number;

	/**
	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar arrows
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "smallIncrementStep", optionValue: number): void;

	/**
	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar track areas.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "bigIncrementStep"): number;

	/**
	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar track areas.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "bigIncrementStep", optionValue: number): void;

	/**
	 * Sets gets if smoother scrolling with small intertia should be used when using mouse wheel
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "smoothing"): boolean;

	/**
	 * Sets gets if smoother scrolling with small intertia should be used when using mouse wheel
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "smoothing", optionValue: boolean): void;

	/**
	 * Sets or gets the modifier for how many pixels will be scrolled when using the mouse wheel once. This is used only for the smooth scrolling behavior.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "smoothingStep"): number;

	/**
	 * Sets or gets the modifier for how many pixels will be scrolled when using the mouse wheel once. This is used only for the smooth scrolling behavior.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "smoothingStep", optionValue: number): void;

	/**
	 * Sets or gets the modifier for how long the scroll ‘animation’ lasts when using the mouse wheel once. This is used only for the smooth scrolling behavior.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "smoothingDuration"): number;

	/**
	 * Sets or gets the modifier for how long the scroll ‘animation’ lasts when using the mouse wheel once. This is used only for the smooth scrolling behavior.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "smoothingDuration", optionValue: number): void;

	/**
	 * Sets gets the modifier for how much the inertia scrolls on mobile devices
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "inertiaStep"): number;

	/**
	 * Sets gets the modifier for how much the inertia scrolls on mobile devices
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "inertiaStep", optionValue: number): void;

	/**
	 * Sets gets the modifier for how long the inertia last on mobile devices
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "inertiaDuration"): number;

	/**
	 * Sets gets the modifier for how long the inertia last on mobile devices
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "inertiaDuration", optionValue: number): void;

	/**
	 * Sets gets how much pixels of toleration there will be when initially swiping horizontally. This is to improve swiping up/down without scrolling left/right when not intended due to small deviation left/right
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "swipeToleranceX"): number;

	/**
	 * Sets gets how much pixels of toleration there will be when initially swiping horizontally. This is to improve swiping up/down without scrolling left/right when not intended due to small deviation left/right
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "swipeToleranceX", optionValue: number): void;

	/**
	 * Sets gets at least how many times the horizontal speed should be bigger so the inertia proceeds only horizontally without scrolling vertically. This is to improve interactions due to not perfectly swiping left/right with some deviation down/up
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "inertiaDeltaX"): number;

	/**
	 * Sets gets at least how many times the horizontal speed should be bigger so the inertia proceeds only horizontally without scrolling vertically. This is to improve interactions due to not perfectly swiping left/right with some deviation down/up
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "inertiaDeltaX", optionValue: number): void;

	/**
	 * Sets gets at least how many times the vertical speed should be bigger so the inertia proceeds only vertically without scrolling horizontally. This is to improve interactions due to not perfectly swiping down/up with some deviation left/right
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "inertiaDeltaY"): number;

	/**
	 * Sets gets at least how many times the vertical speed should be bigger so the inertia proceeds only vertically without scrolling horizontally. This is to improve interactions due to not perfectly swiping down/up with some deviation left/right
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "inertiaDeltaY", optionValue: number): void;

	/**
	 * Sets gets elements that are linked to the main content horizontally. When the content is scrolled on X axis the linked elements scroll accordingly.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "syncedElemsH"): any[];

	/**
	 * Sets gets elements that are linked to the main content horizontally. When the content is scrolled on X axis the linked elements scroll accordingly.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "syncedElemsH", optionValue: any[]): void;

	/**
	 * Sets gets elements that are linked to the main content vertically. When the content is scrolled on Y axis the linked elements scroll accordingly.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "syncedElemsV"): any[];

	/**
	 * Sets gets elements that are linked to the main content vertically. When the content is scrolled on Y axis the linked elements scroll accordingly.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "syncedElemsV", optionValue: any[]): void;

	/**
	 * Sets gets html or jQuery element which is used for horizontal scrolling.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollbarH"): string;

	/**
	 * Sets gets html or jQuery element which is used for horizontal scrolling.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollbarH", optionValue: string): void;

	/**
	 * Sets gets html or jQuery element which is used for vertical scrolling.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollbarV"): string;

	/**
	 * Sets gets html or jQuery element which is used for vertical scrolling.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollbarV", optionValue: string): void;

	/**
	 * Sets gets if only the linked horizontal scrollbar should be used for horizontal scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollOnlyHBar"): boolean;

	/**
	 * Sets gets if only the linked horizontal scrollbar should be used for horizontal scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollOnlyHBar", optionValue: boolean): void;

	/**
	 * Sets gets if only the linked vertical scrollbar should be used for vertical scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollOnlyVBar"): boolean;

	/**
	 * Sets gets if only the linked vertical scrollbar should be used for vertical scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollOnlyVBar", optionValue: boolean): void;

	/**
	 * Sets gets html or jQuery element to which the horizontal scrollbar will be appended to.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollbarHParent"): string;

	/**
	 * Sets gets html or jQuery element to which the horizontal scrollbar will be appended to.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollbarHParent", optionValue: string): void;

	/**
	 * Sets gets html or jQuery element to which the vertical scrollbar will be appended to.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollbarVParent"): string;

	/**
	 * Sets gets html or jQuery element to which the vertical scrollbar will be appended to.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrollbarVParent", optionValue: string): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igScroll(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igScroll(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igScroll(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igScroll(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is raised after the scroller has been rendered fully
	 */
	igScroll(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Event which is raised after the scroller has been rendered fully
	 *
	 * @optionValue Define event handler function.
	 */
	igScroll(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Event which is raised before scrolling or before each step when having inertia.
	 * Return false in order to cancel action.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrolling"): ScrollingEvent;

	/**
	 * Event which is raised before scrolling or before each step when having inertia.
	 * Return false in order to cancel action.
	 *
	 * @optionValue Define event handler function.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrolling", optionValue: ScrollingEvent): void;

	/**
	 * Event which is raised after scrolling has stopped.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrolled"): ScrolledEvent;

	/**
	 * Event which is raised after scrolling has stopped.
	 *
	 * @optionValue Define event handler function.
	 */
	igScroll(optionLiteral: 'option', optionName: "scrolled", optionValue: ScrolledEvent): void;

	/**
	 * Event which is raised when there is mouse click on the scrollbar's thumb drag.
	 */
	igScroll(optionLiteral: 'option', optionName: "thumbDragStart"): ThumbDragStartEvent;

	/**
	 * Event which is raised when there is mouse click on the scrollbar's thumb drag.
	 *
	 * @optionValue Define event handler function.
	 */
	igScroll(optionLiteral: 'option', optionName: "thumbDragStart", optionValue: ThumbDragStartEvent): void;

	/**
	 * Event which is raised when the thumb drag is being moved.
	 */
	igScroll(optionLiteral: 'option', optionName: "thumbDragMove"): ThumbDragMoveEvent;

	/**
	 * Event which is raised when the thumb drag is being moved.
	 *
	 * @optionValue Define event handler function.
	 */
	igScroll(optionLiteral: 'option', optionName: "thumbDragMove", optionValue: ThumbDragMoveEvent): void;

	/**
	 * Event which is raised on mouse up from the scrollbar's thumb drag.
	 */
	igScroll(optionLiteral: 'option', optionName: "thumbDragEnd"): ThumbDragEndEvent;

	/**
	 * Event which is raised on mouse up from the scrollbar's thumb drag.
	 *
	 * @optionValue Define event handler function.
	 */
	igScroll(optionLiteral: 'option', optionName: "thumbDragEnd", optionValue: ThumbDragEndEvent): void;

	/**
	 * Event which is raised when the igScroll detects that the element is reizing.
	 * Function takes arguments evt and args.
	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
	 * Use args.owner to obtain reference to igScroll.
	 */
	igScroll(optionLiteral: 'option', optionName: "resizing"): ResizingEvent;

	/**
	 * Event which is raised when the igScroll detects that the element is reizing.
	 * Function takes arguments evt and args.
	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
	 * Use args.owner to obtain reference to igScroll.
	 *
	 * @optionValue Define event handler function.
	 */
	igScroll(optionLiteral: 'option', optionName: "resizing", optionValue: ResizingEvent): void;

	/**
	 * Event which is raised after the igScroll has finished resizing.
	 * Function takes arguments evt and args.
	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
	 * Use args.owner to obtain reference to igScroll.
	 */
	igScroll(optionLiteral: 'option', optionName: "resized"): ResizedEvent;

	/**
	 * Event which is raised after the igScroll has finished resizing.
	 * Function takes arguments evt and args.
	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
	 * Use args.owner to obtain reference to igScroll.
	 *
	 * @optionValue Define event handler function.
	 */
	igScroll(optionLiteral: 'option', optionName: "resized", optionValue: ResizedEvent): void;
	igScroll(options: IgScroll): JQuery;
	igScroll(optionLiteral: 'option', optionName: string): any;
	igScroll(optionLiteral: 'option', options: IgScroll): JQuery;
	igScroll(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igScroll(methodName: string, ...methodParams: any[]): any;
}
interface IgShapeChart {
	/**
	 * The triangulated file source URI or an instance of $.ig.ShapeDataSource.
	 */
	shapeDataSource?: string;

	/**
	 * String The database source URI.
	 */
	databaseSource?: string;

	/**
	 * The triangulated file source URI or an instance of $.ig.TriangulationDataSource.
	 */
	triangulationDataSource?: string;

	/**
	 * Gets or sets the id of a template element to use for tooltips, or markup representing the tooltip template.
	 */
	tooltipTemplate?: any;

	/**
	 * Gets or sets the names of tooltip templates
	 */
	tooltipTemplates?: any;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Gets or sets the left margin of chart title
	 */
	titleLeftMargin?: number;

	/**
	 * Gets or sets the right margin of chart title
	 */
	titleRightMargin?: number;

	/**
	 * Gets or sets the top margin of chart title
	 */
	titleTopMargin?: number;

	/**
	 * Gets or sets the bottom margin of chart title
	 */
	titleBottomMargin?: number;

	/**
	 * Gets or sets the left margin of chart subtitle
	 */
	subtitleLeftMargin?: number;

	/**
	 * Gets or sets the top margin of chart subtitle
	 */
	subtitleTopMargin?: number;

	/**
	 * Gets or sets the right margin of chart subtitle
	 */
	subtitleRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of chart subtitle
	 */
	subtitleBottomMargin?: number;

	/**
	 * Gets or sets color of chart subtitle
	 */
	subtitleTextColor?: string;

	/**
	 * Gets or sets color of chart title
	 */
	titleTextColor?: string;

	/**
	 * Gets or sets the left margin of the chart content.
	 */
	leftMargin?: number;

	/**
	 * Gets or sets the top margin of the chart content.
	 */
	topMargin?: number;

	/**
	 * Gets or sets the right margin of the chart content.
	 */
	rightMargin?: number;

	/**
	 * Gets or sets the bottom margin around the chart content.
	 */
	bottomMargin?: number;

	/**
	 * Gets or sets the duration used for animating series plots when the data is changing
	 */
	transitionDuration?: number;

	/**
	 * Gets or sets the easing function used for animating series plots when the data is changing.
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 */
	transitionEasingFunction?: any;

	/**
	 * Gets or sets a function for creating wrapped tooltip
	 */
	createWrappedTooltip?: any;

	/**
	 * Gets or sets the widget of this control
	 */
	widget?: any;

	/**
	 * Gets or sets CSS font property for the chart subtitle
	 */
	subtitleTextStyle?: string;

	/**
	 * Gets or sets CSS font property for the chart title
	 */
	titleTextStyle?: string;

	/**
	 * Gets or sets a collection of data items used to generate the chart.
	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
	 * Additionally, if the objects in the list implement the IEnumerable interface,
	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
	 * Databinding can be further configured by attributing the data item classes
	 * with the DataSeriesMemberIntentAttribute.
	 */
	itemsSource?: any;

	/**
	 * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
	 */
	includedProperties?: any;

	/**
	 * Gets or sets a set of property paths that should be excluded from consideration by the category chart.
	 */
	excludedProperties?: any;

	/**
	 * Gets or sets the palette of brushes to use for coloring the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	brushes?: any;

	/**
	 * Gets or sets the palette of brushes to use for outlines on the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	outlines?: any;

	/**
	 * Gets or sets the legend to connect this chart to.
	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
	 */
	legend?: any;

	/**
	 * Gets or sets whether the chart can be horizontally zoomed through user interactions.
	 */
	isHorizontalZoomEnabled?: boolean;

	/**
	 * Gets or sets whether the chart can be vertically zoomed through user interactions.
	 */
	isVerticalZoomEnabled?: boolean;

	/**
	 * Gets or sets whether the chart can highlight series through user interactions.
	 * This property applies to Category Chart and Financial Chart controls.
	 */
	isSeriesHighlightingEnabled?: boolean;

	/**
	 * Gets or sets the rectangle representing the current scroll and zoom state of the chart.
	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	windowRect?: any;

	/**
	 * Gets or sets text to display above the plot area.
	 */
	title?: string;

	/**
	 * Gets or sets text to display below the Title, above the plot area.
	 */
	subtitle?: string;

	/**
	 * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	titleAlignment?: string;

	/**
	 * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	subtitleAlignment?: string;

	/**
	 * Gets or sets the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
	 *
	 *
	 * Valid values:
	 * "linearInterpolate" Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
	 * "dontPlot" Do not plot the unknown value on the chart.
	 */
	unknownValuePlotting?: string;

	/**
	 * Gets or sets the rendering resolution for all series in this chart.
	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
	 */
	resolution?: number;

	/**
	 * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
	 */
	thickness?: number;

	/**
	 * Gets or sets the marker shapes used for indicating location of data points in this chart.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 */
	markerTypes?: any;

	/**
	 * Gets or sets the palette of brushes used for rendering fill area of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	markerBrushes?: any;

	/**
	 * Gets or sets the palette of brushes used for rendering outlines of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	markerOutlines?: any;

	/**
	 * Gets or sets the maximum number of markers displyed in the plot area of the chart.
	 */
	markerMaxCount?: number;

	/**
	 * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
	 */
	animateSeriesWhenAxisRangeChanges?: boolean;

	/**
	 * Gets or sets the palette of brushes to used for coloring trend lines in this chart.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	trendLineBrushes?: any;

	/**
	 * Gets or sets the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
	 *
	 *
	 * Valid values:
	 * "none" No trend line will be displayed.
	 * "linearFit" Linear fit.
	 * "quadraticFit" Quadratic polynomial fit.
	 * "cubicFit" Cubic polynomial fit.
	 * "quarticFit" Quartic polynomial fit.
	 * "quinticFit" Quintic polynomial fit.
	 * "logarithmicFit" Logarithmic fit.
	 * "exponentialFit" Exponential fit.
	 * "powerLawFit" Powerlaw fit.
	 * "simpleAverage" Simple moving average.
	 * "exponentialAverage" Exponential moving average.
	 * "modifiedAverage" Modified moving average.
	 * "cumulativeAverage" Cumulative moving average.
	 * "weightedAverage" Weighted moving average.
	 */
	trendLineType?: string;

	/**
	 * Gets or sets the thickness of the trend lines in this chart.
	 * This property applies only to these chart types: point, line, spline, and bubble
	 */
	trendLineThickness?: number;

	/**
	 * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
	 */
	alignsGridLinesToPixels?: boolean;
	trendLinePeriod?: number;

	/**
	 * Gets or sets the style of tooltip to be displayed.
	 *
	 * Valid values:
	 * "default" Display default tooltip for each series in the chart.
	 * "item" Display individual tooltips for all series in the chart.
	 * "category" Display combined tooltip for all series in the chart.
	 * "none" Display no tooltips in the chart.
	 */
	toolTipType?: string;

	/**
	 * Gets or sets the crosshairs to be displayed.
	 *
	 * Valid values:
	 * "default" Display default number of crosshair lines in the chart.
	 * "none" Display no crosshair lines in the chart.
	 * "horizontal" Display horizontal line of crosshairs in the chart.
	 * "vertical" Display vertical line of crosshairs in the chart.
	 * "both" Display both horizontal and vertical lines of crosshairs in the chart.
	 */
	crosshairsDisplayMode?: string;

	/**
	 * Gets or sets whether crosshairs will snap to the nearest data point.
	 */
	crosshairsSnapToData?: boolean;

	/**
	 * Gets or sets whether annotations are shown along the axis for crosshair values
	 */
	crosshairsAnnotationEnabled?: boolean;

	/**
	 * Gets or sets whether annotations for the final value of each series is displayed on the axis.
	 */
	finalValueAnnotationsVisible?: boolean;

	/**
	 * Gets or sets if callouts should be displayed.
	 */
	calloutsVisible?: boolean;

	/**
	 * Gets or sets if event annotations should be displayed.
	 */
	calloutStyleUpdatingEventEnabled?: boolean;

	/**
	 * Gets or sets the collection of callout data to be annotated.
	 */
	calloutsItemsSource?: any;

	/**
	 * Gets or sets the member path of the X data for the callouts.
	 */
	calloutsXMemberPath?: string;

	/**
	 * Gets or sets the member path of the Y data for the callouts.
	 */
	calloutsYMemberPath?: string;

	/**
	 * Gets or sets the member path of the label data for the callouts.
	 */
	calloutsLabelMemberPath?: string;

	/**
	 * Gets or sets the member path of the content data for the callouts.
	 */
	calloutsContentMemberPath?: string;

	/**
	 * Gets or sets function which takes an context object and returns a formatted label for the X-axis.
	 */
	xAxisFormatLabel?: any;

	/**
	 * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.
	 */
	yAxisFormatLabel?: any;

	/**
	 * Gets or sets the left margin of labels on the X-axis
	 */
	xAxisLabelLeftMargin?: number;

	/**
	 * Gets or sets the top margin of labels on the X-axis
	 */
	xAxisLabelTopMargin?: number;

	/**
	 * Gets or sets the right margin of labels on the X-axis
	 */
	xAxisLabelRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of labels on the X-axis
	 */
	xAxisLabelBottomMargin?: number;

	/**
	 * Gets or sets the left margin of labels on the Y-axis
	 */
	yAxisLabelLeftMargin?: number;

	/**
	 * Gets or sets the top margin of labels on the Y-axis
	 */
	yAxisLabelTopMargin?: number;

	/**
	 * Gets or sets the right margin of labels on the Y-axis
	 */
	yAxisLabelRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of labels on the Y-axis
	 */
	yAxisLabelBottomMargin?: number;

	/**
	 * Gets or sets color of labels on the X-axis
	 */
	xAxisLabelTextColor?: string;

	/**
	 * Gets or sets color of labels on the Y-axis
	 */
	yAxisLabelTextColor?: string;

	/**
	 * Gets or sets the margin around a title on the X-axis
	 */
	xAxisTitleMargin?: number;

	/**
	 * Gets or sets the margin around a title on the Y-axis
	 */
	yAxisTitleMargin?: number;

	/**
	 * Gets or sets the left margin of a title on the X-axis
	 */
	xAxisTitleLeftMargin?: number;

	/**
	 * Gets or sets the left margin of a title on the Y-axis
	 */
	yAxisTitleLeftMargin?: number;

	/**
	 * Gets or sets the top margin of a title on the X-axis
	 */
	xAxisTitleTopMargin?: number;

	/**
	 * Gets or sets the top margin of a title on the Y-axis
	 */
	yAxisTitleTopMargin?: number;

	/**
	 * Gets or sets the right margin of a title on the X-axis
	 */
	xAxisTitleRightMargin?: number;

	/**
	 * Gets or sets the right margin of a title on the Y-axis
	 */
	yAxisTitleRightMargin?: number;

	/**
	 * Gets or sets the bottom margin of a title on the X-axis
	 */
	xAxisTitleBottomMargin?: number;

	/**
	 * Gets or sets the bottom margin of a title on the Y-axis
	 */
	yAxisTitleBottomMargin?: number;

	/**
	 * Gets or sets color of title on the X-axis
	 */
	xAxisTitleTextColor?: string;

	/**
	 * Gets or sets color of title on the Y-axis
	 */
	yAxisTitleTextColor?: string;

	/**
	 * Gets or sets CSS font property for labels on X-axis
	 */
	xAxisLabelTextStyle?: string;

	/**
	 * Gets or sets CSS font property for labels on Y-axis
	 */
	yAxisLabelTextStyle?: string;

	/**
	 * Gets or sets CSS font property for title on X-axis
	 */
	xAxisTitleTextStyle?: string;

	/**
	 * Gets or sets CSS font property for title on Y-axis
	 */
	yAxisTitleTextStyle?: string;

	/**
	 * Gets or sets the format for labels along the X-axis.
	 */
	xAxisLabel?: any;

	/**
	 * Gets or sets the property or string from which the labels are derived.
	 */
	yAxisLabel?: any;

	/**
	 * Gets or sets the color to apply to major gridlines along the X-axis.
	 */
	xAxisMajorStroke?: string;

	/**
	 * Gets or sets the color to apply to major gridlines along the Y-axis.
	 */
	yAxisMajorStroke?: string;

	/**
	 * Gets or sets the thickness to apply to major gridlines along the X-axis.
	 */
	xAxisMajorStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to major gridlines along the Y-axis.
	 */
	yAxisMajorStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to minor gridlines along the X-axis.
	 */
	xAxisMinorStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to minor gridlines along the Y-axis.
	 */
	yAxisMinorStrokeThickness?: number;

	/**
	 * Gets or sets the color to apply to stripes along the X-axis.
	 */
	xAxisStrip?: string;

	/**
	 * Gets or sets the color to apply to stripes along the Y-axis.
	 */
	yAxisStrip?: string;

	/**
	 * Gets or sets the color to apply to the X-axis line.
	 */
	xAxisStroke?: string;

	/**
	 * Gets or sets the color to apply to the Y-axis line.
	 */
	yAxisStroke?: string;

	/**
	 * Gets or sets the thickness to apply to the X-axis line.
	 */
	xAxisStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to the Y-axis line.
	 */
	yAxisStrokeThickness?: number;

	/**
	 * Gets or sets the length of tickmarks along the X-axis.
	 */
	xAxisTickLength?: number;

	/**
	 * Gets or sets the length of tickmarks along the Y-axis.
	 */
	yAxisTickLength?: number;

	/**
	 * Gets or sets the color to apply to tickmarks along the X-axis.
	 */
	xAxisTickStroke?: string;

	/**
	 * Gets or sets the color to apply to tickmarks along the Y-axis.
	 */
	yAxisTickStroke?: string;

	/**
	 * Gets or sets the thickness to apply to tickmarks along the X-axis.
	 */
	xAxisTickStrokeThickness?: number;

	/**
	 * Gets or sets the thickness to apply to tickmarks along the Y-axis.
	 */
	yAxisTickStrokeThickness?: number;

	/**
	 * Gets or sets the Text to display below the X-axis.
	 */
	xAxisTitle?: string;

	/**
	 * Gets or sets the Text to display to the left of the Y-axis.
	 */
	yAxisTitle?: string;

	/**
	 * Gets or sets the color to apply to minor gridlines along the X-axis.
	 */
	xAxisMinorStroke?: string;

	/**
	 * Gets or sets the color to apply to minor gridlines along the Y-axis.
	 */
	yAxisMinorStroke?: string;

	/**
	 * Gets or sets the angle of rotation for labels along the X-axis.
	 */
	xAxisLabelAngle?: number;

	/**
	 * Gets or sets the angle of rotation for labels along the Y-axis.
	 */
	yAxisLabelAngle?: number;

	/**
	 * Gets or sets the distance between the X-axis and the bottom of the chart.
	 */
	xAxisExtent?: number;

	/**
	 * Gets or sets the distance between the Y-axis and the left edge of the chart.
	 */
	yAxisExtent?: number;

	/**
	 * Gets or sets the angle of rotation for the X-axis title.
	 */
	xAxisTitleAngle?: number;

	/**
	 * Gets or sets the angle of rotation for the Y-axis title.
	 */
	yAxisTitleAngle?: number;

	/**
	 * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
	 */
	xAxisInverted?: boolean;

	/**
	 * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
	 */
	yAxisInverted?: boolean;

	/**
	 * Gets or sets Horizontal alignment of the X-axis title.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	xAxisTitleAlignment?: string;

	/**
	 * Gets or sets Vertical alignment of the Y-axis title.
	 *
	 * Valid values:
	 * "top" Align the item to the top
	 * "center" Center the item
	 * "bottom" Align the item to the bottom
	 * "stretch" Stretch the item to the full height
	 */
	yAxisTitleAlignment?: string;

	/**
	 * Gets or sets Horizontal alignment of X-axis labels.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	xAxisLabelHorizontalAlignment?: string;

	/**
	 * Gets or sets Horizontal alignment of Y-axis labels.
	 *
	 * Valid values:
	 * "left" Align the item to the left
	 * "center" Center the item
	 * "right" Align the item to the right
	 * "stretch" Stretch the item to the full width
	 */
	yAxisLabelHorizontalAlignment?: string;

	/**
	 * Gets or sets Vertical alignment of X-axis labels.
	 *
	 * Valid values:
	 * "top" Align the item to the top
	 * "center" Center the item
	 * "bottom" Align the item to the bottom
	 * "stretch" Stretch the item to the full height
	 */
	xAxisLabelVerticalAlignment?: string;

	/**
	 * Gets or sets Vertical alignment of Y-axis labels.
	 *
	 * Valid values:
	 * "top" Align the item to the top
	 * "center" Center the item
	 * "bottom" Align the item to the bottom
	 * "stretch" Stretch the item to the full height
	 */
	yAxisLabelVerticalAlignment?: string;

	/**
	 * Gets or sets Visibility of X-axis labels.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	xAxisLabelVisibility?: string;

	/**
	 * Gets or sets Visibility of Y-axis labels.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	yAxisLabelVisibility?: string;

	/**
	 * The location of Y-axis labels, relative to the plot area.
	 *
	 * Valid values:
	 * "outsideTop" Places the axis labels at the top, outside of the plotting area.
	 * "outsideBottom" Places the axis labels at the bottom, outside of the plotting area
	 * "outsideLeft" Places the axis labels to the left, outside of the plotting area.
	 * "outsideRight" Places the axis labels to the right, outside of the plotting area.
	 * "insideTop" Places the axis labels inside the plotting area above the axis line.
	 * "insideBottom" Places the axis labels inside the plotting area below the axis line.
	 * "insideLeft" Places the axis labels inside the plotting area and to the left of the axis line.
	 * "insideRight" Places the axis labels inside the plotting area and to the right of the axis line.
	 */
	yAxisLabelLocation?: string;

	/**
	 * Gets or sets the frequency of displayed labels along the X-axis.
	 * Gets or sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
	 */
	xAxisInterval?: number;

	/**
	 * Gets or sets the frequency of displayed minor lines along the X-axis.
	 * Gets or sets the set value is a factor that determines how the minor lines will be displayed.
	 */
	xAxisMinorInterval?: number;

	/**
	 * Gets or sets the distance between each label and grid line along the Y-axis.
	 */
	yAxisInterval?: number;

	/**
	 * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
	 */
	yAxisIsLogarithmic?: boolean;

	/**
	 * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.
	 * This property is effective only when YAxisIsLogarithmic is true.
	 */
	yAxisLogarithmBase?: number;

	/**
	 * Gets or sets the data value corresponding to the minimum value of the Y-axis.
	 */
	yAxisMinimumValue?: number;

	/**
	 * Gets or sets the data value corresponding to the maximum value of the Y-axis.
	 */
	yAxisMaximumValue?: number;

	/**
	 * Gets or sets the frequency of displayed minor lines along the Y-axis.
	 */
	yAxisMinorInterval?: number;

	/**
	 * Gets or sets whether the X-axis will use a logarithmic scale, instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the X-axis minimum is greater than zero.
	 */
	xAxisIsLogarithmic?: boolean;

	/**
	 * Gets or sets the base value to use in the log function when mapping the position of data items along the X-axis.
	 * This property is effective only when y-axis is logarithmic
	 */
	xAxisLogarithmBase?: number;

	/**
	 * Gets or sets the data value corresponding to the minimum value on the X-axis.
	 */
	xAxisMinimumValue?: number;

	/**
	 * Gets or sets the data value corresponding to the maximum value on the X-axis.
	 */
	xAxisMaximumValue?: number;

	/**
	 * Gets or sets whether the large numbers on the X-axis labels are abbreviated.
	 */
	xAxisAbbreviateLargeNumbers?: boolean;

	/**
	 * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.
	 */
	yAxisAbbreviateLargeNumbers?: boolean;

	/**
	 * Gets or sets collision avoidance between markers on series that support this behaviour.
	 *
	 * Valid values:
	 * "none" Collision avoidance is disabled.
	 * "omit" Items colliding with other items will be hidden from view.
	 * "fade" Items colliding with other items will be partially hidden from view by reducing their opacity.
	 * "omitAndShift" Items colliding with other items will be either hidden from view or moved to new positions.
	 * "fadeAndShift" Items colliding with other items will be either partially hidden from view by reducing their opacity, or moved to new positions, or a combination of both.
	 */
	markerCollision?: string;

	/**
	 * Gets or sets the type of chart series to generate from the data.
	 *
	 * Valid values:
	 * "auto" Specifies automatic selection of chart type based on suggestion from internal Data Adapter
	 * "point" Specifies point chart with small markers at X/Y data
	 * "line" Specifies line chart with small markers at X/Y data and connected with lines
	 * "spline" Specifies spline chart with small markers at X/Y data and connected with splines
	 * "bubble" Specifies bubble chart with proportional markers at X/Y data
	 * "highDensity" Specifies high density chart with colored bitmap pixels at X/Y data based on density of nearby points
	 * "area" Specifies area chart with colored surface based on a triangulation of X/Y data with numeric values assigned to each point.
	 * "contour" Specifies area chart with colored lines based on a triangulation of X/Y data with numeric values assigned to each point.
	 * "polygon" Specifies polygon chart with polygons defined by X/Y data
	 * "polyline" Specifies polyline chart with polylines defined by X/Y data
	 */
	chartType?: string;

	/**
	 * The width of the chart.
	 */
	width?: number;

	/**
	 * The height of the chart.
	 */
	height?: number;

	/**
	 * Gets sets maximum number of displayed records in chart.
	 */
	maxRecCount?: number;

	/**
	 * Gets sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	dataSource?: any;

	/**
	 * Gets sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	dataSourceType?: string;

	/**
	 * Gets sets url which is used for sending JSON on request for remote data.
	 */
	dataSourceUrl?: string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	responseTotalRecCountKey?: string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Event raised when a property value is changed on this chart
	 */
	propertyChanged?: PropertyChangedEvent;

	/**
	 * Event raised when a series is initialized and added to this chart.
	 */
	seriesAdded?: SeriesAddedEvent;

	/**
	 * Event raised when a series is removed from this chart.
	 */
	seriesRemoved?: SeriesRemovedEvent;

	/**
	 * Occurs when the pointer enters a Series.
	 */
	seriesPointerEnter?: SeriesPointerEnterEvent;

	/**
	 * Occurs when the pointer leaves a Series.
	 */
	seriesPointerLeave?: SeriesPointerLeaveEvent;

	/**
	 * Occurs when the pointer moves over a Series.
	 */
	seriesPointerMove?: SeriesPointerMoveEvent;

	/**
	 * Occurs when the pointer is pressed down over a Series.
	 */
	seriesPointerDown?: SeriesPointerDownEvent;

	/**
	 * Occurs when the pointer is released over a Series.
	 */
	seriesPointerUp?: SeriesPointerUpEvent;

	/**
	 * Occurs when the style of a callout is updated.
	 */
	calloutStyleUpdating?: CalloutStyleUpdatingEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	updateTooltip?: UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	hideTooltip?: HideTooltipEvent;

	/**
	 * Option for igShapeChart
	 */
	[optionName: string]: any;
}
interface IgShapeChartMethods {
	destroy(): void;
	id(): void;
	exportVisualData(): void;

	/**
	 * Find index of item within actual data used by chart.
	 *
	 * @param item The reference to item.
	 */
	findIndexOfItem(item: Object): number;

	/**
	 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
	 *
	 * @param index Index of data item.
	 */
	getDataItem(index: Object): Object;

	/**
	 * Get reference of actual data used by chart.
	 */
	getData(): any[];

	/**
	 * Adds a new item to the data source and notifies the chart.
	 *
	 * @param item The item that we want to add to the data source.
	 */
	addItem(item: Object): Object;

	/**
	 * Inserts a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that we want to insert in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 */
	insertItem(item: Object, index: number): Object;

	/**
	 * Deletes an item from the data source and notifies the chart.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 */
	removeItem(index: number): Object;

	/**
	 * Updates an item in the data source and notifies the chart.
	 *
	 * @param index The index of the item in the data source that we want to change.
	 * @param item The new item object that will be set in the data source.
	 */
	setItem(index: number, item: Object): Object;

	/**
	 * Notifies the chart that an item has been set in an associated data source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source that has been changed.
	 * @param newItem the new item that has been set in the collection.
	 * @param oldItem the old item that has been overwritten in the collection.
	 */
	notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;

	/**
	 * Notifies the chart that the items have been cleared from an associated data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 */
	notifyClearItems(dataSource: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source where the new item has been inserted.
	 * @param newItem the new item that has been set in the collection.
	 */
	notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source from where the old item has been removed.
	 * @param oldItem the old item that has been removed from the collection.
	 */
	notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;

	/**
	 * Get reference to chart object.
	 */
	chart(): Object;

	/**
	 * Binds data to the chart
	 */
	dataBind(): void;

	/**
	 * Forces any pending deferred work to render on the chart before continuing
	 */
	flush(): void;
}
interface JQuery {
	data(propertyName: "igShapeChart"): IgShapeChartMethods;
}

interface JQuery {
	igShapeChart(methodName: "destroy"): void;
	igShapeChart(methodName: "id"): void;
	igShapeChart(methodName: "exportVisualData"): void;
	igShapeChart(methodName: "findIndexOfItem", item: Object): number;
	igShapeChart(methodName: "getDataItem", index: Object): Object;
	igShapeChart(methodName: "getData"): any[];
	igShapeChart(methodName: "addItem", item: Object): Object;
	igShapeChart(methodName: "insertItem", item: Object, index: number): Object;
	igShapeChart(methodName: "removeItem", index: number): Object;
	igShapeChart(methodName: "setItem", index: number, item: Object): Object;
	igShapeChart(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
	igShapeChart(methodName: "notifyClearItems", dataSource: Object): Object;
	igShapeChart(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
	igShapeChart(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
	igShapeChart(methodName: "chart"): Object;
	igShapeChart(methodName: "dataBind"): void;
	igShapeChart(methodName: "flush"): void;

	/**
	 * The triangulated file source URI or an instance of $.ig.ShapeDataSource.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "shapeDataSource"): string;

	/**
	 * The triangulated file source URI or an instance of $.ig.ShapeDataSource.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "shapeDataSource", optionValue: string): void;

	/**
	 * String The database source URI.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "databaseSource"): string;

	/**
	 * String The database source URI.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "databaseSource", optionValue: string): void;

	/**
	 * The triangulated file source URI or an instance of $.ig.TriangulationDataSource.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "triangulationDataSource"): string;

	/**
	 * The triangulated file source URI or an instance of $.ig.TriangulationDataSource.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "triangulationDataSource", optionValue: string): void;

	/**
	 * Gets  the id of a template element to use for tooltips, or markup representing the tooltip template.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "tooltipTemplate"): any;

	/**
	 * Sets the id of a template element to use for tooltips, or markup representing the tooltip template.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: any): void;

	/**
	 * Gets  the names of tooltip templates
	 */
	igShapeChart(optionLiteral: 'option', optionName: "tooltipTemplates"): any;

	/**
	 * Sets the names of tooltip templates
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "tooltipTemplates", optionValue: any): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Gets  the left margin of chart title
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleLeftMargin"): number;

	/**
	 * Sets the left margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of chart title
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleRightMargin"): number;

	/**
	 * Sets the right margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleRightMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of chart title
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleTopMargin"): number;

	/**
	 * Sets the top margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleTopMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of chart title
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleBottomMargin"): number;

	/**
	 * Sets the bottom margin of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleBottomMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of chart subtitle
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleLeftMargin"): number;

	/**
	 * Sets the left margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of chart subtitle
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleTopMargin"): number;

	/**
	 * Sets the top margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of chart subtitle
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleRightMargin"): number;

	/**
	 * Sets the right margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of chart subtitle
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleBottomMargin"): number;

	/**
	 * Sets the bottom margin of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleBottomMargin", optionValue: number): void;

	/**
	 * Gets  color of chart subtitle
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleTextColor"): string;

	/**
	 * Sets color of chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleTextColor", optionValue: string): void;

	/**
	 * Gets  color of chart title
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleTextColor"): string;

	/**
	 * Sets color of chart title
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleTextColor", optionValue: string): void;

	/**
	 * Gets  the left margin of the chart content.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "leftMargin"): number;

	/**
	 * Sets the left margin of the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "leftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of the chart content.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "topMargin"): number;

	/**
	 * Sets the top margin of the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "topMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of the chart content.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "rightMargin"): number;

	/**
	 * Sets the right margin of the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "rightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin around the chart content.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "bottomMargin"): number;

	/**
	 * Sets the bottom margin around the chart content.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "bottomMargin", optionValue: number): void;

	/**
	 * Gets  the duration used for animating series plots when the data is changing
	 */
	igShapeChart(optionLiteral: 'option', optionName: "transitionDuration"): number;

	/**
	 * Sets the duration used for animating series plots when the data is changing
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;

	/**
	 * Gets  the easing function used for animating series plots when the data is changing.
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "transitionEasingFunction"): any;

	/**
	 * Sets the easing function used for animating series plots when the data is changing.
	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "transitionEasingFunction", optionValue: any): void;

	/**
	 * Gets  a function for creating wrapped tooltip
	 */
	igShapeChart(optionLiteral: 'option', optionName: "createWrappedTooltip"): any;

	/**
	 * Sets a function for creating wrapped tooltip
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "createWrappedTooltip", optionValue: any): void;

	/**
	 * Gets  the widget of this control
	 */
	igShapeChart(optionLiteral: 'option', optionName: "widget"): any;

	/**
	 * Sets the widget of this control
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "widget", optionValue: any): void;

	/**
	 * Gets  CSS font property for the chart subtitle
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleTextStyle"): string;

	/**
	 * Sets CSS font property for the chart subtitle
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitleTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for the chart title
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleTextStyle"): string;

	/**
	 * Sets CSS font property for the chart title
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "titleTextStyle", optionValue: string): void;

	/**
	 * Gets  a collection of data items used to generate the chart.
	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
	 * Additionally, if the objects in the list implement the IEnumerable interface,
	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
	 * Databinding can be further configured by attributing the data item classes
	 * with the DataSeriesMemberIntentAttribute.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "itemsSource"): any;

	/**
	 * Sets a collection of data items used to generate the chart.
	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
	 * Additionally, if the objects in the list implement the IEnumerable interface,
	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
	 * Databinding can be further configured by attributing the data item classes
	 * with the DataSeriesMemberIntentAttribute.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "itemsSource", optionValue: any): void;

	/**
	 * Gets  a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "includedProperties"): any;

	/**
	 * Sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "includedProperties", optionValue: any): void;

	/**
	 * Gets  a set of property paths that should be excluded from consideration by the category chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "excludedProperties"): any;

	/**
	 * Sets a set of property paths that should be excluded from consideration by the category chart.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "excludedProperties", optionValue: any): void;

	/**
	 * Gets  the palette of brushes to use for coloring the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "brushes"): any;

	/**
	 * Sets the palette of brushes to use for coloring the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "brushes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes to use for outlines on the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "outlines"): any;

	/**
	 * Sets the palette of brushes to use for outlines on the chart series.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "outlines", optionValue: any): void;

	/**
	 * Gets  the legend to connect this chart to.
	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "legend"): any;

	/**
	 * Sets the legend to connect this chart to.
	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "legend", optionValue: any): void;

	/**
	 * Gets  whether the chart can be horizontally zoomed through user interactions.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "isHorizontalZoomEnabled"): boolean;

	/**
	 * Sets whether the chart can be horizontally zoomed through user interactions.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "isHorizontalZoomEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether the chart can be vertically zoomed through user interactions.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "isVerticalZoomEnabled"): boolean;

	/**
	 * Sets whether the chart can be vertically zoomed through user interactions.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "isVerticalZoomEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether the chart can highlight series through user interactions.
	 * This property applies to Category Chart and Financial Chart controls.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "isSeriesHighlightingEnabled"): boolean;

	/**
	 * Sets whether the chart can highlight series through user interactions.
	 * This property applies to Category Chart and Financial Chart controls.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "isSeriesHighlightingEnabled", optionValue: boolean): void;

	/**
	 * Gets  the rectangle representing the current scroll and zoom state of the chart.
	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
	 * The provided object should have numeric properties called left, top, width and height.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "windowRect"): any;

	/**
	 * Sets the rectangle representing the current scroll and zoom state of the chart.
	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
	 * The provided object should have numeric properties called left, top, width and height.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "windowRect", optionValue: any): void;

	/**
	 * Gets  text to display above the plot area.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "title"): string;

	/**
	 * Sets text to display above the plot area.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "title", optionValue: string): void;

	/**
	 * Gets  text to display below the Title, above the plot area.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitle"): string;

	/**
	 * Sets text to display below the Title, above the plot area.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "subtitle", optionValue: string): void;

	/**
	 * Gets  horizontal alignment which determines the title position, relative to the left and right edges of the control.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "titleAlignment"): string;

	/**
	 * Sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "titleAlignment", optionValue: string): void;

	/**
	 * Gets  horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "subtitleAlignment"): string;

	/**
	 * Sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "subtitleAlignment", optionValue: string): void;

	/**
	 * Gets  the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
	 *
	 */

	igShapeChart(optionLiteral: 'option', optionName: "unknownValuePlotting"): string;

	/**
	 * Sets the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "unknownValuePlotting", optionValue: string): void;

	/**
	 * Gets  the rendering resolution for all series in this chart.
	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "resolution"): number;

	/**
	 * Sets the rendering resolution for all series in this chart.
	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "resolution", optionValue: number): void;

	/**
	 * Gets  the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "thickness"): number;

	/**
	 * Sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "thickness", optionValue: number): void;

	/**
	 * Gets  the marker shapes used for indicating location of data points in this chart.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 */
	igShapeChart(optionLiteral: 'option', optionName: "markerTypes"): any;

	/**
	 * Sets the marker shapes used for indicating location of data points in this chart.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "markerTypes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes used for rendering fill area of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "markerBrushes"): any;

	/**
	 * Sets the palette of brushes used for rendering fill area of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "markerBrushes", optionValue: any): void;

	/**
	 * Gets  the palette of brushes used for rendering outlines of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "markerOutlines"): any;

	/**
	 * Sets the palette of brushes used for rendering outlines of data point markers.
	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "markerOutlines", optionValue: any): void;

	/**
	 * Gets  the maximum number of markers displyed in the plot area of the chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "markerMaxCount"): number;

	/**
	 * Sets the maximum number of markers displyed in the plot area of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "markerMaxCount", optionValue: number): void;

	/**
	 * Gets  whether the series animations should be allowed when a range change has been detected on an axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges"): boolean;

	/**
	 * Sets whether the series animations should be allowed when a range change has been detected on an axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges", optionValue: boolean): void;

	/**
	 * Gets  the palette of brushes to used for coloring trend lines in this chart.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "trendLineBrushes"): any;

	/**
	 * Sets the palette of brushes to used for coloring trend lines in this chart.
	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "trendLineBrushes", optionValue: any): void;

	/**
	 * Gets  the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
	 *
	 */

	igShapeChart(optionLiteral: 'option', optionName: "trendLineType"): string;

	/**
	 * Sets the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "trendLineType", optionValue: string): void;

	/**
	 * Gets  the thickness of the trend lines in this chart.
	 * This property applies only to these chart types: point, line, spline, and bubble
	 */
	igShapeChart(optionLiteral: 'option', optionName: "trendLineThickness"): number;

	/**
	 * Sets the thickness of the trend lines in this chart.
	 * This property applies only to these chart types: point, line, spline, and bubble
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "trendLineThickness", optionValue: number): void;

	/**
	 * Gets  a value indicating whether grid and tick lines are aligned to device pixels.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "alignsGridLinesToPixels"): boolean;

	/**
	 * Sets a value indicating whether grid and tick lines are aligned to device pixels.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "alignsGridLinesToPixels", optionValue: boolean): void;
	igShapeChart(optionLiteral: 'option', optionName: "trendLinePeriod"): number;
	igShapeChart(optionLiteral: 'option', optionName: "trendLinePeriod", optionValue: number): void;

	/**
	 * Gets  the style of tooltip to be displayed.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "toolTipType"): string;

	/**
	 * Sets the style of tooltip to be displayed.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "toolTipType", optionValue: string): void;

	/**
	 * Gets  the crosshairs to be displayed.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "crosshairsDisplayMode"): string;

	/**
	 * Sets the crosshairs to be displayed.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "crosshairsDisplayMode", optionValue: string): void;

	/**
	 * Gets  whether crosshairs will snap to the nearest data point.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "crosshairsSnapToData"): boolean;

	/**
	 * Sets whether crosshairs will snap to the nearest data point.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "crosshairsSnapToData", optionValue: boolean): void;

	/**
	 * Gets  whether annotations are shown along the axis for crosshair values
	 */
	igShapeChart(optionLiteral: 'option', optionName: "crosshairsAnnotationEnabled"): boolean;

	/**
	 * Sets whether annotations are shown along the axis for crosshair values
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "crosshairsAnnotationEnabled", optionValue: boolean): void;

	/**
	 * Gets  whether annotations for the final value of each series is displayed on the axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "finalValueAnnotationsVisible"): boolean;

	/**
	 * Sets whether annotations for the final value of each series is displayed on the axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "finalValueAnnotationsVisible", optionValue: boolean): void;

	/**
	 * Gets  if callouts should be displayed.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsVisible"): boolean;

	/**
	 * Sets if callouts should be displayed.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsVisible", optionValue: boolean): void;

	/**
	 * Gets  if event annotations should be displayed.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutStyleUpdatingEventEnabled"): boolean;

	/**
	 * Sets if event annotations should be displayed.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutStyleUpdatingEventEnabled", optionValue: boolean): void;

	/**
	 * Gets  the collection of callout data to be annotated.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsItemsSource"): any;

	/**
	 * Sets the collection of callout data to be annotated.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsItemsSource", optionValue: any): void;

	/**
	 * Gets  the member path of the X data for the callouts.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsXMemberPath"): string;

	/**
	 * Sets the member path of the X data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsXMemberPath", optionValue: string): void;

	/**
	 * Gets  the member path of the Y data for the callouts.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsYMemberPath"): string;

	/**
	 * Sets the member path of the Y data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsYMemberPath", optionValue: string): void;

	/**
	 * Gets  the member path of the label data for the callouts.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsLabelMemberPath"): string;

	/**
	 * Sets the member path of the label data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsLabelMemberPath", optionValue: string): void;

	/**
	 * Gets  the member path of the content data for the callouts.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsContentMemberPath"): string;

	/**
	 * Sets the member path of the content data for the callouts.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutsContentMemberPath", optionValue: string): void;

	/**
	 * Gets  function which takes an context object and returns a formatted label for the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisFormatLabel"): any;

	/**
	 * Sets function which takes an context object and returns a formatted label for the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisFormatLabel", optionValue: any): void;

	/**
	 * Gets  function which takes a context object and returns a formatted label for the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisFormatLabel"): any;

	/**
	 * Sets function which takes a context object and returns a formatted label for the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisFormatLabel", optionValue: any): void;

	/**
	 * Gets  the left margin of labels on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelLeftMargin"): number;

	/**
	 * Sets the left margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of labels on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelTopMargin"): number;

	/**
	 * Sets the top margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of labels on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelRightMargin"): number;

	/**
	 * Sets the right margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of labels on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelBottomMargin"): number;

	/**
	 * Sets the bottom margin of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelBottomMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of labels on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelLeftMargin"): number;

	/**
	 * Sets the left margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of labels on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelTopMargin"): number;

	/**
	 * Sets the top margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of labels on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelRightMargin"): number;

	/**
	 * Sets the right margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of labels on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelBottomMargin"): number;

	/**
	 * Sets the bottom margin of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelBottomMargin", optionValue: number): void;

	/**
	 * Gets  color of labels on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelTextColor"): string;

	/**
	 * Sets color of labels on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelTextColor", optionValue: string): void;

	/**
	 * Gets  color of labels on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelTextColor"): string;

	/**
	 * Sets color of labels on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelTextColor", optionValue: string): void;

	/**
	 * Gets  the margin around a title on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleMargin"): number;

	/**
	 * Sets the margin around a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleMargin", optionValue: number): void;

	/**
	 * Gets  the margin around a title on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleMargin"): number;

	/**
	 * Sets the margin around a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of a title on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleLeftMargin"): number;

	/**
	 * Sets the left margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the left margin of a title on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleLeftMargin"): number;

	/**
	 * Sets the left margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleLeftMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of a title on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleTopMargin"): number;

	/**
	 * Sets the top margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleTopMargin", optionValue: number): void;

	/**
	 * Gets  the top margin of a title on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleTopMargin"): number;

	/**
	 * Sets the top margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleTopMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of a title on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleRightMargin"): number;

	/**
	 * Sets the right margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleRightMargin", optionValue: number): void;

	/**
	 * Gets  the right margin of a title on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleRightMargin"): number;

	/**
	 * Sets the right margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleRightMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of a title on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleBottomMargin"): number;

	/**
	 * Sets the bottom margin of a title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleBottomMargin", optionValue: number): void;

	/**
	 * Gets  the bottom margin of a title on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleBottomMargin"): number;

	/**
	 * Sets the bottom margin of a title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleBottomMargin", optionValue: number): void;

	/**
	 * Gets  color of title on the X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleTextColor"): string;

	/**
	 * Sets color of title on the X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleTextColor", optionValue: string): void;

	/**
	 * Gets  color of title on the Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleTextColor"): string;

	/**
	 * Sets color of title on the Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleTextColor", optionValue: string): void;

	/**
	 * Gets  CSS font property for labels on X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelTextStyle"): string;

	/**
	 * Sets CSS font property for labels on X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for labels on Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelTextStyle"): string;

	/**
	 * Sets CSS font property for labels on Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for title on X-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleTextStyle"): string;

	/**
	 * Sets CSS font property for title on X-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleTextStyle", optionValue: string): void;

	/**
	 * Gets  CSS font property for title on Y-axis
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleTextStyle"): string;

	/**
	 * Sets CSS font property for title on Y-axis
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleTextStyle", optionValue: string): void;

	/**
	 * Gets  the format for labels along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabel"): any;

	/**
	 * Sets the format for labels along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabel", optionValue: any): void;

	/**
	 * Gets  the property or string from which the labels are derived.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabel"): any;

	/**
	 * Sets the property or string from which the labels are derived.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabel", optionValue: any): void;

	/**
	 * Gets  the color to apply to major gridlines along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMajorStroke"): string;

	/**
	 * Sets the color to apply to major gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMajorStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to major gridlines along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMajorStroke"): string;

	/**
	 * Sets the color to apply to major gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMajorStroke", optionValue: string): void;

	/**
	 * Gets  the thickness to apply to major gridlines along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMajorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to major gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMajorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to major gridlines along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMajorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to major gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMajorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to minor gridlines along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMinorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to minor gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMinorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to minor gridlines along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMinorStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to minor gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMinorStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the color to apply to stripes along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisStrip"): string;

	/**
	 * Sets the color to apply to stripes along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisStrip", optionValue: string): void;

	/**
	 * Gets  the color to apply to stripes along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisStrip"): string;

	/**
	 * Sets the color to apply to stripes along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisStrip", optionValue: string): void;

	/**
	 * Gets  the color to apply to the X-axis line.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisStroke"): string;

	/**
	 * Sets the color to apply to the X-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to the Y-axis line.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisStroke"): string;

	/**
	 * Sets the color to apply to the Y-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisStroke", optionValue: string): void;

	/**
	 * Gets  the thickness to apply to the X-axis line.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to the X-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to the Y-axis line.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to the Y-axis line.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the length of tickmarks along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTickLength"): number;

	/**
	 * Sets the length of tickmarks along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTickLength", optionValue: number): void;

	/**
	 * Gets  the length of tickmarks along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTickLength"): number;

	/**
	 * Sets the length of tickmarks along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTickLength", optionValue: number): void;

	/**
	 * Gets  the color to apply to tickmarks along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTickStroke"): string;

	/**
	 * Sets the color to apply to tickmarks along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTickStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to tickmarks along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTickStroke"): string;

	/**
	 * Sets the color to apply to tickmarks along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTickStroke", optionValue: string): void;

	/**
	 * Gets  the thickness to apply to tickmarks along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTickStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to tickmarks along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the thickness to apply to tickmarks along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTickStrokeThickness"): number;

	/**
	 * Sets the thickness to apply to tickmarks along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTickStrokeThickness", optionValue: number): void;

	/**
	 * Gets  the Text to display below the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitle"): string;

	/**
	 * Sets the Text to display below the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitle", optionValue: string): void;

	/**
	 * Gets  the Text to display to the left of the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitle"): string;

	/**
	 * Sets the Text to display to the left of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitle", optionValue: string): void;

	/**
	 * Gets  the color to apply to minor gridlines along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMinorStroke"): string;

	/**
	 * Sets the color to apply to minor gridlines along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMinorStroke", optionValue: string): void;

	/**
	 * Gets  the color to apply to minor gridlines along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMinorStroke"): string;

	/**
	 * Sets the color to apply to minor gridlines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMinorStroke", optionValue: string): void;

	/**
	 * Gets  the angle of rotation for labels along the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelAngle"): number;

	/**
	 * Sets the angle of rotation for labels along the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelAngle", optionValue: number): void;

	/**
	 * Gets  the angle of rotation for labels along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelAngle"): number;

	/**
	 * Sets the angle of rotation for labels along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelAngle", optionValue: number): void;

	/**
	 * Gets  the distance between the X-axis and the bottom of the chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisExtent"): number;

	/**
	 * Sets the distance between the X-axis and the bottom of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisExtent", optionValue: number): void;

	/**
	 * Gets  the distance between the Y-axis and the left edge of the chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisExtent"): number;

	/**
	 * Sets the distance between the Y-axis and the left edge of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisExtent", optionValue: number): void;

	/**
	 * Gets  the angle of rotation for the X-axis title.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleAngle"): number;

	/**
	 * Sets the angle of rotation for the X-axis title.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleAngle", optionValue: number): void;

	/**
	 * Gets  the angle of rotation for the Y-axis title.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleAngle"): number;

	/**
	 * Sets the angle of rotation for the Y-axis title.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleAngle", optionValue: number): void;

	/**
	 * Gets  whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisInverted"): boolean;

	/**
	 * Sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisInverted", optionValue: boolean): void;

	/**
	 * Gets  whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisInverted"): boolean;

	/**
	 * Sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisInverted", optionValue: boolean): void;

	/**
	 * Gets  Horizontal alignment of the X-axis title.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleAlignment"): string;

	/**
	 * Sets Horizontal alignment of the X-axis title.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "xAxisTitleAlignment", optionValue: string): void;

	/**
	 * Gets  Vertical alignment of the Y-axis title.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleAlignment"): string;

	/**
	 * Sets Vertical alignment of the Y-axis title.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisTitleAlignment", optionValue: string): void;

	/**
	 * Gets  Horizontal alignment of X-axis labels.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelHorizontalAlignment"): string;

	/**
	 * Sets Horizontal alignment of X-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelHorizontalAlignment", optionValue: string): void;

	/**
	 * Gets  Horizontal alignment of Y-axis labels.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelHorizontalAlignment"): string;

	/**
	 * Sets Horizontal alignment of Y-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelHorizontalAlignment", optionValue: string): void;

	/**
	 * Gets  Vertical alignment of X-axis labels.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelVerticalAlignment"): string;

	/**
	 * Sets Vertical alignment of X-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelVerticalAlignment", optionValue: string): void;

	/**
	 * Gets  Vertical alignment of Y-axis labels.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelVerticalAlignment"): string;

	/**
	 * Sets Vertical alignment of Y-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelVerticalAlignment", optionValue: string): void;

	/**
	 * Gets  Visibility of X-axis labels.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelVisibility"): string;

	/**
	 * Sets Visibility of X-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "xAxisLabelVisibility", optionValue: string): void;

	/**
	 * Gets  Visibility of Y-axis labels.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelVisibility"): string;

	/**
	 * Sets Visibility of Y-axis labels.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelVisibility", optionValue: string): void;

	/**
	 * The location of Y-axis labels, relative to the plot area.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelLocation"): string;

	/**
	 * The location of Y-axis labels, relative to the plot area.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "yAxisLabelLocation", optionValue: string): void;

	/**
	 * Gets  the frequency of displayed labels along the X-axis.
	 * Gets  the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisInterval"): number;

	/**
	 * Sets the frequency of displayed labels along the X-axis.
	 *  sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisInterval", optionValue: number): void;

	/**
	 * Gets  the frequency of displayed minor lines along the X-axis.
	 * Gets  the set value is a factor that determines how the minor lines will be displayed.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMinorInterval"): number;

	/**
	 * Sets the frequency of displayed minor lines along the X-axis.
	 *  sets the set value is a factor that determines how the minor lines will be displayed.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMinorInterval", optionValue: number): void;

	/**
	 * Gets  the distance between each label and grid line along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisInterval"): number;

	/**
	 * Sets the distance between each label and grid line along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisInterval", optionValue: number): void;

	/**
	 * Gets  whether the Y-axis should use a logarithmic scale instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisIsLogarithmic"): boolean;

	/**
	 * Sets whether the Y-axis should use a logarithmic scale instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisIsLogarithmic", optionValue: boolean): void;

	/**
	 * Gets  the base value to use in the log function when mapping the position of data items along the Y-axis.
	 * This property is effective only when YAxisIsLogarithmic is true.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLogarithmBase"): number;

	/**
	 * Sets the base value to use in the log function when mapping the position of data items along the Y-axis.
	 * This property is effective only when YAxisIsLogarithmic is true.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisLogarithmBase", optionValue: number): void;

	/**
	 * Gets  the data value corresponding to the minimum value of the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMinimumValue"): number;

	/**
	 * Sets the data value corresponding to the minimum value of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMinimumValue", optionValue: number): void;

	/**
	 * Gets  the data value corresponding to the maximum value of the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMaximumValue"): number;

	/**
	 * Sets the data value corresponding to the maximum value of the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMaximumValue", optionValue: number): void;

	/**
	 * Gets  the frequency of displayed minor lines along the Y-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMinorInterval"): number;

	/**
	 * Sets the frequency of displayed minor lines along the Y-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisMinorInterval", optionValue: number): void;

	/**
	 * Gets  whether the X-axis will use a logarithmic scale, instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the X-axis minimum is greater than zero.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisIsLogarithmic"): boolean;

	/**
	 * Sets whether the X-axis will use a logarithmic scale, instead of a linear one.
	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the X-axis minimum is greater than zero.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisIsLogarithmic", optionValue: boolean): void;

	/**
	 * Gets  the base value to use in the log function when mapping the position of data items along the X-axis.
	 * This property is effective only when y-axis is logarithmic
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLogarithmBase"): number;

	/**
	 * Sets the base value to use in the log function when mapping the position of data items along the X-axis.
	 * This property is effective only when y-axis is logarithmic
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisLogarithmBase", optionValue: number): void;

	/**
	 * Gets  the data value corresponding to the minimum value on the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMinimumValue"): number;

	/**
	 * Sets the data value corresponding to the minimum value on the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMinimumValue", optionValue: number): void;

	/**
	 * Gets  the data value corresponding to the maximum value on the X-axis.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMaximumValue"): number;

	/**
	 * Sets the data value corresponding to the maximum value on the X-axis.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisMaximumValue", optionValue: number): void;

	/**
	 * Gets  whether the large numbers on the X-axis labels are abbreviated.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisAbbreviateLargeNumbers"): boolean;

	/**
	 * Sets whether the large numbers on the X-axis labels are abbreviated.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "xAxisAbbreviateLargeNumbers", optionValue: boolean): void;

	/**
	 * Gets  whether the large numbers on the Y-axis labels are abbreviated.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisAbbreviateLargeNumbers"): boolean;

	/**
	 * Sets whether the large numbers on the Y-axis labels are abbreviated.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "yAxisAbbreviateLargeNumbers", optionValue: boolean): void;

	/**
	 * Gets  collision avoidance between markers on series that support this behaviour.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "markerCollision"): string;

	/**
	 * Sets collision avoidance between markers on series that support this behaviour.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "markerCollision", optionValue: string): void;

	/**
	 * Gets  the type of chart series to generate from the data.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "chartType"): string;

	/**
	 * Sets the type of chart series to generate from the data.
	 *
	 * @optionValue New value to be set.
	 */

	igShapeChart(optionLiteral: 'option', optionName: "chartType", optionValue: string): void;

	/**
	 * The width of the chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "width"): number;

	/**
	 * The width of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "width", optionValue: number): void;

	/**
	 * The height of the chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "height"): number;

	/**
	 * The height of the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "height", optionValue: number): void;

	/**
	 * Gets  maximum number of displayed records in chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "maxRecCount"): number;

	/**
	 * Sets maximum number of displayed records in chart.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "maxRecCount", optionValue: number): void;

	/**
	 * Gets  a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Gets  url which is used for sending JSON on request for remote data.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets url which is used for sending JSON on request for remote data.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Event raised when a property value is changed on this chart
	 */
	igShapeChart(optionLiteral: 'option', optionName: "propertyChanged"): PropertyChangedEvent;

	/**
	 * Event raised when a property value is changed on this chart
	 *
	 * @optionValue Define event handler function.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "propertyChanged", optionValue: PropertyChangedEvent): void;

	/**
	 * Event raised when a series is initialized and added to this chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesAdded"): SeriesAddedEvent;

	/**
	 * Event raised when a series is initialized and added to this chart.
	 *
	 * @optionValue Define event handler function.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesAdded", optionValue: SeriesAddedEvent): void;

	/**
	 * Event raised when a series is removed from this chart.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesRemoved"): SeriesRemovedEvent;

	/**
	 * Event raised when a series is removed from this chart.
	 *
	 * @optionValue Define event handler function.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesRemoved", optionValue: SeriesRemovedEvent): void;

	/**
	 * Occurs when the pointer enters a Series.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerEnter"): SeriesPointerEnterEvent;

	/**
	 * Occurs when the pointer enters a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerEnter", optionValue: SeriesPointerEnterEvent): void;

	/**
	 * Occurs when the pointer leaves a Series.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerLeave"): SeriesPointerLeaveEvent;

	/**
	 * Occurs when the pointer leaves a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerLeave", optionValue: SeriesPointerLeaveEvent): void;

	/**
	 * Occurs when the pointer moves over a Series.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerMove"): SeriesPointerMoveEvent;

	/**
	 * Occurs when the pointer moves over a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerMove", optionValue: SeriesPointerMoveEvent): void;

	/**
	 * Occurs when the pointer is pressed down over a Series.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerDown"): SeriesPointerDownEvent;

	/**
	 * Occurs when the pointer is pressed down over a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerDown", optionValue: SeriesPointerDownEvent): void;

	/**
	 * Occurs when the pointer is released over a Series.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerUp"): SeriesPointerUpEvent;

	/**
	 * Occurs when the pointer is released over a Series.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "seriesPointerUp", optionValue: SeriesPointerUpEvent): void;

	/**
	 * Occurs when the style of a callout is updated.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutStyleUpdating"): CalloutStyleUpdatingEvent;

	/**
	 * Occurs when the style of a callout is updated.
	 *
	 * @optionValue New value to be set.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "calloutStyleUpdating", optionValue: CalloutStyleUpdatingEvent): void;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event which is raised before data binding.
	 * Return false in order to cancel data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "updateTooltip"): UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "updateTooltip", optionValue: UpdateTooltipEvent): void;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "hideTooltip"): HideTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igShapeChart(optionLiteral: 'option', optionName: "hideTooltip", optionValue: HideTooltipEvent): void;
	igShapeChart(options: IgShapeChart): JQuery;
	igShapeChart(optionLiteral: 'option', optionName: string): any;
	igShapeChart(optionLiteral: 'option', options: IgShapeChart): JQuery;
	igShapeChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igShapeChart(methodName: string, ...methodParams: any[]): any;
}
interface IgLoading {
	cssClass?: any;
	includeVerticalOffset?: boolean;

	/**
	 * Option for igLoading
	 */
	[optionName: string]: any;
}
interface IgLoadingMethods {
	indicatorElement(): void;
	indicator(): void;
	show(refresh: Object): void;
	hide(): void;
	refreshPos(): void;
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igLoading"): IgLoadingMethods;
}

interface IgSliderBookmarks {
	/**
	 * Get or set the bookmark value. Should be between slider min and max values.
	 */
	value?: number;

	/**
	 * Get or set the bookmark title. Show in tooltip on hover.
	 */
	title?: string;

	/**
	 * Get or set whether the bookmark is disabled or not.
	 */
	disabled?: boolean;

	/**
	 * Get or set a custom css class to be applied to the bookmark anchor element.
	 */
	css?: string;

	/**
	 * Option for IgSliderBookmarks
	 */
	[optionName: string]: any;
}

interface StartEvent {
	(event: Event, ui: StartEventUIParam): void;
}

interface StartEventUIParam {}

interface SlideEvent {
	(event: Event, ui: SlideEventUIParam): void;
}

interface SlideEventUIParam {}

interface StopEvent {
	(event: Event, ui: StopEventUIParam): void;
}

interface StopEventUIParam {}

interface ChangeEvent {
	(event: Event, ui: ChangeEventUIParam): void;
}

interface ChangeEventUIParam {}

interface BookmarkHitEvent {
	(event: Event, ui: BookmarkHitEventUIParam): void;
}

interface BookmarkHitEventUIParam {}

interface BookmarkClickEvent {
	(event: Event, ui: BookmarkClickEventUIParam): void;
}

interface BookmarkClickEventUIParam {}

interface IgSlider {
	/**
	 * Get or set whether the slide handle will animate when it is moved.
	 */
	animate?: boolean;

	/**
	 * Get or set the slider range maximum value.
	 */
	max?: number;

	/**
	 * Get or set the slider range minimum value.
	 */
	min?: number;

	/**
	 * Get or set the slider orientation.
	 */
	orientation?: any;

	/**
	 * Get or set the step with which the value is increased.
	 */
	step?: number;

	/**
	 * Get or set the slider value.
	 */
	value?: number;

	/**
	 * Get or set the bookmarks array.
	 */
	bookmarks?: IgSliderBookmarks;

	/**
	 * Get or set the whether to show bookmarks title on bookmark hover or not.
	 */
	showBookmarkTitle?: boolean;

	/**
	 * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
	 */
	syncHandleWithBookmark?: boolean;

	/**
	 * Defines the slide start event.
	 */
	start?: StartEvent;

	/**
	 * Defines the slide event. Fired when the user is sliding with mouse.
	 */
	slide?: SlideEvent;

	/**
	 * Defines the slide stop event. Fired to mark the end of a sliding action.
	 */
	stop?: StopEvent;

	/**
	 * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
	 */
	change?: ChangeEvent;

	/**
	 * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
	 */
	bookmarkHit?: BookmarkHitEvent;

	/**
	 * Defines the slider bookmark click event. Fired when a bookmark is clicked.
	 */
	bookmarkClick?: BookmarkClickEvent;

	/**
	 * Option for igSlider
	 */
	[optionName: string]: any;
}
interface IgSliderMethods {
	widget(): void;
	destroy(): void;
	clearBookmarks(): void;
	value(newValue: Object): void;
}
interface JQuery {
	data(propertyName: "igSlider"): IgSliderMethods;
}

interface IgProgressBar {
	animate?: boolean;
	animateTimeout?: number;
	max?: number;
	min?: number;
	orientation?: string;
	value?: number;
	width?: string;
	height?: string;
	range?: boolean;

	/**
	 * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
	 */
	queue?: boolean;
	endValue?: number;
	change?: ChangeEvent;

	/**
	 * Option for igProgressBar
	 */
	[optionName: string]: any;
}
interface IgProgressBarMethods {
	widget(): void;
	destroy(): void;
	value(newValue: Object): void;
}
interface JQuery {
	data(propertyName: "igProgressBar"): IgProgressBarMethods;
}

interface IgButtonLink {
	href?: any;
	target?: any;
	title?: any;

	/**
	 * Option for IgButtonLink
	 */
	[optionName: string]: any;
}

interface IgButtonIcons {
	primary?: any;
	secondary?: any;

	/**
	 * Option for IgButtonIcons
	 */
	[optionName: string]: any;
}

interface IgButton {
	width?: any;
	height?: any;
	link?: IgButtonLink;
	labelText?: string;
	centerLabel?: boolean;
	css?: any;
	onlyIcons?: boolean;
	icons?: IgButtonIcons;
	title?: boolean;

	/**
	 * Option for igButton
	 */
	[optionName: string]: any;
}
interface IgButtonMethods {
	setTitle(title: Object): void;
	widget(): void;
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igButton"): IgButtonMethods;
}

interface IgTooltip {
	text?: string;
	arrowLocation?: string;

	/**
	 * Option for igTooltip
	 */
	[optionName: string]: any;
}
interface IgTooltipMethods {
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igTooltip"): IgTooltipMethods;
}

interface CaptureEvent {
	(event: Event, ui: CaptureEventUIParam): void;
}

interface CaptureEventUIParam {}

interface MouseWrapper {
	cancel?: string;
	distance?: number;
	delay?: number;
	start?: StartEvent;
	drag?: DragEvent;
	stop?: StopEvent;
	capture?: CaptureEvent;

	/**
	 * Option for mouseWrapper
	 */
	[optionName: string]: any;
}
interface MouseWrapperMethods {
	destroy(): void;
}
interface JQuery {
	data(propertyName: "mouseWrapper"): MouseWrapperMethods;
}

interface IgResponsiveContainer {
	/**
	 * The time between two resize checks in milliseconds.
	 */
	pollingInterval?: number;

	/**
	 * Option for igResponsiveContainer
	 */
	[optionName: string]: any;
}
interface IgResponsiveContainerMethods {
	/**
	 * Destroys the ResponsiveContainer widget
	 */
	destroy(): void;

	/**
	 * Starts the automatic size check procedure
	 */
	startPoller(): void;

	/**
	 * Stops the automatic size check procedure
	 */
	stopPoller(): void;

	/**
	 * Removes a callback from the callbacks collection.
	 *
	 * @param callbackId The callback id to remove.
	 */
	removeCallback(callbackId: number): void;

	/**
	 * Adds a callback to the callback collection.
	 *
	 * @param callback The function to call when requirements are met.
	 * @param owner The owner object of the function.
	 * @param reactionStep The sensitivity of the size change recognition.
	 * @param reactionDirection The dimensions the changes of which to be traced.
	 */
	addCallback(callback: Function, owner: Object, reactionStep: number, reactionDirection: Object): void;
}
interface JQuery {
	data(propertyName: "igResponsiveContainer"): IgResponsiveContainerMethods;
}

interface JQuery {
	igLoading(methodName: "indicatorElement"): void;
	igLoading(methodName: "indicator"): void;
	igLoading(methodName: "show", refresh: Object): void;
	igLoading(methodName: "hide"): void;
	igLoading(methodName: "refreshPos"): void;
	igLoading(methodName: "destroy"): void;
	igLoading(optionLiteral: 'option', optionName: "cssClass"): any;
	igLoading(optionLiteral: 'option', optionName: "cssClass", optionValue: any): void;
	igLoading(optionLiteral: 'option', optionName: "includeVerticalOffset"): boolean;
	igLoading(optionLiteral: 'option', optionName: "includeVerticalOffset", optionValue: boolean): void;
	igLoading(options: IgLoading): JQuery;
	igLoading(optionLiteral: 'option', optionName: string): any;
	igLoading(optionLiteral: 'option', options: IgLoading): JQuery;
	igLoading(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igLoading(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igSlider(methodName: "widget"): void;
	igSlider(methodName: "destroy"): void;
	igSlider(methodName: "clearBookmarks"): void;
	igSlider(methodName: "value", newValue: Object): void;

	/**
	 * Get or set whether the slide handle will animate when it is moved.
	 */
	igSlider(optionLiteral: 'option', optionName: "animate"): boolean;

	/**
	 * Get or set whether the slide handle will animate when it is moved.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "animate", optionValue: boolean): void;

	/**
	 * Get or set the slider range maximum value.
	 */
	igSlider(optionLiteral: 'option', optionName: "max"): number;

	/**
	 * Get or set the slider range maximum value.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "max", optionValue: number): void;

	/**
	 * Get or set the slider range minimum value.
	 */
	igSlider(optionLiteral: 'option', optionName: "min"): number;

	/**
	 * Get or set the slider range minimum value.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "min", optionValue: number): void;

	/**
	 * Get or set the slider orientation.
	 */
	igSlider(optionLiteral: 'option', optionName: "orientation"): any;

	/**
	 * Get or set the slider orientation.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "orientation", optionValue: any): void;

	/**
	 * Get or set the step with which the value is increased.
	 */
	igSlider(optionLiteral: 'option', optionName: "step"): number;

	/**
	 * Get or set the step with which the value is increased.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "step", optionValue: number): void;

	/**
	 * Get or set the slider value.
	 */
	igSlider(optionLiteral: 'option', optionName: "value"): number;

	/**
	 * Get or set the slider value.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "value", optionValue: number): void;

	/**
	 * Get or set the bookmarks array.
	 */
	igSlider(optionLiteral: 'option', optionName: "bookmarks"): IgSliderBookmarks;

	/**
	 * Get or set the bookmarks array.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "bookmarks", optionValue: IgSliderBookmarks): void;

	/**
	 * Get or set the whether to show bookmarks title on bookmark hover or not.
	 */
	igSlider(optionLiteral: 'option', optionName: "showBookmarkTitle"): boolean;

	/**
	 * Get or set the whether to show bookmarks title on bookmark hover or not.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "showBookmarkTitle", optionValue: boolean): void;

	/**
	 * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
	 */
	igSlider(optionLiteral: 'option', optionName: "syncHandleWithBookmark"): boolean;

	/**
	 * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "syncHandleWithBookmark", optionValue: boolean): void;

	/**
	 * Defines the slide start event.
	 */
	igSlider(optionLiteral: 'option', optionName: "start"): StartEvent;

	/**
	 * Defines the slide start event.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "start", optionValue: StartEvent): void;

	/**
	 * Defines the slide event. Fired when the user is sliding with mouse.
	 */
	igSlider(optionLiteral: 'option', optionName: "slide"): SlideEvent;

	/**
	 * Defines the slide event. Fired when the user is sliding with mouse.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "slide", optionValue: SlideEvent): void;

	/**
	 * Defines the slide stop event. Fired to mark the end of a sliding action.
	 */
	igSlider(optionLiteral: 'option', optionName: "stop"): StopEvent;

	/**
	 * Defines the slide stop event. Fired to mark the end of a sliding action.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "stop", optionValue: StopEvent): void;

	/**
	 * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
	 */
	igSlider(optionLiteral: 'option', optionName: "change"): ChangeEvent;

	/**
	 * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "change", optionValue: ChangeEvent): void;

	/**
	 * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
	 */
	igSlider(optionLiteral: 'option', optionName: "bookmarkHit"): BookmarkHitEvent;

	/**
	 * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "bookmarkHit", optionValue: BookmarkHitEvent): void;

	/**
	 * Defines the slider bookmark click event. Fired when a bookmark is clicked.
	 */
	igSlider(optionLiteral: 'option', optionName: "bookmarkClick"): BookmarkClickEvent;

	/**
	 * Defines the slider bookmark click event. Fired when a bookmark is clicked.
	 *
	 * @optionValue New value to be set.
	 */
	igSlider(optionLiteral: 'option', optionName: "bookmarkClick", optionValue: BookmarkClickEvent): void;
	igSlider(options: IgSlider): JQuery;
	igSlider(optionLiteral: 'option', optionName: string): any;
	igSlider(optionLiteral: 'option', options: IgSlider): JQuery;
	igSlider(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igSlider(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igProgressBar(methodName: "widget"): void;
	igProgressBar(methodName: "destroy"): void;
	igProgressBar(methodName: "value", newValue: Object): void;
	igProgressBar(optionLiteral: 'option', optionName: "animate"): boolean;
	igProgressBar(optionLiteral: 'option', optionName: "animate", optionValue: boolean): void;
	igProgressBar(optionLiteral: 'option', optionName: "animateTimeout"): number;
	igProgressBar(optionLiteral: 'option', optionName: "animateTimeout", optionValue: number): void;
	igProgressBar(optionLiteral: 'option', optionName: "max"): number;
	igProgressBar(optionLiteral: 'option', optionName: "max", optionValue: number): void;
	igProgressBar(optionLiteral: 'option', optionName: "min"): number;
	igProgressBar(optionLiteral: 'option', optionName: "min", optionValue: number): void;
	igProgressBar(optionLiteral: 'option', optionName: "orientation"): string;
	igProgressBar(optionLiteral: 'option', optionName: "orientation", optionValue: string): void;
	igProgressBar(optionLiteral: 'option', optionName: "value"): number;
	igProgressBar(optionLiteral: 'option', optionName: "value", optionValue: number): void;
	igProgressBar(optionLiteral: 'option', optionName: "width"): string;
	igProgressBar(optionLiteral: 'option', optionName: "width", optionValue: string): void;
	igProgressBar(optionLiteral: 'option', optionName: "height"): string;
	igProgressBar(optionLiteral: 'option', optionName: "height", optionValue: string): void;
	igProgressBar(optionLiteral: 'option', optionName: "range"): boolean;
	igProgressBar(optionLiteral: 'option', optionName: "range", optionValue: boolean): void;

	/**
	 * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
	 */
	igProgressBar(optionLiteral: 'option', optionName: "queue"): boolean;

	/**
	 * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
	 *
	 * @optionValue New value to be set.
	 */
	igProgressBar(optionLiteral: 'option', optionName: "queue", optionValue: boolean): void;
	igProgressBar(optionLiteral: 'option', optionName: "endValue"): number;
	igProgressBar(optionLiteral: 'option', optionName: "endValue", optionValue: number): void;
	igProgressBar(optionLiteral: 'option', optionName: "change"): ChangeEvent;
	igProgressBar(optionLiteral: 'option', optionName: "change", optionValue: ChangeEvent): void;
	igProgressBar(options: IgProgressBar): JQuery;
	igProgressBar(optionLiteral: 'option', optionName: string): any;
	igProgressBar(optionLiteral: 'option', options: IgProgressBar): JQuery;
	igProgressBar(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igProgressBar(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igButton(methodName: "setTitle", title: Object): void;
	igButton(methodName: "widget"): void;
	igButton(methodName: "destroy"): void;
	igButton(optionLiteral: 'option', optionName: "width"): any;
	igButton(optionLiteral: 'option', optionName: "width", optionValue: any): void;
	igButton(optionLiteral: 'option', optionName: "height"): any;
	igButton(optionLiteral: 'option', optionName: "height", optionValue: any): void;
	igButton(optionLiteral: 'option', optionName: "link"): IgButtonLink;
	igButton(optionLiteral: 'option', optionName: "link", optionValue: IgButtonLink): void;
	igButton(optionLiteral: 'option', optionName: "labelText"): string;
	igButton(optionLiteral: 'option', optionName: "labelText", optionValue: string): void;
	igButton(optionLiteral: 'option', optionName: "centerLabel"): boolean;
	igButton(optionLiteral: 'option', optionName: "centerLabel", optionValue: boolean): void;
	igButton(optionLiteral: 'option', optionName: "css"): any;
	igButton(optionLiteral: 'option', optionName: "css", optionValue: any): void;
	igButton(optionLiteral: 'option', optionName: "onlyIcons"): boolean;
	igButton(optionLiteral: 'option', optionName: "onlyIcons", optionValue: boolean): void;
	igButton(optionLiteral: 'option', optionName: "icons"): IgButtonIcons;
	igButton(optionLiteral: 'option', optionName: "icons", optionValue: IgButtonIcons): void;
	igButton(optionLiteral: 'option', optionName: "title"): boolean;
	igButton(optionLiteral: 'option', optionName: "title", optionValue: boolean): void;
	igButton(options: IgButton): JQuery;
	igButton(optionLiteral: 'option', optionName: string): any;
	igButton(optionLiteral: 'option', options: IgButton): JQuery;
	igButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igButton(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igTooltip(methodName: "destroy"): void;
	igTooltip(optionLiteral: 'option', optionName: "text"): string;
	igTooltip(optionLiteral: 'option', optionName: "text", optionValue: string): void;
	igTooltip(optionLiteral: 'option', optionName: "arrowLocation"): string;
	igTooltip(optionLiteral: 'option', optionName: "arrowLocation", optionValue: string): void;
	igTooltip(options: IgTooltip): JQuery;
	igTooltip(optionLiteral: 'option', optionName: string): any;
	igTooltip(optionLiteral: 'option', options: IgTooltip): JQuery;
	igTooltip(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTooltip(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	mouseWrapper(methodName: "destroy"): void;
	mouseWrapper(optionLiteral: 'option', optionName: "cancel"): string;
	mouseWrapper(optionLiteral: 'option', optionName: "cancel", optionValue: string): void;
	mouseWrapper(optionLiteral: 'option', optionName: "distance"): number;
	mouseWrapper(optionLiteral: 'option', optionName: "distance", optionValue: number): void;
	mouseWrapper(optionLiteral: 'option', optionName: "delay"): number;
	mouseWrapper(optionLiteral: 'option', optionName: "delay", optionValue: number): void;
	mouseWrapper(optionLiteral: 'option', optionName: "start"): StartEvent;
	mouseWrapper(optionLiteral: 'option', optionName: "start", optionValue: StartEvent): void;
	mouseWrapper(optionLiteral: 'option', optionName: "drag"): DragEvent;
	mouseWrapper(optionLiteral: 'option', optionName: "drag", optionValue: DragEvent): void;
	mouseWrapper(optionLiteral: 'option', optionName: "stop"): StopEvent;
	mouseWrapper(optionLiteral: 'option', optionName: "stop", optionValue: StopEvent): void;
	mouseWrapper(optionLiteral: 'option', optionName: "capture"): CaptureEvent;
	mouseWrapper(optionLiteral: 'option', optionName: "capture", optionValue: CaptureEvent): void;
	mouseWrapper(options: MouseWrapper): JQuery;
	mouseWrapper(optionLiteral: 'option', optionName: string): any;
	mouseWrapper(optionLiteral: 'option', options: MouseWrapper): JQuery;
	mouseWrapper(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	mouseWrapper(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igResponsiveContainer(methodName: "destroy"): void;
	igResponsiveContainer(methodName: "startPoller"): void;
	igResponsiveContainer(methodName: "stopPoller"): void;
	igResponsiveContainer(methodName: "removeCallback", callbackId: number): void;
	igResponsiveContainer(methodName: "addCallback", callback: Function, owner: Object, reactionStep: number, reactionDirection: Object): void;

	/**
	 * The time between two resize checks in milliseconds.
	 */
	igResponsiveContainer(optionLiteral: 'option', optionName: "pollingInterval"): number;

	/**
	 * The time between two resize checks in milliseconds.
	 *
	 * @optionValue New value to be set.
	 */
	igResponsiveContainer(optionLiteral: 'option', optionName: "pollingInterval", optionValue: number): void;
	igResponsiveContainer(options: IgResponsiveContainer): JQuery;
	igResponsiveContainer(optionLiteral: 'option', optionName: string): any;
	igResponsiveContainer(optionLiteral: 'option', options: IgResponsiveContainer): JQuery;
	igResponsiveContainer(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igResponsiveContainer(methodName: string, ...methodParams: any[]): any;
}
interface IgSparkline {
	/**
	 * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;

	/**
	 * Gets or sets the sparkline brush.
	 */
	brush?: string;

	/**
	 * Gets or sets the negative brush of the sparkline.
	 */
	negativeBrush?: string;

	/**
	 * Gets or sets the marker brush of the sparkline.
	 */
	markerBrush?: string;

	/**
	 * Gets or sets the negative marker brush of the sparkline.
	 */
	negativeMarkerBrush?: string;

	/**
	 * Gets or sets the first marker brush of the sparkline.
	 */
	firstMarkerBrush?: string;

	/**
	 * Gets or sets the last marker brush of the sparkline.
	 */
	lastMarkerBrush?: string;

	/**
	 * Gets or sets the high marker brush of the sparkline.
	 */
	highMarkerBrush?: string;

	/**
	 * Gets or sets the low marker brush of the sparkline.
	 */
	lowMarkerBrush?: string;

	/**
	 * Gets or sets the trendline brush of the sparkline.
	 */
	trendLineBrush?: string;

	/**
	 * Gets or sets the horizontal axis line brush of the sparkline.
	 */
	horizontalAxisBrush?: string;

	/**
	 * Gets or sets the vertical axis line brush of the sparkline.
	 */
	verticalAxisBrush?: string;

	/**
	 * Gets or sets the normal range brush of the sparkline.
	 */
	normalRangeFill?: string;

	/**
	 * Gets or sets the display state of the horizontal axis.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	horizontalAxisVisibility?: string;

	/**
	 * Gets or sets the display state of the vertical axis.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	verticalAxisVisibility?: string;

	/**
	 * Gets or sets the marker visibility of the sparkline.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	markerVisibility?: string;

	/**
	 * Gets or sets the negative marker visibility of the sparkline.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	negativeMarkerVisibility?: string;

	/**
	 * Gets or sets the first marker visibility of the sparkline.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	firstMarkerVisibility?: string;

	/**
	 * Gets or sets the last marker visibility of the sparkline.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	lastMarkerVisibility?: string;

	/**
	 * Gets or sets the low marker visibility of the sparkline.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	lowMarkerVisibility?: string;

	/**
	 * Gets or sets the high marker visibility of the sparkline.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	highMarkerVisibility?: string;

	/**
	 * Gets or sets the normal range visibility of the sparkline.
	 *
	 * Valid values:
	 * "visible" Display the element.
	 * "collapsed" Do not display the element.
	 */
	normalRangeVisibility?: string;

	/**
	 * Gets or sets the position of the normal range on the sparkline.
	 */
	displayNormalRangeInFront?: boolean;

	/**
	 * Gets or sets the marker size of the sparkline.
	 */
	markerSize?: number;

	/**
	 * Gets or sets the first marker size of the sparkline.
	 */
	firstMarkerSize?: number;

	/**
	 * Gets or sets the last marker size of the sparkline.
	 */
	lastMarkerSize?: number;

	/**
	 * Gets or sets the high marker size of the sparkline.
	 */
	highMarkerSize?: number;

	/**
	 * Gets or sets the low marker size of the sparkline.
	 */
	lowMarkerSize?: number;

	/**
	 * Gets or sets the negative marker size of the sparkline.
	 */
	negativeMarkerSize?: number;

	/**
	 * Gets or sets the line thickness of the sparkline.
	 */
	lineThickness?: number;

	/**
	 * Gets or sets the string path to the value column.
	 */
	valueMemberPath?: string;

	/**
	 * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
	 */
	labelMemberPath?: string;

	/**
	 * Gets or sets the type of trendline used by the sparkline.
	 *
	 * Valid values:
	 * "none" No trend line will be displayed.
	 * "linearFit" Linear fit.
	 * "quadraticFit" Quadratic polynomial fit.
	 * "cubicFit" Cubic polynomial fit.
	 * "quarticFit" Quartic polynomial fit.
	 * "quinticFit" Quintic polynomial fit.
	 * "logarithmicFit" Logarithmic fit.
	 * "exponentialFit" Exponential fit.
	 * "powerLawFit" Powerlaw fit.
	 * "simpleAverage" Simple moving average.
	 * "exponentialAverage" Exponential moving average.
	 * "modifiedAverage" Modified moving average.
	 * "cumulativeAverage" Cumulative moving average.
	 * "weightedAverage" Weighted moving average.
	 */
	trendLineType?: string;

	/**
	 * Gets or sets the trendline period used by the sparkline.
	 */
	trendLinePeriod?: number;

	/**
	 * Gets or sets the thickness of the sparkline's trendline.
	 */
	trendLineThickness?: number;

	/**
	 * Gets or sets the minimum value of the normal range.
	 */
	normalRangeMinimum?: number;

	/**
	 * Gets or sets the maximum value of the normal range.
	 */
	normalRangeMaximum?: number;

	/**
	 * Gets or sets the display type of the sparkline.
	 *
	 * Valid values:
	 * "line" Display the sparkline as a line.
	 * "area" Display the sparkline as a filled polygon.
	 * "column" Display the sparkline as a set of columns.
	 * "winLoss" Display the sparkline as a set of columns on a boolean scale.
	 */
	displayType?: string;

	/**
	 * Gets or sets the way null values are interpreted.
	 *
	 * Valid values:
	 * "linearInterpolate" Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
	 * "dontPlot" Do not plot the unknown value on the chart.
	 */
	unknownValuePlotting?: string;

	/**
	 * The value or content to display on the vertical axis.
	 * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
	 */
	verticalAxisLabel?: any;

	/**
	 * The value or content to display on the horizontal axis.
	 * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
	 */
	horizontalAxisLabel?: any;

	/**
	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
	 */
	formatLabel?: any;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;

	/**
	 * Gets sets template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 */
	tooltipTemplate?: string;

	/**
	 * Gets sets maximum number of displayed records in chart.
	 */
	maxRecCount?: number;

	/**
	 * Gets sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	dataSource?: any;

	/**
	 * Gets sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	dataSourceType?: string;

	/**
	 * Gets sets url which is used for sending JSON on request for remote data.
	 */
	dataSourceUrl?: string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	responseTotalRecCountKey?: string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	responseDataKey?: string;

	/**
	 * Event which is raised before data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to igSparkline.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to igSparkline.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	updateTooltip?: UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	hideTooltip?: HideTooltipEvent;

	/**
	 * Option for igSparkline
	 */
	[optionName: string]: any;
}
interface IgSparklineMethods {
	destroy(): void;

	/**
	 * Find index of item within actual data used by chart.
	 *
	 * @param item The reference to item.
	 */
	findIndexOfItem(item: Object): number;

	/**
	 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
	 *
	 * @param index Index of data item.
	 */
	getDataItem(index: Object): Object;

	/**
	 * Get reference of actual data used by chart.
	 */
	getData(): any[];

	/**
	 * Adds a new item to the data source and notifies the chart.
	 *
	 * @param item The item that we want to add to the data source.
	 */
	addItem(item: Object): Object;

	/**
	 * Inserts a new item to the data source and notifies the chart.
	 *
	 * @param item the new item that we want to insert in the data source.
	 * @param index The index in the data source where the new item will be inserted.
	 */
	insertItem(item: Object, index: number): Object;

	/**
	 * Deletes an item from the data source and notifies the chart.
	 *
	 * @param index The index in the data source from where the item will be been removed.
	 */
	removeItem(index: number): Object;

	/**
	 * Updates an item in the data source and notifies the chart.
	 *
	 * @param index The index of the item in the data source that we want to change.
	 * @param item The new item object that will be set in the data source.
	 */
	setItem(index: number, item: Object): Object;

	/**
	 * Notifies the chart that an item has been set in an associated data source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source that has been changed.
	 * @param newItem the new item that has been set in the collection.
	 * @param oldItem the old item that has been overwritten in the collection.
	 */
	notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;

	/**
	 * Notifies the chart that the items have been cleared from an associated data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 */
	notifyClearItems(dataSource: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source where the new item has been inserted.
	 * @param newItem the new item that has been set in the collection.
	 */
	notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;

	/**
	 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
	 * It's not necessary to notify more than one target of a change if they share the same items source.
	 *
	 * @param dataSource The data source in which the change happened.
	 * @param index The index in the items source from where the old item has been removed.
	 * @param oldItem the old item that has been removed from the collection.
	 */
	notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;

	/**
	 * Get reference to chart object.
	 */
	chart(): Object;

	/**
	 * Binds data to the chart
	 */
	dataBind(): void;

	/**
	 * Forces any pending deferred work to render on the chart before continuing
	 */
	flush(): void;
}
interface JQuery {
	data(propertyName: "igSparkline"): IgSparklineMethods;
}

interface JQuery {
	igSparkline(methodName: "destroy"): void;
	igSparkline(methodName: "findIndexOfItem", item: Object): number;
	igSparkline(methodName: "getDataItem", index: Object): Object;
	igSparkline(methodName: "getData"): any[];
	igSparkline(methodName: "addItem", item: Object): Object;
	igSparkline(methodName: "insertItem", item: Object, index: number): Object;
	igSparkline(methodName: "removeItem", index: number): Object;
	igSparkline(methodName: "setItem", index: number, item: Object): Object;
	igSparkline(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
	igSparkline(methodName: "notifyClearItems", dataSource: Object): Object;
	igSparkline(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
	igSparkline(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
	igSparkline(methodName: "chart"): Object;
	igSparkline(methodName: "dataBind"): void;
	igSparkline(methodName: "flush"): void;

	/**
	 * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igSparkline(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igSparkline(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets  the sparkline brush.
	 */
	igSparkline(optionLiteral: 'option', optionName: "brush"): string;

	/**
	 * Sets the sparkline brush.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "brush", optionValue: string): void;

	/**
	 * Gets  the negative brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "negativeBrush"): string;

	/**
	 * Sets the negative brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "negativeBrush", optionValue: string): void;

	/**
	 * Gets  the marker brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "markerBrush"): string;

	/**
	 * Sets the marker brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "markerBrush", optionValue: string): void;

	/**
	 * Gets  the negative marker brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "negativeMarkerBrush"): string;

	/**
	 * Sets the negative marker brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "negativeMarkerBrush", optionValue: string): void;

	/**
	 * Gets  the first marker brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "firstMarkerBrush"): string;

	/**
	 * Sets the first marker brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "firstMarkerBrush", optionValue: string): void;

	/**
	 * Gets  the last marker brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lastMarkerBrush"): string;

	/**
	 * Sets the last marker brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lastMarkerBrush", optionValue: string): void;

	/**
	 * Gets  the high marker brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "highMarkerBrush"): string;

	/**
	 * Sets the high marker brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "highMarkerBrush", optionValue: string): void;

	/**
	 * Gets  the low marker brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lowMarkerBrush"): string;

	/**
	 * Sets the low marker brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lowMarkerBrush", optionValue: string): void;

	/**
	 * Gets  the trendline brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "trendLineBrush"): string;

	/**
	 * Sets the trendline brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "trendLineBrush", optionValue: string): void;

	/**
	 * Gets  the horizontal axis line brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "horizontalAxisBrush"): string;

	/**
	 * Sets the horizontal axis line brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "horizontalAxisBrush", optionValue: string): void;

	/**
	 * Gets  the vertical axis line brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "verticalAxisBrush"): string;

	/**
	 * Sets the vertical axis line brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "verticalAxisBrush", optionValue: string): void;

	/**
	 * Gets  the normal range brush of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "normalRangeFill"): string;

	/**
	 * Sets the normal range brush of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "normalRangeFill", optionValue: string): void;

	/**
	 * Gets  the display state of the horizontal axis.
	 */

	igSparkline(optionLiteral: 'option', optionName: "horizontalAxisVisibility"): string;

	/**
	 * Sets the display state of the horizontal axis.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "horizontalAxisVisibility", optionValue: string): void;

	/**
	 * Gets  the display state of the vertical axis.
	 */

	igSparkline(optionLiteral: 'option', optionName: "verticalAxisVisibility"): string;

	/**
	 * Sets the display state of the vertical axis.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "verticalAxisVisibility", optionValue: string): void;

	/**
	 * Gets  the marker visibility of the sparkline.
	 */

	igSparkline(optionLiteral: 'option', optionName: "markerVisibility"): string;

	/**
	 * Sets the marker visibility of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "markerVisibility", optionValue: string): void;

	/**
	 * Gets  the negative marker visibility of the sparkline.
	 */

	igSparkline(optionLiteral: 'option', optionName: "negativeMarkerVisibility"): string;

	/**
	 * Sets the negative marker visibility of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "negativeMarkerVisibility", optionValue: string): void;

	/**
	 * Gets  the first marker visibility of the sparkline.
	 */

	igSparkline(optionLiteral: 'option', optionName: "firstMarkerVisibility"): string;

	/**
	 * Sets the first marker visibility of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "firstMarkerVisibility", optionValue: string): void;

	/**
	 * Gets  the last marker visibility of the sparkline.
	 */

	igSparkline(optionLiteral: 'option', optionName: "lastMarkerVisibility"): string;

	/**
	 * Sets the last marker visibility of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "lastMarkerVisibility", optionValue: string): void;

	/**
	 * Gets  the low marker visibility of the sparkline.
	 */

	igSparkline(optionLiteral: 'option', optionName: "lowMarkerVisibility"): string;

	/**
	 * Sets the low marker visibility of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "lowMarkerVisibility", optionValue: string): void;

	/**
	 * Gets  the high marker visibility of the sparkline.
	 */

	igSparkline(optionLiteral: 'option', optionName: "highMarkerVisibility"): string;

	/**
	 * Sets the high marker visibility of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "highMarkerVisibility", optionValue: string): void;

	/**
	 * Gets  the normal range visibility of the sparkline.
	 */

	igSparkline(optionLiteral: 'option', optionName: "normalRangeVisibility"): string;

	/**
	 * Sets the normal range visibility of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "normalRangeVisibility", optionValue: string): void;

	/**
	 * Gets  the position of the normal range on the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "displayNormalRangeInFront"): boolean;

	/**
	 * Sets the position of the normal range on the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "displayNormalRangeInFront", optionValue: boolean): void;

	/**
	 * Gets  the marker size of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "markerSize"): number;

	/**
	 * Sets the marker size of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "markerSize", optionValue: number): void;

	/**
	 * Gets  the first marker size of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "firstMarkerSize"): number;

	/**
	 * Sets the first marker size of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "firstMarkerSize", optionValue: number): void;

	/**
	 * Gets  the last marker size of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lastMarkerSize"): number;

	/**
	 * Sets the last marker size of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lastMarkerSize", optionValue: number): void;

	/**
	 * Gets  the high marker size of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "highMarkerSize"): number;

	/**
	 * Sets the high marker size of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "highMarkerSize", optionValue: number): void;

	/**
	 * Gets  the low marker size of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lowMarkerSize"): number;

	/**
	 * Sets the low marker size of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lowMarkerSize", optionValue: number): void;

	/**
	 * Gets  the negative marker size of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "negativeMarkerSize"): number;

	/**
	 * Sets the negative marker size of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "negativeMarkerSize", optionValue: number): void;

	/**
	 * Gets  the line thickness of the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lineThickness"): number;

	/**
	 * Sets the line thickness of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "lineThickness", optionValue: number): void;

	/**
	 * Gets  the string path to the value column.
	 */
	igSparkline(optionLiteral: 'option', optionName: "valueMemberPath"): string;

	/**
	 * Sets the string path to the value column.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "valueMemberPath", optionValue: string): void;

	/**
	 * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
	 */
	igSparkline(optionLiteral: 'option', optionName: "labelMemberPath"): string;

	/**
	 * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "labelMemberPath", optionValue: string): void;

	/**
	 * Gets  the type of trendline used by the sparkline.
	 */

	igSparkline(optionLiteral: 'option', optionName: "trendLineType"): string;

	/**
	 * Sets the type of trendline used by the sparkline.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "trendLineType", optionValue: string): void;

	/**
	 * Gets  the trendline period used by the sparkline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "trendLinePeriod"): number;

	/**
	 * Sets the trendline period used by the sparkline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "trendLinePeriod", optionValue: number): void;

	/**
	 * Gets  the thickness of the sparkline's trendline.
	 */
	igSparkline(optionLiteral: 'option', optionName: "trendLineThickness"): number;

	/**
	 * Sets the thickness of the sparkline's trendline.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "trendLineThickness", optionValue: number): void;

	/**
	 * Gets  the minimum value of the normal range.
	 */
	igSparkline(optionLiteral: 'option', optionName: "normalRangeMinimum"): number;

	/**
	 * Sets the minimum value of the normal range.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "normalRangeMinimum", optionValue: number): void;

	/**
	 * Gets  the maximum value of the normal range.
	 */
	igSparkline(optionLiteral: 'option', optionName: "normalRangeMaximum"): number;

	/**
	 * Sets the maximum value of the normal range.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "normalRangeMaximum", optionValue: number): void;

	/**
	 * Gets  the display type of the sparkline.
	 */

	igSparkline(optionLiteral: 'option', optionName: "displayType"): string;

	/**
	 * Sets the display type of the sparkline.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "displayType", optionValue: string): void;

	/**
	 * Gets  the way null values are interpreted.
	 */

	igSparkline(optionLiteral: 'option', optionName: "unknownValuePlotting"): string;

	/**
	 * Sets the way null values are interpreted.
	 *
	 * @optionValue New value to be set.
	 */

	igSparkline(optionLiteral: 'option', optionName: "unknownValuePlotting", optionValue: string): void;

	/**
	 * The value or content to display on the vertical axis.
	 * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
	 */
	igSparkline(optionLiteral: 'option', optionName: "verticalAxisLabel"): any;

	/**
	 * The value or content to display on the vertical axis.
	 * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "verticalAxisLabel", optionValue: any): void;

	/**
	 * The value or content to display on the horizontal axis.
	 * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
	 */
	igSparkline(optionLiteral: 'option', optionName: "horizontalAxisLabel"): any;

	/**
	 * The value or content to display on the horizontal axis.
	 * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "horizontalAxisLabel", optionValue: any): void;

	/**
	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
	 */
	igSparkline(optionLiteral: 'option', optionName: "formatLabel"): any;

	/**
	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "formatLabel", optionValue: any): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igSparkline(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;

	/**
	 * Gets  template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 */
	igSparkline(optionLiteral: 'option', optionName: "tooltipTemplate"): string;

	/**
	 * Sets template for tooltip associated with chart item.
	 * Example: "Value: $(ValueMemberPathInDataSource)"
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;

	/**
	 * Gets  maximum number of displayed records in chart.
	 */
	igSparkline(optionLiteral: 'option', optionName: "maxRecCount"): number;

	/**
	 * Sets maximum number of displayed records in chart.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "maxRecCount", optionValue: number): void;

	/**
	 * Gets  a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Sets a valid data source.
	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Gets  url which is used for sending JSON on request for remote data.
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets url which is used for sending JSON on request for remote data.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 */
	igSparkline(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 */
	igSparkline(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
	 *
	 * @optionValue New value to be set.
	 */
	igSparkline(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Event which is raised before data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to igSparkline.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event which is raised before data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to igSparkline.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to igSparkline.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event which is raised after data binding.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to igSparkline.
	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
	 *
	 * @optionValue Define event handler function.
	 */
	igSparkline(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 */
	igSparkline(optionLiteral: 'option', optionName: "updateTooltip"): UpdateTooltipEvent;

	/**
	 * Event which is raised before tooltip is updated.
	 * Return false in order to cancel updating and hide tooltip.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igSparkline(optionLiteral: 'option', optionName: "updateTooltip", optionValue: UpdateTooltipEvent): void;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 */
	igSparkline(optionLiteral: 'option', optionName: "hideTooltip"): HideTooltipEvent;

	/**
	 * Event which is raised before tooltip is hidden.
	 * Return false in order to cancel hiding and keep tooltip visible.
	 * Function takes first argument null and second argument ui.
	 * Use ui.owner to obtain reference to chart widget.
	 * Use ui.item to obtain reference to item.
	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
	 *
	 * @optionValue Define event handler function.
	 */
	igSparkline(optionLiteral: 'option', optionName: "hideTooltip", optionValue: HideTooltipEvent): void;
	igSparkline(options: IgSparkline): JQuery;
	igSparkline(optionLiteral: 'option', optionName: string): any;
	igSparkline(optionLiteral: 'option', options: IgSparkline): JQuery;
	igSparkline(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igSparkline(methodName: string, ...methodParams: any[]): any;
}
interface IgSplitButtonItem {
	/**
	 * Item name
	 */
	name?: string;

	/**
	 * Item display label
	 */
	label?: string;

	/**
	 * Css class to represent the iconClass of the item
	 */
	iconClass?: string;

	/**
	 * Option for IgSplitButtonItem
	 */
	[optionName: string]: any;
}

interface IgSplitButton {
	/**
	 * Button items.
	 *
	 */
	items?: IgSplitButtonItem[];

	/**
	 * Default button item name.
	 *
	 */
	defaultItemName?: string;

	/**
	 * Specifies whether the default button will be switched when another button is selected.
	 *
	 */
	swapDefaultEnabled?: boolean;

	/**
	 * Event fired when the button is clicked.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.item to get a reference the igSplitButton element.
	 */
	click?: ClickEvent;

	/**
	 * Event fired after the button is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	expanded?: ExpandedEvent;

	/**
	 * Event fired before a button item is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	expanding?: ExpandingEvent;

	/**
	 * Event fired after the button is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	collapsed?: CollapsedEvent;

	/**
	 * Event fired before a button item is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	collapsing?: CollapsingEvent;

	/**
	 * Option for igSplitButton
	 */
	[optionName: string]: any;
}
interface IgSplitButtonMethods {
	/**
	 * Switch to given igToolbar button.
	 *
	 * @param button . The button jQuery element.
	 */
	switchToButton(button: Object): void;
	widget(): void;

	/**
	 * Toggle widget state between collapsed and expanded.
	 *
	 * @param e The igSplitButton to be expanded/collapsed.
	 */
	toggle(e: Object): Object;

	/**
	 * Collapse the widget.
	 *
	 * @param e Indicates the browser event which triggered this action (not API).
	 */
	collapse(e?: Object): Object;

	/**
	 * Expands the widget.
	 *
	 * @param e Indicates the browser event which triggered this action (not API).
	 */
	expand(e?: Object): Object;

	/**
	 * Destroy the widget.
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igSplitButton"): IgSplitButtonMethods;
}

interface JQuery {
	igSplitButton(methodName: "switchToButton", button: Object): void;
	igSplitButton(methodName: "widget"): void;
	igSplitButton(methodName: "toggle", e: Object): Object;
	igSplitButton(methodName: "collapse", e?: Object): Object;
	igSplitButton(methodName: "expand", e?: Object): Object;
	igSplitButton(methodName: "destroy"): void;

	/**
	 * Button items.
	 *
	 */
	igSplitButton(optionLiteral: 'option', optionName: "items"): IgSplitButtonItem[];

	/**
	 * Button items.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "items", optionValue: IgSplitButtonItem[]): void;

	/**
	 * Default button item name.
	 *
	 */
	igSplitButton(optionLiteral: 'option', optionName: "defaultItemName"): string;

	/**
	 * Default button item name.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "defaultItemName", optionValue: string): void;

	/**
	 * Gets whether the default button will be switched when another button is selected.
	 *
	 */
	igSplitButton(optionLiteral: 'option', optionName: "swapDefaultEnabled"): boolean;

	/**
	 * Sets whether the default button will be switched when another button is selected.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "swapDefaultEnabled", optionValue: boolean): void;

	/**
	 * Event fired when the button is clicked.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.item to get a reference the igSplitButton element.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "click"): ClickEvent;

	/**
	 * Event fired when the button is clicked.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.item to get a reference the igSplitButton element.
	 *
	 * @optionValue Define event handler function.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "click", optionValue: ClickEvent): void;

	/**
	 * Event fired after the button is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "expanded"): ExpandedEvent;

	/**
	 * Event fired after the button is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "expanded", optionValue: ExpandedEvent): void;

	/**
	 * Event fired before a button item is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "expanding"): ExpandingEvent;

	/**
	 * Event fired before a button item is expanded.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "expanding", optionValue: ExpandingEvent): void;

	/**
	 * Event fired after the button is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "collapsed"): CollapsedEvent;

	/**
	 * Event fired after the button is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "collapsed", optionValue: CollapsedEvent): void;

	/**
	 * Event fired before a button item is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "collapsing"): CollapsingEvent;

	/**
	 * Event fired before a button item is collapsed.
	 *
	 *             Function takes arguments evt and ui.
	 * Use ui.owner to get a reference the igSplitButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igSplitButton(optionLiteral: 'option', optionName: "collapsing", optionValue: CollapsingEvent): void;
	igSplitButton(options: IgSplitButton): JQuery;
	igSplitButton(optionLiteral: 'option', optionName: string): any;
	igSplitButton(optionLiteral: 'option', options: IgSplitButton): JQuery;
	igSplitButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igSplitButton(methodName: string, ...methodParams: any[]): any;
}
interface IgSplitterPanel {
	/**
	 * Gets the size of the panel
	 *
	 */
	size?: string|number;

	/**
	 * Gets the minimum size that the panel can have
	 *
	 */
	min?: string|number;

	/**
	 * Gets the maximum size that the panel can have
	 *
	 */
	max?: string|number;

	/**
	 * Gets whether the panel can be resized
	 *
	 */
	resizable?: boolean;

	/**
	 * Gets whether the panel is initially collapsed
	 *
	 */
	collapsed?: boolean;

	/**
	 * Gets whether the panel can be collapsed
	 *
	 */
	collapsible?: boolean;

	/**
	 * Option for IgSplitterPanel
	 */
	[optionName: string]: any;
}

interface ResizeStartedEvent {
	(event: Event, ui: ResizeStartedEventUIParam): void;
}

interface ResizeStartedEventUIParam {
	/**
	 * Used to get a reference to the splitter instance.
	 */
	owner?: any;
}

interface ResizeEndedEvent {
	(event: Event, ui: ResizeEndedEventUIParam): void;
}

interface ResizeEndedEventUIParam {
	/**
	 * Used to get a reference to the splitter instance.
	 */
	owner?: any;
}

interface LayoutRefreshingEvent {
	(event: Event, ui: LayoutRefreshingEventUIParam): void;
}

interface LayoutRefreshingEventUIParam {
	/**
	 * Used to get a reference to the splitter instance.
	 */
	owner?: any;
}

interface LayoutRefreshedEvent {
	(event: Event, ui: LayoutRefreshedEventUIParam): void;
}

interface LayoutRefreshedEventUIParam {
	/**
	 * Used to get a reference to the splitter instance.
	 */
	owner?: any;
}

interface IgSplitter {
	/**
	 * Gets/Sets the width of the container.
	 *
	 *
	 * Valid values:
	 * "null" will stretch to fit data, if no other widths are defined.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the container.
	 *
	 *
	 * Valid values:
	 * "null" will fit the tree inside its parent container, if no other widths are defined.
	 */
	height?: string|number;

	/**
	 * Specifies the orientation of the splitter.
	 *
	 *
	 * Valid values:
	 * "vertical"
	 * "horizontal"
	 */
	orientation?: string;

	/**
	 * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
	 *
	 */
	panels?: IgSplitterPanel[];

	/**
	 * Specifies drag delta of the split bar. In order to start dragging "move", the mouse has to be moved specific distance from its original position.
	 *
	 */
	dragDelta?: number;

	/**
	 * Specifies whether the other splitters on the page will be resized as this splitter resizes.
	 *
	 */
	resizeOtherSplitters?: boolean;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired after collapsing is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *                 Use ui.index to get an index of collapsed panel.
	 */
	collapsed?: CollapsedEvent;

	/**
	 * Fired after expanding is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *                 Use ui.index to get an index of expanded panel.
	 */
	expanded?: ExpandedEvent;

	/**
	 * Fired before split bar move is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	resizeStarted?: ResizeStartedEvent;

	/**
	 * Fired while split bar move is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	resizing?: ResizingEvent;

	/**
	 * Fired after split bar move is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	resizeEnded?: ResizeEndedEvent;

	/**
	 * Fired before the panels are refreshed because of browser"s resizing.
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	layoutRefreshing?: LayoutRefreshingEvent;

	/**
	 * Fired after the panels are refreshed because of browser"s resizing.
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	layoutRefreshed?: LayoutRefreshedEvent;

	/**
	 * Option for igSplitter
	 */
	[optionName: string]: any;
}
interface IgSplitterMethods {
	/**
	 * Returns the element that represents this widget.
	 */
	widget(): Object;

	/**
	 * Expand the specified panel by index.
	 *
	 * @param index Specifies the index of the panel to expand.
	 */
	expandAt(index: Object): void;

	/**
	 * Collapse the specified panel.
	 *
	 * @param index Specifies the index of the panel to collapse.
	 */
	collapseAt(index: Object): void;

	/**
	 * Retrieves the jQuery element of the first panel.
	 */
	firstPanel(): Object;

	/**
	 * Retrieves the jQuery element of the second panel.
	 */
	secondPanel(): Object;

	/**
	 * Refresh splitter layout, use this method to re-render the splitter if some changes to the layout are applied.
	 */
	refreshLayout(): void;

	/**
	 * You can set new size of the first panel after the splitter is rendered.
	 *
	 * @param size Specifies the new size of the first panel.
	 */
	setFirstPanelSize(size: Object): void;

	/**
	 * You can set new size of the second panel after the splitter is rendered.
	 *
	 * @param size Specifies the new size of the second panel.
	 */
	setSecondPanelSize(size: Object): void;

	/**
	 * Destroys the igSplitter widget
	 */
	destroy(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igSplitter"): IgSplitterMethods;
}

interface JQuery {
	igSplitter(methodName: "widget"): Object;
	igSplitter(methodName: "expandAt", index: Object): void;
	igSplitter(methodName: "collapseAt", index: Object): void;
	igSplitter(methodName: "firstPanel"): Object;
	igSplitter(methodName: "secondPanel"): Object;
	igSplitter(methodName: "refreshLayout"): void;
	igSplitter(methodName: "setFirstPanelSize", size: Object): void;
	igSplitter(methodName: "setSecondPanelSize", size: Object): void;
	igSplitter(methodName: "destroy"): void;
	igSplitter(methodName: "changeLocale", $container: Object): void;
	igSplitter(methodName: "changeGlobalLanguage"): void;
	igSplitter(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets/Sets the width of the container.
	 *
	 */

	igSplitter(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igSplitter(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the container.
	 *
	 */

	igSplitter(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igSplitter(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets the orientation of the splitter.
	 *
	 */

	igSplitter(optionLiteral: 'option', optionName: "orientation"): string;

	/**
	 * Sets the orientation of the splitter.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igSplitter(optionLiteral: 'option', optionName: "orientation", optionValue: string): void;

	/**
	 * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
	 *
	 */
	igSplitter(optionLiteral: 'option', optionName: "panels"): IgSplitterPanel[];

	/**
	 * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "panels", optionValue: IgSplitterPanel[]): void;

	/**
	 * Gets drag delta of the split bar. In order to start dragging "move", the mouse has to be moved specific distance from its original position.
	 *
	 */
	igSplitter(optionLiteral: 'option', optionName: "dragDelta"): number;

	/**
	 * Sets drag delta of the split bar. In order to start dragging "move", the mouse has to be moved specific distance from its original position.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "dragDelta", optionValue: number): void;

	/**
	 * Gets whether the other splitters on the page will be resized as this splitter resizes.
	 *
	 */
	igSplitter(optionLiteral: 'option', optionName: "resizeOtherSplitters"): boolean;

	/**
	 * Sets whether the other splitters on the page will be resized as this splitter resizes.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "resizeOtherSplitters", optionValue: boolean): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igSplitter(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igSplitter(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igSplitter(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igSplitter(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired after collapsing is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *                 Use ui.index to get an index of collapsed panel.
	 */
	igSplitter(optionLiteral: 'option', optionName: "collapsed"): CollapsedEvent;

	/**
	 * Fired after collapsing is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *                 Use ui.index to get an index of collapsed panel.
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "collapsed", optionValue: CollapsedEvent): void;

	/**
	 * Fired after expanding is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *                 Use ui.index to get an index of expanded panel.
	 */
	igSplitter(optionLiteral: 'option', optionName: "expanded"): ExpandedEvent;

	/**
	 * Fired after expanding is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *                 Use ui.index to get an index of expanded panel.
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "expanded", optionValue: ExpandedEvent): void;

	/**
	 * Fired before split bar move is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	igSplitter(optionLiteral: 'option', optionName: "resizeStarted"): ResizeStartedEvent;

	/**
	 * Fired before split bar move is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "resizeStarted", optionValue: ResizeStartedEvent): void;

	/**
	 * Fired while split bar move is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	igSplitter(optionLiteral: 'option', optionName: "resizing"): ResizingEvent;

	/**
	 * Fired while split bar move is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "resizing", optionValue: ResizingEvent): void;

	/**
	 * Fired after split bar move is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	igSplitter(optionLiteral: 'option', optionName: "resizeEnded"): ResizeEndedEvent;

	/**
	 * Fired after split bar move is performed
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "resizeEnded", optionValue: ResizeEndedEvent): void;

	/**
	 * Fired before the panels are refreshed because of browser"s resizing.
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	igSplitter(optionLiteral: 'option', optionName: "layoutRefreshing"): LayoutRefreshingEvent;

	/**
	 * Fired before the panels are refreshed because of browser"s resizing.
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "layoutRefreshing", optionValue: LayoutRefreshingEvent): void;

	/**
	 * Fired after the panels are refreshed because of browser"s resizing.
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 */
	igSplitter(optionLiteral: 'option', optionName: "layoutRefreshed"): LayoutRefreshedEvent;

	/**
	 * Fired after the panels are refreshed because of browser"s resizing.
	 *
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get a reference to the splitter instance.
	 *
	 * @optionValue New value to be set.
	 */
	igSplitter(optionLiteral: 'option', optionName: "layoutRefreshed", optionValue: LayoutRefreshedEvent): void;
	igSplitter(options: IgSplitter): JQuery;
	igSplitter(optionLiteral: 'option', optionName: string): any;
	igSplitter(optionLiteral: 'option', options: IgSplitter): JQuery;
	igSplitter(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igSplitter(methodName: string, ...methodParams: any[]): any;
}
interface IgSpreadsheetBrushes {
	/**
	 * Option for IgSpreadsheetBrushes
	 */
	[optionName: string]: any;
}

interface ActivePaneChangedEvent {
	(event: Event, ui: ActivePaneChangedEventUIParam): void;
}

interface ActivePaneChangedEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Gets the previous active [pane](ig.spreadsheet.SpreadsheetPane).
	 */
	oldActivePane?: any;

	/**
	 * Gets the current active [pane](ig.spreadsheet.SpreadsheetPane).
	 */
	newActivePane?: any;

	/**
	 * Gets the active cell of the new active pane or null if there is no active pane.
	 */
	activeCell?: string;

	/**
	 * Gets the current visible range of the new active pane or null if there is no active pane.
	 */
	visibleRange?: string;
}

interface ActiveTableChangedEvent {
	(event: Event, ui: ActiveTableChangedEventUIParam): void;
}

interface ActiveTableChangedEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Gets the previous active [Table](ig.excel.WorksheetTable).
	 */
	oldActiveTable?: any;

	/**
	 * Gets the current active [Table](ig.excel.WorksheetTable).
	 */
	newActiveTable?: any;
}

interface ActiveWorksheetChangedEvent {
	(event: Event, ui: ActiveWorksheetChangedEventUIParam): void;
}

interface ActiveWorksheetChangedEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Gets the previous active [worksheet](ig.excel.Worksheet).
	 */
	oldActiveWorksheet?: any;

	/**
	 * Gets the name of the previous active worksheet or null if oldActiveWorksheet is null.
	 */
	oldActiveWorksheetName?: string;

	/**
	 * Gets the current active [worksheet](ig.excel.Worksheet).
	 */
	newActiveWorksheet?: any;

	/**
	 * Gets the name of the new active worksheet or null if newActiveWorksheet is null.
	 */
	newActiveWorksheetName?: string;
}

interface EditModeExitingEvent {
	(event: Event, ui: EditModeExitingEventUIParam): void;
}

interface EditModeExitingEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Get or set a boolean indicating whether the changes will be made to the cell's value when edit mode ends.
	 */
	acceptChanges?: boolean;

	/**
	 * Get a boolean indicating if the edit mode is being forced to exit edit mode in which case it cannot be cancelled.
	 */
	canCancel?: boolean;

	/**
	 * Gets the cell for which the control is exiting edit mode.
	 */
	cell?: string;

	/**
	 * Gets the edit text that will be used to update the cell(s).
	 */
	editText?: string;
}

interface EditModeExitedEvent {
	(event: Event, ui: EditModeExitedEventUIParam): void;
}

interface EditModeExitedEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Gets the cell for which the control has exited edit mode.
	 */
	cell?: string;
}

interface EditModeEnteringEvent {
	(event: Event, ui: EditModeEnteringEventUIParam): void;
}

interface EditModeEnteringEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Gets the cell for which the control is going into edit mode.
	 */
	cell?: string;
}

interface EditModeEnteredEvent {
	(event: Event, ui: EditModeEnteredEventUIParam): void;
}

interface EditModeEnteredEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Gets the cell for which the control has entered edit mode.
	 */
	cell?: string;
}

interface EditModeValidationErrorEvent {
	(event: Event, ui: EditModeValidationErrorEventUIParam): void;
}

interface EditModeValidationErrorEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Get or set the [action](ig.spreadsheet.SpreadsheetEditModeValidationErrorAction)  to take in response to the failed validation.
	 */
	action?: string;

	/**
	 * Get a boolean indicating whether the cell is allowed to stay in edit mode.
	 */
	canStayInEditMode?: boolean;

	/**
	 * Gets the cell for which the control is in edit mode.
	 */
	cell?: string;

	/**
	 * Get the [rule](ig.excel.DataValidationRule) which failed validation.
	 */
	validationRule?: string;
}

interface EditRangePasswordNeededEvent {
	(event: Event, ui: EditRangePasswordNeededEventUIParam): void;
}

interface EditRangePasswordNeededEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Get an array of [protected range](ig.excel.WorksheetProtectedRange) objects that should be unlocked.
	 */
	ranges?: any[];

	/**
	 * Get a parameterless function that may be invoked to unlock the associated ranges.
	 */
	unprotect?: any;
}

interface HyperlinkExecutingEvent {
	(event: Event, ui: HyperlinkExecutingEventUIParam): void;
}

interface HyperlinkExecutingEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Get the [hyperlink](ig.excel.WorksheetHyperlink) to be executed.
	 */
	hyperlink?: any;
}

interface IgSpreadsheetSelectionChangedEvent {
	(event: Event, ui: IgSpreadsheetSelectionChangedEventUIParam): void;
}

interface IgSpreadsheetSelectionChangedEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Get the [pane](ig.spreadsheet.SpreadsheetPane) for which the selection has changed.
	 */
	pane?: any;
}

interface UserPromptDisplayingEvent {
	(event: Event, ui: UserPromptDisplayingEventUIParam): void;
}

interface UserPromptDisplayingEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;

	/**
	 * Get a boolean indicating if the operation that triggered the prompt can be cancelled.
	 */
	canCancel?: boolean;

	/**
	 * Get a boolean indicating if a message will be displayed to the end user.
	 */
	displayMessage?: boolean;

	/**
	 * Gets the exception for the error, if there was one.
	 */
	exception?: any;

	/**
	 * Get or set the message that will be displayed.
	 */
	message?: string;

	/**
	 * Get the [action](ig.spreadsheet.SpreadsheetUserPromptTrigger) that caused the prompt to be displayed.
	 */
	trigger?: string;
}

interface WorkbookDirtiedEvent {
	(event: Event, ui: WorkbookDirtiedEventUIParam): void;
}

interface WorkbookDirtiedEventUIParam {
	/**
	 * Gets a reference to the spreadsheet widget.
	 */
	owner?: any;
}

interface IgSpreadsheet {
	/**
	 * The width of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 *
	 * Valid values:
	 * "string" The widget width can be set in pixels (px) and percentage (%).
	 * "number" The widget width can be set as a number
	 */
	width?: string|number;

	/**
	 * The height of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 *
	 * Valid values:
	 * "string" The widget height can be set in pixels (px) and percentage (%).
	 * "number" The widget height can be set as a number
	 */
	height?: string|number;

	/**
	 * Returns or sets the A1 format address of the current active cell within the selected worksheet.
	 *
	 */
	activeCell?: string;

	/**
	 * Returns or sets an object with brushes for areas of the spreadsheet. The property name should be an item in the [SpreadsheetResourceId enumeration](ig.spreadsheet.SpreadsheetResourceId) and the property value a string representing a brush. These brushes override any css styling for the associated object.
	 *
	 */
	brushes?: IgSpreadsheetBrushes;

	/**
	 * Returns or sets a boolean indicating whether the scroll lock key is toggled.
	 * This property is used when certain keys are pressed while the control has focus. For example
	 * if an arrow key is pressed while the scroll lock is enabled the cell area will be scrolled rather than changing
	 * the active cell. Note: This property is not maintained/changed by the control. It is just queried when
	 * performing actions that consider whether the scroll lock is enabled.
	 *
	 */
	isScrollLocked?: boolean;

	/**
	 * Returns or sets the Worksheet from the workbook whose content should be displayed within the control.
	 *
	 */
	activeWorksheet?: any;

	/**
	 * Returns or sets a boolean indicating whether the spreadsheet allows adding worksheets.
	 *
	 */
	allowAddWorksheet?: boolean;

	/**
	 * Returns or sets a boolean indicating whether the spreadsheet allows deleting worksheets.
	 *
	 */
	allowDeleteWorksheet?: boolean;

	/**
	 * Returns or sets a boolean indicating if the grid lines are displayed in the selected worksheets.
	 *
	 */
	areGridlinesVisible?: boolean;

	/**
	 * Returns or sets a boolean indicating if the row and column headers are displayed for the selected worksheets.
	 *
	 */
	areHeadersVisible?: boolean;

	/**
	 * Returns or sets an enumeration indicating the direction of the cell adjacent to the activeCell that should be activated when the enter key is pressed.This property is only used if the isEnterKeyNavigationEnabled is set to true. Also, the reverse direction is
	 * navigated when Shift + Enter are pressed.
	 *
	 *
	 * Valid values:
	 * "down" The cell below should be activated.
	 * "right" The cell to the right should be activated
	 * "up" The cell above should be activated.
	 * "left" The cell to the left should be activated
	 */
	enterKeyNavigationDirection?: string;

	/**
	 * Returns or sets the number of decimal places by which a whole number typed in during edit mode should be adjusted when isFixedDecimalEnabled is true
	 *
	 */
	fixedDecimalPlaceCount?: number;

	/**
	 * Returns or sets a boolean indicating whether the adjacent cell indicated by the enterKeyNavigationDirection should be navigated to when the enter key is pressed.
	 *
	 */
	isEnterKeyNavigationEnabled?: boolean;

	/**
	 * Returns or sets a boolean indicating whether a fixed decimal place is automatically added when a whole number is entered while in edit mode.
	 *
	 */
	isFixedDecimalEnabled?: boolean;

	/**
	 * Returns or sets a boolean indicating if the formula bar is displayed within the Spreadsheet.
	 *
	 */
	isFormulaBarVisible?: boolean;

	/**
	 * Returns or sets a boolean indicating whether the control is in "End mode".
	 * End mode is a mode that affects certain keyboard navigation such as navigating with the arrow keys. For example when in
	 * end mode and one presses the right arrow, the activeCell will be changed to be the first cell to the right of the current ActiveCell
	 * that has a value (even if the value is ""). If there were no cells to the right with a value then it would activate the right most cell in that row. End
	 * mode will end automatically such as when one presses an arrow key.
	 *
	 */
	isInEndMode?: boolean;

	/**
	 * Returns or sets a boolean indicating whether undo is enabled for the control.
	 *
	 */
	isUndoEnabled?: boolean;

	/**
	 * Returns or sets the width of the name box within the formula bar.
	 *
	 */
	nameBoxWidth?: number;

	/**
	 * Returns or sets a value indicating how the selection is updated when interacting with the cells via the mouse or keyboard.
	 *
	 *
	 * Valid values:
	 * "normal" The selection is replaced when dragging the mouse to select a cell or range of cells. Similarly when navigating via the keyboard a new selection is created. One may add a new range by holding the Ctrl key and using the mouse and one may alter the selection range containing the active cell by holding the Shift key down while clicking with the mouse or navigating with the keyboard such as with the arrow keys.
	 * "extendSelection" The selection range in the cellRanges representing the active cell is updated as one uses the mouse to select a cell or navigating via the keyboard.
	 * "addToSelection" New cell ranges are added to the cellRanges without needing to hold down the ctrl key when dragging via the mouse and a range is added with the first arrow key navigation after entering the mode. One can enter the mode by pressing Shift+F8.
	 */
	selectionMode?: string;

	/**
	 * Type="ig.excel.Worksheet[]" Returns or sets an array of the Worksheets whose tabs are selected.
	 *
	 */
	selectedWorksheets?: any;

	/**
	 * Returns or sets the position of the screen tip used to display the input message for the data validation rule associated with the active cell.
	 *
	 * The provided object should have numeric properties called x and y.
	 */
	validationInputMessagePosition?: any;

	/**
	 * Returns or sets the workbook whose information is displayed in the control.
	 *
	 */
	workbook?: any;

	/**
	 * Returns or sets the magnification of the selected worksheets.
	 *
	 */
	zoomLevel?: number;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Invoked when an action is executed on the Spreadsheet.
	 */
	actionExecuted?: ActionExecutedEvent;

	/**
	 * Invoked when an action is about to be executed by the Spreadsheet.
	 */
	actionExecuting?: ActionExecutingEvent;

	/**
	 * Invoked when the activeCell of the Spreadsheet has changed.
	 */
	activeCellChanged?: ActiveCellChangedEvent;

	/**
	 * Invoked when the activePane of the Spreadsheet has changed.
	 */
	activePaneChanged?: ActivePaneChangedEvent;

	/**
	 * Invoked when the activeTable of the Spreadsheet has changed.
	 */
	activeTableChanged?: ActiveTableChangedEvent;

	/**
	 * Invoked when the activeWorksheet of the Spreadsheet has changed.
	 */
	activeWorksheetChanged?: ActiveWorksheetChangedEvent;

	/**
	 * Invoked when the Spreadsheet is about to end the in-place editing of the activeCell.
	 */
	editModeExiting?: EditModeExitingEvent;

	/**
	 * Invoked when the Spreadsheet has ended the in-place editing of the activeCell.
	 */
	editModeExited?: EditModeExitedEvent;

	/**
	 * Invoked when the Spreadsheet is about to start in-place editing of the activeCell.
	 */
	editModeEntering?: EditModeEnteringEvent;

	/**
	 * Invoked when the Spreadsheet has started in-place editing of the activeCell.
	 */
	editModeEntered?: EditModeEnteredEvent;

	/**
	 * Invoked when the Spreadsheet is exiting edit mode and the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
	 * The EditModeValidationError is raised while exiting edit mode if the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
	 * Since the rule needs to evaluate the value of the cell and potentially other cell's in the Worksheet, the value is first applied to the cell(s) and then is validated. By default if the event is not handled and the
	 * showErrorMessageForInvalidValue is true, a message box will be displayed to the end user to determine what action to take. One can handle this event and specify the action that should
	 * be taken using the action.Note: The validation rule will not be evaluated if edit mode is being cancelled such as when the user presses Escape to cancel edit.Note: The action will default to AcceptChange if the ShowErrorMessageForInvalidValue of the validationRule is false; otherwise it will default to ShowPrompt.Note: Like Microsoft Excel, only the validation rule of the active cell is considered even if the update is affecting other cells in the selection.
	 */
	editModeValidationError?: EditModeValidationErrorEvent;

	/**
	 * Invoked when the Spreadsheet is performing an operation on a protected Worksheet and there is a single range that may be unlocked to allow the operation to be performed.
	 */
	editRangePasswordNeeded?: EditRangePasswordNeededEvent;

	/**
	 * Invoked when a hyperlink is being followed in the Spreadsheet.
	 */
	hyperlinkExecuting?: HyperlinkExecutingEvent;

	/**
	 * Invoked when the selection for a ig.spreadsheet.SpreadsheetPane of the Spreadsheet is changed.
	 */
	selectionChanged?: IgSpreadsheetSelectionChangedEvent;

	/**
	 * Invoked when the user will be prompted with a message regarding an operation that is being performed.
	 */
	userPromptDisplaying?: UserPromptDisplayingEvent;

	/**
	 * Invoked when a change has been made to the workbook that might require a save.
	 * Note: This event is invoked asynchronously with regards to the change(s) that
	 * have occurred. Also some changes alone are not considered to dirty the Workbook even though it
	 * does change state on the Workbook or one of its subobjects. An example of that would be a zoom
	 * type operation (e.g. changing the magnificationInNormalView).
	 */
	workbookDirtied?: WorkbookDirtiedEvent;

	/**
	 * Option for igSpreadsheet
	 */
	[optionName: string]: any;
}
interface IgSpreadsheetMethods {
	/**
	 * Returns an object that represents the pane with the focus.
	 */
	getActivePane(): Object;

	/**
	 * Returns an object that represents the pane with the focus.
	 */
	getActiveTable(): Object;

	/**
	 * Returns an object that represents the current selection of the active pane.
	 */
	getActiveSelection(): Object;

	/**
	 * Returns an object used to get the formatting of the activeCell and where modifications are applied to the entire active selection.
	 *         Any changes made to this object will affect all the objects in the selection. So for example, the
	 *         Font.Name may return "Arial" because the active cell has that as its resolved font name even though the other
	 *         cells are using a different font but if you set the Font.Name of this object to "Arial" then all the objects
	 *         affected by the selection will have their Font.Name updated to that value.
	 */
	getActiveSelectionCellRangeFormat(): Object;

	/**
	 * Returns an enumeration used to indicate the current edit mode state.
	 */
	getCellEditMode(): Object;

	/**
	 * Returns a boolean indicating if the control is currently editing the value of the activeCell.
	 */
	getIsInEditMode(): boolean;

	/**
	 * Returns a boolean indicating if the user is currently editing the name of the active worksheet.
	 */
	getIsRenamingWorksheet(): boolean;

	/**
	 * Returns an array of the panes for the activeWorksheet.
	 *
	 *     returnType="ig.spreadsheet.SpreadsheetPane[]"
	 */
	getPanes(): void;

	/**
	 * Executes the action associated with the specified id.
	 *
	 * @param action An [enumeration](ig.spreadsheet.SpreadsheetAction) or string that identifies the action to execute.
	 */
	executeAction(action: Object): boolean;

	/**
	 * Exports visual data from the spreadsheet to aid in unit testing
	 */
	exportVisualData(): void;

	/**
	 * Shows the filter dialog for the specified relative column of the [filterSettings](ig.excel.worksheet#methods:filterSettings) of the [activeWorksheet](ui.igspreadsheet#options:activeWorksheet).
	 *
	 * @param relativeColumnIndex A zero based column index relative to the [region](ig.excel.worksheetFilterSettings#methods:region) of the active worksheet.
	 * @param spreadsheetFilterDialogOption Optional enumeration that specifies the initial display of the filter dialog.
	 */
	showFilterDialogForWorksheet(relativeColumnIndex: number, spreadsheetFilterDialogOption: Object): void;

	/**
	 * Shows the filter dialog for the specified relative column of the [filterSettings](ig.excel.Worksheet#methods:filterSettings) of the [activeWorksheet](ui.igspreadsheet#options:activeWorksheet).
	 *
	 * @param worksheetTableColumn A [region](ig.excel.WorksheetTableColumn) whose filter is to be viewed or changed.
	 * @param spreadsheetFilterDialogOption Optional enumeration that specifies the initial display of the filter dialog.
	 */
	showFilterDialogForTable(worksheetTableColumn: Object, spreadsheetFilterDialogOption: Object): void;

	/**
	 * Shows the top or bottom dialog for the specified relative column of the [filterSettings](ig.excel.worksheet#methods:filterSettings) of the [activeWorksheet](ui.igspreadsheet#options:activeWorksheet).
	 *
	 * @param relativeColumnIndex A zero based column index relative to the [region](ig.excel.worksheetFilterSettings#methods:region) of the active worksheet.
	 */
	showTopOrBottomDialogForWorksheet(relativeColumnIndex: number): void;

	/**
	 * Shows the top or bottom dialog for the specified relative column of the [filterSettings](ig.excel.Worksheet#methods:filterSettings) of the [activeWorksheet](ui.igspreadsheet#options:activeWorksheet).
	 *
	 * @param worksheetTableColumn A [region](ig.excel.WorksheetTableColumn) whose filter is to be viewed or changed.
	 */
	showTopOrBottomDialogForTable(worksheetTableColumn: Object): void;

	/**
	 * Forces any pending deferred work to render on the spreadsheet before continuing
	 */
	flush(): void;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;
	changeLocale($container: Object): void;

	/**
	 * Notify the spreadsheet that style information used for rendering the spreadsheet may have been updated.
	 */
	styleUpdated(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igSpreadsheet"): IgSpreadsheetMethods;
}

interface JQuery {
	igSpreadsheet(methodName: "getActivePane"): Object;
	igSpreadsheet(methodName: "getActiveTable"): Object;
	igSpreadsheet(methodName: "getActiveSelection"): Object;
	igSpreadsheet(methodName: "getActiveSelectionCellRangeFormat"): Object;
	igSpreadsheet(methodName: "getCellEditMode"): Object;
	igSpreadsheet(methodName: "getIsInEditMode"): boolean;
	igSpreadsheet(methodName: "getIsRenamingWorksheet"): boolean;
	igSpreadsheet(methodName: "getPanes"): void;
	igSpreadsheet(methodName: "executeAction", action: Object): boolean;
	igSpreadsheet(methodName: "exportVisualData"): void;
	igSpreadsheet(methodName: "showFilterDialogForWorksheet", relativeColumnIndex: number, spreadsheetFilterDialogOption: Object): void;
	igSpreadsheet(methodName: "showFilterDialogForTable", worksheetTableColumn: Object, spreadsheetFilterDialogOption: Object): void;
	igSpreadsheet(methodName: "showTopOrBottomDialogForWorksheet", relativeColumnIndex: number): void;
	igSpreadsheet(methodName: "showTopOrBottomDialogForTable", worksheetTableColumn: Object): void;
	igSpreadsheet(methodName: "flush"): void;
	igSpreadsheet(methodName: "destroy"): void;
	igSpreadsheet(methodName: "changeLocale", $container: Object): void;
	igSpreadsheet(methodName: "styleUpdated"): void;
	igSpreadsheet(methodName: "changeGlobalLanguage"): void;
	igSpreadsheet(methodName: "changeGlobalRegional"): void;

	/**
	 * The width of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Returns  the A1 format address of the current active cell within the selected worksheet.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeCell"): string;

	/**
	 * Returns or sets the A1 format address of the current active cell within the selected worksheet.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeCell", optionValue: string): void;

	/**
	 * Returns  an object with brushes for areas of the spreadsheet. The property name should be an item in the [SpreadsheetResourceId enumeration](ig.spreadsheet.SpreadsheetResourceId) and the property value a string representing a brush. These brushes override any css styling for the associated object.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "brushes"): IgSpreadsheetBrushes;

	/**
	 * Returns or sets an object with brushes for areas of the spreadsheet. The property name should be an item in the [SpreadsheetResourceId enumeration](ig.spreadsheet.SpreadsheetResourceId) and the property value a string representing a brush. These brushes override any css styling for the associated object.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "brushes", optionValue: IgSpreadsheetBrushes): void;

	/**
	 * Returns  a boolean indicating whether the scroll lock key is toggled.
	 * This property is used when certain keys are pressed while the control has focus. For example
	 * if an arrow key is pressed while the scroll lock is enabled the cell area will be scrolled rather than changing
	 * the active cell. Note: This property is not maintained/changed by the control. It is just queried when
	 * performing actions that consider whether the scroll lock is enabled.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isScrollLocked"): boolean;

	/**
	 * Returns or sets a boolean indicating whether the scroll lock key is toggled.
	 * This property is used when certain keys are pressed while the control has focus. For example
	 * if an arrow key is pressed while the scroll lock is enabled the cell area will be scrolled rather than changing
	 * the active cell. Note: This property is not maintained/changed by the control. It is just queried when
	 * performing actions that consider whether the scroll lock is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isScrollLocked", optionValue: boolean): void;

	/**
	 * Returns  the Worksheet from the workbook whose content should be displayed within the control.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeWorksheet"): any;

	/**
	 * Returns or sets the Worksheet from the workbook whose content should be displayed within the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeWorksheet", optionValue: any): void;

	/**
	 * Returns  a boolean indicating whether the spreadsheet allows adding worksheets.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "allowAddWorksheet"): boolean;

	/**
	 * Returns or sets a boolean indicating whether the spreadsheet allows adding worksheets.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "allowAddWorksheet", optionValue: boolean): void;

	/**
	 * Returns  a boolean indicating whether the spreadsheet allows deleting worksheets.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "allowDeleteWorksheet"): boolean;

	/**
	 * Returns or sets a boolean indicating whether the spreadsheet allows deleting worksheets.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "allowDeleteWorksheet", optionValue: boolean): void;

	/**
	 * Returns  a boolean indicating if the grid lines are displayed in the selected worksheets.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "areGridlinesVisible"): boolean;

	/**
	 * Returns or sets a boolean indicating if the grid lines are displayed in the selected worksheets.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "areGridlinesVisible", optionValue: boolean): void;

	/**
	 * Returns  a boolean indicating if the row and column headers are displayed for the selected worksheets.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "areHeadersVisible"): boolean;

	/**
	 * Returns or sets a boolean indicating if the row and column headers are displayed for the selected worksheets.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "areHeadersVisible", optionValue: boolean): void;

	/**
	 * Returns  an enumeration indicating the direction of the cell adjacent to the activeCell that should be activated when the enter key is pressed.This property is only used if the isEnterKeyNavigationEnabled is set to true. Also, the reverse direction is
	 * navigated when Shift + Enter are pressed.
	 *
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "enterKeyNavigationDirection"): string;

	/**
	 * Returns or sets an enumeration indicating the direction of the cell adjacent to the activeCell that should be activated when the enter key is pressed.This property is only used if the isEnterKeyNavigationEnabled is set to true. Also, the reverse direction is
	 * navigated when Shift + Enter are pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "enterKeyNavigationDirection", optionValue: string): void;

	/**
	 * Returns  the number of decimal places by which a whole number typed in during edit mode should be adjusted when isFixedDecimalEnabled is true
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "fixedDecimalPlaceCount"): number;

	/**
	 * Returns or sets the number of decimal places by which a whole number typed in during edit mode should be adjusted when isFixedDecimalEnabled is true
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "fixedDecimalPlaceCount", optionValue: number): void;

	/**
	 * Returns  a boolean indicating whether the adjacent cell indicated by the enterKeyNavigationDirection should be navigated to when the enter key is pressed.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isEnterKeyNavigationEnabled"): boolean;

	/**
	 * Returns or sets a boolean indicating whether the adjacent cell indicated by the enterKeyNavigationDirection should be navigated to when the enter key is pressed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isEnterKeyNavigationEnabled", optionValue: boolean): void;

	/**
	 * Returns  a boolean indicating whether a fixed decimal place is automatically added when a whole number is entered while in edit mode.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isFixedDecimalEnabled"): boolean;

	/**
	 * Returns or sets a boolean indicating whether a fixed decimal place is automatically added when a whole number is entered while in edit mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isFixedDecimalEnabled", optionValue: boolean): void;

	/**
	 * Returns  a boolean indicating if the formula bar is displayed within the Spreadsheet.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isFormulaBarVisible"): boolean;

	/**
	 * Returns or sets a boolean indicating if the formula bar is displayed within the Spreadsheet.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isFormulaBarVisible", optionValue: boolean): void;

	/**
	 * Returns  a boolean indicating whether the control is in "End mode".
	 * End mode is a mode that affects certain keyboard navigation such as navigating with the arrow keys. For example when in
	 * end mode and one presses the right arrow, the activeCell will be changed to be the first cell to the right of the current ActiveCell
	 * that has a value (even if the value is ""). If there were no cells to the right with a value then it would activate the right most cell in that row. End
	 * mode will end automatically such as when one presses an arrow key.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isInEndMode"): boolean;

	/**
	 * Returns or sets a boolean indicating whether the control is in "End mode".
	 * End mode is a mode that affects certain keyboard navigation such as navigating with the arrow keys. For example when in
	 * end mode and one presses the right arrow, the activeCell will be changed to be the first cell to the right of the current ActiveCell
	 * that has a value (even if the value is ""). If there were no cells to the right with a value then it would activate the right most cell in that row. End
	 * mode will end automatically such as when one presses an arrow key.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isInEndMode", optionValue: boolean): void;

	/**
	 * Returns  a boolean indicating whether undo is enabled for the control.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isUndoEnabled"): boolean;

	/**
	 * Returns or sets a boolean indicating whether undo is enabled for the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "isUndoEnabled", optionValue: boolean): void;

	/**
	 * Returns  the width of the name box within the formula bar.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "nameBoxWidth"): number;

	/**
	 * Returns or sets the width of the name box within the formula bar.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "nameBoxWidth", optionValue: number): void;

	/**
	 * Returns  a value indicating how the selection is updated when interacting with the cells via the mouse or keyboard.
	 *
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "selectionMode"): string;

	/**
	 * Returns or sets a value indicating how the selection is updated when interacting with the cells via the mouse or keyboard.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "selectionMode", optionValue: string): void;

	/**
	 * Type="ig.excel.Worksheet[]" Returns  an array of the Worksheets whose tabs are selected.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "selectedWorksheets"): any;

	/**
	 * Type="ig.excel.Worksheet[]" Returns or sets an array of the Worksheets whose tabs are selected.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "selectedWorksheets", optionValue: any): void;

	/**
	 * Returns  the position of the screen tip used to display the input message for the data validation rule associated with the active cell.
	 *
	 * The provided object should have numeric properties called x and y.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "validationInputMessagePosition"): any;

	/**
	 * Returns or sets the position of the screen tip used to display the input message for the data validation rule associated with the active cell.
	 *
	 * The provided object should have numeric properties called x and y.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "validationInputMessagePosition", optionValue: any): void;

	/**
	 * Returns  the workbook whose information is displayed in the control.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "workbook"): any;

	/**
	 * Returns or sets the workbook whose information is displayed in the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "workbook", optionValue: any): void;

	/**
	 * Returns  the magnification of the selected worksheets.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "zoomLevel"): number;

	/**
	 * Returns or sets the magnification of the selected worksheets.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "zoomLevel", optionValue: number): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igSpreadsheet(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Invoked when an action is executed on the Spreadsheet.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "actionExecuted"): ActionExecutedEvent;

	/**
	 * Invoked when an action is executed on the Spreadsheet.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "actionExecuted", optionValue: ActionExecutedEvent): void;

	/**
	 * Invoked when an action is about to be executed by the Spreadsheet.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "actionExecuting"): ActionExecutingEvent;

	/**
	 * Invoked when an action is about to be executed by the Spreadsheet.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "actionExecuting", optionValue: ActionExecutingEvent): void;

	/**
	 * Invoked when the activeCell of the Spreadsheet has changed.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeCellChanged"): ActiveCellChangedEvent;

	/**
	 * Invoked when the activeCell of the Spreadsheet has changed.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeCellChanged", optionValue: ActiveCellChangedEvent): void;

	/**
	 * Invoked when the activePane of the Spreadsheet has changed.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activePaneChanged"): ActivePaneChangedEvent;

	/**
	 * Invoked when the activePane of the Spreadsheet has changed.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activePaneChanged", optionValue: ActivePaneChangedEvent): void;

	/**
	 * Invoked when the activeTable of the Spreadsheet has changed.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeTableChanged"): ActiveTableChangedEvent;

	/**
	 * Invoked when the activeTable of the Spreadsheet has changed.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeTableChanged", optionValue: ActiveTableChangedEvent): void;

	/**
	 * Invoked when the activeWorksheet of the Spreadsheet has changed.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeWorksheetChanged"): ActiveWorksheetChangedEvent;

	/**
	 * Invoked when the activeWorksheet of the Spreadsheet has changed.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "activeWorksheetChanged", optionValue: ActiveWorksheetChangedEvent): void;

	/**
	 * Invoked when the Spreadsheet is about to end the in-place editing of the activeCell.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeExiting"): EditModeExitingEvent;

	/**
	 * Invoked when the Spreadsheet is about to end the in-place editing of the activeCell.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeExiting", optionValue: EditModeExitingEvent): void;

	/**
	 * Invoked when the Spreadsheet has ended the in-place editing of the activeCell.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeExited"): EditModeExitedEvent;

	/**
	 * Invoked when the Spreadsheet has ended the in-place editing of the activeCell.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeExited", optionValue: EditModeExitedEvent): void;

	/**
	 * Invoked when the Spreadsheet is about to start in-place editing of the activeCell.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeEntering"): EditModeEnteringEvent;

	/**
	 * Invoked when the Spreadsheet is about to start in-place editing of the activeCell.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeEntering", optionValue: EditModeEnteringEvent): void;

	/**
	 * Invoked when the Spreadsheet has started in-place editing of the activeCell.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeEntered"): EditModeEnteredEvent;

	/**
	 * Invoked when the Spreadsheet has started in-place editing of the activeCell.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeEntered", optionValue: EditModeEnteredEvent): void;

	/**
	 * Invoked when the Spreadsheet is exiting edit mode and the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
	 * The EditModeValidationError is raised while exiting edit mode if the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
	 * Since the rule needs to evaluate the value of the cell and potentially other cell's in the Worksheet, the value is first applied to the cell(s) and then is validated. By default if the event is not handled and the
	 * showErrorMessageForInvalidValue is true, a message box will be displayed to the end user to determine what action to take. One can handle this event and specify the action that should
	 * be taken using the action.Note: The validation rule will not be evaluated if edit mode is being cancelled such as when the user presses Escape to cancel edit.Note: The action will default to AcceptChange if the ShowErrorMessageForInvalidValue of the validationRule is false; otherwise it will default to ShowPrompt.Note: Like Microsoft Excel, only the validation rule of the active cell is considered even if the update is affecting other cells in the selection.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeValidationError"): EditModeValidationErrorEvent;

	/**
	 * Invoked when the Spreadsheet is exiting edit mode and the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
	 * The EditModeValidationError is raised while exiting edit mode if the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
	 * Since the rule needs to evaluate the value of the cell and potentially other cell's in the Worksheet, the value is first applied to the cell(s) and then is validated. By default if the event is not handled and the
	 * showErrorMessageForInvalidValue is true, a message box will be displayed to the end user to determine what action to take. One can handle this event and specify the action that should
	 * be taken using the action.Note: The validation rule will not be evaluated if edit mode is being cancelled such as when the user presses Escape to cancel edit.Note: The action will default to AcceptChange if the ShowErrorMessageForInvalidValue of the validationRule is false; otherwise it will default to ShowPrompt.Note: Like Microsoft Excel, only the validation rule of the active cell is considered even if the update is affecting other cells in the selection.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editModeValidationError", optionValue: EditModeValidationErrorEvent): void;

	/**
	 * Invoked when the Spreadsheet is performing an operation on a protected Worksheet and there is a single range that may be unlocked to allow the operation to be performed.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editRangePasswordNeeded"): EditRangePasswordNeededEvent;

	/**
	 * Invoked when the Spreadsheet is performing an operation on a protected Worksheet and there is a single range that may be unlocked to allow the operation to be performed.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "editRangePasswordNeeded", optionValue: EditRangePasswordNeededEvent): void;

	/**
	 * Invoked when a hyperlink is being followed in the Spreadsheet.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "hyperlinkExecuting"): HyperlinkExecutingEvent;

	/**
	 * Invoked when a hyperlink is being followed in the Spreadsheet.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "hyperlinkExecuting", optionValue: HyperlinkExecutingEvent): void;

	/**
	 * Invoked when the selection for a ig.spreadsheet.SpreadsheetPane of the Spreadsheet is changed.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "selectionChanged"): IgSpreadsheetSelectionChangedEvent;

	/**
	 * Invoked when the selection for a ig.spreadsheet.SpreadsheetPane of the Spreadsheet is changed.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "selectionChanged", optionValue: IgSpreadsheetSelectionChangedEvent): void;

	/**
	 * Invoked when the user will be prompted with a message regarding an operation that is being performed.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "userPromptDisplaying"): UserPromptDisplayingEvent;

	/**
	 * Invoked when the user will be prompted with a message regarding an operation that is being performed.
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "userPromptDisplaying", optionValue: UserPromptDisplayingEvent): void;

	/**
	 * Invoked when a change has been made to the workbook that might require a save.
	 * Note: This event is invoked asynchronously with regards to the change(s) that
	 * have occurred. Also some changes alone are not considered to dirty the Workbook even though it
	 * does change state on the Workbook or one of its subobjects. An example of that would be a zoom
	 * type operation (e.g. changing the magnificationInNormalView).
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "workbookDirtied"): WorkbookDirtiedEvent;

	/**
	 * Invoked when a change has been made to the workbook that might require a save.
	 * Note: This event is invoked asynchronously with regards to the change(s) that
	 * have occurred. Also some changes alone are not considered to dirty the Workbook even though it
	 * does change state on the Workbook or one of its subobjects. An example of that would be a zoom
	 * type operation (e.g. changing the magnificationInNormalView).
	 *
	 * @optionValue New value to be set.
	 */
	igSpreadsheet(optionLiteral: 'option', optionName: "workbookDirtied", optionValue: WorkbookDirtiedEvent): void;
	igSpreadsheet(options: IgSpreadsheet): JQuery;
	igSpreadsheet(optionLiteral: 'option', optionName: string): any;
	igSpreadsheet(optionLiteral: 'option', options: IgSpreadsheet): JQuery;
	igSpreadsheet(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igSpreadsheet(methodName: string, ...methodParams: any[]): any;
}
interface IgTileManagerSplitterOptionsEvents {
	/**
	 * Event fired after collapsing is performed. Not cancellable.
	 *
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get a reference to the splitter instance.
	 *                     Use ui.index to get an index of collased panel.
	 */
	collapsed?: any;

	/**
	 * Event fired after expanding is performed. Not cancellable.
	 *
	 *                     Function takes arguments evt and ui.
	 *                     Use ui.owner to get a reference to the splitter instance.
	 *                     Use ui.index to get an index of expanded panel.
	 */
	expanded?: any;

	/**
	 * Option for IgTileManagerSplitterOptionsEvents
	 */
	[optionName: string]: any;
}

interface IgTileManagerSplitterOptions {
	/**
	 * Gets/Sets whether the splitter should be enabled.
	 *
	 */
	enabled?: boolean;

	/**
	 * Gets whether the splitter can be collapsible.
	 *
	 */
	collapsible?: boolean;

	/**
	 * Gets whether the splitter should be initially collapsed.
	 *
	 */
	collapsed?: boolean;

	/**
	 * Gets/Sets splitter events.
	 *
	 */
	events?: IgTileManagerSplitterOptionsEvents;

	/**
	 * Option for IgTileManagerSplitterOptions
	 */
	[optionName: string]: any;
}

interface TileRenderingEvent {
	(event: Event, ui: TileRenderingEventUIParam): void;
}

interface TileRenderingEventUIParam {
	/**
	 * Used to get a reference to the tile manager performing rendering.
	 */
	owner?: any;

	/**
	 * Used to get a reference to the tile being rendered
	 */
	tile?: any;
}

interface TileRenderedEvent {
	(event: Event, ui: TileRenderedEventUIParam): void;
}

interface TileRenderedEventUIParam {
	/**
	 * Used to get a reference to the tile manager performing rendering.
	 */
	owner?: any;

	/**
	 * Used to get a reference to the rendered tile
	 */
	tile?: any;
}

interface TileMaximizingEvent {
	(event: Event, ui: TileMaximizingEventUIParam): void;
}

interface TileMaximizingEventUIParam {
	/**
	 * Used to get a reference to the tile manager performing the maximizing the tile belongs to.
	 */
	owner?: any;

	/**
	 * Used to get the jQuery element of the tile being maximized
	 */
	tile?: any;

	/**
	 * Used to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
	 */
	minimizingTile?: any;
}

interface TileMaximizedEvent {
	(event: Event, ui: TileMaximizedEventUIParam): void;
}

interface TileMaximizedEventUIParam {
	/**
	 * Used to get a reference to the tile manager the maximized tile belongs to.
	 */
	owner?: any;

	/**
	 * Used to get the jQuery element of the maximized tile
	 */
	tile?: any;
}

interface TileMinimizingEvent {
	(event: Event, ui: TileMinimizingEventUIParam): void;
}

interface TileMinimizingEventUIParam {
	/**
	 * Used to get a reference to the tile manager performing the minimizing the tile belongs to.
	 */
	owner?: any;

	/**
	 * Used to get the jQuery element of the tile being minimized
	 */
	tile?: any;

	/**
	 * Used to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
	 */
	maximizingTile?: any;
}

interface TileMinimizedEvent {
	(event: Event, ui: TileMinimizedEventUIParam): void;
}

interface TileMinimizedEventUIParam {
	/**
	 * Used to get a reference to the tile manager the minimized tile belongs to.
	 */
	owner?: any;

	/**
	 * Used to get the jQuery element of the minimized tile
	 */
	tile?: any;
}

interface IgTileManager {
	/**
	 *
	 *
	 * Valid values:
	 * "string" The container width can be set in pixels (px) and percentage (%).
	 * "number" The container width can be set as a number in pixels.
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the container.
	 *
	 *
	 * Valid values:
	 * "string" The height width can be set in pixels (px) and percentage (%).
	 * "number" The height width can be set as a number in pixels.
	 * "null" The height width can be set as a number in pixels.
	 */
	height?: string|number;

	/**
	 * Gets/Sets the width of each column in the container.
	 *
	 *
	 * Valid values:
	 * "string" The column width can be set in pixels (px), percentage (%) or asterisk (*) which will distribute all the width between all the columns equally.
	 * "number" The column width can be set as a number representing value in pixels.
	 * "array" The column width can be set as an array, specifying width for each column. If more than one column has an asterisk value, the remaining width will be equally distributed between these columns.
	 * "null" The column width will be calculated based on the container width and the other options.
	 */
	columnWidth?: string|number|Array<any>;

	/**
	 * Gets/Sets the height of each column in the container.
	 *
	 *
	 * Valid values:
	 * "string" The column height can be set in pixels (px), percentage (%) or asterisk (*) which will distribute all the height between all the columns equally.
	 * "number" The column height can be set as a number representing value in pixels.
	 * "array" The column height can be set as an array, specifying height for each column. If more than one column has an asterisk value, the remaining height will be equally distributed between these columns.
	 * "null" The column height will be calculated based on the container height and the other options.
	 */
	columnHeight?: string|number|Array<any>;

	/**
	 * Gets/Sets the columns count in the container.
	 *
	 *
	 * Valid values:
	 * "null" The column count will be automatically calculated.
	 * "number" The column count can be set as a number.
	 */
	cols?: number;

	/**
	 * Gets/Sets the rows count in the container.
	 *
	 *
	 * Valid values:
	 * "number" The row count can be set as a number.
	 * "null" The row count will be automatically calculated.
	 */
	rows?: number;

	/**
	 * Gets/Sets the horizontal spacing between tiles.
	 *
	 *                 number  The horizontal spacing between tiles can be set as a number.
	 */
	marginLeft?: number;

	/**
	 * Gets/Sets the vertical spacing between tiles.
	 *
	 *                 number  The vertical spacing between tiles can be set as a number.
	 */
	marginTop?: number;

	/**
	 * Gets/Sets whether the items will rearrange when the container is resized.
	 *
	 */
	rearrangeItems?: boolean;

	/**
	 * Gets/Sets the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.
	 *
	 *
	 * Valid values:
	 * "array" An array with colSpan, rowSpan, colIndex, rowIndex configurations for each tile.
	 * "null" Default tile configurations of rowSpan: 1 and colSpan: 1 will be used.
	 */
	items?: Object;

	/**
	 * Specifies any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
	 *
	 */
	dataSource?: any;

	/**
	 * Gets/Sets the content of the tiles in minimized state.
	 *
	 *
	 * Valid values:
	 * "string" When initializing on html markup provide jQuery selector specifying what content of the tile to be shown in minimized state. When initializing on data source provide igTemplate that will be rendered for the minimized state.
	 * "null" The whole content of the tile will be visible in minimized state.
	 */
	minimizedState?: string;

	/**
	 * Gets/Sets the content of the tiles in maximized state.
	 *
	 *
	 * Valid values:
	 * "string" When initializing on html markup provide jQuery selector specifying which elements of the tile to be shown in maximized state. When initializing on data source provide igTemplate that will be rendered for the maximized state.
	 * "null" The whole content of the tile will be visible in maximized state.
	 */
	maximizedState?: string;

	/**
	 * Gets/Sets the index of which items configuration will be used for positioning and sizing of the maximized tile.
	 *
	 *
	 * Valid values:
	 * "number" The maximizedTileindex can be set as a number.
	 * "null" Option is ignored.
	 */
	maximizedTileIndex?: number;

	/**
	 * Gets/Sets how many columns to be displayed in the right panel when the tiles are minimized.
	 *
	 *
	 * Valid values:
	 * "number" Set the number of right panel columns as a number. The minimum value is 1.
	 * "null" Default of 1 column will be used.
	 */
	rightPanelCols?: number;

	/**
	 * Gets/Sets the width of the minimized tiles in the right panel.
	 *
	 *
	 * Valid values:
	 * "number" Set the width of the minimized tiles as a number.
	 * "null" Default value equal to the column width will be used.
	 */
	rightPanelTilesWidth?: number;

	/**
	 * Gets/Sets the height of the minimized tiles in the right panel.
	 *
	 *
	 * Valid values:
	 * "number" Set the height of the minimized tiles as a number.
	 * "null" Default value equal to the column height will be used.
	 */
	rightPanelTilesHeight?: number;

	/**
	 * Gets/Sets whether the right panel should show scrollbar when tiles are overflowing.
	 *
	 */
	showRightPanelScroll?: boolean;

	/**
	 * Configure the container variable representation, which defines splitter functionality.
	 *
	 */
	splitterOptions?: IgTileManagerSplitterOptions;

	/**
	 * Gets/Sets JQuery selector that specifies which elements will not trigger maximizing when clicked on.
	 *
	 */
	preventMaximizingSelector?: string;

	/**
	 * Gets/Sets the duration of the animations in the tile manager.
	 *
	 */
	animationDuration?: number;

	/**
	 * Specifies a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
	 *
	 */
	dataSourceUrl?: string;

	/**
	 * Property in the response which specifies where the data records array will be held (if the response is wrapped). See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey).
	 *
	 *
	 * Valid values:
	 * "string" Specifies the name of the property in which data records are held if the response is wrapped.
	 * "null" Option is ignored.
	 */
	responseDataKey?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
	 *
	 *
	 * Valid values:
	 * "string" Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
	 * "null" Option is ignored.
	 */
	responseDataType?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
	 *
	 */
	dataSourceType?: string;

	/**
	 * Specifies the HTTP request method.
	 *
	 */
	requestType?: string;

	/**
	 * Gets/Sets the HTTP content type for the response object. See [Perform an asynchronous HTTP (Ajax) request](http://api.jquery.com/jQuery.ajax/).
	 *
	 */
	responseContentType?: string;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired before databinding is performed
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing databinding.
	 *             Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) the tile manager is to be databound to.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Fired after databinding is complete
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing databinding.
	 *             Use ui.dataView to get a reference to the data the tile manager is databound to.
	 *             Use ui.success to get see if the databinding was performed correctly.
	 *             Use ui.errorMessage to get the error message if the databinding failed.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Fired before rendering of the tile manager begins.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *             Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
	 *             Use ui.items to get a reference to the item configurations the tile manager has.
	 */
	rendering?: RenderingEvent;

	/**
	 * Fired after rendering of the tile manager completes.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 */
	rendered?: RenderedEvent;

	/**
	 * Event fired before a tile is rendered in the container
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *             Use ui.tile to get a reference to the tile being rendered
	 */
	tileRendering?: TileRenderingEvent;

	/**
	 * Event Fired after a tile has been rendered in the container
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *             Use ui.tile to get a reference to the rendered tile
	 */
	tileRendered?: TileRenderedEvent;

	/**
	 * Fired before a tile in the tile manager is maximized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
	 *             Use ui.tile to get the jQuery element of the tile being maximized
	 *             Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
	 */
	tileMaximizing?: TileMaximizingEvent;

	/**
	 * Fired after a tile in the tile manager is maximized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
	 *             Use ui.tile to get the jQuery element of the maximized tile
	 */
	tileMaximized?: TileMaximizedEvent;

	/**
	 * Fired before a tile in the tile manager is minimized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
	 *             Use ui.tile to get the jQuery element of the tile being minimized
	 *             Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
	 */
	tileMinimizing?: TileMinimizingEvent;

	/**
	 * Fired after a tile in the tile manager is minimized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
	 *             Use ui.tile to get the jQuery element of the minimized tile
	 */
	tileMinimized?: TileMinimizedEvent;

	/**
	 * Option for igTileManager
	 */
	[optionName: string]: any;
}
interface IgTileManagerMethods {
	/**
	 * Maximizes a given tile.
	 *
	 * @param $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
	 * @param animDuration Specifies the animation duration for this maximizing.
	 * @param event Indicates the browser even which triggered this action (not API).
	 */
	maximize($tileToMaximize: Object, animDuration?: number, event?: Object): void;

	/**
	 * Minimizes the maximized tile. Has no effect if no maximized tile is present.
	 *
	 * @param animDuration Specifies the animation duration for this minimize.
	 * @param event Indicates the browser even which triggered this action (not API).
	 */
	minimize(animDuration?: number, event?: Object): void;

	/**
	 * Returns the maximized tile or null if such is not present.
	 * @return object|null Returns the maximized tile or null if such is not present.
	 */
	maximizedTile(): Object;

	/**
	 * Returns an array with the tiles in minimized state or null if such are not present.
	 * @return object|null Returns an array with the tiles in minimized state or null if such are not present.
	 */
	minimizedTiles(): Object;

	/**
	 * Returns the splitter associated with this tile manager or
	 *                 null if the tile manager was instantiated with maximizedTileIndex.
	 * @return object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.
	 */
	splitter(): Object;

	/**
	 * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.
	 */
	layoutManager(): Object;

	/**
	 * Reflow the tile manager. Rearranging the tiles to fit in the container
	 *
	 * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
	 * @param animationDuration The animation duration to be used for this reflow only.
	 * @param event Indicates the browser even which triggered this action (not API).
	 */
	reflow(forceReflow?: Object, animationDuration?: number, event?: Object): void;

	/**
	 * Returns the element that represents this widget.
	 */
	widget(): Object;

	/**
	 * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.
	 */
	dataBind(): void;

	/**
	 * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.
	 */
	destroy(): Object;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igTileManager"): IgTileManagerMethods;
}

interface JQuery {
	igTileManager(methodName: "maximize", $tileToMaximize: Object, animDuration?: number, event?: Object): void;
	igTileManager(methodName: "minimize", animDuration?: number, event?: Object): void;
	igTileManager(methodName: "maximizedTile"): Object;
	igTileManager(methodName: "minimizedTiles"): Object;
	igTileManager(methodName: "splitter"): Object;
	igTileManager(methodName: "layoutManager"): Object;
	igTileManager(methodName: "reflow", forceReflow?: Object, animationDuration?: number, event?: Object): void;
	igTileManager(methodName: "widget"): Object;
	igTileManager(methodName: "dataBind"): void;
	igTileManager(methodName: "destroy"): Object;
	igTileManager(methodName: "changeLocale", $container: Object): void;
	igTileManager(methodName: "changeGlobalLanguage"): void;
	igTileManager(methodName: "changeGlobalRegional"): void;

	/**
	 * *
	 */

	igTileManager(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the container.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets the width of each column in the container.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "columnWidth"): string|number|Array<any>;

	/**
	 * /Sets the width of each column in the container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "columnWidth", optionValue: string|number|Array<any>): void;

	/**
	 * Gets/Sets the height of each column in the container.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "columnHeight"): string|number|Array<any>;

	/**
	 * /Sets the height of each column in the container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "columnHeight", optionValue: string|number|Array<any>): void;

	/**
	 * Gets/Sets the columns count in the container.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "cols"): number;

	/**
	 * /Sets the columns count in the container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "cols", optionValue: number): void;

	/**
	 * Gets/Sets the rows count in the container.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "rows"): number;

	/**
	 * /Sets the rows count in the container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "rows", optionValue: number): void;

	/**
	 * Gets/Sets the horizontal spacing between tiles.
	 *
	 *                 number  The horizontal spacing between tiles can be set as a number.
	 */
	igTileManager(optionLiteral: 'option', optionName: "marginLeft"): number;

	/**
	 * /Sets the horizontal spacing between tiles.
	 *
	 *                 number  The horizontal spacing between tiles can be set as a number.
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "marginLeft", optionValue: number): void;

	/**
	 * Gets/Sets the vertical spacing between tiles.
	 *
	 *                 number  The vertical spacing between tiles can be set as a number.
	 */
	igTileManager(optionLiteral: 'option', optionName: "marginTop"): number;

	/**
	 * /Sets the vertical spacing between tiles.
	 *
	 *                 number  The vertical spacing between tiles can be set as a number.
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "marginTop", optionValue: number): void;

	/**
	 * Gets/Sets whether the items will rearrange when the container is resized.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "rearrangeItems"): boolean;

	/**
	 * /Sets whether the items will rearrange when the container is resized.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "rearrangeItems", optionValue: boolean): void;

	/**
	 * Gets/Sets the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "items"): Object;

	/**
	 * /Sets the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "items", optionValue: Object): void;

	/**
	 * Gets any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * Sets any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets/Sets the content of the tiles in minimized state.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "minimizedState"): string;

	/**
	 * /Sets the content of the tiles in minimized state.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "minimizedState", optionValue: string): void;

	/**
	 * Gets/Sets the content of the tiles in maximized state.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "maximizedState"): string;

	/**
	 * /Sets the content of the tiles in maximized state.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "maximizedState", optionValue: string): void;

	/**
	 * Gets/Sets the index of which items configuration will be used for positioning and sizing of the maximized tile.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "maximizedTileIndex"): number;

	/**
	 * /Sets the index of which items configuration will be used for positioning and sizing of the maximized tile.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "maximizedTileIndex", optionValue: number): void;

	/**
	 * Gets/Sets how many columns to be displayed in the right panel when the tiles are minimized.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "rightPanelCols"): number;

	/**
	 * /Sets how many columns to be displayed in the right panel when the tiles are minimized.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "rightPanelCols", optionValue: number): void;

	/**
	 * Gets/Sets the width of the minimized tiles in the right panel.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "rightPanelTilesWidth"): number;

	/**
	 * /Sets the width of the minimized tiles in the right panel.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "rightPanelTilesWidth", optionValue: number): void;

	/**
	 * Gets/Sets the height of the minimized tiles in the right panel.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "rightPanelTilesHeight"): number;

	/**
	 * /Sets the height of the minimized tiles in the right panel.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "rightPanelTilesHeight", optionValue: number): void;

	/**
	 * Gets/Sets whether the right panel should show scrollbar when tiles are overflowing.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "showRightPanelScroll"): boolean;

	/**
	 * /Sets whether the right panel should show scrollbar when tiles are overflowing.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "showRightPanelScroll", optionValue: boolean): void;

	/**
	 * Configure the container variable representation, which defines splitter functionality.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "splitterOptions"): IgTileManagerSplitterOptions;

	/**
	 * Configure the container variable representation, which defines splitter functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "splitterOptions", optionValue: IgTileManagerSplitterOptions): void;

	/**
	 * Gets/Sets JQuery selector that specifies which elements will not trigger maximizing when clicked on.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "preventMaximizingSelector"): string;

	/**
	 * /Sets JQuery selector that specifies which elements will not trigger maximizing when clicked on.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "preventMaximizingSelector", optionValue: string): void;

	/**
	 * Gets/Sets the duration of the animations in the tile manager.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "animationDuration"): number;

	/**
	 * /Sets the duration of the animations in the tile manager.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;

	/**
	 * Gets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * Property in the response which specifies where the data records array will be held (if the response is wrapped). See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey).
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * Property in the response which specifies where the data records array will be held (if the response is wrapped). See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "responseDataType"): string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "responseDataType", optionValue: string): void;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Gets the HTTP request method.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "requestType"): string;

	/**
	 * Sets the HTTP request method.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;

	/**
	 * Gets/Sets the HTTP content type for the response object. See [Perform an asynchronous HTTP (Ajax) request](http://api.jquery.com/jQuery.ajax/).
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "responseContentType"): string;

	/**
	 * /Sets the HTTP content type for the response object. See [Perform an asynchronous HTTP (Ajax) request](http://api.jquery.com/jQuery.ajax/).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igTileManager(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igTileManager(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTileManager(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired before databinding is performed
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing databinding.
	 *             Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) the tile manager is to be databound to.
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Fired before databinding is performed
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing databinding.
	 *             Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) the tile manager is to be databound to.
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Fired after databinding is complete
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing databinding.
	 *             Use ui.dataView to get a reference to the data the tile manager is databound to.
	 *             Use ui.success to get see if the databinding was performed correctly.
	 *             Use ui.errorMessage to get the error message if the databinding failed.
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Fired after databinding is complete
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing databinding.
	 *             Use ui.dataView to get a reference to the data the tile manager is databound to.
	 *             Use ui.success to get see if the databinding was performed correctly.
	 *             Use ui.errorMessage to get the error message if the databinding failed.
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Fired before rendering of the tile manager begins.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *             Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
	 *             Use ui.items to get a reference to the item configurations the tile manager has.
	 */
	igTileManager(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Fired before rendering of the tile manager begins.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *             Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
	 *             Use ui.items to get a reference to the item configurations the tile manager has.
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Fired after rendering of the tile manager completes.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 */
	igTileManager(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Fired after rendering of the tile manager completes.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Event fired before a tile is rendered in the container
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *             Use ui.tile to get a reference to the tile being rendered
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileRendering"): TileRenderingEvent;

	/**
	 * Event fired before a tile is rendered in the container
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *             Use ui.tile to get a reference to the tile being rendered
	 *
	 * @optionValue Define event handler function.
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileRendering", optionValue: TileRenderingEvent): void;

	/**
	 * Event Fired after a tile has been rendered in the container
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *             Use ui.tile to get a reference to the rendered tile
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileRendered"): TileRenderedEvent;

	/**
	 * Event Fired after a tile has been rendered in the container
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing rendering.
	 *             Use ui.tile to get a reference to the rendered tile
	 *
	 * @optionValue Define event handler function.
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileRendered", optionValue: TileRenderedEvent): void;

	/**
	 * Fired before a tile in the tile manager is maximized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
	 *             Use ui.tile to get the jQuery element of the tile being maximized
	 *             Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileMaximizing"): TileMaximizingEvent;

	/**
	 * Fired before a tile in the tile manager is maximized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
	 *             Use ui.tile to get the jQuery element of the tile being maximized
	 *             Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileMaximizing", optionValue: TileMaximizingEvent): void;

	/**
	 * Fired after a tile in the tile manager is maximized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
	 *             Use ui.tile to get the jQuery element of the maximized tile
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileMaximized"): TileMaximizedEvent;

	/**
	 * Fired after a tile in the tile manager is maximized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
	 *             Use ui.tile to get the jQuery element of the maximized tile
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileMaximized", optionValue: TileMaximizedEvent): void;

	/**
	 * Fired before a tile in the tile manager is minimized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
	 *             Use ui.tile to get the jQuery element of the tile being minimized
	 *             Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileMinimizing"): TileMinimizingEvent;

	/**
	 * Fired before a tile in the tile manager is minimized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
	 *             Use ui.tile to get the jQuery element of the tile being minimized
	 *             Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileMinimizing", optionValue: TileMinimizingEvent): void;

	/**
	 * Fired after a tile in the tile manager is minimized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
	 *             Use ui.tile to get the jQuery element of the minimized tile
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileMinimized"): TileMinimizedEvent;

	/**
	 * Fired after a tile in the tile manager is minimized.
	 *
	 *             Function takes arguments evt and ui.
	 *             Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
	 *             Use ui.tile to get the jQuery element of the minimized tile
	 *
	 * @optionValue New value to be set.
	 */
	igTileManager(optionLiteral: 'option', optionName: "tileMinimized", optionValue: TileMinimizedEvent): void;
	igTileManager(options: IgTileManager): JQuery;
	igTileManager(optionLiteral: 'option', optionName: string): any;
	igTileManager(optionLiteral: 'option', options: IgTileManager): JQuery;
	igTileManager(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTileManager(methodName: string, ...methodParams: any[]): any;
}
interface IgToolbarLocale {
	/**
	 * Gets/Sets collapse button title.
	 *
	 */
	collapseButtonTitle?: any;

	/**
	 * Gets/Sets expand button title.
	 *
	 */
	expandButtonTitle?: any;

	/**
	 * Option for IgToolbarLocale
	 */
	[optionName: string]: any;
}

interface ToolbarButtonClickEvent {
	(event: Event, ui: ToolbarButtonClickEventUIParam): void;
}

interface ToolbarButtonClickEventUIParam {}

interface ToolbarComboOpeningEvent {
	(event: Event, ui: ToolbarComboOpeningEventUIParam): void;
}

interface ToolbarComboOpeningEventUIParam {}

interface ToolbarComboSelectedEvent {
	(event: Event, ui: ToolbarComboSelectedEventUIParam): void;
}

interface ToolbarComboSelectedEventUIParam {}

interface ToolbarCustomItemClickEvent {
	(event: Event, ui: ToolbarCustomItemClickEventUIParam): void;
}

interface ToolbarCustomItemClickEventUIParam {}

interface ItemRemovedEvent {
	(event: Event, ui: ItemRemovedEventUIParam): void;
}

interface ItemRemovedEventUIParam {}

interface ItemAddedEvent {
	(event: Event, ui: ItemAddedEventUIParam): void;
}

interface ItemAddedEventUIParam {}

interface ItemDisableEvent {
	(event: Event, ui: ItemDisableEventUIParam): void;
}

interface ItemDisableEventUIParam {}

interface ItemEnabledEvent {
	(event: Event, ui: ItemEnabledEventUIParam): void;
}

interface ItemEnabledEventUIParam {}

interface WindowResizedEvent {
	(event: Event, ui: WindowResizedEventUIParam): void;
}

interface WindowResizedEventUIParam {}

interface IgToolbar {
	/**
	 * Set/Get the widget height.
	 *
	 */
	height?: any;

	/**
	 * Set/Get the widget width.
	 *
	 */
	width?: any;

	/**
	 * Get/Set whether the toolbar can be collapsed.
	 *
	 */
	allowCollapsing?: boolean;

	/**
	 * The css class that will be applied to collapseButtonIcon.
	 *
	 */
	collapseButtonIcon?: string;

	/**
	 * The css class that will be applied to the expand/collapse button icon.
	 *
	 */
	expandButtonIcon?: string;

	/**
	 * Formal name of the widget.
	 *
	 */
	name?: string;

	/**
	 * Display Name of the widget.
	 *
	 */
	displayName?: string;

	/**
	 * Get/Set Toolbar's items.
	 *
	 */
	items?: any[];

	/**
	 * Get/Set whether the widget is expanded initially.
	 *
	 */
	isExpanded?: boolean;
	locale?: IgToolbarLocale;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired after a click on any toolbar button
	 */
	toolbarButtonClick?: ToolbarButtonClickEvent;

	/**
	 * Event is fired before the toolbar is opened.
	 */
	toolbarComboOpening?: ToolbarComboOpeningEvent;

	/**
	 * Event fired after toolbar combo is selected
	 */
	toolbarComboSelected?: ToolbarComboSelectedEvent;

	/**
	 * Event fired after a click on custom item
	 */
	toolbarCustomItemClick?: ToolbarCustomItemClickEvent;

	/**
	 * Event fired after item is removed
	 */
	itemRemoved?: ItemRemovedEvent;

	/**
	 * Event fired after item is added
	 */
	itemAdded?: ItemAddedEvent;

	/**
	 * Event is fired before item is collapsed.
	 */
	collapsing?: CollapsingEvent;

	/**
	 * Event fired after item is collapsed
	 */
	collapsed?: CollapsedEvent;

	/**
	 * Event fired before item is expanded
	 */
	expanding?: ExpandingEvent;

	/**
	 * Event fired after item is expanded
	 */
	expanded?: ExpandedEvent;

	/**
	 * Fired after item is dissabled
	 */
	itemDisable?: ItemDisableEvent;

	/**
	 * Fired after item is enabled
	 */
	itemEnabled?: ItemEnabledEvent;

	/**
	 * Fired after the window is resized
	 */
	windowResized?: WindowResizedEvent;

	/**
	 * Option for igToolbar
	 */
	[optionName: string]: any;
}
interface IgToolbarMethods {
	/**
	 * Returns the element on which the widget was instantiated
	 */
	widget(): void;
	changeLocale(): void;

	/**
	 * Gets the item by matching the provided index.
	 *
	 * @param index The index of the item.
	 */
	getItem(index: Object): Object;

	/**
	 * Add item to widget item array
	 *
	 * @param item The item to be added.
	 */
	addItem(item: Object): void;

	/**
	 * Remove the item matching provided index.
	 *
	 * @param index The index of the item.
	 */
	removeItem(index: Object): Object;

	/**
	 * Disable item matching provided index.
	 *
	 * @param index The index of the item.
	 * @param disabled The disabled property value.
	 */
	disableItem(index: Object, disabled: Object): void;

	/**
	 * Activate item matching provided index.
	 *
	 * @param index The index of the item.
	 * @param activated The activate property value.
	 */
	activateItem(index: Object, activated: Object): void;

	/**
	 * Deactivate all buttons.
	 */
	deactivateAll(): void;

	/**
	 * Destroy the widget.
	 */
	destroy(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igToolbar"): IgToolbarMethods;
}

interface JQuery {
	igToolbar(methodName: "widget"): void;
	igToolbar(methodName: "changeLocale"): void;
	igToolbar(methodName: "getItem", index: Object): Object;
	igToolbar(methodName: "addItem", item: Object): void;
	igToolbar(methodName: "removeItem", index: Object): Object;
	igToolbar(methodName: "disableItem", index: Object, disabled: Object): void;
	igToolbar(methodName: "activateItem", index: Object, activated: Object): void;
	igToolbar(methodName: "deactivateAll"): void;
	igToolbar(methodName: "destroy"): void;
	igToolbar(methodName: "changeGlobalLanguage"): void;
	igToolbar(methodName: "changeGlobalRegional"): void;

	/**
	 * Set/Get the widget height.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "height"): any;

	/**
	 * Set/Get the widget height.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "height", optionValue: any): void;

	/**
	 * Set/Get the widget width.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "width"): any;

	/**
	 * Set/Get the widget width.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "width", optionValue: any): void;

	/**
	 * Get/Set whether the toolbar can be collapsed.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "allowCollapsing"): boolean;

	/**
	 * Get/Set whether the toolbar can be collapsed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "allowCollapsing", optionValue: boolean): void;

	/**
	 * The css class that will be applied to collapseButtonIcon.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "collapseButtonIcon"): string;

	/**
	 * The css class that will be applied to collapseButtonIcon.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "collapseButtonIcon", optionValue: string): void;

	/**
	 * The css class that will be applied to the expand/collapse button icon.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "expandButtonIcon"): string;

	/**
	 * The css class that will be applied to the expand/collapse button icon.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "expandButtonIcon", optionValue: string): void;

	/**
	 * Formal name of the widget.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "name"): string;

	/**
	 * Formal name of the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "name", optionValue: string): void;

	/**
	 * Display Name of the widget.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "displayName"): string;

	/**
	 * Display Name of the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "displayName", optionValue: string): void;

	/**
	 * Get/Set Toolbar's items.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "items"): any[];

	/**
	 * Get/Set Toolbar's items.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "items", optionValue: any[]): void;

	/**
	 * Get/Set whether the widget is expanded initially.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "isExpanded"): boolean;

	/**
	 * Get/Set whether the widget is expanded initially.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "isExpanded", optionValue: boolean): void;
	igToolbar(optionLiteral: 'option', optionName: "locale"): IgToolbarLocale;
	igToolbar(optionLiteral: 'option', optionName: "locale", optionValue: IgToolbarLocale): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igToolbar(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igToolbar(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igToolbar(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired after a click on any toolbar button
	 */
	igToolbar(optionLiteral: 'option', optionName: "toolbarButtonClick"): ToolbarButtonClickEvent;

	/**
	 * Event fired after a click on any toolbar button
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "toolbarButtonClick", optionValue: ToolbarButtonClickEvent): void;

	/**
	 * Event is fired before the toolbar is opened.
	 */
	igToolbar(optionLiteral: 'option', optionName: "toolbarComboOpening"): ToolbarComboOpeningEvent;

	/**
	 * Event is fired before the toolbar is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "toolbarComboOpening", optionValue: ToolbarComboOpeningEvent): void;

	/**
	 * Event fired after toolbar combo is selected
	 */
	igToolbar(optionLiteral: 'option', optionName: "toolbarComboSelected"): ToolbarComboSelectedEvent;

	/**
	 * Event fired after toolbar combo is selected
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "toolbarComboSelected", optionValue: ToolbarComboSelectedEvent): void;

	/**
	 * Event fired after a click on custom item
	 */
	igToolbar(optionLiteral: 'option', optionName: "toolbarCustomItemClick"): ToolbarCustomItemClickEvent;

	/**
	 * Event fired after a click on custom item
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "toolbarCustomItemClick", optionValue: ToolbarCustomItemClickEvent): void;

	/**
	 * Event fired after item is removed
	 */
	igToolbar(optionLiteral: 'option', optionName: "itemRemoved"): ItemRemovedEvent;

	/**
	 * Event fired after item is removed
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "itemRemoved", optionValue: ItemRemovedEvent): void;

	/**
	 * Event fired after item is added
	 */
	igToolbar(optionLiteral: 'option', optionName: "itemAdded"): ItemAddedEvent;

	/**
	 * Event fired after item is added
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "itemAdded", optionValue: ItemAddedEvent): void;

	/**
	 * Event is fired before item is collapsed.
	 */
	igToolbar(optionLiteral: 'option', optionName: "collapsing"): CollapsingEvent;

	/**
	 * Event is fired before item is collapsed.
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "collapsing", optionValue: CollapsingEvent): void;

	/**
	 * Event fired after item is collapsed
	 */
	igToolbar(optionLiteral: 'option', optionName: "collapsed"): CollapsedEvent;

	/**
	 * Event fired after item is collapsed
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "collapsed", optionValue: CollapsedEvent): void;

	/**
	 * Event fired before item is expanded
	 */
	igToolbar(optionLiteral: 'option', optionName: "expanding"): ExpandingEvent;

	/**
	 * Event fired before item is expanded
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "expanding", optionValue: ExpandingEvent): void;

	/**
	 * Event fired after item is expanded
	 */
	igToolbar(optionLiteral: 'option', optionName: "expanded"): ExpandedEvent;

	/**
	 * Event fired after item is expanded
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbar(optionLiteral: 'option', optionName: "expanded", optionValue: ExpandedEvent): void;

	/**
	 * Fired after item is dissabled
	 */
	igToolbar(optionLiteral: 'option', optionName: "itemDisable"): ItemDisableEvent;

	/**
	 * Fired after item is dissabled
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "itemDisable", optionValue: ItemDisableEvent): void;

	/**
	 * Fired after item is enabled
	 */
	igToolbar(optionLiteral: 'option', optionName: "itemEnabled"): ItemEnabledEvent;

	/**
	 * Fired after item is enabled
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "itemEnabled", optionValue: ItemEnabledEvent): void;

	/**
	 * Fired after the window is resized
	 */
	igToolbar(optionLiteral: 'option', optionName: "windowResized"): WindowResizedEvent;

	/**
	 * Fired after the window is resized
	 *
	 * @optionValue New value to be set.
	 */
	igToolbar(optionLiteral: 'option', optionName: "windowResized", optionValue: WindowResizedEvent): void;
	igToolbar(options: IgToolbar): JQuery;
	igToolbar(optionLiteral: 'option', optionName: string): any;
	igToolbar(optionLiteral: 'option', options: IgToolbar): JQuery;
	igToolbar(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igToolbar(methodName: string, ...methodParams: any[]): any;
}
interface ActivatingEvent {
	(event: Event, ui: ActivatingEventUIParam): void;
}

interface ActivatingEventUIParam {
	/**
	 * Used to get reference to this igToolbarButton.
	 */
	owner?: any;
}

interface ActivatedEvent {
	(event: Event, ui: ActivatedEventUIParam): void;
}

interface ActivatedEventUIParam {
	/**
	 * Used to get reference to this igToolbarButton.
	 */
	owner?: any;
}

interface DeactivatingEvent {
	(event: Event, ui: DeactivatingEventUIParam): void;
}

interface DeactivatingEventUIParam {
	/**
	 * Used to get reference to this igToolbarButton.
	 */
	owner?: any;
}

interface DeactivatedEvent {
	(event: Event, ui: DeactivatedEventUIParam): void;
}

interface DeactivatedEventUIParam {
	/**
	 * Used to get reference to this igToolbarButton.
	 */
	owner?: any;
}

interface IgToolbarButton {
	/**
	 * Enable/Disable the "Toggling" of a button.
	 *
	 */
	allowToggling?: boolean;

	/**
	 * Get/Set whether the toolbar button is selected.
	 *
	 */
	isSelected?: boolean;

	/**
	 * Event fired before the toolbar button is activated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 */
	activating?: ActivatingEvent;

	/**
	 * Event fired after the toolbar button is activated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 */
	activated?: ActivatedEvent;

	/**
	 * Event fired before the toolbar button is deactivated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 */
	deactivating?: DeactivatingEvent;

	/**
	 * Event fired after the toolbar button is deactivated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 */
	deactivated?: DeactivatedEvent;

	/**
	 * Option for igToolbarButton
	 */
	[optionName: string]: any;
}
interface IgToolbarButtonMethods {
	/**
	 * Toggle toolbar button
	 */
	toggle(): void;

	/**
	 * Activate toolbar button
	 *
	 * @param event
	 */
	activate(event: Object): void;

	/**
	 * Deactivate toolbar button
	 *
	 * @param event
	 */
	deactivate(event: Object): void;

	/**
	 * Returns the element that represents this widget.
	 */
	widget(): Object;

	/**
	 * Destroy the widget.
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igToolbarButton"): IgToolbarButtonMethods;
}

interface JQuery {
	igToolbarButton(methodName: "toggle"): void;
	igToolbarButton(methodName: "activate", event: Object): void;
	igToolbarButton(methodName: "deactivate", event: Object): void;
	igToolbarButton(methodName: "widget"): Object;
	igToolbarButton(methodName: "destroy"): void;

	/**
	 * Gets the "Toggling" of a button.
	 *
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "allowToggling"): boolean;

	/**
	 * Enable/Disable the "Toggling" of a button.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "allowToggling", optionValue: boolean): void;

	/**
	 * Get/Set whether the toolbar button is selected.
	 *
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "isSelected"): boolean;

	/**
	 * Get/Set whether the toolbar button is selected.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "isSelected", optionValue: boolean): void;

	/**
	 * Event fired before the toolbar button is activated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "activating"): ActivatingEvent;

	/**
	 * Event fired before the toolbar button is activated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "activating", optionValue: ActivatingEvent): void;

	/**
	 * Event fired after the toolbar button is activated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "activated"): ActivatedEvent;

	/**
	 * Event fired after the toolbar button is activated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "activated", optionValue: ActivatedEvent): void;

	/**
	 * Event fired before the toolbar button is deactivated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "deactivating"): DeactivatingEvent;

	/**
	 * Event fired before the toolbar button is deactivated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "deactivating", optionValue: DeactivatingEvent): void;

	/**
	 * Event fired after the toolbar button is deactivated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "deactivated"): DeactivatedEvent;

	/**
	 * Event fired after the toolbar button is deactivated.
	 *                 Function takes arguments evt and ui.
	 *                 Use ui.owner to get reference to this igToolbarButton.
	 *
	 * @optionValue Define event handler function.
	 */
	igToolbarButton(optionLiteral: 'option', optionName: "deactivated", optionValue: DeactivatedEvent): void;
	igToolbarButton(options: IgToolbarButton): JQuery;
	igToolbarButton(optionLiteral: 'option', optionName: string): any;
	igToolbarButton(optionLiteral: 'option', options: IgToolbarButton): JQuery;
	igToolbarButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igToolbarButton(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeBindingsBindings {
	/**
	 * Option for IgTreeBindingsBindings
	 */
	[optionName: string]: any;
}

interface IgTreeBindings {
	/**
	 * Gets the name of the data source property the value of which would be the node text.
	 *
	 */
	textKey?: string;

	/**
	 * Gets the XPath to the text attribute/node. Used in client-only binding directly to XML.
	 *
	 */
	textXPath?: string;

	/**
	 * Gets the name of the data source property the value of which would be the node value.
	 *
	 */
	valueKey?: string;

	/**
	 * Gets the XPath to the value attribute/node. Used in client-only binding directly to XML.
	 *
	 */
	valueXPath?: string;

	/**
	 * Gets the name of the data source property the value of which would be used as a URL for the node image.
	 *
	 */
	imageUrlKey?: string;

	/**
	 * Gets the XPath to the image URL attribute/node. Used in client-only binding directly to XML.
	 *
	 */
	imageUrlXPath?: string;

	/**
	 * Gets the name of the data source property the value of which would be used as an href attribute for the node anchor.
	 *
	 */
	navigateUrlKey?: string;

	/**
	 * Gets the XPath to the navigate URL attribute/node. Used in client-only binding directly to XML.
	 *
	 */
	navigateUrlXPath?: string;

	/**
	 * Gets the name of the data source property the value of which would be used as a target
	 * attribute for the node anchor.
	 *
	 */
	targetKey?: string;

	/**
	 * Gets the name of the data source property the value of which would hold the node`s
	 * expanded state. The expanded state is represented by a boolean.
	 *
	 */
	expandedKey?: string;

	/**
	 * Gets the name of the data source property the value of which would hold the node's
	 * check state. The check state itself is represented by a string enumeration with the
	 * checked|partially checked|unchecked states being respectively "on|partial|off".
	 *
	 */
	checkedKey?: string;

	/**
	 * Gets the name of the data source property the value of which is the primary key attribute
	 * for the data. This property is used when load on demand is enabled and if specified the node paths
	 * would be generated using primary keys instead of indices.
	 *
	 */
	primaryKey?: string;

	/**
	 * Gets the node content template for the current layer of bindings. The igTree utilizes igTemplating
	 * for generating node content templates. A good example of how to setup templating can be found here http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/06/17/how-to-use-templates-to-style-the-different-nodes-of-the-ignite-ui-tree-control.aspx
	 *
	 */
	nodeContentTemplate?: string;

	/**
	 * Gets the name of the data source property that holds the child data of the current layer node.
	 *
	 */
	childDataProperty?: string;

	/**
	 * Gets the XPath to the child data node. Used in client-only binding directly to XML.
	 *
	 */
	childDataXPath?: string;

	/**
	 * Gets the XPath to the root data node. Used in client-only binding directly to XML.
	 *
	 */
	searchFieldXPath?: string;

	/**
	 * Gets the next layer of bindings in a recursive fashion.
	 *
	 */
	bindings?: IgTreeBindingsBindings;

	/**
	 * Option for IgTreeBindings
	 */
	[optionName: string]: any;
}

interface IgTreeDragAndDropSettings {
	/**
	 * Gets whether the widget will accept drag and drop from other controls.
	 *
	 */
	allowDrop?: boolean;

	/**
	 * Gets the drag and drop mode.
	 *
	 *
	 * Valid values:
	 * "default" Performs "copy" when holding the Ctrl key, otherwise "move" is performed.
	 * "copy" Makes a copy of the dragged node at the drop location.
	 * "move" Moves the dragged node at the drop location.
	 */
	dragAndDropMode?: string;

	/**
	 * Gets the opacity of the drag helper: 0 is fully transparent while 1 is fully opaque.
	 *
	 */
	dragOpacity?: number;

	/**
	 * Gets whether the helper would revert to its original position upon an invalid drop.
	 *
	 */
	revert?: boolean;

	/**
	 * Gets the duration of the revert animation.
	 *
	 */
	revertDuration?: number;

	/**
	 * Gets the z-index that would be set for the drag helper.
	 *
	 */
	zIndex?: number;

	/**
	 * Gets the delay between mousedown and the start of the actual drag. Smaller values make the nodes
	 * more sensitive to drag and may interfere with selection.
	 *
	 */
	dragStartDelay?: number;

	/**
	 * Gets whether when dragging over a collapsed node with children will trigger the node to expand.
	 *
	 */
	expandOnDragOver?: boolean;

	/**
	 * Gets the delay after hovering a parent node before expanding that node during drag when [expandOnDragOver](ui.igtree#options:dragAndDropSettings.expandOnDragOver) is set to true.
	 *
	 */
	expandDelay?: number;

	/**
	 * Gets the type of helper to be rendered for the drag operation.
	 *
	 *
	 * Valid values:
	 * "function" A function that will return a DOMElement to use while dragging.
	 * "default" would render the default igTree helper.
	 */
	helper?: Function|string;

	/**
	 * Gets the method for custom drop point validation. Returning true from this function would render the drop point valid, while false would make it invalid. The function has one parameter which is the current drop point and the context (this) of the function is the drag element.
	 *
	 *
	 * Valid values:
	 * "function" A function that will be used for validating drop points.
	 * "null" Only built-in validation is applied.
	 */
	customDropValidation?: Function;

	/**
	 * Gets the containment for the drag helper. The area inside of which thehelper is contained would be scrollable while dragging.
	 *
	 *
	 * Valid values:
	 * "boolean" If set to false, then the draggable elements will be contained in their window.
	 * "selector" The draggable element will be contained to the bounding box of the first element found by the selector. If no element is found, no containment will be set.
	 * "element" The draggable element will be contained to the bounding box of this element.
	 * "string" Possible values: "parent", "document", "window".
	 * "array" An array defining a bounding box in the form [ x1, y1, x2, y2 ].
	 */
	containment?: boolean|string|Object|Array<any>;

	/**
	 * Gets the HTML markup for the invalid helper.
	 *
	 */
	invalidMoveToMarkup?: string;

	/**
	 * Gets the HTML markup for the "move to" helper.
	 *
	 */
	moveToMarkup?: string;

	/**
	 * Gets the HTML markup for the "move between" helper.
	 *
	 */
	moveBetweenMarkup?: string;

	/**
	 * Gets the HTML markup for the "move after" helper.
	 *
	 */
	moveAfterMarkup?: string;

	/**
	 * Gets the HTML markup for the "move before" helper.
	 *
	 */
	moveBeforeMarkup?: string;

	/**
	 * Gets the HTML markup for the "copy to" helper.
	 *
	 */
	copyToMarkup?: string;

	/**
	 * Gets the HTML markup for the "copy between" helper.
	 *
	 */
	copyBetweenMarkup?: string;

	/**
	 * Gets the HTML markup for the "copy after" helper.
	 *
	 */
	copyAfterMarkup?: string;

	/**
	 * Gets the HTML markup for the "copy before" helper.
	 *
	 */
	copyBeforeMarkup?: string;

	/**
	 * Option for IgTreeDragAndDropSettings
	 */
	[optionName: string]: any;
}

interface IgTreeSelectionChangedEvent {
	(event: Event, ui: IgTreeSelectionChangedEventUIParam): void;
}

interface IgTreeSelectionChangedEventUIParam {
	/**
	 * Gets a reference to the tree.
	 */
	owner?: any;

	/**
	 * Gets a reference to currently selected nodes.
	 */
	selectedNodes?: any[];

	/**
	 * Gets a reference to the newly added nodes to the selection.
	 */
	newNodes?: any[];
}

interface NodeCheckstateChangingEvent {
	(event: Event, ui: NodeCheckstateChangingEventUIParam): void;
}

interface NodeCheckstateChangingEventUIParam {
	/**
	 * Gets a reference to the tree.
	 */
	owner?: any;

	/**
	 * Gets a reference to the node object the checkbox of which is being interacted with.
	 */
	node?: any;

	/**
	 * Gets the current state of the checkbox.
	 */
	currentState?: string;

	/**
	 * Gets the new state that is going to be applied to the checkbox.
	 */
	newState?: string;

	/**
	 * Gets the collection of all checked nodes before the new state is applied.
	 */
	currentCheckedNodes?: any[];
}

interface NodeCheckstateChangedEvent {
	(event: Event, ui: NodeCheckstateChangedEventUIParam): void;
}

interface NodeCheckstateChangedEventUIParam {
	/**
	 * Gets a reference to the tree.
	 */
	owner?: any;

	/**
	 * Gets a reference to the node object the checkbox of which is being interacted with.
	 */
	node?: any;

	/**
	 * Gets the new state that is already applied to the checkbox.
	 */
	newState?: string;

	/**
	 * Gets the collection of all checked nodes.
	 */
	newCheckedNodes?: any[];

	/**
	 * Gets the collection of all partially checked nodes.
	 */
	newPartiallyCheckedNodes?: any[];
}

interface NodePopulatingEvent {
	(event: Event, ui: NodePopulatingEventUIParam): void;
}

interface NodePopulatingEventUIParam {
	/**
	 * Gets the data-path attribute of the node being populated.
	 */
	path?: string;

	/**
	 * Gets a reference to the jQuery element of the node whose children are being populated.
	 */
	element?: string;

	/**
	 * Gets the node data.
	 */
	data?: any;

	/**
	 * Gets a reference to the bindings object for the level at which the populating node is located.
	 */
	binding?: any;
}

interface NodePopulatedEvent {
	(event: Event, ui: NodePopulatedEventUIParam): void;
}

interface NodePopulatedEventUIParam {
	/**
	 * Gets the data-path atrribute of the populated node.
	 */
	path?: string;

	/**
	 * Gets a reference to the jQuery element of the node whose children are populated.
	 */
	element?: string;

	/**
	 * Gets the node data.
	 */
	data?: any;

	/**
	 * Gets a reference to the bindings object for the level at which the populated node is located.
	 */
	binding?: any;
}

interface NodeCollapsingEvent {
	(event: Event, ui: NodeCollapsingEventUIParam): void;
}

interface NodeCollapsingEventUIParam {
	/**
	 * Gets a reference to the tree.
	 */
	owner?: any;

	/**
	 * Gets a reference to the node object about to collapse.
	 */
	node?: any;
}

interface NodeCollapsedEvent {
	(event: Event, ui: NodeCollapsedEventUIParam): void;
}

interface NodeCollapsedEventUIParam {
	/**
	 * Gets a reference to the tree.
	 */
	owner?: any;

	/**
	 * Gets a reference to the collapsed node object.
	 */
	node?: any;
}

interface NodeExpandingEvent {
	(event: Event, ui: NodeExpandingEventUIParam): void;
}

interface NodeExpandingEventUIParam {
	/**
	 * Gets a reference to the tree.
	 */
	owner?: any;

	/**
	 * Gets a reference to the node object about to expand.
	 */
	node?: any;
}

interface NodeExpandedEvent {
	(event: Event, ui: NodeExpandedEventUIParam): void;
}

interface NodeExpandedEventUIParam {
	/**
	 * Gets a reference to the tree.
	 */
	owner?: any;

	/**
	 * Gets a reference to the expanded node object.
	 */
	node?: any;
}

interface NodeClickEvent {
	(event: Event, ui: NodeClickEventUIParam): void;
}

interface NodeClickEventUIParam {
	/**
	 * Gets a reference to the tree.
	 */
	owner?: any;

	/**
	 * Gets a reference to the node object being clicked.
	 */
	node?: any;
}

interface NodeDoubleClickEvent {
	(event: Event, ui: NodeDoubleClickEventUIParam): void;
}

interface NodeDoubleClickEventUIParam {
	/**
	 * Gets the data-path attribute of the double clicked node.
	 */
	path?: string;

	/**
	 * Gets a reference to the jQuery element of the double clicked node.
	 */
	element?: string;

	/**
	 * Gets the node data.
	 */
	data?: any;

	/**
	 * Gets a reference to the bindings object for the level at which the double clicked node is located.
	 */
	binding?: any;
}

interface NodeDroppingEvent {
	(event: Event, ui: NodeDroppingEventUIParam): void;
}

interface NodeDroppingEventUIParam {
	/**
	 * Gets the target node data-path attribute.
	 */
	path?: string;

	/**
	 * Gets a reference to the jQuery element of the node.
	 */
	element?: string;

	/**
	 * Gets a reference to the target node data.
	 */
	data?: any;

	/**
	 * Gets a reference to the binding object for the level at which the target node is located.
	 */
	binding?: any;

	/**
	 * Gets a reference to the helper.
	 */
	helper?: string;

	/**
	 * Gets a reference to the offset.
	 */
	offset?: any;

	/**
	 * Gets a reference to the current position of the draggable element.
	 */
	position?: any;

	/**
	 * Gets a reference to the draggable element (the node).
	 */
	draggable?: string;
}

interface NodeDroppedEvent {
	(event: Event, ui: NodeDroppedEventUIParam): void;
}

interface NodeDroppedEventUIParam {
	/**
	 * Gets the target node data-path attribute.
	 */
	path?: string;

	/**
	 * Gets a reference to the jQuery element of the node.
	 */
	element?: string;

	/**
	 * Gets a reference to the target node data.
	 */
	data?: any;

	/**
	 * Gets a reference to the binding object for the level at which the target node is located.
	 */
	binding?: any;

	/**
	 * Gets a reference to the helper.
	 */
	helper?: string;

	/**
	 * Gets a reference to the offset.
	 */
	offset?: any;

	/**
	 * Gets a reference to the current position of the draggable element.
	 */
	position?: any;

	/**
	 * Gets a reference to the draggable element (the node).
	 */
	draggable?: string;
}

interface IgTree {
	/**
	 * Gets/Sets the width of the control container.
	 *
	 *
	 * Valid values:
	 * "string" The widget width can be set in pixels (px) and percentage (%).
	 * "number" The widget width can be set as a number in pixels.
	 * "null" No width will be applied to the container and it will be rendered by default for the browser rendering engine.
	 */
	width?: string|number;

	/**
	 * Gets/Sets how the height of of the control container.
	 *
	 *
	 * Valid values:
	 * "string" The widget height can be set in pixels (px) and percentage (%).
	 * "number" The widget height can be set as a number in pixels.
	 * "null" No height will be applied to the container and it will be rendered default for the browser rendering engine.
	 */
	height?: string|number;

	/**
	 * Gets the behavior and type of the checkboxes rendered for the tree nodes. Can be set only at initialization.
	 *
	 *
	 * Valid values:
	 * "off" Checkboxes are turned off and are not rendered for the tree.
	 * "biState" Checkboxes are rendered and support two states (checked and unchecked). Checkboxes do not cascade down or up in this mode.
	 * "triState" Checkboxes are rendered and support three states (checked, partial and unchecked). Checkboxes cascade up and down in this mode.
	 */
	checkboxMode?: string;

	/**
	 * Gets/Sets one or more branches to be expanded at a time. If set to true then only one branch at each level of the tree can be expanded at a time. Otherwise multiple branches can be expanded at a time.
	 *
	 */
	singleBranchExpand?: boolean;

	/**
	 * Gets/Sets whether nodes are hoverable. Setting this option to false would make the tree to not apply hover styles on the nodes when they are hovered.
	 *
	 */
	hotTracking?: boolean;

	/**
	 * Gets/Sets the image url applied to all parent nodes.
	 *
	 *
	 * Valid values:
	 * "string" Image with the specified URL will be rendered for each node that has children (If you define both parentNodeImageUrl and parentNodeImageClass the parentNodeImageUrl would take priority).
	 * "null" Option is ignored
	 */
	parentNodeImageUrl?: string;

	/**
	 * Gets/Sets the CSS class applied to all parent nodes.
	 *
	 *
	 * Valid values:
	 * "string" Specified class with a CSS sprite that would be rendered for each node that has children (If you define both parentNodeImageUrl and parentNodeImageClass the parentNodeImageUrl would take priority).
	 * "null" Option is ignored
	 */
	parentNodeImageClass?: string;

	/**
	 * Gets/Sets the tooltip applied to all parent node images.
	 *
	 *
	 * Valid values:
	 * "string" Specified a tooltip that would be rendered for each node that has children.
	 * "null" Option is ignored
	 */
	parentNodeImageTooltip?: string;

	/**
	 * Gets/Sets the image url applied to all leaf nodes.
	 *
	 *
	 * Valid values:
	 * "string" Image with the specified URL will be rendered for each node that has no children (If you define both leafNodeImageUrl and leafNodeImageClass the leafNodeImageUrl would take priority).
	 * "null" Option is ignored
	 */
	leafNodeImageUrl?: string;

	/**
	 * Gets/Sets the CSS class applied to all leaf nodes.
	 *
	 *
	 * Valid values:
	 * "string" Specified class with a CSS sprite that would be rendered for each node that has no children (If you define both leafNodeImageUrl and leafNodeImageClass the leafNodeImageUrl would take priority).
	 * "null" Option is ignored
	 */
	leafNodeImageClass?: string;

	/**
	 * Gets/Sets the tooltip applied to all leaf node images.
	 *
	 *
	 * Valid values:
	 * "string" Specified a tooltip that would be rendered for each node that has no children.
	 * "null" Option is ignored
	 */
	leafNodeImageTooltip?: string;

	/**
	 * Gets/Sets the duration of each animation such as the expand/collapse.
	 *
	 */
	animationDuration?: number;

	/**
	 * Gets the node data-path attribute separator character.
	 *
	 */
	pathSeparator?: string;

	/**
	 * Gets/Sets the igTree data source. Accepts any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
	 * Once the data source is initialized, this option becomes an instance of the $.ig.HierarchicalDataSource.
	 *
	 */
	dataSource?: any;

	/**
	 * Gets/Sets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
	 *
	 *
	 * Valid values:
	 * "string" Specifies the remote url.
	 * "null" Option is ignored.
	 */
	dataSourceUrl?: string;

	/**
	 * Gets the type of the data source. Delegates the value to [$.ig.DataSource.settings.type](ig.datasource#options:settings.type). Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource.settings.type.
	 *
	 *
	 * Valid values:
	 * "string" Specifies the data source type implicitly.
	 * "null" Type is inferred.
	 */
	dataSourceType?: string;

	/**
	 * Gets the JSON key at which a remote data source will write the data. Delegates the value to [$.ig.DataSource.settings.responseDataKey](ig.datasource#options:settings.responseDataKey). Please refer to the documentation of $.ig.DataSource.settings.responseDataKey.
	 *
	 *
	 * Valid values:
	 * "string" Specifies the name of the property in which data records are held if the response is wrapped.
	 * "null" Option is ignored.
	 */
	responseDataKey?: string;

	/**
	 * Gets the data type of the remote data source response. Delegates the value to [$.ig.DataSource.settings.responseDataType](ig.datasource#options:settings.responseDataType). Please refer to the documentation of $.ig.DataSource.settings.responseDataType.
	 *
	 *
	 * Valid values:
	 * "string" Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType.
	 * "null" Type is inferred.
	 */
	responseDataType?: string;

	/**
	 * Gets the HTTP verb used for remote requests. Specifies the HTTP verb to be used to issue the requests to the [dataSourceUrl](ui.igtree#options:dataSourceUrl).
	 *
	 */
	requestType?: string;

	/**
	 * Gets the type of the content in a remote data source response. Content type of the response from the [dataSourceUrl](ui.igtree#options:dataSourceUrl). See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	responseContentType?: string;

	/**
	 * Gets the initial depth the igTree is going to be expanded to upon initial render.
	 *
	 */
	initialExpandDepth?: number;

	/**
	 * Gets whether all the data would be bound initially or each child collection would be bound upon expand.
	 *
	 */
	loadOnDemand?: boolean;

	/**
	 * Gets the data binding properties and keys. The igTree uses these to extract the corresponding data from the dataSource.
	 *
	 */
	bindings?: IgTreeBindings;

	/**
	 * Gets the default target attribute value for the node anchors.
	 *
	 */
	defaultNodeTarget?: string;

	/**
	 * Gets/Sets whether drag and drop functionality is enabled.
	 *
	 */
	dragAndDrop?: boolean;

	/**
	 * Gets the URL to which updating requests will be made.
	 *
	 */
	updateUrl?: string;

	/**
	 * Gets/Sets specific settings for the drag and drop functionality.
	 *
	 */
	dragAndDropSettings?: IgTreeDragAndDropSettings;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Fired before databinding is performed.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Fired after databinding is finished.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Fired before rendering of the tree begins.
	 */
	rendering?: RenderingEvent;

	/**
	 * Fired after rendering of the tree has finished.
	 */
	rendered?: RenderedEvent;

	/**
	 * Fired before a new node is selected.
	 */
	selectionChanging?: SelectionChangingEvent;

	/**
	 * Fired after a new node is selected.
	 */
	selectionChanged?: IgTreeSelectionChangedEvent;

	/**
	 * Fired before the checkbox state of a node is changed.
	 */
	nodeCheckstateChanging?: NodeCheckstateChangingEvent;

	/**
	 * Fired after the checkstate of a node is changed.
	 */
	nodeCheckstateChanged?: NodeCheckstateChangedEvent;

	/**
	 * Fired before the children of a node are populated in the case of load on demand.
	 */
	nodePopulating?: NodePopulatingEvent;

	/**
	 * Fired after the children of a node are populated in the case of load on demand.
	 */
	nodePopulated?: NodePopulatedEvent;

	/**
	 * Fired before a node is collapsed.
	 */
	nodeCollapsing?: NodeCollapsingEvent;

	/**
	 * Fired after a node is collapsed.
	 */
	nodeCollapsed?: NodeCollapsedEvent;

	/**
	 * Fired before a node is expanded.
	 */
	nodeExpanding?: NodeExpandingEvent;

	/**
	 * Fired after a node is expanded.
	 */
	nodeExpanded?: NodeExpandedEvent;

	/**
	 * Fired on node click.
	 */
	nodeClick?: NodeClickEvent;

	/**
	 * Fired on node double click.
	 */
	nodeDoubleClick?: NodeDoubleClickEvent;

	/**
	 * Fired on node drag start.
	 */
	dragStart?: DragStartEvent;

	/**
	 * Fired on node drag.
	 */
	drag?: DragEvent;

	/**
	 * Fired after a drag operation has completed.
	 */
	dragStop?: DragStopEvent;

	/**
	 * Fired before a node is dropped.
	 */
	nodeDropping?: NodeDroppingEvent;

	/**
	 * Fired after a node is dropped.
	 */
	nodeDropped?: NodeDroppedEvent;

	/**
	 * Option for igTree
	 */
	[optionName: string]: any;
}
interface IgTreeMethods {
	changeLocale(): void;

	/**
	 * Performs databinding on the igTree.
	 */
	dataBind(): void;

	/**
	 * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.
	 *
	 * @param node Specifies the node element the checkbox of which would be toggled.
	 * @param event Indicates the browser event which triggered this action, if this is not an API call.
	 */
	toggleCheckstate(node: Object, event?: Object): void;

	/**
	 * Applies a checked state to a node.
	 *
	 * @param nodeObj Specifies the node element to apply the state to.
	 * @param cascadeDir
	 */
	checkNode(nodeObj: Object, cascadeDir: Object): void;

	/**
	 * Applies an unchecked state to a node.
	 *
	 * @param nodeObj Specifies the node element to apply the state to.
	 * @param cascadeDir
	 */
	uncheckNode(nodeObj: Object, cascadeDir: Object): void;

	/**
	 * Applies a partially checked state to a node.
	 *
	 * @param nodeObj Specifies the node element to apply the state to.
	 * @param cascadeDir
	 */
	partiallyCheckNode(nodeObj: Object, cascadeDir: Object): void;

	/**
	 * Toggles the collapse/expand state for the specified node.
	 *
	 * @param node Specifies the node element the checkbox of which would be toggled.
	 * @param event Indicates the browser event which triggered this action, if this is not an API call.
	 */
	toggle(node: Object, event?: Object): void;

	/**
	 * Expands the tree down to the specified node and selects the node if specified.
	 *
	 * @param node Specifies the node element down to which the tree would be expanded.
	 * @param toSelect Specifies the whether to select the node after expanding to it.
	 */
	expandToNode(node: Object, toSelect?: boolean): void;

	/**
	 * Expands the specified node.
	 *
	 * @param node Specifies the node element to expand.
	 * @param event The original browser event that triggered the expand.
	 */
	expand(node: string, event?: Object): void;

	/**
	 * Collapses the specified node.
	 *
	 * @param node Specifies the node element to collapse.
	 * @param event The original browser event that triggered the collapse.
	 */
	collapse(node: string, event?: Object): void;

	/**
	 * Retrieves the parent node element of the specified node element.
	 *
	 * @param node Specifies the jQuery selected node element to collapse.
	 */
	parentNode(node: Object): Object;

	/**
	 * Retrieves the jQuery element of the node with the specified path.
	 *
	 * @param nodePath Specifies the path to the required node.
	 */
	nodeByPath(nodePath: string): Object;

	/**
	 * Retrieves the jQuery element of the node with the specified value.
	 *
	 * @param value Specifies the value of the required node.
	 */
	nodesByValue(value: string): Object;

	/**
	 * Retrieves all the node objects for the nodes that have their checkboxes checked.
	 */
	checkedNodes(): any[];

	/**
	 * Retrieves all the node objects for the nodes that have their checkboxes unchecked.
	 */
	uncheckedNodes(): any[];

	/**
	 * Retrieves all the node objects for the nodes that have their checkboxes partially checked.
	 */
	partiallyCheckedNodes(): any[];

	/**
	 * Selects a node.
	 *
	 * @param node Specifies the node element to be selected.
	 * @param event Indicates the browser event which triggered this action, if this is not an API call.
	 */
	select(node: Object, event?: Object): void;

	/**
	 * Deselects the specified node.
	 *
	 * @param node Specifies the node element to be deselected.
	 */
	deselect(node: Object): void;

	/**
	 * Deselects all the selected nodes.
	 */
	clearSelection(): void;

	/**
	 * Retrieves the node object for the selected node.
	 */
	selectedNode(): Object;

	/**
	 * Retrieves all node objects with the specified text (case sensitive).
	 *
	 * @param text The text to search for.
	 * @param parent The node element to start the search from. If not specified then search would start from the root of the tree.
	 */
	findNodesByText(text: string, parent?: Object): any[];

	/**
	 * Retrieves all node objects for the immediate children of the specified parent with the specified text (case sensitive).
	 *
	 * @param text The text to search for.
	 * @param parent The node element the children of which would be searched.
	 */
	findImmediateNodesByText(text: string, parent?: Object): any[];

	/**
	 * Retrieves the n-th jQuery node element child of the specified parent.
	 *
	 * @param index Specifies the index the node at which to be retrieved.
	 * @param parent The parent node element to start the search from.
	 */
	nodeByIndex(index: number, parent?: Object): Object;

	/**
	 * Retrieves a node object for the specified node element.
	 *
	 * @param element Specifies the node jQuery element.
	 */
	nodeFromElement(element: string): Object;

	/**
	 * Retrieves a node object collection of the immediate children of the provided node element.
	 *
	 * @param parent Specifies the node element.
	 */
	children(parent: Object): any[];

	/**
	 * Retrieves a node object collection of the immediate children of the node with the provided path.
	 *
	 * @param path Specifies the path of the node the children of which are to be retrieved.
	 */
	childrenByPath(path: string): any[];

	/**
	 * Returns true if the provided node element is selected and false otherwise.
	 *
	 * @param node Specifies the node element.
	 */
	isSelected(node: Object): boolean;

	/**
	 * Returns true if the provided node element is expanded and false otherwise.
	 *
	 * @param node Specifies the node element.
	 */
	isExpanded(node: Object): boolean;

	/**
	 * Returns true if the provided node element has its checkbox checkstate checked and false otherwise.
	 *
	 * @param node Specifies the node element.
	 */
	isChecked(node: Object): boolean;

	/**
	 * Returns the specified node checkstate.
	 *
	 * @param node Specifies the node element.
	 */
	checkState(node: Object): string;

	/**
	 * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node, at a specified index.
	 *
	 * @param node Specifies the data used to create the new nodeс.
	 * @param parent Specifies the element of the parent node the nodes are to be appended to.
	 * @param nodeIndex Specifies the index at which the nodes to be inserted.
	 */
	addNode(node: Object, parent?: Object, nodeIndex?: number): void;

	/**
	 * Removes the node with with the specified path and all of its children.
	 *
	 * @param path Specifies the path of the node to be removed.
	 */
	removeAt(path: string): void;

	/**
	 * Removing all the nodes with the specified value.
	 *
	 * @param value Specifies the value of the nodes to be removed.
	 */
	removeNodesByValue(value: string): void;

	/**
	 * Performs a UI update on the provided node element with the provided data.
	 *
	 * @param element Specifies the node to be updated.
	 * @param data Specifies the new data item the node would update according to.
	 */
	applyChangesToNode(element: Object, data: Object): void;

	/**
	 * Returns the transaction log stack.
	 */
	transactionLog(): any[];

	/**
	 * Returns the data for the node with specified path.
	 *
	 * @param path Specifies the node path for which the data is returned.
	 */
	nodeDataFor(path: string): Object;

	/**
	 * Destructor for the igTree widget.
	 */
	destroy(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igTree"): IgTreeMethods;
}

interface JQuery {
	igTree(methodName: "changeLocale"): void;
	igTree(methodName: "dataBind"): void;
	igTree(methodName: "toggleCheckstate", node: Object, event?: Object): void;
	igTree(methodName: "checkNode", nodeObj: Object, cascadeDir: Object): void;
	igTree(methodName: "uncheckNode", nodeObj: Object, cascadeDir: Object): void;
	igTree(methodName: "partiallyCheckNode", nodeObj: Object, cascadeDir: Object): void;
	igTree(methodName: "toggle", node: Object, event?: Object): void;
	igTree(methodName: "expandToNode", node: Object, toSelect?: boolean): void;
	igTree(methodName: "expand", node: string, event?: Object): void;
	igTree(methodName: "collapse", node: string, event?: Object): void;
	igTree(methodName: "parentNode", node: Object): Object;
	igTree(methodName: "nodeByPath", nodePath: string): Object;
	igTree(methodName: "nodesByValue", value: string): Object;
	igTree(methodName: "checkedNodes"): any[];
	igTree(methodName: "uncheckedNodes"): any[];
	igTree(methodName: "partiallyCheckedNodes"): any[];
	igTree(methodName: "select", node: Object, event?: Object): void;
	igTree(methodName: "deselect", node: Object): void;
	igTree(methodName: "clearSelection"): void;
	igTree(methodName: "selectedNode"): Object;
	igTree(methodName: "findNodesByText", text: string, parent?: Object): any[];
	igTree(methodName: "findImmediateNodesByText", text: string, parent?: Object): any[];
	igTree(methodName: "nodeByIndex", index: number, parent?: Object): Object;
	igTree(methodName: "nodeFromElement", element: string): Object;
	igTree(methodName: "children", parent: Object): any[];
	igTree(methodName: "childrenByPath", path: string): any[];
	igTree(methodName: "isSelected", node: Object): boolean;
	igTree(methodName: "isExpanded", node: Object): boolean;
	igTree(methodName: "isChecked", node: Object): boolean;
	igTree(methodName: "checkState", node: Object): string;
	igTree(methodName: "addNode", node: Object, parent?: Object, nodeIndex?: number): void;
	igTree(methodName: "removeAt", path: string): void;
	igTree(methodName: "removeNodesByValue", value: string): void;
	igTree(methodName: "applyChangesToNode", element: Object, data: Object): void;
	igTree(methodName: "transactionLog"): any[];
	igTree(methodName: "nodeDataFor", path: string): Object;
	igTree(methodName: "destroy"): void;
	igTree(methodName: "changeGlobalLanguage"): void;
	igTree(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets/Sets the width of the control container.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets how the height of of the control container.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets how the height of of the control container.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets the behavior and type of the checkboxes rendered for the tree nodes. Can be set only at initialization.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "checkboxMode"): string;

	/**
	 * The behavior and type of the checkboxes rendered for the tree nodes. Can be set only at initialization.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "checkboxMode", optionValue: string): void;

	/**
	 * Gets/Sets one or more branches to be expanded at a time. If set to true then only one branch at each level of the tree can be expanded at a time. Otherwise multiple branches can be expanded at a time.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "singleBranchExpand"): boolean;

	/**
	 * /Sets one or more branches to be expanded at a time. If set to true then only one branch at each level of the tree can be expanded at a time. Otherwise multiple branches can be expanded at a time.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "singleBranchExpand", optionValue: boolean): void;

	/**
	 * Gets/Sets whether nodes are hoverable. Setting this option to false would make the tree to not apply hover styles on the nodes when they are hovered.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "hotTracking"): boolean;

	/**
	 * /Sets whether nodes are hoverable. Setting this option to false would make the tree to not apply hover styles on the nodes when they are hovered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "hotTracking", optionValue: boolean): void;

	/**
	 * Gets/Sets the image url applied to all parent nodes.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "parentNodeImageUrl"): string;

	/**
	 * /Sets the image url applied to all parent nodes.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "parentNodeImageUrl", optionValue: string): void;

	/**
	 * Gets/Sets the CSS class applied to all parent nodes.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "parentNodeImageClass"): string;

	/**
	 * /Sets the CSS class applied to all parent nodes.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "parentNodeImageClass", optionValue: string): void;

	/**
	 * Gets/Sets the tooltip applied to all parent node images.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "parentNodeImageTooltip"): string;

	/**
	 * /Sets the tooltip applied to all parent node images.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "parentNodeImageTooltip", optionValue: string): void;

	/**
	 * Gets/Sets the image url applied to all leaf nodes.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "leafNodeImageUrl"): string;

	/**
	 * /Sets the image url applied to all leaf nodes.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "leafNodeImageUrl", optionValue: string): void;

	/**
	 * Gets/Sets the CSS class applied to all leaf nodes.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "leafNodeImageClass"): string;

	/**
	 * /Sets the CSS class applied to all leaf nodes.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "leafNodeImageClass", optionValue: string): void;

	/**
	 * Gets/Sets the tooltip applied to all leaf node images.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "leafNodeImageTooltip"): string;

	/**
	 * /Sets the tooltip applied to all leaf node images.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "leafNodeImageTooltip", optionValue: string): void;

	/**
	 * Gets/Sets the duration of each animation such as the expand/collapse.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "animationDuration"): number;

	/**
	 * /Sets the duration of each animation such as the expand/collapse.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;

	/**
	 * Gets the node data-path attribute separator character.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "pathSeparator"): string;

	/**
	 * The node data-path attribute separator character.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "pathSeparator", optionValue: string): void;

	/**
	 * Gets/Sets the igTree data source. Accepts any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
	 * Once the data source is initialized, this option becomes an instance of the $.ig.HierarchicalDataSource.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "dataSource"): any;

	/**
	 * /Sets the igTree data source. Accepts any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
	 * Once the data source is initialized, this option becomes an instance of the $.ig.HierarchicalDataSource.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;

	/**
	 * Gets/Sets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * /Sets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * Gets the type of the data source. Delegates the value to [$.ig.DataSource.settings.type](ig.datasource#options:settings.type). Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource.settings.type.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * The type of the data source. Delegates the value to [$.ig.DataSource.settings.type](ig.datasource#options:settings.type). Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource.settings.type.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * Gets the JSON key at which a remote data source will write the data. Delegates the value to [$.ig.DataSource.settings.responseDataKey](ig.datasource#options:settings.responseDataKey). Please refer to the documentation of $.ig.DataSource.settings.responseDataKey.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * The JSON key at which a remote data source will write the data. Delegates the value to [$.ig.DataSource.settings.responseDataKey](ig.datasource#options:settings.responseDataKey). Please refer to the documentation of $.ig.DataSource.settings.responseDataKey.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * Gets the data type of the remote data source response. Delegates the value to [$.ig.DataSource.settings.responseDataType](ig.datasource#options:settings.responseDataType). Please refer to the documentation of $.ig.DataSource.settings.responseDataType.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "responseDataType"): string;

	/**
	 * The data type of the remote data source response. Delegates the value to [$.ig.DataSource.settings.responseDataType](ig.datasource#options:settings.responseDataType). Please refer to the documentation of $.ig.DataSource.settings.responseDataType.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "responseDataType", optionValue: string): void;

	/**
	 * Gets the HTTP verb used for remote requests. Gets the HTTP verb to be used to issue the requests to the [dataSourceUrl](ui.igtree#options:dataSourceUrl).
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "requestType"): string;

	/**
	 * The HTTP verb used for remote requests. Sets the HTTP verb to be used to issue the requests to the [dataSourceUrl](ui.igtree#options:dataSourceUrl).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;

	/**
	 * Gets the type of the content in a remote data source response. Content type of the response from the [dataSourceUrl](ui.igtree#options:dataSourceUrl). See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "responseContentType"): string;

	/**
	 * The type of the content in a remote data source response. Content type of the response from the [dataSourceUrl](ui.igtree#options:dataSourceUrl). See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;

	/**
	 * Gets the initial depth the igTree is going to be expanded to upon initial render.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "initialExpandDepth"): number;

	/**
	 * The initial depth the igTree is going to be expanded to upon initial render.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "initialExpandDepth", optionValue: number): void;

	/**
	 * Gets whether all the data would be bound initially or each child collection would be bound upon expand.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "loadOnDemand"): boolean;

	/**
	 * Whether all the data would be bound initially or each child collection would be bound upon expand.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "loadOnDemand", optionValue: boolean): void;

	/**
	 * Gets the data binding properties and keys. The igTree uses these to extract the corresponding data from the dataSource.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "bindings"): IgTreeBindings;

	/**
	 * The data binding properties and keys. The igTree uses these to extract the corresponding data from the dataSource.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "bindings", optionValue: IgTreeBindings): void;

	/**
	 * Gets the default target attribute value for the node anchors.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "defaultNodeTarget"): string;

	/**
	 * The default target attribute value for the node anchors.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "defaultNodeTarget", optionValue: string): void;

	/**
	 * Gets/Sets whether drag and drop functionality is enabled.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "dragAndDrop"): boolean;

	/**
	 * /Sets whether drag and drop functionality is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "dragAndDrop", optionValue: boolean): void;

	/**
	 * Gets the URL to which updating requests will be made.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "updateUrl"): string;

	/**
	 * The URL to which updating requests will be made.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "updateUrl", optionValue: string): void;

	/**
	 * Gets/Sets specific settings for the drag and drop functionality.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "dragAndDropSettings"): IgTreeDragAndDropSettings;

	/**
	 * /Sets specific settings for the drag and drop functionality.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "dragAndDropSettings", optionValue: IgTreeDragAndDropSettings): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igTree(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igTree(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTree(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Fired before databinding is performed.
	 */
	igTree(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Fired before databinding is performed.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Fired after databinding is finished.
	 */
	igTree(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Fired after databinding is finished.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Fired before rendering of the tree begins.
	 */
	igTree(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Fired before rendering of the tree begins.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Fired after rendering of the tree has finished.
	 */
	igTree(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Fired after rendering of the tree has finished.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Fired before a new node is selected.
	 */
	igTree(optionLiteral: 'option', optionName: "selectionChanging"): SelectionChangingEvent;

	/**
	 * Fired before a new node is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "selectionChanging", optionValue: SelectionChangingEvent): void;

	/**
	 * Fired after a new node is selected.
	 */
	igTree(optionLiteral: 'option', optionName: "selectionChanged"): IgTreeSelectionChangedEvent;

	/**
	 * Fired after a new node is selected.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "selectionChanged", optionValue: IgTreeSelectionChangedEvent): void;

	/**
	 * Fired before the checkbox state of a node is changed.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeCheckstateChanging"): NodeCheckstateChangingEvent;

	/**
	 * Fired before the checkbox state of a node is changed.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeCheckstateChanging", optionValue: NodeCheckstateChangingEvent): void;

	/**
	 * Fired after the checkstate of a node is changed.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeCheckstateChanged"): NodeCheckstateChangedEvent;

	/**
	 * Fired after the checkstate of a node is changed.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeCheckstateChanged", optionValue: NodeCheckstateChangedEvent): void;

	/**
	 * Fired before the children of a node are populated in the case of load on demand.
	 */
	igTree(optionLiteral: 'option', optionName: "nodePopulating"): NodePopulatingEvent;

	/**
	 * Fired before the children of a node are populated in the case of load on demand.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodePopulating", optionValue: NodePopulatingEvent): void;

	/**
	 * Fired after the children of a node are populated in the case of load on demand.
	 */
	igTree(optionLiteral: 'option', optionName: "nodePopulated"): NodePopulatedEvent;

	/**
	 * Fired after the children of a node are populated in the case of load on demand.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodePopulated", optionValue: NodePopulatedEvent): void;

	/**
	 * Fired before a node is collapsed.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeCollapsing"): NodeCollapsingEvent;

	/**
	 * Fired before a node is collapsed.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeCollapsing", optionValue: NodeCollapsingEvent): void;

	/**
	 * Fired after a node is collapsed.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeCollapsed"): NodeCollapsedEvent;

	/**
	 * Fired after a node is collapsed.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeCollapsed", optionValue: NodeCollapsedEvent): void;

	/**
	 * Fired before a node is expanded.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeExpanding"): NodeExpandingEvent;

	/**
	 * Fired before a node is expanded.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeExpanding", optionValue: NodeExpandingEvent): void;

	/**
	 * Fired after a node is expanded.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeExpanded"): NodeExpandedEvent;

	/**
	 * Fired after a node is expanded.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeExpanded", optionValue: NodeExpandedEvent): void;

	/**
	 * Fired on node click.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeClick"): NodeClickEvent;

	/**
	 * Fired on node click.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeClick", optionValue: NodeClickEvent): void;

	/**
	 * Fired on node double click.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeDoubleClick"): NodeDoubleClickEvent;

	/**
	 * Fired on node double click.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeDoubleClick", optionValue: NodeDoubleClickEvent): void;

	/**
	 * Fired on node drag start.
	 */
	igTree(optionLiteral: 'option', optionName: "dragStart"): DragStartEvent;

	/**
	 * Fired on node drag start.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "dragStart", optionValue: DragStartEvent): void;

	/**
	 * Fired on node drag.
	 */
	igTree(optionLiteral: 'option', optionName: "drag"): DragEvent;

	/**
	 * Fired on node drag.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "drag", optionValue: DragEvent): void;

	/**
	 * Fired after a drag operation has completed.
	 */
	igTree(optionLiteral: 'option', optionName: "dragStop"): DragStopEvent;

	/**
	 * Fired after a drag operation has completed.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "dragStop", optionValue: DragStopEvent): void;

	/**
	 * Fired before a node is dropped.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeDropping"): NodeDroppingEvent;

	/**
	 * Fired before a node is dropped.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeDropping", optionValue: NodeDroppingEvent): void;

	/**
	 * Fired after a node is dropped.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeDropped"): NodeDroppedEvent;

	/**
	 * Fired after a node is dropped.
	 *
	 * @optionValue New value to be set.
	 */
	igTree(optionLiteral: 'option', optionName: "nodeDropped", optionValue: NodeDroppedEvent): void;
	igTree(options: IgTree): JQuery;
	igTree(optionLiteral: 'option', optionName: string): any;
	igTree(optionLiteral: 'option', options: IgTree): JQuery;
	igTree(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTree(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridColumnFixing {
	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *             Specifies the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
	 */
	headerFixButtonText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Specifies the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
	 */
	headerUnfixButtonText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
	 */
	featureChooserTextFixedColumn?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
	 */
	featureChooserTextUnfixedColumn?: string;
	locale?: IgGridColumnFixingLocale;

	/**
	 * Specifies whether to show the column fixing buttons in header cells/feature chooser.
	 *
	 */
	showFixButtons?: boolean;

	/**
	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
	 *
	 */
	syncRowHeights?: boolean;

	/**
	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
	 *
	 */
	scrollDelta?: number;

	/**
	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
	 *
	 *
	 * Valid values:
	 * "left" Fixed columns are rendered on the left side of the main grid.
	 * "right" Fixed columns are rendered on the right side of the main grid.
	 */
	fixingDirection?: string;

	/**
	 * List of column settings that specifies custom column fixing options on a per column basis.
	 *
	 */
	columnSettings?: IgGridColumnFixingColumnSetting[];

	/**
	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
	 *
	 *
	 * Valid values:
	 * "string" The width can be set in pixels (px) and percentage (%).
	 * "number" The width can be set in pixels as a number.
	 */
	minimalVisibleAreaWidth?: string|number;

	/**
	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
	 *
	 */
	fixNondataColumns?: boolean;

	/**
	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
	 */
	populateDataRowsAttributes?: boolean;

	/**
	 * Event which is fired when column fixing operation is initiated.
	 */
	columnFixing?: ColumnFixingEvent;

	/**
	 * Event which is fired when column fixing operation is finished
	 */
	columnFixed?: ColumnFixedEvent;

	/**
	 * Event which is fired when column unfixing operation is initiated
	 */
	columnUnfixing?: ColumnUnfixingEvent;

	/**
	 * Event which is fired when column unfixing operation is done
	 */
	columnUnfixed?: ColumnUnfixedEvent;

	/**
	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
	 */
	columnFixingRefused?: ColumnFixingRefusedEvent;

	/**
	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
	 */
	columnUnfixingRefused?: ColumnUnfixingRefusedEvent;

	/**
	 * Option for igTreeGridColumnFixing
	 */
	[optionName: string]: any;
}
interface IgTreeGridColumnFixingMethods {
	destroy(): void;
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Unfixes a column by specified column identifier - column key or column index.
	 *
	 * @param colIdentifier An identifier of the column to be unfixed - column index or column key.
	 * @param target Key of the column where the unfixed column should move to.
	 * @param after Specifies where the unfixed column should be rendered after or before the target column. This parameter is disregarded if there is no target column specified.
	 */
	unfixColumn(colIdentifier: Object, target?: string, after?: boolean): Object;

	/**
	 * Checks whether the heights of fixed and unfixed tables are equal - if not sync them. Similar check is made for heights of table rows.
	 */
	checkAndSyncHeights(): void;

	/**
	 * If the 'check' argument is set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. Similar check is made for heights of table rows. If the clearRowsHeights argument is set to true, clears rows heights before syncing them.
	 *
	 * @param check If set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. If this argument is set to false sync is performed regardless of the current heights.
	 * @param clearRowsHeights Clears row heigths for all visible rows.
	 */
	syncHeights(check?: boolean, clearRowsHeights?: boolean): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridcolumnfixing#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridcolumnfixing#options:language) or [locale](ui.iggridcolumnfixing#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Returns whether the column with the specified key is a column group header, when the [multi-column headers](http://www.igniteui.com/help/iggrid-multicolumnheaders-landingpage) feature is used.
	 *
	 * @param colKey The key of the column to perform the check for.
	 */
	isGroupHeader(colKey: string): boolean;

	/**
	 * Checks whether column fixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the unfixed area.
	 *
	 * @param columns Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
	 */
	checkFixingAllowed(columns: any[]): boolean;

	/**
	 * Checks whether unfixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the fixed area.
	 *
	 * @param columns Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
	 */
	checkUnfixingAllowed(columns: any[]): boolean;

	/**
	 * Fixes a column by specified column identifier - column index or column key.
	 *
	 * @param colIdentifier An identifier of the column to be fixed - column index or column key.
	 * @param target Key of the column where the fixed column should move to.
	 * @param after Specifies where the fixed column should be moved after or before the target column. This parameter is disregarded if there is no target column specified.
	 */
	fixColumn(colIdentifier: Object, target?: string, after?: boolean): Object;

	/**
	 * Fixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
	 */
	fixNonDataColumns(): void;

	/**
	 * This function is deprecated - use function fixNonDataColumns.
	 */
	fixDataSkippedColumns(): void;

	/**
	 * Unfixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
	 */
	unfixNonDataColumns(): void;

	/**
	 * This function is deprecated - use function unfixNonDataColumns.
	 */
	unfixDataSkippedColumns(): void;

	/**
	 * Unfixes all fixed columns.
	 */
	unfixAllColumns(): void;

	/**
	 * Syncs rows heights between two collections of rows.
	 *
	 * @param $trs An array of rows of the first(fixed/unfixed) container.
	 * @param $anotherRows An array of rows of the second(fixed/unfixed) container.
	 */
	syncRowsHeights($trs: any[], $anotherRows: any[]): void;

	/**
	 * Calculates widths of the fixed columns.
	 *
	 * @param fCols Array of grid columns. If not set then the total width of the fixed columns are returned.
	 * @param excludeNonDataColumns If set to true do not calculate the width of non-data fixed columns (like the row selector row numbering column).
	 * @param includeHidden If set to true calculates width of the hidden fixed columns (their initial width before hiding).
	 */
	getWidthOfFixedColumns(fCols?: any[], excludeNonDataColumns?: boolean, includeHidden?: boolean): number;
}
interface JQuery {
	data(propertyName: "igTreeGridColumnFixing"): IgTreeGridColumnFixingMethods;
}

interface JQuery {
	igTreeGridColumnFixing(methodName: "destroy"): void;
	igTreeGridColumnFixing(methodName: "changeGlobalLanguage"): void;
	igTreeGridColumnFixing(methodName: "changeGlobalRegional"): void;
	igTreeGridColumnFixing(methodName: "unfixColumn", colIdentifier: Object, target?: string, after?: boolean): Object;
	igTreeGridColumnFixing(methodName: "checkAndSyncHeights"): void;
	igTreeGridColumnFixing(methodName: "syncHeights", check?: boolean, clearRowsHeights?: boolean): void;
	igTreeGridColumnFixing(methodName: "changeLocale"): void;
	igTreeGridColumnFixing(methodName: "isGroupHeader", colKey: string): boolean;
	igTreeGridColumnFixing(methodName: "checkFixingAllowed", columns: any[]): boolean;
	igTreeGridColumnFixing(methodName: "checkUnfixingAllowed", columns: any[]): boolean;
	igTreeGridColumnFixing(methodName: "fixColumn", colIdentifier: Object, target?: string, after?: boolean): Object;
	igTreeGridColumnFixing(methodName: "fixNonDataColumns"): void;
	igTreeGridColumnFixing(methodName: "fixDataSkippedColumns"): void;
	igTreeGridColumnFixing(methodName: "unfixNonDataColumns"): void;
	igTreeGridColumnFixing(methodName: "unfixDataSkippedColumns"): void;
	igTreeGridColumnFixing(methodName: "unfixAllColumns"): void;
	igTreeGridColumnFixing(methodName: "syncRowsHeights", $trs: any[], $anotherRows: any[]): void;
	igTreeGridColumnFixing(methodName: "getWidthOfFixedColumns", fCols?: any[], excludeNonDataColumns?: boolean, includeHidden?: boolean): number;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *             Gets the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "headerFixButtonText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *             Sets the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "headerFixButtonText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Gets the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "headerUnfixButtonText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Sets the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "headerUnfixButtonText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextFixedColumn"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextFixedColumn", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextUnfixedColumn"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextUnfixedColumn", optionValue: string): void;
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "locale"): IgGridColumnFixingLocale;
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "locale", optionValue: IgGridColumnFixingLocale): void;

	/**
	 * Gets whether to show the column fixing buttons in header cells/feature chooser.
	 *
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "showFixButtons"): boolean;

	/**
	 * Sets whether to show the column fixing buttons in header cells/feature chooser.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "showFixButtons", optionValue: boolean): void;

	/**
	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
	 *
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "syncRowHeights"): boolean;

	/**
	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "syncRowHeights", optionValue: boolean): void;

	/**
	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
	 *
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "scrollDelta"): number;

	/**
	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "scrollDelta", optionValue: number): void;

	/**
	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
	 *
	 */

	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "fixingDirection"): string;

	/**
	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "fixingDirection", optionValue: string): void;

	/**
	 * List of column settings that specifies custom column fixing options on a per column basis.
	 *
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnSettings"): IgGridColumnFixingColumnSetting[];

	/**
	 * List of column settings that specifies custom column fixing options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridColumnFixingColumnSetting[]): void;

	/**
	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
	 *
	 */

	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "minimalVisibleAreaWidth"): string|number;

	/**
	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "minimalVisibleAreaWidth", optionValue: string|number): void;

	/**
	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
	 *
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "fixNondataColumns"): boolean;

	/**
	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "fixNondataColumns", optionValue: boolean): void;

	/**
	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "populateDataRowsAttributes"): boolean;

	/**
	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "populateDataRowsAttributes", optionValue: boolean): void;

	/**
	 * Event which is fired when column fixing operation is initiated.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixing"): ColumnFixingEvent;

	/**
	 * Event which is fired when column fixing operation is initiated.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixing", optionValue: ColumnFixingEvent): void;

	/**
	 * Event which is fired when column fixing operation is finished
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixed"): ColumnFixedEvent;

	/**
	 * Event which is fired when column fixing operation is finished
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixed", optionValue: ColumnFixedEvent): void;

	/**
	 * Event which is fired when column unfixing operation is initiated
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixing"): ColumnUnfixingEvent;

	/**
	 * Event which is fired when column unfixing operation is initiated
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixing", optionValue: ColumnUnfixingEvent): void;

	/**
	 * Event which is fired when column unfixing operation is done
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixed"): ColumnUnfixedEvent;

	/**
	 * Event which is fired when column unfixing operation is done
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixed", optionValue: ColumnUnfixedEvent): void;

	/**
	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixingRefused"): ColumnFixingRefusedEvent;

	/**
	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixingRefused", optionValue: ColumnFixingRefusedEvent): void;

	/**
	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixingRefused"): ColumnUnfixingRefusedEvent;

	/**
	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixingRefused", optionValue: ColumnUnfixingRefusedEvent): void;
	igTreeGridColumnFixing(options: IgTreeGridColumnFixing): JQuery;
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: string): any;
	igTreeGridColumnFixing(optionLiteral: 'option', options: IgTreeGridColumnFixing): JQuery;
	igTreeGridColumnFixing(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridColumnFixing(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridColumnMoving {
	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * A list of column settings that specifies moving options on a per column basis.
	 *
	 */
	columnSettings?: IgGridColumnMovingColumnSetting[];

	/**
	 * Specify the drag-and-drop mode for the feature
	 *
	 *
	 * Valid values:
	 * "immediate" Column headers will rearange as you drag with a space opening under the cursor for the header to be dropped on
	 * "deferred" A clone of the header dragged will be created and indicators will be shown between columns to help navigate the drop.
	 */
	mode?: string;

	/**
	 * Specify the way columns will be rearranged
	 *
	 *
	 * Valid values:
	 * "dom" Columns will be rearranged through dom manipulation
	 * "render" Columns will not be rearranged but the grid will be rendered again with the new column order. Please note this option is incompatible with immediate move mode.
	 */
	moveType?: string;

	/**
	 * Specifies if header cells should include an additional button that opens a moving helper dropdown.
	 *
	 */
	addMovingDropdown?: boolean;

	/**
	 * Specifies width of column moving dialog
	 *
	 */
	movingDialogWidth?: number;

	/**
	 * Specifies height of column moving dialog
	 *
	 */
	movingDialogHeight?: number;

	/**
	 * Specifies time in milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	movingDialogAnimationDuration?: number;

	/**
	 * Specifies the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
	 *
	 */
	movingAcceptanceTolerance?: number;

	/**
	 * Specifies the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
	 *
	 */
	movingScrollTolerance?: number;

	/**
	 * Specifies a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
	 *
	 */
	scrollSpeedMultiplier?: number;

	/**
	 * Specifies the length (in pixels) of each individual scroll operation
	 *
	 */
	scrollDelta?: number;

	/**
	 * Specifies whether the contents of the column being dragged will get hidden. The option is only
	 * relevant in immediate moving mode.
	 *
	 */
	hideHeaderContentsDuringDrag?: boolean;

	/**
	 * Specifies the opacity of the drag markup, while a column header is being dragged.
	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
	 * will be used with priority over this one.
	 *
	 */
	dragHelperOpacity?: number;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
	 */
	movingDialogCaptionButtonDesc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
	 */
	movingDialogCaptionButtonAsc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
	 */
	movingDialogCaptionText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
	 */
	movingDialogDisplayText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
	 */
	movingDialogDropTooltipText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
	 */
	dropDownMoveLeftText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
	 */
	dropDownMoveRightText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
	 */
	dropDownMoveFirstText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
	 */
	dropDownMoveLastText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
	 */
	movingToolTipMove?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
	 */
	featureChooserSubmenuText?: string;
	locale?: IgGridColumnMovingLocale;

	/**
	 * Specifies markup for drop tooltip in column moving dialog
	 *
	 */
	movingDialogDropTooltipMarkup?: string;

	/**
	 * Controls containment behavior of column moving dialog.
	 *
	 *                 owner  The dialog will be draggable only in the grid area
	 *                 window  The dialog will be draggable in the whole window area
	 */
	columnMovingDialogContainment?: string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Event which is fired when a drag operation begins on a column header
	 */
	columnDragStart?: ColumnDragStartEvent;

	/**
	 * Event which is fired when a drag operation ends on a column header
	 */
	columnDragEnd?: ColumnDragEndEvent;

	/**
	 * Event which is fired when a drag operation is canceled
	 */
	columnDragCanceled?: ColumnDragCanceledEvent;

	/**
	 * Event which is fired when a column moving operation is initiated
	 */
	columnMoving?: ColumnMovingEvent;

	/**
	 * Event which is fired when a column moving operation completes
	 */
	columnMoved?: ColumnMovedEvent;

	/**
	 * Event fired before the moving dialog is opened.
	 */
	movingDialogOpening?: MovingDialogOpeningEvent;

	/**
	 * Event fired after the column chooser is already opened.
	 */
	movingDialogOpened?: MovingDialogOpenedEvent;

	/**
	 * Event fired every time the moving dialog changes its position.
	 */
	movingDialogDragged?: MovingDialogDraggedEvent;

	/**
	 * Event fired before the moving dialog is closed.
	 */
	movingDialogClosing?: MovingDialogClosingEvent;

	/**
	 * Event fired after the moving dialog has been closed.
	 */
	movingDialogClosed?: MovingDialogClosedEvent;

	/**
	 * Event fired before the contents of the model dialog are rendered.
	 */
	movingDialogContentsRendering?: MovingDialogContentsRenderingEvent;

	/**
	 * Event fired after the contents of the model dialog are rendered.
	 */
	movingDialogContentsRendered?: MovingDialogContentsRenderedEvent;

	/**
	 * Event fired when move up button is pressed in the moving dialog
	 */
	movingDialogMoveUpButtonPressed?: MovingDialogMoveUpButtonPressedEvent;

	/**
	 * Event fired when move down button is pressed in the moving dialog
	 */
	movingDialogMoveDownButtonPressed?: MovingDialogMoveDownButtonPressedEvent;

	/**
	 * Event fired when column moving is initiated through dragging it in the moving dialog
	 */
	movingDialogDragColumnMoving?: MovingDialogDragColumnMovingEvent;

	/**
	 * Event fired when column moving is completed through dragging it in the moving dialog
	 */
	movingDialogDragColumnMoved?: MovingDialogDragColumnMovedEvent;

	/**
	 * Option for igTreeGridColumnMoving
	 */
	[optionName: string]: any;
}
interface IgTreeGridColumnMovingMethods {
	destroy(): void;
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridcolumnmoving#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridcolumnmoving#options:language) or [locale](ui.iggridcolumnmoving#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Moves a visible column at a specified place, in front or behind a target column or at a target index
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
	 * @param target An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
	 * @param after Specifies whether the column moved should be moved after or before the target column.
	 * @param inDom Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
	 * @param callback Specifies a custom function to be called when the column is moved.
	 */
	moveColumn(column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
}
interface JQuery {
	data(propertyName: "igTreeGridColumnMoving"): IgTreeGridColumnMovingMethods;
}

interface JQuery {
	igTreeGridColumnMoving(methodName: "destroy"): void;
	igTreeGridColumnMoving(methodName: "changeGlobalLanguage"): void;
	igTreeGridColumnMoving(methodName: "changeGlobalRegional"): void;
	igTreeGridColumnMoving(methodName: "changeLocale"): void;
	igTreeGridColumnMoving(methodName: "moveColumn", column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * A list of column settings that specifies moving options on a per column basis.
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnSettings"): IgGridColumnMovingColumnSetting[];

	/**
	 * A list of column settings that specifies moving options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridColumnMovingColumnSetting[]): void;

	/**
	 * Specify the drag-and-drop mode for the feature
	 *
	 */

	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Specify the drag-and-drop mode for the feature
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Specify the way columns will be rearranged
	 *
	 */

	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "moveType"): string;

	/**
	 * Specify the way columns will be rearranged
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "moveType", optionValue: string): void;

	/**
	 * Gets if header cells should include an additional button that opens a moving helper dropdown.
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "addMovingDropdown"): boolean;

	/**
	 * Sets if header cells should include an additional button that opens a moving helper dropdown.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "addMovingDropdown", optionValue: boolean): void;

	/**
	 * Gets width of column moving dialog
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogWidth"): number;

	/**
	 * Sets width of column moving dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogWidth", optionValue: number): void;

	/**
	 * Gets height of column moving dialog
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogHeight"): number;

	/**
	 * Sets height of column moving dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogHeight", optionValue: number): void;

	/**
	 * Gets time in milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogAnimationDuration"): number;

	/**
	 * Sets time in milliseconds for animation duration to show/hide modal dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogAnimationDuration", optionValue: number): void;

	/**
	 * Gets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingAcceptanceTolerance"): number;

	/**
	 * Sets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingAcceptanceTolerance", optionValue: number): void;

	/**
	 * Gets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingScrollTolerance"): number;

	/**
	 * Sets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingScrollTolerance", optionValue: number): void;

	/**
	 * Gets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "scrollSpeedMultiplier"): number;

	/**
	 * Sets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "scrollSpeedMultiplier", optionValue: number): void;

	/**
	 * Gets the length (in pixels) of each individual scroll operation
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "scrollDelta"): number;

	/**
	 * Sets the length (in pixels) of each individual scroll operation
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "scrollDelta", optionValue: number): void;

	/**
	 * Gets whether the contents of the column being dragged will get hidden. The option is only
	 * relevant in immediate moving mode.
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "hideHeaderContentsDuringDrag"): boolean;

	/**
	 * Sets whether the contents of the column being dragged will get hidden. The option is only
	 * relevant in immediate moving mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "hideHeaderContentsDuringDrag", optionValue: boolean): void;

	/**
	 * Gets the opacity of the drag markup, while a column header is being dragged.
	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
	 * will be used with priority over this one.
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dragHelperOpacity"): number;

	/**
	 * Sets the opacity of the drag markup, while a column header is being dragged.
	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
	 * will be used with priority over this one.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dragHelperOpacity", optionValue: number): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonDesc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonDesc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonAsc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonAsc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDisplayText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDisplayText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLeftText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLeftText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveRightText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveRightText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveFirstText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveFirstText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLastText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLastText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingToolTipMove"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingToolTipMove", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "featureChooserSubmenuText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "featureChooserSubmenuText", optionValue: string): void;
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "locale"): IgGridColumnMovingLocale;
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "locale", optionValue: IgGridColumnMovingLocale): void;

	/**
	 * Gets markup for drop tooltip in column moving dialog
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipMarkup"): string;

	/**
	 * Sets markup for drop tooltip in column moving dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipMarkup", optionValue: string): void;

	/**
	 * Controls containment behavior of column moving dialog.
	 *
	 *                 owner  The dialog will be draggable only in the grid area
	 *                 window  The dialog will be draggable in the whole window area
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMovingDialogContainment"): string;

	/**
	 * Controls containment behavior of column moving dialog.
	 *
	 *                 owner  The dialog will be draggable only in the grid area
	 *                 window  The dialog will be draggable in the whole window area
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMovingDialogContainment", optionValue: string): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Event which is fired when a drag operation begins on a column header
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragStart"): ColumnDragStartEvent;

	/**
	 * Event which is fired when a drag operation begins on a column header
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragStart", optionValue: ColumnDragStartEvent): void;

	/**
	 * Event which is fired when a drag operation ends on a column header
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragEnd"): ColumnDragEndEvent;

	/**
	 * Event which is fired when a drag operation ends on a column header
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragEnd", optionValue: ColumnDragEndEvent): void;

	/**
	 * Event which is fired when a drag operation is canceled
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragCanceled"): ColumnDragCanceledEvent;

	/**
	 * Event which is fired when a drag operation is canceled
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragCanceled", optionValue: ColumnDragCanceledEvent): void;

	/**
	 * Event which is fired when a column moving operation is initiated
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMoving"): ColumnMovingEvent;

	/**
	 * Event which is fired when a column moving operation is initiated
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMoving", optionValue: ColumnMovingEvent): void;

	/**
	 * Event which is fired when a column moving operation completes
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMoved"): ColumnMovedEvent;

	/**
	 * Event which is fired when a column moving operation completes
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMoved", optionValue: ColumnMovedEvent): void;

	/**
	 * Event fired before the moving dialog is opened.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpening"): MovingDialogOpeningEvent;

	/**
	 * Event fired before the moving dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpening", optionValue: MovingDialogOpeningEvent): void;

	/**
	 * Event fired after the column chooser is already opened.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpened"): MovingDialogOpenedEvent;

	/**
	 * Event fired after the column chooser is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpened", optionValue: MovingDialogOpenedEvent): void;

	/**
	 * Event fired every time the moving dialog changes its position.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragged"): MovingDialogDraggedEvent;

	/**
	 * Event fired every time the moving dialog changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragged", optionValue: MovingDialogDraggedEvent): void;

	/**
	 * Event fired before the moving dialog is closed.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosing"): MovingDialogClosingEvent;

	/**
	 * Event fired before the moving dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosing", optionValue: MovingDialogClosingEvent): void;

	/**
	 * Event fired after the moving dialog has been closed.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosed"): MovingDialogClosedEvent;

	/**
	 * Event fired after the moving dialog has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosed", optionValue: MovingDialogClosedEvent): void;

	/**
	 * Event fired before the contents of the model dialog are rendered.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendering"): MovingDialogContentsRenderingEvent;

	/**
	 * Event fired before the contents of the model dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendering", optionValue: MovingDialogContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the model dialog are rendered.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendered"): MovingDialogContentsRenderedEvent;

	/**
	 * Event fired after the contents of the model dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendered", optionValue: MovingDialogContentsRenderedEvent): void;

	/**
	 * Event fired when move up button is pressed in the moving dialog
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveUpButtonPressed"): MovingDialogMoveUpButtonPressedEvent;

	/**
	 * Event fired when move up button is pressed in the moving dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveUpButtonPressed", optionValue: MovingDialogMoveUpButtonPressedEvent): void;

	/**
	 * Event fired when move down button is pressed in the moving dialog
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveDownButtonPressed"): MovingDialogMoveDownButtonPressedEvent;

	/**
	 * Event fired when move down button is pressed in the moving dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveDownButtonPressed", optionValue: MovingDialogMoveDownButtonPressedEvent): void;

	/**
	 * Event fired when column moving is initiated through dragging it in the moving dialog
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoving"): MovingDialogDragColumnMovingEvent;

	/**
	 * Event fired when column moving is initiated through dragging it in the moving dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoving", optionValue: MovingDialogDragColumnMovingEvent): void;

	/**
	 * Event fired when column moving is completed through dragging it in the moving dialog
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoved"): MovingDialogDragColumnMovedEvent;

	/**
	 * Event fired when column moving is completed through dragging it in the moving dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoved", optionValue: MovingDialogDragColumnMovedEvent): void;
	igTreeGridColumnMoving(options: IgTreeGridColumnMoving): JQuery;
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: string): any;
	igTreeGridColumnMoving(optionLiteral: 'option', options: IgTreeGridColumnMoving): JQuery;
	igTreeGridColumnMoving(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridColumnMoving(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridFilteringLocale {
	/**
	 * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
	 * Supported options:
	 * ${currentPageMatches} (filtering)
	 * ${totalMatches} (filtering)
	 * ${startRecord} (paging)
	 * ${endRecord} (paging)
	 * ${recordCount} (paging)
	 *
	 */
	filterSummaryInPagerTemplate?: string;

	/**
	 * Option for IgTreeGridFilteringLocale
	 */
	[optionName: string]: any;
}

interface IgTreeGridFiltering {
	/**
	 * The property in the response that will hold the total number of records in the data source
	 *
	 */
	recordCountKey?: string;

	/**
	 * Specifies from which data bound level to be applied filtering - 0 is the first level
	 *
	 */
	fromLevel?: number;

	/**
	 * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
	 *
	 */
	toLevel?: number;

	/**
	 * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don"t match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don"t match filtering conditions
	 *
	 */
	displayMode?: any;

	/**
	 * Specifies the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
	 * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn"t.
	 * This is used mainly for internal purposes.
	 *
	 */
	matchFiltering?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
	 * Supported options:
	 * ${currentPageMatches} (filtering)
	 * ${totalMatches} (filtering)
	 * ${startRecord} (paging)
	 * ${endRecord} (paging)
	 * ${recordCount} (paging)
	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
	 */
	filterSummaryInPagerTemplate?: string;
	locale?: IgTreeGridFilteringLocale;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
	 *
	 */
	caseSensitive?: boolean;

	/**
	 * Enable/disable footer visibility with summary info about the filter.
	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
	 *
	 */
	filterSummaryAlwaysVisible?: boolean;

	/**
	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
	 *
	 */
	renderFC?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
	 */
	filterSummaryTemplate?: string;

	/**
	 * Type of animations for the column filter dropdowns.
	 *
	 *
	 * Valid values:
	 * "linear" The column filtering drop downs are shown with a linear animation.
	 * "none" No animation is used when showing the filtering drop downs.
	 */
	filterDropDownAnimations?: string;

	/**
	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
	 *
	 */
	filterDropDownAnimationDuration?: number;

	/**
	 * Width of the column filter dropdowns.
	 *
	 *
	 * Valid values:
	 * "string" The width in pixels (0px)
	 * "number" The width in pixels as a number (0)
	 */
	filterDropDownWidth?: string|number;

	/**
	 * Height of the column filter dropdowns.
	 *
	 * string  The height of the column filter dropdowns in pixels (0px).
	 * number  The height of the column filter dropdowns in pixels as a number (0).
	 */
	filterDropDownHeight?: any;

	/**
	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
	 *
	 */
	filterExprUrlKey?: string;

	/**
	 * Enable/disable filter icons visibility.
	 *
	 *
	 * Valid values:
	 * "true" All predefined filters in the filter dropdowns will have icons rendered in front of the text.
	 * "false" No icons will be rendered.
	 */
	filterDropDownItemIcons?: boolean;

	/**
	 * A list of column settings that specifies custom filtering options on a per column basis.
	 *
	 */
	columnSettings?: IgGridFilteringColumnSetting[];

	/**
	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * Valid values:
	 * "remote" Filtering is performed by a remote end-point.
	 * "local" Filtering is performed locally by the [$.ig.DataSource](ig.datasource).
	 */
	type?: string;

	/**
	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
	 *
	 */
	filterDelay?: number;

	/**
	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
	 *
	 *
	 * Valid values:
	 * "simple" Renders just a filter row.
	 * "advanced" Allows to configure multiple filters from a dialog - Excel style.
	 */
	mode?: string;

	/**
	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
	 *
	 */
	advancedModeEditorsVisible?: boolean;

	/**
	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
	 *
	 *
	 * Valid values:
	 * "left"
	 * "right"
	 */
	advancedModeHeaderButtonLocation?: string;

	/**
	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 *
	 * Valid values:
	 * "string" The dialog window width in pixels (500px).
	 * "number" The dialog window width in pixels as a number (500).
	 */
	filterDialogWidth?: string|number;

	/**
	 * default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 *
	 * Valid values:
	 * "string" The dialog window height in pixels (350px).
	 * "number" The dialog window height in pixels as a number (350).
	 */
	filterDialogHeight?: string|number;

	/**
	 * Width of the filtering condition dropdowns in the advanced filter dialog.
	 *
	 *
	 * Valid values:
	 * "string" The filtering condition dropdowns width in pixels (80px).
	 * "number" The filtering condition dropdowns width in pixels as a number (80).
	 */
	filterDialogFilterDropDownDefaultWidth?: string|number;

	/**
	 * Width of the filtering expression input boxes in the advanced filter dialog.
	 *
	 *
	 * Valid values:
	 * "string" The filtering expression input boxes width in pixels (80px).
	 * "number" The filtering expression input boxes width in pixels as a number (80).
	 */
	filterDialogExprInputDefaultWidth?: string|number;

	/**
	 * Width of the column chooser dropdowns in the advanced filter dialog.
	 *
	 *
	 * Valid values:
	 * "string" The column chooser dropdowns width in pixels (80px).
	 * "number" The column chooser dropdowns width in pixels  as a number (80).
	 */
	filterDialogColumnDropDownDefaultWidth?: string|number;

	/**
	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
	 *
	 */
	renderFilterButton?: boolean;

	/**
	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
	 *
	 *
	 * Valid values:
	 * "left" The button is rendered on the left.
	 * "right" The button is rendered on the right.
	 */
	filterButtonLocation?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
	 */
	nullTexts?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
	 */
	labels?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
	 */
	tooltipTemplate?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
	 */
	featureChooserText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
	 */
	featureChooserTextHide?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
	 */
	featureChooserTextAdvancedFilter?: string;

	/**
	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
	 *
	 */
	filterDialogAddConditionTemplate?: string;

	/**
	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
	 *
	 */
	filterDialogAddConditionDropDownTemplate?: string;

	/**
	 * Custom template for filter dialog.
	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
	 * NOTE: The template is supported only with <tr />.
	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
	 *
	 */
	filterDialogFilterTemplate?: string;

	/**
	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
	 *
	 */
	filterDialogFilterConditionTemplate?: string;

	/**
	 * Add button width - in the advanced filter dialog.
	 *
	 *
	 * Valid values:
	 * "string" The dialog Add button width in pixels (100px).
	 * "number" The dialog Add button width in pixels as a number (100).
	 */
	filterDialogAddButtonWidth?: string|number;

	/**
	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
	 *
	 *
	 * Valid values:
	 * "string" The advanced filter dialog Ok and Cancel buttons width in pixels (120px).
	 * "number" The advanced filter dialog Ok and Cancel buttons width in pixels as a number (120).
	 */
	filterDialogOkCancelButtonWidth?: string|number;

	/**
	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
	 *
	 */
	filterDialogMaxFilterCount?: number;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The filter dialog will be draggable only within the grid area.
	 * window  The filter dialog will be draggable within the whole window area.
	 */
	filterDialogContainment?: string;

	/**
	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
	 *
	 */
	showEmptyConditions?: boolean;

	/**
	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
	 *
	 */
	showNullConditions?: boolean;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Enables/disables filtering persistence between states.
	 *
	 */
	persist?: boolean;

	/**
	 * Event fired before a filtering operation is executed (remote request or local).
	 * Return false in order to cancel filtering operation.
	 */
	dataFiltering?: DataFilteringEvent;

	/**
	 * Event fired after the filtering has been executed and results are rendered.
	 */
	dataFiltered?: DataFilteredEvent;

	/**
	 * Event fired before the filter dropdown is opened for a specific column.
	 * Return false in order to cancel dropdown opening.
	 */
	dropDownOpening?: DropDownOpeningEvent;

	/**
	 * Event fired after the filter dropdown is opened for a specific column.
	 */
	dropDownOpened?: DropDownOpenedEvent;

	/**
	 * Event fired before the filter dropdown starts closing.
	 * Return false in order to cancel dropdown closing.
	 */
	dropDownClosing?: DropDownClosingEvent;

	/**
	 * Event fired after a filter column dropdown is completely closed.
	 */
	dropDownClosed?: DropDownClosedEvent;

	/**
	 * Event fired before the advanced filtering dialog is opened.
	 * Return false in order to cancel filter dialog opening.
	 */
	filterDialogOpening?: FilterDialogOpeningEvent;

	/**
	 * Event fired after the advanced filter dialog is already opened.
	 */
	filterDialogOpened?: FilterDialogOpenedEvent;

	/**
	 * Event fired every time the advanced filter dialog changes its position.
	 */
	filterDialogMoving?: FilterDialogMovingEvent;

	/**
	 * Event fired before a filter row is added to the advanced filter dialog.
	 * Return false in order to cancel filter adding to the advanced filtering dialog.
	 */
	filterDialogFilterAdding?: FilterDialogFilterAddingEvent;

	/**
	 * Event fired after a filter row is added to the advanced filter dialog.
	 */
	filterDialogFilterAdded?: FilterDialogFilterAddedEvent;

	/**
	 * Event fired before the advanced filter dialog is closed.
	 * Return false in order to cancel filtering dialog closing.
	 */
	filterDialogClosing?: FilterDialogClosingEvent;

	/**
	 * Event fired after the advanced filter dialog has been closed.
	 */
	filterDialogClosed?: FilterDialogClosedEvent;

	/**
	 * Event fired before the contents of the advanced filter dialog are rendered.
	 * Return false in order to cancel filtering dialog rendering.
	 */
	filterDialogContentsRendering?: FilterDialogContentsRenderingEvent;

	/**
	 * Event fired after the contents of the advanced filter dialog are rendered.
	 */
	filterDialogContentsRendered?: FilterDialogContentsRenderedEvent;

	/**
	 * Event fired when the OK button in the advanced filter dialog is pressed.
	 */
	filterDialogFiltering?: FilterDialogFilteringEvent;

	/**
	 * Option for igTreeGridFiltering
	 */
	[optionName: string]: any;
}
interface IgTreeGridFilteringMethods {
	/**
	 * Returns the count of data records that match filtering conditions
	 */
	getFilteringMatchesCount(): number;
	destroy(): void;
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridfiltering#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridfiltering#options:language) or [locale](ui.iggridfiltering#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.iggridfiltering#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.iggridfiltering#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Toggle filter row when mode is simple or [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is true. Otherwise show/hide advanced dialog.
	 *
	 * @param event Column key
	 */
	toggleFilterRowByFeatureChooser(event: string): void;

	/**
	 * Applies filtering programmatically and updates the UI by default.
	 *
	 * @param expressions An array of filtering expressions, each one having the format {fieldName: , expr: , cond: , logic: } where  fieldName is the key of the column, expr is the actual expression string with which we would like to filter, logic is 'AND' or 'OR', and cond is one of the following strings: "equals", "doesNotEqual", "contains", "doesNotContain", "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "true", "false", "null", "notNull", "empty", "notEmpty", "startsWith", "endsWith", "today", "yesterday", "on", "notOn", "thisMonth", "lastMonth", "nextMonth", "before", "after", "thisYear", "lastYear", "nextYear". The difference between the empty and null filtering conditions is that empty includes null, NaN, and undefined, as well as the empty string.
	 * @param updateUI specifies whether the filter row should be also updated once the grid is filtered
	 * @param addedFromAdvanced
	 */
	filter(expressions: any[], updateUI?: boolean, addedFromAdvanced?: boolean): void;

	/**
	 * Check whether filterCondition requires or not filtering expression - e.g. if filterCondition is "lastMonth", "thisMonth", "null", "notNull", "true", "false", etc. then filtering expression is NOT required
	 *
	 * @param filterCondition filtering condition - e.g. "true", "false",  "yesterday", "empty", "null", etc.
	 */
	requiresFilteringExpression(filterCondition: string): boolean;
}
interface JQuery {
	data(propertyName: "igTreeGridFiltering"): IgTreeGridFilteringMethods;
}

interface JQuery {
	igTreeGridFiltering(methodName: "getFilteringMatchesCount"): number;
	igTreeGridFiltering(methodName: "destroy"): void;
	igTreeGridFiltering(methodName: "changeGlobalLanguage"): void;
	igTreeGridFiltering(methodName: "changeGlobalRegional"): void;
	igTreeGridFiltering(methodName: "changeLocale"): void;
	igTreeGridFiltering(methodName: "changeRegional"): void;
	igTreeGridFiltering(methodName: "toggleFilterRowByFeatureChooser", event: string): void;
	igTreeGridFiltering(methodName: "filter", expressions: any[], updateUI?: boolean, addedFromAdvanced?: boolean): void;
	igTreeGridFiltering(methodName: "requiresFilteringExpression", filterCondition: string): boolean;

	/**
	 * The property in the response that will hold the total number of records in the data source
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "recordCountKey"): string;

	/**
	 * The property in the response that will hold the total number of records in the data source
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "recordCountKey", optionValue: string): void;

	/**
	 * Specifies from which data bound level to be applied filtering - 0 is the first level
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "fromLevel"): number;

	/**
	 * Specifies from which data bound level to be applied filtering - 0 is the first level
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "fromLevel", optionValue: number): void;

	/**
	 * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "toLevel"): number;

	/**
	 * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "toLevel", optionValue: number): void;

	/**
	 * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don"t match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don"t match filtering conditions
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "displayMode"): any;

	/**
	 * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don"t match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don"t match filtering conditions
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "displayMode", optionValue: any): void;

	/**
	 * Gets the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
	 * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn"t.
	 * This is used mainly for internal purposes.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "matchFiltering"): string;

	/**
	 * Sets the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
	 * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn"t.
	 * This is used mainly for internal purposes.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "matchFiltering", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
	 * Supported options:
	 * ${currentPageMatches} (filtering)
	 * ${totalMatches} (filtering)
	 * ${startRecord} (paging)
	 * ${endRecord} (paging)
	 * ${recordCount} (paging)
	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryInPagerTemplate"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
	 * Supported options:
	 * ${currentPageMatches} (filtering)
	 * ${totalMatches} (filtering)
	 * ${startRecord} (paging)
	 * ${endRecord} (paging)
	 * ${recordCount} (paging)
	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryInPagerTemplate", optionValue: string): void;
	igTreeGridFiltering(optionLiteral: 'option', optionName: "locale"): IgTreeGridFilteringLocale;
	igTreeGridFiltering(optionLiteral: 'option', optionName: "locale", optionValue: IgTreeGridFilteringLocale): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "caseSensitive"): boolean;

	/**
	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;

	/**
	 * Enable/disable footer visibility with summary info about the filter.
	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryAlwaysVisible"): boolean;

	/**
	 * Enable/disable footer visibility with summary info about the filter.
	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryAlwaysVisible", optionValue: boolean): void;

	/**
	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "renderFC"): boolean;

	/**
	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "renderFC", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryTemplate"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryTemplate", optionValue: string): void;

	/**
	 * Type of animations for the column filter dropdowns.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimations"): string;

	/**
	 * Type of animations for the column filter dropdowns.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimations", optionValue: string): void;

	/**
	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimationDuration"): number;

	/**
	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimationDuration", optionValue: number): void;

	/**
	 * Width of the column filter dropdowns.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownWidth"): string|number;

	/**
	 * Width of the column filter dropdowns.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownWidth", optionValue: string|number): void;

	/**
	 * Height of the column filter dropdowns.
	 *
	 * string  The height of the column filter dropdowns in pixels (0px).
	 * number  The height of the column filter dropdowns in pixels as a number (0).
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownHeight"): any;

	/**
	 * Height of the column filter dropdowns.
	 *
	 * string  The height of the column filter dropdowns in pixels (0px).
	 * number  The height of the column filter dropdowns in pixels as a number (0).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownHeight", optionValue: any): void;

	/**
	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterExprUrlKey"): string;

	/**
	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterExprUrlKey", optionValue: string): void;

	/**
	 * Enable/disable filter icons visibility.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownItemIcons"): boolean;

	/**
	 * Enable/disable filter icons visibility.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownItemIcons", optionValue: boolean): void;

	/**
	 * A list of column settings that specifies custom filtering options on a per column basis.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "columnSettings"): IgGridFilteringColumnSetting[];

	/**
	 * A list of column settings that specifies custom filtering options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridFilteringColumnSetting[]): void;

	/**
	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDelay"): number;

	/**
	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDelay", optionValue: number): void;

	/**
	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "advancedModeEditorsVisible"): boolean;

	/**
	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "advancedModeEditorsVisible", optionValue: boolean): void;

	/**
	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "advancedModeHeaderButtonLocation"): string;

	/**
	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "advancedModeHeaderButtonLocation", optionValue: string): void;

	/**
	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogWidth"): string|number;

	/**
	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogWidth", optionValue: string|number): void;

	/**
	 * Default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogHeight"): string|number;

	/**
	 * Default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogHeight", optionValue: string|number): void;

	/**
	 * Width of the filtering condition dropdowns in the advanced filter dialog.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterDropDownDefaultWidth"): string|number;

	/**
	 * Width of the filtering condition dropdowns in the advanced filter dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterDropDownDefaultWidth", optionValue: string|number): void;

	/**
	 * Width of the filtering expression input boxes in the advanced filter dialog.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogExprInputDefaultWidth"): string|number;

	/**
	 * Width of the filtering expression input boxes in the advanced filter dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogExprInputDefaultWidth", optionValue: string|number): void;

	/**
	 * Width of the column chooser dropdowns in the advanced filter dialog.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogColumnDropDownDefaultWidth"): string|number;

	/**
	 * Width of the column chooser dropdowns in the advanced filter dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogColumnDropDownDefaultWidth", optionValue: string|number): void;

	/**
	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "renderFilterButton"): boolean;

	/**
	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "renderFilterButton", optionValue: boolean): void;

	/**
	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterButtonLocation"): string;

	/**
	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterButtonLocation", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "nullTexts"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "nullTexts", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "labels"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "labels", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "tooltipTemplate"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextHide"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextHide", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextAdvancedFilter"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextAdvancedFilter", optionValue: string): void;

	/**
	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionTemplate"): string;

	/**
	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionTemplate", optionValue: string): void;

	/**
	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionDropDownTemplate"): string;

	/**
	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionDropDownTemplate", optionValue: string): void;

	/**
	 * Custom template for filter dialog.
	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
	 * NOTE: The template is supported only with <tr />.
	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterTemplate"): string;

	/**
	 * Custom template for filter dialog.
	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
	 * NOTE: The template is supported only with <tr />.
	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterTemplate", optionValue: string): void;

	/**
	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterConditionTemplate"): string;

	/**
	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterConditionTemplate", optionValue: string): void;

	/**
	 * Add button width - in the advanced filter dialog.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddButtonWidth"): string|number;

	/**
	 * Add button width - in the advanced filter dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddButtonWidth", optionValue: string|number): void;

	/**
	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
	 *
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOkCancelButtonWidth"): string|number;

	/**
	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOkCancelButtonWidth", optionValue: string|number): void;

	/**
	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogMaxFilterCount"): number;

	/**
	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogMaxFilterCount", optionValue: number): void;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The filter dialog will be draggable only within the grid area.
	 * window  The filter dialog will be draggable within the whole window area.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContainment"): string;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The filter dialog will be draggable only within the grid area.
	 * window  The filter dialog will be draggable within the whole window area.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContainment", optionValue: string): void;

	/**
	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "showEmptyConditions"): boolean;

	/**
	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "showEmptyConditions", optionValue: boolean): void;

	/**
	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "showNullConditions"): boolean;

	/**
	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "showNullConditions", optionValue: boolean): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Enables/disables filtering persistence between states.
	 *
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "persist"): boolean;

	/**
	 * Enables/disables filtering persistence between states.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;

	/**
	 * Event fired before a filtering operation is executed (remote request or local).
	 * Return false in order to cancel filtering operation.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dataFiltering"): DataFilteringEvent;

	/**
	 * Event fired before a filtering operation is executed (remote request or local).
	 * Return false in order to cancel filtering operation.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dataFiltering", optionValue: DataFilteringEvent): void;

	/**
	 * Event fired after the filtering has been executed and results are rendered.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dataFiltered"): DataFilteredEvent;

	/**
	 * Event fired after the filtering has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dataFiltered", optionValue: DataFilteredEvent): void;

	/**
	 * Event fired before the filter dropdown is opened for a specific column.
	 * Return false in order to cancel dropdown opening.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownOpening"): DropDownOpeningEvent;

	/**
	 * Event fired before the filter dropdown is opened for a specific column.
	 * Return false in order to cancel dropdown opening.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownOpening", optionValue: DropDownOpeningEvent): void;

	/**
	 * Event fired after the filter dropdown is opened for a specific column.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownOpened"): DropDownOpenedEvent;

	/**
	 * Event fired after the filter dropdown is opened for a specific column.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownOpened", optionValue: DropDownOpenedEvent): void;

	/**
	 * Event fired before the filter dropdown starts closing.
	 * Return false in order to cancel dropdown closing.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownClosing"): DropDownClosingEvent;

	/**
	 * Event fired before the filter dropdown starts closing.
	 * Return false in order to cancel dropdown closing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownClosing", optionValue: DropDownClosingEvent): void;

	/**
	 * Event fired after a filter column dropdown is completely closed.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownClosed"): DropDownClosedEvent;

	/**
	 * Event fired after a filter column dropdown is completely closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownClosed", optionValue: DropDownClosedEvent): void;

	/**
	 * Event fired before the advanced filtering dialog is opened.
	 * Return false in order to cancel filter dialog opening.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpening"): FilterDialogOpeningEvent;

	/**
	 * Event fired before the advanced filtering dialog is opened.
	 * Return false in order to cancel filter dialog opening.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpening", optionValue: FilterDialogOpeningEvent): void;

	/**
	 * Event fired after the advanced filter dialog is already opened.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpened"): FilterDialogOpenedEvent;

	/**
	 * Event fired after the advanced filter dialog is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpened", optionValue: FilterDialogOpenedEvent): void;

	/**
	 * Event fired every time the advanced filter dialog changes its position.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogMoving"): FilterDialogMovingEvent;

	/**
	 * Event fired every time the advanced filter dialog changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogMoving", optionValue: FilterDialogMovingEvent): void;

	/**
	 * Event fired before a filter row is added to the advanced filter dialog.
	 * Return false in order to cancel filter adding to the advanced filtering dialog.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdding"): FilterDialogFilterAddingEvent;

	/**
	 * Event fired before a filter row is added to the advanced filter dialog.
	 * Return false in order to cancel filter adding to the advanced filtering dialog.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdding", optionValue: FilterDialogFilterAddingEvent): void;

	/**
	 * Event fired after a filter row is added to the advanced filter dialog.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdded"): FilterDialogFilterAddedEvent;

	/**
	 * Event fired after a filter row is added to the advanced filter dialog.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdded", optionValue: FilterDialogFilterAddedEvent): void;

	/**
	 * Event fired before the advanced filter dialog is closed.
	 * Return false in order to cancel filtering dialog closing.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosing"): FilterDialogClosingEvent;

	/**
	 * Event fired before the advanced filter dialog is closed.
	 * Return false in order to cancel filtering dialog closing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosing", optionValue: FilterDialogClosingEvent): void;

	/**
	 * Event fired after the advanced filter dialog has been closed.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosed"): FilterDialogClosedEvent;

	/**
	 * Event fired after the advanced filter dialog has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosed", optionValue: FilterDialogClosedEvent): void;

	/**
	 * Event fired before the contents of the advanced filter dialog are rendered.
	 * Return false in order to cancel filtering dialog rendering.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendering"): FilterDialogContentsRenderingEvent;

	/**
	 * Event fired before the contents of the advanced filter dialog are rendered.
	 * Return false in order to cancel filtering dialog rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendering", optionValue: FilterDialogContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the advanced filter dialog are rendered.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendered"): FilterDialogContentsRenderedEvent;

	/**
	 * Event fired after the contents of the advanced filter dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendered", optionValue: FilterDialogContentsRenderedEvent): void;

	/**
	 * Event fired when the OK button in the advanced filter dialog is pressed.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFiltering"): FilterDialogFilteringEvent;

	/**
	 * Event fired when the OK button in the advanced filter dialog is pressed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFiltering", optionValue: FilterDialogFilteringEvent): void;
	igTreeGridFiltering(options: IgTreeGridFiltering): JQuery;
	igTreeGridFiltering(optionLiteral: 'option', optionName: string): any;
	igTreeGridFiltering(optionLiteral: 'option', options: IgTreeGridFiltering): JQuery;
	igTreeGridFiltering(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridFiltering(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridHiding {
	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * A list of column settings that specifies hiding options on a per column basis.
	 *
	 */
	columnSettings?: IgGridHidingColumnSetting[];

	/**
	 * The width in pixels of the hidden column indicator in the header.
	 *
	 */
	hiddenColumnIndicatorHeaderWidth?: number;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The column chooser dialog will be draggable only in the grid area
	 * window  The column chooser dialog will be draggable in the whole window area
	 */
	columnChooserContainment?: string;

	/**
	 * The default column chooser width.
	 *
	 */
	columnChooserWidth?: string;

	/**
	 * The default column chooser height.
	 *
	 */
	columnChooserHeight?: string;

	/**
	 * The duration of the dropdown animation in milliseconds.
	 *
	 */
	dropDownAnimationDuration?: number;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
	 */
	columnChooserCaptionText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
	 */
	columnChooserDisplayText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
	 */
	hiddenColumnIndicatorTooltipText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
	 */
	columnHideText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
	 */
	columnChooserShowText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
	 */
	columnChooserHideText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
	 */
	columnChooserResetButtonLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
	 */
	columnChooserButtonApplyText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
	 */
	columnChooserButtonCancelText?: string;
	locale?: IgGridHidingLocale;

	/**
	 * Specifies on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
	 *
	 */
	columnChooserHideOnClick?: boolean;

	/**
	 * Specifies time of milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	columnChooserAnimationDuration?: number;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Event fired before a hiding operation is executed.
	 */
	columnHiding?: ColumnHidingEvent;

	/**
	 * Event fired when trying to hide all columns in fixed or unfixed area.
	 */
	columnHidingRefused?: ColumnHidingRefusedEvent;

	/**
	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
	 */
	columnShowingRefused?: ColumnShowingRefusedEvent;

	/**
	 * Event fired before a hiding operation is executed.
	 */
	multiColumnHiding?: MultiColumnHidingEvent;

	/**
	 * Event fired after the hiding has been executed and results are rendered.
	 */
	columnHidden?: ColumnHiddenEvent;

	/**
	 * Event fired before a showing operation is executed.
	 */
	columnShowing?: ColumnShowingEvent;

	/**
	 * Event fired after the showing has been executed and results are rendered.
	 */
	columnShown?: ColumnShownEvent;

	/**
	 * Event fired before the column chooser is opened.
	 */
	columnChooserOpening?: ColumnChooserOpeningEvent;

	/**
	 * Event fired after the column chooser is already opened.
	 */
	columnChooserOpened?: ColumnChooserOpenedEvent;

	/**
	 * Event fired every time the column chooser changes its position.
	 */
	columnChooserMoving?: ColumnChooserMovingEvent;

	/**
	 * Event fired before the column chooser is closed.
	 */
	columnChooserClosing?: ColumnChooserClosingEvent;

	/**
	 * Event fired after the column chooser has been closed.
	 */
	columnChooserClosed?: ColumnChooserClosedEvent;

	/**
	 * Event fired before the contents of the column chooser are rendered.
	 */
	columnChooserContentsRendering?: ColumnChooserContentsRenderingEvent;

	/**
	 * Event fired after the contents of the column chooser are rendered.
	 */
	columnChooserContentsRendered?: ColumnChooserContentsRenderedEvent;

	/**
	 * Event fired when button Apply in column chooser is clicked
	 */
	columnChooserButtonApplyClick?: ColumnChooserButtonApplyClickEvent;

	/**
	 * Event fired when button Reset in column chooser is clicked
	 */
	columnChooserButtonResetClick?: ColumnChooserButtonResetClickEvent;

	/**
	 * Option for igTreeGridHiding
	 */
	[optionName: string]: any;
}
interface IgTreeGridHidingMethods {
	destroy(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridhiding#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridhiding#options:language) or [locale](ui.iggridhiding#options:locale) option setter
	 */
	changeLocale(): void;
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Shows the Column Chooser dialog. If it is visible the method does nothing.
	 */
	showColumnChooser(): void;

	/**
	 * Hides the Column Chooser dialog. If it is not visible the method does nothing.
	 */
	hideColumnChooser(): void;

	/**
	 * Shows a hidden column. If the column is not hidden the method does nothing.
	 * Note: This method is asynchronous, which means that it returns immediately, and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a column index; else if a string is provided, it will be used as a column key.
	 * @param callback Specifies a custom function to be called after the column gets shown(optional)
	 */
	showColumn(column: Object, callback?: Function): void;

	/**
	 * Hides a visible column. If the column is hidden the method does nothing.
	 * Note: This method is asynchronous, which means that it returns immediately, and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a column index; else if a string is provided, it will be used as a column key.
	 * @param callback Specifies a custom function to be called after the column gets hidden(optional)
	 */
	hideColumn(column: Object, callback?: Function): void;

	/**
	 * Hides visible columns specified by the array. If the column is hidden the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param columns An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
	 * @param callback Specifies a custom function to be called when all columns are hidden(optional)
	 */
	hideMultiColumns(columns: any[], callback?: Function): void;

	/**
	 * Show visible columns specified by the array. If the column is shown the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param columns An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
	 * @param callback Specifies a custom function to be called when all columns are shown(optional)
	 */
	showMultiColumns(columns: any[], callback?: Function): void;

	/**
	 * Gets whether the reset button in the column chooser dialog is to be rendered or not.
	 */
	isToRenderButtonReset(): void;

	/**
	 * Reset hidden/shown column to initial state of dialog(when it is opened)
	 */
	resetHidingColumnChooser(): void;

	/**
	 * Renders the Reset button in the Column Chooser dialog.
	 */
	renderColumnChooserResetButton(): void;

	/**
	 * Remove Reset button in column chooser modal dialog
	 */
	removeColumnChooserResetButton(): void;
}
interface JQuery {
	data(propertyName: "igTreeGridHiding"): IgTreeGridHidingMethods;
}

interface JQuery {
	igTreeGridHiding(methodName: "destroy"): void;
	igTreeGridHiding(methodName: "changeLocale"): void;
	igTreeGridHiding(methodName: "changeGlobalLanguage"): void;
	igTreeGridHiding(methodName: "changeGlobalRegional"): void;
	igTreeGridHiding(methodName: "showColumnChooser"): void;
	igTreeGridHiding(methodName: "hideColumnChooser"): void;
	igTreeGridHiding(methodName: "showColumn", column: Object, callback?: Function): void;
	igTreeGridHiding(methodName: "hideColumn", column: Object, callback?: Function): void;
	igTreeGridHiding(methodName: "hideMultiColumns", columns: any[], callback?: Function): void;
	igTreeGridHiding(methodName: "showMultiColumns", columns: any[], callback?: Function): void;
	igTreeGridHiding(methodName: "isToRenderButtonReset"): void;
	igTreeGridHiding(methodName: "resetHidingColumnChooser"): void;
	igTreeGridHiding(methodName: "renderColumnChooserResetButton"): void;
	igTreeGridHiding(methodName: "removeColumnChooserResetButton"): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * A list of column settings that specifies hiding options on a per column basis.
	 *
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnSettings"): IgGridHidingColumnSetting[];

	/**
	 * A list of column settings that specifies hiding options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridHidingColumnSetting[]): void;

	/**
	 * The width in pixels of the hidden column indicator in the header.
	 *
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorHeaderWidth"): number;

	/**
	 * The width in pixels of the hidden column indicator in the header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorHeaderWidth", optionValue: number): void;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The column chooser dialog will be draggable only in the grid area
	 * window  The column chooser dialog will be draggable in the whole window area
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContainment"): string;

	/**
	 * Controls containment behavior.
	 *
	 * owner  The column chooser dialog will be draggable only in the grid area
	 * window  The column chooser dialog will be draggable in the whole window area
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContainment", optionValue: string): void;

	/**
	 * The default column chooser width.
	 *
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserWidth"): string;

	/**
	 * The default column chooser width.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserWidth", optionValue: string): void;

	/**
	 * The default column chooser height.
	 *
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHeight"): string;

	/**
	 * The default column chooser height.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHeight", optionValue: string): void;

	/**
	 * The duration of the dropdown animation in milliseconds.
	 *
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;

	/**
	 * The duration of the dropdown animation in milliseconds.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserCaptionText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserCaptionText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserDisplayText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserDisplayText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorTooltipText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorTooltipText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnHideText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnHideText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserShowText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserShowText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHideText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHideText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserResetButtonLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserResetButtonLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonCancelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonCancelText", optionValue: string): void;
	igTreeGridHiding(optionLiteral: 'option', optionName: "locale"): IgGridHidingLocale;
	igTreeGridHiding(optionLiteral: 'option', optionName: "locale", optionValue: IgGridHidingLocale): void;

	/**
	 * Gets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
	 *
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHideOnClick"): boolean;

	/**
	 * Sets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHideOnClick", optionValue: boolean): void;

	/**
	 * Gets time of milliseconds for animation duration to show/hide modal dialog
	 *
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserAnimationDuration"): number;

	/**
	 * Sets time of milliseconds for animation duration to show/hide modal dialog
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserAnimationDuration", optionValue: number): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Event fired before a hiding operation is executed.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnHiding"): ColumnHidingEvent;

	/**
	 * Event fired before a hiding operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnHiding", optionValue: ColumnHidingEvent): void;

	/**
	 * Event fired when trying to hide all columns in fixed or unfixed area.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnHidingRefused"): ColumnHidingRefusedEvent;

	/**
	 * Event fired when trying to hide all columns in fixed or unfixed area.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnHidingRefused", optionValue: ColumnHidingRefusedEvent): void;

	/**
	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnShowingRefused"): ColumnShowingRefusedEvent;

	/**
	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnShowingRefused", optionValue: ColumnShowingRefusedEvent): void;

	/**
	 * Event fired before a hiding operation is executed.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "multiColumnHiding"): MultiColumnHidingEvent;

	/**
	 * Event fired before a hiding operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "multiColumnHiding", optionValue: MultiColumnHidingEvent): void;

	/**
	 * Event fired after the hiding has been executed and results are rendered.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnHidden"): ColumnHiddenEvent;

	/**
	 * Event fired after the hiding has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnHidden", optionValue: ColumnHiddenEvent): void;

	/**
	 * Event fired before a showing operation is executed.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnShowing"): ColumnShowingEvent;

	/**
	 * Event fired before a showing operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnShowing", optionValue: ColumnShowingEvent): void;

	/**
	 * Event fired after the showing has been executed and results are rendered.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnShown"): ColumnShownEvent;

	/**
	 * Event fired after the showing has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnShown", optionValue: ColumnShownEvent): void;

	/**
	 * Event fired before the column chooser is opened.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserOpening"): ColumnChooserOpeningEvent;

	/**
	 * Event fired before the column chooser is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserOpening", optionValue: ColumnChooserOpeningEvent): void;

	/**
	 * Event fired after the column chooser is already opened.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserOpened"): ColumnChooserOpenedEvent;

	/**
	 * Event fired after the column chooser is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserOpened", optionValue: ColumnChooserOpenedEvent): void;

	/**
	 * Event fired every time the column chooser changes its position.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserMoving"): ColumnChooserMovingEvent;

	/**
	 * Event fired every time the column chooser changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserMoving", optionValue: ColumnChooserMovingEvent): void;

	/**
	 * Event fired before the column chooser is closed.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserClosing"): ColumnChooserClosingEvent;

	/**
	 * Event fired before the column chooser is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserClosing", optionValue: ColumnChooserClosingEvent): void;

	/**
	 * Event fired after the column chooser has been closed.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserClosed"): ColumnChooserClosedEvent;

	/**
	 * Event fired after the column chooser has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserClosed", optionValue: ColumnChooserClosedEvent): void;

	/**
	 * Event fired before the contents of the column chooser are rendered.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendering"): ColumnChooserContentsRenderingEvent;

	/**
	 * Event fired before the contents of the column chooser are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendering", optionValue: ColumnChooserContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the column chooser are rendered.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendered"): ColumnChooserContentsRenderedEvent;

	/**
	 * Event fired after the contents of the column chooser are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendered", optionValue: ColumnChooserContentsRenderedEvent): void;

	/**
	 * Event fired when button Apply in column chooser is clicked
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyClick"): ColumnChooserButtonApplyClickEvent;

	/**
	 * Event fired when button Apply in column chooser is clicked
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyClick", optionValue: ColumnChooserButtonApplyClickEvent): void;

	/**
	 * Event fired when button Reset in column chooser is clicked
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonResetClick"): ColumnChooserButtonResetClickEvent;

	/**
	 * Event fired when button Reset in column chooser is clicked
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonResetClick", optionValue: ColumnChooserButtonResetClickEvent): void;
	igTreeGridHiding(options: IgTreeGridHiding): JQuery;
	igTreeGridHiding(optionLiteral: 'option', optionName: string): any;
	igTreeGridHiding(optionLiteral: 'option', options: IgTreeGridHiding): JQuery;
	igTreeGridHiding(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridHiding(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridDataSourceSettings {
	/**
	 * *** IMPORTANT DEPRECATED *** Use the expandedKey option instead.
	 * The name of the property that keeps track of the expansion state of a data item. Defaults to __ig_options.expanded.
	 *
	 */
	propertyExpanded?: any;

	/**
	 * *** IMPORTANT DEPRECATED *** Use the dataLevelKey option instead.
	 * The name of the property that keeps track of the level in the hierarchy.Defaults to __ig_options.dataLevel.
	 *
	 */
	propertyDataLevel?: any;

	/**
	 * The name of the property that keeps track of the expansion state of a data item. Defaults to __ig_options.expanded.
	 *
	 */
	expandedKey?: string;

	/**
	 * The name of the property that keeps track of the level in the hierarchy.Defaults to __ig_options.dataLevel.
	 *
	 */
	dataLevelKey?: string;

	/**
	 * If set to TRUE it is expected that the source of data is normalized and transformed(has set dataLevel and expansion state). The source of data is used as flatDataView. Usually used when the paging is remote and paging mode is allLevels, or features are remote(and the processing of the returned result should be made on the server)
	 *
	 */
	initialFlatDataView?: boolean;

	/**
	 * Option for IgTreeGridDataSourceSettings
	 */
	[optionName: string]: any;
}

interface IgTreeGridLocale {
	/**
	 * Specifies the expansion indicator tooltip text.
	 *
	 */
	expandTooltipText?: string;

	/**
	 * Specifies the collapse indicator tooltip text.
	 *
	 */
	collapseTooltipText?: string;

	/**
	 * Option for IgTreeGridLocale
	 */
	[optionName: string]: any;
}

interface IgTreeGridRestSettings {
	/**
	 * Option for IgTreeGridRestSettings
	 */
	[optionName: string]: any;
}

interface IgTreeGrid {
	/**
	 * Specifies the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
	 *
	 */
	indentation?: string;

	/**
	 * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
	 *
	 */
	initialIndentationLevel?: number;

	/**
	 * Specifies if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
	 *
	 */
	showExpansionIndicator?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the expansion indicator tooltip text.
	 * Use option [locale.expandTooltipText](ui.igtreegrid#options:locale.expandTooltipText).
	 */
	expandTooltipText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the collapse indicator tooltip text.
	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
	 */
	collapseTooltipText?: string;

	/**
	 * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
	 *
	 */
	foreignKey?: string;

	/**
	 * Specifies the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
	 *
	 */
	initialExpandDepth?: number;

	/**
	 * Specifies the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
	 *
	 */
	foreignKeyRootValue?: number|string;

	/**
	 * Specify whether to render non-data column which contains expander indicators
	 *
	 */
	renderExpansionIndicatorColumn?: boolean;

	/**
	 * a reference or name of a javascript function which changes first data cell - renders indentation according to databound level
	 *
	 */
	renderFirstDataCellFunction?: string|Object;

	/**
	 * Property name of the array of child data in a hierarchical data source.
	 *
	 */
	childDataKey?: string;

	/**
	 * a reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
	 *
	 */
	renderExpansionCellFunction?: string|Object;

	/**
	 * Specifies to the tree grid if data is loaded on demand from a remote server. Default is false.
	 *
	 */
	enableRemoteLoadOnDemand?: boolean;

	/**
	 * Options object to configure data source-specific settings
	 *
	 */
	dataSourceSettings?: IgTreeGridDataSourceSettings;
	locale?: IgTreeGridLocale;

	/**
	 * Determines row virtualization mode. For igTreeGrid only continuous virtualization can be used.
	 *
	 * continuous  renders a pre-defined number of rows in the grid. On scrolling the continuous virtualization loads another portion of rows and disposes the current one.
	 */
	virtualizationMode?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	avgColumnWidth?: any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	avgRowHeight?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	columnVirtualization?: any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	restSettings?: IgTreeGridRestSettings;

	/**
	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * Valid values:
	 * "string" The widget width can be set in pixels (px) or percentage (%). Example values: "800px", "800" (defaults to pixels), "100%".
	 * "number" The widget width can be set in pixels as a number. Example values: 800, 700.
	 * "null" will stretch to fit the sum of the columns widths.
	 */
	width?: string|number;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * Valid values:
	 * "string" The widget height can be set in pixels (px) and percentage (%).
	 * "number" The widget height can be set as a number
	 * "null" will stretch vertically to fit data.
	 */
	height?: string|number;

	/**
	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
	 *
	 */
	autoAdjustHeight?: boolean;

	/**
	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
	 *
	 *
	 * Valid values:
	 * "string" The default column width can be set in pixels ("100px") or as '*' in order to auto-size based on the cells and header content.
	 * "number" The default column width can be set in pixels as a number (100).
	 */
	defaultColumnWidth?: string|number;

	/**
	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
	 *
	 */
	autoGenerateColumns?: boolean;

	/**
	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
	 *
	 */
	virtualization?: boolean;

	/**
	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
	 *
	 */
	rowVirtualization?: boolean;

	/**
	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
	 *
	 */
	virtualizationMouseWheelStep?: number;

	/**
	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
	 *
	 */
	adjustVirtualHeights?: boolean;

	/**
	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
	 *
	 *
	 * Valid values:
	 * "infragistics" The grid will use the Infragistics Templating engine to render its [column templates](ui.iggrid#options:columns.template) and specific parts of the UI.
	 * "jsRender" The grid will use jsRender to render its [column templates](ui.iggrid#options:columns.template) and specific parts of the UI.
	 */
	templatingEngine?: string;

	/**
	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
	 *
	 */
	columns?: IgGridColumn[];

	/**
	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
	 *
	 *
	 * Valid values:
	 * "array" dataSource as an array
	 * "object" ddataSource as an object
	 * "string" dataSource as a string
	 */
	dataSource?: Array<any>|Object|string;

	/**
	 * Specifies a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
	 *
	 */
	dataSourceUrl?: string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
	 *
	 */
	dataSourceType?: string;

	/**
	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
	 *
	 */
	responseDataKey?: string;

	/**
	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
	 */
	responseTotalRecCountKey?: string;

	/**
	 * Specifies the HTTP verb to be used to issue the requests to a remote data source.
	 *
	 */
	requestType?: string;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	responseContentType?: string;

	/**
	 * Controls the visibility of the grid header.
	 *
	 */
	showHeader?: boolean;

	/**
	 * Controls the visibility of the grid footer.
	 *
	 */
	showFooter?: boolean;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
	 *
	 */
	fixedHeaders?: boolean;

	/**
	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
	 *
	 */
	fixedFooters?: boolean;

	/**
	 * Caption text that will be shown above the grid header.
	 *
	 */
	caption?: string;

	/**
	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
	 *
	 */
	features?: IgGridFeature[];

	/**
	 * Initial tabIndex attribute that will be set on all focusable elements.
	 *
	 */
	tabIndex?: number;

	/**
	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
	 *
	 */
	localSchemaTransform?: boolean;

	/**
	 * Key of the column containing unique identifiers for the data records.
	 *
	 */
	primaryKey?: string;

	/**
	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
	 *
	 */
	serializeTransactionLog?: boolean;

	/**
	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
	 *
	 */
	autoCommit?: boolean;

	/**
	 * If set to true, the following behavior will take place:
	 * If a new row is added, and then deleted, there will be no transaction added to the log.
	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
	 *
	 */
	aggregateTransactions?: boolean;

	/**
	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 *
	 * Valid values:
	 * "date" formats only Date columns
	 * "time" formats only Time columns
	 * "number" formats only number columns
	 * "dateandnumber" formats both Date and number columns
	 * "true" formats Date and number columns
	 * "false" auto formatting is disabled
	 */
	autoFormat?: string|boolean;

	/**
	 * Gets sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
	 *
	 */
	renderCheckboxes?: boolean;

	/**
	 * URL to which updating requests will be made.
	 *
	 */
	updateUrl?: string;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
	 *
	 */
	alternateRowStyles?: boolean;

	/**
	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
	 *
	 */
	autofitLastColumn?: boolean;

	/**
	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 *
	 */
	enableHoverStyles?: boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 *
	 */
	enableUTCDates?: boolean;

	/**
	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
	 *
	 */
	mergeUnboundColumns?: boolean;

	/**
	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
	 *
	 */
	jsonpRequest?: boolean;

	/**
	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
	 *
	 */
	enableResizeContainerCheck?: boolean;

	/**
	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
	 *
	 *
	 * Valid values:
	 * "none" Always hide the feature chooser icon; The feature chooser is shown on tapping/clicking the column header.
	 * "desktopOnly" Always show the icon on desktop but hide when touch device detected.
	 * "always" Always show it in any environment. Chooser is shown when tapping the gear icon or column header.
	 */
	featureChooserIconDisplay?: string;

	/**
	 * Settings related to content scrolling.
	 *
	 */
	scrollSettings?: IgGridScrollSettings;

	/**
	 * Fired when a row is about to be expanded.
	 */
	rowExpanding?: RowExpandingEvent;

	/**
	 * Fired when a row is expanded.
	 */
	rowExpanded?: RowExpandedEvent;

	/**
	 * Fired when a row is about to be collapsed.
	 */
	rowCollapsing?: RowCollapsingEvent;

	/**
	 * Fired after a row is collapsed
	 */
	rowCollapsed?: RowCollapsedEvent;

	/**
	 * Event fired when a cell is clicked.
	 */
	cellClick?: CellClickEvent;

	/**
	 * Event fired when a cell is right clicked.
	 */
	cellRightClick?: CellRightClickEvent;

	/**
	 * Event fired before data binding takes place.
	 *
	 * Return false in order to cancel data binding.
	 */
	dataBinding?: DataBindingEvent;

	/**
	 * Event fired after data binding is complete.
	 */
	dataBound?: DataBoundEvent;

	/**
	 * Event fired before the grid starts rendering (all contents).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 * Return false in order to cancel grid rendering.
	 */
	rendering?: RenderingEvent;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 */
	rendered?: RenderedEvent;

	/**
	 * Event fired before the TBODY holding the data records starts its rendering.
	 * Return false in order to cancel data records rendering.
	 */
	dataRendering?: DataRenderingEvent;

	/**
	 * Event fired after all of the data records in the grid table body have been rendered.
	 */
	dataRendered?: DataRenderedEvent;

	/**
	 * Event fired before the header starts its rendering.
	 * Return false in order to cancel header rendering.
	 */
	headerRendering?: HeaderRenderingEvent;

	/**
	 * Event fired after the header has been rendered.
	 */
	headerRendered?: HeaderRenderedEvent;

	/**
	 * Event fired before the caption starts its rendering.
	 * Return false in order to cancel caption rendering.
	 */
	captionRendering?: CaptionRenderingEvent;

	/**
	 * Event fired after the caption has been rendered.
	 */
	captionRendered?: CaptionRenderedEvent;

	/**
	 * Event fired before the footer starts its rendering.
	 *
	 * Return false in order to cancel footer rendering.
	 */
	footerRendering?: FooterRenderingEvent;

	/**
	 * Event fired after the footer has been rendered.
	 */
	footerRendered?: FooterRenderedEvent;

	/**
	 * Event fired after every TH in the grid header has been rendered.
	 */
	headerCellRendered?: HeaderCellRenderedEvent;

	/**
	 * Event fired before actual data rows (TRs) are rendered.
	 * Return false in order to cancel rows rendering.
	 */
	rowsRendering?: RowsRenderingEvent;

	/**
	 * Event fired after data rows are rendered.
	 */
	rowsRendered?: RowsRenderedEvent;

	/**
	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
	 */
	schemaGenerated?: SchemaGeneratedEvent;

	/**
	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
	 */
	columnsCollectionModified?: ColumnsCollectionModifiedEvent;

	/**
	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
	 * such as data binding, paging, sorting, etc.
	 */
	requestError?: RequestErrorEvent;

	/**
	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
	 */
	created?: CreatedEvent;

	/**
	 * Fired when the grid is destroyed
	 */
	destroyed?: DestroyedEvent;

	/**
	 * Option for igTreeGrid
	 */
	[optionName: string]: any;
}
interface IgTreeGridMethods {
	/**
	 * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
	 *
	 * @param rowId If specified, will only rollback the transactions with that row id.
	 * @param updateUI Whether to update the UI or not.
	 */
	rollback(rowId?: Object, updateUI?: boolean): any[];

	/**
	 * Causes the treegrid to data bind to the data source (local or remote) , and re-render all of the data
	 */
	dataBind(): void;

	/**
	 * Toggle row by specified row or row identifier
	 *
	 * @param row jQuery table row object or a row id.
	 * @param callback Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
	 */
	toggleRow(row: Object, callback?: Function): void;

	/**
	 * Expands a parent row by specified row or row identifier
	 *
	 * @param row jQuery table row object or a row id.
	 * @param callback Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
	 */
	expandRow(row: Object, callback?: Function): void;

	/**
	 * Collapses a parent row by specified row or row identifier
	 *
	 * @param row jQuery table row object, raw DOM row object or a row id.
	 * @param callback Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
	 */
	collapseRow(row: Object, callback?: Function): void;

	/**
	 * Adds a new row (TR) to the grid as a child of a specific row, by taking a data row object. Assumes the record will have the primary key.
	 *
	 * @param rec The data row JavaScript object.
	 * @param parentId Identifier/key of the targeted parent row. If missing, then the new row is rendered to the bottom of the grid.
	 */
	renderNewChild(rec: Object, parentId?: string): void;

	/**
	 * Destroys igTreeGrid
	 */
	destroy(): Object;

	/**
	 * Returns the element holding the data records
	 */
	widget(): void;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.iggrid#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.iggrid#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Returns whether grid has non-data fixed columns(e.g. row selectors column)
	 */
	hasFixedDataSkippedColumns(): boolean;

	/**
	 * Returns true if grid has at least one fixed columns(even if a non-data column - like row-selectors column)
	 */
	hasFixedColumns(): boolean;

	/**
	 * Returns the current fixing direction. NOTE - use only if ColumnFixing feature is enabled
	 * @return left|right
	 */
	fixingDirection(): string;

	/**
	 * Returns whether the column with identifier colKey is fixed
	 *
	 * @param colKey An identifier of the column which should be checked. It can be a key or visible index.
	 */
	isFixedColumn(colKey: Object): boolean;

	/**
	 * Called to detect whether grid container is resized. When autoAdjustHeight is true and height of the grid is changed then the height of grid is re-set.
	 */
	resizeContainer(): void;

	/**
	 * Returns whether the header identified by colKey is multicolumn header(has children)
	 *
	 * @param colKey value of the column key
	 */
	isGroupHeader(colKey: string): Object;

	/**
	 * Returns an object that contains information on the passed Dom element
	 *
	 * rowId - the id of the record associated with the element - if primaryKey is not set this will be null.
	 * rowIndex - the index (in the DOM) of the row associated with the element.
	 * recordIndex - index of the data record associated with this element in the current dataView.
	 * columnObject  - the column object associated with this element ( if the element is tr this will be null)
	 *
	 * @param elem The Dom element or jQuery object which can be a TD or TR element from the grid.
	 */
	getElementInfo(elem: Element): Object;

	/**
	 * Returns the ID of the TABLE element where data records are rendered
	 */
	id(): string;

	/**
	 * Returns the DIV that is the topmost container of the grid widget
	 */
	container(): Element;

	/**
	 * Returns the table that contains the header cells
	 */
	headersTable(): Element;

	/**
	 * Returns the table that contains the footer cells
	 */
	footersTable(): Element;

	/**
	 * Returns the DIV that is used as a scroll container for the grid contents
	 */
	scrollContainer(): Element;

	/**
	 * Returns the DIV that is the topmost container of the fixed grid - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedContainer(): Element;

	/**
	 * Returns the DIV that is the topmost container of the fixed body grid - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedBodyContainer(): Element;

	/**
	 * Returns container(jQuery representation) containing fixed footer - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedFooterContainer(): Object;

	/**
	 * Returns container(jQuery representation) containing fixed header - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedHeaderContainer(): Object;

	/**
	 * Returns the table that contains the FIXED header cells - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedHeadersTable(): Element;

	/**
	 * Returns the table that contains the footer cells - contains fixed columns(in ColumnFixing scenario)
	 */
	fixedFootersTable(): Element;

	/**
	 * Returns the cell TD element at the specified location
	 *
	 * @param x The column index.
	 * @param y The row index.
	 * @param isFixed Optional parameter - if true get cell TD at the specified location from the fixed table
	 */
	cellAt(x: number, y: number, isFixed: boolean): Element;

	/**
	 * Returns the cell TD element by row id and column key
	 *
	 * @param rowId The id of the row.
	 * @param columnKey The column key.
	 */
	cellById(rowId: Object, columnKey: string): Element;

	/**
	 * Returns the fixed table - contains fixed columns(in ColumnFixing scenario). If there aren't fixed columns returns the grid table
	 */
	fixedTable(): Object;

	/**
	 * Gets all immediate children of the current grid
	 */
	immediateChildrenWidgets(): any[];

	/**
	 * Gets all children of the current grid, recursively
	 */
	childrenWidgets(): any[];

	/**
	 * Gets all children's elements of the current grid, recursively
	 */
	children(): any[];

	/**
	 * Gets all immediate children's elements of the current grid
	 */
	immediateChildren(): any[];

	/**
	 * Returns the row (TR element) at the specified index. jQuery selectors aren't used for performance reasons
	 *
	 * @param i The row index.
	 */
	rowAt(i: number): Element;

	/**
	 * Returns the row TR element by row id
	 *
	 * @param rowId The id of the row.
	 * @param isFixed Specify search in the fixed container.
	 */
	rowById(rowId: Object, isFixed?: boolean): Element;

	/**
	 * Returns the fixed row (TR element) at the specified index. jQuery selectors aren't used for performance reasons(in ColumnFixing scenario - only when there is at least one fixed column)
	 *
	 * @param i The row index.
	 */
	fixedRowAt(i: number): Element;

	/**
	 * Returns a list of all fixed TR elements holding data in the grid(in ColumnFixing scenario - only when there is at least one fixed column)
	 */
	fixedRows(): any[];

	/**
	 * Returns a list of all TR elements holding data in the grid(when there is at least one fixed column returns rows only in the UNFIXED table)
	 */
	rows(): any[];

	/**
	 * Returns all data fixed rows recursively, not only the immediate ones(in ColumnFixing scenario - only when there is at least one fixed column)
	 */
	allFixedRows(): any[];

	/**
	 * Returns all data rows recursively, not only the immediate ones(when there is at least one fixed column returns rows only in the UNFIXED table)
	 */
	allRows(): any[];

	/**
	 * Returns a column object by the specified column key
	 *
	 * @param key The column key.
	 */
	columnByKey(key: string): Object;

	/**
	 * Returns a column object by the specified header text. If there are multiple matches, returns the first one.
	 *
	 * @param text The column header text.
	 */
	columnByText(text: string): Object;

	/**
	 * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
	 * If multiple selection is disabled the function will return null.
	 */
	selectedCells(): any[];

	/**
	 * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
	 * If multiple selection is disabled the function will return null.
	 */
	selectedRows(): any[];

	/**
	 * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
	 * If multiple selection is enabled the function will return null.
	 */
	selectedCell(): Object;

	/**
	 * Returns the currently selected row that has the format { element: , index: }, if any.
	 * If multiple selection is enabled the function will return null.
	 */
	selectedRow(): Object;

	/**
	 * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
	 */
	activeCell(): Object;

	/**
	 * Returns the currently active (focused) row that has the format { element: , index: }, if any.
	 */
	activeRow(): Object;

	/**
	 * Retrieves a cell value using the row index and the column key. If a primaryKey is defined, rowId is assumed to be the row Key (not index).
	 * If primary key is not defined, then rowId is converted to a number and is used as a row index.
	 *
	 * @param rowId Row index or row key (primary key).
	 * @param colKey The column key.
	 */
	getCellValue(rowId: Object, colKey: string): Object;

	/**
	 * Returns the cell text. If colKey is a number, the index of the column is used (instead of a column name)- does not apply when using a Multi-Row Layout grid.
	 * This is the actual text (or HTML string) for the contents of the cell.
	 *
	 * @param rowId Row index or row data key (primary key)
	 * @param colKey Column key.
	 */
	getCellText(rowId: Object, colKey: string): string;

	/**
	 * Sets a new template for a column after initialization and renders the grid if not explicitly disabled. This method will replace any existing explicitly set row template and will build one anew from the column ones.
	 *
	 * @param col An identifier of the column to set template for (index or key)
	 * @param tmpl The column template to set
	 * @param render Should the grid rerender after template is set
	 */
	setColumnTemplate(col: Object, tmpl: string, render?: boolean): void;

	/**
	 * Commits all pending transactions to the client data source. Note that there won't be anything to commit on the UI, since it is updated instantly. In order to rollback the actual UI, a call to dataBind() is required.
	 *
	 * @param rowId If specified, will commit only that transaction corresponding to the specified record key.
	 */
	commit(rowId?: Object): void;

	/**
	 * Returns a record by a specified key (requires that primaryKey is set in the settings).
	 * That is a wrapper for this.dataSource.findRecordByKey(key).
	 *
	 * @param key Primary key of the record
	 */
	findRecordByKey(key: Object): Object;

	/**
	 * Returns a standalone object (copy) that represents the committed transactions, but detached from the data source.
	 * That is a wrapper for this.dataSource.getDetachedRecord(t).
	 *
	 * @param t A transaction object.
	 */
	getDetachedRecord(t: Object): Object;

	/**
	 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source.
	 * That is a wrapper for this.dataSource.pendingTransactions().
	 */
	pendingTransactions(): any[];

	/**
	 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
	 * That is a wrapper for this.dataSource.allTransactions().
	 */
	allTransactions(): any[];

	/**
	 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently.
	 * That is a wrapper for this.dataSource.transactionsAsString().
	 */
	transactionsAsString(): string;

	/**
	 * Invokes an AJAX request to the updateUrl option (if specified) and passes the serialized transaction log (a serialized JSON string) as part of the POST request.
	 *
	 * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
	 * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
	 */
	saveChanges(success: Function, error: Function): void;

	/**
	 * Adds a new row (TR) to the grid, by taking a data row object. Assumes the record will have the primary key.
	 *
	 * @param rec Identifier/key of row. If missing, then number of rows in grid is used.
	 */
	renderNewRow(rec?: string): void;

	/**
	 * If the data source points to a local JSON array of data, and it is necessary to reset it at runtime, it must be done through this API member instead of the options (options.dataSource)
	 *
	 * @param dataSource New data source object.
	 */
	dataSourceObject(dataSource: Object): void;

	/**
	 * Returns the total number of records in the underlying backend. If paging or filtering is enabled, this may differ from the number of records in the client-side data source.
	 * In order for this to work, the response JSON/XML must include a property that specifies the total number of records, which name is specified by options.responseTotalRecCountKey.
	 * This functionality is completely delegated to the data source control.
	 */
	totalRecordsCount(): number;

	/**
	 * Moves a visible column at a specified place, in front or behind a target column or at a target index
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
	 * @param target An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
	 * @param after Specifies whether the column moved should be moved after or before the target column. This parameter is disregarded if there is no target column specified but a target index is used.
	 * @param inDom Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
	 * @param callback Specifies a custom function to be called when the column is moved.
	 */
	moveColumn(column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;

	/**
	 * Shows a hidden column. If the column is not hidden the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a column index. If a string is provided it will be used as a column key.
	 * @param callback Specifies a custom function to be called when the column is shown(optional)
	 */
	showColumn(column: Object, callback: Function): void;

	/**
	 * Hides a visible column. If the column is hidden the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a column index else if a string is provided it will be used as a column key.
	 * @param callback Specifies a custom function to be called when the column is hidden(optional)
	 */
	hideColumn(column: Object, callback: Function): void;

	/**
	 * Gets unbound values for the specified column key. If key is not specified returns all unboundvalues
	 *
	 * @param key column key
	 */
	getUnboundValues(key: string): Object;

	/**
	 * Sets unbound values for the unbound column with the specified key. If removeOldValues is true then values(if any) for the unbound columns are re-set with the new values
	 *
	 * @param key key of the unbound column
	 * @param values array of values to be set on unbound values
	 * @param removeOldValues if true removes current unbound values(if any) for the specified column and apply the new ones specified in parameter values. Otherwise merge current values with the specified in parameter values
	 */
	setUnboundValues(key: string, values: any[], removeOldValues: Object): void;

	/**
	 * Sets unbound value for the unbound cell by the specified column key and row primary key.
	 *
	 * @param col key of the unbound column
	 * @param rowId primary key value of the row
	 * @param val value to be set on unbound cell
	 * @param notToRender if false will re-render the row
	 */
	setUnboundValueByPK(col: string, rowId: string, val: Object, notToRender: Object): void;

	/**
	 * Returns an unbound column with the specified key. If not found returns null
	 *
	 * @param key a column key
	 */
	getUnboundColumnByKey(key: string): Object;

	/**
	 * Returns whether there is vertical scrollbar. Because of perfrormance issues in older Internet Explorer especially 8,9 - there is no need to check if height is not set - there is no scrollbar OR if row virtualization is enabled - it is supposed there is vertical scrollbar
	 */
	hasVerticalScrollbar(): Object;

	/**
	 * Auto resize columns that have property width set to "*" so content to be auto-fitted(not shrinked/cutted). Auto-resizing is applied ONLY for visible columns
	 */
	autoSizeColumns(): void;

	/**
	 * Calculates the width of the column so its content to be auto-fitted to the width of the data in it(the content should NOT be shrinked/cutted)
	 *
	 * @param columnIndex Visible column index
	 */
	calculateAutoFitColumnWidth(columnIndex: number): number;

	/**
	 * Get visible index by specified column key. If column is not found or is hidden then returns -1.
	 * Note: Method does not count column groups (Multi-Column Headers).
	 *
	 * @param columnKey columnKey
	 * @param includeDataSkip Optional parameter - if set to true include non data columns(like expander column, row selectors column, etc.) in calculations
	 */
	getVisibleIndexByKey(columnKey: string, includeDataSkip: boolean): number;

	/**
	 * When called the method re-renders the whole grid(also rebinds to the data source) and renders the cols object
	 *
	 * @param cols an array of column objects
	 */
	renderMultiColumnHeader(cols: any[]): void;

	/**
	 * Scroll to the specified row or specified position(in pixels)
	 *
	 * @param scrollerPosition An identifier of the vertical scroll position. When it is string then it is interpreted as pixels otherwise it is the row number
	 */
	virtualScrollTo(scrollerPosition: Object): void;

	/**
	 * Returns column object and visible index for the table cell(TD) which is passed as argument
	 *
	 * @param $td cell(TD) - either DOM TD element or jQuery object
	 */
	getColumnByTD($td: Object): Object;
}
interface JQuery {
	data(propertyName: "igTreeGrid"): IgTreeGridMethods;
}

interface JQuery {
	igTreeGrid(methodName: "rollback", rowId?: Object, updateUI?: boolean): any[];
	igTreeGrid(methodName: "dataBind"): void;
	igTreeGrid(methodName: "toggleRow", row: Object, callback?: Function): void;
	igTreeGrid(methodName: "expandRow", row: Object, callback?: Function): void;
	igTreeGrid(methodName: "collapseRow", row: Object, callback?: Function): void;
	igTreeGrid(methodName: "renderNewChild", rec: Object, parentId?: string): void;
	igTreeGrid(methodName: "destroy"): Object;
	igTreeGrid(methodName: "widget"): void;
	igTreeGrid(methodName: "changeRegional"): void;
	igTreeGrid(methodName: "hasFixedDataSkippedColumns"): boolean;
	igTreeGrid(methodName: "hasFixedColumns"): boolean;
	igTreeGrid(methodName: "fixingDirection"): string;
	igTreeGrid(methodName: "isFixedColumn", colKey: Object): boolean;
	igTreeGrid(methodName: "resizeContainer"): void;
	igTreeGrid(methodName: "isGroupHeader", colKey: string): Object;
	igTreeGrid(methodName: "getElementInfo", elem: Element): Object;
	igTreeGrid(methodName: "id"): string;
	igTreeGrid(methodName: "container"): Element;
	igTreeGrid(methodName: "headersTable"): Element;
	igTreeGrid(methodName: "footersTable"): Element;
	igTreeGrid(methodName: "scrollContainer"): Element;
	igTreeGrid(methodName: "fixedContainer"): Element;
	igTreeGrid(methodName: "fixedBodyContainer"): Element;
	igTreeGrid(methodName: "fixedFooterContainer"): Object;
	igTreeGrid(methodName: "fixedHeaderContainer"): Object;
	igTreeGrid(methodName: "fixedHeadersTable"): Element;
	igTreeGrid(methodName: "fixedFootersTable"): Element;
	igTreeGrid(methodName: "cellAt", x: number, y: number, isFixed: boolean): Element;
	igTreeGrid(methodName: "cellById", rowId: Object, columnKey: string): Element;
	igTreeGrid(methodName: "fixedTable"): Object;
	igTreeGrid(methodName: "immediateChildrenWidgets"): any[];
	igTreeGrid(methodName: "childrenWidgets"): any[];
	igTreeGrid(methodName: "children"): any[];
	igTreeGrid(methodName: "immediateChildren"): any[];
	igTreeGrid(methodName: "rowAt", i: number): Element;
	igTreeGrid(methodName: "rowById", rowId: Object, isFixed?: boolean): Element;
	igTreeGrid(methodName: "fixedRowAt", i: number): Element;
	igTreeGrid(methodName: "fixedRows"): any[];
	igTreeGrid(methodName: "rows"): any[];
	igTreeGrid(methodName: "allFixedRows"): any[];
	igTreeGrid(methodName: "allRows"): any[];
	igTreeGrid(methodName: "columnByKey", key: string): Object;
	igTreeGrid(methodName: "columnByText", text: string): Object;
	igTreeGrid(methodName: "selectedCells"): any[];
	igTreeGrid(methodName: "selectedRows"): any[];
	igTreeGrid(methodName: "selectedCell"): Object;
	igTreeGrid(methodName: "selectedRow"): Object;
	igTreeGrid(methodName: "activeCell"): Object;
	igTreeGrid(methodName: "activeRow"): Object;
	igTreeGrid(methodName: "getCellValue", rowId: Object, colKey: string): Object;
	igTreeGrid(methodName: "getCellText", rowId: Object, colKey: string): string;
	igTreeGrid(methodName: "setColumnTemplate", col: Object, tmpl: string, render?: boolean): void;
	igTreeGrid(methodName: "commit", rowId?: Object): void;
	igTreeGrid(methodName: "findRecordByKey", key: Object): Object;
	igTreeGrid(methodName: "getDetachedRecord", t: Object): Object;
	igTreeGrid(methodName: "pendingTransactions"): any[];
	igTreeGrid(methodName: "allTransactions"): any[];
	igTreeGrid(methodName: "transactionsAsString"): string;
	igTreeGrid(methodName: "saveChanges", success: Function, error: Function): void;
	igTreeGrid(methodName: "renderNewRow", rec?: string): void;
	igTreeGrid(methodName: "dataSourceObject", dataSource: Object): void;
	igTreeGrid(methodName: "totalRecordsCount"): number;
	igTreeGrid(methodName: "moveColumn", column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
	igTreeGrid(methodName: "showColumn", column: Object, callback: Function): void;
	igTreeGrid(methodName: "hideColumn", column: Object, callback: Function): void;
	igTreeGrid(methodName: "getUnboundValues", key: string): Object;
	igTreeGrid(methodName: "setUnboundValues", key: string, values: any[], removeOldValues: Object): void;
	igTreeGrid(methodName: "setUnboundValueByPK", col: string, rowId: string, val: Object, notToRender: Object): void;
	igTreeGrid(methodName: "getUnboundColumnByKey", key: string): Object;
	igTreeGrid(methodName: "hasVerticalScrollbar"): Object;
	igTreeGrid(methodName: "autoSizeColumns"): void;
	igTreeGrid(methodName: "calculateAutoFitColumnWidth", columnIndex: number): number;
	igTreeGrid(methodName: "getVisibleIndexByKey", columnKey: string, includeDataSkip: boolean): number;
	igTreeGrid(methodName: "renderMultiColumnHeader", cols: any[]): void;
	igTreeGrid(methodName: "virtualScrollTo", scrollerPosition: Object): void;
	igTreeGrid(methodName: "getColumnByTD", $td: Object): Object;

	/**
	 * Gets the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "indentation"): string;

	/**
	 * Sets the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "indentation", optionValue: string): void;

	/**
	 * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "initialIndentationLevel"): number;

	/**
	 * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "initialIndentationLevel", optionValue: number): void;

	/**
	 * Gets if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "showExpansionIndicator"): boolean;

	/**
	 * Sets if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "showExpansionIndicator", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the expansion indicator tooltip text.
	 * Use option [locale.expandTooltipText](ui.igtreegrid#options:locale.expandTooltipText).
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "expandTooltipText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the expansion indicator tooltip text.
	 * Use option [locale.expandTooltipText](ui.igtreegrid#options:locale.expandTooltipText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "expandTooltipText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the collapse indicator tooltip text.
	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "collapseTooltipText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the collapse indicator tooltip text.
	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "collapseTooltipText", optionValue: string): void;

	/**
	 * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "foreignKey"): string;

	/**
	 * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "foreignKey", optionValue: string): void;

	/**
	 * Gets the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "initialExpandDepth"): number;

	/**
	 * Sets the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "initialExpandDepth", optionValue: number): void;

	/**
	 * Gets the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "foreignKeyRootValue"): number|string;

	/**
	 * Sets the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "foreignKeyRootValue", optionValue: number|string): void;

	/**
	 * Specify whether to render non-data column which contains expander indicators
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "renderExpansionIndicatorColumn"): boolean;

	/**
	 * Specify whether to render non-data column which contains expander indicators
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "renderExpansionIndicatorColumn", optionValue: boolean): void;

	/**
	 * A reference or name of a javascript function which changes first data cell - renders indentation according to databound level
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "renderFirstDataCellFunction"): string|Object;

	/**
	 * A reference or name of a javascript function which changes first data cell - renders indentation according to databound level
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "renderFirstDataCellFunction", optionValue: string|Object): void;

	/**
	 * Property name of the array of child data in a hierarchical data source.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "childDataKey"): string;

	/**
	 * Property name of the array of child data in a hierarchical data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "childDataKey", optionValue: string): void;

	/**
	 * A reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "renderExpansionCellFunction"): string|Object;

	/**
	 * A reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "renderExpansionCellFunction", optionValue: string|Object): void;

	/**
	 * Gets to the tree grid if data is loaded on demand from a remote server. Default is false.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "enableRemoteLoadOnDemand"): boolean;

	/**
	 * Sets to the tree grid if data is loaded on demand from a remote server. Default is false.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "enableRemoteLoadOnDemand", optionValue: boolean): void;

	/**
	 * Options object to configure data source-specific settings
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataSourceSettings"): IgTreeGridDataSourceSettings;

	/**
	 * Options object to configure data source-specific settings
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataSourceSettings", optionValue: IgTreeGridDataSourceSettings): void;
	igTreeGrid(optionLiteral: 'option', optionName: "locale"): IgTreeGridLocale;
	igTreeGrid(optionLiteral: 'option', optionName: "locale", optionValue: IgTreeGridLocale): void;

	/**
	 * Determines row virtualization mode. For igTreeGrid only continuous virtualization can be used.
	 *
	 * continuous  renders a pre-defined number of rows in the grid. On scrolling the continuous virtualization loads another portion of rows and disposes the current one.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "virtualizationMode"): string;

	/**
	 * Determines row virtualization mode. For igTreeGrid only continuous virtualization can be used.
	 *
	 * continuous  renders a pre-defined number of rows in the grid. On scrolling the continuous virtualization loads another portion of rows and disposes the current one.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "virtualizationMode", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "avgColumnWidth"): any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "avgColumnWidth", optionValue: any): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "avgRowHeight"): number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "avgRowHeight", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "columnVirtualization"): any;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "columnVirtualization", optionValue: any): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "restSettings"): IgTreeGridRestSettings;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "restSettings", optionValue: IgTreeGridRestSettings): void;

	/**
	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data  ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "autoAdjustHeight"): boolean;

	/**
	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "autoAdjustHeight", optionValue: boolean): void;

	/**
	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "defaultColumnWidth"): string|number;

	/**
	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "defaultColumnWidth", optionValue: string|number): void;

	/**
	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "autoGenerateColumns"): boolean;

	/**
	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "autoGenerateColumns", optionValue: boolean): void;

	/**
	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "virtualization"): boolean;

	/**
	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "virtualization", optionValue: boolean): void;

	/**
	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowVirtualization"): boolean;

	/**
	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowVirtualization", optionValue: boolean): void;

	/**
	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "virtualizationMouseWheelStep"): number;

	/**
	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "virtualizationMouseWheelStep", optionValue: number): void;

	/**
	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "adjustVirtualHeights"): boolean;

	/**
	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "adjustVirtualHeights", optionValue: boolean): void;

	/**
	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "templatingEngine"): string;

	/**
	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "templatingEngine", optionValue: string): void;

	/**
	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "columns"): IgGridColumn[];

	/**
	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "columns", optionValue: IgGridColumn[]): void;

	/**
	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "dataSource"): Array<any>|Object|string;

	/**
	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "dataSource", optionValue: Array<any>|Object|string): void;

	/**
	 * Gets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataSourceUrl"): string;

	/**
	 * Sets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataSourceType"): string;

	/**
	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;

	/**
	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "responseDataKey"): string;

	/**
	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;

	/**
	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;

	/**
	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;

	/**
	 * Gets the HTTP verb to be used to issue the requests to a remote data source.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "requestType"): string;

	/**
	 * Sets the HTTP verb to be used to issue the requests to a remote data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "responseContentType"): string;

	/**
	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;

	/**
	 * Controls the visibility of the grid header.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "showHeader"): boolean;

	/**
	 * Controls the visibility of the grid header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "showHeader", optionValue: boolean): void;

	/**
	 * Controls the visibility of the grid footer.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "showFooter"): boolean;

	/**
	 * Controls the visibility of the grid footer.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "showFooter", optionValue: boolean): void;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "fixedHeaders"): boolean;

	/**
	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "fixedHeaders", optionValue: boolean): void;

	/**
	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "fixedFooters"): boolean;

	/**
	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "fixedFooters", optionValue: boolean): void;

	/**
	 * Caption text that will be shown above the grid header.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "caption"): string;

	/**
	 * Caption text that will be shown above the grid header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "caption", optionValue: string): void;

	/**
	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "features"): IgGridFeature[];

	/**
	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "features", optionValue: IgGridFeature[]): void;

	/**
	 * Initial tabIndex attribute that will be set on all focusable elements.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * Initial tabIndex attribute that will be set on all focusable elements.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "localSchemaTransform"): boolean;

	/**
	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "localSchemaTransform", optionValue: boolean): void;

	/**
	 * Key of the column containing unique identifiers for the data records.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "primaryKey"): string;

	/**
	 * Key of the column containing unique identifiers for the data records.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "primaryKey", optionValue: string): void;

	/**
	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "serializeTransactionLog"): boolean;

	/**
	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "serializeTransactionLog", optionValue: boolean): void;

	/**
	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "autoCommit"): boolean;

	/**
	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "autoCommit", optionValue: boolean): void;

	/**
	 * If set to true, the following behavior will take place:
	 * If a new row is added, and then deleted, there will be no transaction added to the log.
	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "aggregateTransactions"): boolean;

	/**
	 * If set to true, the following behavior will take place:
	 * If a new row is added, and then deleted, there will be no transaction added to the log.
	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "aggregateTransactions", optionValue: boolean): void;

	/**
	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "autoFormat"): string|boolean;

	/**
	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "autoFormat", optionValue: string|boolean): void;

	/**
	 * Gets  ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "renderCheckboxes"): boolean;

	/**
	 * Sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "renderCheckboxes", optionValue: boolean): void;

	/**
	 * URL to which updating requests will be made.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "updateUrl"): string;

	/**
	 * URL to which updating requests will be made.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "updateUrl", optionValue: string): void;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "alternateRowStyles"): boolean;

	/**
	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "alternateRowStyles", optionValue: boolean): void;

	/**
	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "autofitLastColumn"): boolean;

	/**
	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "autofitLastColumn", optionValue: boolean): void;

	/**
	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "enableHoverStyles"): boolean;

	/**
	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "enableHoverStyles", optionValue: boolean): void;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "enableUTCDates"): boolean;

	/**
	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "enableUTCDates", optionValue: boolean): void;

	/**
	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "mergeUnboundColumns"): boolean;

	/**
	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "mergeUnboundColumns", optionValue: boolean): void;

	/**
	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "jsonpRequest"): boolean;

	/**
	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "jsonpRequest", optionValue: boolean): void;

	/**
	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "enableResizeContainerCheck"): boolean;

	/**
	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "enableResizeContainerCheck", optionValue: boolean): void;

	/**
	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
	 *
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "featureChooserIconDisplay"): string;

	/**
	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGrid(optionLiteral: 'option', optionName: "featureChooserIconDisplay", optionValue: string): void;

	/**
	 * Settings related to content scrolling.
	 *
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "scrollSettings"): IgGridScrollSettings;

	/**
	 * Settings related to content scrolling.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "scrollSettings", optionValue: IgGridScrollSettings): void;

	/**
	 * Fired when a row is about to be expanded.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowExpanding"): RowExpandingEvent;

	/**
	 * Fired when a row is about to be expanded.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowExpanding", optionValue: RowExpandingEvent): void;

	/**
	 * Fired when a row is expanded.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowExpanded"): RowExpandedEvent;

	/**
	 * Fired when a row is expanded.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowExpanded", optionValue: RowExpandedEvent): void;

	/**
	 * Fired when a row is about to be collapsed.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowCollapsing"): RowCollapsingEvent;

	/**
	 * Fired when a row is about to be collapsed.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowCollapsing", optionValue: RowCollapsingEvent): void;

	/**
	 * Fired after a row is collapsed
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowCollapsed"): RowCollapsedEvent;

	/**
	 * Fired after a row is collapsed
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowCollapsed", optionValue: RowCollapsedEvent): void;

	/**
	 * Event fired when a cell is clicked.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "cellClick"): CellClickEvent;

	/**
	 * Event fired when a cell is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "cellClick", optionValue: CellClickEvent): void;

	/**
	 * Event fired when a cell is right clicked.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "cellRightClick"): CellRightClickEvent;

	/**
	 * Event fired when a cell is right clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "cellRightClick", optionValue: CellRightClickEvent): void;

	/**
	 * Event fired before data binding takes place.
	 *
	 * Return false in order to cancel data binding.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;

	/**
	 * Event fired before data binding takes place.
	 *
	 * Return false in order to cancel data binding.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;

	/**
	 * Event fired after data binding is complete.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;

	/**
	 * Event fired after data binding is complete.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;

	/**
	 * Event fired before the grid starts rendering (all contents).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 * Return false in order to cancel grid rendering.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;

	/**
	 * Event fired before the grid starts rendering (all contents).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 * Return false in order to cancel grid rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;

	/**
	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
	 * This event is fired only when the grid is being initialized.
	 * It will not be fired if the grid is rebound to its data
	 * (for example, when calling the dataBind() API method
	 * or when changing the page size (when paging is enabled)).
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;

	/**
	 * Event fired before the TBODY holding the data records starts its rendering.
	 * Return false in order to cancel data records rendering.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataRendering"): DataRenderingEvent;

	/**
	 * Event fired before the TBODY holding the data records starts its rendering.
	 * Return false in order to cancel data records rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataRendering", optionValue: DataRenderingEvent): void;

	/**
	 * Event fired after all of the data records in the grid table body have been rendered.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataRendered"): DataRenderedEvent;

	/**
	 * Event fired after all of the data records in the grid table body have been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "dataRendered", optionValue: DataRenderedEvent): void;

	/**
	 * Event fired before the header starts its rendering.
	 * Return false in order to cancel header rendering.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "headerRendering"): HeaderRenderingEvent;

	/**
	 * Event fired before the header starts its rendering.
	 * Return false in order to cancel header rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "headerRendering", optionValue: HeaderRenderingEvent): void;

	/**
	 * Event fired after the header has been rendered.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "headerRendered"): HeaderRenderedEvent;

	/**
	 * Event fired after the header has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "headerRendered", optionValue: HeaderRenderedEvent): void;

	/**
	 * Event fired before the caption starts its rendering.
	 * Return false in order to cancel caption rendering.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "captionRendering"): CaptionRenderingEvent;

	/**
	 * Event fired before the caption starts its rendering.
	 * Return false in order to cancel caption rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "captionRendering", optionValue: CaptionRenderingEvent): void;

	/**
	 * Event fired after the caption has been rendered.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "captionRendered"): CaptionRenderedEvent;

	/**
	 * Event fired after the caption has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "captionRendered", optionValue: CaptionRenderedEvent): void;

	/**
	 * Event fired before the footer starts its rendering.
	 *
	 * Return false in order to cancel footer rendering.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "footerRendering"): FooterRenderingEvent;

	/**
	 * Event fired before the footer starts its rendering.
	 *
	 * Return false in order to cancel footer rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "footerRendering", optionValue: FooterRenderingEvent): void;

	/**
	 * Event fired after the footer has been rendered.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "footerRendered"): FooterRenderedEvent;

	/**
	 * Event fired after the footer has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "footerRendered", optionValue: FooterRenderedEvent): void;

	/**
	 * Event fired after every TH in the grid header has been rendered.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "headerCellRendered"): HeaderCellRenderedEvent;

	/**
	 * Event fired after every TH in the grid header has been rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "headerCellRendered", optionValue: HeaderCellRenderedEvent): void;

	/**
	 * Event fired before actual data rows (TRs) are rendered.
	 * Return false in order to cancel rows rendering.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowsRendering"): RowsRenderingEvent;

	/**
	 * Event fired before actual data rows (TRs) are rendered.
	 * Return false in order to cancel rows rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowsRendering", optionValue: RowsRenderingEvent): void;

	/**
	 * Event fired after data rows are rendered.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowsRendered"): RowsRenderedEvent;

	/**
	 * Event fired after data rows are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "rowsRendered", optionValue: RowsRenderedEvent): void;

	/**
	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "schemaGenerated"): SchemaGeneratedEvent;

	/**
	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "schemaGenerated", optionValue: SchemaGeneratedEvent): void;

	/**
	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "columnsCollectionModified"): ColumnsCollectionModifiedEvent;

	/**
	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "columnsCollectionModified", optionValue: ColumnsCollectionModifiedEvent): void;

	/**
	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
	 * such as data binding, paging, sorting, etc.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "requestError"): RequestErrorEvent;

	/**
	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
	 * such as data binding, paging, sorting, etc.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "requestError", optionValue: RequestErrorEvent): void;

	/**
	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "created"): CreatedEvent;

	/**
	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "created", optionValue: CreatedEvent): void;

	/**
	 * Fired when the grid is destroyed
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "destroyed"): DestroyedEvent;

	/**
	 * Fired when the grid is destroyed
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGrid(optionLiteral: 'option', optionName: "destroyed", optionValue: DestroyedEvent): void;
	igTreeGrid(options: IgTreeGrid): JQuery;
	igTreeGrid(optionLiteral: 'option', optionName: string): any;
	igTreeGrid(optionLiteral: 'option', options: IgTreeGrid): JQuery;
	igTreeGrid(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGrid(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridMultiColumnHeaders {
	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * Event fired before a group collapsing operation is executed.
	 */
	groupCollapsing?: GroupCollapsingEvent;

	/**
	 * Event fired after the group collapsing has been executed and results are rendered.
	 */
	groupCollapsed?: GroupCollapsedEvent;

	/**
	 * Event fired before a group expanding operation is executed.
	 */
	groupExpanding?: GroupExpandingEvent;

	/**
	 * Event fired after the group expanding has been executed and results are rendered.
	 */
	groupExpanded?: GroupExpandedEvent;

	/**
	 * Option for igTreeGridMultiColumnHeaders
	 */
	[optionName: string]: any;
}
interface IgTreeGridMultiColumnHeadersMethods {
	destroy(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.iggridmulticolumnheader#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.iggridmulticolumnheader#options:language) or [locale](ui.iggridmulticolumnheader#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Expands a collapsed group. If the group is expanded, the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param groupKey Group key.
	 * @param callback Specifies a custom function to be called when the group is expanded.
	 */
	expandGroup(groupKey: string, callback?: Function): void;

	/**
	 * Collapses an expanded group. If the group is collapsed, the method does nothing.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param groupKey Group key.
	 * @param callback Specifies a custom function to be called when the group is collapsed.
	 */
	collapseGroup(groupKey: string, callback?: Function): void;

	/**
	 * Toggles a collapsible group.
	 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
	 *
	 * @param groupKey Group key.
	 * @param callback Specifies a custom function to be called when the group is toggled.
	 */
	toggleGroup(groupKey: string, callback?: Function): void;

	/**
	 * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined
	 */
	getMultiColumnHeaders(): any[];
}
interface JQuery {
	data(propertyName: "igTreeGridMultiColumnHeaders"): IgTreeGridMultiColumnHeadersMethods;
}

interface JQuery {
	igTreeGridMultiColumnHeaders(methodName: "destroy"): void;
	igTreeGridMultiColumnHeaders(methodName: "changeLocale"): void;
	igTreeGridMultiColumnHeaders(methodName: "expandGroup", groupKey: string, callback?: Function): void;
	igTreeGridMultiColumnHeaders(methodName: "collapseGroup", groupKey: string, callback?: Function): void;
	igTreeGridMultiColumnHeaders(methodName: "toggleGroup", groupKey: string, callback?: Function): void;
	igTreeGridMultiColumnHeaders(methodName: "getMultiColumnHeaders"): any[];

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Event fired before a group collapsing operation is executed.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupCollapsing"): GroupCollapsingEvent;

	/**
	 * Event fired before a group collapsing operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupCollapsing", optionValue: GroupCollapsingEvent): void;

	/**
	 * Event fired after the group collapsing has been executed and results are rendered.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupCollapsed"): GroupCollapsedEvent;

	/**
	 * Event fired after the group collapsing has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupCollapsed", optionValue: GroupCollapsedEvent): void;

	/**
	 * Event fired before a group expanding operation is executed.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupExpanding"): GroupExpandingEvent;

	/**
	 * Event fired before a group expanding operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupExpanding", optionValue: GroupExpandingEvent): void;

	/**
	 * Event fired after the group expanding has been executed and results are rendered.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupExpanded"): GroupExpandedEvent;

	/**
	 * Event fired after the group expanding has been executed and results are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "groupExpanded", optionValue: GroupExpandedEvent): void;
	igTreeGridMultiColumnHeaders(options: IgTreeGridMultiColumnHeaders): JQuery;
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: string): any;
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', options: IgTreeGridMultiColumnHeaders): JQuery;
	igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridMultiColumnHeaders(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridPagingLocale {
	/**
	 * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
	 *
	 */
	contextRowLoadingText?: string;

	/**
	 * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
	 *
	 */
	contextRowRootText?: string;

	/**
	 * Option for IgTreeGridPagingLocale
	 */
	[optionName: string]: any;
}

interface ContextRowRenderingEvent {
	(event: Event, ui: ContextRowRenderingEventUIParam): void;
}

interface ContextRowRenderingEventUIParam {
	/**
	 * Gets a reference to igTreeGridPaging.
	 */
	owner?: any;

	/**
	 * Gets reference to the first data row. Null if there are no records.
	 */
	dataRow?: any;

	/**
	 * Gets current page index.
	 */
	currentPageIndex?: number;

	/**
	 * Gets the current context row mode.
	 */
	contextRowMode?: string;
}

interface ContextRowRenderedEvent {
	(event: Event, ui: ContextRowRenderedEventUIParam): void;
}

interface ContextRowRenderedEventUIParam {
	/**
	 * Gets a reference to igTreeGridPaging.
	 */
	owner?: any;

	/**
	 * Gets reference to the first data row. Null if there are no records.
	 */
	dataRow?: any;

	/**
	 * Gets current page index.
	 */
	currentPageIndex?: number;

	/**
	 * Gets array of the parent rows(of the ui.dataRow). If the dataRow is null(for instance filter is applied and no records are shown) then it is empty array. Otherwise it contains all ancestors ordered by level(including the current dataRow) - the first item is root level, the last array item is the current ui.dataRow
	 */
	parentRows?: any[];

	/**
	 * Gets the current context row mode.
	 */
	contextRowMode?: string;
}

interface IgTreeGridPaging {
	/**
	 * Sets gets paging mode.
	 *
	 *
	 * Valid values:
	 * "rootLevelOnly" Only pages records at the root of the tree grid are displayed.
	 * "allLevels" includes all visible records in paging.
	 */
	mode?: string;

	/**
	 * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is "rootLevelOnly" then the context row always shows the value of the contextRowRootText option.
	 *
	 *
	 * Valid values:
	 * "none" Does not render the contextual row
	 * "parent" Renders a read-only representation of the immediate parent row
	 * "breadcrumb" Renders a read-only breadcrumb trail representing the full path through all ancestors
	 */
	contextRowMode?: string;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
	 * Use option [locale.contextRowLoadingText](ui.igtreegridpaging#options:locale.contextRowLoadingText)
	 */
	contextRowLoadingText?: string;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
	 * Use option [locale.contextRowRootText](ui.igtreegridpaging#options:locale.contextRowRootText)
	 */
	contextRowRootText?: string;

	/**
	 * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
	 *
	 */
	breadcrumbKey?: string;

	/**
	 * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
	 *
	 */
	breadcrumbDelimiter?: string;

	/**
	 * Reference to the (or name of )function, called before rendering context row content(rendering loading message/bread crumb/parent row). The function takes 4 arguments- dataRow, $textArea- jQuery representation of the text area of the context row(when mode is loading/breadcrumb then it is <span /> otherwise <tr />), array of parent rows and context mode - "loading"|"breadcrumb"|"parent". When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
	 *
	 */
	renderContextRowFunc?: Function|string;
	locale?: IgTreeGridPagingLocale;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * Number of records loaded and displayed per page.
	 *
	 */
	pageSize?: number;

	/**
	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
	 *
	 */
	recordCountKey?: string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
	 *
	 */
	pageSizeUrlKey?: string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
	 *
	 */
	pageIndexUrlKey?: string;

	/**
	 * Current page index that's bound in the data source and rendered in the UI.
	 *
	 */
	currentPageIndex?: number;

	/**
	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * Valid values:
	 * "remote" Paging is performed by a remote end-point.
	 * "local" Paging is performed locally by the [$.ig.DataSource](ig.datasource).
	 */
	type?: string;

	/**
	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
	 *
	 */
	showPageSizeDropDown?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
	 */
	pageSizeDropDownLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
	 */
	pageSizeDropDownTrailingLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
	 */
	pagerRecordsLabelTemplate?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
	 */
	nextPageLabelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
	 */
	prevPageLabelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
	 */
	firstPageLabelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
	 */
	lastPageLabelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
	 */
	currentPageDropDownLeadingLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
	 */
	currentPageDropDownTrailingLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
	 */
	currentPageDropDownTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
	 */
	pageSizeDropDownTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
	 */
	pagerRecordsLabelTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
	 */
	prevPageTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
	 */
	nextPageTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
	 */
	firstPageTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
	 */
	lastPageTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
	 */
	pageTooltipFormat?: string;

	/**
	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
	 *
	 *
	 * Valid values:
	 * "above" The page size drop down will be rendered above the grid header.
	 * "inpager" The page size drop down will be rendered next to page links.
	 */
	pageSizeDropDownLocation?: string;

	/**
	 * Option specifying whether to show summary label for the currently rendered records or not.
	 *
	 */
	showPagerRecordsLabel?: boolean;

	/**
	 * Option specifying whether to render the first and last page navigation buttons.
	 *
	 */
	showFirstLastPages?: boolean;

	/**
	 * Option specifying whether to render the previous and next page navigation buttons.
	 *
	 */
	showPrevNextPages?: boolean;

	/**
	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
	 *
	 */
	pageSizeList?: any;

	/**
	 * Sets/Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
	 *
	 */
	pageCountLimit?: number;

	/**
	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
	 *
	 */
	visiblePageCount?: number;

	/**
	 * Drop down width for the page size and page index drop downs.
	 *
	 */
	defaultDropDownWidth?: number;

	/**
	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
	 *
	 */
	delayOnPageChanged?: number;

	/**
	 * Enables/disables paging persistence between states.
	 *
	 */
	persist?: boolean;

	/**
	 * Event fired before rendering context row content.
	 * Return false in order to cancel this event.
	 */
	contextRowRendering?: ContextRowRenderingEvent;

	/**
	 * Event fired context row content is rendered.
	 */
	contextRowRendered?: ContextRowRenderedEvent;

	/**
	 * Event fired before the page index is changed.
	 * Return false in order to cancel page index changing.
	 */
	pageIndexChanging?: PageIndexChangingEvent;

	/**
	 * Event fired after the page index is changed , but before grid data rebinds
	 */
	pageIndexChanged?: PageIndexChangedEvent;

	/**
	 * Event fired when the page size is about to be changed from the page size dropdown.
	 * Return false in order to cancel page size changing.
	 */
	pageSizeChanging?: PageSizeChangingEvent;

	/**
	 * Event fired after the page size is changed from the page size dropdown.
	 */
	pageSizeChanged?: PageSizeChangedEvent;

	/**
	 * Event fired before the pager footer is rendered (the whole area below the grid records).
	 *  Event fired after the page size is changed from the page size dropdown.
	 */
	pagerRendering?: PagerRenderingEvent;

	/**
	 * Event fired after the pager footer is rendered
	 */
	pagerRendered?: PagerRenderedEvent;

	/**
	 * Option for igTreeGridPaging
	 */
	[optionName: string]: any;
}
interface IgTreeGridPagingMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igtreegridpaging#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igtreegridpaging#options:language) or [locale](ui.igtreegridpaging#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Destroys the igTreeGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging
	 */
	destroy(): void;

	/**
	 * Get jQuery representation of of the context row. It is rendered in the header. If there isn't such element - creates it.
	 */
	getContextRow(): Object;

	/**
	 * Get jQuery representation of element that holds text area of the context row. If there isn't such element - creates it.
	 */
	getContextRowTextArea(): Object;
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Gets/Sets the current page index, delegates data binding and paging to [$.ig.DataSource](ig.datasource).
	 *
	 * @param index The page index to go to.
	 */
	pageIndex(index?: number): number;

	/**
	 * Gets/Sets the page size. If no parameter is specified, just returns the current page size.
	 *
	 * @param size The new page size.
	 */
	pageSize(size?: number): number;
}
interface JQuery {
	data(propertyName: "igTreeGridPaging"): IgTreeGridPagingMethods;
}

interface JQuery {
	igTreeGridPaging(methodName: "changeLocale"): void;
	igTreeGridPaging(methodName: "destroy"): void;
	igTreeGridPaging(methodName: "getContextRow"): Object;
	igTreeGridPaging(methodName: "getContextRowTextArea"): Object;
	igTreeGridPaging(methodName: "changeGlobalLanguage"): void;
	igTreeGridPaging(methodName: "changeGlobalRegional"): void;
	igTreeGridPaging(methodName: "pageIndex", index?: number): number;
	igTreeGridPaging(methodName: "pageSize", size?: number): number;

	/**
	 * Sets gets paging mode.
	 *
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Sets gets paging mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is "rootLevelOnly" then the context row always shows the value of the contextRowRootText option.
	 *
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowMode"): string;

	/**
	 * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is "rootLevelOnly" then the context row always shows the value of the contextRowRootText option.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowMode", optionValue: string): void;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
	 * Use option [locale.contextRowLoadingText](ui.igtreegridpaging#options:locale.contextRowLoadingText)
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowLoadingText"): string;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
	 * Use option [locale.contextRowLoadingText](ui.igtreegridpaging#options:locale.contextRowLoadingText)
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowLoadingText", optionValue: string): void;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
	 * Use option [locale.contextRowRootText](ui.igtreegridpaging#options:locale.contextRowRootText)
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRootText"): string;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
	 * Use option [locale.contextRowRootText](ui.igtreegridpaging#options:locale.contextRowRootText)
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRootText", optionValue: string): void;

	/**
	 * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "breadcrumbKey"): string;

	/**
	 * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "breadcrumbKey", optionValue: string): void;

	/**
	 * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "breadcrumbDelimiter"): string;

	/**
	 * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "breadcrumbDelimiter", optionValue: string): void;

	/**
	 * Reference to the (or name of )function, called before rendering context row content(rendering loading message/bread crumb/parent row). The function takes 4 arguments- dataRow, $textArea- jQuery representation of the text area of the context row(when mode is loading/breadcrumb then it is <span /> otherwise <tr />), array of parent rows and context mode - "loading"|"breadcrumb"|"parent". When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
	 *
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "renderContextRowFunc"): Function|string;

	/**
	 * Reference to the (or name of )function, called before rendering context row content(rendering loading message/bread crumb/parent row). The function takes 4 arguments- dataRow, $textArea- jQuery representation of the text area of the context row(when mode is loading/breadcrumb then it is <span /> otherwise <tr />), array of parent rows and context mode - "loading"|"breadcrumb"|"parent". When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "renderContextRowFunc", optionValue: Function|string): void;
	igTreeGridPaging(optionLiteral: 'option', optionName: "locale"): IgTreeGridPagingLocale;
	igTreeGridPaging(optionLiteral: 'option', optionName: "locale", optionValue: IgTreeGridPagingLocale): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Number of records loaded and displayed per page.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSize"): number;

	/**
	 * Number of records loaded and displayed per page.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSize", optionValue: number): void;

	/**
	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "recordCountKey"): string;

	/**
	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "recordCountKey", optionValue: string): void;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeUrlKey"): string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeUrlKey", optionValue: string): void;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexUrlKey"): string;

	/**
	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexUrlKey", optionValue: string): void;

	/**
	 * Current page index that's bound in the data source and rendered in the UI.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageIndex"): number;

	/**
	 * Current page index that's bound in the data source and rendered in the UI.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageIndex", optionValue: number): void;

	/**
	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "showPageSizeDropDown"): boolean;

	/**
	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "showPageSizeDropDown", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTrailingLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTrailingLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTemplate"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTemplate", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "nextPageLabelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "nextPageLabelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "prevPageLabelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "prevPageLabelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "firstPageLabelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "firstPageLabelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "lastPageLabelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "lastPageLabelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownLeadingLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownLeadingLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTrailingLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTrailingLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "prevPageTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "prevPageTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "nextPageTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "nextPageTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "firstPageTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "firstPageTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "lastPageTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "lastPageTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageTooltipFormat"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageTooltipFormat", optionValue: string): void;

	/**
	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
	 *
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLocation"): string;

	/**
	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLocation", optionValue: string): void;

	/**
	 * Option specifying whether to show summary label for the currently rendered records or not.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "showPagerRecordsLabel"): boolean;

	/**
	 * Option specifying whether to show summary label for the currently rendered records or not.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "showPagerRecordsLabel", optionValue: boolean): void;

	/**
	 * Option specifying whether to render the first and last page navigation buttons.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "showFirstLastPages"): boolean;

	/**
	 * Option specifying whether to render the first and last page navigation buttons.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "showFirstLastPages", optionValue: boolean): void;

	/**
	 * Option specifying whether to render the previous and next page navigation buttons.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "showPrevNextPages"): boolean;

	/**
	 * Option specifying whether to render the previous and next page navigation buttons.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "showPrevNextPages", optionValue: boolean): void;

	/**
	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeList"): any;

	/**
	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeList", optionValue: any): void;

	/**
	 * Sets/Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageCountLimit"): number;

	/**
	 * Sets/ the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageCountLimit", optionValue: number): void;

	/**
	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "visiblePageCount"): number;

	/**
	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "visiblePageCount", optionValue: number): void;

	/**
	 * Drop down width for the page size and page index drop downs.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "defaultDropDownWidth"): number;

	/**
	 * Drop down width for the page size and page index drop downs.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "defaultDropDownWidth", optionValue: number): void;

	/**
	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "delayOnPageChanged"): number;

	/**
	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "delayOnPageChanged", optionValue: number): void;

	/**
	 * Enables/disables paging persistence between states.
	 *
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "persist"): boolean;

	/**
	 * Enables/disables paging persistence between states.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;

	/**
	 * Event fired before rendering context row content.
	 * Return false in order to cancel this event.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRendering"): ContextRowRenderingEvent;

	/**
	 * Event fired before rendering context row content.
	 * Return false in order to cancel this event.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRendering", optionValue: ContextRowRenderingEvent): void;

	/**
	 * Event fired context row content is rendered.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRendered"): ContextRowRenderedEvent;

	/**
	 * Event fired context row content is rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRendered", optionValue: ContextRowRenderedEvent): void;

	/**
	 * Event fired before the page index is changed.
	 * Return false in order to cancel page index changing.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexChanging"): PageIndexChangingEvent;

	/**
	 * Event fired before the page index is changed.
	 * Return false in order to cancel page index changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexChanging", optionValue: PageIndexChangingEvent): void;

	/**
	 * Event fired after the page index is changed , but before grid data rebinds
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexChanged"): PageIndexChangedEvent;

	/**
	 * Event fired after the page index is changed , but before grid data rebinds
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexChanged", optionValue: PageIndexChangedEvent): void;

	/**
	 * Event fired when the page size is about to be changed from the page size dropdown.
	 * Return false in order to cancel page size changing.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeChanging"): PageSizeChangingEvent;

	/**
	 * Event fired when the page size is about to be changed from the page size dropdown.
	 * Return false in order to cancel page size changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeChanging", optionValue: PageSizeChangingEvent): void;

	/**
	 * Event fired after the page size is changed from the page size dropdown.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeChanged"): PageSizeChangedEvent;

	/**
	 * Event fired after the page size is changed from the page size dropdown.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeChanged", optionValue: PageSizeChangedEvent): void;

	/**
	 * Event fired before the pager footer is rendered (the whole area below the grid records).
	 *  Event fired after the page size is changed from the page size dropdown.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRendering"): PagerRenderingEvent;

	/**
	 * Event fired before the pager footer is rendered (the whole area below the grid records).
	 *  Event fired after the page size is changed from the page size dropdown.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRendering", optionValue: PagerRenderingEvent): void;

	/**
	 * Event fired after the pager footer is rendered
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRendered"): PagerRenderedEvent;

	/**
	 * Event fired after the pager footer is rendered
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRendered", optionValue: PagerRenderedEvent): void;
	igTreeGridPaging(options: IgTreeGridPaging): JQuery;
	igTreeGridPaging(optionLiteral: 'option', optionName: string): any;
	igTreeGridPaging(optionLiteral: 'option', options: IgTreeGridPaging): JQuery;
	igTreeGridPaging(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridPaging(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridResizing {
	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * Resize the column to the size of the longest currently visible cell value.
	 *
	 */
	allowDoubleClickToResize?: boolean;

	/**
	 * Specifies whether the resizing should be deferred until the user finishes resizing or applied immediately.
	 *
	 */
	deferredResizing?: boolean;

	/**
	 * A list of column settings that specifies resizing options on a per column basis.
	 *
	 */
	columnSettings?: IgGridResizingColumnSetting[];

	/**
	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
	 *
	 */
	handleThreshold?: number;

	/**
	 * Event fired before a resizing operation is executed.
	 */
	columnResizing?: ColumnResizingEvent;

	/**
	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
	 */
	columnResizingRefused?: ColumnResizingRefusedEvent;

	/**
	 * Event fired after the resizing has been executed and results are rendered
	 */
	columnResized?: ColumnResizedEvent;

	/**
	 * Option for igTreeGridResizing
	 */
	[optionName: string]: any;
}
interface IgTreeGridResizingMethods {
	destroy(): void;
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
	 *
	 * @param column An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
	 * @param width Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
	 */
	resize(column: Object, width?: Object): void;
}
interface JQuery {
	data(propertyName: "igTreeGridResizing"): IgTreeGridResizingMethods;
}

interface JQuery {
	igTreeGridResizing(methodName: "destroy"): void;
	igTreeGridResizing(methodName: "changeGlobalLanguage"): void;
	igTreeGridResizing(methodName: "changeGlobalRegional"): void;
	igTreeGridResizing(methodName: "resize", column: Object, width?: Object): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Resize the column to the size of the longest currently visible cell value.
	 *
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "allowDoubleClickToResize"): boolean;

	/**
	 * Resize the column to the size of the longest currently visible cell value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "allowDoubleClickToResize", optionValue: boolean): void;

	/**
	 * Gets whether the resizing should be deferred until the user finishes resizing or applied immediately.
	 *
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "deferredResizing"): boolean;

	/**
	 * Sets whether the resizing should be deferred until the user finishes resizing or applied immediately.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "deferredResizing", optionValue: boolean): void;

	/**
	 * A list of column settings that specifies resizing options on a per column basis.
	 *
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "columnSettings"): IgGridResizingColumnSetting[];

	/**
	 * A list of column settings that specifies resizing options on a per column basis.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridResizingColumnSetting[]): void;

	/**
	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
	 *
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "handleThreshold"): number;

	/**
	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "handleThreshold", optionValue: number): void;

	/**
	 * Event fired before a resizing operation is executed.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "columnResizing"): ColumnResizingEvent;

	/**
	 * Event fired before a resizing operation is executed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "columnResizing", optionValue: ColumnResizingEvent): void;

	/**
	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "columnResizingRefused"): ColumnResizingRefusedEvent;

	/**
	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "columnResizingRefused", optionValue: ColumnResizingRefusedEvent): void;

	/**
	 * Event fired after the resizing has been executed and results are rendered
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "columnResized"): ColumnResizedEvent;

	/**
	 * Event fired after the resizing has been executed and results are rendered
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridResizing(optionLiteral: 'option', optionName: "columnResized", optionValue: ColumnResizedEvent): void;
	igTreeGridResizing(options: IgTreeGridResizing): JQuery;
	igTreeGridResizing(optionLiteral: 'option', optionName: string): any;
	igTreeGridResizing(optionLiteral: 'option', options: IgTreeGridResizing): JQuery;
	igTreeGridResizing(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridResizing(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridRowSelectors {
	/**
	 * Determines row numbering format.
	 *
	 *
	 * Valid values:
	 * "sequential" Defines numbering format to be the index of the visible records.
	 * "hierarchical" Defines numbering format to be concatenation of the parent and children indexes.
	 */
	rowSelectorNumberingMode?: string;

	/**
	 * Gets the type of checkboxes rendered in the row selector. Can be set only at initialization.
	 *
	 *
	 * Valid values:
	 * "biState" Checkboxes are rendered and support two states(checked and unchecked). Checkboxes do not cascade down or up in this mode.
	 * "triState" Checkboxes are rendered and support three states(checked, partial and unchecked). Checkboxes cascade up and down in this mode.
	 */
	checkBoxMode?: string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * Determines whether the row selectors column should contain row numbering
	 *
	 */
	enableRowNumbering?: boolean;

	/**
	 * Determines whether the row selectors column should contain checkboxes
	 *
	 */
	enableCheckBoxes?: boolean;

	/**
	 * The seed to be added to the default numbering
	 *
	 */
	rowNumberingSeed?: number;

	/**
	 * defines width of the row selector`s column in pixels or percentage.
	 *
	 *
	 * Valid values:
	 * "string" The row selector column width can be set in pixels (px) and percentage (%)
	 * "number" The row selector width can be set as a number
	 * "null" will let the feature decide the best width depending on enabled contents
	 */
	rowSelectorColumnWidth?: string|number;

	/**
	 * Determines whether the selection feature is required for the row selectors. If set to "false"
	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
	 * not available.
	 *
	 */
	requireSelection?: boolean;

	/**
	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
	 *
	 */
	showCheckBoxesOnFocus?: boolean;

	/**
	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
	 *
	 */
	enableSelectAllForPaging?: boolean;

	/**
	 * Custom template for "select all" overlay with paging
	 * Element with attribute data-rs-select-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 */
	selectAllForPagingTemplate?: string;

	/**
	 * Custom template for "deselect all" overlay with paging
	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 */
	deselectAllForPagingTemplate?: string;
	locale?: IgGridRowSelectorsLocale;

	/**
	 * Event fired after a row selector is clicked.
	 */
	rowSelectorClicked?: RowSelectorClickedEvent;

	/**
	 * Event fired when a row selector checkbox is changing.
	 */
	checkBoxStateChanging?: CheckBoxStateChangingEvent;

	/**
	 * Event fired after a row selector checkbox had changed state.
	 */
	checkBoxStateChanged?: CheckBoxStateChangedEvent;

	/**
	 * Option for igTreeGridRowSelectors
	 */
	[optionName: string]: any;
}
interface IgTreeGridRowSelectorsMethods {
	destroy(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igtreegridrowselectors#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igtreegridrowselectors#options:language) or [locale](ui.igtreegridrowselectors#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Change the check state of a row by row id
	 *
	 * @param rowId Row Id
	 * @param toCheck The new check state of the checkbox - true for checked or false for unchecked
	 */
	changeCheckStateById(rowId: Object, toCheck: boolean): void;

	/**
	 * Changes the check state of a row by index to specified value
	 *
	 * @param index Row index
	 * @param toCheck The new check state of the checkbox - true for checked or false for unchecked
	 */
	changeCheckState(index: number, toCheck: boolean): void;

	/**
	 * Toggles the check state of a row by row id
	 *
	 * @param rowId Row Id
	 */
	toggleCheckStateById(rowId: Object): void;

	/**
	 * Toggles the check state of a row by index
	 *
	 * @param index Row index
	 */
	toggleCheckState(index: number): void;

	/**
	 * Gets an array of all the checked rows. Every object from the array has the following format { element: , id: , index: }
	 */
	checkedRows(): any[];

	/**
	 * Gets an array of all the partially checked rows. Every object from the array has the following format { element: , id: , index: }
	 */
	partiallyCheckedRows(): any[];

	/**
	 * Gets an array of all the unchecked rows. Every object from the array has the following format { element: , id: , index: }
	 */
	uncheckedRows(): any[];

	/**
	 * Returns the check state of the row by id.
	 *
	 * @param rowId
	 */
	checkStateById(rowId: Object): string;
}
interface JQuery {
	data(propertyName: "igTreeGridRowSelectors"): IgTreeGridRowSelectorsMethods;
}

interface JQuery {
	igTreeGridRowSelectors(methodName: "destroy"): void;
	igTreeGridRowSelectors(methodName: "changeLocale"): void;
	igTreeGridRowSelectors(methodName: "changeCheckStateById", rowId: Object, toCheck: boolean): void;
	igTreeGridRowSelectors(methodName: "changeCheckState", index: number, toCheck: boolean): void;
	igTreeGridRowSelectors(methodName: "toggleCheckStateById", rowId: Object): void;
	igTreeGridRowSelectors(methodName: "toggleCheckState", index: number): void;
	igTreeGridRowSelectors(methodName: "checkedRows"): any[];
	igTreeGridRowSelectors(methodName: "partiallyCheckedRows"): any[];
	igTreeGridRowSelectors(methodName: "uncheckedRows"): any[];
	igTreeGridRowSelectors(methodName: "checkStateById", rowId: Object): string;

	/**
	 * Determines row numbering format.
	 *
	 */

	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorNumberingMode"): string;

	/**
	 * Determines row numbering format.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorNumberingMode", optionValue: string): void;

	/**
	 * Gets the type of checkboxes rendered in the row selector. Can be set only at initialization.
	 *
	 */

	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxMode"): string;

	/**
	 * The type of checkboxes rendered in the row selector. Can be set only at initialization.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxMode", optionValue: string): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Determines whether the row selectors column should contain row numbering
	 *
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableRowNumbering"): boolean;

	/**
	 * Determines whether the row selectors column should contain row numbering
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableRowNumbering", optionValue: boolean): void;

	/**
	 * Determines whether the row selectors column should contain checkboxes
	 *
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableCheckBoxes"): boolean;

	/**
	 * Determines whether the row selectors column should contain checkboxes
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableCheckBoxes", optionValue: boolean): void;

	/**
	 * The seed to be added to the default numbering
	 *
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowNumberingSeed"): number;

	/**
	 * The seed to be added to the default numbering
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowNumberingSeed", optionValue: number): void;

	/**
	 * Defines width of the row selector`s column in pixels or percentage.
	 *
	 */

	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorColumnWidth"): string|number;

	/**
	 * Defines width of the row selector`s column in pixels or percentage.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorColumnWidth", optionValue: string|number): void;

	/**
	 * Determines whether the selection feature is required for the row selectors. If set to "false"
	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
	 * not available.
	 *
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "requireSelection"): boolean;

	/**
	 * Determines whether the selection feature is required for the row selectors. If set to "false"
	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
	 * not available.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "requireSelection", optionValue: boolean): void;

	/**
	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
	 *
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "showCheckBoxesOnFocus"): boolean;

	/**
	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "showCheckBoxesOnFocus", optionValue: boolean): void;

	/**
	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
	 *
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableSelectAllForPaging"): boolean;

	/**
	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableSelectAllForPaging", optionValue: boolean): void;

	/**
	 * Custom template for "select all" overlay with paging
	 * Element with attribute data-rs-select-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "selectAllForPagingTemplate"): string;

	/**
	 * Custom template for "select all" overlay with paging
	 * Element with attribute data-rs-select-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "selectAllForPagingTemplate", optionValue: string): void;

	/**
	 * Custom template for "deselect all" overlay with paging
	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "deselectAllForPagingTemplate"): string;

	/**
	 * Custom template for "deselect all" overlay with paging
	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
	 * Element with attribute data-rs-close-all is used for closing the overlay
	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "deselectAllForPagingTemplate", optionValue: string): void;
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "locale"): IgGridRowSelectorsLocale;
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "locale", optionValue: IgGridRowSelectorsLocale): void;

	/**
	 * Event fired after a row selector is clicked.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorClicked"): RowSelectorClickedEvent;

	/**
	 * Event fired after a row selector is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorClicked", optionValue: RowSelectorClickedEvent): void;

	/**
	 * Event fired when a row selector checkbox is changing.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanging"): CheckBoxStateChangingEvent;

	/**
	 * Event fired when a row selector checkbox is changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanging", optionValue: CheckBoxStateChangingEvent): void;

	/**
	 * Event fired after a row selector checkbox had changed state.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanged"): CheckBoxStateChangedEvent;

	/**
	 * Event fired after a row selector checkbox had changed state.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanged", optionValue: CheckBoxStateChangedEvent): void;
	igTreeGridRowSelectors(options: IgTreeGridRowSelectors): JQuery;
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: string): any;
	igTreeGridRowSelectors(optionLiteral: 'option', options: IgTreeGridRowSelectors): JQuery;
	igTreeGridRowSelectors(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridRowSelectors(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridSelection {
	/**
	 * Enables / Disables multiple selection of cells and rows - depending on the mode
	 *
	 */
	multipleSelection?: boolean;

	/**
	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
	 *
	 */
	mouseDragSelect?: boolean;

	/**
	 * Defines type of the selection.
	 *
	 *
	 * Valid values:
	 * "row" Defines row selection mode.
	 * "cell" Defines cell selection mode.
	 */
	mode?: string;

	/**
	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
	 *
	 */
	activation?: boolean;

	/**
	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
	 *
	 */
	wrapAround?: boolean;

	/**
	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
	 *
	 */
	skipChildren?: boolean;

	/**
	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
	 *
	 */
	multipleCellSelectOnClick?: boolean;

	/**
	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
	 *
	 */
	touchDragSelect?: boolean;

	/**
	 * Enables / disables selection persistance between states.
	 *
	 */
	persist?: boolean;

	/**
	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
	 *
	 */
	allowMultipleRangeSelection?: boolean;

	/**
	 * Event fired before row(s) are about to be selected (cancellable).
	 * Return false in order to cancel selection changing.
	 */
	rowSelectionChanging?: RowSelectionChangingEvent;

	/**
	 * Event fired after row(s) are selected.
	 */
	rowSelectionChanged?: RowSelectionChangedEvent;

	/**
	 * Event fired before cell(s) are about to be selected (cancellable).
	 * Return false in order to cancel cell selection changing.
	 */
	cellSelectionChanging?: CellSelectionChangingEvent;

	/**
	 * Event fired after cell(s) are selected.
	 */
	cellSelectionChanged?: CellSelectionChangedEvent;

	/**
	 * Event fired before a cell becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active cell changing.
	 */
	activeCellChanging?: ActiveCellChangingEvent;

	/**
	 * Event fired after a cell becomes active (focus style applied).
	 */
	activeCellChanged?: ActiveCellChangedEvent;

	/**
	 * Event fired before a row becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active row changing.
	 */
	activeRowChanging?: ActiveRowChangingEvent;

	/**
	 * Event fired after a row becomes active (focus style applied).
	 */
	activeRowChanged?: ActiveRowChangedEvent;

	/**
	 * Option for igTreeGridSelection
	 */
	[optionName: string]: any;
}
interface IgTreeGridSelectionMethods {
	destroy(): void;

	/**
	 * Selects a row by row id
	 *
	 * @param id Row Id
	 */
	selectRowById(id: Object): void;

	/**
	 * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
	 */
	clearSelection(): void;

	/**
	 * Selects a cell by row/col
	 *
	 * @param row Row index
	 * @param col Column index
	 * @param isFixed If the cell is part of the fixed or unfixed area of the grid.
	 */
	selectCell(row: number, col: number, isFixed?: boolean): void;

	/**
	 * Selects a cell by row id/column key
	 *
	 * @param id Row Id
	 * @param colKey Column key
	 */
	selectCellById(id: Object, colKey: string): void;

	/**
	 * Deselects a cell by row/col
	 *
	 * @param row Row index
	 * @param col Column index
	 * @param isFixed If the cell is part of the fixed or unfixed area of the grid.
	 */
	deselectCell(row: number, col: number, isFixed?: boolean): void;

	/**
	 * Deselects a cell by row id/column key
	 *
	 * @param id Row Id
	 * @param colKey Column key
	 */
	deselectCellById(id: Object, colKey: string): void;

	/**
	 * Selects a row by index
	 *
	 * @param index Row index
	 */
	selectRow(index: number): void;

	/**
	 * Deselects a row by index
	 *
	 * @param index Row index
	 */
	deselectRow(index: number): void;

	/**
	 * Deselects a row by row id
	 *
	 * @param id Row Id
	 */
	deselectRowById(id: Object): void;

	/**
	 * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
	 *
	 * If multiple selection is disabled the function will return null.
	 */
	selectedCells(): any[];

	/**
	 * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
	 *
	 * If multiple selection is disabled the function will return null.
	 */
	selectedRows(): any[];

	/**
	 * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
	 *
	 * If multiple selection is enabled the function will return null.
	 */
	selectedCell(): Object;

	/**
	 * Returns the currently selected row that has the format { element: , index: }, if any.
	 *
	 * If multiple selection is enabled the function will return null.
	 */
	selectedRow(): Object;

	/**
	 * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
	 */
	activeCell(): Object;

	/**
	 * Returns the currently active (focused) row that has the format { element: , index: }, if any.
	 */
	activeRow(): Object;
}
interface JQuery {
	data(propertyName: "igTreeGridSelection"): IgTreeGridSelectionMethods;
}

interface JQuery {
	igTreeGridSelection(methodName: "destroy"): void;
	igTreeGridSelection(methodName: "selectRowById", id: Object): void;
	igTreeGridSelection(methodName: "clearSelection"): void;
	igTreeGridSelection(methodName: "selectCell", row: number, col: number, isFixed?: boolean): void;
	igTreeGridSelection(methodName: "selectCellById", id: Object, colKey: string): void;
	igTreeGridSelection(methodName: "deselectCell", row: number, col: number, isFixed?: boolean): void;
	igTreeGridSelection(methodName: "deselectCellById", id: Object, colKey: string): void;
	igTreeGridSelection(methodName: "selectRow", index: number): void;
	igTreeGridSelection(methodName: "deselectRow", index: number): void;
	igTreeGridSelection(methodName: "deselectRowById", id: Object): void;
	igTreeGridSelection(methodName: "selectedCells"): any[];
	igTreeGridSelection(methodName: "selectedRows"): any[];
	igTreeGridSelection(methodName: "selectedCell"): Object;
	igTreeGridSelection(methodName: "selectedRow"): Object;
	igTreeGridSelection(methodName: "activeCell"): Object;
	igTreeGridSelection(methodName: "activeRow"): Object;

	/**
	 * Enables / Disables multiple selection of cells and rows - depending on the mode
	 *
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "multipleSelection"): boolean;

	/**
	 * Enables / Disables multiple selection of cells and rows - depending on the mode
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "multipleSelection", optionValue: boolean): void;

	/**
	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
	 *
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "mouseDragSelect"): boolean;

	/**
	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "mouseDragSelect", optionValue: boolean): void;

	/**
	 * Defines type of the selection.
	 *
	 */

	igTreeGridSelection(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Defines type of the selection.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridSelection(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
	 *
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activation"): boolean;

	/**
	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activation", optionValue: boolean): void;

	/**
	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
	 *
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "wrapAround"): boolean;

	/**
	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "wrapAround", optionValue: boolean): void;

	/**
	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
	 *
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "skipChildren"): boolean;

	/**
	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "skipChildren", optionValue: boolean): void;

	/**
	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
	 *
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "multipleCellSelectOnClick"): boolean;

	/**
	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "multipleCellSelectOnClick", optionValue: boolean): void;

	/**
	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
	 *
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "touchDragSelect"): boolean;

	/**
	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "touchDragSelect", optionValue: boolean): void;

	/**
	 * Enables / disables selection persistance between states.
	 *
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "persist"): boolean;

	/**
	 * Enables / disables selection persistance between states.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;

	/**
	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
	 *
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "allowMultipleRangeSelection"): boolean;

	/**
	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "allowMultipleRangeSelection", optionValue: boolean): void;

	/**
	 * Event fired before row(s) are about to be selected (cancellable).
	 * Return false in order to cancel selection changing.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanging"): RowSelectionChangingEvent;

	/**
	 * Event fired before row(s) are about to be selected (cancellable).
	 * Return false in order to cancel selection changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanging", optionValue: RowSelectionChangingEvent): void;

	/**
	 * Event fired after row(s) are selected.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanged"): RowSelectionChangedEvent;

	/**
	 * Event fired after row(s) are selected.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanged", optionValue: RowSelectionChangedEvent): void;

	/**
	 * Event fired before cell(s) are about to be selected (cancellable).
	 * Return false in order to cancel cell selection changing.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanging"): CellSelectionChangingEvent;

	/**
	 * Event fired before cell(s) are about to be selected (cancellable).
	 * Return false in order to cancel cell selection changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanging", optionValue: CellSelectionChangingEvent): void;

	/**
	 * Event fired after cell(s) are selected.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanged"): CellSelectionChangedEvent;

	/**
	 * Event fired after cell(s) are selected.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanged", optionValue: CellSelectionChangedEvent): void;

	/**
	 * Event fired before a cell becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active cell changing.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activeCellChanging"): ActiveCellChangingEvent;

	/**
	 * Event fired before a cell becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active cell changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activeCellChanging", optionValue: ActiveCellChangingEvent): void;

	/**
	 * Event fired after a cell becomes active (focus style applied).
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activeCellChanged"): ActiveCellChangedEvent;

	/**
	 * Event fired after a cell becomes active (focus style applied).
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activeCellChanged", optionValue: ActiveCellChangedEvent): void;

	/**
	 * Event fired before a row becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active row changing.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activeRowChanging"): ActiveRowChangingEvent;

	/**
	 * Event fired before a row becomes active (focus style applied) (cancellable).
	 * Return false in order to cancel active row changing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activeRowChanging", optionValue: ActiveRowChangingEvent): void;

	/**
	 * Event fired after a row becomes active (focus style applied).
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activeRowChanged"): ActiveRowChangedEvent;

	/**
	 * Event fired after a row becomes active (focus style applied).
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSelection(optionLiteral: 'option', optionName: "activeRowChanged", optionValue: ActiveRowChangedEvent): void;
	igTreeGridSelection(options: IgTreeGridSelection): JQuery;
	igTreeGridSelection(optionLiteral: 'option', optionName: string): any;
	igTreeGridSelection(optionLiteral: 'option', options: IgTreeGridSelection): JQuery;
	igTreeGridSelection(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridSelection(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridSorting {
	/**
	 * Specifies from which data bound level to be applied sorting - 0 is the first level
	 *
	 */
	fromLevel?: number;

	/**
	 * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
	 *
	 */
	toLevel?: number;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * Defines local or remote sorting operations.
	 *
	 *
	 * Valid values:
	 * "remote" Sorting is performed remotely as a server-side operation.
	 * "local" Sorting is performed locally by the [$.ig.DataSource](ig.datasource) component.
	 */
	type?: string;

	/**
	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
	 *
	 */
	caseSensitive?: boolean;

	/**
	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
	 *
	 */
	applySortedColumnCss?: boolean;

	/**
	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
	 *
	 */
	sortUrlKey?: string;

	/**
	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
	 *
	 */
	sortUrlKeyAscValue?: string;

	/**
	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
	 *
	 */
	sortUrlKeyDescValue?: string;

	/**
	 * Defines single column sorting or multiple column sorting.
	 *
	 *
	 * Valid values:
	 * "single" Only a single column can be sorted. Previously sorted columns will not preserve their sorting upon sorting a new column.
	 * "multi" If enabled, previous sorted state for columns won't be cleared
	 */
	mode?: string;

	/**
	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
	 *
	 */
	customSortFunction?: Function;

	/**
	 * Specifies which direction to use on the first click / keydown, if the column is sorted for the first time.
	 *
	 *
	 * Valid values:
	 * "ascending" The first sort of the column data will be in ascending order.
	 * "descending" The first sort of the column data will be in descending order.
	 */
	firstSortDirection?: string;

	/**
	 * Specifies whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
	 *
	 */
	modalDialogSortOnClick?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies sortby button text for each unsorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
	 */
	modalDialogSortByButtonText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies reset button text in multiple sorting dialog.
	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
	 */
	modalDialogResetButtonLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each descending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
	 */
	modalDialogCaptionButtonDesc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for each ascending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
	 */
	modalDialogCaptionButtonAsc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption for unsort button in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
	 */
	modalDialogCaptionButtonUnsort?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the text of the feature chooser sorting button.
	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
	 */
	featureChooserText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
	 */
	unsortedColumnTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies caption text for multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
	 */
	modalDialogCaptionText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which apply changes in modal dialog.
	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
	 */
	modalDialogButtonApplyText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies text of button which cancels the changes in the advanced sorting modal dialog.
	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
	 */
	modalDialogButtonCancelText?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
	 */
	featureChooserSortAsc?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
	 */
	featureChooserSortDesc?: string;
	locale?: IgGridSortingLocale;

	/**
	 * Specifies width of multiple sorting dialog.
	 *
	 *
	 * Valid values:
	 * "string" Specifies the width in pixels as a string ("300px").
	 * "number" Specifies the width in pixels as a number (300)
	 */
	modalDialogWidth?: string|number;

	/**
	 * Specifies height of multiple sorting dialog.
	 *
	 *
	 * Valid values:
	 * "string" The widget height can be set in pixels (px) and percentage (%).
	 * "number" The widget height can be set in pixels as a number.
	 */
	modalDialogHeight?: string|number;

	/**
	 * Specifies time of milliseconds for animation duration to show/hide modal dialog.
	 *
	 */
	modalDialogAnimationDuration?: number;

	/**
	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
	 *
	 */
	columnSettings?: IgGridSortingColumnSetting[];

	/**
	 * Enables/disables sorting persistence when the grid is rebound.
	 *
	 */
	persist?: boolean;

	/**
	 * Controls containment behavior of multiple sorting dialog.
	 *
	 * owner  The multi sorting dialog will be draggable only in the grid area
	 * window  The multi sorting dialog will be draggable in the whole window area
	 */
	sortingDialogContainment?: string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Event fired before sorting is invoked for a certain column.
	 * Return false in order to cancel column sorting.
	 */
	columnSorting?: ColumnSortingEvent;

	/**
	 * Event fired after the column has already been sorted and data - re-rendered.
	 */
	columnSorted?: ColumnSortedEvent;

	/**
	 * Event fired before the modal dialog is opened.
	 */
	modalDialogOpening?: ModalDialogOpeningEvent;

	/**
	 * Event fired after the modal dialog is already opened.
	 */
	modalDialogOpened?: ModalDialogOpenedEvent;

	/**
	 * Event fired every time the modal dialog changes its position.
	 */
	modalDialogMoving?: ModalDialogMovingEvent;

	/**
	 * Event fired before the modal dialog is closed.
	 */
	modalDialogClosing?: ModalDialogClosingEvent;

	/**
	 * Event fired after the modal dialog has been closed.
	 */
	modalDialogClosed?: ModalDialogClosedEvent;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 */
	modalDialogContentsRendering?: ModalDialogContentsRenderingEvent;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 */
	modalDialogContentsRendered?: ModalDialogContentsRenderedEvent;

	/**
	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
	 */
	modalDialogSortingChanged?: ModalDialogSortingChangedEvent;

	/**
	 * Event fired when button to unsort column is clicked in modal dialog
	 */
	modalDialogButtonUnsortClick?: ModalDialogButtonUnsortClickEvent;

	/**
	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
	 */
	modalDialogSortClick?: ModalDialogSortClickEvent;

	/**
	 * Event fired when button Apply in modal dialog is clicked
	 */
	modalDialogButtonApplyClick?: ModalDialogButtonApplyClickEvent;

	/**
	 * Event fired when the button to reset sorting is clicked.
	 */
	modalDialogButtonResetClick?: ModalDialogButtonResetClickEvent;

	/**
	 * Option for igTreeGridSorting
	 */
	[optionName: string]: any;
}
interface IgTreeGridSortingMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igtreegridsorting#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igtreegridsorting#options:language) or [locale](ui.igtreegridsorting#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Returns whether a column with the specified columnKey is sorted(taken from the data source sorting expressions)
	 *
	 * @param columnKey Column key (string)
	 */
	isColumnSorted(columnKey: string): boolean;
	destroy(): void;
	changeGlobalLanguage(): void;
	changeGlobalRegional(): void;

	/**
	 * Sorts the data in a grid column  and updates the UI.
	 *
	 * @param index Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
	 * @param direction Specifies sorting direction (ascending or descending)
	 * @param header
	 */
	sortColumn(index: Object, direction: Object, header: Object): void;

	/**
	 * Sorts the data in grid columns and updates the UI. It accepts optional argument - array of sorting expressions. If passed then sorts the data and sets sorting expressions of the data source. If not passed uses current sorting expressions of the data source.
	 *
	 * @param exprs array of sorting expressions. If not set then the method uses expressions defined in sorting settings of the data source.
	 */
	sortMultiple(exprs?: any[]): void;

	/**
	 * Removes current sorting(for all sorted columns) and updates the UI.
	 */
	clearSorting(): void;

	/**
	 * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
	 *
	 * @param index Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
	 * @param header - if specified client events should be fired
	 */
	unsortColumn(index: Object, header: Object): void;

	/**
	 * Opens the multiple sorting dialog.
	 */
	openMultipleSortingDialog(): void;

	/**
	 * Closes the multiple sorting dialog.
	 */
	closeMultipleSortingDialog(): void;

	/**
	 * Renders content of multiple sorting dialog - sorted and unsorted columns.
	 *
	 * @param isToCallEvents
	 */
	renderMultipleSortingDialogContent(isToCallEvents: Object): void;

	/**
	 * Remove clear button for multiple sorting dialog
	 */
	removeDialogClearButton(): void;
}
interface JQuery {
	data(propertyName: "igTreeGridSorting"): IgTreeGridSortingMethods;
}

interface JQuery {
	igTreeGridSorting(methodName: "changeLocale"): void;
	igTreeGridSorting(methodName: "isColumnSorted", columnKey: string): boolean;
	igTreeGridSorting(methodName: "destroy"): void;
	igTreeGridSorting(methodName: "changeGlobalLanguage"): void;
	igTreeGridSorting(methodName: "changeGlobalRegional"): void;
	igTreeGridSorting(methodName: "sortColumn", index: Object, direction: Object, header: Object): void;
	igTreeGridSorting(methodName: "sortMultiple", exprs?: any[]): void;
	igTreeGridSorting(methodName: "clearSorting"): void;
	igTreeGridSorting(methodName: "unsortColumn", index: Object, header: Object): void;
	igTreeGridSorting(methodName: "openMultipleSortingDialog"): void;
	igTreeGridSorting(methodName: "closeMultipleSortingDialog"): void;
	igTreeGridSorting(methodName: "renderMultipleSortingDialogContent", isToCallEvents: Object): void;
	igTreeGridSorting(methodName: "removeDialogClearButton"): void;

	/**
	 * Specifies from which data bound level to be applied sorting - 0 is the first level
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "fromLevel"): number;

	/**
	 * Specifies from which data bound level to be applied sorting - 0 is the first level
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "fromLevel", optionValue: number): void;

	/**
	 * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "toLevel"): number;

	/**
	 * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "toLevel", optionValue: number): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Defines local or remote sorting operations.
	 *
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "type"): string;

	/**
	 * Defines local or remote sorting operations.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "type", optionValue: string): void;

	/**
	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "caseSensitive"): boolean;

	/**
	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;

	/**
	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "applySortedColumnCss"): boolean;

	/**
	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "applySortedColumnCss", optionValue: boolean): void;

	/**
	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKey"): string;

	/**
	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKey", optionValue: string): void;

	/**
	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyAscValue"): string;

	/**
	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyAscValue", optionValue: string): void;

	/**
	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyDescValue"): string;

	/**
	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyDescValue", optionValue: string): void;

	/**
	 * Defines single column sorting or multiple column sorting.
	 *
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "mode"): string;

	/**
	 * Defines single column sorting or multiple column sorting.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "mode", optionValue: string): void;

	/**
	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "customSortFunction"): Function;

	/**
	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "customSortFunction", optionValue: Function): void;

	/**
	 * Gets which direction to use on the first click / keydown, if the column is sorted for the first time.
	 *
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "firstSortDirection"): string;

	/**
	 * Sets which direction to use on the first click / keydown, if the column is sorted for the first time.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "firstSortDirection", optionValue: string): void;

	/**
	 * Gets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortOnClick"): boolean;

	/**
	 * Sets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortOnClick", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets sortby button text for each unsorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortByButtonText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets sortby button text for each unsorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortByButtonText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets reset button text in multiple sorting dialog.
	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogResetButtonLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets reset button text in multiple sorting dialog.
	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogResetButtonLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each descending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each descending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for each ascending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for each ascending sorted column in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption for unsort button in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUnsort"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption for unsort button in multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUnsort", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the text of the feature chooser sorting button.
	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the text of the feature chooser sorting button.
	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "unsortedColumnTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "unsortedColumnTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets caption text for multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets caption text for multiple sorting dialog.
	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which apply changes in modal dialog.
	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which apply changes in modal dialog.
	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets text of button which cancels the changes in the advanced sorting modal dialog.
	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonCancelText"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets text of button which cancels the changes in the advanced sorting modal dialog.
	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonCancelText", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserSortAsc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserSortAsc", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserSortDesc"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserSortDesc", optionValue: string): void;
	igTreeGridSorting(optionLiteral: 'option', optionName: "locale"): IgGridSortingLocale;
	igTreeGridSorting(optionLiteral: 'option', optionName: "locale", optionValue: IgGridSortingLocale): void;

	/**
	 * Gets width of multiple sorting dialog.
	 *
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogWidth"): string|number;

	/**
	 * Sets width of multiple sorting dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogWidth", optionValue: string|number): void;

	/**
	 * Gets height of multiple sorting dialog.
	 *
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogHeight"): string|number;

	/**
	 * Sets height of multiple sorting dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogHeight", optionValue: string|number): void;

	/**
	 * Gets time of milliseconds for animation duration to show/hide modal dialog.
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogAnimationDuration"): number;

	/**
	 * Sets time of milliseconds for animation duration to show/hide modal dialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogAnimationDuration", optionValue: number): void;

	/**
	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "columnSettings"): IgGridSortingColumnSetting[];

	/**
	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridSortingColumnSetting[]): void;

	/**
	 * Enables/disables sorting persistence when the grid is rebound.
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "persist"): boolean;

	/**
	 * Enables/disables sorting persistence when the grid is rebound.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;

	/**
	 * Controls containment behavior of multiple sorting dialog.
	 *
	 * owner  The multi sorting dialog will be draggable only in the grid area
	 * window  The multi sorting dialog will be draggable in the whole window area
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "sortingDialogContainment"): string;

	/**
	 * Controls containment behavior of multiple sorting dialog.
	 *
	 * owner  The multi sorting dialog will be draggable only in the grid area
	 * window  The multi sorting dialog will be draggable in the whole window area
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "sortingDialogContainment", optionValue: string): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Event fired before sorting is invoked for a certain column.
	 * Return false in order to cancel column sorting.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "columnSorting"): ColumnSortingEvent;

	/**
	 * Event fired before sorting is invoked for a certain column.
	 * Return false in order to cancel column sorting.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "columnSorting", optionValue: ColumnSortingEvent): void;

	/**
	 * Event fired after the column has already been sorted and data - re-rendered.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "columnSorted"): ColumnSortedEvent;

	/**
	 * Event fired after the column has already been sorted and data - re-rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "columnSorted", optionValue: ColumnSortedEvent): void;

	/**
	 * Event fired before the modal dialog is opened.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogOpening"): ModalDialogOpeningEvent;

	/**
	 * Event fired before the modal dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogOpening", optionValue: ModalDialogOpeningEvent): void;

	/**
	 * Event fired after the modal dialog is already opened.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogOpened"): ModalDialogOpenedEvent;

	/**
	 * Event fired after the modal dialog is already opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogOpened", optionValue: ModalDialogOpenedEvent): void;

	/**
	 * Event fired every time the modal dialog changes its position.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogMoving"): ModalDialogMovingEvent;

	/**
	 * Event fired every time the modal dialog changes its position.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogMoving", optionValue: ModalDialogMovingEvent): void;

	/**
	 * Event fired before the modal dialog is closed.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogClosing"): ModalDialogClosingEvent;

	/**
	 * Event fired before the modal dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogClosing", optionValue: ModalDialogClosingEvent): void;

	/**
	 * Event fired after the modal dialog has been closed.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogClosed"): ModalDialogClosedEvent;

	/**
	 * Event fired after the modal dialog has been closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogClosed", optionValue: ModalDialogClosedEvent): void;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendering"): ModalDialogContentsRenderingEvent;

	/**
	 * Event fired before the contents of the modal dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendering", optionValue: ModalDialogContentsRenderingEvent): void;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendered"): ModalDialogContentsRenderedEvent;

	/**
	 * Event fired after the contents of the modal dialog are rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendered", optionValue: ModalDialogContentsRenderedEvent): void;

	/**
	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortingChanged"): ModalDialogSortingChangedEvent;

	/**
	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortingChanged", optionValue: ModalDialogSortingChangedEvent): void;

	/**
	 * Event fired when button to unsort column is clicked in modal dialog
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonUnsortClick"): ModalDialogButtonUnsortClickEvent;

	/**
	 * Event fired when button to unsort column is clicked in modal dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonUnsortClick", optionValue: ModalDialogButtonUnsortClickEvent): void;

	/**
	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortClick"): ModalDialogSortClickEvent;

	/**
	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortClick", optionValue: ModalDialogSortClickEvent): void;

	/**
	 * Event fired when button Apply in modal dialog is clicked
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick"): ModalDialogButtonApplyClickEvent;

	/**
	 * Event fired when button Apply in modal dialog is clicked
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick", optionValue: ModalDialogButtonApplyClickEvent): void;

	/**
	 * Event fired when the button to reset sorting is clicked.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonResetClick"): ModalDialogButtonResetClickEvent;

	/**
	 * Event fired when the button to reset sorting is clicked.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonResetClick", optionValue: ModalDialogButtonResetClickEvent): void;
	igTreeGridSorting(options: IgTreeGridSorting): JQuery;
	igTreeGridSorting(optionLiteral: 'option', optionName: string): any;
	igTreeGridSorting(optionLiteral: 'option', options: IgTreeGridSorting): JQuery;
	igTreeGridSorting(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridSorting(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridTooltips {
	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * Determines the tooltip visibility option
	 *
	 *
	 * Valid values:
	 * "always" tooltips always show for hovered elements
	 * "never" tooltips do not show automatically
	 * "overflow" tooltips show only when the underlying data overflows its container
	 */
	visibility?: string;

	/**
	 * Controls the tooltip's style
	 *
	 *
	 * Valid values:
	 * "tooltip" The tooltip will be positioned according to the mouse cursor. Will render the tooltip content as plain text.
	 * "popover" The tooltip will be positioned according to the target element with an arrow pointing the element. This style is more suitable for touch-supported environments. Will render the tooltip content as HTML.
	 */
	style?: string;

	/**
	 * The time in milliseconds after which tooltip will show when
	 * mouse cursor is hovered over a cell.
	 *
	 */
	showDelay?: number;

	/**
	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
	 * cursor gets outside of the cell.
	 *
	 */
	hideDelay?: number;

	/**
	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
	 *
	 */
	columnSettings?: IgGridTooltipsColumnSettings;

	/**
	 * Sets the time tooltip fades in and out when showing/hiding
	 *
	 */
	fadeTimespan?: number;

	/**
	 * Sets the left position of the tooltip relative to the mouse cursor
	 *
	 */
	cursorLeftOffset?: number;

	/**
	 * Sets the top position of the tooltip relative to the mouse cursor
	 *
	 */
	cursorTopOffset?: number;

	/**
	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
	 */
	tooltipShowing?: TooltipShowingEvent;

	/**
	 * Event fired after a tooltip is shown
	 */
	tooltipShown?: TooltipShownEvent;

	/**
	 * Event fired when the mouse has left an element and the tooltip is about to hide
	 */
	tooltipHiding?: TooltipHidingEvent;

	/**
	 * Event fired after a tooltip is hidden
	 */
	tooltipHidden?: TooltipHiddenEvent;

	/**
	 * Option for igTreeGridTooltips
	 */
	[optionName: string]: any;
}
interface IgTreeGridTooltipsMethods {
	destroy(): void;

	/**
	 * Returns the ID of the parent div element bounding the ruler and the tooltip container
	 */
	id(): string;
}
interface JQuery {
	data(propertyName: "igTreeGridTooltips"): IgTreeGridTooltipsMethods;
}

interface JQuery {
	igTreeGridTooltips(methodName: "destroy"): void;
	igTreeGridTooltips(methodName: "id"): string;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * Determines the tooltip visibility option
	 *
	 */

	igTreeGridTooltips(optionLiteral: 'option', optionName: "visibility"): string;

	/**
	 * Determines the tooltip visibility option
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridTooltips(optionLiteral: 'option', optionName: "visibility", optionValue: string): void;

	/**
	 * Controls the tooltip's style
	 *
	 */

	igTreeGridTooltips(optionLiteral: 'option', optionName: "style"): string;

	/**
	 * Controls the tooltip's style
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridTooltips(optionLiteral: 'option', optionName: "style", optionValue: string): void;

	/**
	 * The time in milliseconds after which tooltip will show when
	 * mouse cursor is hovered over a cell.
	 *
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "showDelay"): number;

	/**
	 * The time in milliseconds after which tooltip will show when
	 * mouse cursor is hovered over a cell.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "showDelay", optionValue: number): void;

	/**
	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
	 * cursor gets outside of the cell.
	 *
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "hideDelay"): number;

	/**
	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
	 * cursor gets outside of the cell.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "hideDelay", optionValue: number): void;

	/**
	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
	 *
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "columnSettings"): IgGridTooltipsColumnSettings;

	/**
	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridTooltipsColumnSettings): void;

	/**
	 * The time tooltip fades in and out when showing/hiding
	 *
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "fadeTimespan"): number;

	/**
	 * Sets the time tooltip fades in and out when showing/hiding
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "fadeTimespan", optionValue: number): void;

	/**
	 * The left position of the tooltip relative to the mouse cursor
	 *
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "cursorLeftOffset"): number;

	/**
	 * Sets the left position of the tooltip relative to the mouse cursor
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "cursorLeftOffset", optionValue: number): void;

	/**
	 * The top position of the tooltip relative to the mouse cursor
	 *
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "cursorTopOffset"): number;

	/**
	 * Sets the top position of the tooltip relative to the mouse cursor
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "cursorTopOffset", optionValue: number): void;

	/**
	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;

	/**
	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;

	/**
	 * Event fired after a tooltip is shown
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;

	/**
	 * Event fired after a tooltip is shown
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;

	/**
	 * Event fired when the mouse has left an element and the tooltip is about to hide
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;

	/**
	 * Event fired when the mouse has left an element and the tooltip is about to hide
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;

	/**
	 * Event fired after a tooltip is hidden
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;

	/**
	 * Event fired after a tooltip is hidden
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;
	igTreeGridTooltips(options: IgTreeGridTooltips): JQuery;
	igTreeGridTooltips(optionLiteral: 'option', optionName: string): any;
	igTreeGridTooltips(optionLiteral: 'option', options: IgTreeGridTooltips): JQuery;
	igTreeGridTooltips(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridTooltips(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridUpdatingLocale {
	/**
	 * Specifies the add child tooltip text.
	 *
	 */
	addChildTooltip?: string;

	/**
	 * Specifies the label of the add child button in touch environment.
	 *
	 */
	addChildButtonLabel?: string;

	/**
	 * Option for IgTreeGridUpdatingLocale
	 */
	[optionName: string]: any;
}

interface IgTreeGridUpdating {
	/**
	 * Specifies whether to enable or disable adding children to rows.
	 *
	 */
	enableAddChild?: boolean;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Specifies the add child tooltip text. Use option [locale.enableAddChild](ui.igtreegridupdating#options:locale.enableAddChild).
	 */
	addChildTooltip?: string;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Specifies the label of the add child button in touch environment. Use option [locale.addChildButtonLabel](ui.igtreegridupdating#options:locale.addChildButtonLabel).
	 */
	addChildButtonLabel?: string;
	locale?: IgTreeGridUpdatingLocale;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	inherit?: boolean;

	/**
	 * A list of custom column options that specify editing and validation settings for a specific column.
	 *
	 */
	columnSettings?: IgGridUpdatingColumnSetting[];

	/**
	 * Specifies the edit mode.
	 *
	 *
	 * Valid values:
	 * "row" Editors are shown for all columns that are not read-only. The editor of the clicked cell receives initial focus. Done and Cancel buttons may be displayed based on the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) property.
	 * "cell" An editor is shown for the cell entering edit mode. The Done and Cancel buttons are not supported for this mode.
	 * "dialog" A popup dialog is used with seperate settings available through the [rowEditDialogOptions](ui.iggridupdating#options:rowEditDialogOptions) property.
	 * "none" Editing through the UI is disabled.
	 */
	editMode?: string;

	/**
	 * Specifies if deleting rows through the UI is enabled.
	 *
	 */
	enableDeleteRow?: boolean;

	/**
	 * Specifies if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
	 *
	 */
	enableAddRow?: boolean;

	/**
	 * Specifies if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
	 *
	 */
	validation?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
	 */
	doneLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
	 */
	doneTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
	 */
	cancelLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
	 */
	cancelTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
	 */
	addRowLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
	 */
	addRowTooltip?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
	 */
	deleteRowLabel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Specifies the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
	 */
	deleteRowTooltip?: string;

	/**
	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
	 *
	 */
	showDoneCancelButtons?: boolean;

	/**
	 * Specifies if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
	 *
	 */
	enableDataDirtyException?: boolean;

	/**
	 * Specifies how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
	 *
	 */
	startEditTriggers?: string|Array<any>;

	/**
	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
	 *
	 */
	horizontalMoveOnEnter?: boolean;

	/**
	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
	 *
	 */
	excelNavigationMode?: boolean;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
	 *
	 */
	saveChangesSuccessHandler?: Function|string;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
	 *
	 */
	saveChangesErrorHandler?: Function|string;

	/**
	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
	 *
	 */
	swipeDistance?: string|number;

	/**
	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
	 *
	 */
	wrapAround?: boolean;

	/**
	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
	 *
	 */
	rowEditDialogOptions?: IgGridUpdatingRowEditDialogOptions;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
	 *
	 */
	dialogWidget?: string;

	/**
	 * Event fired before row editing begins.
	 * Return false in order to cancel editing.
	 */
	editRowStarting?: EditRowStartingEvent;

	/**
	 * Event fired after row editing begins.
	 */
	editRowStarted?: EditRowStartedEvent;

	/**
	 * Event fired before row editing ends.
	 * Return false in order to prevent the grid from exiting edit mode.
	 */
	editRowEnding?: EditRowEndingEvent;

	/**
	 * Event fired after row editing ends.
	 */
	editRowEnded?: EditRowEndedEvent;

	/**
	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
	 * Return false in order to cancel editing.
	 */
	editCellStarting?: EditCellStartingEvent;

	/**
	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
	 */
	editCellStarted?: EditCellStartedEvent;

	/**
	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
	 */
	editCellEnding?: EditCellEndingEvent;

	/**
	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
	 */
	editCellEnded?: EditCellEndedEvent;

	/**
	 * Event fired before adding a new row.
	 * Return false in order to cancel the adding of the new row to the data source.
	 */
	rowAdding?: RowAddingEvent;

	/**
	 * Event fired after adding a new row.
	 */
	rowAdded?: RowAddedEvent;

	/**
	 * Event fired before deleting a row.
	 * Return false in order to cancel the row's deletion.
	 */
	rowDeleting?: RowDeletingEvent;

	/**
	 * Event fired after a row is deleted.
	 */
	rowDeleted?: RowDeletedEvent;

	/**
	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
	 * Return false in order to prevent the exception.
	 */
	dataDirty?: DataDirtyEvent;

	/**
	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
	 */
	generatePrimaryKeyValue?: GeneratePrimaryKeyValueEvent;

	/**
	 * Event fired before the row edit dialog is opened.
	 */
	rowEditDialogBeforeOpen?: RowEditDialogBeforeOpenEvent;

	/**
	 * Event fired after the row edit dialog is opened.
	 */
	rowEditDialogAfterOpen?: RowEditDialogAfterOpenEvent;

	/**
	 * Event fired before the row edit dialog is closed.
	 */
	rowEditDialogBeforeClose?: RowEditDialogBeforeCloseEvent;

	/**
	 * Event fired after the row edit dialog is closed.
	 */
	rowEditDialogAfterClose?: RowEditDialogAfterCloseEvent;

	/**
	 * Event fired after the row edit dialog is rendered.
	 */
	rowEditDialogContentsRendered?: RowEditDialogContentsRenderedEvent;

	/**
	 * Option for igTreeGridUpdating
	 */
	[optionName: string]: any;
}
interface IgTreeGridUpdatingMethods {
	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igtreegridupdating#options:language)
	 * Note that this method is for rare scenarios, see [language](ui.igtreegridupdating#options:language) or [locale](ui.igtreegridupdating#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Adds a new child to a specific row. It also creates a transaction and updates the UI.
	 *
	 * @param values Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
	 * @param parentId The ID of the targeted row.
	 */
	addChild(values: Object, parentId: Object): void;

	/**
	 * Starts editing for adding a new child for specific row.
	 *
	 * @param parentId The ID of the targeted row.
	 * @param raiseEvents Specifies whether or not updating events should be raised for this operation.
	 */
	startAddChildFor(parentId: Object, raiseEvents?: Object): void;

	/**
	 * Shows the "Add Child" button for specific row.
	 *
	 * @param row A jQuery object of the targeted row.
	 */
	showAddChildButtonFor(row: Object): void;

	/**
	 * Hides the "Add Child" button.
	 */
	hideAddChildButton(): void;
	destroy(): void;

	/**
	 * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
	 * If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
	 *
	 * @param rowId The primary key of the row the cell is a child of.
	 * @param colKey The column key of the cell.
	 * @param value The new value for the cell.
	 */
	setCellValue(rowId: Object, colKey: string, value: Object): void;

	/**
	 * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
	 * If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
	 *
	 * @param rowId The primary key of the row to update.
	 * @param values Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
	 */
	updateRow(rowId: Object, values: Object): void;

	/**
	 * Adds a new row to the grid. It also creates a transaction and updates the UI.
	 *
	 * @param values Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
	 */
	addRow(values: Object): void;

	/**
	 * Deletes a row from the grid. It also creates a transaction and updates the UI.
	 *
	 * @param rowId The primary key of the row to delete.
	 */
	deleteRow(rowId: Object): void;

	/**
	 * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).
	 *
	 * @param rowId The row id.
	 * @param column The column key or index.
	 * @param raiseEvents Specifies whether or not updating events should be raised for this operation.
	 */
	startEdit(rowId: Object, column: Object, raiseEvents?: boolean): boolean;

	/**
	 * Starts editing for adding a new row.
	 *
	 * @param raiseEvents Specifies whether or not updating events should be raised for this operation.
	 */
	startAddRowEdit(raiseEvents?: boolean): boolean;

	/**
	 * Ends the currently active edit mode.
	 *
	 * @param update Specifies if the edit process should accept the current changes. Default is 'false'.
	 * @param raiseEvents Specifies whether or not updating events should be raised for this operation.
	 */
	endEdit(update?: boolean, raiseEvents?: boolean): boolean;

	/**
	 * Finds and returns the key of the first column the editor for which has invalid value.
	 */
	findInvalid(): string;

	/**
	 * Checks if the grid is in edit mode.
	 */
	isEditing(): boolean;

	/**
	 * Gets the editor for a column by the column key. That method can be used only after the editor has been created.
	 *
	 * @param key The key of the column.
	 */
	editorForKey(key: string): Object;

	/**
	 * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
	 *
	 * @param cell Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
	 * @param create Requests to create the editor if it has not been created yet.
	 */
	editorForCell(cell: string, create?: boolean): Object;

	/**
	 * Changes the the regional settings of widget element to the language specified in [options.regional](ui.iggridupdating#options:regional)
	 * Note that this method is for rare scenarios, use [regional](ui.iggridupdating#options:regional) option setter
	 */
	changeRegional(): void;

	/**
	 * Shows the delete button for specific row.
	 *
	 * @param row A jQuery object of the targeted row.
	 */
	showDeleteButtonFor(row: Object): void;

	/**
	 * Hides the delete button.
	 */
	hideDeleteButton(): void;
}
interface JQuery {
	data(propertyName: "igTreeGridUpdating"): IgTreeGridUpdatingMethods;
}

interface JQuery {
	igTreeGridUpdating(methodName: "changeLocale"): void;
	igTreeGridUpdating(methodName: "addChild", values: Object, parentId: Object): void;
	igTreeGridUpdating(methodName: "startAddChildFor", parentId: Object, raiseEvents?: Object): void;
	igTreeGridUpdating(methodName: "showAddChildButtonFor", row: Object): void;
	igTreeGridUpdating(methodName: "hideAddChildButton"): void;
	igTreeGridUpdating(methodName: "destroy"): void;
	igTreeGridUpdating(methodName: "setCellValue", rowId: Object, colKey: string, value: Object): void;
	igTreeGridUpdating(methodName: "updateRow", rowId: Object, values: Object): void;
	igTreeGridUpdating(methodName: "addRow", values: Object): void;
	igTreeGridUpdating(methodName: "deleteRow", rowId: Object): void;
	igTreeGridUpdating(methodName: "startEdit", rowId: Object, column: Object, raiseEvents?: boolean): boolean;
	igTreeGridUpdating(methodName: "startAddRowEdit", raiseEvents?: boolean): boolean;
	igTreeGridUpdating(methodName: "endEdit", update?: boolean, raiseEvents?: boolean): boolean;
	igTreeGridUpdating(methodName: "findInvalid"): string;
	igTreeGridUpdating(methodName: "isEditing"): boolean;
	igTreeGridUpdating(methodName: "editorForKey", key: string): Object;
	igTreeGridUpdating(methodName: "editorForCell", cell: string, create?: boolean): Object;
	igTreeGridUpdating(methodName: "changeRegional"): void;
	igTreeGridUpdating(methodName: "showDeleteButtonFor", row: Object): void;
	igTreeGridUpdating(methodName: "hideDeleteButton"): void;

	/**
	 * Gets whether to enable or disable adding children to rows.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "enableAddChild"): boolean;

	/**
	 * Sets whether to enable or disable adding children to rows.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "enableAddChild", optionValue: boolean): void;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Gets the add child tooltip text. Use option [locale.enableAddChild](ui.igtreegridupdating#options:locale.enableAddChild).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "addChildTooltip"): string;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Sets the add child tooltip text. Use option [locale.enableAddChild](ui.igtreegridupdating#options:locale.enableAddChild).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "addChildTooltip", optionValue: string): void;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Gets the label of the add child button in touch environment. Use option [locale.addChildButtonLabel](ui.igtreegridupdating#options:locale.addChildButtonLabel).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "addChildButtonLabel"): string;

	/**
	 * This option has been deprecated as of the 2017.2 Volume release.
	 * Sets the label of the add child button in touch environment. Use option [locale.addChildButtonLabel](ui.igtreegridupdating#options:locale.addChildButtonLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "addChildButtonLabel", optionValue: string): void;
	igTreeGridUpdating(optionLiteral: 'option', optionName: "locale"): IgTreeGridUpdatingLocale;
	igTreeGridUpdating(optionLiteral: 'option', optionName: "locale", optionValue: IgTreeGridUpdatingLocale): void;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "inherit"): boolean;

	/**
	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;

	/**
	 * A list of custom column options that specify editing and validation settings for a specific column.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "columnSettings"): IgGridUpdatingColumnSetting[];

	/**
	 * A list of custom column options that specify editing and validation settings for a specific column.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridUpdatingColumnSetting[]): void;

	/**
	 * Gets the edit mode.
	 *
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "editMode"): string;

	/**
	 * Sets the edit mode.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "editMode", optionValue: string): void;

	/**
	 * Gets if deleting rows through the UI is enabled.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "enableDeleteRow"): boolean;

	/**
	 * Sets if deleting rows through the UI is enabled.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "enableDeleteRow", optionValue: boolean): void;

	/**
	 * Gets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "enableAddRow"): boolean;

	/**
	 * Sets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "enableAddRow", optionValue: boolean): void;

	/**
	 * Gets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "validation"): boolean;

	/**
	 * Sets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "validation", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "doneLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "doneLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "doneTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "doneTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "cancelLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "cancelLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "cancelTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "cancelTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "addRowLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "addRowLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "addRowTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "addRowTooltip", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "deleteRowLabel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "deleteRowLabel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Gets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "deleteRowTooltip"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Sets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "deleteRowTooltip", optionValue: string): void;

	/**
	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "showDoneCancelButtons"): boolean;

	/**
	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "showDoneCancelButtons", optionValue: boolean): void;

	/**
	 * Gets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "enableDataDirtyException"): boolean;

	/**
	 * Sets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "enableDataDirtyException", optionValue: boolean): void;

	/**
	 * Gets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
	 *
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "startEditTriggers"): string|Array<any>;

	/**
	 * Sets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "startEditTriggers", optionValue: string|Array<any>): void;

	/**
	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "horizontalMoveOnEnter"): boolean;

	/**
	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "horizontalMoveOnEnter", optionValue: boolean): void;

	/**
	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "excelNavigationMode"): boolean;

	/**
	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "excelNavigationMode", optionValue: boolean): void;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
	 *
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "saveChangesSuccessHandler"): Function|string;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "saveChangesSuccessHandler", optionValue: Function|string): void;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
	 *
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "saveChangesErrorHandler"): Function|string;

	/**
	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "saveChangesErrorHandler", optionValue: Function|string): void;

	/**
	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
	 *
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "swipeDistance"): string|number;

	/**
	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igTreeGridUpdating(optionLiteral: 'option', optionName: "swipeDistance", optionValue: string|number): void;

	/**
	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "wrapAround"): boolean;

	/**
	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "wrapAround", optionValue: boolean): void;

	/**
	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogOptions"): IgGridUpdatingRowEditDialogOptions;

	/**
	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogOptions", optionValue: IgGridUpdatingRowEditDialogOptions): void;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
	 *
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "dialogWidget"): string;

	/**
	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "dialogWidget", optionValue: string): void;

	/**
	 * Event fired before row editing begins.
	 * Return false in order to cancel editing.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowStarting"): EditRowStartingEvent;

	/**
	 * Event fired before row editing begins.
	 * Return false in order to cancel editing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowStarting", optionValue: EditRowStartingEvent): void;

	/**
	 * Event fired after row editing begins.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowStarted"): EditRowStartedEvent;

	/**
	 * Event fired after row editing begins.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowStarted", optionValue: EditRowStartedEvent): void;

	/**
	 * Event fired before row editing ends.
	 * Return false in order to prevent the grid from exiting edit mode.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowEnding"): EditRowEndingEvent;

	/**
	 * Event fired before row editing ends.
	 * Return false in order to prevent the grid from exiting edit mode.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowEnding", optionValue: EditRowEndingEvent): void;

	/**
	 * Event fired after row editing ends.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowEnded"): EditRowEndedEvent;

	/**
	 * Event fired after row editing ends.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowEnded", optionValue: EditRowEndedEvent): void;

	/**
	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
	 * Return false in order to cancel editing.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellStarting"): EditCellStartingEvent;

	/**
	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
	 * Return false in order to cancel editing.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellStarting", optionValue: EditCellStartingEvent): void;

	/**
	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellStarted"): EditCellStartedEvent;

	/**
	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellStarted", optionValue: EditCellStartedEvent): void;

	/**
	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellEnding"): EditCellEndingEvent;

	/**
	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellEnding", optionValue: EditCellEndingEvent): void;

	/**
	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellEnded"): EditCellEndedEvent;

	/**
	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellEnded", optionValue: EditCellEndedEvent): void;

	/**
	 * Event fired before adding a new row.
	 * Return false in order to cancel the adding of the new row to the data source.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowAdding"): RowAddingEvent;

	/**
	 * Event fired before adding a new row.
	 * Return false in order to cancel the adding of the new row to the data source.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowAdding", optionValue: RowAddingEvent): void;

	/**
	 * Event fired after adding a new row.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowAdded"): RowAddedEvent;

	/**
	 * Event fired after adding a new row.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowAdded", optionValue: RowAddedEvent): void;

	/**
	 * Event fired before deleting a row.
	 * Return false in order to cancel the row's deletion.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowDeleting"): RowDeletingEvent;

	/**
	 * Event fired before deleting a row.
	 * Return false in order to cancel the row's deletion.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowDeleting", optionValue: RowDeletingEvent): void;

	/**
	 * Event fired after a row is deleted.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowDeleted"): RowDeletedEvent;

	/**
	 * Event fired after a row is deleted.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowDeleted", optionValue: RowDeletedEvent): void;

	/**
	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
	 * Return false in order to prevent the exception.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "dataDirty"): DataDirtyEvent;

	/**
	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
	 * Return false in order to prevent the exception.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "dataDirty", optionValue: DataDirtyEvent): void;

	/**
	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "generatePrimaryKeyValue"): GeneratePrimaryKeyValueEvent;

	/**
	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "generatePrimaryKeyValue", optionValue: GeneratePrimaryKeyValueEvent): void;

	/**
	 * Event fired before the row edit dialog is opened.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeOpen"): RowEditDialogBeforeOpenEvent;

	/**
	 * Event fired before the row edit dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeOpen", optionValue: RowEditDialogBeforeOpenEvent): void;

	/**
	 * Event fired after the row edit dialog is opened.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterOpen"): RowEditDialogAfterOpenEvent;

	/**
	 * Event fired after the row edit dialog is opened.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterOpen", optionValue: RowEditDialogAfterOpenEvent): void;

	/**
	 * Event fired before the row edit dialog is closed.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeClose"): RowEditDialogBeforeCloseEvent;

	/**
	 * Event fired before the row edit dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeClose", optionValue: RowEditDialogBeforeCloseEvent): void;

	/**
	 * Event fired after the row edit dialog is closed.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterClose"): RowEditDialogAfterCloseEvent;

	/**
	 * Event fired after the row edit dialog is closed.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterClose", optionValue: RowEditDialogAfterCloseEvent): void;

	/**
	 * Event fired after the row edit dialog is rendered.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogContentsRendered"): RowEditDialogContentsRenderedEvent;

	/**
	 * Event fired after the row edit dialog is rendered.
	 *
	 * @optionValue Define event handler function.
	 */
	igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogContentsRendered", optionValue: RowEditDialogContentsRenderedEvent): void;
	igTreeGridUpdating(options: IgTreeGridUpdating): JQuery;
	igTreeGridUpdating(optionLiteral: 'option', optionName: string): any;
	igTreeGridUpdating(optionLiteral: 'option', options: IgTreeGridUpdating): JQuery;
	igTreeGridUpdating(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igTreeGridUpdating(methodName: string, ...methodParams: any[]): any;
}
interface IgBrowseButton {
	autoselect?: boolean;
	multipleFiles?: boolean;

	/**
	 * M.H. 13 Feb 2014 Fix for bug #164347: Move input  from document body to the upload container
	 */
	container?: any;

	/**
	 * Option for igBrowseButton
	 */
	[optionName: string]: any;
}
interface IgBrowseButtonMethods {
	attachFilePicker(e: Object, isHidden: Object): void;
	getFilePicker(): void;

	/**
	 * $(".selector").igUpload("destroy");
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igBrowseButton"): IgBrowseButtonMethods;
}

interface IgUploadLocale {
	/**
	 * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
	 *
	 */
	labelUploadButton?: string;

	/**
	 * Get or set label for browse button in main container.
	 *
	 */
	labelAddButton?: string;

	/**
	 * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
	 *
	 */
	labelClearAllButton?: string;

	/**
	 * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
	 *
	 */
	labelSummaryTemplate?: string;

	/**
	 * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
	 *
	 */
	labelSummaryProgressBarTemplate?: string;

	/**
	 * Get or set label for show/hide details button when main container is hidden.
	 *
	 */
	labelShowDetails?: string;

	/**
	 * Get or set label for show/hide details button when main container is shown.
	 *
	 */
	labelHideDetails?: string;

	/**
	 * Get or set label for button cancelling all files. Shown only in multiple upload mode.
	 *
	 */
	labelSummaryProgressButtonCancel?: string;

	/**
	 * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
	 *
	 */
	labelSummaryProgressButtonContinue?: string;

	/**
	 * Get or set label when upload is finished. Shown only in multiple upload mode.
	 *
	 */
	labelSummaryProgressButtonDone?: string;

	/**
	 * Get or set filename when it could not be shown the whole file name and should be shorten.
	 *
	 */
	labelProgressBarFileNameContinue?: string;

	/**
	 * Get or set message shown when max file size of the uploaded file exceeds the limit.
	 *
	 */
	errorMessageFileSizeExceeded?: string;

	/**
	 * Get or set error message when ajax call to get file status throws error.
	 *
	 */
	errorMessageGetFileStatus?: string;

	/**
	 * Get or set error message when ajax call to send cancel upload command.
	 *
	 */
	errorMessageCancelUpload?: string;

	/**
	 * Get or set error message when file is not found.
	 *
	 */
	errorMessageNoSuchFile?: string;

	/**
	 * Get or set error message different from the other messages.
	 *
	 */
	errorMessageOther?: string;

	/**
	 * Get or set error message when file extension validation failed.
	 *
	 */
	errorMessageValidatingFileExtension?: string;

	/**
	 * Get or set error message when AJAX Request to get file size throws error.
	 *
	 */
	errorMessageAJAXRequestFileSize?: string;

	/**
	 * Get or set error message when maximum allowed files exceeded.
	 *
	 */
	errorMessageMaxUploadedFiles?: string;

	/**
	 * Get or set error message when maximum simultaneous files is less or equal to 0.
	 *
	 */
	errorMessageMaxSimultaneousFiles?: string;

	/**
	 * Get or set error message when trying to remove non existing file.
	 *
	 */
	errorMessageTryToRemoveNonExistingFile?: string;

	/**
	 * Get or set error message when trying to start non existing file.
	 *
	 */
	errorMessageTryToStartNonExistingFile?: string;

	/**
	 * Get or set error message when trying to drop more than 1 file and mode is single.
	 *
	 */
	errorMessageDropMultipleFilesWhenSingleModel?: string;

	/**
	 * Get or set title for the first shown browse button. When file is selected for the first time this button is hidden.
	 *
	 */
	titleUploadFileButtonInit?: string;

	/**
	 * Get or set title for browse button in main container.
	 *
	 */
	titleAddFileButton?: string;

	/**
	 * Get or set title for the cancel upload button.
	 *
	 */
	titleCancelUploadButton?: string;

	/**
	 * Get or set title for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
	 *
	 */
	titleSummaryProgressButtonContinue?: string;

	/**
	 * Get or set title for summary Clear all button. It will be shown only in multiple upload mode.
	 *
	 */
	titleClearUploaded?: string;

	/**
	 * Get or set title for show details button.
	 *
	 */
	titleShowDetailsButton?: string;

	/**
	 * Get or set title for hide details button.
	 *
	 */
	titleHideDetailsButton?: string;

	/**
	 * Get or set title for button cancelling all files. Shown only in multiple upload mode.
	 *
	 */
	titleSummaryProgressButtonCancel?: string;

	/**
	 * Get or set title when upload is finished. Shown only in multiple upload mode.
	 *
	 */
	titleSummaryProgressButtonDone?: string;

	/**
	 * Get or set title for Continue button.
	 *
	 */
	titleSingleUploadButtonContinue?: string;

	/**
	 * Get or set title for summary Clear all button. It will be shown only in multiple upload mode.
	 *
	 */
	titleClearAllButton?: string;

	/**
	 * Option for IgUploadLocale
	 */
	[optionName: string]: any;
}

interface IgUploadFileExtensionIcons {
	/**
	 * Array of string for file extensions
	 */
	ext?: any[];

	/**
	 * Css classes which sets icon.
	 */
	css?: string;

	/**
	 * Default icons when the file extension is not found. It is taken only the first item which have def set to true, other are ignored.
	 */
	def?: boolean;

	/**
	 * Option for IgUploadFileExtensionIcons
	 */
	[optionName: string]: any;
}

interface FileSelectingEvent {
	(event: Event, ui: FileSelectingEventUIParam): void;
}

interface FileSelectingEventUIParam {
	/**
	 * Gets the igUpload widget object.
	 */
	owner?: any;
}

interface FileSelectedEvent {
	(event: Event, ui: FileSelectedEventUIParam): void;
}

interface FileSelectedEventUIParam {
	/**
	 * Gets the unique identifier of the file.
	 */
	fileId?: number;

	/**
	 * Gets the name of the uploaded file.
	 */
	filePath?: string;

	/**
	 * Gets the igUpload widget object.
	 */
	owner?: any;
}

interface FileUploadingEvent {
	(event: Event, ui: FileUploadingEventUIParam): void;
}

interface FileUploadingEventUIParam {
	/**
	 * Gets the unique identifier of the file.
	 */
	fileId?: number;

	/**
	 * Gets the name of the uploaded file.
	 */
	filePath?: string;

	/**
	 * Gets the file size of the uploaded file.
	 */
	totalSize?: number;

	/**
	 * Gets the uploaded bytes.
	 */
	uploadedBytes?: number;

	/**
	 * Gets the current file status.
	 */
	fileStatus?: number;

	/**
	 * Gets reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
	 */
	fileInfo?: any;

	/**
	 * Gets the igUpload widget object.
	 */
	owner?: any;
}

interface FileUploadedEvent {
	(event: Event, ui: FileUploadedEventUIParam): void;
}

interface FileUploadedEventUIParam {
	/**
	 * Gets the unique identifier of the file.
	 */
	fileId?: number;

	/**
	 * Gets the name of the uploaded file.
	 */
	filePath?: string;

	/**
	 * Gets the file size of the uploaded file.
	 */
	totalSize?: number;

	/**
	 * Gets reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
	 */
	fileInfo?: any;

	/**
	 * Gets the igUpload widget object.
	 */
	owner?: any;
}

interface FileUploadAbortedEvent {
	(event: Event, ui: FileUploadAbortedEventUIParam): void;
}

interface FileUploadAbortedEventUIParam {
	/**
	 * Gets the unique identifier of the file.
	 */
	fileId?: number;

	/**
	 * Gets the name of the uploaded file.
	 */
	filePath?: string;

	/**
	 * Gets the file size of the uploaded file.
	 */
	totalSize?: number;

	/**
	 * Gets the uploaded bytes.
	 */
	uploadedBytes?: number;

	/**
	 * Gets the current file status.
	 */
	fileStatus?: number;

	/**
	 * Gets the igUpload widget object.
	 */
	owner?: any;
}

interface CancelAllClickedEvent {
	(event: Event, ui: CancelAllClickedEventUIParam): void;
}

interface CancelAllClickedEventUIParam {
	/**
	 * Gets the igUpload widget object.
	 */
	owner?: any;
}

interface OnErrorEvent {
	(event: Event, ui: OnErrorEventUIParam): void;
}

interface OnErrorEventUIParam {
	/**
	 * Gets the current errorCode.
	 */
	errorCode?: number;

	/**
	 * Gets the identifier of the file for which the event is fired(after that it can be used API function getFileInfo). NOTE: It is possible to be null in some cases: try to drop multiple files when mode is single , check maximum allowed uploading files fails or check for count of maximum allowed simultaneous files upload fails.
	 */
	fileId?: number;

	/**
	 * Gets the detailed error description.
	 */
	errorMessage?: string;

	/**
	 * Gets the error type - it could be clientside or serverside.
	 */
	errorType?: string;

	/**
	 * Gets the specific server message returned by server - if errorType is serverside.
	 */
	serverMessage?: string;

	/**
	 * Gets the igUpload widget object.
	 */
	owner?: any;
}

interface FileExtensionsValidatingEvent {
	(event: Event, ui: FileExtensionsValidatingEventUIParam): void;
}

interface FileExtensionsValidatingEventUIParam {
	/**
	 * Gets the full file name.
	 */
	fileName?: string;

	/**
	 * Gets the file extension.
	 */
	fileExtension?: string;

	/**
	 * Gets the the igUpload widget object.
	 */
	owner?: any;
}

interface OnXHRLoadEvent {
	(event: Event, ui: OnXHRLoadEventUIParam): void;
}

interface OnXHRLoadEventUIParam {
	/**
	 * Gets the unique identifier of the file.
	 */
	fileId?: number;

	/**
	 * Gets reference to the original XMLHttpRequest object.
	 */
	xhr?: any;

	/**
	 * Gets reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from the server-side), etc.
	 */
	fileInfo?: any;

	/**
	 * Gets the igUpload widget object.
	 */
	owner?: any;
}

interface OnFormDataSubmitEvent {
	(event: Event, ui: OnFormDataSubmitEventUIParam): void;
}

interface OnFormDataSubmitEventUIParam {
	/**
	 * Gets the unique identifier of the file.
	 */
	fileId?: number;

	/**
	 * Gets reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from the server-side), etc.
	 */
	fileInfo?: any;

	/**
	 * Gets reference to the original XMLHttpRequest object(if the browser supports HTML 5 file API - if not it is undefined).
	 */
	xhr?: any;

	/**
	 * Gets reference to FormData object(if the browser supports HTML5 file API) OR reference to jQuery representation of <form>.
	 */
	formData?: any;

	/**
	 * Gets the igUpload widget object.
	 */
	owner?: any;
}

interface IgUpload {
	/**
	 * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
	 *
	 */
	width?: number|string;

	/**
	 * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
	 *
	 */
	height?: number|string;

	/**
	 * Get or set whether the file start upload automatically when it is selected. Default is false.
	 *
	 */
	autostartupload?: boolean;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
	 * Use option [locale.labelUploadButton](ui.igupload#options:locale.labelUploadButton).
	 */
	labelUploadButton?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for browse button in main container.
	 * Use option [locale.labelAddButton](ui.igupload#options:locale.labelAddButton).
	 */
	labelAddButton?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
	 * Use option [locale.labelClearAllButton](ui.igupload#options:locale.labelClearAllButton).
	 */
	labelClearAllButton?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
	 * Use option [locale.labelSummaryTemplate](ui.igupload#options:locale.labelSummaryTemplate).
	 */
	labelSummaryTemplate?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
	 * Use option [locale.labelSummaryProgressBarTemplate](ui.igupload#options:locale.labelSummaryProgressBarTemplate).
	 */
	labelSummaryProgressBarTemplate?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for show/hide details button when main container is hidden.
	 * Use option [locale.labelShowDetails](ui.igupload#options:locale.labelShowDetails).
	 */
	labelShowDetails?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for show/hide details button when main container is shown.
	 * Use option [locale.labelHideDetails](ui.igupload#options:locale.labelHideDetails).
	 */
	labelHideDetails?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for button cancelling all files. Shown only in multiple upload mode.
	 * Use option [locale.labelSummaryProgressButtonCancel](ui.igupload#options:locale.labelSummaryProgressButtonCancel).
	 */
	labelSummaryProgressButtonCancel?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
	 * Use option [locale.labelSummaryProgressButtonContinue](ui.igupload#options:locale.labelSummaryProgressButtonContinue).
	 */
	labelSummaryProgressButtonContinue?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label when upload is finished. Shown only in multiple upload mode.
	 * Use option [locale.labelSummaryProgressButtonDone](ui.igupload#options:locale.labelSummaryProgressButtonDone).
	 */
	labelSummaryProgressButtonDone?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set filename when it could not be shown the whole file name and should be shorten.
	 * Use option [locale.labelProgressBarFileNameContinue](ui.igupload#options:locale.labelProgressBarFileNameContinue).
	 */
	labelProgressBarFileNameContinue?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set message shown when max file size of the uploaded file exceeds the limit.
	 * Use option [locale.errorMessageMaxFileSizeExceeded](ui.igupload#options:locale.errorMessageMaxFileSizeExceeded).
	 */
	errorMessageMaxFileSizeExceeded?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when ajax call to get file status throws error.
	 * Use option [locale.errorMessageGetFileStatus](ui.igupload#options:locale.errorMessageGetFileStatus).
	 */
	errorMessageGetFileStatus?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when ajax call to send cancel upload command.
	 * Use option [locale.errorMessageCancelUpload](ui.igupload#options:locale.errorMessageCancelUpload).
	 */
	errorMessageCancelUpload?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when file is not found.
	 * Use option [locale.errorMessageNoSuchFile](ui.igupload#options:locale.errorMessageNoSuchFile).
	 */
	errorMessageNoSuchFile?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *  Get or set error message different from the other messages.
	 * Use option [locale.errorMessageOther](ui.igupload#options:locale.errorMessageOther).
	 */
	errorMessageOther?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when file extension validation failed.
	 * Use option [locale.errorMessageValidatingFileExtension](ui.igupload#options:locale.errorMessageValidatingFileExtension).
	 */
	errorMessageValidatingFileExtension?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when AJAX Request to get file size throws error.
	 * Use option [locale.errorMessageAJAXRequestFileSize](ui.igupload#options:locale.errorMessageAJAXRequestFileSize).
	 */
	errorMessageAJAXRequestFileSize?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when trying to remove non existing file.
	 * Use option [locale.errorMessageTryToRemoveNonExistingFile](ui.igupload#options:locale.errorMessageTryToRemoveNonExistingFile).
	 */
	errorMessageTryToRemoveNonExistingFile?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when trying to start non existing file.
	 * Use option [locale.errorMessageTryToStartNonExistingFile](ui.igupload#options:locale.errorMessageTryToStartNonExistingFile).
	 */
	errorMessageTryToStartNonExistingFile?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when maximum allowed files exceeded.
	 * Use option [locale.errorMessageMaxUploadedFiles](ui.igupload#options:locale.errorMessageMaxUploadedFiles).
	 */
	errorMessageMaxUploadedFiles?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when maximum simultaneous files is less or equal to 0.
	 * Use option [locale.errorMessageMaxSimultaneousFiles](ui.igupload#options:locale.errorMessageMaxSimultaneousFiles).
	 */
	errorMessageMaxSimultaneousFiles?: string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when trying to drop more than 1 file and mode is single.
	 * Use option [locale.errorMessageDropMultipleFilesWhenSingleModel](ui.igupload#options:locale.errorMessageDropMultipleFilesWhenSingleModel).
	 */
	errorMessageDropMultipleFilesWhenSingleModel?: string;
	locale?: IgUploadLocale;

	/**
	 * Get or set URL for uploading.
	 *
	 */
	uploadUrl?: string;

	/**
	 * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
	 *
	 */
	progressUrl?: string;

	/**
	 * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
	 *
	 */
	allowedExtensions?: any[];

	/**
	 * Get or set whether to show File Extension icon
	 *
	 */
	showFileExtensionIcon?: boolean;

	/**
	 * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
	 *
	 */
	css?: any;

	/**
	 * Set icon css classes for specified file extension
	 *
	 */
	fileExtensionIcons?: IgUploadFileExtensionIcons;

	/**
	 * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
	 *
	 */
	mode?: any;

	/**
	 * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
	 *
	 */
	multipleFiles?: boolean;

	/**
	 * Get or set the maximum number of allowed files to upload.
	 *
	 */
	maxUploadedFiles?: number;

	/**
	 * Get or set count of files that could be uploaded at the same time.
	 *
	 */
	maxSimultaneousFilesUploads?: number;

	/**
	 * Get or set file size metrics how to be shown files size.
	 *
	 */
	fileSizeMetric?: any;

	/**
	 * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
	 *
	 */
	controlId?: string;

	/**
	 * The number of digits after the decimal point.
	 *
	 */
	fileSizeDecimalDisplay?: number;

	/**
	 * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
	 */
	maxFileSize?: any;

	/**
	 * Get or set whether to use only one request for sending data, when you are sending more than one file.
	 *
	 */
	useSingleRequest?: boolean;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Defines the name of the file upload selecting event. Fired when browse button is pressed.
	 * Return false in order to cancel selecting file.
	 */
	fileSelecting?: FileSelectingEvent;

	/**
	 * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
	 * Return false in order to cancel uploading file.
	 */
	fileSelected?: FileSelectedEvent;

	/**
	 * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
	 * Return false in order to cancel uploading file.
	 */
	fileUploading?: FileUploadingEvent;

	/**
	 * Defines the name of the uploaded event. Fired when the file is uploaded
	 */
	fileUploaded?: FileUploadedEvent;

	/**
	 * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
	 */
	fileUploadAborted?: FileUploadAbortedEvent;

	/**
	 * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
	 */
	cancelAllClicked?: CancelAllClickedEvent;

	/**
	 * Defines the name of the file upload error event. Fired when error is occurred.
	 */
	onError?: OnErrorEvent;

	/**
	 * It is fired when validating file extensions
	 */
	fileExtensionsValidating?: FileExtensionsValidatingEvent;

	/**
	 * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
	 */
	onXHRLoad?: OnXHRLoadEvent;

	/**
	 * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
	 */
	onFormDataSubmit?: OnFormDataSubmitEvent;

	/**
	 * Option for igUpload
	 */
	[optionName: string]: any;
}
interface IgUploadMethods {
	/**
	 * Return jquery object of fileupload container - html DOM element
	 */
	container(): void;

	/**
	 * Returns the current widget element
	 */
	widget(): void;

	/**
	 * Hide finished files
	 */
	clearAll(): void;

	/**
	 * Append additional data field to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
	 *
	 * @param formData If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
	 * @param field Data field that should be appended to the formData. The object has 2 properties - value and name. If the browser supports HTML5 the data field is appended to the formData object. Otherwise it is appended as input hidden field to the <form>
	 */
	addDataField(formData: Object, field: Object): void;

	/**
	 * Append additional data fields to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
	 *
	 * @param formData If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
	 * @param fields Array of data fields that should be appended to the formData. Each data field is object with 2 properties - value and name. If the browser supports HTML5 these data fields are added to the formData. Otherwise each of these data field is appended as input hidden field to the <form>
	 */
	addDataFields(formData: Object, fields: any[]): void;

	/**
	 * Start uploading file as submitting form with the specified formNumber.
	 *
	 * @param formNumber id of the upload form. If left undefined and useSingleRequest is true all pending files will be uploaded.
	 */
	startUpload(formNumber: number): void;

	/**
	 * Cancel upload for the specified file id
	 *  formNumber - id of the file to be canceled
	 *
	 * @param formNumber id of the form which should be cancelled
	 */
	cancelUpload(formNumber: number): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igupload#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igupload#options:language) or [locale](ui.igupload#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Destroy the widget
	 */
	destroy(): void;

	/**
	 * Returns the information about uploading files - all files uploaded/uploading/pending
	 */
	getFileInfoData(): Object;

	/**
	 * Cancel all uploading and pending files
	 */
	cancelAll(): void;

	/**
	 * Returns the information about the file by specified file identifier. It could be file which is uploading/uploaded or uploading is not started. If there isn"t file with the specified file id returns null
	 *
	 * @param fileIndex unique identifier of the file
	 */
	getFileInfo(fileIndex: number): Object;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igUpload"): IgUploadMethods;
}

interface JQuery {
	igBrowseButton(methodName: "attachFilePicker", e: Object, isHidden: Object): void;
	igBrowseButton(methodName: "getFilePicker"): void;
	igBrowseButton(methodName: "destroy"): void;
	igBrowseButton(optionLiteral: 'option', optionName: "autoselect"): boolean;
	igBrowseButton(optionLiteral: 'option', optionName: "autoselect", optionValue: boolean): void;
	igBrowseButton(optionLiteral: 'option', optionName: "multipleFiles"): boolean;
	igBrowseButton(optionLiteral: 'option', optionName: "multipleFiles", optionValue: boolean): void;

	/**
	 * M.H. 13 Feb 2014 Fix for bug #164347: Move input  from document body to the upload container
	 */
	igBrowseButton(optionLiteral: 'option', optionName: "container"): any;

	/**
	 * M.H. 13 Feb 2014 Fix for bug #164347: Move input  from document body to the upload container
	 *
	 * @optionValue New value to be set.
	 */
	igBrowseButton(optionLiteral: 'option', optionName: "container", optionValue: any): void;
	igBrowseButton(options: IgBrowseButton): JQuery;
	igBrowseButton(optionLiteral: 'option', optionName: string): any;
	igBrowseButton(optionLiteral: 'option', options: IgBrowseButton): JQuery;
	igBrowseButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igBrowseButton(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
	igUpload(methodName: "container"): void;
	igUpload(methodName: "widget"): void;
	igUpload(methodName: "clearAll"): void;
	igUpload(methodName: "addDataField", formData: Object, field: Object): void;
	igUpload(methodName: "addDataFields", formData: Object, fields: any[]): void;
	igUpload(methodName: "startUpload", formNumber: number): void;
	igUpload(methodName: "cancelUpload", formNumber: number): void;
	igUpload(methodName: "changeLocale"): void;
	igUpload(methodName: "destroy"): void;
	igUpload(methodName: "getFileInfoData"): Object;
	igUpload(methodName: "cancelAll"): void;
	igUpload(methodName: "getFileInfo", fileIndex: number): Object;
	igUpload(methodName: "changeGlobalLanguage"): void;
	igUpload(methodName: "changeGlobalRegional"): void;

	/**
	 * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
	 *
	 */

	igUpload(optionLiteral: 'option', optionName: "width"): number|string;

	/**
	 * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igUpload(optionLiteral: 'option', optionName: "width", optionValue: number|string): void;

	/**
	 * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
	 *
	 */

	igUpload(optionLiteral: 'option', optionName: "height"): number|string;

	/**
	 * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igUpload(optionLiteral: 'option', optionName: "height", optionValue: number|string): void;

	/**
	 * Get or set whether the file start upload automatically when it is selected. Default is false.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "autostartupload"): boolean;

	/**
	 * Get or set whether the file start upload automatically when it is selected. Default is false.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "autostartupload", optionValue: boolean): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
	 * Use option [locale.labelUploadButton](ui.igupload#options:locale.labelUploadButton).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelUploadButton"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
	 * Use option [locale.labelUploadButton](ui.igupload#options:locale.labelUploadButton).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelUploadButton", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for browse button in main container.
	 * Use option [locale.labelAddButton](ui.igupload#options:locale.labelAddButton).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelAddButton"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for browse button in main container.
	 * Use option [locale.labelAddButton](ui.igupload#options:locale.labelAddButton).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelAddButton", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
	 * Use option [locale.labelClearAllButton](ui.igupload#options:locale.labelClearAllButton).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelClearAllButton"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
	 * Use option [locale.labelClearAllButton](ui.igupload#options:locale.labelClearAllButton).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelClearAllButton", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
	 * Use option [locale.labelSummaryTemplate](ui.igupload#options:locale.labelSummaryTemplate).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryTemplate"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
	 * Use option [locale.labelSummaryTemplate](ui.igupload#options:locale.labelSummaryTemplate).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryTemplate", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
	 * Use option [locale.labelSummaryProgressBarTemplate](ui.igupload#options:locale.labelSummaryProgressBarTemplate).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressBarTemplate"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
	 * Use option [locale.labelSummaryProgressBarTemplate](ui.igupload#options:locale.labelSummaryProgressBarTemplate).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressBarTemplate", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for show/hide details button when main container is hidden.
	 * Use option [locale.labelShowDetails](ui.igupload#options:locale.labelShowDetails).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelShowDetails"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for show/hide details button when main container is hidden.
	 * Use option [locale.labelShowDetails](ui.igupload#options:locale.labelShowDetails).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelShowDetails", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for show/hide details button when main container is shown.
	 * Use option [locale.labelHideDetails](ui.igupload#options:locale.labelHideDetails).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelHideDetails"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for show/hide details button when main container is shown.
	 * Use option [locale.labelHideDetails](ui.igupload#options:locale.labelHideDetails).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelHideDetails", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for button cancelling all files. Shown only in multiple upload mode.
	 * Use option [locale.labelSummaryProgressButtonCancel](ui.igupload#options:locale.labelSummaryProgressButtonCancel).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonCancel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for button cancelling all files. Shown only in multiple upload mode.
	 * Use option [locale.labelSummaryProgressButtonCancel](ui.igupload#options:locale.labelSummaryProgressButtonCancel).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonCancel", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
	 * Use option [locale.labelSummaryProgressButtonContinue](ui.igupload#options:locale.labelSummaryProgressButtonContinue).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonContinue"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
	 * Use option [locale.labelSummaryProgressButtonContinue](ui.igupload#options:locale.labelSummaryProgressButtonContinue).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonContinue", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label when upload is finished. Shown only in multiple upload mode.
	 * Use option [locale.labelSummaryProgressButtonDone](ui.igupload#options:locale.labelSummaryProgressButtonDone).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonDone"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set label when upload is finished. Shown only in multiple upload mode.
	 * Use option [locale.labelSummaryProgressButtonDone](ui.igupload#options:locale.labelSummaryProgressButtonDone).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonDone", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set filename when it could not be shown the whole file name and should be shorten.
	 * Use option [locale.labelProgressBarFileNameContinue](ui.igupload#options:locale.labelProgressBarFileNameContinue).
	 */
	igUpload(optionLiteral: 'option', optionName: "labelProgressBarFileNameContinue"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set filename when it could not be shown the whole file name and should be shorten.
	 * Use option [locale.labelProgressBarFileNameContinue](ui.igupload#options:locale.labelProgressBarFileNameContinue).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "labelProgressBarFileNameContinue", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set message shown when max file size of the uploaded file exceeds the limit.
	 * Use option [locale.errorMessageMaxFileSizeExceeded](ui.igupload#options:locale.errorMessageMaxFileSizeExceeded).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageMaxFileSizeExceeded"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set message shown when max file size of the uploaded file exceeds the limit.
	 * Use option [locale.errorMessageMaxFileSizeExceeded](ui.igupload#options:locale.errorMessageMaxFileSizeExceeded).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageMaxFileSizeExceeded", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when ajax call to get file status throws error.
	 * Use option [locale.errorMessageGetFileStatus](ui.igupload#options:locale.errorMessageGetFileStatus).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageGetFileStatus"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when ajax call to get file status throws error.
	 * Use option [locale.errorMessageGetFileStatus](ui.igupload#options:locale.errorMessageGetFileStatus).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageGetFileStatus", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when ajax call to send cancel upload command.
	 * Use option [locale.errorMessageCancelUpload](ui.igupload#options:locale.errorMessageCancelUpload).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageCancelUpload"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when ajax call to send cancel upload command.
	 * Use option [locale.errorMessageCancelUpload](ui.igupload#options:locale.errorMessageCancelUpload).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageCancelUpload", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when file is not found.
	 * Use option [locale.errorMessageNoSuchFile](ui.igupload#options:locale.errorMessageNoSuchFile).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageNoSuchFile"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when file is not found.
	 * Use option [locale.errorMessageNoSuchFile](ui.igupload#options:locale.errorMessageNoSuchFile).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageNoSuchFile", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *  Get or set error message different from the other messages.
	 * Use option [locale.errorMessageOther](ui.igupload#options:locale.errorMessageOther).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageOther"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 *  Get or set error message different from the other messages.
	 * Use option [locale.errorMessageOther](ui.igupload#options:locale.errorMessageOther).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageOther", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when file extension validation failed.
	 * Use option [locale.errorMessageValidatingFileExtension](ui.igupload#options:locale.errorMessageValidatingFileExtension).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageValidatingFileExtension"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when file extension validation failed.
	 * Use option [locale.errorMessageValidatingFileExtension](ui.igupload#options:locale.errorMessageValidatingFileExtension).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageValidatingFileExtension", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when AJAX Request to get file size throws error.
	 * Use option [locale.errorMessageAJAXRequestFileSize](ui.igupload#options:locale.errorMessageAJAXRequestFileSize).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageAJAXRequestFileSize"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when AJAX Request to get file size throws error.
	 * Use option [locale.errorMessageAJAXRequestFileSize](ui.igupload#options:locale.errorMessageAJAXRequestFileSize).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageAJAXRequestFileSize", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when trying to remove non existing file.
	 * Use option [locale.errorMessageTryToRemoveNonExistingFile](ui.igupload#options:locale.errorMessageTryToRemoveNonExistingFile).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageTryToRemoveNonExistingFile"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when trying to remove non existing file.
	 * Use option [locale.errorMessageTryToRemoveNonExistingFile](ui.igupload#options:locale.errorMessageTryToRemoveNonExistingFile).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageTryToRemoveNonExistingFile", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when trying to start non existing file.
	 * Use option [locale.errorMessageTryToStartNonExistingFile](ui.igupload#options:locale.errorMessageTryToStartNonExistingFile).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageTryToStartNonExistingFile"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when trying to start non existing file.
	 * Use option [locale.errorMessageTryToStartNonExistingFile](ui.igupload#options:locale.errorMessageTryToStartNonExistingFile).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageTryToStartNonExistingFile", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when maximum allowed files exceeded.
	 * Use option [locale.errorMessageMaxUploadedFiles](ui.igupload#options:locale.errorMessageMaxUploadedFiles).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageMaxUploadedFiles"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when maximum allowed files exceeded.
	 * Use option [locale.errorMessageMaxUploadedFiles](ui.igupload#options:locale.errorMessageMaxUploadedFiles).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageMaxUploadedFiles", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when maximum simultaneous files is less or equal to 0.
	 * Use option [locale.errorMessageMaxSimultaneousFiles](ui.igupload#options:locale.errorMessageMaxSimultaneousFiles).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageMaxSimultaneousFiles"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when maximum simultaneous files is less or equal to 0.
	 * Use option [locale.errorMessageMaxSimultaneousFiles](ui.igupload#options:locale.errorMessageMaxSimultaneousFiles).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageMaxSimultaneousFiles", optionValue: string): void;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when trying to drop more than 1 file and mode is single.
	 * Use option [locale.errorMessageDropMultipleFilesWhenSingleModel](ui.igupload#options:locale.errorMessageDropMultipleFilesWhenSingleModel).
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageDropMultipleFilesWhenSingleModel"): string;

	/**
	 * This option has been removed as of 2017.2 Volume release.
	 * Get or set error message when trying to drop more than 1 file and mode is single.
	 * Use option [locale.errorMessageDropMultipleFilesWhenSingleModel](ui.igupload#options:locale.errorMessageDropMultipleFilesWhenSingleModel).
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "errorMessageDropMultipleFilesWhenSingleModel", optionValue: string): void;
	igUpload(optionLiteral: 'option', optionName: "locale"): IgUploadLocale;
	igUpload(optionLiteral: 'option', optionName: "locale", optionValue: IgUploadLocale): void;

	/**
	 * Get or set URL for uploading.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "uploadUrl"): string;

	/**
	 * Get or set URL for uploading.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "uploadUrl", optionValue: string): void;

	/**
	 * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "progressUrl"): string;

	/**
	 * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "progressUrl", optionValue: string): void;

	/**
	 * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "allowedExtensions"): any[];

	/**
	 * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "allowedExtensions", optionValue: any[]): void;

	/**
	 * Get or set whether to show File Extension icon
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "showFileExtensionIcon"): boolean;

	/**
	 * Get or set whether to show File Extension icon
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "showFileExtensionIcon", optionValue: boolean): void;

	/**
	 * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "css"): any;

	/**
	 * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "css", optionValue: any): void;

	/**
	 * Set icon css classes for specified file extension
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "fileExtensionIcons"): IgUploadFileExtensionIcons;

	/**
	 * Set icon css classes for specified file extension
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileExtensionIcons", optionValue: IgUploadFileExtensionIcons): void;

	/**
	 * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "mode"): any;

	/**
	 * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "mode", optionValue: any): void;

	/**
	 * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "multipleFiles"): boolean;

	/**
	 * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "multipleFiles", optionValue: boolean): void;

	/**
	 * Get or set the maximum number of allowed files to upload.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "maxUploadedFiles"): number;

	/**
	 * Get or set the maximum number of allowed files to upload.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "maxUploadedFiles", optionValue: number): void;

	/**
	 * Get or set count of files that could be uploaded at the same time.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "maxSimultaneousFilesUploads"): number;

	/**
	 * Get or set count of files that could be uploaded at the same time.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "maxSimultaneousFilesUploads", optionValue: number): void;

	/**
	 * Get or set file size metrics how to be shown files size.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "fileSizeMetric"): any;

	/**
	 * Get or set file size metrics how to be shown files size.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileSizeMetric", optionValue: any): void;

	/**
	 * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "controlId"): string;

	/**
	 * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "controlId", optionValue: string): void;

	/**
	 * The number of digits after the decimal point.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "fileSizeDecimalDisplay"): number;

	/**
	 * The number of digits after the decimal point.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileSizeDecimalDisplay", optionValue: number): void;

	/**
	 * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
	 */
	igUpload(optionLiteral: 'option', optionName: "maxFileSize"): any;

	/**
	 * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "maxFileSize", optionValue: any): void;

	/**
	 * Get or set whether to use only one request for sending data, when you are sending more than one file.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "useSingleRequest"): boolean;

	/**
	 * Get or set whether to use only one request for sending data, when you are sending more than one file.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "useSingleRequest", optionValue: boolean): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igUpload(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igUpload(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igUpload(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Defines the name of the file upload selecting event. Fired when browse button is pressed.
	 * Return false in order to cancel selecting file.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileSelecting"): FileSelectingEvent;

	/**
	 * Defines the name of the file upload selecting event. Fired when browse button is pressed.
	 * Return false in order to cancel selecting file.
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileSelecting", optionValue: FileSelectingEvent): void;

	/**
	 * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
	 * Return false in order to cancel uploading file.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileSelected"): FileSelectedEvent;

	/**
	 * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
	 * Return false in order to cancel uploading file.
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileSelected", optionValue: FileSelectedEvent): void;

	/**
	 * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
	 * Return false in order to cancel uploading file.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileUploading"): FileUploadingEvent;

	/**
	 * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
	 * Return false in order to cancel uploading file.
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileUploading", optionValue: FileUploadingEvent): void;

	/**
	 * Defines the name of the uploaded event. Fired when the file is uploaded
	 */
	igUpload(optionLiteral: 'option', optionName: "fileUploaded"): FileUploadedEvent;

	/**
	 * Defines the name of the uploaded event. Fired when the file is uploaded
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileUploaded", optionValue: FileUploadedEvent): void;

	/**
	 * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileUploadAborted"): FileUploadAbortedEvent;

	/**
	 * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileUploadAborted", optionValue: FileUploadAbortedEvent): void;

	/**
	 * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
	 */
	igUpload(optionLiteral: 'option', optionName: "cancelAllClicked"): CancelAllClickedEvent;

	/**
	 * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "cancelAllClicked", optionValue: CancelAllClickedEvent): void;

	/**
	 * Defines the name of the file upload error event. Fired when error is occurred.
	 */
	igUpload(optionLiteral: 'option', optionName: "onError"): OnErrorEvent;

	/**
	 * Defines the name of the file upload error event. Fired when error is occurred.
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "onError", optionValue: OnErrorEvent): void;

	/**
	 * It is fired when validating file extensions
	 */
	igUpload(optionLiteral: 'option', optionName: "fileExtensionsValidating"): FileExtensionsValidatingEvent;

	/**
	 * It is fired when validating file extensions
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "fileExtensionsValidating", optionValue: FileExtensionsValidatingEvent): void;

	/**
	 * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
	 */
	igUpload(optionLiteral: 'option', optionName: "onXHRLoad"): OnXHRLoadEvent;

	/**
	 * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "onXHRLoad", optionValue: OnXHRLoadEvent): void;

	/**
	 * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
	 */
	igUpload(optionLiteral: 'option', optionName: "onFormDataSubmit"): OnFormDataSubmitEvent;

	/**
	 * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
	 *
	 * @optionValue New value to be set.
	 */
	igUpload(optionLiteral: 'option', optionName: "onFormDataSubmit", optionValue: OnFormDataSubmitEvent): void;
	igUpload(options: IgUpload): JQuery;
	igUpload(optionLiteral: 'option', optionName: string): any;
	igUpload(optionLiteral: 'option', options: IgUpload): JQuery;
	igUpload(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igUpload(methodName: string, ...methodParams: any[]): any;
}
interface IgValidatorField {
	/**
	 * Gets the target element (input or control target) to be validated. This field setting is required.
	 *
	 *
	 * Valid values:
	 * "string" A valid jQuery selector for the element
	 * "object" A reference to a jQuery object
	 */
	selector?: string|Object;

	/**
	 * Option for IgValidatorField
	 */
	[optionName: string]: any;
}

interface ValidatingEvent {
	(event: Event, ui: ValidatingEventUIParam): void;
}

interface ValidatingEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the current value in target.
	 */
	value?: any;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface ValidatedEvent {
	(event: Event, ui: ValidatedEventUIParam): void;
}

interface ValidatedEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the current value in target.
	 */
	value?: any;

	/**
	 * Determine the outcome of the validation.
	 */
	valid?: boolean;

	/**
	 * Get the formatted message text, if any.
	 */
	message?: string;

	/**
	 * Get all messages, if any. May be more than one if [executeAllRules](ui.igvalidator#options:executeAllRules) is enabled.
	 */
	messages?: any[];

	/**
	 * Deprecated. Populated with the name of the rule that failed validation, if any.
	 */
	rule?: string;

	/**
	 * Populated with the names of rule that failed validation, if any.
	 */
	rules?: any[];

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface SuccessEvent {
	(event: Event, ui: SuccessEventUIParam): void;
}

interface SuccessEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the current value in target.
	 */
	value?: any;

	/**
	 * Determine the outcome of the validation.
	 */
	valid?: boolean;

	/**
	 * Get the formatted message text, if any.
	 */
	message?: string;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface ErrorEvent {
	(event: Event, ui: ErrorEventUIParam): void;
}

interface ErrorEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the current value in target.
	 */
	value?: any;

	/**
	 * Determine the outcome of the validation.
	 */
	valid?: boolean;

	/**
	 * Get the formatted message text.
	 */
	message?: string;

	/**
	 * Get all messages. May be more than one if [executeAllRules](ui.igvalidator#options:executeAllRules) is enabled.
	 */
	messages?: any[];

	/**
	 * Deprecated. Populated with the name of the rule that failed validation.
	 */
	rule?: string;

	/**
	 * Populated with the names of rule that failed validation.
	 */
	rules?: any[];

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface ErrorShowingEvent {
	(event: Event, ui: ErrorShowingEventUIParam): void;
}

interface ErrorShowingEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the text of message.
	 */
	message?: string;

	/**
	 * Gets reference to the target of the message.
	 */
	target?: string;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface ErrorHidingEvent {
	(event: Event, ui: ErrorHidingEventUIParam): void;
}

interface ErrorHidingEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the text of message.
	 */
	message?: string;

	/**
	 * Gets reference to the target of the message.
	 */
	target?: string;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface ErrorShownEvent {
	(event: Event, ui: ErrorShownEventUIParam): void;
}

interface ErrorShownEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the text of message.
	 */
	message?: string;

	/**
	 * Gets reference to the target of the message.
	 */
	target?: string;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface ErrorHiddenEvent {
	(event: Event, ui: ErrorHiddenEventUIParam): void;
}

interface ErrorHiddenEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the text of message.
	 */
	message?: string;

	/**
	 * Gets reference to the target of the message.
	 */
	target?: string;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface SuccessShowingEvent {
	(event: Event, ui: SuccessShowingEventUIParam): void;
}

interface SuccessShowingEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the text of message.
	 */
	message?: string;

	/**
	 * Gets reference to the target of the message.
	 */
	target?: string;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface SuccessHidingEvent {
	(event: Event, ui: SuccessHidingEventUIParam): void;
}

interface SuccessHidingEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the text of message.
	 */
	message?: string;

	/**
	 * Gets reference to the target of the message.
	 */
	target?: string;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface SuccessShownEvent {
	(event: Event, ui: SuccessShownEventUIParam): void;
}

interface SuccessShownEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the text of message.
	 */
	message?: string;

	/**
	 * Gets reference to the target of the message.
	 */
	target?: string;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface SuccessHiddenEvent {
	(event: Event, ui: SuccessHiddenEventUIParam): void;
}

interface SuccessHiddenEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets the text of message.
	 */
	message?: string;

	/**
	 * Gets reference to the target of the message.
	 */
	target?: string;

	/**
	 * Populated with options for the specific field in the collection or null.
	 */
	fieldOptions?: any;
}

interface FormValidatingEvent {
	(event: Event, ui: FormValidatingEventUIParam): void;
}

interface FormValidatingEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets reference to the event target form.
	 */
	target?: string;
}

interface FormValidatedEvent {
	(event: Event, ui: FormValidatedEventUIParam): void;
}

interface FormValidatedEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets reference to the event target form.
	 */
	target?: string;

	/**
	 * Determine the outcome of the validation.
	 */
	valid?: boolean;
}

interface FormErrorEvent {
	(event: Event, ui: FormErrorEventUIParam): void;
}

interface FormErrorEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets reference to the event target form.
	 */
	target?: string;
}

interface FormSuccessEvent {
	(event: Event, ui: FormSuccessEventUIParam): void;
}

interface FormSuccessEventUIParam {
	/**
	 * Gets reference to the igValidator widget.
	 */
	owner?: any;

	/**
	 * Gets reference to the event target form.
	 */
	target?: string;
}

interface IgValidator {
	/**
	 * Gets/Sets whether validation is triggered when the text in editor changes.
	 * Note that this is more appropriate for selection controls such as checkbox, combo or rating.
	 * As it can cause excessive messages with text-based fields, the initial validation can be delayed via the [threshold](ui.igvalidator#options:threshold) option.
	 *
	 */
	onchange?: boolean;

	/**
	 * Gets/Sets whether validation is triggered when the editor loses focus.
	 *
	 */
	onblur?: boolean;

	/**
	 * Gets/Sets whether validation is triggered when a form containing validation targets is submitting. If any of the validations fail, the submit action will be prevented.
	 * Note that this doesn't apply to the native JavaScript submit function, but will handle the jQuery equivalent and the browser default action.
	 *
	 */
	onsubmit?: boolean;

	/**
	 * Gets/Sets option to validate if a value was entered (not empty text, selected item, etc.)
	 *
	 *
	 * Valid values:
	 * "boolean" A boolean value indicating if the field is required.
	 * "object" A configuration object with optional error message (e.g. required: { errorMessage: "Error!"} )
	 */
	required?: boolean|Object;

	/**
	 * Gets/Sets number validation rule options.Default separators for decimals and thousands are '.' and ',' respectively and are defined in the "$.ui.igValidator.defaults" object.
	 *
	 *
	 * Valid values:
	 * "boolean" A boolean value indicating if the field should be a number. Default separators are used.
	 * "object" A configuration object with errorMessage, decimalSeparator and thousandsSeparator. Those properties are all optional.
	 */
	number?: boolean|Object;

	/**
	 * Gets/Sets date validation rule options. This can additionally help guide the [valueRange](ui.igvalidator#options:valueRange) validation.Note: Dependant on JavaScript Date parsing which will accept a wide range of values.
	 *
	 *
	 * Valid values:
	 * "boolean" A boolean value indicating if the field should be a valid JavaScript Date or can be parsed as one.
	 * "object" A configuration object with optional error message (e.g. date: { errorMessage: "Enter a valid number"} )
	 */
	date?: boolean|Object;

	/**
	 * Gets/Sets email validation rule options. Uses a RegExp defined in the "$.ui.igValidator.defaults" object.
	 *
	 *
	 * Valid values:
	 * "boolean" A boolean value indicating if the field should be an email.
	 * "object" A configuration object with optional error message (e.g. email: { errorMessage: "Enter a valid email"} )
	 */
	email?: boolean|Object;

	/**
	 * Gets/Sets a minimum and/or maximum length of text or number of selected items. Null or 0 values are ignored.
	 *
	 *
	 * Valid values:
	 * "array" An array of two numbers, where the first value is the minimum and the second is the maximum. (e.g. lengthRange: [ 1, 10] )
	 * "object" A configuration object with optional error message. Message strings can contain format items for min and max respectively (e.g. lengthRange: { min: 6, max: 20, errorMessage: "Password must be at least {0} long and no more than {1}." } )
	 */
	lengthRange?: Array<any>|Object;

	/**
	 * Gets/Sets a minimum and/or maximum value. Null values are ignored.
	 *
	 *
	 * Valid values:
	 * "array" An array of two numbers or dates, where the first is the minimum and the second is the maximum. (e.g. valueRange: [ 1, 10] )
	 * "object" A configuration object with optional error message. Message strings can contain format items for min and max respectively (e.g. lengthRange: { min: 6, max: 20, errorMessage: "Value must be between {0} and {1}." } )
	 */
	valueRange?: Array<any>|Object;

	/**
	 * Gets/Sets Credit Card number validation rule options.Note: This rule will only validate the checksum of the number using Luhn algorithm irregardless of card type.
	 *
	 *
	 * Valid values:
	 * "boolean" A boolean value indicating if the field should be a valid Credit Card number.
	 * "object" A configuration object with optional error message (e.g. creditCard: { errorMessage: "Enter a valid card number"} )
	 */
	creditCard?: boolean|Object;

	/**
	 * Gets/Sets regular expression validation rule options.
	 *
	 *
	 * Valid values:
	 * "string" A string containing regular expression.
	 * "object" A RegExp object or an object with expression and errorMessage properties.
	 */
	pattern?: string|Object;

	/**
	 * Gets/Sets if all rules for a field should be checked, so even if one fails the rest will continue executing.
	 * Note: This will not force checks on an empty field for rules that don't normally execute without a value.
	 *
	 */
	executeAllRules?: boolean;

	/**
	 * Gets/Sets a custom jQuery element to be used for validation messages. That inner HTML of the target is modified, can be a SPAN, LABEL or DIV.
	 *
	 */
	messageTarget?: Element;

	/**
	 * Gets/Sets text for an error message to be used if none is set for the particular rule. Overrides default rule-specific error messages.
	 *
	 */
	errorMessage?: string;

	/**
	 * Gets/Sets text for a success message. Note that since there is no default, setting this message will enable showing success indication.
	 *
	 */
	successMessage?: string;

	/**
	 * Gets/Sets validation minimum input length. Validation won't be triggered for input before that value is reached on change and focus loss.
	 * Note: This will not affect required fields on form submit.
	 *
	 */
	threshold?: number;

	/**
	 * Gets/Sets a requirement for the value in this field to be the same as another input element or editor control.
	 *
	 *
	 * Valid values:
	 * "string" A valid jQuery selector for the target element
	 * "object" A reference to the jQuery object for the target or an object with selector property and custom errorMessage.
	 */
	equalTo?: string|Object;

	/**
	 * Gets/Sets a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguments to determine and return the state of the field.
	 *
	 *
	 * Valid values:
	 * "function" The function to call
	 * "string" Function name, must be in global namespace (window["name"])
	 * "object" A configuration object with method property being the function and optional error message.
	 */
	custom?: Function|string|Object;

	/**
	 * Gets a list of target field items describing each with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
	 * Applicable options are also inherited from the global control configuration if not set.
	 *
	 */
	fields?: IgValidatorField[];

	/**
	 * Gets/Sets the options for the [igNotifier](ui.ignotifier#options) used to show error messages.
	 *
	 */
	notificationOptions?: any;

	/**
	 * Gets/Sets the option to show an asterisks indication next to required fields.
	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
	 *
	 */
	requiredIndication?: boolean;

	/**
	 * Gets/Sets the option to show a label indication next to optional fields.
	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
	 *
	 */
	optionalIndication?: boolean;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event which is raised on validation before default validation logic is applied.
	 * Return false in order to cancel the event and consider the field valid.
	 *
	 * Function takes arguments evt and ui.
	 */
	validating?: ValidatingEvent;

	/**
	 * Event which is raised after value was validated but before any action takes effect.
	 *
	 * Function takes arguments evt and ui.
	 */
	validated?: ValidatedEvent;

	/**
	 * Event raised for valid field after value was validated but before any action takes effect.
	 * Function takes arguments evt and ui.
	 */
	success?: SuccessEvent;

	/**
	 * Event raised for invalid field after value was validated but before any action takes effect.
	 * Function takes arguments evt and ui.
	 */
	error?: ErrorEvent;

	/**
	 * Event which is raised before error message is displayed.
	 * Return false in order to prevent error message display.
	 *
	 * Function takes arguments evt and ui.
	 */
	errorShowing?: ErrorShowingEvent;

	/**
	 * Event which is raised before error message is hidden.
	 * Return false in order to keep the error message displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	errorHiding?: ErrorHidingEvent;

	/**
	 * Event which is raised after error message was displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	errorShown?: ErrorShownEvent;

	/**
	 * Event which is raised after error message was hidden.
	 *
	 * Function takes arguments evt and ui.
	 */
	errorHidden?: ErrorHiddenEvent;

	/**
	 * Event which is raised before success message is displayed.
	 * Return false in order to prevent success message display.
	 *
	 * Function takes arguments evt and ui.
	 */
	successShowing?: SuccessShowingEvent;

	/**
	 * Event which is raised before success message is hidden.
	 * Return false in order to keep success message displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	successHiding?: SuccessHidingEvent;

	/**
	 * Event which is raised after success message was displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	successShown?: SuccessShownEvent;

	/**
	 * Event which is raised after success message was hidden.
	 *
	 * Function takes arguments evt and ui.
	 */
	successHidden?: SuccessHiddenEvent;

	/**
	 * Event triggered on Validator instance level before handling a form submit event.
	 * Return false to cancel to skip validating and potentially allow the submit if no other other validators return error.
	 *
	 * Function takes arguments evt and ui.
	 */
	formValidating?: FormValidatingEvent;

	/**
	 * Event triggered on Validator instance level after validation on form submit event..
	 *
	 * Function takes arguments evt and ui.
	 */
	formValidated?: FormValidatedEvent;

	/**
	 * Event triggered on Validator instance level after failed validation on form submit event.
	 *
	 * Function takes arguments evt and ui.
	 */
	formError?: FormErrorEvent;

	/**
	 * Event triggered on Validator instance level after successful validation on form submit event.
	 *
	 * Function takes arguments evt and ui.
	 */
	formSuccess?: FormSuccessEvent;

	/**
	 * Option for igValidator
	 */
	[optionName: string]: any;
}
interface IgValidatorMethods {
	/**
	 * Trigger validation and show errors for invalid fields.
	 *
	 * @param field Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
	 */
	validate(field?: Object): boolean;

	/**
	 * Trigger validation but do not display error messages.
	 *
	 * @param field Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
	 */
	isValid(field?: Object): boolean;

	/**
	 * Hide any possible message(s) (either messageTarget or igNotifier).
	 * Note: When the validator has a fields collection, not passing a field will hide messages on all fields.
	 *
	 * @param field Optional field object, its selector or zero-based index to hide message for.
	 */
	hide(field?: Object): void;

	/**
	 * Gets all current error messages for invalid field(s). Note that this method does not validate and states and messages are only updated on validation, so
	 * this can be used on formValidated event or after validate/isValid method calls.
	 *
	 * @param field Optional field object, selector or zero-based index for a single field to get error message for.
	 */
	getErrorMessages(field?: Object): any[];

	/**
	 * Check for currently displayed message(s). Takes an optional field.
	 * Note: When the validator has a fields collection, not passing a field will return a cumulative true even if just one field has a visible message.
	 *
	 * @param field Optional field object, selector or zero-based index for a single field to get error message for.
	 */
	isMessageDisplayed(field?: Object): boolean;

	/**
	 * Gets the notifier for the igValidator or for a single filed.
	 *
	 * @param field Optional field object, its selector or zero-based index to get notifier for.
	 */
	notifier(field?: Object): Object;

	/**
	 * Adds an new input to the fields collection and initializes it with the validator. Note: Additional fields are only accepted if the validator has been created with the collection.
	 *
	 * @param field An object with the field selector and options.
	 */
	addField(field: Object): void;

	/**
	 * Removes an input from the fields collection.
	 *
	 * @param field The field object to remove, its zero-based index or selector.
	 */
	removeField(field: Object): void;

	/**
	 * Updates a field in the validator collection. Used to reinitialize field in case a control has been created after the validator or to pass in new options.
	 *
	 * @param field The field object to update, its zero-based index or selector.
	 * @param fieldOptions New options to apply to the field.
	 */
	updateField(field: Object, fieldOptions?: Object): void;

	/**
	 * Destroys the validator widget.
	 */
	destroy(): void;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igValidator"): IgValidatorMethods;
}

declare namespace Infragistics {
class IgValidatorBaseRule {
	constructor(name: string);

	constructor(formatItems: any[]);

	/**
	 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
	 * Only used when there's no errorMessage option available through getRuleMessage.
	 *
	 * @param options
	 */
	getMessageType(options: Object): string;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;

	/**
	 * Checks if rule should run on the current field and/or value.
	 *
	 * @param options Options for the validator, if fields are used this parameter is already populated with inherited ones.
	 * @param value The stringified value to check.
	 */
	shouldRun(options: Object, value: string): boolean;

	/**
	 * Validates a value against this rule and returns the result.
	 *
	 * @param options Options for the validator, if fields are used this parameter is already populated with inherited ones.
	 * @param value The value to check.
	 */
	isValid(options: Object, value: Object): boolean;
}
}
interface IgniteUIStatic {
IgValidatorBaseRule: typeof Infragistics.IgValidatorBaseRule;
}

declare namespace Infragistics {
class IgValidatorRequiredRule {
	constructor(name: string);

	constructor(groupTypes: any[]);

	constructor(groupMessageName: string);

	constructor(formatItems: any[]);
	getMessageType(options: Object): void;
	shouldRun(options: Object): void;
	isValid(options: Object, value: Object): void;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;
}
}
interface IgniteUIStatic {
IgValidatorRequiredRule: typeof Infragistics.IgValidatorRequiredRule;
}

declare namespace Infragistics {
class IgValidatorControlRule {
	constructor(name: string);

	constructor(formatItems: any[]);
	getMessageType(): void;

	/**
	 * Returns an error message for the rule from options
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): void;
	shouldRun(options: Object, value: Object): void;
	isValid(options: Object): void;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;
}
}
interface IgniteUIStatic {
IgValidatorControlRule: typeof Infragistics.IgValidatorControlRule;
}

declare namespace Infragistics {
class IgValidatorNumberRule {
	constructor(name: string);

	constructor(formatItems: any[]);
	isValid(options: Object, value: Object): void;

	/**
	 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
	 * Only used when there's no errorMessage option available through getRuleMessage.
	 *
	 * @param options
	 */
	getMessageType(options: Object): string;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;

	/**
	 * Checks if rule should run on the current field and/or value.
	 *
	 * @param options Options for the validator, if fields are used this parameter is already populated with inherited ones.
	 * @param value The stringified value to check.
	 */
	shouldRun(options: Object, value: string): boolean;
}
}
interface IgniteUIStatic {
IgValidatorNumberRule: typeof Infragistics.IgValidatorNumberRule;
}

declare namespace Infragistics {
class IgValidatorDateRule {
	constructor(name: string);

	constructor(formatItems: any[]);
	isValid(options: Object, value: Object): void;

	/**
	 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
	 * Only used when there's no errorMessage option available through getRuleMessage.
	 *
	 * @param options
	 */
	getMessageType(options: Object): string;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;

	/**
	 * Checks if rule should run on the current field and/or value.
	 *
	 * @param options Options for the validator, if fields are used this parameter is already populated with inherited ones.
	 * @param value The stringified value to check.
	 */
	shouldRun(options: Object, value: string): boolean;
}
}
interface IgniteUIStatic {
IgValidatorDateRule: typeof Infragistics.IgValidatorDateRule;
}

declare namespace Infragistics {
class IgValidatorLengthRule {
	constructor(name: string);

	constructor(formatItems: any[]);
	getMessageType(): void;
	isValid(options: Object, value: Object): void;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;

	/**
	 * Checks if rule should run on the current field and/or value.
	 *
	 * @param options Options for the validator, if fields are used this parameter is already populated with inherited ones.
	 * @param value The stringified value to check.
	 */
	shouldRun(options: Object, value: string): boolean;
}
}
interface IgniteUIStatic {
IgValidatorLengthRule: typeof Infragistics.IgValidatorLengthRule;
}

declare namespace Infragistics {
class IgValidatorValueRule {
	constructor(name: string);

	constructor(formatItems: any[]);
	getMessageType(): void;
	isValid(options: Object, value: Object): void;
}
}
interface IgniteUIStatic {
IgValidatorValueRule: typeof Infragistics.IgValidatorValueRule;
}

declare namespace Infragistics {
class IgValidatorEqualToRule {
	constructor(name: string);

	constructor(formatItems: any[]);
	isValid(options: Object, value: Object): void;

	/**
	 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
	 * Only used when there's no errorMessage option available through getRuleMessage.
	 *
	 * @param options
	 */
	getMessageType(options: Object): string;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;

	/**
	 * Checks if rule should run on the current field and/or value.
	 *
	 * @param options Options for the validator, if fields are used this parameter is already populated with inherited ones.
	 * @param value The stringified value to check.
	 */
	shouldRun(options: Object, value: string): boolean;
}
}
interface IgniteUIStatic {
IgValidatorEqualToRule: typeof Infragistics.IgValidatorEqualToRule;
}

declare namespace Infragistics {
class IgValidatorEmailRule {
	constructor(name: string);

	constructor(formatItems: any[]);
	isValid(options: Object, value: Object): void;

	/**
	 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
	 * Only used when there's no errorMessage option available through getRuleMessage.
	 *
	 * @param options
	 */
	getMessageType(options: Object): string;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;

	/**
	 * Checks if rule should run on the current field and/or value.
	 *
	 * @param options Options for the validator, if fields are used this parameter is already populated with inherited ones.
	 * @param value The stringified value to check.
	 */
	shouldRun(options: Object, value: string): boolean;
}
}
interface IgniteUIStatic {
IgValidatorEmailRule: typeof Infragistics.IgValidatorEmailRule;
}

declare namespace Infragistics {
class IgValidatorPatternRule {
	constructor(name: string);

	constructor(formatItems: any[]);
	isValid(options: Object, value: Object): void;

	/**
	 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
	 * Only used when there's no errorMessage option available through getRuleMessage.
	 *
	 * @param options
	 */
	getMessageType(options: Object): string;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;

	/**
	 * Checks if rule should run on the current field and/or value.
	 *
	 * @param options Options for the validator, if fields are used this parameter is already populated with inherited ones.
	 * @param value The stringified value to check.
	 */
	shouldRun(options: Object, value: string): boolean;
}
}
interface IgniteUIStatic {
IgValidatorPatternRule: typeof Infragistics.IgValidatorPatternRule;
}

declare namespace Infragistics {
class IgValidatorCustomRule {
	constructor(name: string);

	constructor(formatItems: any[]);
	getMessageType(): void;
	shouldRun(options: Object): void;
	isValid(options: Object, value: Object): void;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;
}
}
interface IgniteUIStatic {
IgValidatorCustomRule: typeof Infragistics.IgValidatorCustomRule;
}

declare namespace Infragistics {
class IgValidatorCreditCardRule {
	constructor(name: string);

	constructor(formatItems: any[]);

	/**
	 * Based on ASP.NET CreditCardAttribute check,
	 * https://github.com/Microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/CreditCardAttribute.cs
	 *    using Luhn algorithm https://en.wikipedia.org/wiki/Luhn_algorithm
	 *
	 * @param options
	 * @param value
	 */
	isValid(options: Object, value: Object): void;

	/**
	 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
	 * Only used when there's no errorMessage option available through getRuleMessage.
	 *
	 * @param options
	 */
	getMessageType(options: Object): string;

	/**
	 * Gets an errorMessage from either the rule or field/global options.
	 *
	 * @param options
	 */
	getRuleMessage(options: Object): string;

	/**
	 * Formats an error message using rule-specific values (usually from formatItems).
	 *
	 * @param message The unformatted error message the validator intends to display.
	 */
	formatMessage(message: string): string;

	/**
	 * Checks if rule should run on the current field and/or value.
	 *
	 * @param options Options for the validator, if fields are used this parameter is already populated with inherited ones.
	 * @param value The stringified value to check.
	 */
	shouldRun(options: Object, value: string): boolean;
}
}
interface IgniteUIStatic {
IgValidatorCreditCardRule: typeof Infragistics.IgValidatorCreditCardRule;
}

interface JQuery {
	igValidator(methodName: "validate", field?: Object): boolean;
	igValidator(methodName: "isValid", field?: Object): boolean;
	igValidator(methodName: "hide", field?: Object): void;
	igValidator(methodName: "getErrorMessages", field?: Object): any[];
	igValidator(methodName: "isMessageDisplayed", field?: Object): boolean;
	igValidator(methodName: "notifier", field?: Object): Object;
	igValidator(methodName: "addField", field: Object): void;
	igValidator(methodName: "removeField", field: Object): void;
	igValidator(methodName: "updateField", field: Object, fieldOptions?: Object): void;
	igValidator(methodName: "destroy"): void;
	igValidator(methodName: "changeLocale", $container: Object): void;
	igValidator(methodName: "changeGlobalLanguage"): void;
	igValidator(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets/Sets whether validation is triggered when the text in editor changes.
	 * Note that this is more appropriate for selection controls such as checkbox, combo or rating.
	 * As it can cause excessive messages with text-based fields, the initial validation can be delayed via the [threshold](ui.igvalidator#options:threshold) option.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "onchange"): boolean;

	/**
	 * /Sets whether validation is triggered when the text in editor changes.
	 * Note that this is more appropriate for selection controls such as checkbox, combo or rating.
	 * As it can cause excessive messages with text-based fields, the initial validation can be delayed via the [threshold](ui.igvalidator#options:threshold) option.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "onchange", optionValue: boolean): void;

	/**
	 * Gets/Sets whether validation is triggered when the editor loses focus.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "onblur"): boolean;

	/**
	 * /Sets whether validation is triggered when the editor loses focus.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "onblur", optionValue: boolean): void;

	/**
	 * Gets/Sets whether validation is triggered when a form containing validation targets is submitting. If any of the validations fail, the submit action will be prevented.
	 * Note that this doesn't apply to the native JavaScript submit function, but will handle the jQuery equivalent and the browser default action.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "onsubmit"): boolean;

	/**
	 * /Sets whether validation is triggered when a form containing validation targets is submitting. If any of the validations fail, the submit action will be prevented.
	 * Note that this doesn't apply to the native JavaScript submit function, but will handle the jQuery equivalent and the browser default action.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "onsubmit", optionValue: boolean): void;

	/**
	 * Gets/Sets option to validate if a value was entered (not empty text, selected item, etc.)
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "required"): boolean|Object;

	/**
	 * /Sets option to validate if a value was entered (not empty text, selected item, etc.)
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "required", optionValue: boolean|Object): void;

	/**
	 * Gets/Sets number validation rule options.Default separators for decimals and thousands are '.' and ',' respectively and are defined in the "$.ui.igValidator.defaults" object.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "number"): boolean|Object;

	/**
	 * /Sets number validation rule options.Default separators for decimals and thousands are '.' and ',' respectively and are defined in the "$.ui.igValidator.defaults" object.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "number", optionValue: boolean|Object): void;

	/**
	 * Gets/Sets date validation rule options. This can additionally help guide the [valueRange](ui.igvalidator#options:valueRange) validation.Note: Dependant on JavaScript Date parsing which will accept a wide range of values.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "date"): boolean|Object;

	/**
	 * /Sets date validation rule options. This can additionally help guide the [valueRange](ui.igvalidator#options:valueRange) validation.Note: Dependant on JavaScript Date parsing which will accept a wide range of values.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "date", optionValue: boolean|Object): void;

	/**
	 * Gets/Sets email validation rule options. Uses a RegExp defined in the "$.ui.igValidator.defaults" object.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "email"): boolean|Object;

	/**
	 * /Sets email validation rule options. Uses a RegExp defined in the "$.ui.igValidator.defaults" object.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "email", optionValue: boolean|Object): void;

	/**
	 * Gets/Sets a minimum and/or maximum length of text or number of selected items. Null or 0 values are ignored.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "lengthRange"): Array<any>|Object;

	/**
	 * /Sets a minimum and/or maximum length of text or number of selected items. Null or 0 values are ignored.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "lengthRange", optionValue: Array<any>|Object): void;

	/**
	 * Gets/Sets a minimum and/or maximum value. Null values are ignored.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "valueRange"): Array<any>|Object;

	/**
	 * /Sets a minimum and/or maximum value. Null values are ignored.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "valueRange", optionValue: Array<any>|Object): void;

	/**
	 * Gets/Sets Credit Card number validation rule options.Note: This rule will only validate the checksum of the number using Luhn algorithm irregardless of card type.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "creditCard"): boolean|Object;

	/**
	 * /Sets Credit Card number validation rule options.Note: This rule will only validate the checksum of the number using Luhn algorithm irregardless of card type.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "creditCard", optionValue: boolean|Object): void;

	/**
	 * Gets/Sets regular expression validation rule options.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "pattern"): string|Object;

	/**
	 * /Sets regular expression validation rule options.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "pattern", optionValue: string|Object): void;

	/**
	 * Gets/Sets if all rules for a field should be checked, so even if one fails the rest will continue executing.
	 * Note: This will not force checks on an empty field for rules that don't normally execute without a value.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "executeAllRules"): boolean;

	/**
	 * /Sets if all rules for a field should be checked, so even if one fails the rest will continue executing.
	 * Note: This will not force checks on an empty field for rules that don't normally execute without a value.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "executeAllRules", optionValue: boolean): void;

	/**
	 * Gets/Sets a custom jQuery element to be used for validation messages. That inner HTML of the target is modified, can be a SPAN, LABEL or DIV.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "messageTarget"): Element;

	/**
	 * /Sets a custom jQuery element to be used for validation messages. That inner HTML of the target is modified, can be a SPAN, LABEL or DIV.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "messageTarget", optionValue: Element): void;

	/**
	 * Gets/Sets text for an error message to be used if none is set for the particular rule. Overrides default rule-specific error messages.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "errorMessage"): string;

	/**
	 * /Sets text for an error message to be used if none is set for the particular rule. Overrides default rule-specific error messages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "errorMessage", optionValue: string): void;

	/**
	 * Gets/Sets text for a success message. Note that since there is no default, setting this message will enable showing success indication.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "successMessage"): string;

	/**
	 * /Sets text for a success message. Note that since there is no default, setting this message will enable showing success indication.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "successMessage", optionValue: string): void;

	/**
	 * Gets/Sets validation minimum input length. Validation won't be triggered for input before that value is reached on change and focus loss.
	 * Note: This will not affect required fields on form submit.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "threshold"): number;

	/**
	 * /Sets validation minimum input length. Validation won't be triggered for input before that value is reached on change and focus loss.
	 * Note: This will not affect required fields on form submit.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "threshold", optionValue: number): void;

	/**
	 * Gets/Sets a requirement for the value in this field to be the same as another input element or editor control.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "equalTo"): string|Object;

	/**
	 * /Sets a requirement for the value in this field to be the same as another input element or editor control.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "equalTo", optionValue: string|Object): void;

	/**
	 * Gets/Sets a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguments to determine and return the state of the field.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "custom"): Function|string|Object;

	/**
	 * /Sets a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguments to determine and return the state of the field.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "custom", optionValue: Function|string|Object): void;

	/**
	 * Gets a list of target field items describing each with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
	 * Applicable options are also inherited from the global control configuration if not set.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "fields"): IgValidatorField[];

	/**
	 * A list of target field items describing each with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
	 * Applicable options are also inherited from the global control configuration if not set.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "fields", optionValue: IgValidatorField[]): void;

	/**
	 * Gets/Sets the options for the [igNotifier](ui.ignotifier#options) used to show error messages.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "notificationOptions"): any;

	/**
	 * /Sets the options for the [igNotifier](ui.ignotifier#options) used to show error messages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "notificationOptions", optionValue: any): void;

	/**
	 * Gets/Sets the option to show an asterisks indication next to required fields.
	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button  and the igRating control.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "requiredIndication"): boolean;

	/**
	 * /Sets the option to show an asterisks indication next to required fields.
	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "requiredIndication", optionValue: boolean): void;

	/**
	 * Gets/Sets the option to show a label indication next to optional fields.
	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button  and the igRating control.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "optionalIndication"): boolean;

	/**
	 * /Sets the option to show a label indication next to optional fields.
	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "optionalIndication", optionValue: boolean): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igValidator(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igValidator(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igValidator(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igValidator(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event which is raised on validation before default validation logic is applied.
	 * Return false in order to cancel the event and consider the field valid.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "validating"): ValidatingEvent;

	/**
	 * Event which is raised on validation before default validation logic is applied.
	 * Return false in order to cancel the event and consider the field valid.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "validating", optionValue: ValidatingEvent): void;

	/**
	 * Event which is raised after value was validated but before any action takes effect.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "validated"): ValidatedEvent;

	/**
	 * Event which is raised after value was validated but before any action takes effect.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "validated", optionValue: ValidatedEvent): void;

	/**
	 * Event raised for valid field after value was validated but before any action takes effect.
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "success"): SuccessEvent;

	/**
	 * Event raised for valid field after value was validated but before any action takes effect.
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "success", optionValue: SuccessEvent): void;

	/**
	 * Event raised for invalid field after value was validated but before any action takes effect.
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "error"): ErrorEvent;

	/**
	 * Event raised for invalid field after value was validated but before any action takes effect.
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "error", optionValue: ErrorEvent): void;

	/**
	 * Event which is raised before error message is displayed.
	 * Return false in order to prevent error message display.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "errorShowing"): ErrorShowingEvent;

	/**
	 * Event which is raised before error message is displayed.
	 * Return false in order to prevent error message display.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "errorShowing", optionValue: ErrorShowingEvent): void;

	/**
	 * Event which is raised before error message is hidden.
	 * Return false in order to keep the error message displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "errorHiding"): ErrorHidingEvent;

	/**
	 * Event which is raised before error message is hidden.
	 * Return false in order to keep the error message displayed.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "errorHiding", optionValue: ErrorHidingEvent): void;

	/**
	 * Event which is raised after error message was displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "errorShown"): ErrorShownEvent;

	/**
	 * Event which is raised after error message was displayed.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "errorShown", optionValue: ErrorShownEvent): void;

	/**
	 * Event which is raised after error message was hidden.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "errorHidden"): ErrorHiddenEvent;

	/**
	 * Event which is raised after error message was hidden.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "errorHidden", optionValue: ErrorHiddenEvent): void;

	/**
	 * Event which is raised before success message is displayed.
	 * Return false in order to prevent success message display.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "successShowing"): SuccessShowingEvent;

	/**
	 * Event which is raised before success message is displayed.
	 * Return false in order to prevent success message display.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "successShowing", optionValue: SuccessShowingEvent): void;

	/**
	 * Event which is raised before success message is hidden.
	 * Return false in order to keep success message displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "successHiding"): SuccessHidingEvent;

	/**
	 * Event which is raised before success message is hidden.
	 * Return false in order to keep success message displayed.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "successHiding", optionValue: SuccessHidingEvent): void;

	/**
	 * Event which is raised after success message was displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "successShown"): SuccessShownEvent;

	/**
	 * Event which is raised after success message was displayed.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "successShown", optionValue: SuccessShownEvent): void;

	/**
	 * Event which is raised after success message was hidden.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "successHidden"): SuccessHiddenEvent;

	/**
	 * Event which is raised after success message was hidden.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "successHidden", optionValue: SuccessHiddenEvent): void;

	/**
	 * Event triggered on Validator instance level before handling a form submit event.
	 * Return false to cancel to skip validating and potentially allow the submit if no other other validators return error.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "formValidating"): FormValidatingEvent;

	/**
	 * Event triggered on Validator instance level before handling a form submit event.
	 * Return false to cancel to skip validating and potentially allow the submit if no other other validators return error.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "formValidating", optionValue: FormValidatingEvent): void;

	/**
	 * Event triggered on Validator instance level after validation on form submit event..
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "formValidated"): FormValidatedEvent;

	/**
	 * Event triggered on Validator instance level after validation on form submit event..
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "formValidated", optionValue: FormValidatedEvent): void;

	/**
	 * Event triggered on Validator instance level after failed validation on form submit event.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "formError"): FormErrorEvent;

	/**
	 * Event triggered on Validator instance level after failed validation on form submit event.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "formError", optionValue: FormErrorEvent): void;

	/**
	 * Event triggered on Validator instance level after successful validation on form submit event.
	 *
	 * Function takes arguments evt and ui.
	 */
	igValidator(optionLiteral: 'option', optionName: "formSuccess"): FormSuccessEvent;

	/**
	 * Event triggered on Validator instance level after successful validation on form submit event.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue Define event handler function.
	 */
	igValidator(optionLiteral: 'option', optionName: "formSuccess", optionValue: FormSuccessEvent): void;
	igValidator(options: IgValidator): JQuery;
	igValidator(optionLiteral: 'option', optionName: string): any;
	igValidator(optionLiteral: 'option', options: IgValidator): JQuery;
	igValidator(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igValidator(methodName: string, ...methodParams: any[]): any;
}
interface IgVideoPlayerBookmark {
	/**
	 * Gets/Sets where the bookmark will be positioned. Should be between 0 and movie duration in seconds.
	 *
	 */
	time?: number;

	/**
	 * Gets/Sets bookmark title. It is shown as tooltip on hover.
	 *
	 */
	title?: string;

	/**
	 * Gets/Sets whether the bookmark is disabled or not.
	 *
	 */
	disabled?: boolean;

	/**
	 * Option for IgVideoPlayerBookmark
	 */
	[optionName: string]: any;
}

interface IgVideoPlayerRelatedVideo {
	/**
	 * Gets/Sets the URL of the related video image.
	 *
	 */
	imageUrl?: string;

	/**
	 * Gets/Sets the title of the video.
	 *
	 */
	title?: string;

	/**
	 * Gets/Sets the width of the related video image.
	 *
	 */
	width?: number;

	/**
	 * Gets/Sets the height of the related video image.
	 *
	 */
	height?: number;

	/**
	 * Gets/Sets a link to a page that will play the related video. It will be opened in a new window. If there are sources also, the link property has a priority.
	 *
	 */
	link?: string;

	/**
	 * Gets/Sets the sources of the related video.
	 *
	 */
	sources?: any[];

	/**
	 * Gets/Sets custom CSS class to be applied on the related video element.
	 *
	 */
	css?: string;

	/**
	 * Option for IgVideoPlayerRelatedVideo
	 */
	[optionName: string]: any;
}

interface IgVideoPlayerBanner {
	/**
	 * Gets/Sets the banner image url.
	 *
	 */
	imageUrl?: string;

	/**
	 * Gets/Sets an array of numbers. Each number specifies on which second in the movie the banner will pop.
	 *
	 */
	times?: any[];

	/**
	 * Gets/Sets whether the user will be able to close the banner or not.
	 *
	 */
	closeBanner?: boolean;

	/**
	 * Gets/Sets whether to apply animation effects when showing or hiding the banner. If set to true, the animation is played for banner.duration in milliseconds.
	 *
	 */
	animate?: boolean;

	/**
	 * Gets/Sets whether the banner is visible or not.
	 *
	 */
	visible?: boolean;

	/**
	 * Gets/Sets the banner animation duration.
	 *
	 */
	duration?: number;

	/**
	 * Gets/Sets whether to automatically hide the banner. If set to true, the banner is hidden after [hidedelay](ui.igvideoplayer#options:banners.hidedelay) in milliseconds.
	 *
	 */
	autohide?: boolean;

	/**
	 * Gets/Sets the banner autohide delay in milliseconds. It is taken into account only if the banner.autohide option is set to true.
	 *
	 */
	hidedelay?: number;

	/**
	 * Gets/Sets the banner link that will open in new window.
	 *
	 */
	link?: string;

	/**
	 * Gets/Sets the banner width
	 *
	 */
	width?: number|string;

	/**
	 * Gets/Sets the banner height
	 *
	 */
	height?: number|string;

	/**
	 * Gets/Sets the banner specific css class, that will be applied on the banner grid.
	 *
	 */
	css?: string;

	/**
	 * Option for IgVideoPlayerBanner
	 */
	[optionName: string]: any;
}

interface IgVideoPlayerCommercialsLinkedCommercial {
	/**
	 * Gets/Sets the sources of the linked commercial video.
	 *
	 */
	sources?: any[];

	/**
	 * Gets/Sets the second in the video at which the linked commercial should play.
	 *
	 */
	startTime?: number;

	/**
	 * Gets/Sets the link to open on linked commercial click.
	 *
	 */
	link?: string;

	/**
	 * Gets/Sets the tooltip for the linked commercial bookmark.
	 *
	 */
	title?: string;

	/**
	 * Option for IgVideoPlayerCommercialsLinkedCommercial
	 */
	[optionName: string]: any;
}

interface IgVideoPlayerCommercialsEmbeddedCommercial {
	/**
	 * Gets/Sets the start second of the embedded commercial.
	 *
	 */
	startTime?: number;

	/**
	 * Gets/Sets the end second of the embedded commercial.
	 *
	 */
	endTime?: number;

	/**
	 * Gets/Sets the sponsored link of the embedded commercial.
	 *
	 */
	link?: string;

	/**
	 * Gets/Sets the tooltip for the bookmark of the embedded commercial.
	 *
	 */
	title?: string;

	/**
	 * Option for IgVideoPlayerCommercialsEmbeddedCommercial
	 */
	[optionName: string]: any;
}

interface IgVideoPlayerCommercialsAdMessage {
	/**
	 * Gets/Sets whether to apply an animation effect when showing or hiding the ad message. If set to true, the animation is played for [animationDuration](ui.igvideoplayer#options:commercials.adMessage.animationDuration) in milliseconds.
	 *
	 */
	animate?: boolean;

	/**
	 * Gets/Sets the ad message auto hide of the commercial.
	 *
	 */
	autoHide?: boolean;

	/**
	 * Gets/Sets the ad message hide delay.
	 *
	 */
	hideDelay?: number;

	/**
	 * Gets/Sets the ad message animation duration of the commercial.
	 *
	 */
	animationDuration?: number;

	/**
	 * Option for IgVideoPlayerCommercialsAdMessage
	 */
	[optionName: string]: any;
}

interface IgVideoPlayerCommercials {
	/**
	 * Gets/Sets an array of linked commercial objects. A linked commercial is a separate video file that will be played in the specified position of the original movie clip by [startTime](ui.igvideoplayer#options:commercials.linkedCommercials.startTime). This feature is useful if you have frequently changing outside commercial sources.
	 *
	 */
	linkedCommercials?: IgVideoPlayerCommercialsLinkedCommercial[];

	/**
	 * Gets/Sets an array of embedded commercials objects. An embedded commercial is an ad that is contained in the original video file. It is suitable when you want to mark some sections of the video as commercials.
	 *
	 */
	embeddedCommercials?: IgVideoPlayerCommercialsEmbeddedCommercial[];

	/**
	 * Gets/Sets whether the commercials will play againg during the repetitive video plays.
	 *
	 */
	alwaysPlayCommercials?: boolean;

	/**
	 * Gets/Sets whether to show commercial locations or not.
	 *
	 */
	showBookmarks?: boolean;

	/**
	 * Customizes the ad message settings of the commercial. Ad message shows the duration of the commercial and pops up when the commercial starts playing.
	 *
	 */
	adMessage?: IgVideoPlayerCommercialsAdMessage;

	/**
	 * Option for IgVideoPlayerCommercials
	 */
	[optionName: string]: any;
}

interface IgVideoPlayerLocale {
	/**
	 * Gets/Sets live stream video title.
	 *
	 */
	liveStream?: boolean;

	/**
	 * Gets/Sets live video title.
	 *
	 */
	live?: boolean;

	/**
	 * Gets/Sets paused button title.
	 *
	 */
	paused?: boolean;

	/**
	 * Gets/Sets playing button title.
	 *
	 */
	playing?: boolean;

	/**
	 * Gets/Sets play button title.
	 *
	 */
	play?: boolean;

	/**
	 * Gets/Sets volume button title.
	 *
	 */
	volume?: boolean;

	/**
	 * Gets/Sets progress label long format.
	 *
	 */
	progressLabelLongFormat?: boolean;

	/**
	 * Gets/Sets progress label short format.
	 *
	 */
	progressLabelShortFormat?: boolean;

	/**
	 * Gets/Sets enter fullscreen button title.
	 *
	 */
	enterFullscreen?: boolean;

	/**
	 * Gets/Sets exit fullscreen button title.
	 *
	 */
	exitFullscreen?: boolean;

	/**
	 * Gets/Sets skip to button title.
	 *
	 */
	skipTo?: boolean;

	/**
	 * Gets/Sets buffering label text.
	 *
	 */
	buffering?: boolean;

	/**
	 * Gets/Sets ad message text.
	 *
	 */
	adMessage?: boolean;

	/**
	 * Gets/Sets long ad message text.
	 *
	 */
	adMessageLong?: boolean;

	/**
	 * Gets/Sets ad message text when no duration is specified.
	 *
	 */
	adMessageNoDuration?: boolean;

	/**
	 * Gets/Sets new ad window title.
	 *
	 */
	adNewWindowTip?: boolean;

	/**
	 * Gets/Sets related videos text.
	 *
	 */
	relatedVideos?: boolean;

	/**
	 * Gets/Sets replay button text.
	 *
	 */
	replayButton?: boolean;

	/**
	 * Gets/Sets replay button tooltip.
	 *
	 */
	replayTooltip?: boolean;

	/**
	 * Option for IgVideoPlayerLocale
	 */
	[optionName: string]: any;
}

interface EndedEvent {
	(event: Event, ui: EndedEventUIParam): void;
}

interface EndedEventUIParam {
	/**
	 * Get the video duration in seconds.
	 */
	duration?: number;

	/**
	 * Get the url of the playing video.
	 */
	source?: string;
}

interface PlayingEvent {
	(event: Event, ui: PlayingEventUIParam): void;
}

interface PlayingEventUIParam {
	/**
	 * Get the current time in the video at which the event was fired.
	 */
	currentTime?: number;

	/**
	 * Get the video duration in seconds.
	 */
	duration?: number;

	/**
	 * Get the url of the playing video.
	 */
	source?: string;
}

interface PausedEvent {
	(event: Event, ui: PausedEventUIParam): void;
}

interface PausedEventUIParam {
	/**
	 * Get the current time in the video at which the event was fired.
	 */
	currentTime?: number;

	/**
	 * Get the video duration in seconds.
	 */
	duration?: number;

	/**
	 * Get the url of the playing video.
	 */
	source?: string;
}

interface BufferingEvent {
	(event: Event, ui: BufferingEventUIParam): void;
}

interface BufferingEventUIParam {
	/**
	 * Get buffered percentage.
	 */
	buffered?: number;

	/**
	 * Get the url of the playing video.
	 */
	source?: string;
}

interface ProgressEvent {
	(event: Event, ui: ProgressEventUIParam): void;
}

interface ProgressEventUIParam {
	/**
	 * Get the current time in the video at which the event was fired.
	 */
	currentTime?: number;

	/**
	 * Get the video duration in seconds.
	 */
	duration?: number;

	/**
	 * Get the url of the playing video.
	 */
	source?: string;
}

interface WaitingEvent {
	(event: Event, ui: WaitingEventUIParam): void;
}

interface WaitingEventUIParam {
	/**
	 * Get the current time in the video at which the event was fired.
	 */
	currentTime?: number;

	/**
	 * Get the video duration in seconds.
	 */
	duration?: number;

	/**
	 * Get the url of the playing video.
	 */
	source?: string;
}

interface EnterFullScreenEvent {
	(event: Event, ui: EnterFullScreenEventUIParam): void;
}

interface EnterFullScreenEventUIParam {
	/**
	 * Get the url of the playing video.
	 */
	source?: string;
}

interface ExitFullScreenEvent {
	(event: Event, ui: ExitFullScreenEventUIParam): void;
}

interface ExitFullScreenEventUIParam {
	/**
	 * Get the url of the playing video.
	 */
	source?: string;
}

interface RelatedVideoClickEvent {
	(event: Event, ui: RelatedVideoClickEventUIParam): void;
}

interface RelatedVideoClickEventUIParam {
	/**
	 * Get the relatedVideo object from the relatedVideos array.
	 */
	relatedVideo?: any;

	/**
	 * Get the relatedVideo html element in the DOM.
	 */
	relatedVideoElement?: any;
}

interface BannerVisibleEvent {
	(event: Event, ui: BannerVisibleEventUIParam): void;
}

interface BannerVisibleEventUIParam {
	/**
	 * Get the banner object from the banners array.
	 */
	banner?: any;

	/**
	 * Get the banner html element in the DOM.
	 */
	bannerElement?: any;

	/**
	 * Get the banner index in the banners array.
	 */
	index?: number;
}

interface BannerHiddenEvent {
	(event: Event, ui: BannerHiddenEventUIParam): void;
}

interface BannerHiddenEventUIParam {
	/**
	 * Get the banner object from the banners array.
	 */
	banner?: any;

	/**
	 * Get the banner html element in the DOM.
	 */
	bannerElement?: any;

	/**
	 * Get the banner index in the banners array.
	 */
	index?: number;
}

interface BannerClickEvent {
	(event: Event, ui: BannerClickEventUIParam): void;
}

interface BannerClickEventUIParam {
	/**
	 * Get the banner html element in the DOM.
	 */
	bannerElement?: any;
}

interface IgVideoPlayer {
	/**
	 * Gets/Sets a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
	 *
	 */
	sources?: any[];

	/**
	 * Gets/Sets the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
	 *
	 */
	width?: string|number;

	/**
	 * Gets/Sets the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
	 *
	 */
	height?: string|number;

	/**
	 * Gets/Sets a URL to an image to show, when no video data is available.
	 *
	 */
	posterUrl?: string;

	/**
	 * Gets/Sets whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
	 *
	 */
	preload?: boolean;

	/**
	 * Gets/Sets whether the video should start playing immediately after the control is loaded.
	 *
	 */
	autoplay?: boolean;

	/**
	 * Gets/Sets whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
	 *
	 */
	autohide?: boolean;

	/**
	 * Gets/Sets volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
	 *
	 */
	volumeAutohideDelay?: number;

	/**
	 * Gets/Sets the center big button hide delay.
	 *
	 */
	centerButtonHideDelay?: number;

	/**
	 * Gets/Sets whether the video to start again after it has ended.
	 *
	 */
	loop?: boolean;

	/**
	 * Gets/Sets whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls. When this option is set to true, no [commercials](ui.igvideoplayer#options:commercials) will be displayed as they are not supported.
	 *
	 */
	browserControls?: boolean;

	/**
	 * Gets/Sets whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just sets 100% width and height to the control.
	 *
	 */
	fullscreen?: boolean;

	/**
	 * Gets/Sets the video volume. It can be between 0.0 and 1.0.
	 *
	 */
	volume?: number;

	/**
	 * Gets/Sets whether the video volume is muted.
	 *
	 */
	muted?: boolean;

	/**
	 * Gets/Sets video title.
	 *
	 */
	title?: string;

	/**
	 * Gets/Sets whether the control seek tool tip will be shown when hovering the video progress bar.
	 *
	 */
	showSeekTime?: boolean;

	/**
	 * Gets/Sets the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
	 *
	 */
	progressLabelFormat?: string;

	/**
	 * Gets/Sets an array of bookmarks that will be displayed in the video player control.
	 *
	 */
	bookmarks?: IgVideoPlayerBookmark[];

	/**
	 * Gets/Sets an array of related videos that will be displayed when video playback has ended.
	 *
	 */
	relatedVideos?: IgVideoPlayerRelatedVideo[];

	/**
	 * Gets/Sets an array of banner objects that will show the banners when the video clip is played.
	 *
	 */
	banners?: IgVideoPlayerBanner[];

	/**
	 * Gets/Sets an array of commercials objects that will be displayed when the video is playing. Note that [broswerControls](ui.igvideoplayer#options:browserControls) doesn't support commercials.
	 *
	 */
	commercials?: IgVideoPlayerCommercials;
	locale?: IgVideoPlayerLocale;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Occurs when the video has ended.
	 *
	 * Function takes arguments evt and ui.
	 */
	ended?: EndedEvent;

	/**
	 * Occurs when video gets playing.
	 *
	 * Function takes arguments evt and ui.
	 */
	playing?: PlayingEvent;

	/**
	 * Occurs when the video is paused.
	 *
	 * Function takes arguments evt and ui.
	 */
	paused?: PausedEvent;

	/**
	 * Occurs when a chunk of data is buffered.
	 *
	 * Function takes arguments evt and ui.
	 */
	buffering?: BufferingEvent;

	/**
	 * Occurs when the video has advanced the playback position.
	 *
	 * Function takes arguments evt and ui.
	 */
	progress?: ProgressEvent;

	/**
	 * Occurs when igVideoPlayer is waiting for data from the server.
	 *
	 * Function takes arguments evt and ui.
	 */
	waiting?: WaitingEvent;

	/**
	 * Occurs when a bookmark is hit.
	 *
	 * Function takes arguments evt and ui.
	 */
	bookmarkHit?: BookmarkHitEvent;

	/**
	 * Occurs when a bookmark is clicked.
	 *
	 * Function takes arguments evt and ui.
	 */
	bookmarkClick?: BookmarkClickEvent;

	/**
	 * Occurs when igVideoPlayer enters full screen mode.
	 *
	 * Function takes arguments evt and ui.
	 */
	enterFullScreen?: EnterFullScreenEvent;

	/**
	 * Occurs when igVideoPlayer exits full screen mode.
	 *
	 * Function takes arguments evt and ui.
	 */
	exitFullScreen?: ExitFullScreenEvent;

	/**
	 * Occurs when a related video is clicked.
	 *
	 * Function takes arguments evt and ui.
	 */
	relatedVideoClick?: RelatedVideoClickEvent;

	/**
	 * Defines the name of the player banner visible event. Fired when the banner has been displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	bannerVisible?: BannerVisibleEvent;

	/**
	 * Occurs when the banner is hidden.
	 *
	 * Function takes arguments evt and ui.
	 */
	bannerHidden?: BannerHiddenEvent;

	/**
	 * Occurs when the banner is clicked.
	 *
	 * Function takes arguments evt and ui.
	 */
	bannerClick?: BannerClickEvent;

	/**
	 * Occurs when browser does not support HTML 5 video.
	 */
	browserNotSupported?: BrowserNotSupportedEvent;

	/**
	 * Option for igVideoPlayer
	 */
	[optionName: string]: any;
}
interface IgVideoPlayerMethods {
	/**
	 * Returns the element on which the widget was instantiated
	 */
	widget(): void;

	/**
	 * Hide the add message if shown.
	 */
	hideAdMessage(): void;

	/**
	 * Play a linked commercial for this video.
	 *
	 * @param commercial Specify the linked commercial to play.
	 */
	playCommercial(commercial: Object): void;

	/**
	 * Shows the ad banner, if there is such.
	 *
	 * @param index Specify the index of the banner from the banners array.
	 */
	showBanner(index: number): void;

	/**
	 * Hide the ad banner, if there is such.
	 *
	 * @param index Specify the index of the banner from the banners array.
	 */
	hideBanner(index: number): void;

	/**
	 * Resets the commercials, to be shown again.
	 */
	resetCommercialsShow(): void;

	/**
	 * Changes the all locales into the widget element to the language specified in [options.language](ui.igvideoplayer#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igvideoplayer#options:language) or [locale](ui.igvideoplayer#options:locale) option setter
	 */
	changeLocale(): void;

	/**
	 * Toggle control play state. If video is playing it will pause, if video is paused it will play.
	 */
	togglePlay(): void;

	/**
	 * Start playing current loaded video if any.
	 */
	play(): void;

	/**
	 * Pause the currently playing video if any.
	 */
	pause(): void;

	/**
	 * Gets/Sets the current time of the playing video.
	 *
	 * @param val Specify the playback position in seconds to navigate to.
	 */
	currentTime(val: number): number;

	/**
	 * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
	 *
	 * @param scaleFactor Specify scale factor between 0 and 1.
	 */
	screenshot(scaleFactor?: number): Object;

	/**
	 * Get whether the current browser supports video tag.
	 */
	supportsVideo(): boolean;

	/**
	 * Get whether the current browser supports H.264 codec.
	 */
	supportsH264BaselineVideo(): boolean;

	/**
	 * Get whether the current browser supports Theora codec.
	 */
	supportsOggTheoraVideo(): boolean;

	/**
	 * Get whether the current browser supports WEBM codec.
	 */
	supportsWebmVideo(): boolean;

	/**
	 * Returns whether the currently played video is paused.
	 */
	paused(): boolean;

	/**
	 * Get whether the current played video has ended.
	 */
	ended(): boolean;

	/**
	 * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
	 */
	duration(): number;

	/**
	 * Get whether the player is seeking to find the new playback position specified.
	 */
	seeking(): boolean;

	/**
	 * Destroys the widget.
	 */
	destroy(): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igVideoPlayer"): IgVideoPlayerMethods;
}

interface JQuery {
	igVideoPlayer(methodName: "widget"): void;
	igVideoPlayer(methodName: "hideAdMessage"): void;
	igVideoPlayer(methodName: "playCommercial", commercial: Object): void;
	igVideoPlayer(methodName: "showBanner", index: number): void;
	igVideoPlayer(methodName: "hideBanner", index: number): void;
	igVideoPlayer(methodName: "resetCommercialsShow"): void;
	igVideoPlayer(methodName: "changeLocale"): void;
	igVideoPlayer(methodName: "togglePlay"): void;
	igVideoPlayer(methodName: "play"): void;
	igVideoPlayer(methodName: "pause"): void;
	igVideoPlayer(methodName: "currentTime", val: number): number;
	igVideoPlayer(methodName: "screenshot", scaleFactor?: number): Object;
	igVideoPlayer(methodName: "supportsVideo"): boolean;
	igVideoPlayer(methodName: "supportsH264BaselineVideo"): boolean;
	igVideoPlayer(methodName: "supportsOggTheoraVideo"): boolean;
	igVideoPlayer(methodName: "supportsWebmVideo"): boolean;
	igVideoPlayer(methodName: "paused"): boolean;
	igVideoPlayer(methodName: "ended"): boolean;
	igVideoPlayer(methodName: "duration"): number;
	igVideoPlayer(methodName: "seeking"): boolean;
	igVideoPlayer(methodName: "destroy"): void;
	igVideoPlayer(methodName: "changeGlobalLanguage"): void;
	igVideoPlayer(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets/Sets a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "sources"): any[];

	/**
	 * /Sets a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "sources", optionValue: any[]): void;

	/**
	 * Gets/Sets the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
	 *
	 */

	igVideoPlayer(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * /Sets the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igVideoPlayer(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets/Sets the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
	 *
	 */

	igVideoPlayer(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * /Sets the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igVideoPlayer(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;

	/**
	 * Gets/Sets a URL to an image to show, when no video data is available.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "posterUrl"): string;

	/**
	 * /Sets a URL to an image to show, when no video data is available.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "posterUrl", optionValue: string): void;

	/**
	 * Gets/Sets whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "preload"): boolean;

	/**
	 * /Sets whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "preload", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the video should start playing immediately after the control is loaded.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "autoplay"): boolean;

	/**
	 * /Sets whether the video should start playing immediately after the control is loaded.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "autoplay", optionValue: boolean): void;

	/**
	 * Gets/Sets whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "autohide"): boolean;

	/**
	 * /Sets whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "autohide", optionValue: boolean): void;

	/**
	 * Gets/Sets volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "volumeAutohideDelay"): number;

	/**
	 * /Sets volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "volumeAutohideDelay", optionValue: number): void;

	/**
	 * Gets/Sets the center big button hide delay.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "centerButtonHideDelay"): number;

	/**
	 * /Sets the center big button hide delay.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "centerButtonHideDelay", optionValue: number): void;

	/**
	 * Gets/Sets whether the video to start again after it has ended.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "loop"): boolean;

	/**
	 * /Sets whether the video to start again after it has ended.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "loop", optionValue: boolean): void;

	/**
	 * Gets/Sets whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls. When this option is set to true, no [commercials](ui.igvideoplayer#options:commercials) will be displayed as they are not supported.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "browserControls"): boolean;

	/**
	 * /Sets whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls. When this option is set to true, no [commercials](ui.igvideoplayer#options:commercials) will be displayed as they are not supported.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "browserControls", optionValue: boolean): void;

	/**
	 * Gets/Sets whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just  100% width and height to the control.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "fullscreen"): boolean;

	/**
	 * /Sets whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just sets 100% width and height to the control.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "fullscreen", optionValue: boolean): void;

	/**
	 * Gets/Sets the video volume. It can be between 0.0 and 1.0.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "volume"): number;

	/**
	 * /Sets the video volume. It can be between 0.0 and 1.0.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "volume", optionValue: number): void;

	/**
	 * Gets/Sets whether the video volume is muted.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "muted"): boolean;

	/**
	 * /Sets whether the video volume is muted.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "muted", optionValue: boolean): void;

	/**
	 * Gets/Sets video title.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "title"): string;

	/**
	 * /Sets video title.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "title", optionValue: string): void;

	/**
	 * Gets/Sets whether the control seek tool tip will be shown when hovering the video progress bar.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "showSeekTime"): boolean;

	/**
	 * /Sets whether the control seek tool tip will be shown when hovering the video progress bar.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "showSeekTime", optionValue: boolean): void;

	/**
	 * Gets/Sets the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "progressLabelFormat"): string;

	/**
	 * /Sets the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "progressLabelFormat", optionValue: string): void;

	/**
	 * Gets/Sets an array of bookmarks that will be displayed in the video player control.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bookmarks"): IgVideoPlayerBookmark[];

	/**
	 * /Sets an array of bookmarks that will be displayed in the video player control.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bookmarks", optionValue: IgVideoPlayerBookmark[]): void;

	/**
	 * Gets/Sets an array of related videos that will be displayed when video playback has ended.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "relatedVideos"): IgVideoPlayerRelatedVideo[];

	/**
	 * /Sets an array of related videos that will be displayed when video playback has ended.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "relatedVideos", optionValue: IgVideoPlayerRelatedVideo[]): void;

	/**
	 * Gets/Sets an array of banner objects that will show the banners when the video clip is played.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "banners"): IgVideoPlayerBanner[];

	/**
	 * /Sets an array of banner objects that will show the banners when the video clip is played.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "banners", optionValue: IgVideoPlayerBanner[]): void;

	/**
	 * Gets/Sets an array of commercials objects that will be displayed when the video is playing. Note that [broswerControls](ui.igvideoplayer#options:browserControls) doesn't support commercials.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "commercials"): IgVideoPlayerCommercials;

	/**
	 * /Sets an array of commercials objects that will be displayed when the video is playing. Note that [broswerControls](ui.igvideoplayer#options:browserControls) doesn't support commercials.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "commercials", optionValue: IgVideoPlayerCommercials): void;
	igVideoPlayer(optionLiteral: 'option', optionName: "locale"): IgVideoPlayerLocale;
	igVideoPlayer(optionLiteral: 'option', optionName: "locale", optionValue: IgVideoPlayerLocale): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igVideoPlayer(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igVideoPlayer(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Occurs when the video has ended.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "ended"): EndedEvent;

	/**
	 * Occurs when the video has ended.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "ended", optionValue: EndedEvent): void;

	/**
	 * Occurs when video gets playing.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "playing"): PlayingEvent;

	/**
	 * Occurs when video gets playing.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "playing", optionValue: PlayingEvent): void;

	/**
	 * Occurs when the video is paused.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "paused"): PausedEvent;

	/**
	 * Occurs when the video is paused.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "paused", optionValue: PausedEvent): void;

	/**
	 * Occurs when a chunk of data is buffered.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "buffering"): BufferingEvent;

	/**
	 * Occurs when a chunk of data is buffered.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "buffering", optionValue: BufferingEvent): void;

	/**
	 * Occurs when the video has advanced the playback position.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "progress"): ProgressEvent;

	/**
	 * Occurs when the video has advanced the playback position.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "progress", optionValue: ProgressEvent): void;

	/**
	 * Occurs when igVideoPlayer is waiting for data from the server.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "waiting"): WaitingEvent;

	/**
	 * Occurs when igVideoPlayer is waiting for data from the server.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "waiting", optionValue: WaitingEvent): void;

	/**
	 * Occurs when a bookmark is hit.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bookmarkHit"): BookmarkHitEvent;

	/**
	 * Occurs when a bookmark is hit.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bookmarkHit", optionValue: BookmarkHitEvent): void;

	/**
	 * Occurs when a bookmark is clicked.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bookmarkClick"): BookmarkClickEvent;

	/**
	 * Occurs when a bookmark is clicked.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bookmarkClick", optionValue: BookmarkClickEvent): void;

	/**
	 * Occurs when igVideoPlayer enters full screen mode.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "enterFullScreen"): EnterFullScreenEvent;

	/**
	 * Occurs when igVideoPlayer enters full screen mode.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "enterFullScreen", optionValue: EnterFullScreenEvent): void;

	/**
	 * Occurs when igVideoPlayer exits full screen mode.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "exitFullScreen"): ExitFullScreenEvent;

	/**
	 * Occurs when igVideoPlayer exits full screen mode.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "exitFullScreen", optionValue: ExitFullScreenEvent): void;

	/**
	 * Occurs when a related video is clicked.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "relatedVideoClick"): RelatedVideoClickEvent;

	/**
	 * Occurs when a related video is clicked.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "relatedVideoClick", optionValue: RelatedVideoClickEvent): void;

	/**
	 * Defines the name of the player banner visible event. Fired when the banner has been displayed.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bannerVisible"): BannerVisibleEvent;

	/**
	 * Defines the name of the player banner visible event. Fired when the banner has been displayed.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bannerVisible", optionValue: BannerVisibleEvent): void;

	/**
	 * Occurs when the banner is hidden.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bannerHidden"): BannerHiddenEvent;

	/**
	 * Occurs when the banner is hidden.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bannerHidden", optionValue: BannerHiddenEvent): void;

	/**
	 * Occurs when the banner is clicked.
	 *
	 * Function takes arguments evt and ui.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bannerClick"): BannerClickEvent;

	/**
	 * Occurs when the banner is clicked.
	 *
	 * Function takes arguments evt and ui.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "bannerClick", optionValue: BannerClickEvent): void;

	/**
	 * Occurs when browser does not support HTML 5 video.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;

	/**
	 * Occurs when browser does not support HTML 5 video.
	 *
	 * @optionValue New value to be set.
	 */
	igVideoPlayer(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;
	igVideoPlayer(options: IgVideoPlayer): JQuery;
	igVideoPlayer(optionLiteral: 'option', optionName: string): any;
	igVideoPlayer(optionLiteral: 'option', options: IgVideoPlayer): JQuery;
	igVideoPlayer(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igVideoPlayer(methodName: string, ...methodParams: any[]): any;
}
interface IgWidget {
	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Option for igWidget
	 */
	[optionName: string]: any;
}
interface IgWidgetMethods {
	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;

	/**
	 * Destroy is part of the jQuery UI widget API and does the following:
	 * 1. Remove custom CSS classes that were added.
	 * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
	 * 3. Unbind all events that were bound.
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igWidget"): IgWidgetMethods;
}

interface JQuery {
	igWidget(methodName: "changeLocale", $container: Object): void;
	igWidget(methodName: "changeGlobalLanguage"): void;
	igWidget(methodName: "changeGlobalRegional"): void;
	igWidget(methodName: "destroy"): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igWidget(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igWidget(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igWidget(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igWidget(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igWidget(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igWidget(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;
	igWidget(options: IgWidget): JQuery;
	igWidget(optionLiteral: 'option', optionName: string): any;
	igWidget(optionLiteral: 'option', options: IgWidget): JQuery;
	igWidget(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igWidget(methodName: string, ...methodParams: any[]): any;
}
interface IgZoombarDefaultZoomWindow {
	/**
	 * The left component of the zoom window in percentages.
	 *
	 */
	left?: number;

	/**
	 * The width of the zoom window in percentages.
	 *
	 */
	width?: string;

	/**
	 * Option for IgZoombarDefaultZoomWindow
	 */
	[optionName: string]: any;
}

interface ZoomChangingEvent {
	(event: Event, ui: ZoomChangingEventUIParam): void;
}

interface ZoomChangingEventUIParam {
	/**
	 * Gets reference to igZoombar.
	 */
	owner?: any;
}

interface ZoomChangedEvent {
	(event: Event, ui: ZoomChangedEventUIParam): void;
}

interface ZoomChangedEventUIParam {
	/**
	 * Gets reference to the igZoombar.
	 */
	owner?: any;
}

interface ProviderCreatedEvent {
	(event: Event, ui: ProviderCreatedEventUIParam): void;
}

interface ProviderCreatedEventUIParam {
	/**
	 * Gets a reference to the created provider.
	 */
	provider?: any;

	/**
	 * Gets reference to the igZoombar.
	 */
	owner?: any;
}

interface WindowDragStartingEvent {
	(event: Event, ui: WindowDragStartingEventUIParam): void;
}

interface WindowDragStartingEventUIParam {
	/**
	 * Gets reference to the igZoombar.
	 */
	owner?: any;
}

interface WindowDragStartedEvent {
	(event: Event, ui: WindowDragStartedEventUIParam): void;
}

interface WindowDragStartedEventUIParam {
	/**
	 * Gets reference to the igZoombar.
	 */
	owner?: any;
}

interface WindowDraggingEvent {
	(event: Event, ui: WindowDraggingEventUIParam): void;
}

interface WindowDraggingEventUIParam {
	/**
	 * Gets reference to the igZoombar.
	 */
	owner?: any;
}

interface WindowDragEndingEvent {
	(event: Event, ui: WindowDragEndingEventUIParam): void;
}

interface WindowDragEndingEventUIParam {
	/**
	 * Gets reference to the igZoombar.
	 */
	owner?: any;
}

interface WindowDragEndedEvent {
	(event: Event, ui: WindowDragEndedEventUIParam): void;
}

interface WindowDragEndedEventUIParam {
	/**
	 * Gets reference to the igZoombar.
	 */
	owner?: any;
}

interface WindowResizingEvent {
	(event: Event, ui: WindowResizingEventUIParam): void;
}

interface WindowResizingEventUIParam {
	/**
	 * Gets reference to the igZoombar.
	 */
	owner?: any;
}

interface IgZoombar {
	/**
	 * Specifies a provider class which interfaces the widget that is being zoomed.
	 * object Provider class to use. The provider should implement all methods in the $.ig.ZoombarProviderDefault class and is suggested to be extended from it.
	 */
	provider?: any;

	/**
	 * Specifies the element on which the widget the Zoombar is attached to is initialized.
	 * object A valid jQuery object, the first element of which is that element.
	 *
	 */
	target?: string|Object;

	/**
	 * Specifies how the target widget's clone is rendered inside the Zoombar.
	 * object A valid set of properties to initialize the clone with.
	 *
	 *
	 * Valid values:
	 * "auto" Options for initializing the clone will be inferred from the target widget. Certain properties will be altered to make the clone more suitable for using inside the Zoombar.
	 * "none" No clone of the target widget will be initialized inside the Zoombar.
	 */
	clone?: string|Object;

	/**
	 * Specifies the width of the Zoombar.
	 *
	 *
	 * Valid values:
	 * "auto" The width of the Zoombar will be the same as the widget it is attached to.
	 * "number" The widget width in pixels (px).
	 * "string" The widget width can be set in pixels (px) and percentage (%).
	 * "null" The Zoombar will stretch horizontally to fit its container if it has width set, otherwise assumes auto.
	 */
	width?: string|number;

	/**
	 * Specifies the height of the Zoombar.
	 *
	 *
	 * Valid values:
	 * "null" The Zoombar will stretch vertically to fit its container if it has height set, otherwise assumes 70px.
	 */
	height?: number|string;

	/**
	 * Specifies when the zoom effect is applied.
	 *
	 *
	 * Valid values:
	 * "immediate" The zoom action is applied as the end-user interacts with the zoom window.
	 * "deferred" The zoom action is applied after the interaction with the zoom window completes.
	 */
	zoomAction?: string;

	/**
	 * Specifies the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked.
	 *
	 */
	zoomWindowMoveDistance?: number;

	/**
	 * Specifies the default zoom in percentages.
	 *
	 */
	defaultZoomWindow?: IgZoombarDefaultZoomWindow;

	/**
	 * The minimal width the zoom window can have in percentages.
	 *
	 */
	zoomWindowMinWidth?: number;

	/**
	 * Specifies the animation duration (in milliseconds) when hover style is applied or removed from elements.
	 *
	 */
	hoverStyleAnimationDuration?: number;

	/**
	 * Specifies the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
	 *
	 */
	windowPanDuration?: number;

	/**
	 * Initial tabIndex for the Zoombar container elements.
	 *
	 */
	tabIndex?: number;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	locale?: any;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	language?: string;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */
	regional?: string|Object;

	/**
	 * Event fired before a zoom action is applied
	 */
	zoomChanging?: ZoomChangingEvent;

	/**
	 * Event fired after a zoom action is applied.
	 */
	zoomChanged?: ZoomChangedEvent;

	/**
	 * Event fired after a provider is created based on the options.provider value. If an instance is passed as a value for the option the event won't fire.
	 * Use the event when utilizing a custom provider to assign options such as the zoomed widget's instance so that the provider's API is usable when igZoombar initializes its rendering.
	 */
	providerCreated?: ProviderCreatedEvent;

	/**
	 * Event fired when the user attempts to drag the zoom window.
	 */
	windowDragStarting?: WindowDragStartingEvent;

	/**
	 * Event fired when the user starts dragging the zoom window.
	 */
	windowDragStarted?: WindowDragStartedEvent;

	/**
	 * Event fired when the user drags the zoom window.
	 */
	windowDragging?: WindowDraggingEvent;

	/**
	 * Event fired when the user attemtps to stop dragging the zoom window.
	 */
	windowDragEnding?: WindowDragEndingEvent;

	/**
	 * Event fired when the user stops dragging the zoom window.
	 */
	windowDragEnded?: WindowDragEndedEvent;

	/**
	 * Event fired when the user resizes the zoom window with the window"s handles.
	 */
	windowResizing?: WindowResizingEvent;

	/**
	 * Event fired after the user resizes the zoom window with the window"s handles.
	 */
	windowResized?: WindowResizedEvent;

	/**
	 * Option for igZoombar
	 */
	[optionName: string]: any;
}
interface IgZoombarMethods {
	/**
	 * Destroys the Zoombar widget
	 */
	destroy(): void;

	/**
	 * Returns the main zoombar element
	 */
	widget(): void;

	/**
	 * Returns the ID of the element the zoombar is initialized on
	 */
	id(): string;

	/**
	 * Returns the DIV that is the topmost container of the zoombar widget
	 */
	container(): Element;

	/**
	 * Returns the element the clone widget is initialized on
	 */
	clone(): Element;

	/**
	 * Gets or sets the current zoom window
	 *
	 * @param left The left parameter of the new zoom window in percentages
	 * @param width The width parameter of the new zoom window in percentages
	 */
	zoom(left?: number, width?: number): Object;

	/**
	 * Changes the all locales contained into a specified container to the language specified in [options.language](ui.igwidget#options:language)
	 * Note that this method is for rare scenarios, use [language](ui.igwidget#options:language) or [locale](ui.igwidget#options:locale) option setter
	 *
	 * @param $container Optional parameter - if not set it would use the element of the widget as $container
	 */
	changeLocale($container: Object): void;

	/**
	 * Changes the widget language to global language. Global language is the value in $.ig.util.language
	 */
	changeGlobalLanguage(): void;

	/**
	 * Changes the widget regional settins to global regional settings. Global regional settings are container in $.ig.util.regional
	 */
	changeGlobalRegional(): void;
}
interface JQuery {
	data(propertyName: "igZoombar"): IgZoombarMethods;
}

interface ZoombarProviderDefaultSettings {
	/**
	 * Contains the target component's instance
	 */
	targetObject?: any;

	/**
	 * Expects two parameters
	 * a jQuery Event to pass as original for Zoombar's own zoomChanged event
	 * an object with the following structure:
	 * {
	 * oldLeft: number,
	 * oldWidth: number,
	 * newLeft: number,
	 * newWdith: number
	 * }
	 * The values should represent the fractions of the total width of the zoomed component in a number ranging from 0 to 1
	 */
	zoomChangedCallback?: any;

	/**
	 * Option for ZoombarProviderDefaultSettings
	 */
	[optionName: string]: any;
}

declare namespace Infragistics {
class ZoombarProviderDefault {
	constructor(settings: ZoombarProviderDefaultSettings);

	/**
	 * Will be called before the provider instance is deleted (to unbind jQuery events, etc.)
	 */
	clean(): void;

	/**
	 * Gets basic options for initializing the clone, based on the options the target is initialized with
	 *
	 * @param options if the Zoombar has a copy of the options object it'll pass it to the provider
	 */
	getBaseOpts(options: Object): void;

	/**
	 * Alters specific options so that the the clone is more suitable for its purpose
	 *
	 * @param options the base options of the widget obtained from getBaseOpts
	 */
	cleanOptsForZoom(options: Object): void;

	/**
	 * Will be called by the Zoombar if a clone of the target widget should be created
	 *
	 * @param container a jQuery wrapped element to create the clone component in
	 * @param options the options that are obtained from cleanOptsForZoom
	 */
	createClone(container: Object, options: Object): void;

	/**
	 * Returns the provider"s widget name
	 */
	widgetName(): void;

	/**
	 * Returns the target widget width property
	 */
	targetWidth(): void;

	/**
	 * Sets the target widget min window width (to be in sync with the same property of the zoombar)
	 *
	 * @param minWidth a number from 0 to 1 representing the minimal width (i.e. maximal zoom) the zoom window can take as a fraction of the total one
	 */
	syncMinWidth(minWidth: number): void;

	/**
	 * Sets the width and height of the clone component
	 *
	 * @param width The width to set in pixels or string (px or % -affixed).
	 * @param height The height to set in pixels or string (px or % -affixed).
	 */
	setSize(width: Object, height: Object): void;

	/**
	 * Gets/sets the target object
	 *
	 * @param obj the new target component instance to set
	 */
	targetObject(obj?: Object): void;

	/**
	 * Jshint ignore:line
	 *
	 * @param a
	 * @param b
	 */
	update(a: Object, b: Object): void;
}
}
interface IgniteUIStatic {
ZoombarProviderDefault: typeof Infragistics.ZoombarProviderDefault;
}

declare namespace Infragistics {
class ZoombarProviderDataChart {
	constructor(settings: ZoombarProviderDefaultSettings);
	clean(): void;
	getBaseOpts(options: Object): void;
	cleanOptsForZoom(options: Object): void;
	createClone(container: Object, options: Object): void;
	widgetName(): void;
	targetWidth(): void;
	targetObject(obj: Object): void;
	syncMinWidth(minWidth: Object): void;
	setSize(width: Object, height: Object): void;
	update(a: Object, b: Object): void;
}
}
interface IgniteUIStatic {
ZoombarProviderDataChart: typeof Infragistics.ZoombarProviderDataChart;
}

interface JQuery {
	igZoombar(methodName: "destroy"): void;
	igZoombar(methodName: "widget"): void;
	igZoombar(methodName: "id"): string;
	igZoombar(methodName: "container"): Element;
	igZoombar(methodName: "clone"): Element;
	igZoombar(methodName: "zoom", left?: number, width?: number): Object;
	igZoombar(methodName: "changeLocale", $container: Object): void;
	igZoombar(methodName: "changeGlobalLanguage"): void;
	igZoombar(methodName: "changeGlobalRegional"): void;

	/**
	 * Gets a provider class which interfaces the widget that is being zoomed.
	 * object Provider class to use. The provider should implement all methods in the $.ig.ZoombarProviderDefault class and is suggested to be extended from it.
	 */
	igZoombar(optionLiteral: 'option', optionName: "provider"): any;

	/**
	 * Sets a provider class which interfaces the widget that is being zoomed.
	 * object Provider class to use. The provider should implement all methods in the $.ig.ZoombarProviderDefault class and is suggested to be extended from it.
	 *
	 * @optionValue New value to be set.
	 */
	igZoombar(optionLiteral: 'option', optionName: "provider", optionValue: any): void;

	/**
	 * Gets the element on which the widget the Zoombar is attached to is initialized.
	 * object A valid jQuery object, the first element of which is that element.
	 *
	 */

	igZoombar(optionLiteral: 'option', optionName: "target"): string|Object;

	/**
	 * Sets the element on which the widget the Zoombar is attached to is initialized.
	 * object A valid jQuery object, the first element of which is that element.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igZoombar(optionLiteral: 'option', optionName: "target", optionValue: string|Object): void;

	/**
	 * Gets how the target widget's clone is rendered inside the Zoombar.
	 * object A valid set of properties to initialize the clone with.
	 *
	 */

	igZoombar(optionLiteral: 'option', optionName: "clone"): string|Object;

	/**
	 * Sets how the target widget's clone is rendered inside the Zoombar.
	 * object A valid set of properties to initialize the clone with.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igZoombar(optionLiteral: 'option', optionName: "clone", optionValue: string|Object): void;

	/**
	 * Gets the width of the Zoombar.
	 *
	 */

	igZoombar(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * Sets the width of the Zoombar.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igZoombar(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * Gets the height of the Zoombar.
	 *
	 */

	igZoombar(optionLiteral: 'option', optionName: "height"): number|string;

	/**
	 * Sets the height of the Zoombar.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igZoombar(optionLiteral: 'option', optionName: "height", optionValue: number|string): void;

	/**
	 * Gets when the zoom effect is applied.
	 *
	 */

	igZoombar(optionLiteral: 'option', optionName: "zoomAction"): string;

	/**
	 * Sets when the zoom effect is applied.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igZoombar(optionLiteral: 'option', optionName: "zoomAction", optionValue: string): void;

	/**
	 * Gets the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked.
	 *
	 */
	igZoombar(optionLiteral: 'option', optionName: "zoomWindowMoveDistance"): number;

	/**
	 * Sets the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igZoombar(optionLiteral: 'option', optionName: "zoomWindowMoveDistance", optionValue: number): void;

	/**
	 * Gets the default zoom in percentages.
	 *
	 */
	igZoombar(optionLiteral: 'option', optionName: "defaultZoomWindow"): IgZoombarDefaultZoomWindow;

	/**
	 * Sets the default zoom in percentages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igZoombar(optionLiteral: 'option', optionName: "defaultZoomWindow", optionValue: IgZoombarDefaultZoomWindow): void;

	/**
	 * The minimal width the zoom window can have in percentages.
	 *
	 */
	igZoombar(optionLiteral: 'option', optionName: "zoomWindowMinWidth"): number;

	/**
	 * The minimal width the zoom window can have in percentages.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igZoombar(optionLiteral: 'option', optionName: "zoomWindowMinWidth", optionValue: number): void;

	/**
	 * Gets the animation duration (in milliseconds) when hover style is applied or removed from elements.
	 *
	 */
	igZoombar(optionLiteral: 'option', optionName: "hoverStyleAnimationDuration"): number;

	/**
	 * Sets the animation duration (in milliseconds) when hover style is applied or removed from elements.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igZoombar(optionLiteral: 'option', optionName: "hoverStyleAnimationDuration", optionValue: number): void;

	/**
	 * Gets the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
	 *
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowPanDuration"): number;

	/**
	 * Sets the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowPanDuration", optionValue: number): void;

	/**
	 * Initial tabIndex for the Zoombar container elements.
	 *
	 */
	igZoombar(optionLiteral: 'option', optionName: "tabIndex"): number;

	/**
	 * Initial tabIndex for the Zoombar container elements.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igZoombar(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 */
	igZoombar(optionLiteral: 'option', optionName: "locale"): any;

	/**
	 * Set/Get the locale setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igZoombar(optionLiteral: 'option', optionName: "locale", optionValue: any): void;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 */
	igZoombar(optionLiteral: 'option', optionName: "language"): string;

	/**
	 * Set/Get the locale language setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */
	igZoombar(optionLiteral: 'option', optionName: "language", optionValue: string): void;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 */

	igZoombar(optionLiteral: 'option', optionName: "regional"): string|Object;

	/**
	 * Set/Get the regional setting for the widget.
	 *
	 *
	 * @optionValue New value to be set.
	 */

	igZoombar(optionLiteral: 'option', optionName: "regional", optionValue: string|Object): void;

	/**
	 * Event fired before a zoom action is applied
	 */
	igZoombar(optionLiteral: 'option', optionName: "zoomChanging"): ZoomChangingEvent;

	/**
	 * Event fired before a zoom action is applied
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "zoomChanging", optionValue: ZoomChangingEvent): void;

	/**
	 * Event fired after a zoom action is applied.
	 */
	igZoombar(optionLiteral: 'option', optionName: "zoomChanged"): ZoomChangedEvent;

	/**
	 * Event fired after a zoom action is applied.
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "zoomChanged", optionValue: ZoomChangedEvent): void;

	/**
	 * Event fired after a provider is created based on the options.provider value. If an instance is passed as a value for the option the event won't fire.
	 * Use the event when utilizing a custom provider to assign options such as the zoomed widget's instance so that the provider's API is usable when igZoombar initializes its rendering.
	 */
	igZoombar(optionLiteral: 'option', optionName: "providerCreated"): ProviderCreatedEvent;

	/**
	 * Event fired after a provider is created based on the options.provider value. If an instance is passed as a value for the option the event won't fire.
	 * Use the event when utilizing a custom provider to assign options such as the zoomed widget's instance so that the provider's API is usable when igZoombar initializes its rendering.
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "providerCreated", optionValue: ProviderCreatedEvent): void;

	/**
	 * Event fired when the user attempts to drag the zoom window.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragStarting"): WindowDragStartingEvent;

	/**
	 * Event fired when the user attempts to drag the zoom window.
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragStarting", optionValue: WindowDragStartingEvent): void;

	/**
	 * Event fired when the user starts dragging the zoom window.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragStarted"): WindowDragStartedEvent;

	/**
	 * Event fired when the user starts dragging the zoom window.
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragStarted", optionValue: WindowDragStartedEvent): void;

	/**
	 * Event fired when the user drags the zoom window.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragging"): WindowDraggingEvent;

	/**
	 * Event fired when the user drags the zoom window.
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragging", optionValue: WindowDraggingEvent): void;

	/**
	 * Event fired when the user attemtps to stop dragging the zoom window.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragEnding"): WindowDragEndingEvent;

	/**
	 * Event fired when the user attemtps to stop dragging the zoom window.
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragEnding", optionValue: WindowDragEndingEvent): void;

	/**
	 * Event fired when the user stops dragging the zoom window.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragEnded"): WindowDragEndedEvent;

	/**
	 * Event fired when the user stops dragging the zoom window.
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowDragEnded", optionValue: WindowDragEndedEvent): void;

	/**
	 * Event fired when the user resizes the zoom window with the window"s handles.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowResizing"): WindowResizingEvent;

	/**
	 * Event fired when the user resizes the zoom window with the window"s handles.
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowResizing", optionValue: WindowResizingEvent): void;

	/**
	 * Event fired after the user resizes the zoom window with the window"s handles.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowResized"): WindowResizedEvent;

	/**
	 * Event fired after the user resizes the zoom window with the window"s handles.
	 *
	 * @optionValue Define event handler function.
	 */
	igZoombar(optionLiteral: 'option', optionName: "windowResized", optionValue: WindowResizedEvent): void;
	igZoombar(options: IgZoombar): JQuery;
	igZoombar(optionLiteral: 'option', optionName: string): any;
	igZoombar(optionLiteral: 'option', options: IgZoombar): JQuery;
	igZoombar(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igZoombar(methodName: string, ...methodParams: any[]): any;
}
interface ResolvingAxisValueEvent {
	(event: Event, ui: ResolvingAxisValueEventUIParam): void;
}

interface ResolvingAxisValueEventUIParam {}

interface IgZoomSlider {
	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	width?: string|number;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */
	height?: string|number;
	panTransitionDuration?: number;
	maxZoomWidth?: number;

	/**
	 * Gets or sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	pixelScalingRatio?: number;
	actualPixelScalingRatio?: number;
	windowRect?: any;
	minZoomWidth?: number;
	startInset?: number;
	endInset?: number;
	trackStartInset?: number;
	trackEndInset?: number;
	barExtent?: number;
	orientation?: string;
	lowerThumbBrush?: any;
	lowerThumbStrokeThickness?: number;
	higherThumbStrokeThickness?: number;
	higherThumbBrush?: any;
	lowerThumbOutline?: any;
	higherThumbOutline?: any;
	lowerThumbRidgesBrush?: any;
	higherThumbRidgesBrush?: any;
	lowerThumbWidth?: number;
	higherThumbWidth?: number;
	lowerThumbHeight?: number;
	higherThumbHeight?: number;
	lowerShadeBrush?: any;
	lowerShadeOutline?: any;
	lowerShadeStrokeThickness?: number;
	higherShadeBrush?: any;
	higherShadeOutline?: any;
	higherShadeStrokeThickness?: number;
	barBrush?: any;
	barOutline?: any;
	barStrokeThickness?: number;
	rangeThumbBrush?: any;
	rangeThumbOutline?: any;
	rangeThumbStrokeThickness?: number;
	rangeThumbRidgesBrush?: any;
	lowerCalloutBrush?: any;
	lowerCalloutTextColor?: any;
	lowerCalloutOutline?: any;
	lowerCalloutStrokeThickness?: number;
	higherCalloutBrush?: any;
	higherCalloutTextColor?: any;
	higherCalloutOutline?: any;
	higherCalloutStrokeThickness?: number;
	areThumbCalloutsEnabled?: boolean;
	thumbCalloutTextStyle?: any;
	propertyChanged?: PropertyChangedEvent;
	resolvingAxisValue?: ResolvingAxisValueEvent;

	/**
	 * Occurs just after the current ZoomSlider's window rectangle is changed.
	 */
	windowRectChanged?: WindowRectChangedEvent;

	/**
	 * Option for igZoomSlider
	 */
	[optionName: string]: any;
}
interface IgZoomSliderMethods {
	notifySizeChanged(): void;

	/**
	 * Flushes the gauge.
	 */
	flush(): void;

	/**
	 * Destroys widget.
	 */
	destroy(): void;
}
interface JQuery {
	data(propertyName: "igZoomSlider"): IgZoomSliderMethods;
}

interface JQuery {
	igZoomSlider(methodName: "notifySizeChanged"): void;
	igZoomSlider(methodName: "flush"): void;
	igZoomSlider(methodName: "destroy"): void;

	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igZoomSlider(optionLiteral: 'option', optionName: "width"): string|number;

	/**
	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igZoomSlider(optionLiteral: 'option', optionName: "width", optionValue: string|number): void;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 */

	igZoomSlider(optionLiteral: 'option', optionName: "height"): string|number;

	/**
	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
	 *
	 * @optionValue New value to be set.
	 */

	igZoomSlider(optionLiteral: 'option', optionName: "height", optionValue: string|number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "panTransitionDuration"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "panTransitionDuration", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "maxZoomWidth"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "maxZoomWidth", optionValue: number): void;

	/**
	 * Gets  the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 */
	igZoomSlider(optionLiteral: 'option', optionName: "pixelScalingRatio"): number;

	/**
	 * Sets the scaling value used to affect the pixel density of the control.
	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
	 * to appear blurry.
	 *
	 * @optionValue New value to be set.
	 */
	igZoomSlider(optionLiteral: 'option', optionName: "pixelScalingRatio", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "actualPixelScalingRatio"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "actualPixelScalingRatio", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "windowRect"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "windowRect", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "minZoomWidth"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "minZoomWidth", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "startInset"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "startInset", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "endInset"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "endInset", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "trackStartInset"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "trackStartInset", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "trackEndInset"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "trackEndInset", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "barExtent"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "barExtent", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "orientation"): string;
	igZoomSlider(optionLiteral: 'option', optionName: "orientation", optionValue: string): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbStrokeThickness"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbStrokeThickness", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbStrokeThickness"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbStrokeThickness", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbOutline"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbOutline", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbOutline"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbOutline", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbRidgesBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbRidgesBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbRidgesBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbRidgesBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbWidth"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbWidth", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbWidth"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbWidth", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbHeight"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerThumbHeight", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbHeight"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "higherThumbHeight", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerShadeBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerShadeBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerShadeOutline"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerShadeOutline", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerShadeStrokeThickness"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerShadeStrokeThickness", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherShadeBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "higherShadeBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherShadeOutline"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "higherShadeOutline", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherShadeStrokeThickness"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "higherShadeStrokeThickness", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "barBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "barBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "barOutline"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "barOutline", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "barStrokeThickness"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "barStrokeThickness", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "rangeThumbBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "rangeThumbBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "rangeThumbOutline"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "rangeThumbOutline", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "rangeThumbStrokeThickness"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "rangeThumbStrokeThickness", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "rangeThumbRidgesBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "rangeThumbRidgesBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerCalloutBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerCalloutBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerCalloutTextColor"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerCalloutTextColor", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerCalloutOutline"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerCalloutOutline", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerCalloutStrokeThickness"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "lowerCalloutStrokeThickness", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherCalloutBrush"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "higherCalloutBrush", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherCalloutTextColor"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "higherCalloutTextColor", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherCalloutOutline"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "higherCalloutOutline", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "higherCalloutStrokeThickness"): number;
	igZoomSlider(optionLiteral: 'option', optionName: "higherCalloutStrokeThickness", optionValue: number): void;
	igZoomSlider(optionLiteral: 'option', optionName: "areThumbCalloutsEnabled"): boolean;
	igZoomSlider(optionLiteral: 'option', optionName: "areThumbCalloutsEnabled", optionValue: boolean): void;
	igZoomSlider(optionLiteral: 'option', optionName: "thumbCalloutTextStyle"): any;
	igZoomSlider(optionLiteral: 'option', optionName: "thumbCalloutTextStyle", optionValue: any): void;
	igZoomSlider(optionLiteral: 'option', optionName: "propertyChanged"): PropertyChangedEvent;
	igZoomSlider(optionLiteral: 'option', optionName: "propertyChanged", optionValue: PropertyChangedEvent): void;
	igZoomSlider(optionLiteral: 'option', optionName: "resolvingAxisValue"): ResolvingAxisValueEvent;
	igZoomSlider(optionLiteral: 'option', optionName: "resolvingAxisValue", optionValue: ResolvingAxisValueEvent): void;

	/**
	 * Occurs just after the current ZoomSlider's window rectangle is changed.
	 */
	igZoomSlider(optionLiteral: 'option', optionName: "windowRectChanged"): WindowRectChangedEvent;

	/**
	 * Occurs just after the current ZoomSlider's window rectangle is changed.
	 *
	 * @optionValue New value to be set.
	 */
	igZoomSlider(optionLiteral: 'option', optionName: "windowRectChanged", optionValue: WindowRectChangedEvent): void;
	igZoomSlider(options: IgZoomSlider): JQuery;
	igZoomSlider(optionLiteral: 'option', optionName: string): any;
	igZoomSlider(optionLiteral: 'option', options: IgZoomSlider): JQuery;
	igZoomSlider(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
	igZoomSlider(methodName: string, ...methodParams: any[]): any;
}

interface IgLoaderSettings {
    scriptPath: string;
    cssPath: string;
    resources?: string;
    theme?: string;
    ready?: Function;
    localePath?: string;
    locale?: string;
    autoDetectLocale?: boolean;
    regional?: string;
    preinit?: Function;
}

interface IgLoader {
    settings?: IgLoaderSettings;
    load(resources: string, callback?: Function, preinit?: Function): IgLoader;
    preinit(callback: Function): IgLoader;
}

interface IgniteUIStatic {
    regional?: any;
    util?: any;
    tmpl(template: string, data: any, ...args: any[]): string;
    loader(options: IgLoaderSettings): IgLoader;
    loader(callback: Function): IgLoader;
    loader(resources: string, callback: Function): IgLoader;
    loader(): IgLoader;
    OlapUtilities: any;
    formatter(val: number|string|Date, type: string, format: string, notTemplate?: boolean, enableUTCDates?: boolean, dateOffset?: any, displayStyle?: string, labelText?: string, tabIndex?: string|number, reg?: any): string;
}

interface JQueryStatic {
    ig: IgniteUIStatic;
}
