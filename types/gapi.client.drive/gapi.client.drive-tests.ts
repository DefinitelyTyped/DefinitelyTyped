/* This is stub file for gapi.client.drive definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/

// Revision: 20200822

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('drive', 'v3', () => {
        /** now we can use gapi.client.drive */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** See, edit, create, and delete all of your Google Drive files */
            'https://www.googleapis.com/auth/drive',
            /** View and manage its own configuration data in your Google Drive */
            'https://www.googleapis.com/auth/drive.appdata',
            /** View and manage Google Drive files and folders that you have opened or created with this app */
            'https://www.googleapis.com/auth/drive.file',
            /** View and manage metadata of files in your Google Drive */
            'https://www.googleapis.com/auth/drive.metadata',
            /** View metadata for files in your Google Drive */
            'https://www.googleapis.com/auth/drive.metadata.readonly',
            /** View the photos, videos and albums in your Google Photos */
            'https://www.googleapis.com/auth/drive.photos.readonly',
            /** See and download all your Google Drive files */
            'https://www.googleapis.com/auth/drive.readonly',
            /** Modify your Google Apps Script scripts' behavior */
            'https://www.googleapis.com/auth/drive.scripts',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Gets information about the user, the user's Drive, and system capabilities. */
        await gapi.client.drive.about.get();
        /** Gets the starting pageToken for listing future changes. */
        await gapi.client.drive.changes.getStartPageToken({
            driveId: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
            teamDriveId: "Test string",
        });
        /** Lists the changes for a user or shared drive. */
        await gapi.client.drive.changes.list({
            driveId: "Test string",
            includeCorpusRemovals: true,
            includeItemsFromAllDrives: true,
            includePermissionsForView: "Test string",
            includeRemoved: true,
            includeTeamDriveItems: true,
            pageSize: 42,
            pageToken: "Test string",
            restrictToMyDrive: true,
            spaces: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
            teamDriveId: "Test string",
        });
        /** Subscribes to changes for a user. */
        await gapi.client.drive.changes.watch({
            driveId: "Test string",
            includeCorpusRemovals: true,
            includeItemsFromAllDrives: true,
            includePermissionsForView: "Test string",
            includeRemoved: true,
            includeTeamDriveItems: true,
            pageSize: 42,
            pageToken: "Test string",
            restrictToMyDrive: true,
            spaces: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
            teamDriveId: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Stop watching resources through this channel */
        await gapi.client.drive.channels.stop({} , {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Creates a new comment on a file. */
        await gapi.client.drive.comments.create({
            fileId: "Test string",
        }, {
            anchor: "Test string",
            author: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            content: "Test string",
            createdTime: "Test string",
            deleted: true,
            htmlContent: "Test string",
            id: "Test string",
            kind: "Test string",
            modifiedTime: "Test string",
            quotedFileContent: {
                mimeType: "Test string",
                value: "Test string",
            },
            replies: [
                {
                    action: "Test string",
                    author: {
                        displayName: "Test string",
                        emailAddress: "Test string",
                        kind: "Test string",
                        me: true,
                        permissionId: "Test string",
                        photoLink: "Test string",
                    },
                    content: "Test string",
                    createdTime: "Test string",
                    deleted: true,
                    htmlContent: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    modifiedTime: "Test string",
                }            ],
            resolved: true,
        });
        /** Deletes a comment. */
        await gapi.client.drive.comments.delete({
            commentId: "Test string",
            fileId: "Test string",
        });
        /** Gets a comment by ID. */
        await gapi.client.drive.comments.get({
            commentId: "Test string",
            fileId: "Test string",
            includeDeleted: true,
        });
        /** Lists a file's comments. */
        await gapi.client.drive.comments.list({
            fileId: "Test string",
            includeDeleted: true,
            pageSize: 42,
            pageToken: "Test string",
            startModifiedTime: "Test string",
        });
        /** Updates a comment with patch semantics. */
        await gapi.client.drive.comments.update({
            commentId: "Test string",
            fileId: "Test string",
        }, {
            anchor: "Test string",
            author: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            content: "Test string",
            createdTime: "Test string",
            deleted: true,
            htmlContent: "Test string",
            id: "Test string",
            kind: "Test string",
            modifiedTime: "Test string",
            quotedFileContent: {
                mimeType: "Test string",
                value: "Test string",
            },
            replies: [
                {
                    action: "Test string",
                    author: {
                        displayName: "Test string",
                        emailAddress: "Test string",
                        kind: "Test string",
                        me: true,
                        permissionId: "Test string",
                        photoLink: "Test string",
                    },
                    content: "Test string",
                    createdTime: "Test string",
                    deleted: true,
                    htmlContent: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    modifiedTime: "Test string",
                }            ],
            resolved: true,
        });
        /** Creates a new shared drive. */
        await gapi.client.drive.drives.create({
            requestId: "Test string",
        }, {
            backgroundImageFile: {
                id: "Test string",
                width: 42,
                xCoordinate: 42,
                yCoordinate: 42,
            },
            backgroundImageLink: "Test string",
            capabilities: {
                canAddChildren: true,
                canChangeCopyRequiresWriterPermissionRestriction: true,
                canChangeDomainUsersOnlyRestriction: true,
                canChangeDriveBackground: true,
                canChangeDriveMembersOnlyRestriction: true,
                canComment: true,
                canCopy: true,
                canDeleteChildren: true,
                canDeleteDrive: true,
                canDownload: true,
                canEdit: true,
                canListChildren: true,
                canManageMembers: true,
                canReadRevisions: true,
                canRename: true,
                canRenameDrive: true,
                canShare: true,
                canTrashChildren: true,
            },
            colorRgb: "Test string",
            createdTime: "Test string",
            hidden: true,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            restrictions: {
                adminManagedRestrictions: true,
                copyRequiresWriterPermission: true,
                domainUsersOnly: true,
                driveMembersOnly: true,
            },
            themeId: "Test string",
        });
        /** Permanently deletes a shared drive for which the user is an organizer. The shared drive cannot contain any untrashed items. */
        await gapi.client.drive.drives.delete({
            driveId: "Test string",
        });
        /** Gets a shared drive's metadata by ID. */
        await gapi.client.drive.drives.get({
            driveId: "Test string",
            useDomainAdminAccess: true,
        });
        /** Hides a shared drive from the default view. */
        await gapi.client.drive.drives.hide({
            driveId: "Test string",
        });
        /** Lists the user's shared drives. */
        await gapi.client.drive.drives.list({
            pageSize: 42,
            pageToken: "Test string",
            q: "Test string",
            useDomainAdminAccess: true,
        });
        /** Restores a shared drive to the default view. */
        await gapi.client.drive.drives.unhide({
            driveId: "Test string",
        });
        /** Updates the metadate for a shared drive. */
        await gapi.client.drive.drives.update({
            driveId: "Test string",
            useDomainAdminAccess: true,
        }, {
            backgroundImageFile: {
                id: "Test string",
                width: 42,
                xCoordinate: 42,
                yCoordinate: 42,
            },
            backgroundImageLink: "Test string",
            capabilities: {
                canAddChildren: true,
                canChangeCopyRequiresWriterPermissionRestriction: true,
                canChangeDomainUsersOnlyRestriction: true,
                canChangeDriveBackground: true,
                canChangeDriveMembersOnlyRestriction: true,
                canComment: true,
                canCopy: true,
                canDeleteChildren: true,
                canDeleteDrive: true,
                canDownload: true,
                canEdit: true,
                canListChildren: true,
                canManageMembers: true,
                canReadRevisions: true,
                canRename: true,
                canRenameDrive: true,
                canShare: true,
                canTrashChildren: true,
            },
            colorRgb: "Test string",
            createdTime: "Test string",
            hidden: true,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            restrictions: {
                adminManagedRestrictions: true,
                copyRequiresWriterPermission: true,
                domainUsersOnly: true,
                driveMembersOnly: true,
            },
            themeId: "Test string",
        });
        /** Creates a copy of a file and applies any requested updates with patch semantics. Folders cannot be copied. */
        await gapi.client.drive.files.copy({
            enforceSingleParent: true,
            fileId: "Test string",
            ignoreDefaultVisibility: true,
            includePermissionsForView: "Test string",
            keepRevisionForever: true,
            ocrLanguage: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
        }, {
            appProperties: {
                A: "Test string"            },
            capabilities: {
                canAddChildren: true,
                canAddFolderFromAnotherDrive: true,
                canAddMyDriveParent: true,
                canChangeCopyRequiresWriterPermission: true,
                canChangeViewersCanCopyContent: true,
                canComment: true,
                canCopy: true,
                canDelete: true,
                canDeleteChildren: true,
                canDownload: true,
                canEdit: true,
                canListChildren: true,
                canModifyContent: true,
                canModifyContentRestriction: true,
                canMoveChildrenOutOfDrive: true,
                canMoveChildrenOutOfTeamDrive: true,
                canMoveChildrenWithinDrive: true,
                canMoveChildrenWithinTeamDrive: true,
                canMoveItemIntoTeamDrive: true,
                canMoveItemOutOfDrive: true,
                canMoveItemOutOfTeamDrive: true,
                canMoveItemWithinDrive: true,
                canMoveItemWithinTeamDrive: true,
                canMoveTeamDriveItem: true,
                canReadDrive: true,
                canReadRevisions: true,
                canReadTeamDrive: true,
                canRemoveChildren: true,
                canRemoveMyDriveParent: true,
                canRename: true,
                canShare: true,
                canTrash: true,
                canTrashChildren: true,
                canUntrash: true,
            },
            contentHints: {
                indexableText: "Test string",
                thumbnail: {
                    image: "Test string",
                    mimeType: "Test string",
                },
            },
            contentRestrictions: [
                {
                    readOnly: true,
                    reason: "Test string",
                    restrictingUser: {
                        displayName: "Test string",
                        emailAddress: "Test string",
                        kind: "Test string",
                        me: true,
                        permissionId: "Test string",
                        photoLink: "Test string",
                    },
                    restrictionTime: "Test string",
                    type: "Test string",
                }            ],
            copyRequiresWriterPermission: true,
            createdTime: "Test string",
            description: "Test string",
            driveId: "Test string",
            explicitlyTrashed: true,
            exportLinks: {
                A: "Test string"            },
            fileExtension: "Test string",
            folderColorRgb: "Test string",
            fullFileExtension: "Test string",
            hasAugmentedPermissions: true,
            hasThumbnail: true,
            headRevisionId: "Test string",
            iconLink: "Test string",
            id: "Test string",
            imageMediaMetadata: {
                aperture: 42,
                cameraMake: "Test string",
                cameraModel: "Test string",
                colorSpace: "Test string",
                exposureBias: 42,
                exposureMode: "Test string",
                exposureTime: 42,
                flashUsed: true,
                focalLength: 42,
                height: 42,
                isoSpeed: 42,
                lens: "Test string",
                location: {
                    altitude: 42,
                    latitude: 42,
                    longitude: 42,
                },
                maxApertureValue: 42,
                meteringMode: "Test string",
                rotation: 42,
                sensor: "Test string",
                subjectDistance: 42,
                time: "Test string",
                whiteBalance: "Test string",
                width: 42,
            },
            isAppAuthorized: true,
            kind: "Test string",
            lastModifyingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            md5Checksum: "Test string",
            mimeType: "Test string",
            modifiedByMe: true,
            modifiedByMeTime: "Test string",
            modifiedTime: "Test string",
            name: "Test string",
            originalFilename: "Test string",
            ownedByMe: true,
            owners: [
                {
                    displayName: "Test string",
                    emailAddress: "Test string",
                    kind: "Test string",
                    me: true,
                    permissionId: "Test string",
                    photoLink: "Test string",
                }            ],
            parents: [
                "Test string"            ],
            permissionIds: [
                "Test string"            ],
            permissions: [
                {
                    allowFileDiscovery: true,
                    deleted: true,
                    displayName: "Test string",
                    domain: "Test string",
                    emailAddress: "Test string",
                    expirationTime: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    permissionDetails: [
                        {
                            inherited: true,
                            inheritedFrom: "Test string",
                            permissionType: "Test string",
                            role: "Test string",
                        }                    ],
                    photoLink: "Test string",
                    role: "Test string",
                    teamDrivePermissionDetails: [
                        {
                            inherited: true,
                            inheritedFrom: "Test string",
                            role: "Test string",
                            teamDrivePermissionType: "Test string",
                        }                    ],
                    type: "Test string",
                    view: "Test string",
                }            ],
            properties: {
                A: "Test string"            },
            quotaBytesUsed: "Test string",
            shared: true,
            sharedWithMeTime: "Test string",
            sharingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            shortcutDetails: {
                targetId: "Test string",
                targetMimeType: "Test string",
            },
            size: "Test string",
            spaces: [
                "Test string"            ],
            starred: true,
            teamDriveId: "Test string",
            thumbnailLink: "Test string",
            thumbnailVersion: "Test string",
            trashed: true,
            trashedTime: "Test string",
            trashingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            version: "Test string",
            videoMediaMetadata: {
                durationMillis: "Test string",
                height: 42,
                width: 42,
            },
            viewedByMe: true,
            viewedByMeTime: "Test string",
            viewersCanCopyContent: true,
            webContentLink: "Test string",
            webViewLink: "Test string",
            writersCanShare: true,
        });
        /** Creates a new file. */
        await gapi.client.drive.files.create({
            enforceSingleParent: true,
            ignoreDefaultVisibility: true,
            includePermissionsForView: "Test string",
            keepRevisionForever: true,
            ocrLanguage: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
            useContentAsIndexableText: true,
        }, {
            appProperties: {
                A: "Test string"            },
            capabilities: {
                canAddChildren: true,
                canAddFolderFromAnotherDrive: true,
                canAddMyDriveParent: true,
                canChangeCopyRequiresWriterPermission: true,
                canChangeViewersCanCopyContent: true,
                canComment: true,
                canCopy: true,
                canDelete: true,
                canDeleteChildren: true,
                canDownload: true,
                canEdit: true,
                canListChildren: true,
                canModifyContent: true,
                canModifyContentRestriction: true,
                canMoveChildrenOutOfDrive: true,
                canMoveChildrenOutOfTeamDrive: true,
                canMoveChildrenWithinDrive: true,
                canMoveChildrenWithinTeamDrive: true,
                canMoveItemIntoTeamDrive: true,
                canMoveItemOutOfDrive: true,
                canMoveItemOutOfTeamDrive: true,
                canMoveItemWithinDrive: true,
                canMoveItemWithinTeamDrive: true,
                canMoveTeamDriveItem: true,
                canReadDrive: true,
                canReadRevisions: true,
                canReadTeamDrive: true,
                canRemoveChildren: true,
                canRemoveMyDriveParent: true,
                canRename: true,
                canShare: true,
                canTrash: true,
                canTrashChildren: true,
                canUntrash: true,
            },
            contentHints: {
                indexableText: "Test string",
                thumbnail: {
                    image: "Test string",
                    mimeType: "Test string",
                },
            },
            contentRestrictions: [
                {
                    readOnly: true,
                    reason: "Test string",
                    restrictingUser: {
                        displayName: "Test string",
                        emailAddress: "Test string",
                        kind: "Test string",
                        me: true,
                        permissionId: "Test string",
                        photoLink: "Test string",
                    },
                    restrictionTime: "Test string",
                    type: "Test string",
                }            ],
            copyRequiresWriterPermission: true,
            createdTime: "Test string",
            description: "Test string",
            driveId: "Test string",
            explicitlyTrashed: true,
            exportLinks: {
                A: "Test string"            },
            fileExtension: "Test string",
            folderColorRgb: "Test string",
            fullFileExtension: "Test string",
            hasAugmentedPermissions: true,
            hasThumbnail: true,
            headRevisionId: "Test string",
            iconLink: "Test string",
            id: "Test string",
            imageMediaMetadata: {
                aperture: 42,
                cameraMake: "Test string",
                cameraModel: "Test string",
                colorSpace: "Test string",
                exposureBias: 42,
                exposureMode: "Test string",
                exposureTime: 42,
                flashUsed: true,
                focalLength: 42,
                height: 42,
                isoSpeed: 42,
                lens: "Test string",
                location: {
                    altitude: 42,
                    latitude: 42,
                    longitude: 42,
                },
                maxApertureValue: 42,
                meteringMode: "Test string",
                rotation: 42,
                sensor: "Test string",
                subjectDistance: 42,
                time: "Test string",
                whiteBalance: "Test string",
                width: 42,
            },
            isAppAuthorized: true,
            kind: "Test string",
            lastModifyingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            md5Checksum: "Test string",
            mimeType: "Test string",
            modifiedByMe: true,
            modifiedByMeTime: "Test string",
            modifiedTime: "Test string",
            name: "Test string",
            originalFilename: "Test string",
            ownedByMe: true,
            owners: [
                {
                    displayName: "Test string",
                    emailAddress: "Test string",
                    kind: "Test string",
                    me: true,
                    permissionId: "Test string",
                    photoLink: "Test string",
                }            ],
            parents: [
                "Test string"            ],
            permissionIds: [
                "Test string"            ],
            permissions: [
                {
                    allowFileDiscovery: true,
                    deleted: true,
                    displayName: "Test string",
                    domain: "Test string",
                    emailAddress: "Test string",
                    expirationTime: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    permissionDetails: [
                        {
                            inherited: true,
                            inheritedFrom: "Test string",
                            permissionType: "Test string",
                            role: "Test string",
                        }                    ],
                    photoLink: "Test string",
                    role: "Test string",
                    teamDrivePermissionDetails: [
                        {
                            inherited: true,
                            inheritedFrom: "Test string",
                            role: "Test string",
                            teamDrivePermissionType: "Test string",
                        }                    ],
                    type: "Test string",
                    view: "Test string",
                }            ],
            properties: {
                A: "Test string"            },
            quotaBytesUsed: "Test string",
            shared: true,
            sharedWithMeTime: "Test string",
            sharingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            shortcutDetails: {
                targetId: "Test string",
                targetMimeType: "Test string",
            },
            size: "Test string",
            spaces: [
                "Test string"            ],
            starred: true,
            teamDriveId: "Test string",
            thumbnailLink: "Test string",
            thumbnailVersion: "Test string",
            trashed: true,
            trashedTime: "Test string",
            trashingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            version: "Test string",
            videoMediaMetadata: {
                durationMillis: "Test string",
                height: 42,
                width: 42,
            },
            viewedByMe: true,
            viewedByMeTime: "Test string",
            viewersCanCopyContent: true,
            webContentLink: "Test string",
            webViewLink: "Test string",
            writersCanShare: true,
        });
        /**
         * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive the user must be an organizer on the parent. If the target is a
         * folder, all descendants owned by the user are also deleted.
         */
        await gapi.client.drive.files.delete({
            enforceSingleParent: true,
            fileId: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
        });
        /** Permanently deletes all of the user's trashed files. */
        await gapi.client.drive.files.emptyTrash({
            enforceSingleParent: true,
        });
        /** Exports a Google Doc to the requested MIME type and returns the exported content. Please note that the exported content is limited to 10MB. */
        await gapi.client.drive.files.export({
            fileId: "Test string",
            mimeType: "Test string",
        });
        /** Generates a set of file IDs which can be provided in create or copy requests. */
        await gapi.client.drive.files.generateIds({
            count: 42,
            space: "Test string",
        });
        /** Gets a file's metadata or content by ID. */
        await gapi.client.drive.files.get({
            acknowledgeAbuse: true,
            fileId: "Test string",
            includePermissionsForView: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
        });
        /** Lists or searches files. */
        await gapi.client.drive.files.list({
            corpora: "Test string",
            corpus: "Test string",
            driveId: "Test string",
            includeItemsFromAllDrives: true,
            includePermissionsForView: "Test string",
            includeTeamDriveItems: true,
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            q: "Test string",
            spaces: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
            teamDriveId: "Test string",
        });
        /** Updates a file's metadata and/or content. This method supports patch semantics. */
        await gapi.client.drive.files.update({
            addParents: "Test string",
            enforceSingleParent: true,
            fileId: "Test string",
            includePermissionsForView: "Test string",
            keepRevisionForever: true,
            ocrLanguage: "Test string",
            removeParents: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
            useContentAsIndexableText: true,
        }, {
            appProperties: {
                A: "Test string"            },
            capabilities: {
                canAddChildren: true,
                canAddFolderFromAnotherDrive: true,
                canAddMyDriveParent: true,
                canChangeCopyRequiresWriterPermission: true,
                canChangeViewersCanCopyContent: true,
                canComment: true,
                canCopy: true,
                canDelete: true,
                canDeleteChildren: true,
                canDownload: true,
                canEdit: true,
                canListChildren: true,
                canModifyContent: true,
                canModifyContentRestriction: true,
                canMoveChildrenOutOfDrive: true,
                canMoveChildrenOutOfTeamDrive: true,
                canMoveChildrenWithinDrive: true,
                canMoveChildrenWithinTeamDrive: true,
                canMoveItemIntoTeamDrive: true,
                canMoveItemOutOfDrive: true,
                canMoveItemOutOfTeamDrive: true,
                canMoveItemWithinDrive: true,
                canMoveItemWithinTeamDrive: true,
                canMoveTeamDriveItem: true,
                canReadDrive: true,
                canReadRevisions: true,
                canReadTeamDrive: true,
                canRemoveChildren: true,
                canRemoveMyDriveParent: true,
                canRename: true,
                canShare: true,
                canTrash: true,
                canTrashChildren: true,
                canUntrash: true,
            },
            contentHints: {
                indexableText: "Test string",
                thumbnail: {
                    image: "Test string",
                    mimeType: "Test string",
                },
            },
            contentRestrictions: [
                {
                    readOnly: true,
                    reason: "Test string",
                    restrictingUser: {
                        displayName: "Test string",
                        emailAddress: "Test string",
                        kind: "Test string",
                        me: true,
                        permissionId: "Test string",
                        photoLink: "Test string",
                    },
                    restrictionTime: "Test string",
                    type: "Test string",
                }            ],
            copyRequiresWriterPermission: true,
            createdTime: "Test string",
            description: "Test string",
            driveId: "Test string",
            explicitlyTrashed: true,
            exportLinks: {
                A: "Test string"            },
            fileExtension: "Test string",
            folderColorRgb: "Test string",
            fullFileExtension: "Test string",
            hasAugmentedPermissions: true,
            hasThumbnail: true,
            headRevisionId: "Test string",
            iconLink: "Test string",
            id: "Test string",
            imageMediaMetadata: {
                aperture: 42,
                cameraMake: "Test string",
                cameraModel: "Test string",
                colorSpace: "Test string",
                exposureBias: 42,
                exposureMode: "Test string",
                exposureTime: 42,
                flashUsed: true,
                focalLength: 42,
                height: 42,
                isoSpeed: 42,
                lens: "Test string",
                location: {
                    altitude: 42,
                    latitude: 42,
                    longitude: 42,
                },
                maxApertureValue: 42,
                meteringMode: "Test string",
                rotation: 42,
                sensor: "Test string",
                subjectDistance: 42,
                time: "Test string",
                whiteBalance: "Test string",
                width: 42,
            },
            isAppAuthorized: true,
            kind: "Test string",
            lastModifyingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            md5Checksum: "Test string",
            mimeType: "Test string",
            modifiedByMe: true,
            modifiedByMeTime: "Test string",
            modifiedTime: "Test string",
            name: "Test string",
            originalFilename: "Test string",
            ownedByMe: true,
            owners: [
                {
                    displayName: "Test string",
                    emailAddress: "Test string",
                    kind: "Test string",
                    me: true,
                    permissionId: "Test string",
                    photoLink: "Test string",
                }            ],
            parents: [
                "Test string"            ],
            permissionIds: [
                "Test string"            ],
            permissions: [
                {
                    allowFileDiscovery: true,
                    deleted: true,
                    displayName: "Test string",
                    domain: "Test string",
                    emailAddress: "Test string",
                    expirationTime: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    permissionDetails: [
                        {
                            inherited: true,
                            inheritedFrom: "Test string",
                            permissionType: "Test string",
                            role: "Test string",
                        }                    ],
                    photoLink: "Test string",
                    role: "Test string",
                    teamDrivePermissionDetails: [
                        {
                            inherited: true,
                            inheritedFrom: "Test string",
                            role: "Test string",
                            teamDrivePermissionType: "Test string",
                        }                    ],
                    type: "Test string",
                    view: "Test string",
                }            ],
            properties: {
                A: "Test string"            },
            quotaBytesUsed: "Test string",
            shared: true,
            sharedWithMeTime: "Test string",
            sharingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            shortcutDetails: {
                targetId: "Test string",
                targetMimeType: "Test string",
            },
            size: "Test string",
            spaces: [
                "Test string"            ],
            starred: true,
            teamDriveId: "Test string",
            thumbnailLink: "Test string",
            thumbnailVersion: "Test string",
            trashed: true,
            trashedTime: "Test string",
            trashingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            version: "Test string",
            videoMediaMetadata: {
                durationMillis: "Test string",
                height: 42,
                width: 42,
            },
            viewedByMe: true,
            viewedByMeTime: "Test string",
            viewersCanCopyContent: true,
            webContentLink: "Test string",
            webViewLink: "Test string",
            writersCanShare: true,
        });
        /** Subscribes to changes to a file */
        await gapi.client.drive.files.watch({
            acknowledgeAbuse: true,
            fileId: "Test string",
            includePermissionsForView: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Creates a permission for a file or shared drive. */
        await gapi.client.drive.permissions.create({
            emailMessage: "Test string",
            enforceSingleParent: true,
            fileId: "Test string",
            moveToNewOwnersRoot: true,
            sendNotificationEmail: true,
            supportsAllDrives: true,
            supportsTeamDrives: true,
            transferOwnership: true,
            useDomainAdminAccess: true,
        }, {
            allowFileDiscovery: true,
            deleted: true,
            displayName: "Test string",
            domain: "Test string",
            emailAddress: "Test string",
            expirationTime: "Test string",
            id: "Test string",
            kind: "Test string",
            permissionDetails: [
                {
                    inherited: true,
                    inheritedFrom: "Test string",
                    permissionType: "Test string",
                    role: "Test string",
                }            ],
            photoLink: "Test string",
            role: "Test string",
            teamDrivePermissionDetails: [
                {
                    inherited: true,
                    inheritedFrom: "Test string",
                    role: "Test string",
                    teamDrivePermissionType: "Test string",
                }            ],
            type: "Test string",
            view: "Test string",
        });
        /** Deletes a permission. */
        await gapi.client.drive.permissions.delete({
            fileId: "Test string",
            permissionId: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
            useDomainAdminAccess: true,
        });
        /** Gets a permission by ID. */
        await gapi.client.drive.permissions.get({
            fileId: "Test string",
            permissionId: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
            useDomainAdminAccess: true,
        });
        /** Lists a file's or shared drive's permissions. */
        await gapi.client.drive.permissions.list({
            fileId: "Test string",
            includePermissionsForView: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            supportsAllDrives: true,
            supportsTeamDrives: true,
            useDomainAdminAccess: true,
        });
        /** Updates a permission with patch semantics. */
        await gapi.client.drive.permissions.update({
            fileId: "Test string",
            permissionId: "Test string",
            removeExpiration: true,
            supportsAllDrives: true,
            supportsTeamDrives: true,
            transferOwnership: true,
            useDomainAdminAccess: true,
        }, {
            allowFileDiscovery: true,
            deleted: true,
            displayName: "Test string",
            domain: "Test string",
            emailAddress: "Test string",
            expirationTime: "Test string",
            id: "Test string",
            kind: "Test string",
            permissionDetails: [
                {
                    inherited: true,
                    inheritedFrom: "Test string",
                    permissionType: "Test string",
                    role: "Test string",
                }            ],
            photoLink: "Test string",
            role: "Test string",
            teamDrivePermissionDetails: [
                {
                    inherited: true,
                    inheritedFrom: "Test string",
                    role: "Test string",
                    teamDrivePermissionType: "Test string",
                }            ],
            type: "Test string",
            view: "Test string",
        });
        /** Creates a new reply to a comment. */
        await gapi.client.drive.replies.create({
            commentId: "Test string",
            fileId: "Test string",
        }, {
            action: "Test string",
            author: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            content: "Test string",
            createdTime: "Test string",
            deleted: true,
            htmlContent: "Test string",
            id: "Test string",
            kind: "Test string",
            modifiedTime: "Test string",
        });
        /** Deletes a reply. */
        await gapi.client.drive.replies.delete({
            commentId: "Test string",
            fileId: "Test string",
            replyId: "Test string",
        });
        /** Gets a reply by ID. */
        await gapi.client.drive.replies.get({
            commentId: "Test string",
            fileId: "Test string",
            includeDeleted: true,
            replyId: "Test string",
        });
        /** Lists a comment's replies. */
        await gapi.client.drive.replies.list({
            commentId: "Test string",
            fileId: "Test string",
            includeDeleted: true,
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a reply with patch semantics. */
        await gapi.client.drive.replies.update({
            commentId: "Test string",
            fileId: "Test string",
            replyId: "Test string",
        }, {
            action: "Test string",
            author: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            content: "Test string",
            createdTime: "Test string",
            deleted: true,
            htmlContent: "Test string",
            id: "Test string",
            kind: "Test string",
            modifiedTime: "Test string",
        });
        /**
         * Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or
         * Sheets, and the last remaining file version can't be deleted.
         */
        await gapi.client.drive.revisions.delete({
            fileId: "Test string",
            revisionId: "Test string",
        });
        /** Gets a revision's metadata or content by ID. */
        await gapi.client.drive.revisions.get({
            acknowledgeAbuse: true,
            fileId: "Test string",
            revisionId: "Test string",
        });
        /** Lists a file's revisions. */
        await gapi.client.drive.revisions.list({
            fileId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a revision with patch semantics. */
        await gapi.client.drive.revisions.update({
            fileId: "Test string",
            revisionId: "Test string",
        }, {
            exportLinks: {
                A: "Test string"            },
            id: "Test string",
            keepForever: true,
            kind: "Test string",
            lastModifyingUser: {
                displayName: "Test string",
                emailAddress: "Test string",
                kind: "Test string",
                me: true,
                permissionId: "Test string",
                photoLink: "Test string",
            },
            md5Checksum: "Test string",
            mimeType: "Test string",
            modifiedTime: "Test string",
            originalFilename: "Test string",
            publishAuto: true,
            published: true,
            publishedLink: "Test string",
            publishedOutsideDomain: true,
            size: "Test string",
        });
        /** Deprecated use drives.create instead. */
        await gapi.client.drive.teamdrives.create({
            requestId: "Test string",
        }, {
            backgroundImageFile: {
                id: "Test string",
                width: 42,
                xCoordinate: 42,
                yCoordinate: 42,
            },
            backgroundImageLink: "Test string",
            capabilities: {
                canAddChildren: true,
                canChangeCopyRequiresWriterPermissionRestriction: true,
                canChangeDomainUsersOnlyRestriction: true,
                canChangeTeamDriveBackground: true,
                canChangeTeamMembersOnlyRestriction: true,
                canComment: true,
                canCopy: true,
                canDeleteChildren: true,
                canDeleteTeamDrive: true,
                canDownload: true,
                canEdit: true,
                canListChildren: true,
                canManageMembers: true,
                canReadRevisions: true,
                canRemoveChildren: true,
                canRename: true,
                canRenameTeamDrive: true,
                canShare: true,
                canTrashChildren: true,
            },
            colorRgb: "Test string",
            createdTime: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            restrictions: {
                adminManagedRestrictions: true,
                copyRequiresWriterPermission: true,
                domainUsersOnly: true,
                teamMembersOnly: true,
            },
            themeId: "Test string",
        });
        /** Deprecated use drives.delete instead. */
        await gapi.client.drive.teamdrives.delete({
            teamDriveId: "Test string",
        });
        /** Deprecated use drives.get instead. */
        await gapi.client.drive.teamdrives.get({
            teamDriveId: "Test string",
            useDomainAdminAccess: true,
        });
        /** Deprecated use drives.list instead. */
        await gapi.client.drive.teamdrives.list({
            pageSize: 42,
            pageToken: "Test string",
            q: "Test string",
            useDomainAdminAccess: true,
        });
        /** Deprecated use drives.update instead */
        await gapi.client.drive.teamdrives.update({
            teamDriveId: "Test string",
            useDomainAdminAccess: true,
        }, {
            backgroundImageFile: {
                id: "Test string",
                width: 42,
                xCoordinate: 42,
                yCoordinate: 42,
            },
            backgroundImageLink: "Test string",
            capabilities: {
                canAddChildren: true,
                canChangeCopyRequiresWriterPermissionRestriction: true,
                canChangeDomainUsersOnlyRestriction: true,
                canChangeTeamDriveBackground: true,
                canChangeTeamMembersOnlyRestriction: true,
                canComment: true,
                canCopy: true,
                canDeleteChildren: true,
                canDeleteTeamDrive: true,
                canDownload: true,
                canEdit: true,
                canListChildren: true,
                canManageMembers: true,
                canReadRevisions: true,
                canRemoveChildren: true,
                canRename: true,
                canRenameTeamDrive: true,
                canShare: true,
                canTrashChildren: true,
            },
            colorRgb: "Test string",
            createdTime: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            restrictions: {
                adminManagedRestrictions: true,
                copyRequiresWriterPermission: true,
                domainUsersOnly: true,
                teamMembersOnly: true,
            },
            themeId: "Test string",
        });
    }
});
