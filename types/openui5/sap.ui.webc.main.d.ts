// For Library Version: 1.92.0

declare module "sap/ui/webc/main/library" {
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of AvatarColorScheme.
   */
  export enum AvatarColorScheme {
    Accent1 = "Accent1",

    Accent10 = "Accent10",

    Accent2 = "Accent2",

    Accent3 = "Accent3",

    Accent4 = "Accent4",

    Accent5 = "Accent5",

    Accent6 = "Accent6",

    Accent7 = "Accent7",

    Accent8 = "Accent8",

    Accent9 = "Accent9",

    Placeholder = "Placeholder",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of AvatarFitType.
   */
  export enum AvatarFitType {
    Contain = "Contain",

    Cover = "Cover",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of AvatarGroupType.
   */
  export enum AvatarGroupType {
    /**
     * The avatars are displayed as partially overlapped on top of each other and the entire group has one click/tap
     * area.
     */
    Group = "Group",
    /**
     * The avatars are displayed side-by-side and each avatar has its own click/tap area.
     */
    Individual = "Individual",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of AvatarShape.
   */
  export enum AvatarShape {
    /**
     * Circular shape.
     */
    Circle = "Circle",
    /**
     * Square shape.
     */
    Square = "Square",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of AvatarSize.
   */
  export enum AvatarSize {
    /**
     * component size - 5rem font size - 2.5rem
     */
    L = "L",
    /**
     * component size - 4rem font size - 2rem
     */
    M = "M",
    /**
     * component size - 3rem font size - 1.5rem
     */
    S = "S",
    /**
     * component size - 7rem font size - 3rem
     */
    XL = "XL",
    /**
     * component size - 2rem font size - 1rem
     */
    XS = "XS",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of BusyIndicator.
   */
  export enum BusyIndicatorSize {
    /**
     * large size
     */
    Large = "Large",
    /**
     * medium size
     */
    Medium = "Medium",
    /**
     * small size
     */
    Small = "Small",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of Button.
   */
  export enum ButtonDesign {
    /**
     * default type (no special styling)
     */
    Default = "Default",
    /**
     * emphasized type
     */
    Emphasized = "Emphasized",
    /**
     * reject style (red button)
     */
    Negative = "Negative",
    /**
     * accept type (green button)
     */
    Positive = "Positive",
    /**
     * transparent type
     */
    Transparent = "Transparent",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different date selection modes for `ui5-calendar`.
   */
  export enum CalendarSelectionMode {
    /**
     * Several dates can be selected
     */
    Multiple = "Multiple",
    /**
     * A range defined by a start date and an end date can be selected
     */
    Range = "Range",
    /**
     * Only one date can be selected at a time
     */
    Single = "Single",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of Arrow Placement for `ui5-carousel`.
   */
  export enum CarouselArrowsPlacement {
    /**
     * Carousel arrows are placed on the sides of the current Carousel page.
     */
    Content = "Content",
    /**
     * Carousel arrows are placed on the sides of the page indicator of the Carousel.
     */
    Navigation = "Navigation",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines the growing mode of the component.
   */
  export enum GrowingMode {
    /**
     * Component's `load-more` is fired upon pressing a "More" button. at the bottom.
     */
    Button = "Button",
    /**
     * Component's growing is not enabled.
     */
    None = "None",
    /**
     * Component's `load-more` is fired upon scroll.
     */
    Scroll = "Scroll",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that represent an avatar and may be slotted in numerous higher-order components
   * such as `ui5-avatar-group`
   */
  export interface IAvatar {
    __implements__sap_ui_webc_main_IAvatar: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be used as a button inside numerous higher-order components
   */
  export interface IButton {
    __implements__sap_ui_webc_main_IButton: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be used as dates inside `ui5-calendar`
   */
  export interface ICalendarDate {
    __implements__sap_ui_webc_main_ICalendarDate: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be used inside a `ui5-color-palette`
   */
  export interface IColorPaletteItem {
    __implements__sap_ui_webc_main_IColorPaletteItem: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be slotted inside a `ui5-combobox`
   */
  export interface IComboBoxItem {
    __implements__sap_ui_webc_main_IComboBoxItem: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that represent an icon, usable in numerous higher-order components
   */
  export interface IIcon {
    __implements__sap_ui_webc_main_IIcon: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that represent an input, usable in numerous higher-order components
   */
  export interface IInput {
    __implements__sap_ui_webc_main_IInput: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that represent a suggestion item, usable in `ui5-input`
   */
  export interface IInputSuggestionItem {
    __implements__sap_ui_webc_main_IInputSuggestionItem: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be slotted inside a `ui5-list` as items
   */
  export interface IListItem {
    __implements__sap_ui_webc_main_IListItem: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be slotted inside a `ui5-multi-combobox` as items
   */
  export interface IMultiComboBoxItem {
    __implements__sap_ui_webc_main_IMultiComboBoxItem: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines input types
   */
  export enum InputType {
    /**
     * Used for input fields that must contain an e-mail address.
     */
    Email = "Email",
    /**
     * Defines a numeric input field.
     */
    Number = "Number",
    /**
     * Defines a password field.
     */
    Password = "Password",
    /**
     * Used for input fields that should contain a telephone number.
     */
    Tel = "Tel",
    /**
     * Defines a one-line text input field:
     */
    Text = "Text",
    /**
     * Used for input fields that should contain a URL address.
     */
    URL = "URL",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be slotted inside `ui5-select` as options
   */
  export interface ISelectOption {
    __implements__sap_ui_webc_main_ISelectOption: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be slotted inside `ui5-tabcontainer`
   */
  export interface ITab {
    __implements__sap_ui_webc_main_ITab: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be slotted inside a `ui5-table-row` as cells
   */
  export interface ITableCell {
    __implements__sap_ui_webc_main_ITableCell: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be slotted inside a `ui5-table` as columns
   */
  export interface ITableColumn {
    __implements__sap_ui_webc_main_ITableColumn: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that may be slotted inside a `ui5-table` as rows
   */
  export interface ITableRow {
    __implements__sap_ui_webc_main_ITableRow: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for components that represent a token and are usable in components such as `ui5-multi-input`
   */
  export interface IToken {
    __implements__sap_ui_webc_main_IToken: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Interface for tree items for the purpose of `ui5-tree`
   */
  export interface ITreeItem {
    __implements__sap_ui_webc_main_ITreeItem: boolean;
  }

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of Button.
   */
  export enum LinkDesign {
    /**
     * default type (no special styling)
     */
    Default = "Default",
    /**
     * emphasized type
     */
    Emphasized = "Emphasized",
    /**
     * subtle type (appears as regular text, rather than a link)
     */
    Subtle = "Subtle",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines the growing mode, used in the `ui5-List`.
   */
  export enum ListGrowingMode {}
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of ListItem.
   */
  export enum ListItemType {
    /**
     * Indicates that the item is clickable via active feedback when item is pressed.
     */
    Active = "Active",
    /**
     * Enables detail button of the list item that fires detail-click event.
     */
    Detail = "Detail",
    /**
     * Indicates the list item does not have any active feedback when item is pressed.
     */
    Inactive = "Inactive",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines the type of `ui5-list`.
   */
  export enum ListMode {
    /**
     * Delete mode (only one list item can be deleted via provided delete button)
     */
    Delete = "Delete",
    /**
     * Multi selection mode (more than one list item can be selected).
     */
    MultiSelect = "MultiSelect",
    /**
     * Default mode (no selection).
     */
    None = "None",
    /**
     * Right-positioned single selection mode (only one list item can be selected).
     */
    SingleSelect = "SingleSelect",
    /**
     * Selected item is highlighted and selection is changed upon arrow navigation (only one list item can be
     * selected - this is always the focused item).
     */
    SingleSelectAuto = "SingleSelectAuto",
    /**
     * Left-positioned single selection mode (only one list item can be selected).
     */
    SingleSelectBegin = "SingleSelectBegin",
    /**
     * Selected item is highlighted but no selection element is visible (only one list item can be selected).
     */
    SingleSelectEnd = "SingleSelectEnd",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines which separator style will be applied for the list items.
   */
  export enum ListSeparators {
    /**
     * Separators between the items including the last and the first one.
     */
    All = "All",
    /**
     * Separators between the items. **Note:** This enumeration depends on the theme.
     */
    Inner = "Inner",
    /**
     * No item separators.
     */
    None = "None",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines different types of MessageStrip.
   */
  export enum MessageStripDesign {
    /**
     * Message should be just an information
     */
    Information = "Information",
    /**
     * Message is an error
     */
    Negative = "Negative",
    /**
     * Message is a success message
     */
    Positive = "Positive",
    /**
     * Message is a warning
     */
    Warning = "Warning",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Available Panel Accessible Landmark Roles.
   */
  export enum PanelAccessibleRole {
    /**
     * Represents the ARIA role `complementary`. A section of the page, designed to be complementary to the
     * main content at a similar level in the DOM hierarchy.
     */
    Complementary = "Complementary",
    /**
     * Represents the ARIA role `Form`. A landmark region that contains a collection of items and objects that,
     * as a whole, create a form.
     */
    Form = "Form",
    /**
     * Represents the ARIA role `Region`. A section of a page, that is important enough to be included in a
     * page summary or table of contents.
     */
    Region = "Region",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines the horizontal alignment of `ui5-popover`
   */
  export enum PopoverHorizontalAlign {
    /**
     * Popover is centered
     */
    Center = "Center",
    /**
     * Popover opens on the left side of the target
     */
    Left = "Left",
    /**
     * Popover opens on the right side of the target
     */
    Right = "Right",
    /**
     * Popover is stretched
     */
    Stretch = "Stretch",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Types for the placement of Popover control.
   */
  export enum PopoverPlacementType {
    /**
     * Popover will be placed at the bottom of the reference element.
     */
    Bottom = "Bottom",
    /**
     * Popover will be placed at the left side of the reference element.
     */
    Left = "Left",
    /**
     * Popover will be placed at the right side of the reference element.
     */
    Right = "Right",
    /**
     * Popover will be placed at the top of the reference element.
     */
    Top = "Top",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Types for the placement of message Popover control.
   */
  export enum PopoverVerticalAlign {
    /**
     * Popover will be placed at the bottom of the reference control.
     */
    Bottom = "Bottom",

    Center = "Center",
    /**
     * Popover will be streched
     */
    Stretch = "Stretch",
    /**
     * Popover will be placed at the top of the reference control.
     */
    Top = "Top",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of Priority.
   */
  export enum Priority {
    /**
     * High priority.
     */
    High = "High",
    /**
     * Low priority.
     */
    Low = "Low",
    /**
     * Medium priority.
     */
    Medium = "Medium",
    /**
     * Default, none priority.
     */
    None = "None",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines the semantic color
   */
  export enum SemanticColor {
    /**
     * Critical color
     */
    Critical = "Critical",
    /**
     * Default color (brand color)
     */
    Default = "Default",
    /**
     * Negative color
     */
    Negative = "Negative",
    /**
     * Neutral color.
     */
    Neutral = "Neutral",
    /**
     * Positive color
     */
    Positive = "Positive",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines input types
   */
  export enum SwitchDesign {
    /**
     * Defines the Switch as Graphical
     */
    Graphical = "Graphical",
    /**
     * Defines the Switch as Textual
     */
    Textual = "Textual",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of Tab layouts.
   */
  export enum TabLayout {
    /**
     * Inline type, the tab `main text` and `additionalText` are displayed horizotally.
     */
    Inline = "Inline",
    /**
     * Standard type, the tab `main text` and `additionalText` are displayed vertically.
     */
    Standard = "Standard",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines the growing mode, used in the `ui5-table`.
   */
  export enum TableGrowingMode {}
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines the type of `ui5-table`.
   */
  export enum TableMode {
    /**
     * Multi selection mode (more than one table row can be selected).
     */
    MultiSelect = "MultiSelect",
    /**
     * Default mode (no selection).
     */
    None = "None",
    /**
     * Single selection mode (only one table row can be selected).
     */
    SingleSelect = "SingleSelect",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Different types of TableRow.
   */
  export enum TableRowType {
    /**
     * Indicates that the table row is clickable via active feedback when item is pressed.
     */
    Active = "Active",
    /**
     * Indicates that the table row does not have any active feedback when item is pressed.
     */
    Inactive = "Inactive",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines the `ui5-title` level
   */
  export enum TitleLevel {
    /**
     * Renders `h1` tag.
     */
    H1 = "H1",
    /**
     * Renders `h2` tag.
     */
    H2 = "H2",
    /**
     * Renders `h3` tag.
     */
    H3 = "H3",
    /**
     * Renders `h4` tag.
     */
    H4 = "H4",
    /**
     * Renders `h5` tag.
     */
    H5 = "H5",
    /**
     * Renders `h6` tag.
     */
    H6 = "H6",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines where the `ui5-toast` will be placed.
   */
  export enum ToastPlacement {
    /**
     * `ui5-toast` is placed at the `BottomCenter` position of its container. Default placement (no selection)
     */
    BottomCenter = "BottomCenter",
    /**
     * `ui5-toast` is placed at the `BottomEnd` position of its container.
     */
    BottomEnd = "BottomEnd",
    /**
     * `ui5-toast` is placed at the `BottomStart` position of its container.
     */
    BottomStart = "BottomStart",
    /**
     * `ui5-toast` is placed at the `MiddleCenter` position of its container.
     */
    MiddleCenter = "MiddleCenter",
    /**
     * `ui5-toast` is placed at the `MiddleEnd` position of its container.
     */
    MiddleEnd = "MiddleEnd",
    /**
     * `ui5-toast` is placed at the `MiddleStart` position of its container.
     */
    MiddleStart = "MiddleStart",
    /**
     * `ui5-toast` is placed at the `TopCenter` position of its container.
     */
    TopCenter = "TopCenter",
    /**
     * `ui5-toast` is placed at the `TopEnd` position of its container.
     */
    TopEnd = "TopEnd",
    /**
     * `ui5-toast` is placed at the `TopStart` position of its container.
     */
    TopStart = "TopStart",
  }
  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Defines how the text of a component will be displayed when there is not enough space.
   */
  export enum WrappingType {
    /**
     * The text will be truncated with an ellipsis.
     */
    None = "None",
    /**
     * The text will wrap. The words will not be broken based on hyphenation.
     */
    Normal = "Normal",
  }
}

declare module "sap/ui/webc/main/Avatar" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import {
    IAvatar,
    AvatarColorScheme,
    AvatarFitType,
    AvatarShape,
    AvatarSize,
  } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * An image-like control that has different display options for representing images and icons in different
   * shapes and sizes, depending on the use case.
   *
   * The shape can be circular or square. There are several predefined sizes, as well as an option to set
   * a custom size.
   *
   *
   *
   *  Keyboard Handling:
   *
   *
   * 	 - [SPACE, ENTER, RETURN] - Fires the `click` event if the `interactive` property is set to true.
   * 	 - [SHIFT] - If [SPACE] or [ENTER],[RETURN] is pressed, pressing [SHIFT] releases the component without
   * 			triggering the click event.
   */
  export default class Avatar extends WebComponent implements IAvatar {
    __implements__sap_ui_webc_main_IAvatar: boolean;
    /**
     * Constructor for a new `Avatar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $AvatarSettings
    );
    /**
     * Constructor for a new `Avatar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $AvatarSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.Avatar with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Avatar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. If not provided a default text alternative will be set,
     * if present.
     *
     * Default value is `empty string`.
     */
    getAccessibleName(): string;
    /**
     * Gets current value of property {@link #getColorScheme colorScheme}.
     *
     * Defines the background color of the content.
     *
     *  Available options are:
     * 	 - `Accent1`
     * 	 - `Accent2`
     * 	 - `Accent3`
     * 	 - `Accent4`
     * 	 - `Accent5`
     * 	 - `Accent6`
     * 	 - `Accent7`
     * 	 - `Accent8`
     * 	 - `Accent9`
     * 	 - `Accent10`
     * 	 - `Placeholder`
     *
     * Default value is `Accent6`.
     */
    getColorScheme(): AvatarColorScheme | keyof typeof AvatarColorScheme;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the name of the UI5 Icon, that would be displayed.
     *  **Note:** If `image` is set, the property would be ignored.
     *  **Note:** You should import the desired icon first, then use its name as "icon".
     *
     *  import "@ui5/webcomponents-icons/dist/{icon_name}.js"
     *
     * ```javascript
     * <ui5-avatar icon="employee">```
     *
     *
     * See all the available icons in the Icon Explorer.
     *
     * Default value is `empty string`.
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getImage image}.
     *
     * Defines the source path to the desired image.
     *
     * Default value is `empty string`.
     */
    getImage(): string;
    /**
     * Gets current value of property {@link #getImageFitType imageFitType}.
     *
     * Defines the fit type of the desired image.
     *
     *  Available options are:
     * 	 - `Cover`
     * 	 - `Contain`
     *
     * Default value is `Cover`.
     */
    getImageFitType(): AvatarFitType | keyof typeof AvatarFitType;
    /**
     * Gets current value of property {@link #getInitials initials}.
     *
     * Defines the displayed initials.
     *  Up to two Latin letters can be displayed as initials.
     *
     * Default value is `empty string`.
     */
    getInitials(): string;
    /**
     * Gets current value of property {@link #getInteractive interactive}.
     *
     * Defines if the avatar is interactive (focusable and pressable)
     *
     * Default value is `false`.
     */
    getInteractive(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Avatar.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getShape shape}.
     *
     * Defines the shape of the component.
     *
     *  Available options are:
     * 	 - `Circle`
     * 	 - `Square`
     *
     * Default value is `Circle`.
     */
    getShape(): AvatarShape | keyof typeof AvatarShape;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Defines predefined size of the component.
     *
     *  Available options are:
     * 	 - `XS`
     * 	 - `S`
     * 	 - `M`
     * 	 - `L`
     * 	 - `XL`
     *
     * Default value is `S`.
     */
    getSize(): AvatarSize | keyof typeof AvatarSize;
    /**
     * Sets a new value for property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. If not provided a default text alternative will be set,
     * if present.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAccessibleName(
      /**
       * New value for property `accessibleName`
       */
      sAccessibleName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getColorScheme colorScheme}.
     *
     * Defines the background color of the content.
     *
     *  Available options are:
     * 	 - `Accent1`
     * 	 - `Accent2`
     * 	 - `Accent3`
     * 	 - `Accent4`
     * 	 - `Accent5`
     * 	 - `Accent6`
     * 	 - `Accent7`
     * 	 - `Accent8`
     * 	 - `Accent9`
     * 	 - `Accent10`
     * 	 - `Placeholder`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Accent6`.
     */
    setColorScheme(
      /**
       * New value for property `colorScheme`
       */
      sColorScheme?: AvatarColorScheme | keyof typeof AvatarColorScheme
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the name of the UI5 Icon, that would be displayed.
     *  **Note:** If `image` is set, the property would be ignored.
     *  **Note:** You should import the desired icon first, then use its name as "icon".
     *
     *  import "@ui5/webcomponents-icons/dist/{icon_name}.js"
     *
     * ```javascript
     * <ui5-avatar icon="employee">```
     *
     *
     * See all the available icons in the Icon Explorer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getImage image}.
     *
     * Defines the source path to the desired image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setImage(
      /**
       * New value for property `image`
       */
      sImage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getImageFitType imageFitType}.
     *
     * Defines the fit type of the desired image.
     *
     *  Available options are:
     * 	 - `Cover`
     * 	 - `Contain`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Cover`.
     */
    setImageFitType(
      /**
       * New value for property `imageFitType`
       */
      sImageFitType?: AvatarFitType | keyof typeof AvatarFitType
    ): this;
    /**
     * Sets a new value for property {@link #getInitials initials}.
     *
     * Defines the displayed initials.
     *  Up to two Latin letters can be displayed as initials.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setInitials(
      /**
       * New value for property `initials`
       */
      sInitials?: string
    ): this;
    /**
     * Sets a new value for property {@link #getInteractive interactive}.
     *
     * Defines if the avatar is interactive (focusable and pressable)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setInteractive(
      /**
       * New value for property `interactive`
       */
      bInteractive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShape shape}.
     *
     * Defines the shape of the component.
     *
     *  Available options are:
     * 	 - `Circle`
     * 	 - `Square`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Circle`.
     */
    setShape(
      /**
       * New value for property `shape`
       */
      sShape?: AvatarShape | keyof typeof AvatarShape
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Defines predefined size of the component.
     *
     *  Available options are:
     * 	 - `XS`
     * 	 - `S`
     * 	 - `M`
     * 	 - `L`
     * 	 - `XL`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `S`.
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: AvatarSize | keyof typeof AvatarSize
    ): this;
  }

  export interface $AvatarSettings extends $WebComponentSettings {
    /**
     * Defines the text alternative of the component. If not provided a default text alternative will be set,
     * if present.
     */
    accessibleName?: string | PropertyBindingInfo;

    /**
     * Defines the background color of the content.
     *
     *  Available options are:
     * 	 - `Accent1`
     * 	 - `Accent2`
     * 	 - `Accent3`
     * 	 - `Accent4`
     * 	 - `Accent5`
     * 	 - `Accent6`
     * 	 - `Accent7`
     * 	 - `Accent8`
     * 	 - `Accent9`
     * 	 - `Accent10`
     * 	 - `Placeholder`
     */
    colorScheme?:
      | (AvatarColorScheme | keyof typeof AvatarColorScheme)
      | PropertyBindingInfo;

    /**
     * Defines the name of the UI5 Icon, that would be displayed.
     *  **Note:** If `image` is set, the property would be ignored.
     *  **Note:** You should import the desired icon first, then use its name as "icon".
     *
     *  import "@ui5/webcomponents-icons/dist/{icon_name}.js"
     *
     * ```javascript
     * <ui5-avatar icon="employee">```
     *
     *
     * See all the available icons in the Icon Explorer.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Defines the source path to the desired image.
     */
    image?: string | PropertyBindingInfo;

    /**
     * Defines the fit type of the desired image.
     *
     *  Available options are:
     * 	 - `Cover`
     * 	 - `Contain`
     */
    imageFitType?:
      | (AvatarFitType | keyof typeof AvatarFitType)
      | PropertyBindingInfo;

    /**
     * Defines the displayed initials.
     *  Up to two Latin letters can be displayed as initials.
     */
    initials?: string | PropertyBindingInfo;

    /**
     * Defines if the avatar is interactive (focusable and pressable)
     */
    interactive?: boolean | PropertyBindingInfo;

    /**
     * Defines the shape of the component.
     *
     *  Available options are:
     * 	 - `Circle`
     * 	 - `Square`
     */
    shape?: (AvatarShape | keyof typeof AvatarShape) | PropertyBindingInfo;

    /**
     * Defines predefined size of the component.
     *
     *  Available options are:
     * 	 - `XS`
     * 	 - `S`
     * 	 - `M`
     * 	 - `L`
     * 	 - `XL`
     */
    size?: (AvatarSize | keyof typeof AvatarSize) | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/AvatarGroup" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import {
    IAvatar,
    AvatarSize,
    AvatarGroupType,
  } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import Control from "sap/ui/core/Control";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * Displays a group of avatars arranged horizontally. It is useful to visually showcase a group of related
   * avatars, such as, project team members or employees.
   *
   * The component allows you to display the avatars in different sizes, depending on your use case.
   *
   * The `AvatarGroup` component has two group types:
   * 	 - `Group` type: The avatars are displayed as partially overlapped on top of each other and the entire
   * 			group has one click/tap area.
   * 	 - `Individual` type: The avatars are displayed side-by-side and each avatar has its own click/tap area.
   *
   *
   * Responsive Behavior:
   *
   * When the available space is less than the width required to display all avatars, an overflow visualization
   * appears as a button placed at the end with the same shape and size as the avatars. The visualization
   * displays the number of avatars that have overflowed and are not currently visible.
   *
   * Usage:
   *
   * Use the `AvatarGroup` if:
   * 	 - You want to display a group of avatars.
   * 	 - You want to display several avatars which have something in common.
   *
   * Do not use the `AvatarGroup` if:
   * 	 - You want to display a single avatar.
   * 	 - You want to display a gallery for simple images.
   * 	 - You want to use it for other visual content than avatars.
   *
   * Keyboard Handling: The component provides advanced keyboard handling. When focused, the user can use
   * the following keyboard shortcuts in order to perform a navigation:
   *  - `type` Individual:
   *
   *
   *
   * 	 - [TAB] - Move focus to the overflow button
   * 	 - [LEFT] - Navigate one avatar to the left
   * 	 - [RIGHT] - Navigate one avatar to the right
   * 	 - [HOME] - Navigate to the first avatar
   * 	 - [END] - Navigate to the last avatar
   * 	 - [SPACE],[ENTER],[RETURN] - Trigger `ui5-click` event
   *  - `type` Group:
   *
   *
   *
   * 	 - [TAB] - Move focus to the next interactive element after the component
   * 	 - [SPACE],[ENTER],[RETURN] - Trigger `ui5-click` event
   */
  export default class AvatarGroup extends WebComponent {
    /**
     * Constructor for a new `AvatarGroup`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $AvatarGroupSettings
    );
    /**
     * Constructor for a new `AvatarGroup`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $AvatarGroupSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: IAvatar
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.AvatarGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.AvatarGroup` itself.
     *
     * Fired when the component is activated either with a click/tap or by using the Enter or Space key.
     */
    attachClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.AvatarGroup` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.AvatarGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.AvatarGroup` itself.
     *
     * Fired when the component is activated either with a click/tap or by using the Enter or Space key.
     */
    attachClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.AvatarGroup` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:overflow overflow} event of this `sap.ui.webc.main.AvatarGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.AvatarGroup` itself.
     *
     * Fired when the count of visible `sap.ui.webc.main.Avatar` elements in the component has changed
     */
    attachOverflow(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.AvatarGroup` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:overflow overflow} event of this `sap.ui.webc.main.AvatarGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.AvatarGroup` itself.
     *
     * Fired when the count of visible `sap.ui.webc.main.Avatar` elements in the component has changed
     */
    attachOverflow(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.AvatarGroup` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Destroys the overflowButton in the aggregation {@link #getOverflowButton overflowButton}.
     */
    destroyOverflowButton(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.webc.main.AvatarGroup`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:overflow overflow} event of this `sap.ui.webc.main.AvatarGroup`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachOverflow(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.AvatarGroup with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AvatarGroup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:click click} to attached listeners.
     */
    fireClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The DOM ref of the clicked item.
         */
        targetRef?: HTMLElement;
        /**
         * indicates if the overflow button is clicked
         */
        overflowButtonClicked?: boolean;
      }
    ): this;
    /**
     * Fires event {@link #event:overflow overflow} to attached listeners.
     */
    fireOverflow(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAvatarSize avatarSize}.
     *
     * Defines predefined size of the `sap.ui.webc.main.Avatar`.
     *
     *  Available options are:
     * 	 - `XS`
     * 	 - `S`
     * 	 - `M`
     * 	 - `L`
     * 	 - `XL`
     *
     * Default value is `S`.
     */
    getAvatarSize(): AvatarSize | keyof typeof AvatarSize;
    /**
     * Returns an array containing the `AvatarColorScheme` values that correspond to the avatars in the component.
     */
    getColorScheme(): void;
    /**
     * Returns an array containing the `ui5-avatar` instances that are currently not displayed due to lack of
     * space.
     */
    getHiddenItems(): void;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the items of the component. Use the `sap.ui.webc.main.Avatar` component as an item.
     *
     *  **Note:** The UX guidelines recommends using avatars with "Circle" shape. Moreover, if you use avatars
     * with "Square" shape, there will be visual inconsistency as the built-in overflow action has "Circle"
     * shape.
     */
    getItems(): IAvatar[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.AvatarGroup.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets content of aggregation {@link #getOverflowButton overflowButton}.
     *
     * Defines the overflow button of the component. **Note:** We recommend using the `sap.ui.webc.main.Button`
     * component.
     *
     *  **Note:** If this slot is not used, the component will display the built-in overflow button.
     */
    getOverflowButton(): Control;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the mode of the `AvatarGroup`.
     *
     *  Available options are:
     * 	 - `Group`
     * 	 - `Individual`
     *
     * Default value is `Group`.
     */
    getType(): AvatarGroupType | keyof typeof AvatarGroupType;
    /**
     * Checks for the provided `sap.ui.webc.main.IAvatar` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: IAvatar
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: IAvatar,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): IAvatar[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | IAvatar
    ): IAvatar;
    /**
     * Sets a new value for property {@link #getAvatarSize avatarSize}.
     *
     * Defines predefined size of the `sap.ui.webc.main.Avatar`.
     *
     *  Available options are:
     * 	 - `XS`
     * 	 - `S`
     * 	 - `M`
     * 	 - `L`
     * 	 - `XL`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `S`.
     */
    setAvatarSize(
      /**
       * New value for property `avatarSize`
       */
      sAvatarSize?: AvatarSize | keyof typeof AvatarSize
    ): this;
    /**
     * Sets the aggregated {@link #getOverflowButton overflowButton}.
     */
    setOverflowButton(
      /**
       * The overflowButton to set
       */
      oOverflowButton: Control
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the mode of the `AvatarGroup`.
     *
     *  Available options are:
     * 	 - `Group`
     * 	 - `Individual`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Group`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: AvatarGroupType | keyof typeof AvatarGroupType
    ): this;
  }

  export interface $AvatarGroupSettings extends $WebComponentSettings {
    /**
     * Defines predefined size of the `sap.ui.webc.main.Avatar`.
     *
     *  Available options are:
     * 	 - `XS`
     * 	 - `S`
     * 	 - `M`
     * 	 - `L`
     * 	 - `XL`
     */
    avatarSize?: (AvatarSize | keyof typeof AvatarSize) | PropertyBindingInfo;

    /**
     * Defines the mode of the `AvatarGroup`.
     *
     *  Available options are:
     * 	 - `Group`
     * 	 - `Individual`
     */
    type?:
      | (AvatarGroupType | keyof typeof AvatarGroupType)
      | PropertyBindingInfo;

    /**
     * Defines the items of the component. Use the `sap.ui.webc.main.Avatar` component as an item.
     *
     *  **Note:** The UX guidelines recommends using avatars with "Circle" shape. Moreover, if you use avatars
     * with "Square" shape, there will be visual inconsistency as the built-in overflow action has "Circle"
     * shape.
     */
    items?: IAvatar[] | IAvatar | AggregationBindingInfo;

    /**
     * Defines the overflow button of the component. **Note:** We recommend using the `sap.ui.webc.main.Button`
     * component.
     *
     *  **Note:** If this slot is not used, the component will display the built-in overflow button.
     */
    overflowButton?: Control;

    /**
     * Fired when the component is activated either with a click/tap or by using the Enter or Space key.
     */
    click?: Function;

    /**
     * Fired when the count of visible `sap.ui.webc.main.Avatar` elements in the component has changed
     */
    overflow?: Function;
  }
}

declare module "sap/ui/webc/main/Badge" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IIcon } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Badge` is a small non-interactive component which contains text information and
   * color chosen from a list of predefined color schemes. It serves the purpose to attract the user attention
   * to some piece of information (state, quantity, condition, etc.).
   *
   * Usage Guidelines:
   * 	 - If the text is longer than the width of the component, it doesn’t wrap, it shows ellipsis.
   * 	 - When truncated, the full text is not visible, therefore, it’s recommended to make more space for
   * 			longer texts to be fully displayed.
   * 	 - Colors are not semantic and have no visual representation in High Contrast Black (sap_belize_hcb)
   * 			theme.
   */
  export default class Badge extends WebComponent {
    /**
     * Constructor for a new `Badge`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $BadgeSettings
    );
    /**
     * Constructor for a new `Badge`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $BadgeSettings
    );

    /**
     * Destroys the icon in the aggregation {@link #getIcon icon}.
     */
    destroyIcon(): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Badge with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Badge>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getColorScheme colorScheme}.
     *
     * Defines the color scheme of the component. There are 10 predefined schemes. Each scheme applies different
     * values for the `background-color` and `border-color`. To use one you can set a number from `"1"` to `"10"`.
     * The `colorScheme` `"1"` will be set by default.
     *
     *  **Note:** Color schemes have no visual representation in High Contrast Black (sap_belize_hcb) theme.
     *
     * Default value is `"1"`.
     */
    getColorScheme(): string;
    /**
     * Gets content of aggregation {@link #getIcon icon}.
     *
     * Defines the icon to be displayed in the component.
     */
    getIcon(): IIcon;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Badge.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getColorScheme colorScheme}.
     *
     * Defines the color scheme of the component. There are 10 predefined schemes. Each scheme applies different
     * values for the `background-color` and `border-color`. To use one you can set a number from `"1"` to `"10"`.
     * The `colorScheme` `"1"` will be set by default.
     *
     *  **Note:** Color schemes have no visual representation in High Contrast Black (sap_belize_hcb) theme.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"1"`.
     */
    setColorScheme(
      /**
       * New value for property `colorScheme`
       */
      sColorScheme?: string
    ): this;
    /**
     * Sets the aggregated {@link #getIcon icon}.
     */
    setIcon(
      /**
       * The icon to set
       */
      oIcon: IIcon
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $BadgeSettings extends $WebComponentSettings {
    /**
     * Defines the color scheme of the component. There are 10 predefined schemes. Each scheme applies different
     * values for the `background-color` and `border-color`. To use one you can set a number from `"1"` to `"10"`.
     * The `colorScheme` `"1"` will be set by default.
     *
     *  **Note:** Color schemes have no visual representation in High Contrast Black (sap_belize_hcb) theme.
     */
    colorScheme?: string | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed in the component.
     */
    icon?: IIcon;
  }
}

declare module "sap/ui/webc/main/BusyIndicator" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { BusyIndicatorSize } from "sap/ui/webc/main/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.BusyIndicator` signals that some operation is going on and that the user must wait.
   * It does not block the current UI screen so other operations could be triggered in parallel. It displays
   * 3 dots and each dot expands and shrinks at a different rate, resulting in a cascading flow of animation.
   *
   * Usage: For the `sap.ui.webc.main.BusyIndicator` you can define the size, the text and whether it is shown
   * or hidden. In order to hide it, use the "active" property.
   *
   *  In order to show busy state over an HTML element, simply nest the HTML element in a `sap.ui.webc.main.BusyIndicator`
   * instance.
   *  **Note:** Since `sap.ui.webc.main.BusyIndicator` has `display: inline-block;` by default and no width
   * of its own, whenever you need to wrap a block-level element, you should set `display: block` to the busy
   * indicator as well.
   *
   * When to use::
   * 	 - The user needs to be able to cancel the operation.
   * 	 - Only part of the application or a particular control is affected.
   *
   * When not to use::
   * 	 - The operation takes less than one second.
   * 	 - You need to block the screen and prevent the user from starting another activity.
   * 	 - Do not show multiple busy indicators at once.
   */
  export default class BusyIndicator extends WebComponent {
    /**
     * Constructor for a new `BusyIndicator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $BusyIndicatorSettings
    );
    /**
     * Constructor for a new `BusyIndicator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $BusyIndicatorSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.BusyIndicator with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BusyIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getActive active}.
     *
     * Defines if the busy indicator is visible on the screen. By default it is not.
     *
     * Default value is `false`.
     */
    getActive(): boolean;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Determines the content over which the component will appear.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getDisplay display}.
     *
     * Defines whether the control will be rendered as a block or inline HTML element
     */
    getDisplay(): CSSSize;
    /**
     * Returns a metadata object for class sap.ui.webc.main.BusyIndicator.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Defines the size of the component.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Small`
     * 	 - `Medium`
     * 	 - `Large`
     *
     * Default value is `Medium`.
     */
    getSize(): BusyIndicatorSize | keyof typeof BusyIndicatorSize;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines text to be displayed below the component. It can be used to inform the user of the current operation.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getActive active}.
     *
     * Defines if the busy indicator is visible on the screen. By default it is not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setActive(
      /**
       * New value for property `active`
       */
      bActive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDisplay display}.
     *
     * Defines whether the control will be rendered as a block or inline HTML element
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDisplay(
      /**
       * New value for property `display`
       */
      sDisplay?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Defines the size of the component.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Small`
     * 	 - `Medium`
     * 	 - `Large`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Medium`.
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: BusyIndicatorSize | keyof typeof BusyIndicatorSize
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines text to be displayed below the component. It can be used to inform the user of the current operation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $BusyIndicatorSettings extends $WebComponentSettings {
    /**
     * Defines if the busy indicator is visible on the screen. By default it is not.
     */
    active?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the control will be rendered as a block or inline HTML element
     */
    display?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the size of the component.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Small`
     * 	 - `Medium`
     * 	 - `Large`
     */
    size?:
      | (BusyIndicatorSize | keyof typeof BusyIndicatorSize)
      | PropertyBindingInfo;

    /**
     * Defines text to be displayed below the component. It can be used to inform the user of the current operation.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Determines the content over which the component will appear.
     */
    content?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/ui/webc/main/Button" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IButton, ButtonDesign } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { TextDirection, CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Button` component represents a simple push button. It enables users to trigger
   * actions by clicking or tapping the `sap.ui.webc.main.Button`, or by pressing certain keyboard keys, such
   * as Enter.
   *
   * Usage:
   *
   * For the `sap.ui.webc.main.Button` UI, you can define text, icon, or both. You can also specify whether
   * the text or the icon is displayed first.
   *
   *  You can choose from a set of predefined types that offer different styling to correspond to the triggered
   * action.
   *
   *  You can set the `sap.ui.webc.main.Button` as enabled or disabled. An enabled `sap.ui.webc.main.Button`
   * can be pressed by clicking or tapping it. The button changes its style to provide visual feedback to
   * the user that it is pressed or hovered over with the mouse cursor. A disabled `sap.ui.webc.main.Button`
   * appears inactive and cannot be pressed.
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.Button` exposes the following CSS Shadow Parts:
   * 	 - button - Used to style the native button element
   */
  export default class Button extends WebComponent implements IButton {
    __implements__sap_ui_webc_main_IButton: boolean;
    /**
     * Constructor for a new `Button`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ButtonSettings
    );
    /**
     * Constructor for a new `Button`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ButtonSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.Button`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Button` itself.
     *
     * Fired when the component is activated either with a mouse/tap or by using the Enter or Space key.
     *
     *  **Note:** The event will not be fired if the `disabled` property is set to `true`.
     */
    attachClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Button` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.Button`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Button` itself.
     *
     * Fired when the component is activated either with a mouse/tap or by using the Enter or Space key.
     *
     *  **Note:** The event will not be fired if the `disabled` property is set to `true`.
     */
    attachClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Button` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.webc.main.Button`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Button with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Button>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:click click} to attached listeners.
     */
    fireClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Defines the component design.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Default`
     * 	 - `Emphasized`
     * 	 - `Positive`
     * 	 - `Negative`
     * 	 - `Transparent`
     *
     * Default value is `Default`.
     */
    getDesign(): ButtonDesign | keyof typeof ButtonDesign;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled (default is set to `false`). A disabled component can't be
     * pressed or focused, and it is not in the tab chain.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed as graphical element within the component. The SAP-icons font provides
     * numerous options.
     *
     *  Example:
     *
     * See all the available icons in the Icon Explorer.
     *
     * Default value is `empty string`.
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getIconEnd iconEnd}.
     *
     * Defines whether the icon should be displayed after the component text.
     *
     * Default value is `false`.
     */
    getIconEnd(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Button.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSubmits submits}.
     *
     * Default value is `false`.
     */
    getSubmits(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Defines the component design.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Default`
     * 	 - `Emphasized`
     * 	 - `Positive`
     * 	 - `Negative`
     * 	 - `Transparent`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: ButtonDesign | keyof typeof ButtonDesign
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled (default is set to `false`). A disabled component can't be
     * pressed or focused, and it is not in the tab chain.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed as graphical element within the component. The SAP-icons font provides
     * numerous options.
     *
     *  Example:
     *
     * See all the available icons in the Icon Explorer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIconEnd iconEnd}.
     *
     * Defines whether the icon should be displayed after the component text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setIconEnd(
      /**
       * New value for property `iconEnd`
       */
      bIconEnd?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSubmits submits}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSubmits(
      /**
       * New value for property `submits`
       */
      bSubmits?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $ButtonSettings extends $WebComponentSettings {
    /**
     * Defines the component design.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Default`
     * 	 - `Emphasized`
     * 	 - `Positive`
     * 	 - `Negative`
     * 	 - `Transparent`
     */
    design?: (ButtonDesign | keyof typeof ButtonDesign) | PropertyBindingInfo;

    /**
     * Defines whether the component is disabled (default is set to `false`). A disabled component can't be
     * pressed or focused, and it is not in the tab chain.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed as graphical element within the component. The SAP-icons font provides
     * numerous options.
     *
     *  Example:
     *
     * See all the available icons in the Icon Explorer.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Defines whether the icon should be displayed after the component text.
     */
    iconEnd?: boolean | PropertyBindingInfo;

    submits?: boolean | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the component is activated either with a mouse/tap or by using the Enter or Space key.
     *
     *  **Note:** The event will not be fired if the `disabled` property is set to `true`.
     */
    click?: Function;
  }
}

declare module "sap/ui/webc/main/Calendar" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import {
    ICalendarDate,
    CalendarSelectionMode,
  } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import CalendarType from "sap/ui/core/CalendarType";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Calendar` component allows users to select one or more dates.
   *
   *  Currently selected dates are represented with instances of `sap.ui.webc.main.CalendarDate` as children
   * of the `sap.ui.webc.main.Calendar`. The value property of each `sap.ui.webc.main.CalendarDate` must be
   * a date string, correctly formatted according to the `sap.ui.webc.main.Calendar`'s `formatPattern` property.
   * Whenever the user changes the date selection, `sap.ui.webc.main.Calendar` will automatically create/remove
   * instances of `sap.ui.webc.main.CalendarDate` in itself, unless you prevent this behavior by calling `preventDefault()`
   * for the `selected-dates-change` event. This is useful if you want to control the selected dates externally.
   *
   *
   *
   *
   * Usage:
   *
   * The user can navigate to a particular date by:
   *
   *
   *
   * 	 - Pressing over a month inside the months view
   * 	 - Pressing over an year inside the years view
   *  The user can confirm a date selection by pressing over a date inside the days view.
   *
   *
   *
   * Keyboard Handling: The `sap.ui.webc.main.Calendar` provides advanced keyboard handling. When a picker
   * is showed and focused the user can use the following keyboard shortcuts in order to perform a navigation:
   *
   *  - Day picker:
   *
   *
   *
   * 	 - [F4] - Shows month picker
   * 	 - [SHIFT] + [F4] - Shows year picker
   * 	 - [PAGEUP] - Navigate to the previous month
   * 	 - [PAGEDOWN] - Navigate to the next month
   * 	 - [SHIFT] + [PAGEUP] - Navigate to the previous year
   * 	 - [SHIFT] + [PAGEDOWN] - Navigate to the next year
   * 	 - [CTRL] + [SHIFT] + [PAGEUP] - Navigate ten years backwards
   * 	 - [CTRL] + [SHIFT] + [PAGEDOWN] - Navigate ten years forwards
   * 	 - [HOME] - Navigate to the first day of the week
   * 	 - [END] - Navigate to the last day of the week
   * 	 - [CTRL] + [HOME] - Navigate to the first day of the month
   * 	 - [CTRL] + [END] - Navigate to the last day of the month
   *  - Month picker:
   *
   *
   *
   * 	 - [PAGEUP] - Navigate to the previous month
   * 	 - [PAGEDOWN] - Navigate to the next month
   * 	 - [HOME] - Navigate to the first month of the current row
   * 	 - [END] - Navigate to the last month of the current row
   * 	 - [CTRL] + [HOME] - Navigate to the first month of the current year
   * 	 - [CTRL] + [END] - Navigate to the last month of the year
   *  - Year picker:
   *
   *
   *
   * 	 - [PAGEUP] - Navigate to the previous year range
   * 	 - [PAGEDOWN] - Navigate the next year range
   * 	 - [HOME] - Navigate to the first year of the current row
   * 	 - [END] - Navigate to the last year of the current row
   * 	 - [CTRL] + [HOME] - Navigate to the first year of the current year range
   * 	 - [CTRL] + [END] - Navigate to the last year of the current year range
   *
   *
   * Calendar types: The component supports several calendar types - Gregorian, Buddhist, Islamic, Japanese
   * and Persian. By default the Gregorian Calendar is used. In order to use the Buddhist, Islamic, Japanese
   * or Persian calendar, you need to set the `primaryCalendarType` property and import one or more of the
   * following modules:
   *
   *
   *
   * Or, you can use the global configuration and set the `calendarType` key:
   *  ` <script data-id="sap-ui-config" type="application/json"> { "calendarType": "Japanese" } </script>
   * `
   */
  export default class Calendar extends WebComponent {
    /**
     * Constructor for a new `Calendar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalendarSettings
    );
    /**
     * Constructor for a new `Calendar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalendarSettings
    );

    /**
     * Adds some date to the aggregation {@link #getDates dates}.
     */
    addDate(
      /**
       * The date to add; if empty, nothing is inserted
       */
      oDate: ICalendarDate
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectedDatesChange selectedDatesChange} event
     * of this `sap.ui.webc.main.Calendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Calendar` itself.
     *
     * Fired when the selected dates change. **Note:** If you call `preventDefault()` for this event, the component
     * will not create instances of `sap.ui.webc.main.CalendarDate` for the newly selected dates. In that case
     * you should do this manually.
     */
    attachSelectedDatesChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Calendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectedDatesChange selectedDatesChange} event
     * of this `sap.ui.webc.main.Calendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Calendar` itself.
     *
     * Fired when the selected dates change. **Note:** If you call `preventDefault()` for this event, the component
     * will not create instances of `sap.ui.webc.main.CalendarDate` for the newly selected dates. In that case
     * you should do this manually.
     */
    attachSelectedDatesChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Calendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the dates in the aggregation {@link #getDates dates}.
     */
    destroyDates(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectedDatesChange selectedDatesChange} event
     * of this `sap.ui.webc.main.Calendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectedDatesChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Calendar with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Calendar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:selectedDatesChange selectedDatesChange} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireSelectedDatesChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected dates
         */
        values?: any[];
        /**
         * The selected dates as UTC timestamps
         */
        dates?: any[];
      }
    ): boolean;
    /**
     * Gets content of aggregation {@link #getDates dates}.
     *
     * Defines the selected date or dates (depending on the `selectionMode` property) for this calendar as instances
     * of `sap.ui.webc.main.CalendarDate`
     */
    getDates(): ICalendarDate[];
    /**
     * Gets current value of property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * Default value is `empty string`.
     */
    getFormatPattern(): string;
    /**
     * Gets current value of property {@link #getHideWeekNumbers hideWeekNumbers}.
     *
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * **Note:** For calendars other than Gregorian, the week numbers are not displayed regardless of what is
     * set.
     *
     * Default value is `false`.
     */
    getHideWeekNumbers(): boolean;
    /**
     * Gets current value of property {@link #getMaxDate maxDate}.
     *
     * Determines the maximum date available for selection.
     *
     * Default value is `empty string`.
     */
    getMaxDate(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Calendar.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMinDate minDate}.
     *
     * Determines the мinimum date available for selection.
     *
     * Default value is `empty string`.
     */
    getMinDate(): string;
    /**
     * Gets current value of property {@link #getPrimaryCalendarType primaryCalendarType}.
     *
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     */
    getPrimaryCalendarType(): CalendarType | keyof typeof CalendarType;
    /**
     * Gets current value of property {@link #getSelectionMode selectionMode}.
     *
     * Defines the type of selection used in the calendar component. Accepted property values are:
     *
     *
     *
     * 	 - `CalendarSelectionMode.Single` - enables a single date selection.(default value)
     * 	 - `CalendarSelectionMode.Range` - enables selection of a date range.
     * 	 - `CalendarSelectionMode.Multiple` - enables selection of multiple dates.
     *
     * Default value is `Single`.
     */
    getSelectionMode():
      | CalendarSelectionMode
      | keyof typeof CalendarSelectionMode;
    /**
     * Checks for the provided `sap.ui.webc.main.ICalendarDate` in the aggregation {@link #getDates dates}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfDate(
      /**
       * The date whose index is looked for
       */
      oDate: ICalendarDate
    ): int;
    /**
     * Inserts a date into the aggregation {@link #getDates dates}.
     */
    insertDate(
      /**
       * The date to insert; if empty, nothing is inserted
       */
      oDate: ICalendarDate,
      /**
       * The `0`-based index the date should be inserted at; for a negative value of `iIndex`, the date is inserted
       * at position 0; for a value greater than the current size of the aggregation, the date is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getDates dates}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllDates(): ICalendarDate[];
    /**
     * Removes a date from the aggregation {@link #getDates dates}.
     */
    removeDate(
      /**
       * The date to remove or its index or id
       */
      vDate: int | string | ICalendarDate
    ): ICalendarDate;
    /**
     * Sets a new value for property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFormatPattern(
      /**
       * New value for property `formatPattern`
       */
      sFormatPattern?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHideWeekNumbers hideWeekNumbers}.
     *
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * **Note:** For calendars other than Gregorian, the week numbers are not displayed regardless of what is
     * set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideWeekNumbers(
      /**
       * New value for property `hideWeekNumbers`
       */
      bHideWeekNumbers?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxDate maxDate}.
     *
     * Determines the maximum date available for selection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setMaxDate(
      /**
       * New value for property `maxDate`
       */
      sMaxDate?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMinDate minDate}.
     *
     * Determines the мinimum date available for selection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setMinDate(
      /**
       * New value for property `minDate`
       */
      sMinDate?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryCalendarType primaryCalendarType}.
     *
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPrimaryCalendarType(
      /**
       * New value for property `primaryCalendarType`
       */
      sPrimaryCalendarType: CalendarType | keyof typeof CalendarType
    ): this;
    /**
     * Sets a new value for property {@link #getSelectionMode selectionMode}.
     *
     * Defines the type of selection used in the calendar component. Accepted property values are:
     *
     *
     *
     * 	 - `CalendarSelectionMode.Single` - enables a single date selection.(default value)
     * 	 - `CalendarSelectionMode.Range` - enables selection of a date range.
     * 	 - `CalendarSelectionMode.Multiple` - enables selection of multiple dates.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Single`.
     */
    setSelectionMode(
      /**
       * New value for property `selectionMode`
       */
      sSelectionMode?:
        | CalendarSelectionMode
        | keyof typeof CalendarSelectionMode
    ): this;
  }

  export interface $CalendarSettings extends $WebComponentSettings {
    /**
     * Determines the format, displayed in the input field.
     */
    formatPattern?: string | PropertyBindingInfo;

    /**
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * **Note:** For calendars other than Gregorian, the week numbers are not displayed regardless of what is
     * set.
     */
    hideWeekNumbers?: boolean | PropertyBindingInfo;

    /**
     * Determines the maximum date available for selection.
     */
    maxDate?: string | PropertyBindingInfo;

    /**
     * Determines the мinimum date available for selection.
     */
    minDate?: string | PropertyBindingInfo;

    /**
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     */
    primaryCalendarType?:
      | (CalendarType | keyof typeof CalendarType)
      | PropertyBindingInfo;

    /**
     * Defines the type of selection used in the calendar component. Accepted property values are:
     *
     *
     *
     * 	 - `CalendarSelectionMode.Single` - enables a single date selection.(default value)
     * 	 - `CalendarSelectionMode.Range` - enables selection of a date range.
     * 	 - `CalendarSelectionMode.Multiple` - enables selection of multiple dates.
     */
    selectionMode?:
      | (CalendarSelectionMode | keyof typeof CalendarSelectionMode)
      | PropertyBindingInfo;

    /**
     * Defines the selected date or dates (depending on the `selectionMode` property) for this calendar as instances
     * of `sap.ui.webc.main.CalendarDate`
     */
    dates?: ICalendarDate[] | ICalendarDate | AggregationBindingInfo;

    /**
     * Fired when the selected dates change. **Note:** If you call `preventDefault()` for this event, the component
     * will not create instances of `sap.ui.webc.main.CalendarDate` for the newly selected dates. In that case
     * you should do this manually.
     */
    selectedDatesChange?: Function;
  }
}

declare module "sap/ui/webc/main/CalendarDate" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { ICalendarDate } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.CalendarDate` component defines a calendar date to be used inside `sap.ui.webc.main.Calendar`
   */
  export default class CalendarDate
    extends WebComponent
    implements ICalendarDate {
    __implements__sap_ui_webc_main_ICalendarDate: boolean;
    /**
     * Constructor for a new `CalendarDate`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalendarDateSettings
    );
    /**
     * Constructor for a new `CalendarDate`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalendarDateSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.CalendarDate with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CalendarDate>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.webc.main.CalendarDate.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The date formatted according to the `formatPattern` property of the `sap.ui.webc.main.Calendar` that
     * hosts the component
     */
    getValue(): string;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The date formatted according to the `formatPattern` property of the `sap.ui.webc.main.Calendar` that
     * hosts the component
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue: string
    ): this;
  }

  export interface $CalendarDateSettings extends $WebComponentSettings {
    /**
     * The date formatted according to the `formatPattern` property of the `sap.ui.webc.main.Calendar` that
     * hosts the component
     */
    value?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/Card" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Card` is a component that represents information in the form of a tile with separate
   * header and content areas. The content area of a `sap.ui.webc.main.Card` can be arbitrary HTML content.
   * The header can be used through several properties, such as: `titleText`, `subtitleText`, `status` and
   * two slots: `avatar` and `action`.
   *
   * Keyboard handling: In case you enable `headerInteractive` property, you can press the `sap.ui.webc.main.Card`
   * header by Space and Enter keys.
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.Card` exposes the following CSS Shadow Parts:
   * 	 - title - Used to style the title of the card
   * 	 - subtitle - Used to style the subtitle of the card
   * 	 - status - Used to style the status of the card
   */
  export default class Card extends WebComponent {
    /**
     * Constructor for a new `Card`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CardSettings
    );
    /**
     * Constructor for a new `Card`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CardSettings
    );

    /**
     * Adds some action to the aggregation {@link #getAction action}.
     */
    addAction(
      /**
       * The action to add; if empty, nothing is inserted
       */
      oAction: Control
    ): this;
    /**
     * Adds some avatar to the aggregation {@link #getAvatar avatar}.
     */
    addAvatar(
      /**
       * The avatar to add; if empty, nothing is inserted
       */
      oAvatar: Control
    ): this;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerClick headerClick} event of this `sap.ui.webc.main.Card`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Card` itself.
     *
     * Fired when the component header is activated by mouse/tap or by using the Enter or Space key.
     *
     *  **Note:** The event would be fired only if the `headerInteractive` property is set to true.
     */
    attachHeaderClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Card` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerClick headerClick} event of this `sap.ui.webc.main.Card`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Card` itself.
     *
     * Fired when the component header is activated by mouse/tap or by using the Enter or Space key.
     *
     *  **Note:** The event would be fired only if the `headerInteractive` property is set to true.
     */
    attachHeaderClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Card` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the action in the aggregation {@link #getAction action}.
     */
    destroyAction(): this;
    /**
     * Destroys all the avatar in the aggregation {@link #getAvatar avatar}.
     */
    destroyAvatar(): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:headerClick headerClick} event of this `sap.ui.webc.main.Card`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachHeaderClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Card with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Card>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:headerClick headerClick} to attached listeners.
     */
    fireHeaderClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getAction action}.
     *
     * Defines an action, displayed in the right most part of the header.
     *
     *  **Note:** If set, the `status` text will not be displayed, you can either have `action`, or `status`.
     */
    getAction(): Control[];
    /**
     * Gets content of aggregation {@link #getAvatar avatar}.
     *
     * Defines the visual representation in the header of the card. Supports images and icons.
     *
     *  **Note:** SAP-icons font provides numerous options. To find all the available icons, see the Icon Explorer.
     */
    getAvatar(): Control[];
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Defines the content of the component.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getHeaderInteractive headerInteractive}.
     *
     * Defines if the component header would be interactive, e.g gets hover effect, gets focused and `headerPress`
     * event is fired, when it is pressed.
     *
     * Default value is `false`.
     */
    getHeaderInteractive(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Card.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getStatus status}.
     *
     * Defines the status displayed in the component header.
     *
     *  **Note:** If the `action` slot is set, the `status` will not be displayed, you can either have `action`,
     * or `status`.
     *
     * Default value is `empty string`.
     */
    getStatus(): string;
    /**
     * Gets current value of property {@link #getSubtitleText subtitleText}.
     *
     * Defines the subtitle displayed in the component header.
     *
     * Default value is `empty string`.
     */
    getSubtitleText(): string;
    /**
     * Gets current value of property {@link #getTitleText titleText}.
     *
     * Defines the title displayed in the component header.
     *
     * Default value is `empty string`.
     */
    getTitleText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getAction action}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfAction(
      /**
       * The action whose index is looked for
       */
      oAction: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getAvatar avatar}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfAvatar(
      /**
       * The avatar whose index is looked for
       */
      oAvatar: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a action into the aggregation {@link #getAction action}.
     */
    insertAction(
      /**
       * The action to insert; if empty, nothing is inserted
       */
      oAction: Control,
      /**
       * The `0`-based index the action should be inserted at; for a negative value of `iIndex`, the action is
       * inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a avatar into the aggregation {@link #getAvatar avatar}.
     */
    insertAvatar(
      /**
       * The avatar to insert; if empty, nothing is inserted
       */
      oAvatar: Control,
      /**
       * The `0`-based index the avatar should be inserted at; for a negative value of `iIndex`, the avatar is
       * inserted at position 0; for a value greater than the current size of the aggregation, the avatar is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes a action from the aggregation {@link #getAction action}.
     */
    removeAction(
      /**
       * The action to remove or its index or id
       */
      vAction: int | string | Control
    ): Control;
    /**
     * Removes all the controls from the aggregation {@link #getAction action}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAction(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getAvatar avatar}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAvatar(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a avatar from the aggregation {@link #getAvatar avatar}.
     */
    removeAvatar(
      /**
       * The avatar to remove or its index or id
       */
      vAvatar: int | string | Control
    ): Control;
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getHeaderInteractive headerInteractive}.
     *
     * Defines if the component header would be interactive, e.g gets hover effect, gets focused and `headerPress`
     * event is fired, when it is pressed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHeaderInteractive(
      /**
       * New value for property `headerInteractive`
       */
      bHeaderInteractive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getStatus status}.
     *
     * Defines the status displayed in the component header.
     *
     *  **Note:** If the `action` slot is set, the `status` will not be displayed, you can either have `action`,
     * or `status`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setStatus(
      /**
       * New value for property `status`
       */
      sStatus?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSubtitleText subtitleText}.
     *
     * Defines the subtitle displayed in the component header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setSubtitleText(
      /**
       * New value for property `subtitleText`
       */
      sSubtitleText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitleText titleText}.
     *
     * Defines the title displayed in the component header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTitleText(
      /**
       * New value for property `titleText`
       */
      sTitleText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $CardSettings extends $WebComponentSettings {
    /**
     * Defines if the component header would be interactive, e.g gets hover effect, gets focused and `headerPress`
     * event is fired, when it is pressed.
     */
    headerInteractive?: boolean | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the status displayed in the component header.
     *
     *  **Note:** If the `action` slot is set, the `status` will not be displayed, you can either have `action`,
     * or `status`.
     */
    status?: string | PropertyBindingInfo;

    /**
     * Defines the subtitle displayed in the component header.
     */
    subtitleText?: string | PropertyBindingInfo;

    /**
     * Defines the title displayed in the component header.
     */
    titleText?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines an action, displayed in the right most part of the header.
     *
     *  **Note:** If set, the `status` text will not be displayed, you can either have `action`, or `status`.
     */
    action?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the visual representation in the header of the card. Supports images and icons.
     *
     *  **Note:** SAP-icons font provides numerous options. To find all the available icons, see the Icon Explorer.
     */
    avatar?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the content of the component.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Fired when the component header is activated by mouse/tap or by using the Enter or Space key.
     *
     *  **Note:** The event would be fired only if the `headerInteractive` property is set to true.
     */
    headerClick?: Function;
  }
}

declare module "sap/ui/webc/main/Carousel" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { CarouselArrowsPlacement } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The Carousel allows the user to browse through a set of items. The component is mostly used
   * for showing a gallery of images, but can hold any other HTML element.
   *  There are several ways to perform navigation:
   * 	 - on desktop - the user can navigate using the navigation arrows or with keyboard shorcuts.
   * 	 - on mobile - the user can use swipe gestures.
   *
   * Usage:
   *
   * When to use::
   *
   *
   * 	 - The items you want to display are very different from each other.
   * 	 - You want to display the items one after the other.
   *
   * When not to use::
   *
   *
   * 	 - The items you want to display need to be visible at the same time.
   * 	 - The items you want to display are uniform and very similar.
   *
   * Keyboard Handling: When the `sap.ui.webc.main.Carousel` is focused the user can navigate between the
   * items with the following keyboard shortcuts:
   *
   *
   *
   * 	 - [UP/DOWN] - Navigates to previous and next item
   * 	 - [LEFT/RIGHT] - Navigates to previous and next item
   */
  export default class Carousel extends WebComponent {
    /**
     * Constructor for a new `Carousel`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CarouselSettings
    );
    /**
     * Constructor for a new `Carousel`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CarouselSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loadMore loadMore} event of this `sap.ui.webc.main.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Carousel` itself.
     *
     * Fired for the last items of the component if it is scrolled and the direction of scrolling is to the
     * end. The number of items for which the event is fired is controlled by the `infiniteScrollOffset` property.
     */
    attachLoadMore(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loadMore loadMore} event of this `sap.ui.webc.main.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Carousel` itself.
     *
     * Fired for the last items of the component if it is scrolled and the direction of scrolling is to the
     * end. The number of items for which the event is fired is controlled by the `infiniteScrollOffset` property.
     */
    attachLoadMore(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.ui.webc.main.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Carousel` itself.
     *
     * Fired whenever the `selectedIndex` changes due to user interaction, when the user clicks on the navigation
     * arrows or while resizing, based on the `items-per-page-l`, `items-per-page-m` and `items-per-page-s`
     * properties.
     */
    attachNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.ui.webc.main.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Carousel` itself.
     *
     * Fired whenever the `selectedIndex` changes due to user interaction, when the user clicks on the navigation
     * arrows or while resizing, based on the `items-per-page-l`, `items-per-page-m` and `items-per-page-s`
     * properties.
     */
    attachNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:loadMore loadMore} event of this `sap.ui.webc.main.Carousel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLoadMore(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.ui.webc.main.Carousel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Carousel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Carousel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:loadMore loadMore} to attached listeners.
     */
    fireLoadMore(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:navigate navigate} to attached listeners.
     */
    fireNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the current `selectedIndex`.
         */
        selectedIndex?: int;
      }
    ): this;
    /**
     * Gets current value of property {@link #getArrowsPlacement arrowsPlacement}.
     *
     * Defines the position of arrows.
     *
     *  Available options are:
     * 	 - `Content`
     * 	 - `Navigation`
     *  When set to "Content", the arrows are placed on the sides of the current page.
     *  When set to "Navigation", the arrows are placed on the sides of the page indicator.
     *
     * Default value is `Content`.
     */
    getArrowsPlacement():
      | CarouselArrowsPlacement
      | keyof typeof CarouselArrowsPlacement;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Defines the content of the component.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getCyclic cyclic}.
     *
     * Defines whether the carousel should loop, i.e show the first page after the last page is reached and
     * vice versa.
     *
     * Default value is `false`.
     */
    getCyclic(): boolean;
    /**
     * Gets current value of property {@link #getHideNavigationArrows hideNavigationArrows}.
     *
     * Defines the visibility of the navigation arrows. If set to true the navigation arrows will be hidden.
     *
     *
     *  **Note:** The navigation arrows are never displayed on touch devices. In this case, the user can swipe
     * to navigate through the items.
     *
     * Default value is `false`.
     */
    getHideNavigationArrows(): boolean;
    /**
     * Gets current value of property {@link #getHidePageIndicator hidePageIndicator}.
     *
     * Defines the visibility of the paging indicator. If set to true the page indicator will be hidden.
     *
     * Default value is `false`.
     */
    getHidePageIndicator(): boolean;
    /**
     * Gets current value of property {@link #getInfiniteScrollOffset infiniteScrollOffset}.
     *
     * Defines when the `load-more` event is fired. If not applied the event will not be fired.
     *
     * Default value is `1`.
     */
    getInfiniteScrollOffset(): int;
    /**
     * Gets current value of property {@link #getItemsPerPageL itemsPerPageL}.
     *
     * Defines the number of items per page on large size (more than 1024px). One item per page shown by default.
     *
     * Default value is `1`.
     */
    getItemsPerPageL(): int;
    /**
     * Gets current value of property {@link #getItemsPerPageM itemsPerPageM}.
     *
     * Defines the number of items per page on medium size (from 640px to 1024px). One item per page shown by
     * default.
     *
     * Default value is `1`.
     */
    getItemsPerPageM(): int;
    /**
     * Gets current value of property {@link #getItemsPerPageS itemsPerPageS}.
     *
     * Defines the number of items per page on small size (up to 640px). One item per page shown by default.
     *
     * Default value is `1`.
     */
    getItemsPerPageS(): int;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Carousel.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSelectedIndex selectedIndex}.
     *
     * Defines the index of the initially selected item.
     *
     * Default value is `0`.
     */
    getSelectedIndex(): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getArrowsPlacement arrowsPlacement}.
     *
     * Defines the position of arrows.
     *
     *  Available options are:
     * 	 - `Content`
     * 	 - `Navigation`
     *  When set to "Content", the arrows are placed on the sides of the current page.
     *  When set to "Navigation", the arrows are placed on the sides of the page indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Content`.
     */
    setArrowsPlacement(
      /**
       * New value for property `arrowsPlacement`
       */
      sArrowsPlacement?:
        | CarouselArrowsPlacement
        | keyof typeof CarouselArrowsPlacement
    ): this;
    /**
     * Sets a new value for property {@link #getCyclic cyclic}.
     *
     * Defines whether the carousel should loop, i.e show the first page after the last page is reached and
     * vice versa.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setCyclic(
      /**
       * New value for property `cyclic`
       */
      bCyclic?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideNavigationArrows hideNavigationArrows}.
     *
     * Defines the visibility of the navigation arrows. If set to true the navigation arrows will be hidden.
     *
     *
     *  **Note:** The navigation arrows are never displayed on touch devices. In this case, the user can swipe
     * to navigate through the items.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideNavigationArrows(
      /**
       * New value for property `hideNavigationArrows`
       */
      bHideNavigationArrows?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHidePageIndicator hidePageIndicator}.
     *
     * Defines the visibility of the paging indicator. If set to true the page indicator will be hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHidePageIndicator(
      /**
       * New value for property `hidePageIndicator`
       */
      bHidePageIndicator?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getInfiniteScrollOffset infiniteScrollOffset}.
     *
     * Defines when the `load-more` event is fired. If not applied the event will not be fired.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setInfiniteScrollOffset(
      /**
       * New value for property `infiniteScrollOffset`
       */
      iInfiniteScrollOffset?: int
    ): this;
    /**
     * Sets a new value for property {@link #getItemsPerPageL itemsPerPageL}.
     *
     * Defines the number of items per page on large size (more than 1024px). One item per page shown by default.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setItemsPerPageL(
      /**
       * New value for property `itemsPerPageL`
       */
      iItemsPerPageL?: int
    ): this;
    /**
     * Sets a new value for property {@link #getItemsPerPageM itemsPerPageM}.
     *
     * Defines the number of items per page on medium size (from 640px to 1024px). One item per page shown by
     * default.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setItemsPerPageM(
      /**
       * New value for property `itemsPerPageM`
       */
      iItemsPerPageM?: int
    ): this;
    /**
     * Sets a new value for property {@link #getItemsPerPageS itemsPerPageS}.
     *
     * Defines the number of items per page on small size (up to 640px). One item per page shown by default.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setItemsPerPageS(
      /**
       * New value for property `itemsPerPageS`
       */
      iItemsPerPageS?: int
    ): this;
    /**
     * Sets a new value for property {@link #getSelectedIndex selectedIndex}.
     *
     * Defines the index of the initially selected item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setSelectedIndex(
      /**
       * New value for property `selectedIndex`
       */
      iSelectedIndex?: int
    ): this;
  }

  export interface $CarouselSettings extends $WebComponentSettings {
    /**
     * Defines the position of arrows.
     *
     *  Available options are:
     * 	 - `Content`
     * 	 - `Navigation`
     *  When set to "Content", the arrows are placed on the sides of the current page.
     *  When set to "Navigation", the arrows are placed on the sides of the page indicator.
     */
    arrowsPlacement?:
      | (CarouselArrowsPlacement | keyof typeof CarouselArrowsPlacement)
      | PropertyBindingInfo;

    /**
     * Defines whether the carousel should loop, i.e show the first page after the last page is reached and
     * vice versa.
     */
    cyclic?: boolean | PropertyBindingInfo;

    /**
     * Defines the visibility of the navigation arrows. If set to true the navigation arrows will be hidden.
     *
     *
     *  **Note:** The navigation arrows are never displayed on touch devices. In this case, the user can swipe
     * to navigate through the items.
     */
    hideNavigationArrows?: boolean | PropertyBindingInfo;

    /**
     * Defines the visibility of the paging indicator. If set to true the page indicator will be hidden.
     */
    hidePageIndicator?: boolean | PropertyBindingInfo;

    /**
     * Defines when the `load-more` event is fired. If not applied the event will not be fired.
     */
    infiniteScrollOffset?: int | PropertyBindingInfo;

    /**
     * Defines the number of items per page on large size (more than 1024px). One item per page shown by default.
     */
    itemsPerPageL?: int | PropertyBindingInfo;

    /**
     * Defines the number of items per page on medium size (from 640px to 1024px). One item per page shown by
     * default.
     */
    itemsPerPageM?: int | PropertyBindingInfo;

    /**
     * Defines the number of items per page on small size (up to 640px). One item per page shown by default.
     */
    itemsPerPageS?: int | PropertyBindingInfo;

    /**
     * Defines the index of the initially selected item.
     */
    selectedIndex?: int | PropertyBindingInfo;

    /**
     * Defines the content of the component.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Fired for the last items of the component if it is scrolled and the direction of scrolling is to the
     * end. The number of items for which the event is fired is controlled by the `infiniteScrollOffset` property.
     */
    loadMore?: Function;

    /**
     * Fired whenever the `selectedIndex` changes due to user interaction, when the user clicks on the navigation
     * arrows or while resizing, based on the `items-per-page-l`, `items-per-page-m` and `items-per-page-s`
     * properties.
     */
    navigate?: Function;
  }
}

declare module "sap/ui/webc/main/CheckBox" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * Allows the user to set a binary value, such as true/false or yes/no for an item.
   *
   *  The `sap.ui.webc.main.CheckBox` component consists of a box and a label that describes its purpose.
   * If it's checked, an indicator is displayed inside the box. To check/uncheck the `sap.ui.webc.main.CheckBox`,
   * the user has to click or tap the square box or its label.
   *
   *  The `sap.ui.webc.main.CheckBox` component only has 2 states - checked and unchecked. Clicking or tapping
   * toggles the `sap.ui.webc.main.CheckBox` between checked and unchecked state.
   *
   * Usage:
   *
   * You can define the checkbox text with via the `text` property. If the text exceeds the available width,
   * it is truncated by default. In case you prefer text to wrap, use the `wrap` property. The touchable area
   * for toggling the `sap.ui.webc.main.CheckBox` ends where the text ends.
   *
   *  You can disable the `sap.ui.webc.main.CheckBox` by setting the `disabled` property to `true`, or use
   * the `sap.ui.webc.main.CheckBox` in read-only mode by setting the `readonly` property to `true`.
   *
   *
   *
   *  Keyboard Handling:
   *
   * The user can use the following keyboard shortcuts to toggle the checked state of the `sap.ui.webc.main.CheckBox`.
   *
   * 	 - [SPACE, ENTER] - Toggles between different states: checked, not checked.
   */
  export default class CheckBox extends WebComponent {
    /**
     * Constructor for a new `CheckBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CheckBoxSettings
    );
    /**
     * Constructor for a new `CheckBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CheckBoxSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.CheckBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.CheckBox` itself.
     *
     * Fired when the component checked state changes.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.CheckBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.CheckBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.CheckBox` itself.
     *
     * Fired when the component checked state changes.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.CheckBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.CheckBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.CheckBox with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CheckBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getChecked checked}.
     *
     * Defines if the component is checked.
     *
     *  **Note:** The property can be changed with user interaction, either by cliking/tapping on the component,
     * or by pressing the Enter or Space key.
     *
     * Default value is `false`.
     */
    getChecked(): boolean;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getIndeterminate indeterminate}.
     *
     * Defines whether the component is displayed as partially checked.
     *
     *  **Note:** The indeterminate state can be set only programatically and can’t be achieved by user interaction
     * and the resulting visual state depends on the values of the `indeterminate` and `checked` properties:
     *
     * 	 If the component is checked and indeterminate, it will be displayed as partially checked  If the
     * component is checked and it is not indeterminate, it will be displayed as checked  If the component
     * is not checked, it will be displayed as not checked regardless value of the indeterminate attribute
     *
     * Default value is `false`.
     */
    getIndeterminate(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.CheckBox.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A red-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Warning`
     * 	 - `Error`
     * 	 - `None`(default)
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getWrap wrap}.
     *
     * Defines whether the component text wraps when there is not enough space.
     *
     *  **Note:** By default, the text truncates when there is not enough space.
     *
     * Default value is `false`.
     */
    getWrap(): boolean;
    /**
     * Sets a new value for property {@link #getChecked checked}.
     *
     * Defines if the component is checked.
     *
     *  **Note:** The property can be changed with user interaction, either by cliking/tapping on the component,
     * or by pressing the Enter or Space key.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setChecked(
      /**
       * New value for property `checked`
       */
      bChecked?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIndeterminate indeterminate}.
     *
     * Defines whether the component is displayed as partially checked.
     *
     *  **Note:** The indeterminate state can be set only programatically and can’t be achieved by user interaction
     * and the resulting visual state depends on the values of the `indeterminate` and `checked` properties:
     *
     * 	 If the component is checked and indeterminate, it will be displayed as partially checked  If the
     * component is checked and it is not indeterminate, it will be displayed as checked  If the component
     * is not checked, it will be displayed as not checked regardless value of the indeterminate attribute
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setIndeterminate(
      /**
       * New value for property `indeterminate`
       */
      bIndeterminate?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A red-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Warning`
     * 	 - `Error`
     * 	 - `None`(default)
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getWrap wrap}.
     *
     * Defines whether the component text wraps when there is not enough space.
     *
     *  **Note:** By default, the text truncates when there is not enough space.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setWrap(
      /**
       * New value for property `wrap`
       */
      bWrap?: boolean
    ): this;
  }

  export interface $CheckBoxSettings extends $WebComponentSettings {
    /**
     * Defines if the component is checked.
     *
     *  **Note:** The property can be changed with user interaction, either by cliking/tapping on the component,
     * or by pressing the Enter or Space key.
     */
    checked?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is disabled.
     *
     *  **Note:** A disabled component is completely noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is displayed as partially checked.
     *
     *  **Note:** The indeterminate state can be set only programatically and can’t be achieved by user interaction
     * and the resulting visual state depends on the values of the `indeterminate` and `checked` properties:
     *
     * 	 If the component is checked and indeterminate, it will be displayed as partially checked  If the
     * component is checked and it is not indeterminate, it will be displayed as checked  If the component
     * is not checked, it will be displayed as not checked regardless value of the indeterminate attribute
     */
    indeterminate?: boolean | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines whether the component is read-only.
     *
     *  **Note:** A red-only component is not editable, but still provides visual feedback upon user interaction.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines the text of the component.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Warning`
     * 	 - `Error`
     * 	 - `None`(default)
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines whether the component text wraps when there is not enough space.
     *
     *  **Note:** By default, the text truncates when there is not enough space.
     */
    wrap?: boolean | PropertyBindingInfo;

    /**
     * Fired when the component checked state changes.
     */
    change?: Function;
  }
}

declare module "sap/ui/webc/main/ColorPalette" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IColorPaletteItem } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { CSSColor } from "sap/ui/core/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The ColorPalette provides the users with a range of predefined colors. The colors are fixed
   * and do not change with the theme. You can set them by using the ColorPaletteItem items as slots.
   *
   * Usage: The Colorpalette is intended for users that needs to select a color from a predefined set of colors.
   * To allow users select any color from a color picker, enable the `show-more-colors` property. And, to
   * display the most recent color selection, enable the `show-recent-colors` property.
   */
  export default class ColorPalette extends WebComponent {
    /**
     * Constructor for a new `ColorPalette`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPaletteSettings
    );
    /**
     * Constructor for a new `ColorPalette`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPaletteSettings
    );

    /**
     * Adds some color to the aggregation {@link #getColors colors}.
     */
    addColor(
      /**
       * The color to add; if empty, nothing is inserted
       */
      oColor: IColorPaletteItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.ColorPalette`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ColorPalette` itself.
     *
     * Fired when the user selects a color.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ColorPalette` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.ColorPalette`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ColorPalette` itself.
     *
     * Fired when the user selects a color.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ColorPalette` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the colors in the aggregation {@link #getColors colors}.
     */
    destroyColors(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.ColorPalette`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.ColorPalette with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColorPalette>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the selected color
         */
        color?: string;
      }
    ): this;
    /**
     * Gets content of aggregation {@link #getColors colors}.
     *
     * Defines the `sap.ui.webc.main.ColorPaletteItem` items.
     */
    getColors(): IColorPaletteItem[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.ColorPalette.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getShowMoreColors showMoreColors}.
     *
     * Defines whether the user can choose a custom color from a color picker **Note:** In order to use this
     * property you need to import the following module: `"@ui5/webcomponents/dist/features/ColorPaletteMoreColors.js"`
     */
    getShowMoreColors(): boolean;
    /**
     * Gets current value of property {@link #getShowRecentColors showRecentColors}.
     *
     * Defines whether the user can see the last used colors in the bottom of the component
     */
    getShowRecentColors(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The selected color.
     */
    getValue(): CSSColor;
    /**
     * Checks for the provided `sap.ui.webc.main.IColorPaletteItem` in the aggregation {@link #getColors colors}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfColor(
      /**
       * The color whose index is looked for
       */
      oColor: IColorPaletteItem
    ): int;
    /**
     * Inserts a color into the aggregation {@link #getColors colors}.
     */
    insertColor(
      /**
       * The color to insert; if empty, nothing is inserted
       */
      oColor: IColorPaletteItem,
      /**
       * The `0`-based index the color should be inserted at; for a negative value of `iIndex`, the color is inserted
       * at position 0; for a value greater than the current size of the aggregation, the color is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getColors colors}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllColors(): IColorPaletteItem[];
    /**
     * Removes a color from the aggregation {@link #getColors colors}.
     */
    removeColor(
      /**
       * The color to remove or its index or id
       */
      vColor: int | string | IColorPaletteItem
    ): IColorPaletteItem;
    /**
     * Sets a new value for property {@link #getShowMoreColors showMoreColors}.
     *
     * Defines whether the user can choose a custom color from a color picker **Note:** In order to use this
     * property you need to import the following module: `"@ui5/webcomponents/dist/features/ColorPaletteMoreColors.js"`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setShowMoreColors(
      /**
       * New value for property `showMoreColors`
       */
      bShowMoreColors: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowRecentColors showRecentColors}.
     *
     * Defines whether the user can see the last used colors in the bottom of the component
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setShowRecentColors(
      /**
       * New value for property `showRecentColors`
       */
      bShowRecentColors: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The selected color.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue: CSSColor
    ): this;
  }

  export interface $ColorPaletteSettings extends $WebComponentSettings {
    /**
     * Defines whether the user can choose a custom color from a color picker **Note:** In order to use this
     * property you need to import the following module: `"@ui5/webcomponents/dist/features/ColorPaletteMoreColors.js"`
     */
    showMoreColors?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the user can see the last used colors in the bottom of the component
     */
    showRecentColors?: boolean | PropertyBindingInfo;

    /**
     * The selected color.
     */
    value?: CSSColor | PropertyBindingInfo;

    /**
     * Defines the `sap.ui.webc.main.ColorPaletteItem` items.
     */
    colors?: IColorPaletteItem[] | IColorPaletteItem | AggregationBindingInfo;

    /**
     * Fired when the user selects a color.
     */
    change?: Function;
  }
}

declare module "sap/ui/webc/main/ColorPaletteItem" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IColorPaletteItem } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { CSSColor } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.ColorPaletteItem` component represents a color in the the `sap.ui.webc.main.ColorPalette`.
   */
  export default class ColorPaletteItem
    extends WebComponent
    implements IColorPaletteItem {
    __implements__sap_ui_webc_main_IColorPaletteItem: boolean;
    /**
     * Constructor for a new `ColorPaletteItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPaletteItemSettings
    );
    /**
     * Constructor for a new `ColorPaletteItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPaletteItemSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.ColorPaletteItem with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColorPaletteItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.webc.main.ColorPaletteItem.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the colour of the component.
     *
     *  **Note:** The value should be a valid CSS color.
     */
    getValue(): CSSColor;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the colour of the component.
     *
     *  **Note:** The value should be a valid CSS color.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue: CSSColor
    ): this;
  }

  export interface $ColorPaletteItemSettings extends $WebComponentSettings {
    /**
     * Defines the colour of the component.
     *
     *  **Note:** The value should be a valid CSS color.
     */
    value?: CSSColor | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/ColorPicker" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The ColorPicker allows users to choose any color and provides different input options for selecting
   * colors.
   *
   * Usage:
   *
   * When to use:
   * 	 -  users need to select any color freely.
   *
   * When not to use::
   * 	 -  Users need to select one color from a predefined set of colors. Use the ColorPalette component instead.
   */
  export default class ColorPicker extends WebComponent {
    /**
     * Constructor for a new `ColorPicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPickerSettings
    );
    /**
     * Constructor for a new `ColorPicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPickerSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.ColorPicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ColorPicker` itself.
     *
     * Fired when the the selected color is changed
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ColorPicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.ColorPicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ColorPicker` itself.
     *
     * Fired when the the selected color is changed
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ColorPicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.ColorPicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.ColorPicker with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColorPicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Defines the currently selected color of the component.
     *
     *  **Note**: use HEX, RGB, RGBA, HSV formats or a CSS color name when modifying this property.
     */
    getColor(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.ColorPicker.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Defines the currently selected color of the component.
     *
     *  **Note**: use HEX, RGB, RGBA, HSV formats or a CSS color name when modifying this property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor: string
    ): this;
  }

  export interface $ColorPickerSettings extends $WebComponentSettings {
    /**
     * Defines the currently selected color of the component.
     *
     *  **Note**: use HEX, RGB, RGBA, HSV formats or a CSS color name when modifying this property.
     */
    color?: string | PropertyBindingInfo;

    /**
     * Fired when the the selected color is changed
     */
    change?: Function;
  }
}

declare module "sap/ui/webc/main/ComboBox" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IComboBoxItem, IIcon } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState, CSSSize } from "sap/ui/core/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.ComboBox` component represents a drop-down menu with a list of the available options
   * and a text input field to narrow down the options.
   *
   * It is commonly used to enable users to select one or more options from a predefined list. Structure:
   * The `sap.ui.webc.main.ComboBox` consists of the following elements:
   * 	 -  Input field - displays the selected option or a custom user entry. Users can type to narrow down
   * 			the list or enter their own value.  Drop-down arrow - expands\collapses the option list.
   * 	 -  Option list - the list of available options.  Keyboard Handling:
   *
   * The `sap.ui.webc.main.ComboBox` provides advanced keyboard handling.
   *
   * Picker: If the `sap.ui.webc.main.ComboBox` is focused, you can open or close the drop-down by pressing
   * `F4`, `ALT+UP` or `ALT+DOWN` keys.
   */
  export default class ComboBox extends WebComponent {
    /**
     * Constructor for a new `ComboBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComboBoxSettings
    );
    /**
     * Constructor for a new `ComboBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComboBoxSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: IComboBoxItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ComboBox` itself.
     *
     * Fired when the input operation has finished by pressing Enter, focusout or an item is selected.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ComboBox` itself.
     *
     * Fired when the input operation has finished by pressing Enter, focusout or an item is selected.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ComboBox` itself.
     *
     * Fired when typing in input.
     *
     *  **Note:** filterValue property is updated, input is changed.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ComboBox` itself.
     *
     * Fired when typing in input.
     *
     *  **Note:** filterValue property is updated, input is changed.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ComboBox` itself.
     *
     * Fired when selection is changed by user interaction
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ComboBox` itself.
     *
     * Fired when selection is changed by user interaction
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the icon in the aggregation {@link #getIcon icon}.
     */
    destroyIcon(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.ComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.ComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.ui.webc.main.ComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.ComboBox with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ComboBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * item to be selected.
         */
        item?: HTMLElement;
      }
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely uninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getFilter filter}.
     *
     * Defines the filter type of the component. Available options are: `StartsWithPerTerm`, `StartsWith` and
     * `Contains`.
     *
     * Default value is `"StartsWithPerTerm"`.
     */
    getFilter(): string;
    /**
     * Gets current value of property {@link #getFilterValue filterValue}.
     *
     * Defines the "live" value of the component.
     *
     *  **Note:** The property is updated upon typing.
     *
     *
     *
     *  **Note:** Initially the filter value is synced with value.
     *
     * Default value is `empty string`.
     */
    getFilterValue(): string;
    /**
     * Gets content of aggregation {@link #getIcon icon}.
     *
     * Defines the icon to be displayed in the input field.
     */
    getIcon(): IIcon;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the component items.
     */
    getItems(): IComboBoxItem[];
    /**
     * Gets current value of property {@link #getLoading loading}.
     *
     * Indicates whether a loading indicator should be shown in the picker.
     *
     * Default value is `false`.
     */
    getLoading(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.ComboBox.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * Default value is `empty string`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Defines whether the component is readonly.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the component.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.webc.main.IComboBoxItem` in the aggregation {@link #getItems items}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: IComboBoxItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: IComboBoxItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): IComboBoxItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | IComboBoxItem
    ): IComboBoxItem;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely uninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFilter filter}.
     *
     * Defines the filter type of the component. Available options are: `StartsWithPerTerm`, `StartsWith` and
     * `Contains`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"StartsWithPerTerm"`.
     */
    setFilter(
      /**
       * New value for property `filter`
       */
      sFilter?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFilterValue filterValue}.
     *
     * Defines the "live" value of the component.
     *
     *  **Note:** The property is updated upon typing.
     *
     *
     *
     *  **Note:** Initially the filter value is synced with value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFilterValue(
      /**
       * New value for property `filterValue`
       */
      sFilterValue?: string
    ): this;
    /**
     * Sets the aggregated {@link #getIcon icon}.
     */
    setIcon(
      /**
       * The icon to set
       */
      oIcon: IIcon
    ): this;
    /**
     * Sets a new value for property {@link #getLoading loading}.
     *
     * Indicates whether a loading indicator should be shown in the picker.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setLoading(
      /**
       * New value for property `loading`
       */
      bLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Defines whether the component is readonly.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the value of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $ComboBoxSettings extends $WebComponentSettings {
    /**
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely uninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the filter type of the component. Available options are: `StartsWithPerTerm`, `StartsWith` and
     * `Contains`.
     */
    filter?: string | PropertyBindingInfo;

    /**
     * Defines the "live" value of the component.
     *
     *  **Note:** The property is updated upon typing.
     *
     *
     *
     *  **Note:** Initially the filter value is synced with value.
     */
    filterValue?: string | PropertyBindingInfo;

    /**
     * Indicates whether a loading indicator should be shown in the picker.
     */
    loading?: boolean | PropertyBindingInfo;

    /**
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Defines whether the component is readonly.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines the value of the component.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed in the input field.
     */
    icon?: IIcon;

    /**
     * Defines the component items.
     */
    items?: IComboBoxItem[] | IComboBoxItem | AggregationBindingInfo;

    /**
     * Fired when the input operation has finished by pressing Enter, focusout or an item is selected.
     */
    change?: Function;

    /**
     * Fired when typing in input.
     *
     *  **Note:** filterValue property is updated, input is changed.
     */
    input?: Function;

    /**
     * Fired when selection is changed by user interaction
     */
    selectionChange?: Function;
  }
}

declare module "sap/ui/webc/main/ComboBoxItem" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IComboBoxItem } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * The `sap.ui.webc.main.ComboBoxItem` represents the item for a `sap.ui.webc.main.ComboBox`.
   */
  export default class ComboBoxItem
    extends WebComponent
    implements IComboBoxItem {
    __implements__sap_ui_webc_main_IComboBoxItem: boolean;
    /**
     * Constructor for a new `ComboBoxItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComboBoxItemSettings
    );
    /**
     * Constructor for a new `ComboBoxItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComboBoxItemSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.ComboBoxItem with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ComboBoxItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAdditionalText additionalText}.
     *
     * Defines the additional text of the component.
     *
     * Default value is `empty string`.
     */
    getAdditionalText(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.ComboBoxItem.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getAdditionalText additionalText}.
     *
     * Defines the additional text of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAdditionalText(
      /**
       * New value for property `additionalText`
       */
      sAdditionalText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $ComboBoxItemSettings extends $WebComponentSettings {
    /**
     * Defines the additional text of the component.
     */
    additionalText?: string | PropertyBindingInfo;

    /**
     * Defines the text of the component.
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/CustomListItem" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IListItem, ListItemType } from "sap/ui/webc/main/library";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * A component to be used as custom list item within the `sap.ui.webc.main.List` the same way as the standard
   * `sap.ui.webc.main.StandardListItem`.
   *
   * The component accepts arbitrary HTML content to allow full customization.
   */
  export default class CustomListItem
    extends WebComponent
    implements IListItem {
    __implements__sap_ui_webc_main_IListItem: boolean;
    /**
     * Constructor for a new `CustomListItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomListItemSettings
    );
    /**
     * Constructor for a new `CustomListItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomListItemSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:detailClick detailClick} event of this `sap.ui.webc.main.CustomListItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.CustomListItem` itself.
     *
     * Fired when the user clicks on the detail button when type is `Detail`.
     */
    attachDetailClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.CustomListItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:detailClick detailClick} event of this `sap.ui.webc.main.CustomListItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.CustomListItem` itself.
     *
     * Fired when the user clicks on the detail button when type is `Detail`.
     */
    attachDetailClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.CustomListItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:detailClick detailClick} event of this `sap.ui.webc.main.CustomListItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDetailClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.CustomListItem with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CustomListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:detailClick detailClick} to attached listeners.
     */
    fireDetailClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. Note: If not provided a default text alternative will
     * be set, if present.
     *
     * Default value is `empty string`.
     */
    getAccessibleName(): string;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Defines the content of the component.
     */
    getContent(): Control[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.CustomListItem.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines the selected state of the `ListItem`.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the list items. Available options are `Active` (by default),
     * `Inactive` and `Detail`.
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press and hover, while with
     * type `Inactive` and `Detail` - will not.
     *
     * Default value is `Active`.
     */
    getType(): ListItemType | keyof typeof ListItemType;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. Note: If not provided a default text alternative will
     * be set, if present.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAccessibleName(
      /**
       * New value for property `accessibleName`
       */
      sAccessibleName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines the selected state of the `ListItem`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the list items. Available options are `Active` (by default),
     * `Inactive` and `Detail`.
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press and hover, while with
     * type `Inactive` and `Detail` - will not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Active`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ListItemType | keyof typeof ListItemType
    ): this;
  }

  export interface $CustomListItemSettings extends $WebComponentSettings {
    /**
     * Defines the text alternative of the component. Note: If not provided a default text alternative will
     * be set, if present.
     */
    accessibleName?: string | PropertyBindingInfo;

    /**
     * Defines the selected state of the `ListItem`.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the visual indication and behavior of the list items. Available options are `Active` (by default),
     * `Inactive` and `Detail`.
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press and hover, while with
     * type `Inactive` and `Detail` - will not.
     */
    type?: (ListItemType | keyof typeof ListItemType) | PropertyBindingInfo;

    /**
     * Defines the content of the component.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Fired when the user clicks on the detail button when type is `Detail`.
     */
    detailClick?: Function;
  }
}

declare module "sap/ui/webc/main/DatePicker" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import CalendarType from "sap/ui/core/CalendarType";

  import { ValueState, CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.DatePicker` component provides an input field with assigned calendar which opens
   * on user action. The `sap.ui.webc.main.DatePicker` allows users to select a localized date using touch,
   * mouse, or keyboard input. It consists of two parts: the date input field and the date picker.
   *
   * Usage:
   *
   * The user can enter a date by:
   * 	 - Using the calendar that opens in a popup
   * 	 - Typing it in directly in the input field
   *
   *  When the user makes an entry and chooses the enter key, the calendar shows the corresponding date. When
   * the user directly triggers the calendar display, the actual date is displayed.
   *
   * Formatting:
   *
   * If a date is entered by typing it into the input field, it must fit to the used date format.
   *
   *  Supported format options are pattern-based on Unicode LDML Date Format notation. For more information,
   * see UTS
   * #35: Unicode Locale Data Markup Language.
   *
   *  For example, if the `format-pattern` is "yyyy-MM-dd", a valid value string is "2015-07-30" and the same
   * is displayed in the input.
   *
   * Keyboard Handling: The `sap.ui.webc.main.DatePicker` provides advanced keyboard handling. If the `sap.ui.webc.main.DatePicker`
   * is focused, you can open or close the drop-down by pressing `F4`, `ALT+UP` or `ALT+DOWN` keys. Once the
   * drop-down is opened, you can use the `UP`, `DOWN`, `LEFT`, `RIGHT` arrow keys to navigate through the
   * dates and select one by pressing the `Space` or `Enter` keys. Moreover you can use TAB to reach the buttons
   * for changing month and year.
   *
   *
   * If the `sap.ui.webc.main.DatePicker` is focused and the picker dialog is not opened the user can increment
   * or decrement the corresponding field of the JS date object referenced by `dateValue` propery by using
   * the following shortcuts:
   *
   *
   *
   * 	 - [PAGEDOWN] - Decrements the corresponding day of the month by one
   * 	 - [SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one
   * 	 - [SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one
   * 	 - [PAGEUP] - Increments the corresponding day of the month by one
   * 	 - [SHIFT] + [PAGEUP] - Increments the corresponding month by one
   * 	 - [SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one
   *
   * Calendar types: The component supports several calendar types - Gregorian, Buddhist, Islamic, Japanese
   * and Persian. By default the Gregorian Calendar is used. In order to use the Buddhist, Islamic, Japanese
   * or Persian calendar, you need to set the `primaryCalendarType` property and import one or more of the
   * following modules:
   *
   *
   *
   * Or, you can use the global configuration and set the `calendarType` key:
   *  <script data-id="sap-ui-config" type="application/json">
   * {
   * 	"calendarType": "Japanese"
   * }
   * </script>
   */
  export default class DatePicker extends WebComponent {
    /**
     * Constructor for a new `DatePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DatePickerSettings
    );
    /**
     * Constructor for a new `DatePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DatePickerSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.DatePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DatePicker` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DatePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.DatePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DatePicker` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DatePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.DatePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DatePicker` itself.
     *
     * Fired when the value of the component is changed at each key stroke.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DatePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.DatePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DatePicker` itself.
     *
     * Fired when the value of the component is changed at each key stroke.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DatePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the picker.
     */
    closePicker(): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.DatePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.DatePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.DatePicker with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DatePicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Formats a Java Script date object into a string representing a locale date according to the `formatPattern`
     * property of the DatePicker instance
     */
    formatValue(
      /**
       * A Java Script date object to be formatted as string
       */
      date: object
    ): void;
    /**
     * Returns the currently selected date represented as a Local JavaScript Date instance.
     */
    getDateValue(): void;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Determines whether the component is displayed as disabled.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * Default value is `empty string`.
     */
    getFormatPattern(): string;
    /**
     * Gets current value of property {@link #getHideWeekNumbers hideWeekNumbers}.
     *
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * Note: For calendars other than Gregorian, the week numbers are not displayed regardless of what
     * is set.
     *
     * Default value is `false`.
     */
    getHideWeekNumbers(): boolean;
    /**
     * Gets current value of property {@link #getMaxDate maxDate}.
     *
     * Determines the maximum date available for selection.
     *
     * Default value is `empty string`.
     */
    getMaxDate(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.DatePicker.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMinDate minDate}.
     *
     * Determines the мinimum date available for selection.
     *
     * Default value is `empty string`.
     */
    getMinDate(): string;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * Default value is `undefined`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getPrimaryCalendarType primaryCalendarType}.
     *
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     */
    getPrimaryCalendarType(): CalendarType | keyof typeof CalendarType;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Determines whether the component is displayed as read-only.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines a formatted date value.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks if a date is between the minimum and maximum date.
     */
    isInValidRange(
      /**
       * A value to be checked
       */
      value: string
    ): void;
    /**
     * Checks if the picker is open.
     */
    isOpen(): void;
    /**
     * Checks if a value is valid against the current date format of the DatePicker.
     */
    isValid(
      /**
       * A value to be tested against the current date format
       */
      value: string
    ): void;
    /**
     * Opens the picker.
     */
    openPicker(): void;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Determines whether the component is displayed as disabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFormatPattern(
      /**
       * New value for property `formatPattern`
       */
      sFormatPattern?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHideWeekNumbers hideWeekNumbers}.
     *
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * Note: For calendars other than Gregorian, the week numbers are not displayed regardless of what
     * is set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideWeekNumbers(
      /**
       * New value for property `hideWeekNumbers`
       */
      bHideWeekNumbers?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxDate maxDate}.
     *
     * Determines the maximum date available for selection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setMaxDate(
      /**
       * New value for property `maxDate`
       */
      sMaxDate?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMinDate minDate}.
     *
     * Determines the мinimum date available for selection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setMinDate(
      /**
       * New value for property `minDate`
       */
      sMinDate?: string
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryCalendarType primaryCalendarType}.
     *
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPrimaryCalendarType(
      /**
       * New value for property `primaryCalendarType`
       */
      sPrimaryCalendarType: CalendarType | keyof typeof CalendarType
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Determines whether the component is displayed as read-only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines a formatted date value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $DatePickerSettings extends $WebComponentSettings {
    /**
     * Determines whether the component is displayed as disabled.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Determines the format, displayed in the input field.
     */
    formatPattern?: string | PropertyBindingInfo;

    /**
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * Note: For calendars other than Gregorian, the week numbers are not displayed regardless of what
     * is set.
     */
    hideWeekNumbers?: boolean | PropertyBindingInfo;

    /**
     * Determines the maximum date available for selection.
     */
    maxDate?: string | PropertyBindingInfo;

    /**
     * Determines the мinimum date available for selection.
     */
    minDate?: string | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     */
    primaryCalendarType?:
      | (CalendarType | keyof typeof CalendarType)
      | PropertyBindingInfo;

    /**
     * Determines whether the component is displayed as read-only.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines a formatted date value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    change?: Function;

    /**
     * Fired when the value of the component is changed at each key stroke.
     */
    input?: Function;
  }
}

declare module "sap/ui/webc/main/DateRangePicker" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import CalendarType from "sap/ui/core/CalendarType";

  import { ValueState, CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard
   * input, or by selecting a date range in the calendar.
   *
   * Keyboard Handling: The `sap.ui.webc.main.DateRangePicker` provides advanced keyboard handling.
   *
   *
   * When the `sap.ui.webc.main.DateRangePicker` input field is focused the user can increment or decrement
   * respectively the range start or end date, depending on where the cursor is. The following shortcuts are
   * available:
   *
   *
   *
   * 	 - [PAGEDOWN] - Decrements the corresponding day of the month by one
   * 	 - [SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one
   * 	 - [SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one
   * 	 - [PAGEUP] - Increments the corresponding day of the month by one
   * 	 - [SHIFT] + [PAGEUP] - Increments the corresponding month by one
   * 	 - [SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one
   */
  export default class DateRangePicker extends WebComponent {
    /**
     * Constructor for a new `DateRangePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangePickerSettings
    );
    /**
     * Constructor for a new `DateRangePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangePickerSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.DateRangePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DateRangePicker` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DateRangePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.DateRangePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DateRangePicker` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DateRangePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.DateRangePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DateRangePicker` itself.
     *
     * Fired when the value of the component is changed at each key stroke.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DateRangePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.DateRangePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DateRangePicker` itself.
     *
     * Fired when the value of the component is changed at each key stroke.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DateRangePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the picker.
     */
    closePicker(): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.DateRangePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.DateRangePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.DateRangePicker with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateRangePicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Formats a Java Script date object into a string representing a locale date according to the `formatPattern`
     * property of the DatePicker instance
     */
    formatValue(
      /**
       * A Java Script date object to be formatted as string
       */
      date: object
    ): void;
    /**
     * Returns the currently selected date represented as a Local JavaScript Date instance.
     */
    getDateValue(): void;
    /**
     * Gets current value of property {@link #getDelimiter delimiter}.
     *
     * Determines the symbol which separates the dates. If not supplied, the default time interval delimiter
     * for the current locale will be used.
     */
    getDelimiter(): string;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Determines whether the component is displayed as disabled.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Returns the currently selected first date represented as JavaScript Date instance.
     */
    getFirstDateValue(): void;
    /**
     * Gets current value of property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * Default value is `empty string`.
     */
    getFormatPattern(): string;
    /**
     * Gets current value of property {@link #getHideWeekNumbers hideWeekNumbers}.
     *
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * Note: For calendars other than Gregorian, the week numbers are not displayed regardless of what
     * is set.
     *
     * Default value is `false`.
     */
    getHideWeekNumbers(): boolean;
    /**
     * Returns the currently selected last date represented as JavaScript Date instance.
     */
    getLastDateValue(): void;
    /**
     * Gets current value of property {@link #getMaxDate maxDate}.
     *
     * Determines the maximum date available for selection.
     *
     * Default value is `empty string`.
     */
    getMaxDate(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.DateRangePicker.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMinDate minDate}.
     *
     * Determines the мinimum date available for selection.
     *
     * Default value is `empty string`.
     */
    getMinDate(): string;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * Default value is `undefined`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getPrimaryCalendarType primaryCalendarType}.
     *
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     */
    getPrimaryCalendarType(): CalendarType | keyof typeof CalendarType;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Determines whether the component is displayed as read-only.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines a formatted date value.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks if a date is between the minimum and maximum date.
     */
    isInValidRange(
      /**
       * A value to be checked
       */
      value: string
    ): void;
    /**
     * Checks if the picker is open.
     */
    isOpen(): void;
    /**
     * Checks if a value is valid against the current date format of the DatePicker.
     */
    isValid(
      /**
       * A value to be tested against the current date format
       */
      value: string
    ): void;
    /**
     * Opens the picker.
     */
    openPicker(): void;
    /**
     * Sets a new value for property {@link #getDelimiter delimiter}.
     *
     * Determines the symbol which separates the dates. If not supplied, the default time interval delimiter
     * for the current locale will be used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDelimiter(
      /**
       * New value for property `delimiter`
       */
      sDelimiter: string
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Determines whether the component is displayed as disabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFormatPattern(
      /**
       * New value for property `formatPattern`
       */
      sFormatPattern?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHideWeekNumbers hideWeekNumbers}.
     *
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * Note: For calendars other than Gregorian, the week numbers are not displayed regardless of what
     * is set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideWeekNumbers(
      /**
       * New value for property `hideWeekNumbers`
       */
      bHideWeekNumbers?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxDate maxDate}.
     *
     * Determines the maximum date available for selection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setMaxDate(
      /**
       * New value for property `maxDate`
       */
      sMaxDate?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMinDate minDate}.
     *
     * Determines the мinimum date available for selection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setMinDate(
      /**
       * New value for property `minDate`
       */
      sMinDate?: string
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryCalendarType primaryCalendarType}.
     *
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPrimaryCalendarType(
      /**
       * New value for property `primaryCalendarType`
       */
      sPrimaryCalendarType: CalendarType | keyof typeof CalendarType
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Determines whether the component is displayed as read-only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines a formatted date value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $DateRangePickerSettings extends $WebComponentSettings {
    /**
     * Determines the symbol which separates the dates. If not supplied, the default time interval delimiter
     * for the current locale will be used.
     */
    delimiter?: string | PropertyBindingInfo;

    /**
     * Determines whether the component is displayed as disabled.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Determines the format, displayed in the input field.
     */
    formatPattern?: string | PropertyBindingInfo;

    /**
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * Note: For calendars other than Gregorian, the week numbers are not displayed regardless of what
     * is set.
     */
    hideWeekNumbers?: boolean | PropertyBindingInfo;

    /**
     * Determines the maximum date available for selection.
     */
    maxDate?: string | PropertyBindingInfo;

    /**
     * Determines the мinimum date available for selection.
     */
    minDate?: string | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     */
    primaryCalendarType?:
      | (CalendarType | keyof typeof CalendarType)
      | PropertyBindingInfo;

    /**
     * Determines whether the component is displayed as read-only.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines a formatted date value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    change?: Function;

    /**
     * Fired when the value of the component is changed at each key stroke.
     */
    input?: Function;
  }
}

declare module "sap/ui/webc/main/DateTimePicker" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import CalendarType from "sap/ui/core/CalendarType";

  import { ValueState, CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The `DateTimePicker` component alows users to select both date (day, month and year) and time
   * (hours, minutes and seconds) and for the purpose it consists of input field and Date/Time picker.
   *
   * Usage:
   *
   * Use the `DateTimePicker` if you need a combined date and time input component. Don't use it if you want
   * to use either date, or time value. In this case, use the `DatePicker` or the `TimePicker` components
   * instead.
   *
   *  The user can set date/time by:
   * 	 - using the calendar and the time selectors
   * 	 - typing in the input field
   *
   * Programatically, to set date/time for the `DateTimePicker`, use the `value` property
   *
   *  As most of the input based components, the `DateTimePicker` supports properties, such as: `disabled`,
   * `readonly`, `valueState` and `placeholder`.
   *
   * Formatting:
   *
   * The value entered by typing into the input field must fit to the used date/time format.
   *
   *  Supported format options are pattern-based on Unicode LDML Date Format notation. For more information,
   * see UTS #35: Unicode Locale Data Markup Language.
   *
   *  **Example:** the following format `dd/MM/yyyy, hh:mm:ss aa` corresponds the `13/04/2020, 03:16:16 AM`
   * value.
   *  The small 'h' defines "12" hours format and the "aa" symbols - "AM/PM" time periods.
   *
   *
   *
   *  **Example:** the following format `dd/MM/yyyy, HH:mm:ss` corresponds the `13/04/2020, 15:16:16` value.
   *
   *  The capital 'H' indicates "24" hours format.
   *
   *
   *
   *  **Note:** If the `formatPattern` does NOT include time, the `DateTimePicker` will fallback to the default
   * time format according to the locale.
   *
   *
   *
   *  **Note:** If no placeholder is set to the `DateTimePicker`, the current `formatPattern` is displayed
   * as a placeholder. If another placeholder is needed, it must be set or in case no placeholder is needed
   * - it can be set to an empty string.
   *
   *
   *
   *  **Note:** If the user input does NOT match the `formatPattern`, the `DateTimePicker` makes an attempt
   * to parse it based on the locale settings.
   *
   * Responsive behavior:
   *
   * The `DateTimePicker` is responsive and fully adapts to all devices. For larger screens, such as tablet
   * or desktop, it is displayed as a popover, while on phone devices, it is displayed full screen.
   */
  export default class DateTimePicker extends WebComponent {
    /**
     * Constructor for a new `DateTimePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateTimePickerSettings
    );
    /**
     * Constructor for a new `DateTimePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateTimePickerSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.DateTimePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DateTimePicker` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DateTimePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.DateTimePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DateTimePicker` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DateTimePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.DateTimePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DateTimePicker` itself.
     *
     * Fired when the value of the component is changed at each key stroke.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DateTimePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.DateTimePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DateTimePicker` itself.
     *
     * Fired when the value of the component is changed at each key stroke.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DateTimePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the picker.
     */
    closePicker(): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.DateTimePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.DateTimePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.DateTimePicker with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTimePicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Formats a Java Script date object into a string representing a locale date according to the `formatPattern`
     * property of the DatePicker instance
     */
    formatValue(
      /**
       * A Java Script date object to be formatted as string
       */
      date: object
    ): void;
    /**
     * Returns the currently selected date represented as a Local JavaScript Date instance.
     */
    getDateValue(): void;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Determines whether the component is displayed as disabled.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * Default value is `empty string`.
     */
    getFormatPattern(): string;
    /**
     * Gets current value of property {@link #getHideWeekNumbers hideWeekNumbers}.
     *
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * Note: For calendars other than Gregorian, the week numbers are not displayed regardless of what
     * is set.
     *
     * Default value is `false`.
     */
    getHideWeekNumbers(): boolean;
    /**
     * Gets current value of property {@link #getMaxDate maxDate}.
     *
     * Determines the maximum date available for selection.
     *
     * Default value is `empty string`.
     */
    getMaxDate(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.DateTimePicker.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMinDate minDate}.
     *
     * Determines the мinimum date available for selection.
     *
     * Default value is `empty string`.
     */
    getMinDate(): string;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * Default value is `undefined`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getPrimaryCalendarType primaryCalendarType}.
     *
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     */
    getPrimaryCalendarType(): CalendarType | keyof typeof CalendarType;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Determines whether the component is displayed as read-only.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines a formatted date value.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks if a date is between the minimum and maximum date.
     */
    isInValidRange(
      /**
       * A value to be checked
       */
      value: string
    ): void;
    /**
     * Checks if the picker is open.
     */
    isOpen(): void;
    /**
     * Checks if a value is valid against the current date format of the DatePicker.
     */
    isValid(
      /**
       * A value to be tested against the current date format
       */
      value: string
    ): void;
    /**
     * Opens the picker.
     */
    openPicker(): void;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Determines whether the component is displayed as disabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFormatPattern(
      /**
       * New value for property `formatPattern`
       */
      sFormatPattern?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHideWeekNumbers hideWeekNumbers}.
     *
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * Note: For calendars other than Gregorian, the week numbers are not displayed regardless of what
     * is set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideWeekNumbers(
      /**
       * New value for property `hideWeekNumbers`
       */
      bHideWeekNumbers?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxDate maxDate}.
     *
     * Determines the maximum date available for selection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setMaxDate(
      /**
       * New value for property `maxDate`
       */
      sMaxDate?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMinDate minDate}.
     *
     * Determines the мinimum date available for selection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setMinDate(
      /**
       * New value for property `minDate`
       */
      sMinDate?: string
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryCalendarType primaryCalendarType}.
     *
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPrimaryCalendarType(
      /**
       * New value for property `primaryCalendarType`
       */
      sPrimaryCalendarType: CalendarType | keyof typeof CalendarType
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Determines whether the component is displayed as read-only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines a formatted date value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $DateTimePickerSettings extends $WebComponentSettings {
    /**
     * Determines whether the component is displayed as disabled.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Determines the format, displayed in the input field.
     */
    formatPattern?: string | PropertyBindingInfo;

    /**
     * Defines the visibility of the week numbers column.
     *
     *
     *
     * Note: For calendars other than Gregorian, the week numbers are not displayed regardless of what
     * is set.
     */
    hideWeekNumbers?: boolean | PropertyBindingInfo;

    /**
     * Determines the maximum date available for selection.
     */
    maxDate?: string | PropertyBindingInfo;

    /**
     * Determines the мinimum date available for selection.
     */
    minDate?: string | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.
     */
    primaryCalendarType?:
      | (CalendarType | keyof typeof CalendarType)
      | PropertyBindingInfo;

    /**
     * Determines whether the component is displayed as read-only.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines a formatted date value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    change?: Function;

    /**
     * Fired when the value of the component is changed at each key stroke.
     */
    input?: Function;
  }
}

declare module "sap/ui/webc/main/Dialog" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The `sap.ui.webc.main.Dialog` component is used to temporarily display some information in
   * a size-limited window in front of the regular app screen. It is used to prompt the user for an action
   * or a confirmation. The `sap.ui.webc.main.Dialog` interrupts the current app processing as it is the only
   * focused UI element and the main screen is dimmed/blocked. The dialog combines concepts known from other
   * technologies where the windows have names such as dialog box, dialog window, pop-up, pop-up window, alert
   * box, or message box.
   *
   *  The `sap.ui.webc.main.Dialog` is modal, which means that user action is required before returning to
   * the parent window is possible. The content of the `sap.ui.webc.main.Dialog` is fully customizable.
   *
   * Structure: A `sap.ui.webc.main.Dialog` consists of a header, content, and a footer for action buttons.
   * The `sap.ui.webc.main.Dialog` is usually displayed at the center of the screen. Its position can be changed
   * by the user. To enable this, you need to set the property `draggable` accordingly.
   *
   * Responsive Behavior: The `stretch` property can be used to stretch the `sap.ui.webc.main.Dialog` on full
   * screen.
   *
   * **Note:** We don't recommend nesting popup-like components (`sap.ui.webc.main.Dialog`, `sap.ui.webc.main.Popover`)
   * inside `sap.ui.webc.main.Dialog`. Ideally you should create all popups on the same level inside your
   * HTML page and just open them from one another, rather than nesting them.
   */
  export default class Dialog extends WebComponent {
    /**
     * Constructor for a new `Dialog`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DialogSettings
    );
    /**
     * Constructor for a new `Dialog`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DialogSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Adds some footer to the aggregation {@link #getFooter footer}.
     */
    addFooter(
      /**
       * The footer to add; if empty, nothing is inserted
       */
      oFooter: Control
    ): this;
    /**
     * Adds some header to the aggregation {@link #getHeader header}.
     */
    addHeader(
      /**
       * The header to add; if empty, nothing is inserted
       */
      oHeader: Control
    ): this;
    /**
     * Focuses the element denoted by `initialFocus`, if provided, or the first focusable element otherwise.
     */
    applyFocus(): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.ui.webc.main.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Dialog` itself.
     *
     * Fired after the component is closed. **This event does not bubble.**
     */
    attachAfterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.ui.webc.main.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Dialog` itself.
     *
     * Fired after the component is closed. **This event does not bubble.**
     */
    attachAfterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.ui.webc.main.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Dialog` itself.
     *
     * Fired after the component is opened. **This event does not bubble.**
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.ui.webc.main.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Dialog` itself.
     *
     * Fired after the component is opened. **This event does not bubble.**
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.ui.webc.main.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Dialog` itself.
     *
     * Fired before the component is closed. This event can be cancelled, which will prevent the popup from
     * closing. **This event does not bubble.**
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.ui.webc.main.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Dialog` itself.
     *
     * Fired before the component is closed. This event can be cancelled, which will prevent the popup from
     * closing. **This event does not bubble.**
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.ui.webc.main.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Dialog` itself.
     *
     * Fired before the component is opened. This event can be cancelled, which will prevent the popup from
     * opening. **This event does not bubble.**
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.ui.webc.main.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Dialog` itself.
     *
     * Fired before the component is opened. This event can be cancelled, which will prevent the popup from
     * opening. **This event does not bubble.**
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Hides the block layer (for modal popups only)
     */
    close(): void;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Destroys all the footer in the aggregation {@link #getFooter footer}.
     */
    destroyFooter(): this;
    /**
     * Destroys all the header in the aggregation {@link #getHeader header}.
     */
    destroyHeader(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterClose afterClose} event of this `sap.ui.webc.main.Dialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.ui.webc.main.Dialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.ui.webc.main.Dialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.ui.webc.main.Dialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Dialog with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Dialog>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterClose afterClose} to attached listeners.
     */
    fireAfterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Indicates that `ESC` key has triggered the event.
         */
        escPressed?: boolean;
      }
    ): boolean;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * Gets current value of property {@link #getAccessibleName accessibleName}.
     *
     * Defines the accessible name of the dialog when `header` slot is provided.
     *
     *
     *
     * **Note:** If `aria-label` is provided, `accessibleName` will be ignored.
     *
     * Default value is `empty string`.
     */
    getAccessibleName(): string;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Defines the content of the Popup.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getDraggable draggable}.
     *
     * Determines whether the component is draggable. If this property is set to true, the Dialog will be draggable
     * by its header.
     *
     *  **Note:** The component can be draggable only in desktop mode.
     *
     * Default value is `false`.
     */
    getDraggable(): boolean;
    /**
     * Gets content of aggregation {@link #getFooter footer}.
     *
     * Defines the footer HTML Element.
     */
    getFooter(): Control[];
    /**
     * Gets content of aggregation {@link #getHeader header}.
     *
     * Defines the header HTML Element.
     *
     *  **Note:** If `header` slot is provided, the labelling of the dialog is a responsibility of the application
     * developer. `accessibleName` should be used.
     */
    getHeader(): Control[];
    /**
     * Gets current value of property {@link #getHeaderText headerText}.
     *
     * Defines the header text.
     *
     *  **Note:** If `header` slot is provided, the `headerText` is ignored.
     *
     * Default value is `empty string`.
     */
    getHeaderText(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getInitialFocus initialFocus}.
     *
     * Defines the ID of the HTML Element, which will get the initial focus.
     *
     * Default value is `empty string`.
     */
    getInitialFocus(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Dialog.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getPreventFocusRestore preventFocusRestore}.
     *
     * Defines if the focus should be returned to the previously focused element, when the popup closes.
     *
     * Default value is `false`.
     */
    getPreventFocusRestore(): boolean;
    /**
     * Gets current value of property {@link #getResizable resizable}.
     *
     * Configures the component to be resizable. If this property is set to true, the Dialog will have a resize
     * handle in its bottom right corner in LTR languages. In RTL languages, the resize handle will be placed
     * in the bottom left corner.
     *
     *  **Note:** The component can be resizable only in desktop mode.
     *  **Note:** Upon resizing, externally defined height and width styling will be ignored.
     *
     * Default value is `false`.
     */
    getResizable(): boolean;
    /**
     * Gets current value of property {@link #getStretch stretch}.
     *
     * Determines whether the component should be stretched to fullscreen.
     *
     *  **Note:** The component will be stretched to approximately 90% of the viewport.
     *
     * Default value is `false`.
     */
    getStretch(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getFooter footer}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfFooter(
      /**
       * The footer whose index is looked for
       */
      oFooter: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getHeader header}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfHeader(
      /**
       * The header whose index is looked for
       */
      oHeader: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a footer into the aggregation {@link #getFooter footer}.
     */
    insertFooter(
      /**
       * The footer to insert; if empty, nothing is inserted
       */
      oFooter: Control,
      /**
       * The `0`-based index the footer should be inserted at; for a negative value of `iIndex`, the footer is
       * inserted at position 0; for a value greater than the current size of the aggregation, the footer is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a header into the aggregation {@link #getHeader header}.
     */
    insertHeader(
      /**
       * The header to insert; if empty, nothing is inserted
       */
      oHeader: Control,
      /**
       * The `0`-based index the header should be inserted at; for a negative value of `iIndex`, the header is
       * inserted at position 0; for a value greater than the current size of the aggregation, the header is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Tells if the component is opened
     */
    isOpen(): void;
    /**
     * Opens the dialog
     */
    open(
      /**
       * Prevents applying the focus inside the popup
       */
      preventInitialFocus: boolean
    ): void;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getFooter footer}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllFooter(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getHeader header}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeader(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Removes a footer from the aggregation {@link #getFooter footer}.
     */
    removeFooter(
      /**
       * The footer to remove or its index or id
       */
      vFooter: int | string | Control
    ): Control;
    /**
     * Removes a header from the aggregation {@link #getHeader header}.
     */
    removeHeader(
      /**
       * The header to remove or its index or id
       */
      vHeader: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getAccessibleName accessibleName}.
     *
     * Defines the accessible name of the dialog when `header` slot is provided.
     *
     *
     *
     * **Note:** If `aria-label` is provided, `accessibleName` will be ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAccessibleName(
      /**
       * New value for property `accessibleName`
       */
      sAccessibleName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDraggable draggable}.
     *
     * Determines whether the component is draggable. If this property is set to true, the Dialog will be draggable
     * by its header.
     *
     *  **Note:** The component can be draggable only in desktop mode.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDraggable(
      /**
       * New value for property `draggable`
       */
      bDraggable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderText headerText}.
     *
     * Defines the header text.
     *
     *  **Note:** If `header` slot is provided, the `headerText` is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeaderText(
      /**
       * New value for property `headerText`
       */
      sHeaderText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getInitialFocus initialFocus}.
     *
     * Defines the ID of the HTML Element, which will get the initial focus.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setInitialFocus(
      /**
       * New value for property `initialFocus`
       */
      sInitialFocus?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPreventFocusRestore preventFocusRestore}.
     *
     * Defines if the focus should be returned to the previously focused element, when the popup closes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setPreventFocusRestore(
      /**
       * New value for property `preventFocusRestore`
       */
      bPreventFocusRestore?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizable resizable}.
     *
     * Configures the component to be resizable. If this property is set to true, the Dialog will have a resize
     * handle in its bottom right corner in LTR languages. In RTL languages, the resize handle will be placed
     * in the bottom left corner.
     *
     *  **Note:** The component can be resizable only in desktop mode.
     *  **Note:** Upon resizing, externally defined height and width styling will be ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setResizable(
      /**
       * New value for property `resizable`
       */
      bResizable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getStretch stretch}.
     *
     * Determines whether the component should be stretched to fullscreen.
     *
     *  **Note:** The component will be stretched to approximately 90% of the viewport.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setStretch(
      /**
       * New value for property `stretch`
       */
      bStretch?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $DialogSettings extends $WebComponentSettings {
    /**
     * Defines the accessible name of the dialog when `header` slot is provided.
     *
     *
     *
     * **Note:** If `aria-label` is provided, `accessibleName` will be ignored.
     */
    accessibleName?: string | PropertyBindingInfo;

    /**
     * Determines whether the component is draggable. If this property is set to true, the Dialog will be draggable
     * by its header.
     *
     *  **Note:** The component can be draggable only in desktop mode.
     */
    draggable?: boolean | PropertyBindingInfo;

    /**
     * Defines the header text.
     *
     *  **Note:** If `header` slot is provided, the `headerText` is ignored.
     */
    headerText?: string | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the ID of the HTML Element, which will get the initial focus.
     */
    initialFocus?: string | PropertyBindingInfo;

    /**
     * Defines if the focus should be returned to the previously focused element, when the popup closes.
     */
    preventFocusRestore?: boolean | PropertyBindingInfo;

    /**
     * Configures the component to be resizable. If this property is set to true, the Dialog will have a resize
     * handle in its bottom right corner in LTR languages. In RTL languages, the resize handle will be placed
     * in the bottom left corner.
     *
     *  **Note:** The component can be resizable only in desktop mode.
     *  **Note:** Upon resizing, externally defined height and width styling will be ignored.
     */
    resizable?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the component should be stretched to fullscreen.
     *
     *  **Note:** The component will be stretched to approximately 90% of the viewport.
     */
    stretch?: boolean | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the content of the Popup.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the footer HTML Element.
     */
    footer?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the header HTML Element.
     *
     *  **Note:** If `header` slot is provided, the labelling of the dialog is a responsibility of the application
     * developer. `accessibleName` should be used.
     */
    header?: Control[] | Control | AggregationBindingInfo;

    /**
     * Fired after the component is closed. **This event does not bubble.**
     */
    afterClose?: Function;

    /**
     * Fired after the component is opened. **This event does not bubble.**
     */
    afterOpen?: Function;

    /**
     * Fired before the component is closed. This event can be cancelled, which will prevent the popup from
     * closing. **This event does not bubble.**
     */
    beforeClose?: Function;

    /**
     * Fired before the component is opened. This event can be cancelled, which will prevent the popup from
     * opening. **This event does not bubble.**
     */
    beforeOpen?: Function;
  }
}

declare module "sap/ui/webc/main/DurationPicker" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState, CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The `sap.ui.webc.main.DurationPicker` component provides an input field with assigned sliders
   * which opens on user action. The `sap.ui.webc.main.DurationPicker` allows users to select a time duration.
   * It consists of two parts: the time input field and the sliders.
   *
   * Usage:
   *
   * The Duration Picker is used for input of time. Users are able to select hours, minutes and seconds. The
   * user can enter a time by:
   * 	 - Using the sliders that opens in a popup
   * 	 - Typing it in directly in the input field
   *
   *  When the user makes an entry and chooses the enter key, the sliders shows the corresponding time. When
   * the user directly triggers the sliders display, the actual time is displayed.
   *
   * For the `sap.ui.webc.main.DurationPicker`
   *
   * Keyboard handling: [F4], [ALT]+[UP], [ALT]+[DOWN] Open/Close picker dialog and move focus to it.
   *  When closed:
   * 	 - [PAGEUP] - Increments hours by 1. If max value is reached, the slider doesn't increment.
   * 	 - [PAGEDOWN] - Decrements the corresponding field by 1. If min value is reached, the slider doesn't
   * 			increment.
   * 	 - [SHIFT]+[PAGEUP] Increments minutes by 1.
   * 	 - [SHIFT]+ [PAGEDOWN] Decrements minutes by 1.
   * 	 - [SHIFT]+[CTRL]+[PAGEUP] Increments seconds by 1.
   * 	 - [SHIFT]+[CTRL]+ [PAGEDOWN] Decrements seconds by 1.  When opened:
   * 	 - [UP] If focus is on one of the selection lists: Select the value which is above the current value.
   * 			If the first value is selected, select the last value in the list.
   * 	 - [DOWN] If focus is on one of the selection lists: Select the value which is below the current value.
   * 			If the last value is selected, select the first value in the list.
   * 	 - [LEFT] If focus is on one of the selection lists: Move focus to the selection list which is left
   * 			of the current selection list. If focus is at the first selection list, move focus to the last selection
   * 			list.
   * 	 - [RIGHT] If focus is on one of the selection lists: Move focus to the selection list which is right
   * 			of the current selection list. When focus is at the last selection list, move focus to the first selection
   * 			list.
   * 	 - [PAGEUP] If focus is on one of the selection lists: Move focus to the first entry of this list.
   * 	 - [PAGEDOWN] If focus is on one of the selection lists: Move focus to the last entry of this list.
   */
  export default class DurationPicker extends WebComponent {
    /**
     * Constructor for a new `DurationPicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DurationPickerSettings
    );
    /**
     * Constructor for a new `DurationPicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DurationPickerSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.DurationPicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DurationPicker` itself.
     *
     * Fired when the input operation has finished by clicking the "OK" button or when the text in the input
     * field has changed and the focus leaves the input field.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DurationPicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.DurationPicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DurationPicker` itself.
     *
     * Fired when the input operation has finished by clicking the "OK" button or when the text in the input
     * field has changed and the focus leaves the input field.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DurationPicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.DurationPicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DurationPicker` itself.
     *
     * Fired when the value of the `sap.ui.webc.main.TimePicker` is changed at each key stroke.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DurationPicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.DurationPicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.DurationPicker` itself.
     *
     * Fired when the value of the `sap.ui.webc.main.TimePicker` is changed at each key stroke.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.DurationPicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the picker
     */
    closePicker(): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.DurationPicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.DurationPicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.DurationPicker with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DurationPicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Formats a Java Script date object into a string representing a locale date and time according to the
     * `formatPattern` property of the TimePicker instance
     */
    formatValue(
      /**
       * A Java Script date object to be formatted as string
       */
      date: object
    ): void;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as disabled.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * Example: HH:mm:ss -> 11:42:35 hh:mm:ss a -> 2:23:15 PM mm:ss -> 12:04 (only minutes and seconds)
     *
     * Default value is `empty string`.
     */
    getFormatPattern(): string;
    /**
     * Gets current value of property {@link #getHideHours hideHours}.
     *
     * Defines whether the slider for hours will be available. By default there are sliders for hours, minutes
     * and seconds.
     *
     * Default value is `false`.
     */
    getHideHours(): boolean;
    /**
     * Gets current value of property {@link #getHideMinutes hideMinutes}.
     *
     * Defines whether the slider for minutes will be available. By default there are sliders for hours, minutes
     * and seconds.
     *
     * Default value is `false`.
     */
    getHideMinutes(): boolean;
    /**
     * Gets current value of property {@link #getHideSeconds hideSeconds}.
     *
     * Defines whether a slider for seconds will be available. By default there are sliders for hours, minutes
     * and seconds.
     *
     * Default value is `false`.
     */
    getHideSeconds(): boolean;
    /**
     * Gets current value of property {@link #getMaxValue maxValue}.
     *
     * Defines a formatted maximal time that the user will be able to adjust.
     *
     * Default value is `"23:59:59"`.
     */
    getMaxValue(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.DurationPicker.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMinutesStep minutesStep}.
     *
     * Defines the selection step for the minutes
     *
     * Default value is `1`.
     */
    getMinutesStep(): int;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * Default value is `undefined`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as readonly.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getSecondsStep secondsStep}.
     *
     * Defines the selection step for the seconds
     *
     * Default value is `1`.
     */
    getSecondsStep(): int;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines a formatted time value.
     *
     * Default value is `"00:00:00"`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the `sap.ui.webc.main.TimePicker`.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks if the picker is open
     */
    isOpen(): void;
    /**
     * Checks if a value is valid against the current `formatPattern` value.
     *
     *
     *
     *  **Note:** an empty string is considered as valid value.
     */
    isValid(
      /**
       * The value to be tested against the current date format
       */
      value: string
    ): void;
    /**
     * Opens the picker.
     */
    openPicker(): void;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as disabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * Example: HH:mm:ss -> 11:42:35 hh:mm:ss a -> 2:23:15 PM mm:ss -> 12:04 (only minutes and seconds)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFormatPattern(
      /**
       * New value for property `formatPattern`
       */
      sFormatPattern?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHideHours hideHours}.
     *
     * Defines whether the slider for hours will be available. By default there are sliders for hours, minutes
     * and seconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideHours(
      /**
       * New value for property `hideHours`
       */
      bHideHours?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideMinutes hideMinutes}.
     *
     * Defines whether the slider for minutes will be available. By default there are sliders for hours, minutes
     * and seconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideMinutes(
      /**
       * New value for property `hideMinutes`
       */
      bHideMinutes?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideSeconds hideSeconds}.
     *
     * Defines whether a slider for seconds will be available. By default there are sliders for hours, minutes
     * and seconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideSeconds(
      /**
       * New value for property `hideSeconds`
       */
      bHideSeconds?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxValue maxValue}.
     *
     * Defines a formatted maximal time that the user will be able to adjust.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"23:59:59"`.
     */
    setMaxValue(
      /**
       * New value for property `maxValue`
       */
      sMaxValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMinutesStep minutesStep}.
     *
     * Defines the selection step for the minutes
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setMinutesStep(
      /**
       * New value for property `minutesStep`
       */
      iMinutesStep?: int
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as readonly.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSecondsStep secondsStep}.
     *
     * Defines the selection step for the seconds
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setSecondsStep(
      /**
       * New value for property `secondsStep`
       */
      iSecondsStep?: int
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines a formatted time value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"00:00:00"`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the `sap.ui.webc.main.TimePicker`.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $DurationPickerSettings extends $WebComponentSettings {
    /**
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as disabled.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Determines the format, displayed in the input field.
     *
     * Example: HH:mm:ss -> 11:42:35 hh:mm:ss a -> 2:23:15 PM mm:ss -> 12:04 (only minutes and seconds)
     */
    formatPattern?: string | PropertyBindingInfo;

    /**
     * Defines whether the slider for hours will be available. By default there are sliders for hours, minutes
     * and seconds.
     */
    hideHours?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the slider for minutes will be available. By default there are sliders for hours, minutes
     * and seconds.
     */
    hideMinutes?: boolean | PropertyBindingInfo;

    /**
     * Defines whether a slider for seconds will be available. By default there are sliders for hours, minutes
     * and seconds.
     */
    hideSeconds?: boolean | PropertyBindingInfo;

    /**
     * Defines a formatted maximal time that the user will be able to adjust.
     */
    maxValue?: string | PropertyBindingInfo;

    /**
     * Defines the selection step for the minutes
     */
    minutesStep?: int | PropertyBindingInfo;

    /**
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as readonly.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines the selection step for the seconds
     */
    secondsStep?: int | PropertyBindingInfo;

    /**
     * Defines a formatted time value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the `sap.ui.webc.main.TimePicker`.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the input operation has finished by clicking the "OK" button or when the text in the input
     * field has changed and the focus leaves the input field.
     */
    change?: Function;

    /**
     * Fired when the value of the `sap.ui.webc.main.TimePicker` is changed at each key stroke.
     */
    input?: Function;
  }
}

declare module "sap/ui/webc/main/FileUploader" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState, CSSSize } from "sap/ui/core/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.FileUploader` opens a file explorer dialog and enables users to upload files. The
   * component consists of input field, but you can provide an HTML element by your choice to trigger the
   * file upload, by using the default slot. Furthermore, you can set the property "hideInput" to "true" to
   * hide the input field.
   *  To get all selected files, you can simply use the read-only "files" property. To restrict the types
   * of files the user can select, you can use the "accept" property.
   *  And, similar to all input based components, the FileUploader supports "valueState", "placeholder", "name",
   * and "disabled" properties.
   */
  export default class FileUploader extends WebComponent {
    /**
     * Constructor for a new `FileUploader`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FileUploaderSettings
    );
    /**
     * Constructor for a new `FileUploader`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FileUploaderSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.FileUploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.FileUploader` itself.
     *
     * Event is fired when the value of the file path has been changed. **Note:** Keep in mind that because
     * of the HTML input element of type file, the event is also fired in Chrome browser when the Cancel button
     * of the uploads window is pressed.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.FileUploader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.FileUploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.FileUploader` itself.
     *
     * Event is fired when the value of the file path has been changed. **Note:** Keep in mind that because
     * of the HTML input element of type file, the event is also fired in Chrome browser when the Cancel button
     * of the uploads window is pressed.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.FileUploader` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.FileUploader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.FileUploader with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FileUploader>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current files.
         */
        files?: FileList;
      }
    ): this;
    /**
     * Gets current value of property {@link #getAccept accept}.
     *
     * Comma-separated list of file types that the component should accept.
     *
     *  **Note:** Please make sure you are adding the `.` in front on the file type, e.g. `.png` in case you
     * want to accept png's only.
     *
     * Default value is `empty string`.
     */
    getAccept(): string;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * By default the component contains a single input field. With this slot you can pass any content that
     * you wish to add. See the samples for more information.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabledcomponent is completely noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Returns the fileList of all selected files.
     */
    getFiles(): void;
    /**
     * Gets current value of property {@link #getHideInput hideInput}.
     *
     * If set to "true", the input field of component will not be rendered. Only the default slot that is passed
     * will be rendered.
     *
     * Default value is `false`.
     */
    getHideInput(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.FileUploader.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMultiple multiple}.
     *
     * Allows multiple files to be chosen.
     *
     * Default value is `false`.
     */
    getMultiple(): boolean;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * Default value is `empty string`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the name/names of the file/files to upload.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getAccept accept}.
     *
     * Comma-separated list of file types that the component should accept.
     *
     *  **Note:** Please make sure you are adding the `.` in front on the file type, e.g. `.png` in case you
     * want to accept png's only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAccept(
      /**
       * New value for property `accept`
       */
      sAccept?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabledcomponent is completely noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideInput hideInput}.
     *
     * If set to "true", the input field of component will not be rendered. Only the default slot that is passed
     * will be rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideInput(
      /**
       * New value for property `hideInput`
       */
      bHideInput?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMultiple multiple}.
     *
     * Allows multiple files to be chosen.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setMultiple(
      /**
       * New value for property `multiple`
       */
      bMultiple?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the name/names of the file/files to upload.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $FileUploaderSettings extends $WebComponentSettings {
    /**
     * Comma-separated list of file types that the component should accept.
     *
     *  **Note:** Please make sure you are adding the `.` in front on the file type, e.g. `.png` in case you
     * want to accept png's only.
     */
    accept?: string | PropertyBindingInfo;

    /**
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabledcomponent is completely noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * If set to "true", the input field of component will not be rendered. Only the default slot that is passed
     * will be rendered.
     */
    hideInput?: boolean | PropertyBindingInfo;

    /**
     * Allows multiple files to be chosen.
     */
    multiple?: boolean | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Defines the name/names of the file/files to upload.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * By default the component contains a single input field. With this slot you can pass any content that
     * you wish to add. See the samples for more information.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Event is fired when the value of the file path has been changed. **Note:** Keep in mind that because
     * of the HTML input element of type file, the event is also fired in Chrome browser when the Cancel button
     * of the uploads window is pressed.
     */
    change?: Function;
  }
}

declare module "sap/ui/webc/main/GroupHeaderListItem" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IListItem } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * The `sap.ui.webc.main.GroupHeaderListItem` is a special list item, used only to separate other list items
   * into logical groups.
   */
  export default class GroupHeaderListItem
    extends WebComponent
    implements IListItem {
    __implements__sap_ui_webc_main_IListItem: boolean;
    /**
     * Constructor for a new `GroupHeaderListItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $GroupHeaderListItemSettings
    );
    /**
     * Constructor for a new `GroupHeaderListItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $GroupHeaderListItemSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.GroupHeaderListItem with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GroupHeaderListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. Note: If not provided a default text alternative will
     * be set, if present.
     *
     * Default value is `empty string`.
     */
    getAccessibleName(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.GroupHeaderListItem.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines the selected state of the `ListItem`.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. Note: If not provided a default text alternative will
     * be set, if present.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAccessibleName(
      /**
       * New value for property `accessibleName`
       */
      sAccessibleName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines the selected state of the `ListItem`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $GroupHeaderListItemSettings extends $WebComponentSettings {
    /**
     * Defines the text alternative of the component. Note: If not provided a default text alternative will
     * be set, if present.
     */
    accessibleName?: string | PropertyBindingInfo;

    /**
     * Defines the selected state of the `ListItem`.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/Icon" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IIcon } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Icon` component represents an SVG icon. There are two main scenarios how the `sap.ui.webc.main.Icon`
   * component is used: as a purely decorative element; or as a visually appealing clickable area in the form
   * of an icon button.
   *
   *  A large set of built-in icons is available and they can be used by setting the `name` property on the
   * `sap.ui.webc.main.Icon`. But before using an icon, you need to import the desired icon.
   *
   *
   *
   *
   *  Keyboard Handling:
   *
   *
   * 	 - [SPACE, ENTER, RETURN] - Fires the `click` event if the `interactive` property is set to true.
   * 	 - [SHIFT] - If [SPACE] or [ENTER],[RETURN] is pressed, pressing [SHIFT] releases the ui5-icon without
   * 			triggering the click event.
   */
  export default class Icon extends WebComponent implements IIcon {
    __implements__sap_ui_webc_main_IIcon: boolean;
    /**
     * Constructor for a new `Icon`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconSettings
    );
    /**
     * Constructor for a new `Icon`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.Icon`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Icon` itself.
     *
     * Fired when the user clicks the control
     */
    attachClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Icon` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.Icon`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Icon` itself.
     *
     * Fired when the user clicks the control
     */
    attachClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Icon` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.webc.main.Icon`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Icon with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Icon>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:click click} to attached listeners.
     */
    fireClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. If not provided a default text alternative will be set,
     * if present.
     *
     *  **Note:** Every icon should have a text alternative in order to calculate its accessible name.
     *
     * Default value is `empty string`.
     */
    getAccessibleName(): string;
    /**
     * Gets current value of property {@link #getBackgroundColor backgroundColor}.
     *
     * Defines the background color of the control
     */
    getBackgroundColor(): CSSSize;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Defines the color of the control
     */
    getColor(): CSSSize;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getInteractive interactive}.
     *
     * Defines if the icon is interactive (focusable and pressable)
     *
     * Default value is `false`.
     */
    getInteractive(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Icon.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Defines the unique identifier (icon name) of the component.
     *
     *
     * To browse all available icons, see the Icon Explorer.
     *
     *
     * Example:
     *  `name='add'`, `name='delete'`, `name='employee'`.
     *
     *
     *
     * **Note:** To use the SAP Fiori Tools icons, you need to set the `tnt` prefix in front of the icon's name.
     *
     *
     *
     * Example:
     *  `name='tnt/antenna'`, `name='tnt/actor'`, `name='tnt/api'`.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getShowTooltip showTooltip}.
     *
     * Defines whether the component should have a tooltip.
     *
     * Default value is `false`.
     */
    getShowTooltip(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. If not provided a default text alternative will be set,
     * if present.
     *
     *  **Note:** Every icon should have a text alternative in order to calculate its accessible name.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAccessibleName(
      /**
       * New value for property `accessibleName`
       */
      sAccessibleName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
     *
     * Defines the background color of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBackgroundColor(
      /**
       * New value for property `backgroundColor`
       */
      sBackgroundColor?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Defines the color of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getInteractive interactive}.
     *
     * Defines if the icon is interactive (focusable and pressable)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setInteractive(
      /**
       * New value for property `interactive`
       */
      bInteractive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Defines the unique identifier (icon name) of the component.
     *
     *
     * To browse all available icons, see the Icon Explorer.
     *
     *
     * Example:
     *  `name='add'`, `name='delete'`, `name='employee'`.
     *
     *
     *
     * **Note:** To use the SAP Fiori Tools icons, you need to set the `tnt` prefix in front of the icon's name.
     *
     *
     *
     * Example:
     *  `name='tnt/antenna'`, `name='tnt/actor'`, `name='tnt/api'`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowTooltip showTooltip}.
     *
     * Defines whether the component should have a tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowTooltip(
      /**
       * New value for property `showTooltip`
       */
      bShowTooltip?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $IconSettings extends $WebComponentSettings {
    /**
     * Defines the text alternative of the component. If not provided a default text alternative will be set,
     * if present.
     *
     *  **Note:** Every icon should have a text alternative in order to calculate its accessible name.
     */
    accessibleName?: string | PropertyBindingInfo;

    /**
     * Defines the background color of the control
     */
    backgroundColor?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the color of the control
     */
    color?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines if the icon is interactive (focusable and pressable)
     */
    interactive?: boolean | PropertyBindingInfo;

    /**
     * Defines the unique identifier (icon name) of the component.
     *
     *
     * To browse all available icons, see the Icon Explorer.
     *
     *
     * Example:
     *  `name='add'`, `name='delete'`, `name='employee'`.
     *
     *
     *
     * **Note:** To use the SAP Fiori Tools icons, you need to set the `tnt` prefix in front of the icon's name.
     *
     *
     *
     * Example:
     *  `name='tnt/antenna'`, `name='tnt/actor'`, `name='tnt/api'`.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines whether the component should have a tooltip.
     */
    showTooltip?: boolean | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the user clicks the control
     */
    click?: Function;
  }
}

declare module "sap/ui/webc/main/Input" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import {
    IInput,
    IInputSuggestionItem,
    IIcon,
    InputType,
  } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState } from "sap/ui/core/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Input` component allows the user to enter and edit text or numeric values in one
   * line.
   *  Additionally, you can provide `suggestionItems`, that are displayed in a popover right under the input.
   *
   *
   *  The text field can be editable or read-only (`readonly` property), and it can be enabled or disabled
   * (`enabled` property). To visualize semantic states, such as "error" or "warning", the `valueState` property
   * is provided. When the user makes changes to the text, the change event is fired, which enables you to
   * react on any text change.
   *
   *  **Note:** If you are using the `sap.ui.webc.main.Input` as a single npm module, don't forget to import
   * the `InputSuggestions` module from "@ui5/webcomponents/dist/features/InputSuggestions.js" to enable the
   * suggestions functionality.
   */
  export default class Input extends WebComponent implements IInput {
    __implements__sap_ui_webc_main_IInput: boolean;
    /**
     * Constructor for a new `Input`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $InputSettings
    );
    /**
     * Constructor for a new `Input`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $InputSettings
    );

    /**
     * Adds some suggestionItem to the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    addSuggestionItem(
      /**
       * The suggestionItem to add; if empty, nothing is inserted
       */
      oSuggestionItem: IInputSuggestionItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when the value of the component changes at each keystroke, and when a suggestion item has been
     * selected.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when the value of the component changes at each keystroke, and when a suggestion item has been
     * selected.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemPreview suggestionItemPreview}
     * event of this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when the user navigates to a suggestion item via the ARROW keys, as a preview, before the final
     * selection.
     */
    attachSuggestionItemPreview(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemPreview suggestionItemPreview}
     * event of this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when the user navigates to a suggestion item via the ARROW keys, as a preview, before the final
     * selection.
     */
    attachSuggestionItemPreview(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelect suggestionItemSelect} event
     * of this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when a suggestion item, that is displayed in the suggestion popup, is selected.
     */
    attachSuggestionItemSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelect suggestionItemSelect} event
     * of this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when a suggestion item, that is displayed in the suggestion popup, is selected.
     */
    attachSuggestionItemSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionScroll suggestionScroll} event of
     * this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when the user scrolls the suggestion popover.
     */
    attachSuggestionScroll(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionScroll suggestionScroll} event of
     * this `sap.ui.webc.main.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Input` itself.
     *
     * Fired when the user scrolls the suggestion popover.
     */
    attachSuggestionScroll(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the icon in the aggregation {@link #getIcon icon}.
     */
    destroyIcon(): this;
    /**
     * Destroys all the suggestionItems in the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    destroySuggestionItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:suggestionItemPreview suggestionItemPreview}
     * event of this `sap.ui.webc.main.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSuggestionItemPreview(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:suggestionItemSelect suggestionItemSelect}
     * event of this `sap.ui.webc.main.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSuggestionItemSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:suggestionScroll suggestionScroll} event of
     * this `sap.ui.webc.main.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSuggestionScroll(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Input with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Input>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:suggestionItemPreview suggestionItemPreview} to attached listeners.
     */
    fireSuggestionItemPreview(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The previewed suggestion item
         */
        item?: HTMLElement;
        /**
         * The DOM ref of the suggestion item.
         */
        targetRef?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:suggestionItemSelect suggestionItemSelect} to attached listeners.
     */
    fireSuggestionItemSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected item
         */
        item?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:suggestionScroll suggestionScroll} to attached listeners.
     */
    fireSuggestionScroll(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current scroll position
         */
        scrollTop?: int;
        /**
         * The scroll container
         */
        scrollContainer?: HTMLElement;
      }
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets content of aggregation {@link #getIcon icon}.
     *
     * Defines the icon to be displayed in the component.
     */
    getIcon(): IIcon;
    /**
     * Gets current value of property {@link #getMaxlength maxlength}.
     *
     * Sets the maximum number of characters available in the input field.
     */
    getMaxlength(): int;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Input.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * Default value is `empty string`.
     */
    getPlaceholder(): string;
    /**
     * Returns the the suggestion item on preview.
     */
    getPreviewItem(): void;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getShowSuggestions showSuggestions}.
     *
     * Defines whether the component should show suggestions, if such are present.
     *
     *  **Note:** Don`t forget to import the `InputSuggestions` module from `"@ui5/webcomponents/dist/features/InputSuggestions.js"`
     * to enable this functionality.
     *
     * Default value is `false`.
     */
    getShowSuggestions(): boolean;
    /**
     * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
     */
    getSuggestionItems(): IInputSuggestionItem[];
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the HTML type of the component. Available options are: `Text`, `Email`, `Number`, `Password`,
     * `Tel`, and `URL`.
     *
     *  **Notes:**
     * 	 - The particular effect of this property differs depending on the browser and the current language
     * 			settings, especially for type `Number`.
     * 	 - The property is mostly intended to be used with touch devices that use different soft keyboard layouts
     * 			depending on the given input type.
     *
     * Default value is `Text`.
     */
    getType(): InputType | keyof typeof InputType;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the component.
     *
     *  **Note:** The property is updated upon typing.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Checks for the provided `sap.ui.webc.main.IInputSuggestionItem` in the aggregation {@link #getSuggestionItems
     * suggestionItems}. and returns its index if found or -1 otherwise.
     */
    indexOfSuggestionItem(
      /**
       * The suggestionItem whose index is looked for
       */
      oSuggestionItem: IInputSuggestionItem
    ): int;
    /**
     * Inserts a suggestionItem into the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    insertSuggestionItem(
      /**
       * The suggestionItem to insert; if empty, nothing is inserted
       */
      oSuggestionItem: IInputSuggestionItem,
      /**
       * The `0`-based index the suggestionItem should be inserted at; for a negative value of `iIndex`, the suggestionItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSuggestionItems(): IInputSuggestionItem[];
    /**
     * Removes a suggestionItem from the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    removeSuggestionItem(
      /**
       * The suggestionItem to remove or its index or id
       */
      vSuggestionItem: int | string | IInputSuggestionItem
    ): IInputSuggestionItem;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getIcon icon}.
     */
    setIcon(
      /**
       * The icon to set
       */
      oIcon: IIcon
    ): this;
    /**
     * Sets a new value for property {@link #getMaxlength maxlength}.
     *
     * Sets the maximum number of characters available in the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxlength(
      /**
       * New value for property `maxlength`
       */
      iMaxlength: int
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSuggestions showSuggestions}.
     *
     * Defines whether the component should show suggestions, if such are present.
     *
     *  **Note:** Don`t forget to import the `InputSuggestions` module from `"@ui5/webcomponents/dist/features/InputSuggestions.js"`
     * to enable this functionality.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowSuggestions(
      /**
       * New value for property `showSuggestions`
       */
      bShowSuggestions?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the HTML type of the component. Available options are: `Text`, `Email`, `Number`, `Password`,
     * `Tel`, and `URL`.
     *
     *  **Notes:**
     * 	 - The particular effect of this property differs depending on the browser and the current language
     * 			settings, especially for type `Number`.
     * 	 - The property is mostly intended to be used with touch devices that use different soft keyboard layouts
     * 			depending on the given input type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Text`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: InputType | keyof typeof InputType
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the value of the component.
     *
     *  **Note:** The property is updated upon typing.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
  }

  export interface $InputSettings extends $WebComponentSettings {
    /**
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Sets the maximum number of characters available in the input field.
     */
    maxlength?: int | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component should show suggestions, if such are present.
     *
     *  **Note:** Don`t forget to import the `InputSuggestions` module from `"@ui5/webcomponents/dist/features/InputSuggestions.js"`
     * to enable this functionality.
     */
    showSuggestions?: boolean | PropertyBindingInfo;

    /**
     * Defines the HTML type of the component. Available options are: `Text`, `Email`, `Number`, `Password`,
     * `Tel`, and `URL`.
     *
     *  **Notes:**
     * 	 - The particular effect of this property differs depending on the browser and the current language
     * 			settings, especially for type `Number`.
     * 	 - The property is mostly intended to be used with touch devices that use different soft keyboard layouts
     * 			depending on the given input type.
     */
    type?: (InputType | keyof typeof InputType) | PropertyBindingInfo;

    /**
     * Defines the value of the component.
     *
     *  **Note:** The property is updated upon typing.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed in the component.
     */
    icon?: IIcon;

    suggestionItems?:
      | IInputSuggestionItem[]
      | IInputSuggestionItem
      | AggregationBindingInfo;

    /**
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    change?: Function;

    /**
     * Fired when the value of the component changes at each keystroke, and when a suggestion item has been
     * selected.
     */
    input?: Function;

    /**
     * Fired when the user navigates to a suggestion item via the ARROW keys, as a preview, before the final
     * selection.
     */
    suggestionItemPreview?: Function;

    /**
     * Fired when a suggestion item, that is displayed in the suggestion popup, is selected.
     */
    suggestionItemSelect?: Function;

    /**
     * Fired when the user scrolls the suggestion popover.
     */
    suggestionScroll?: Function;
  }
}

declare module "sap/ui/webc/main/Label" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { CSSSize } from "sap/ui/core/library";

  import { WrappingType } from "sap/ui/webc/main/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Label` is a component used to represent a label, providing valuable information
   * to the user. Usually it is placed next to a value holder, such as a text field. It informs the user about
   * what data is displayed or expected in the value holder.
   *
   *  The `sap.ui.webc.main.Label` appearance can be influenced by properties, such as `required` and `wrappingType`.
   * The appearance of the Label can be configured in a limited way by using the design property. For a broader
   * choice of designs, you can use custom styles.
   */
  export default class Label extends WebComponent {
    /**
     * Constructor for a new `Label`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $LabelSettings
    );
    /**
     * Constructor for a new `Label`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $LabelSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.Label with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Label>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getFor for}.
     *
     * Defines the labeled input by providing its ID.
     *
     *  **Note:** Can be used with both `sap.ui.webc.main.Input` and native input.
     *
     * Default value is `empty string`.
     */
    getFor(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Label.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether an asterisk character is added to the component text.
     *
     *  **Note:** Usually indicates that user input is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getShowColon showColon}.
     *
     * Defines whether semi-colon is added to the component text.
     *
     *  **Note:** Usually used in forms.
     *
     * Default value is `false`.
     */
    getShowColon(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getWrappingType wrappingType}.
     *
     * Defines how the text of a component will be displayed when there is not enough space. Available options
     * are:
     * 	 - `None` - The text will be truncated with an ellipsis.
     * 	 - `Normal` - The text will wrap. The words will not be broken based on hyphenation.
     *
     * Default value is `None`.
     */
    getWrappingType(): WrappingType | keyof typeof WrappingType;
    /**
     * Sets a new value for property {@link #getFor for}.
     *
     * Defines the labeled input by providing its ID.
     *
     *  **Note:** Can be used with both `sap.ui.webc.main.Input` and native input.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFor(
      /**
       * New value for property `for`
       */
      sFor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether an asterisk character is added to the component text.
     *
     *  **Note:** Usually indicates that user input is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowColon showColon}.
     *
     * Defines whether semi-colon is added to the component text.
     *
     *  **Note:** Usually used in forms.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowColon(
      /**
       * New value for property `showColon`
       */
      bShowColon?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWrappingType wrappingType}.
     *
     * Defines how the text of a component will be displayed when there is not enough space. Available options
     * are:
     * 	 - `None` - The text will be truncated with an ellipsis.
     * 	 - `Normal` - The text will wrap. The words will not be broken based on hyphenation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setWrappingType(
      /**
       * New value for property `wrappingType`
       */
      sWrappingType?: WrappingType | keyof typeof WrappingType
    ): this;
  }

  export interface $LabelSettings extends $WebComponentSettings {
    /**
     * Defines the labeled input by providing its ID.
     *
     *  **Note:** Can be used with both `sap.ui.webc.main.Input` and native input.
     */
    for?: string | PropertyBindingInfo;

    /**
     * Defines whether an asterisk character is added to the component text.
     *
     *  **Note:** Usually indicates that user input is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines whether semi-colon is added to the component text.
     *
     *  **Note:** Usually used in forms.
     */
    showColon?: boolean | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines how the text of a component will be displayed when there is not enough space. Available options
     * are:
     * 	 - `None` - The text will be truncated with an ellipsis.
     * 	 - `Normal` - The text will wrap. The words will not be broken based on hyphenation.
     */
    wrappingType?:
      | (WrappingType | keyof typeof WrappingType)
      | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/Link" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import { LinkDesign, WrappingType } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The `sap.ui.webc.main.Link` is a hyperlink component that is used to navigate to other apps
   * and web pages, or to trigger actions. It is a clickable text element, visualized in such a way that it
   * stands out from the standard text. On hover, it changes its style to an underlined text to provide additional
   * feedback to the user.
   *
   * Usage:
   *
   * You can set the `sap.ui.webc.main.Link` to be enabled or disabled.
   *
   *  To create a visual hierarchy in large lists of links, you can set the less important links as `Subtle`
   * or the more important ones as `Emphasized`, by using the `design` property.
   *
   *  If the `href` property is set, the link behaves as the HTML anchor tag (`<a><a/>`) and
   * opens the specified URL in the given target frame (`target` property). To specify where the linked content
   * is opened, you can use the `target` property.
   *
   * Responsive behavior:
   *
   * If there is not enough space, the text of the `sap.ui.webc.main.Link` becomes truncated. If the `wrappingType`
   * property is set to `"Normal"`, the text is displayed on several lines instead of being truncated.
   */
  export default class Link extends WebComponent {
    /**
     * Constructor for a new `Link`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $LinkSettings
    );
    /**
     * Constructor for a new `Link`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $LinkSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.Link`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Link` itself.
     *
     * Fired when the component is triggered either with a mouse/tap or by using the Enter key.
     */
    attachClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Link` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.Link`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Link` itself.
     *
     * Fired when the component is triggered either with a mouse/tap or by using the Enter key.
     */
    attachClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Link` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.webc.main.Link`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Link with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Link>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:click click} to attached listeners.
     */
    fireClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Defines the component design.
     *
     *  **Note:** Avaialble options are `Default`, `Subtle`, and `Emphasized`.
     *
     * Default value is `Default`.
     */
    getDesign(): LinkDesign | keyof typeof LinkDesign;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled.
     *
     *  **Note:** When disabled, the component cannot be triggered by the user.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getHref href}.
     *
     * Defines the component href.
     *
     *  **Note:** Standard hyperlink behavior is supported.
     *
     * Default value is `empty string`.
     */
    getHref(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Link.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getTarget target}.
     *
     * Defines the component target.
     *
     *  **Notes:**
     *
     *
     * 	 - `_self`
     * 	 - `_top`
     * 	 - `_blank`
     * 	 - `_parent`
     * 	 - `_search`
     *
     * **This property must only be used when the `href` property is set.**
     *
     * Default value is `empty string`.
     */
    getTarget(): string;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getWrappingType wrappingType}.
     *
     * Defines how the text of a component will be displayed when there is not enough space. Available options
     * are:
     * 	 - `None` - The text will be truncated with an ellipsis.
     * 	 - `Normal` - The text will wrap. The words will not be broken based on hyphenation.
     *
     * Default value is `None`.
     */
    getWrappingType(): WrappingType | keyof typeof WrappingType;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Defines the component design.
     *
     *  **Note:** Avaialble options are `Default`, `Subtle`, and `Emphasized`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: LinkDesign | keyof typeof LinkDesign
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled.
     *
     *  **Note:** When disabled, the component cannot be triggered by the user.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHref href}.
     *
     * Defines the component href.
     *
     *  **Note:** Standard hyperlink behavior is supported.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHref(
      /**
       * New value for property `href`
       */
      sHref?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTarget target}.
     *
     * Defines the component target.
     *
     *  **Notes:**
     *
     *
     * 	 - `_self`
     * 	 - `_top`
     * 	 - `_blank`
     * 	 - `_parent`
     * 	 - `_search`
     *
     * **This property must only be used when the `href` property is set.**
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTarget(
      /**
       * New value for property `target`
       */
      sTarget?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWrappingType wrappingType}.
     *
     * Defines how the text of a component will be displayed when there is not enough space. Available options
     * are:
     * 	 - `None` - The text will be truncated with an ellipsis.
     * 	 - `Normal` - The text will wrap. The words will not be broken based on hyphenation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setWrappingType(
      /**
       * New value for property `wrappingType`
       */
      sWrappingType?: WrappingType | keyof typeof WrappingType
    ): this;
  }

  export interface $LinkSettings extends $WebComponentSettings {
    /**
     * Defines the component design.
     *
     *  **Note:** Avaialble options are `Default`, `Subtle`, and `Emphasized`.
     */
    design?: (LinkDesign | keyof typeof LinkDesign) | PropertyBindingInfo;

    /**
     * Defines whether the component is disabled.
     *
     *  **Note:** When disabled, the component cannot be triggered by the user.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the component href.
     *
     *  **Note:** Standard hyperlink behavior is supported.
     */
    href?: string | PropertyBindingInfo;

    /**
     * Defines the component target.
     *
     *  **Notes:**
     *
     *
     * 	 - `_self`
     * 	 - `_top`
     * 	 - `_blank`
     * 	 - `_parent`
     * 	 - `_search`
     *
     * **This property must only be used when the `href` property is set.**
     */
    target?: string | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines how the text of a component will be displayed when there is not enough space. Available options
     * are:
     * 	 - `None` - The text will be truncated with an ellipsis.
     * 	 - `Normal` - The text will wrap. The words will not be broken based on hyphenation.
     */
    wrappingType?:
      | (WrappingType | keyof typeof WrappingType)
      | PropertyBindingInfo;

    /**
     * Fired when the component is triggered either with a mouse/tap or by using the Enter key.
     */
    click?: Function;
  }
}

declare module "sap/ui/webc/main/List" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import {
    IListItem,
    ListGrowingMode,
    ListMode,
    ListSeparators,
  } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.List` component allows displaying a list of items, advanced keyboard handling support
   * for navigating between items, and predefined modes to improve the development efficiency.
   *
   *  The `sap.ui.webc.main.List` is а container for the available list items:
   * 	 - `sap.ui.webc.main.StandardListItem`
   * 	 - `sap.ui.webc.main.CustomListItem`
   * 	 - `sap.ui.webc.main.GroupHeaderListItem`
   *
   *  To benefit from the built-in selection mechanism, you can use the available selection modes, such as
   * `SingleSelect`, `MultiSelect` and `Delete`.
   *
   *  Additionally, the `sap.ui.webc.main.List` provides header, footer, and customization for the list item
   * separators.
   *
   *
   *
   *  Keyboard Handling: The `sap.ui.webc.main.List` provides advanced keyboard handling. When a list is focused
   * the user can use the following keyboard shortcuts in order to perform a navigation:
   *
   *
   *
   * 	 - [UP/DOWN] - Navigates up and down the items
   * 	 - [HOME] - Navigates to first item
   * 	 - [END] - Navigates to the last item
   *
   * The user can use the following keyboard shortcuts to perform actions (such as select, delete), when the
   * `mode` property is in use:
   * 	 - [SPACE] - Select an item (if `type` is 'Active') when `mode` is selection
   * 	 - [DELETE] - Delete an item if `mode` property is `Delete`
   */
  export default class List extends WebComponent {
    /**
     * Constructor for a new `List`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ListSettings
    );
    /**
     * Constructor for a new `List`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ListSettings
    );

    /**
     * Adds some header to the aggregation {@link #getHeader header}.
     */
    addHeader(
      /**
       * The header to add; if empty, nothing is inserted
       */
      oHeader: Control
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: IListItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemClick itemClick} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when an item is activated, unless the item's `type` property is set to `Inactive`.
     */
    attachItemClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemClick itemClick} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when an item is activated, unless the item's `type` property is set to `Inactive`.
     */
    attachItemClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemClose itemClose} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when the `Close` button of any item is clicked
     *
     *  **Note:** This event is applicable to `sap.ui.webc.fiori.NotificationListItem` items only, not to be
     * confused with `item-delete`.
     */
    attachItemClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemClose itemClose} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when the `Close` button of any item is clicked
     *
     *  **Note:** This event is applicable to `sap.ui.webc.fiori.NotificationListItem` items only, not to be
     * confused with `item-delete`.
     */
    attachItemClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemDelete itemDelete} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when the Delete button of any item is pressed.
     *
     *  **Note:** A Delete button is displayed on each item, when the component `mode` property is set to `Delete`.
     */
    attachItemDelete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemDelete itemDelete} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when the Delete button of any item is pressed.
     *
     *  **Note:** A Delete button is displayed on each item, when the component `mode` property is set to `Delete`.
     */
    attachItemDelete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemToggle itemToggle} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when the `Toggle` button of any item is clicked.
     *
     *  **Note:** This event is applicable to `sap.ui.webc.fiori.NotificationListGroupItem` items only.
     */
    attachItemToggle(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemToggle itemToggle} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when the `Toggle` button of any item is clicked.
     *
     *  **Note:** This event is applicable to `sap.ui.webc.fiori.NotificationListGroupItem` items only.
     */
    attachItemToggle(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loadMore loadMore} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when the user scrolls to the bottom of the list.
     *
     *  **Note:** The event is fired when the `growing='Scroll'` property is enabled.
     */
    attachLoadMore(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loadMore loadMore} event of this `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when the user scrolls to the bottom of the list.
     *
     *  **Note:** The event is fired when the `growing='Scroll'` property is enabled.
     */
    attachLoadMore(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when selection is changed by user interaction in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`
     * and `MultiSelect` modes.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.List`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.List` itself.
     *
     * Fired when selection is changed by user interaction in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`
     * and `MultiSelect` modes.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.List` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the header in the aggregation {@link #getHeader header}.
     */
    destroyHeader(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemClick itemClick} event of this `sap.ui.webc.main.List`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemClose itemClose} event of this `sap.ui.webc.main.List`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemDelete itemDelete} event of this `sap.ui.webc.main.List`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemDelete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemToggle itemToggle} event of this `sap.ui.webc.main.List`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemToggle(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:loadMore loadMore} event of this `sap.ui.webc.main.List`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLoadMore(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.ui.webc.main.List`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.List with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, List>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:itemClick itemClick} to attached listeners.
     */
    fireItemClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The clicked item.
         */
        item?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:itemClose itemClose} to attached listeners.
     */
    fireItemClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the item about to be closed.
         */
        item?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:itemDelete itemDelete} to attached listeners.
     */
    fireItemDelete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the deleted item.
         */
        item?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:itemToggle itemToggle} to attached listeners.
     */
    fireItemToggle(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the toggled item.
         */
        item?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:loadMore loadMore} to attached listeners.
     */
    fireLoadMore(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * An array of the selected items.
         */
        selectedItems?: any[];
        /**
         * An array of the previously selected items.
         */
        previouslySelectedItems?: any[];
      }
    ): this;
    /**
     * Gets current value of property {@link #getBusy busy}.
     *
     * Defines if the component would display a loading indicator over the list.
     *
     * Default value is `false`.
     */
    getBusy(): boolean;
    /**
     * Gets current value of property {@link #getFooterText footerText}.
     *
     * Defines the footer text.
     *
     * Default value is `empty string`.
     */
    getFooterText(): string;
    /**
     * Gets current value of property {@link #getGrowing growing}.
     *
     * Defines whether the component will have growing capability either by pressing a `More` button, or via
     * user scroll. In both cases `load-more` event is fired.
     *
     *
     *
     * Available options:
     *
     *  `Button` - Shows a `More` button at the bottom of the list, pressing of which triggers the `load-more`
     * event.
     *  `Scroll` - The `load-more` event is triggered when the user scrolls to the bottom of the list;
     *  `None` (default) - The growing is off.
     *
     *
     *
     * **Limitations:** `growing="Scroll"` is not supported for Internet Explorer, on IE the component will
     * fallback to `growing="Button"`.
     *
     * Default value is `None`.
     */
    getGrowing(): ListGrowingMode;
    /**
     * Gets content of aggregation {@link #getHeader header}.
     *
     * Defines the component header.
     *
     *  **Note:** When `header` is set, the `headerText` property is ignored.
     */
    getHeader(): Control[];
    /**
     * Gets current value of property {@link #getHeaderText headerText}.
     *
     * Defines the component header text.
     *
     *  **Note:** If `header` is set this property is ignored.
     *
     * Default value is `empty string`.
     */
    getHeaderText(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getIndent indent}.
     *
     * Determines whether the list items are indented.
     *
     * Default value is `false`.
     */
    getIndent(): boolean;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the items of the component.
     *
     *  **Note:** Use `sap.ui.webc.main.StandardListItem`, `sap.ui.webc.main.CustomListItem`, and `sap.ui.webc.main.GroupHeaderListItem`
     * for the intended design.
     */
    getItems(): IListItem[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.List.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Defines the mode of the component.
     *
     *  **Note:** Available options are `None`, `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`, `MultiSelect`,
     * and `Delete`.
     *
     * Default value is `None`.
     */
    getMode(): ListMode | keyof typeof ListMode;
    /**
     * Gets current value of property {@link #getNoDataText noDataText}.
     *
     * Defines the text that is displayed when the component contains no items.
     *
     * Default value is `empty string`.
     */
    getNoDataText(): string;
    /**
     * Gets current value of property {@link #getSeparators separators}.
     *
     * Defines the item separator style that is used.
     *
     *  **Notes:**
     * 	 - Avalaible options are `All`, `Inner`, and `None`.
     * 	 - When set to `None`, none of the items are separated by horizontal lines.
     * 	 - When set to `Inner`, the first item doesn't have a top separator and the last item doesn't have a
     * 			bottom separator.
     *
     * Default value is `All`.
     */
    getSeparators(): ListSeparators | keyof typeof ListSeparators;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getHeader header}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfHeader(
      /**
       * The header whose index is looked for
       */
      oHeader: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.webc.main.IListItem` in the aggregation {@link #getItems items}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: IListItem
    ): int;
    /**
     * Inserts a header into the aggregation {@link #getHeader header}.
     */
    insertHeader(
      /**
       * The header to insert; if empty, nothing is inserted
       */
      oHeader: Control,
      /**
       * The `0`-based index the header should be inserted at; for a negative value of `iIndex`, the header is
       * inserted at position 0; for a value greater than the current size of the aggregation, the header is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: IListItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getHeader header}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeader(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): IListItem[];
    /**
     * Removes a header from the aggregation {@link #getHeader header}.
     */
    removeHeader(
      /**
       * The header to remove or its index or id
       */
      vHeader: int | string | Control
    ): Control;
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | IListItem
    ): IListItem;
    /**
     * Sets a new value for property {@link #getBusy busy}.
     *
     * Defines if the component would display a loading indicator over the list.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setBusy(
      /**
       * New value for property `busy`
       */
      bBusy?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFooterText footerText}.
     *
     * Defines the footer text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFooterText(
      /**
       * New value for property `footerText`
       */
      sFooterText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getGrowing growing}.
     *
     * Defines whether the component will have growing capability either by pressing a `More` button, or via
     * user scroll. In both cases `load-more` event is fired.
     *
     *
     *
     * Available options:
     *
     *  `Button` - Shows a `More` button at the bottom of the list, pressing of which triggers the `load-more`
     * event.
     *  `Scroll` - The `load-more` event is triggered when the user scrolls to the bottom of the list;
     *  `None` (default) - The growing is off.
     *
     *
     *
     * **Limitations:** `growing="Scroll"` is not supported for Internet Explorer, on IE the component will
     * fallback to `growing="Button"`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setGrowing(
      /**
       * New value for property `growing`
       */
      sGrowing?: ListGrowingMode
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderText headerText}.
     *
     * Defines the component header text.
     *
     *  **Note:** If `header` is set this property is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeaderText(
      /**
       * New value for property `headerText`
       */
      sHeaderText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getIndent indent}.
     *
     * Determines whether the list items are indented.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setIndent(
      /**
       * New value for property `indent`
       */
      bIndent?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Defines the mode of the component.
     *
     *  **Note:** Available options are `None`, `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`, `MultiSelect`,
     * and `Delete`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: ListMode | keyof typeof ListMode
    ): this;
    /**
     * Sets a new value for property {@link #getNoDataText noDataText}.
     *
     * Defines the text that is displayed when the component contains no items.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setNoDataText(
      /**
       * New value for property `noDataText`
       */
      sNoDataText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSeparators separators}.
     *
     * Defines the item separator style that is used.
     *
     *  **Notes:**
     * 	 - Avalaible options are `All`, `Inner`, and `None`.
     * 	 - When set to `None`, none of the items are separated by horizontal lines.
     * 	 - When set to `Inner`, the first item doesn't have a top separator and the last item doesn't have a
     * 			bottom separator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `All`.
     */
    setSeparators(
      /**
       * New value for property `separators`
       */
      sSeparators?: ListSeparators | keyof typeof ListSeparators
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $ListSettings extends $WebComponentSettings {
    /**
     * Defines if the component would display a loading indicator over the list.
     */
    busy?: boolean | PropertyBindingInfo;

    /**
     * Defines the footer text.
     */
    footerText?: string | PropertyBindingInfo;

    /**
     * Defines whether the component will have growing capability either by pressing a `More` button, or via
     * user scroll. In both cases `load-more` event is fired.
     *
     *
     *
     * Available options:
     *
     *  `Button` - Shows a `More` button at the bottom of the list, pressing of which triggers the `load-more`
     * event.
     *  `Scroll` - The `load-more` event is triggered when the user scrolls to the bottom of the list;
     *  `None` (default) - The growing is off.
     *
     *
     *
     * **Limitations:** `growing="Scroll"` is not supported for Internet Explorer, on IE the component will
     * fallback to `growing="Button"`.
     */
    growing?: ListGrowingMode | PropertyBindingInfo;

    /**
     * Defines the component header text.
     *
     *  **Note:** If `header` is set this property is ignored.
     */
    headerText?: string | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Determines whether the list items are indented.
     */
    indent?: boolean | PropertyBindingInfo;

    /**
     * Defines the mode of the component.
     *
     *  **Note:** Available options are `None`, `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`, `MultiSelect`,
     * and `Delete`.
     */
    mode?: (ListMode | keyof typeof ListMode) | PropertyBindingInfo;

    /**
     * Defines the text that is displayed when the component contains no items.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * Defines the item separator style that is used.
     *
     *  **Notes:**
     * 	 - Avalaible options are `All`, `Inner`, and `None`.
     * 	 - When set to `None`, none of the items are separated by horizontal lines.
     * 	 - When set to `Inner`, the first item doesn't have a top separator and the last item doesn't have a
     * 			bottom separator.
     */
    separators?:
      | (ListSeparators | keyof typeof ListSeparators)
      | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the component header.
     *
     *  **Note:** When `header` is set, the `headerText` property is ignored.
     */
    header?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the items of the component.
     *
     *  **Note:** Use `sap.ui.webc.main.StandardListItem`, `sap.ui.webc.main.CustomListItem`, and `sap.ui.webc.main.GroupHeaderListItem`
     * for the intended design.
     */
    items?: IListItem[] | IListItem | AggregationBindingInfo;

    /**
     * Fired when an item is activated, unless the item's `type` property is set to `Inactive`.
     */
    itemClick?: Function;

    /**
     * Fired when the `Close` button of any item is clicked
     *
     *  **Note:** This event is applicable to `sap.ui.webc.fiori.NotificationListItem` items only, not to be
     * confused with `item-delete`.
     */
    itemClose?: Function;

    /**
     * Fired when the Delete button of any item is pressed.
     *
     *  **Note:** A Delete button is displayed on each item, when the component `mode` property is set to `Delete`.
     */
    itemDelete?: Function;

    /**
     * Fired when the `Toggle` button of any item is clicked.
     *
     *  **Note:** This event is applicable to `sap.ui.webc.fiori.NotificationListGroupItem` items only.
     */
    itemToggle?: Function;

    /**
     * Fired when the user scrolls to the bottom of the list.
     *
     *  **Note:** The event is fired when the `growing='Scroll'` property is enabled.
     */
    loadMore?: Function;

    /**
     * Fired when selection is changed by user interaction in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`
     * and `MultiSelect` modes.
     */
    selectionChange?: Function;
  }
}

declare module "sap/ui/webc/main/MessageStrip" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import { MessageStripDesign, IIcon } from "sap/ui/webc/main/library";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.MessageStrip` component enables the embedding of app-related messages. It displays
   * 4 designs of messages, each with corresponding semantic color and icon: Information, Positive, Warning
   * and Negative. Each message can have a Close button, so that it can be removed from the UI, if needed.
   *
   * Usage:
   *
   * For the `sap.ui.webc.main.MessageStrip` component, you can define whether it displays an icon in the
   * beginning and a close button. Moreover, its size and background can be controlled with CSS.
   */
  export default class MessageStrip extends WebComponent {
    /**
     * Constructor for a new `MessageStrip`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessageStripSettings
    );
    /**
     * Constructor for a new `MessageStrip`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessageStripSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.ui.webc.main.MessageStrip`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MessageStrip` itself.
     *
     * Fired when the close button is pressed either with a click/tap or by using the Enter or Space key.
     */
    attachClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MessageStrip` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.ui.webc.main.MessageStrip`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MessageStrip` itself.
     *
     * Fired when the close button is pressed either with a click/tap or by using the Enter or Space key.
     */
    attachClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MessageStrip` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the icon in the aggregation {@link #getIcon icon}.
     */
    destroyIcon(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:close close} event of this `sap.ui.webc.main.MessageStrip`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.MessageStrip with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessageStrip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:close close} to attached listeners.
     */
    fireClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Defines the component type.
     *
     *  **Note:** Available options are `"Information"`, `"Positive"`, `"Negative"`, and `"Warning"`.
     *
     * Default value is `Information`.
     */
    getDesign(): MessageStripDesign | keyof typeof MessageStripDesign;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getHideCloseButton hideCloseButton}.
     *
     * Defines whether the MessageStrip renders close icon.
     *
     * Default value is `false`.
     */
    getHideCloseButton(): boolean;
    /**
     * Gets current value of property {@link #getHideIcon hideIcon}.
     *
     * Defines whether the MessageStrip will show an icon in the beginning. You can directly provide an icon
     * with the `icon` slot. Otherwise, the default icon for the type will be used.
     *
     * Default value is `false`.
     */
    getHideIcon(): boolean;
    /**
     * Gets content of aggregation {@link #getIcon icon}.
     *
     * Defines the content to be displayed as graphical element within the component.
     *
     *  **Note:** If no icon is given, the default icon for the component type will be used. The SAP-icons font
     * provides numerous options.
     *
     *
     *
     * See all the available icons in the Icon Explorer.
     */
    getIcon(): IIcon;
    /**
     * Returns a metadata object for class sap.ui.webc.main.MessageStrip.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Defines the component type.
     *
     *  **Note:** Available options are `"Information"`, `"Positive"`, `"Negative"`, and `"Warning"`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Information`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: MessageStripDesign | keyof typeof MessageStripDesign
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getHideCloseButton hideCloseButton}.
     *
     * Defines whether the MessageStrip renders close icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideCloseButton(
      /**
       * New value for property `hideCloseButton`
       */
      bHideCloseButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideIcon hideIcon}.
     *
     * Defines whether the MessageStrip will show an icon in the beginning. You can directly provide an icon
     * with the `icon` slot. Otherwise, the default icon for the type will be used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideIcon(
      /**
       * New value for property `hideIcon`
       */
      bHideIcon?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getIcon icon}.
     */
    setIcon(
      /**
       * The icon to set
       */
      oIcon: IIcon
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $MessageStripSettings extends $WebComponentSettings {
    /**
     * Defines the component type.
     *
     *  **Note:** Available options are `"Information"`, `"Positive"`, `"Negative"`, and `"Warning"`.
     */
    design?:
      | (MessageStripDesign | keyof typeof MessageStripDesign)
      | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines whether the MessageStrip renders close icon.
     */
    hideCloseButton?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the MessageStrip will show an icon in the beginning. You can directly provide an icon
     * with the `icon` slot. Otherwise, the default icon for the type will be used.
     */
    hideIcon?: boolean | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the content to be displayed as graphical element within the component.
     *
     *  **Note:** If no icon is given, the default icon for the component type will be used. The SAP-icons font
     * provides numerous options.
     *
     *
     *
     * See all the available icons in the Icon Explorer.
     */
    icon?: IIcon;

    /**
     * Fired when the close button is pressed either with a click/tap or by using the Enter or Space key.
     */
    close?: Function;
  }
}

declare module "sap/ui/webc/main/MultiComboBox" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IMultiComboBoxItem, IIcon } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState } from "sap/ui/core/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.MultiComboBox` component provides a list box with items and a text field allowing
   * the user to either type a value directly into the control, or choose from the list of existing items.
   *
   * It is a drop-down list for selecting and filtering values, commonly used to enable users to select one
   * or more options from a predefined list. The control provides an editable input field to filter the list,
   * and a dropdown arrow of available options. The select options in the list have checkboxes that permit
   * multi-selection. Entered values are displayed as tokens. Structure: The `sap.ui.webc.main.MultiComboBox`
   * consists of the following elements:
   * 	 -  Tokenizer - a list of tokens with selected options.  Input field - displays the selected option/s
   * 			as token/s. Users can type to filter the list.  Drop-down arrow - expands\collapses the option list.
   *
   * 	 -  Option list - the list of available options.  Keyboard Handling:
   *
   * The `sap.ui.webc.main.MultiComboBox` provides advanced keyboard handling.
   *
   * Picker: If the `sap.ui.webc.main.MultiComboBox` is focused, you can open or close the drop-down by pressing
   * `F4`, `ALT+UP` or `ALT+DOWN` keys. Once the drop-down is opened, you can use the `UP` and `DOWN` arrow
   * keys to navigate through the available options and select one by pressing the `Space` or `Enter` keys.
   *
   *
   *
   * Tokens:
   * 	 -  Left/Right arrow keys - moves the focus selection form the currently focused token to the previous/next
   * 			one (if available).
   * 	 -  Delete - deletes the token and focuses the previous token.
   * 	 -  Backspace - deletes the token and focus the next token.
   *
   * In the context of `sap.ui.webc.main.MultiComboBox`, you can provide a custom stable DOM ref for:
   *
   * 	 - Every `sap.ui.webc.main.MultiComboBoxItem` that you provide. Example: `
   * 			`
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.MultiComboBox` exposes the following CSS Shadow Parts:
   * 	 - token-{index} - Used to style each token(where `token-0` corresponds to the first item)
   */
  export default class MultiComboBox extends WebComponent {
    /**
     * Constructor for a new `MultiComboBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MultiComboBoxSettings
    );
    /**
     * Constructor for a new `MultiComboBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MultiComboBoxSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: IMultiComboBoxItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiComboBox` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiComboBox` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiComboBox` itself.
     *
     * Fired when the value of the component changes at each keystroke.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiComboBox` itself.
     *
     * Fired when the value of the component changes at each keystroke.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:openChange openChange} event of this `sap.ui.webc.main.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiComboBox` itself.
     *
     * Fired when the dropdown is opened or closed.
     */
    attachOpenChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:openChange openChange} event of this `sap.ui.webc.main.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiComboBox` itself.
     *
     * Fired when the dropdown is opened or closed.
     */
    attachOpenChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiComboBox` itself.
     *
     * Fired when selection is changed by user interaction in `SingleSelect` and `MultiSelect` modes.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiComboBox` itself.
     *
     * Fired when selection is changed by user interaction in `SingleSelect` and `MultiSelect` modes.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the icon in the aggregation {@link #getIcon icon}.
     */
    destroyIcon(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.MultiComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.MultiComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:openChange openChange} event of this `sap.ui.webc.main.MultiComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachOpenChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.ui.webc.main.MultiComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.MultiComboBox with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MultiComboBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:openChange openChange} to attached listeners.
     */
    fireOpenChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * an array of the selected items.
         */
        items?: any[];
      }
    ): this;
    /**
     * Gets current value of property {@link #getAllowCustomValues allowCustomValues}.
     *
     * Defines if the user input will be prevented, if no matching item has been found
     *
     * Default value is `false`.
     */
    getAllowCustomValues(): boolean;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getFilter filter}.
     *
     * Defines the filter type of the component. Available options are: `StartsWithPerTerm`, `StartsWith`, `Contains`
     * and `None`.
     *
     * Default value is `"StartsWithPerTerm"`.
     */
    getFilter(): string;
    /**
     * Gets content of aggregation {@link #getIcon icon}.
     *
     * Defines the icon to be displayed in the component.
     */
    getIcon(): IIcon;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the component items.
     */
    getItems(): IMultiComboBoxItem[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.MultiComboBox.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Returns the indicates whether the dropdown is open. True if the dropdown is open, false otherwise.
     */
    getOpen(): void;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * Default value is `empty string`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the component.
     *
     *  **Note:** The property is updated upon typing.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Checks for the provided `sap.ui.webc.main.IMultiComboBoxItem` in the aggregation {@link #getItems items}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: IMultiComboBoxItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: IMultiComboBoxItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): IMultiComboBoxItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | IMultiComboBoxItem
    ): IMultiComboBoxItem;
    /**
     * Sets a new value for property {@link #getAllowCustomValues allowCustomValues}.
     *
     * Defines if the user input will be prevented, if no matching item has been found
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setAllowCustomValues(
      /**
       * New value for property `allowCustomValues`
       */
      bAllowCustomValues?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFilter filter}.
     *
     * Defines the filter type of the component. Available options are: `StartsWithPerTerm`, `StartsWith`, `Contains`
     * and `None`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"StartsWithPerTerm"`.
     */
    setFilter(
      /**
       * New value for property `filter`
       */
      sFilter?: string
    ): this;
    /**
     * Sets the aggregated {@link #getIcon icon}.
     */
    setIcon(
      /**
       * The icon to set
       */
      oIcon: IIcon
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the value of the component.
     *
     *  **Note:** The property is updated upon typing.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
  }

  export interface $MultiComboBoxSettings extends $WebComponentSettings {
    /**
     * Defines if the user input will be prevented, if no matching item has been found
     */
    allowCustomValues?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the filter type of the component. Available options are: `StartsWithPerTerm`, `StartsWith`, `Contains`
     * and `None`.
     */
    filter?: string | PropertyBindingInfo;

    /**
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines the value of the component.
     *
     *  **Note:** The property is updated upon typing.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed in the component.
     */
    icon?: IIcon;

    /**
     * Defines the component items.
     */
    items?: IMultiComboBoxItem[] | IMultiComboBoxItem | AggregationBindingInfo;

    /**
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    change?: Function;

    /**
     * Fired when the value of the component changes at each keystroke.
     */
    input?: Function;

    /**
     * Fired when the dropdown is opened or closed.
     */
    openChange?: Function;

    /**
     * Fired when selection is changed by user interaction in `SingleSelect` and `MultiSelect` modes.
     */
    selectionChange?: Function;
  }
}

declare module "sap/ui/webc/main/MultiComboBoxItem" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IMultiComboBoxItem } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * The `sap.ui.webc.main.MultiComboBoxItem` represents the item for a `sap.ui.webc.main.MultiComboBox`.
   */
  export default class MultiComboBoxItem
    extends WebComponent
    implements IMultiComboBoxItem {
    __implements__sap_ui_webc_main_IMultiComboBoxItem: boolean;
    /**
     * Constructor for a new `MultiComboBoxItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MultiComboBoxItemSettings
    );
    /**
     * Constructor for a new `MultiComboBoxItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MultiComboBoxItemSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.MultiComboBoxItem with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MultiComboBoxItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAdditionalText additionalText}.
     *
     * Defines the additional text of the component.
     *
     * Default value is `empty string`.
     */
    getAdditionalText(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.MultiComboBoxItem.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines the selected state of the component.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getAdditionalText additionalText}.
     *
     * Defines the additional text of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAdditionalText(
      /**
       * New value for property `additionalText`
       */
      sAdditionalText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines the selected state of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $MultiComboBoxItemSettings extends $WebComponentSettings {
    /**
     * Defines the additional text of the component.
     */
    additionalText?: string | PropertyBindingInfo;

    /**
     * Defines the selected state of the component.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the text of the component.
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/MultiInput" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import {
    IInputSuggestionItem,
    IToken,
    IIcon,
    InputType,
  } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState } from "sap/ui/core/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: A `sap.ui.webc.main.MultiInput` field allows the user to enter multiple values, which are displayed
   * as `sap.ui.webc.main.Token`.
   *
   * User can choose interaction for creating tokens. Fiori Guidelines say that user should create tokens
   * when:
   * 	 - Type a value in the input and press enter or focus out the input field (`change` event is fired)
   * 			Select a value from the suggestion list (`suggestion-item-select` event is fired)
   */
  export default class MultiInput extends WebComponent {
    /**
     * Constructor for a new `MultiInput`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MultiInputSettings
    );
    /**
     * Constructor for a new `MultiInput`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MultiInputSettings
    );

    /**
     * Adds some suggestionItem to the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    addSuggestionItem(
      /**
       * The suggestionItem to add; if empty, nothing is inserted
       */
      oSuggestionItem: IInputSuggestionItem
    ): this;
    /**
     * Adds some token to the aggregation {@link #getTokens tokens}.
     */
    addToken(
      /**
       * The token to add; if empty, nothing is inserted
       */
      oToken: IToken
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the value of the component changes at each keystroke, and when a suggestion item has been
     * selected.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the value of the component changes at each keystroke, and when a suggestion item has been
     * selected.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemPreview suggestionItemPreview}
     * event of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the user navigates to a suggestion item via the ARROW keys, as a preview, before the final
     * selection.
     */
    attachSuggestionItemPreview(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemPreview suggestionItemPreview}
     * event of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the user navigates to a suggestion item via the ARROW keys, as a preview, before the final
     * selection.
     */
    attachSuggestionItemPreview(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelect suggestionItemSelect} event
     * of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when a suggestion item, that is displayed in the suggestion popup, is selected.
     */
    attachSuggestionItemSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelect suggestionItemSelect} event
     * of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when a suggestion item, that is displayed in the suggestion popup, is selected.
     */
    attachSuggestionItemSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionScroll suggestionScroll} event of
     * this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the user scrolls the suggestion popover.
     */
    attachSuggestionScroll(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:suggestionScroll suggestionScroll} event of
     * this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the user scrolls the suggestion popover.
     */
    attachSuggestionScroll(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tokenDelete tokenDelete} event of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when a token is about to be deleted.
     */
    attachTokenDelete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tokenDelete tokenDelete} event of this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when a token is about to be deleted.
     */
    attachTokenDelete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:valueHelpTrigger valueHelpTrigger} event of
     * this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the value help icon is pressed and F4 or ALT/OPTION + ARROW_UP/ARROW_DOWN keyboard keys are
     * used.
     */
    attachValueHelpTrigger(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:valueHelpTrigger valueHelpTrigger} event of
     * this `sap.ui.webc.main.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.MultiInput` itself.
     *
     * Fired when the value help icon is pressed and F4 or ALT/OPTION + ARROW_UP/ARROW_DOWN keyboard keys are
     * used.
     */
    attachValueHelpTrigger(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the icon in the aggregation {@link #getIcon icon}.
     */
    destroyIcon(): this;
    /**
     * Destroys all the suggestionItems in the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    destroySuggestionItems(): this;
    /**
     * Destroys all the tokens in the aggregation {@link #getTokens tokens}.
     */
    destroyTokens(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.MultiInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.MultiInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:suggestionItemPreview suggestionItemPreview}
     * event of this `sap.ui.webc.main.MultiInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSuggestionItemPreview(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:suggestionItemSelect suggestionItemSelect}
     * event of this `sap.ui.webc.main.MultiInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSuggestionItemSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:suggestionScroll suggestionScroll} event of
     * this `sap.ui.webc.main.MultiInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSuggestionScroll(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:tokenDelete tokenDelete} event of this `sap.ui.webc.main.MultiInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTokenDelete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:valueHelpTrigger valueHelpTrigger} event of
     * this `sap.ui.webc.main.MultiInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachValueHelpTrigger(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.MultiInput with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MultiInput>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:suggestionItemPreview suggestionItemPreview} to attached listeners.
     */
    fireSuggestionItemPreview(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The previewed suggestion item
         */
        item?: HTMLElement;
        /**
         * The DOM ref of the suggestion item.
         */
        targetRef?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:suggestionItemSelect suggestionItemSelect} to attached listeners.
     */
    fireSuggestionItemSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected item
         */
        item?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:suggestionScroll suggestionScroll} to attached listeners.
     */
    fireSuggestionScroll(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current scroll position
         */
        scrollTop?: int;
        /**
         * The scroll container
         */
        scrollContainer?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:tokenDelete tokenDelete} to attached listeners.
     */
    fireTokenDelete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * deleted token.
         */
        token?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:valueHelpTrigger valueHelpTrigger} to attached listeners.
     */
    fireValueHelpTrigger(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets content of aggregation {@link #getIcon icon}.
     *
     * Defines the icon to be displayed in the component.
     */
    getIcon(): IIcon;
    /**
     * Gets current value of property {@link #getMaxlength maxlength}.
     *
     * Sets the maximum number of characters available in the input field.
     */
    getMaxlength(): int;
    /**
     * Returns a metadata object for class sap.ui.webc.main.MultiInput.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * Default value is `empty string`.
     */
    getPlaceholder(): string;
    /**
     * Returns the the suggestion item on preview.
     */
    getPreviewItem(): void;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getShowSuggestions showSuggestions}.
     *
     * Defines whether the component should show suggestions, if such are present.
     *
     *  **Note:** Don`t forget to import the `InputSuggestions` module from `"@ui5/webcomponents/dist/features/InputSuggestions.js"`
     * to enable this functionality.
     *
     * Default value is `false`.
     */
    getShowSuggestions(): boolean;
    /**
     * Gets current value of property {@link #getShowValueHelpIcon showValueHelpIcon}.
     *
     * Determines whether a value help icon will be should in the end of the input. Pressing the icon will fire
     * `value-help-trigger` event.
     *
     * Default value is `false`.
     */
    getShowValueHelpIcon(): boolean;
    /**
     * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
     */
    getSuggestionItems(): IInputSuggestionItem[];
    /**
     * Gets content of aggregation {@link #getTokens tokens}.
     *
     * Defines the component tokens.
     */
    getTokens(): IToken[];
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the HTML type of the component. Available options are: `Text`, `Email`, `Number`, `Password`,
     * `Tel`, and `URL`.
     *
     *  **Notes:**
     * 	 - The particular effect of this property differs depending on the browser and the current language
     * 			settings, especially for type `Number`.
     * 	 - The property is mostly intended to be used with touch devices that use different soft keyboard layouts
     * 			depending on the given input type.
     *
     * Default value is `Text`.
     */
    getType(): InputType | keyof typeof InputType;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the component.
     *
     *  **Note:** The property is updated upon typing.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Checks for the provided `sap.ui.webc.main.IInputSuggestionItem` in the aggregation {@link #getSuggestionItems
     * suggestionItems}. and returns its index if found or -1 otherwise.
     */
    indexOfSuggestionItem(
      /**
       * The suggestionItem whose index is looked for
       */
      oSuggestionItem: IInputSuggestionItem
    ): int;
    /**
     * Checks for the provided `sap.ui.webc.main.IToken` in the aggregation {@link #getTokens tokens}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfToken(
      /**
       * The token whose index is looked for
       */
      oToken: IToken
    ): int;
    /**
     * Inserts a suggestionItem into the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    insertSuggestionItem(
      /**
       * The suggestionItem to insert; if empty, nothing is inserted
       */
      oSuggestionItem: IInputSuggestionItem,
      /**
       * The `0`-based index the suggestionItem should be inserted at; for a negative value of `iIndex`, the suggestionItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a token into the aggregation {@link #getTokens tokens}.
     */
    insertToken(
      /**
       * The token to insert; if empty, nothing is inserted
       */
      oToken: IToken,
      /**
       * The `0`-based index the token should be inserted at; for a negative value of `iIndex`, the token is inserted
       * at position 0; for a value greater than the current size of the aggregation, the token is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSuggestionItems(): IInputSuggestionItem[];
    /**
     * Removes all the controls from the aggregation {@link #getTokens tokens}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllTokens(): IToken[];
    /**
     * Removes a suggestionItem from the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    removeSuggestionItem(
      /**
       * The suggestionItem to remove or its index or id
       */
      vSuggestionItem: int | string | IInputSuggestionItem
    ): IInputSuggestionItem;
    /**
     * Removes a token from the aggregation {@link #getTokens tokens}.
     */
    removeToken(
      /**
       * The token to remove or its index or id
       */
      vToken: int | string | IToken
    ): IToken;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getIcon icon}.
     */
    setIcon(
      /**
       * The icon to set
       */
      oIcon: IIcon
    ): this;
    /**
     * Sets a new value for property {@link #getMaxlength maxlength}.
     *
     * Sets the maximum number of characters available in the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxlength(
      /**
       * New value for property `maxlength`
       */
      iMaxlength: int
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSuggestions showSuggestions}.
     *
     * Defines whether the component should show suggestions, if such are present.
     *
     *  **Note:** Don`t forget to import the `InputSuggestions` module from `"@ui5/webcomponents/dist/features/InputSuggestions.js"`
     * to enable this functionality.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowSuggestions(
      /**
       * New value for property `showSuggestions`
       */
      bShowSuggestions?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowValueHelpIcon showValueHelpIcon}.
     *
     * Determines whether a value help icon will be should in the end of the input. Pressing the icon will fire
     * `value-help-trigger` event.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowValueHelpIcon(
      /**
       * New value for property `showValueHelpIcon`
       */
      bShowValueHelpIcon?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the HTML type of the component. Available options are: `Text`, `Email`, `Number`, `Password`,
     * `Tel`, and `URL`.
     *
     *  **Notes:**
     * 	 - The particular effect of this property differs depending on the browser and the current language
     * 			settings, especially for type `Number`.
     * 	 - The property is mostly intended to be used with touch devices that use different soft keyboard layouts
     * 			depending on the given input type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Text`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: InputType | keyof typeof InputType
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the value of the component.
     *
     *  **Note:** The property is updated upon typing.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
  }

  export interface $MultiInputSettings extends $WebComponentSettings {
    /**
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is completely noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Sets the maximum number of characters available in the input field.
     */
    maxlength?: int | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component should show suggestions, if such are present.
     *
     *  **Note:** Don`t forget to import the `InputSuggestions` module from `"@ui5/webcomponents/dist/features/InputSuggestions.js"`
     * to enable this functionality.
     */
    showSuggestions?: boolean | PropertyBindingInfo;

    /**
     * Determines whether a value help icon will be should in the end of the input. Pressing the icon will fire
     * `value-help-trigger` event.
     */
    showValueHelpIcon?: boolean | PropertyBindingInfo;

    /**
     * Defines the HTML type of the component. Available options are: `Text`, `Email`, `Number`, `Password`,
     * `Tel`, and `URL`.
     *
     *  **Notes:**
     * 	 - The particular effect of this property differs depending on the browser and the current language
     * 			settings, especially for type `Number`.
     * 	 - The property is mostly intended to be used with touch devices that use different soft keyboard layouts
     * 			depending on the given input type.
     */
    type?: (InputType | keyof typeof InputType) | PropertyBindingInfo;

    /**
     * Defines the value of the component.
     *
     *  **Note:** The property is updated upon typing.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed in the component.
     */
    icon?: IIcon;

    suggestionItems?:
      | IInputSuggestionItem[]
      | IInputSuggestionItem
      | AggregationBindingInfo;

    /**
     * Defines the component tokens.
     */
    tokens?: IToken[] | IToken | AggregationBindingInfo;

    /**
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    change?: Function;

    /**
     * Fired when the value of the component changes at each keystroke, and when a suggestion item has been
     * selected.
     */
    input?: Function;

    /**
     * Fired when the user navigates to a suggestion item via the ARROW keys, as a preview, before the final
     * selection.
     */
    suggestionItemPreview?: Function;

    /**
     * Fired when a suggestion item, that is displayed in the suggestion popup, is selected.
     */
    suggestionItemSelect?: Function;

    /**
     * Fired when the user scrolls the suggestion popover.
     */
    suggestionScroll?: Function;

    /**
     * Fired when a token is about to be deleted.
     */
    tokenDelete?: Function;

    /**
     * Fired when the value help icon is pressed and F4 or ALT/OPTION + ARROW_UP/ARROW_DOWN keyboard keys are
     * used.
     */
    valueHelpTrigger?: Function;
  }
}

declare module "sap/ui/webc/main/Option" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { ISelectOption } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Option` component defines the content of an option in the `sap.ui.webc.main.Select`.
   */
  export default class Option extends WebComponent implements ISelectOption {
    __implements__sap_ui_webc_main_ISelectOption: boolean;
    /**
     * Constructor for a new `Option`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $OptionSettings
    );
    /**
     * Constructor for a new `Option`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $OptionSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.Option with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Option>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the `icon` source URI.
     *
     *  **Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the
     * Icon Explorer.
     */
    getIcon(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Option.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines the selected state of the component.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the `sap.ui.webc.main.Select` inside an HTML Form element when this component is
     * selected. For more information on HTML Form support, see the `name` property of `sap.ui.webc.main.Select`.
     */
    getValue(): string;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the `icon` source URI.
     *
     *  **Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the
     * Icon Explorer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines the selected state of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the value of the `sap.ui.webc.main.Select` inside an HTML Form element when this component is
     * selected. For more information on HTML Form support, see the `name` property of `sap.ui.webc.main.Select`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue: string
    ): this;
  }

  export interface $OptionSettings extends $WebComponentSettings {
    /**
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the `icon` source URI.
     *
     *  **Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the
     * Icon Explorer.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Defines the selected state of the component.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the value of the `sap.ui.webc.main.Select` inside an HTML Form element when this component is
     * selected. For more information on HTML Form support, see the `name` property of `sap.ui.webc.main.Select`.
     */
    value?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/Panel" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { PanelAccessibleRole, TitleLevel } from "sap/ui/webc/main/library";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Panel` component is a container which has a header and a content area and is used
   * for grouping and displaying information. It can be collapsed to save space on the screen.
   *
   * Guidelines::
   * 	 - Nesting two or more panels is not recommended.
   * 	 - Do not stack too many panels on one page.
   *
   * Structure: A panel consists of a title bar with a header text or custom header.
   *  The content area can contain an arbitrary set of controls. The header is clickable and can be used to
   * toggle between the expanded and collapsed state. It includes an icon which rotates depending on the state.
   *
   *  The custom header can be set through the `header` slot and it may contain arbitraray content, such as:
   * title, buttons or any other HTML elements.
   *  **Note:** the custom header is not clickable out of the box, but in this case the icon is interactive
   * and allows to show/hide the content area.
   *
   * Responsive Behavior:
   * 	 - If the width of the panel is set to 100% (default), the panel and its children are resized responsively,
   * 			depending on its parent container.
   * 	 - If the panel has a fixed height, it will take up the space even if the panel is collapsed.
   * 	 - When the panel is expandable (the `fixed` property is set to `false`), an arrow icon (pointing to
   * 			the right) appears in front of the header.
   * 	 - When the animation is activated, expand/collapse uses a smooth animation to open or close the content
   * 			area.
   * 	 - When the panel expands/collapses, the arrow icon rotates 90 degrees clockwise/counter-clockwise.
   *
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.Panel` exposes the following CSS Shadow Parts:
   * 	 - content - Used to style the wrapper of the content
   */
  export default class Panel extends WebComponent {
    /**
     * Constructor for a new `Panel`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PanelSettings
    );
    /**
     * Constructor for a new `Panel`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PanelSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Adds some header to the aggregation {@link #getHeader header}.
     */
    addHeader(
      /**
       * The header to add; if empty, nothing is inserted
       */
      oHeader: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:toggle toggle} event of this `sap.ui.webc.main.Panel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Panel` itself.
     *
     * Fired when the component is expanded/collapsed by user interaction.
     */
    attachToggle(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Panel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:toggle toggle} event of this `sap.ui.webc.main.Panel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Panel` itself.
     *
     * Fired when the component is expanded/collapsed by user interaction.
     */
    attachToggle(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Panel` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Destroys all the header in the aggregation {@link #getHeader header}.
     */
    destroyHeader(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:toggle toggle} event of this `sap.ui.webc.main.Panel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachToggle(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Panel with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Panel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:toggle toggle} to attached listeners.
     */
    fireToggle(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAccessibleName accessibleName}.
     *
     * Sets the accessible aria name of the component.
     *
     * Default value is `empty string`.
     */
    getAccessibleName(): string;
    /**
     * Gets current value of property {@link #getAccessibleRole accessibleRole}.
     *
     * Sets the accessible aria role of the component. Depending on the usage, you can change the role from
     * the default `Form` to `Region` or `Complementary`.
     *
     * Default value is `Form`.
     */
    getAccessibleRole(): PanelAccessibleRole | keyof typeof PanelAccessibleRole;
    /**
     * Gets current value of property {@link #getCollapsed collapsed}.
     *
     * Indicates whether the component is collapsed and only the header is displayed.
     *
     * Default value is `false`.
     */
    getCollapsed(): boolean;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Determines the content of the component. The content is visible only when the component is expanded.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getFixed fixed}.
     *
     * Determines whether the component is in a fixed state that is not expandable/collapsible by user interaction.
     *
     * Default value is `false`.
     */
    getFixed(): boolean;
    /**
     * Gets content of aggregation {@link #getHeader header}.
     *
     * Defines the component header area.
     *
     *  **Note:** When a header is provided, the `headerText` property is ignored.
     */
    getHeader(): Control[];
    /**
     * Gets current value of property {@link #getHeaderLevel headerLevel}.
     *
     * Defines the "aria-level" of component heading, set by the `headerText`.
     *
     *  Available options are: `"H6"` to `"H1"`.
     *
     * Default value is `H2`.
     */
    getHeaderLevel(): TitleLevel | keyof typeof TitleLevel;
    /**
     * Gets current value of property {@link #getHeaderText headerText}.
     *
     * This property is used to set the header text of the component. The text is visible in both expanded and
     * collapsed states.
     *
     *  **Note:** This property is overridden by the `header` slot.
     *
     * Default value is `empty string`.
     */
    getHeaderText(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Panel.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getHeader header}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfHeader(
      /**
       * The header whose index is looked for
       */
      oHeader: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a header into the aggregation {@link #getHeader header}.
     */
    insertHeader(
      /**
       * The header to insert; if empty, nothing is inserted
       */
      oHeader: Control,
      /**
       * The `0`-based index the header should be inserted at; for a negative value of `iIndex`, the header is
       * inserted at position 0; for a value greater than the current size of the aggregation, the header is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getHeader header}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeader(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Removes a header from the aggregation {@link #getHeader header}.
     */
    removeHeader(
      /**
       * The header to remove or its index or id
       */
      vHeader: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getAccessibleName accessibleName}.
     *
     * Sets the accessible aria name of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAccessibleName(
      /**
       * New value for property `accessibleName`
       */
      sAccessibleName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getAccessibleRole accessibleRole}.
     *
     * Sets the accessible aria role of the component. Depending on the usage, you can change the role from
     * the default `Form` to `Region` or `Complementary`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Form`.
     */
    setAccessibleRole(
      /**
       * New value for property `accessibleRole`
       */
      sAccessibleRole?: PanelAccessibleRole | keyof typeof PanelAccessibleRole
    ): this;
    /**
     * Sets a new value for property {@link #getCollapsed collapsed}.
     *
     * Indicates whether the component is collapsed and only the header is displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setCollapsed(
      /**
       * New value for property `collapsed`
       */
      bCollapsed?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFixed fixed}.
     *
     * Determines whether the component is in a fixed state that is not expandable/collapsible by user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFixed(
      /**
       * New value for property `fixed`
       */
      bFixed?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderLevel headerLevel}.
     *
     * Defines the "aria-level" of component heading, set by the `headerText`.
     *
     *  Available options are: `"H6"` to `"H1"`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `H2`.
     */
    setHeaderLevel(
      /**
       * New value for property `headerLevel`
       */
      sHeaderLevel?: TitleLevel | keyof typeof TitleLevel
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderText headerText}.
     *
     * This property is used to set the header text of the component. The text is visible in both expanded and
     * collapsed states.
     *
     *  **Note:** This property is overridden by the `header` slot.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeaderText(
      /**
       * New value for property `headerText`
       */
      sHeaderText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $PanelSettings extends $WebComponentSettings {
    /**
     * Sets the accessible aria name of the component.
     */
    accessibleName?: string | PropertyBindingInfo;

    /**
     * Sets the accessible aria role of the component. Depending on the usage, you can change the role from
     * the default `Form` to `Region` or `Complementary`.
     */
    accessibleRole?:
      | (PanelAccessibleRole | keyof typeof PanelAccessibleRole)
      | PropertyBindingInfo;

    /**
     * Indicates whether the component is collapsed and only the header is displayed.
     */
    collapsed?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the component is in a fixed state that is not expandable/collapsible by user interaction.
     */
    fixed?: boolean | PropertyBindingInfo;

    /**
     * Defines the "aria-level" of component heading, set by the `headerText`.
     *
     *  Available options are: `"H6"` to `"H1"`.
     */
    headerLevel?: (TitleLevel | keyof typeof TitleLevel) | PropertyBindingInfo;

    /**
     * This property is used to set the header text of the component. The text is visible in both expanded and
     * collapsed states.
     *
     *  **Note:** This property is overridden by the `header` slot.
     */
    headerText?: string | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Determines the content of the component. The content is visible only when the component is expanded.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the component header area.
     *
     *  **Note:** When a header is provided, the `headerText` property is ignored.
     */
    header?: Control[] | Control | AggregationBindingInfo;

    /**
     * Fired when the component is expanded/collapsed by user interaction.
     */
    toggle?: Function;
  }
}

declare module "sap/ui/webc/main/Popover" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import {
    PopoverHorizontalAlign,
    PopoverPlacementType,
    PopoverVerticalAlign,
  } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Popover` component displays additional information for an object in a compact way
   * and without leaving the page. The Popover can contain various UI elements, such as fields, tables, images,
   * and charts. It can also include actions in the footer.
   *
   * Structure:
   *
   * The popover has three main areas:
   * 	 - Header (optional)
   * 	 - Content
   * 	 - Footer (optional)
   *
   * **Note:** The `sap.ui.webc.main.Popover` is closed when the user clicks or taps outside the popover or
   * selects an action within the popover. You can prevent this with the `modal` property.
   */
  export default class Popover extends WebComponent {
    /**
     * Constructor for a new `Popover`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PopoverSettings
    );
    /**
     * Constructor for a new `Popover`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PopoverSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Adds some footer to the aggregation {@link #getFooter footer}.
     */
    addFooter(
      /**
       * The footer to add; if empty, nothing is inserted
       */
      oFooter: Control
    ): this;
    /**
     * Adds some header to the aggregation {@link #getHeader header}.
     */
    addHeader(
      /**
       * The header to add; if empty, nothing is inserted
       */
      oHeader: Control
    ): this;
    /**
     * Focuses the element denoted by `initialFocus`, if provided, or the first focusable element otherwise.
     */
    applyFocus(): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.ui.webc.main.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Popover` itself.
     *
     * Fired after the component is closed. **This event does not bubble.**
     */
    attachAfterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.ui.webc.main.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Popover` itself.
     *
     * Fired after the component is closed. **This event does not bubble.**
     */
    attachAfterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.ui.webc.main.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Popover` itself.
     *
     * Fired after the component is opened. **This event does not bubble.**
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.ui.webc.main.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Popover` itself.
     *
     * Fired after the component is opened. **This event does not bubble.**
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.ui.webc.main.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Popover` itself.
     *
     * Fired before the component is closed. This event can be cancelled, which will prevent the popup from
     * closing. **This event does not bubble.**
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.ui.webc.main.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Popover` itself.
     *
     * Fired before the component is closed. This event can be cancelled, which will prevent the popup from
     * closing. **This event does not bubble.**
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.ui.webc.main.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Popover` itself.
     *
     * Fired before the component is opened. This event can be cancelled, which will prevent the popup from
     * opening. **This event does not bubble.**
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.ui.webc.main.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Popover` itself.
     *
     * Fired before the component is opened. This event can be cancelled, which will prevent the popup from
     * opening. **This event does not bubble.**
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Hides the block layer (for modal popups only)
     */
    close(): void;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Destroys all the footer in the aggregation {@link #getFooter footer}.
     */
    destroyFooter(): this;
    /**
     * Destroys all the header in the aggregation {@link #getHeader header}.
     */
    destroyHeader(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterClose afterClose} event of this `sap.ui.webc.main.Popover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.ui.webc.main.Popover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.ui.webc.main.Popover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.ui.webc.main.Popover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Popover with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Popover>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterClose afterClose} to attached listeners.
     */
    fireAfterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Indicates that `ESC` key has triggered the event.
         */
        escPressed?: boolean;
      }
    ): boolean;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * Gets current value of property {@link #getAllowTargetOverlap allowTargetOverlap}.
     *
     * Determines if there is no enough space, the component can be placed over the target.
     *
     * Default value is `false`.
     */
    getAllowTargetOverlap(): boolean;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Defines the content of the Popup.
     */
    getContent(): Control[];
    /**
     * Gets content of aggregation {@link #getFooter footer}.
     *
     * Defines the footer HTML Element.
     */
    getFooter(): Control[];
    /**
     * Gets content of aggregation {@link #getHeader header}.
     *
     * Defines the header HTML Element.
     */
    getHeader(): Control[];
    /**
     * Gets current value of property {@link #getHeaderText headerText}.
     *
     * Defines the header text.
     *
     *  **Note:** If `header` slot is provided, the `headerText` is ignored.
     *
     * Default value is `empty string`.
     */
    getHeaderText(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getHideArrow hideArrow}.
     *
     * Determines whether the component arrow is hidden.
     *
     * Default value is `false`.
     */
    getHideArrow(): boolean;
    /**
     * Gets current value of property {@link #getHideBackdrop hideBackdrop}.
     *
     * Defines whether the block layer will be shown if modal property is set to true.
     *
     * Default value is `false`.
     */
    getHideBackdrop(): boolean;
    /**
     * Gets current value of property {@link #getHorizontalAlign horizontalAlign}.
     *
     * Determines the horizontal alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Stretch`
     *
     * Default value is `Center`.
     */
    getHorizontalAlign():
      | PopoverHorizontalAlign
      | keyof typeof PopoverHorizontalAlign;
    /**
     * Gets current value of property {@link #getInitialFocus initialFocus}.
     *
     * Defines the ID of the HTML Element, which will get the initial focus.
     *
     * Default value is `empty string`.
     */
    getInitialFocus(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Popover.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getModal modal}.
     *
     * Defines whether the component should close when clicking/tapping outside of the popover. If enabled,
     * it blocks any interaction with the background.
     *
     * Default value is `false`.
     */
    getModal(): boolean;
    /**
     * Gets current value of property {@link #getPlacementType placementType}.
     *
     * Determines on which side the component is placed at.
     *
     *  Available options are:
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Top`
     * 	 - `Bottom`
     *
     * Default value is `Right`.
     */
    getPlacementType():
      | PopoverPlacementType
      | keyof typeof PopoverPlacementType;
    /**
     * Gets current value of property {@link #getPreventFocusRestore preventFocusRestore}.
     *
     * Defines if the focus should be returned to the previously focused element, when the popup closes.
     *
     * Default value is `false`.
     */
    getPreventFocusRestore(): boolean;
    /**
     * Gets current value of property {@link #getVerticalAlign verticalAlign}.
     *
     * Determines the vertical alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Top`
     * 	 - `Bottom`
     * 	 - `Stretch`
     *
     * Default value is `Center`.
     */
    getVerticalAlign():
      | PopoverVerticalAlign
      | keyof typeof PopoverVerticalAlign;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getFooter footer}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfFooter(
      /**
       * The footer whose index is looked for
       */
      oFooter: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getHeader header}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfHeader(
      /**
       * The header whose index is looked for
       */
      oHeader: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a footer into the aggregation {@link #getFooter footer}.
     */
    insertFooter(
      /**
       * The footer to insert; if empty, nothing is inserted
       */
      oFooter: Control,
      /**
       * The `0`-based index the footer should be inserted at; for a negative value of `iIndex`, the footer is
       * inserted at position 0; for a value greater than the current size of the aggregation, the footer is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a header into the aggregation {@link #getHeader header}.
     */
    insertHeader(
      /**
       * The header to insert; if empty, nothing is inserted
       */
      oHeader: Control,
      /**
       * The `0`-based index the header should be inserted at; for a negative value of `iIndex`, the header is
       * inserted at position 0; for a value greater than the current size of the aggregation, the header is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Tells if the component is opened
     */
    isOpen(): void;
    /**
     * Opens the popover.
     */
    openBy(
      /**
       * the element that the popover is opened by
       */
      opener: HTMLElement,
      /**
       * prevents applying the focus inside the popover
       */
      preventInitialFocus: boolean
    ): void;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getFooter footer}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllFooter(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getHeader header}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeader(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Removes a footer from the aggregation {@link #getFooter footer}.
     */
    removeFooter(
      /**
       * The footer to remove or its index or id
       */
      vFooter: int | string | Control
    ): Control;
    /**
     * Removes a header from the aggregation {@link #getHeader header}.
     */
    removeHeader(
      /**
       * The header to remove or its index or id
       */
      vHeader: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getAllowTargetOverlap allowTargetOverlap}.
     *
     * Determines if there is no enough space, the component can be placed over the target.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setAllowTargetOverlap(
      /**
       * New value for property `allowTargetOverlap`
       */
      bAllowTargetOverlap?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderText headerText}.
     *
     * Defines the header text.
     *
     *  **Note:** If `header` slot is provided, the `headerText` is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeaderText(
      /**
       * New value for property `headerText`
       */
      sHeaderText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getHideArrow hideArrow}.
     *
     * Determines whether the component arrow is hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideArrow(
      /**
       * New value for property `hideArrow`
       */
      bHideArrow?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideBackdrop hideBackdrop}.
     *
     * Defines whether the block layer will be shown if modal property is set to true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideBackdrop(
      /**
       * New value for property `hideBackdrop`
       */
      bHideBackdrop?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHorizontalAlign horizontalAlign}.
     *
     * Determines the horizontal alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Stretch`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Center`.
     */
    setHorizontalAlign(
      /**
       * New value for property `horizontalAlign`
       */
      sHorizontalAlign?:
        | PopoverHorizontalAlign
        | keyof typeof PopoverHorizontalAlign
    ): this;
    /**
     * Sets a new value for property {@link #getInitialFocus initialFocus}.
     *
     * Defines the ID of the HTML Element, which will get the initial focus.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setInitialFocus(
      /**
       * New value for property `initialFocus`
       */
      sInitialFocus?: string
    ): this;
    /**
     * Sets a new value for property {@link #getModal modal}.
     *
     * Defines whether the component should close when clicking/tapping outside of the popover. If enabled,
     * it blocks any interaction with the background.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setModal(
      /**
       * New value for property `modal`
       */
      bModal?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPlacementType placementType}.
     *
     * Determines on which side the component is placed at.
     *
     *  Available options are:
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Top`
     * 	 - `Bottom`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Right`.
     */
    setPlacementType(
      /**
       * New value for property `placementType`
       */
      sPlacementType?: PopoverPlacementType | keyof typeof PopoverPlacementType
    ): this;
    /**
     * Sets a new value for property {@link #getPreventFocusRestore preventFocusRestore}.
     *
     * Defines if the focus should be returned to the previously focused element, when the popup closes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setPreventFocusRestore(
      /**
       * New value for property `preventFocusRestore`
       */
      bPreventFocusRestore?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVerticalAlign verticalAlign}.
     *
     * Determines the vertical alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Top`
     * 	 - `Bottom`
     * 	 - `Stretch`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Center`.
     */
    setVerticalAlign(
      /**
       * New value for property `verticalAlign`
       */
      sVerticalAlign?: PopoverVerticalAlign | keyof typeof PopoverVerticalAlign
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $PopoverSettings extends $WebComponentSettings {
    /**
     * Determines if there is no enough space, the component can be placed over the target.
     */
    allowTargetOverlap?: boolean | PropertyBindingInfo;

    /**
     * Defines the header text.
     *
     *  **Note:** If `header` slot is provided, the `headerText` is ignored.
     */
    headerText?: string | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Determines whether the component arrow is hidden.
     */
    hideArrow?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the block layer will be shown if modal property is set to true.
     */
    hideBackdrop?: boolean | PropertyBindingInfo;

    /**
     * Determines the horizontal alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Stretch`
     */
    horizontalAlign?:
      | (PopoverHorizontalAlign | keyof typeof PopoverHorizontalAlign)
      | PropertyBindingInfo;

    /**
     * Defines the ID of the HTML Element, which will get the initial focus.
     */
    initialFocus?: string | PropertyBindingInfo;

    /**
     * Defines whether the component should close when clicking/tapping outside of the popover. If enabled,
     * it blocks any interaction with the background.
     */
    modal?: boolean | PropertyBindingInfo;

    /**
     * Determines on which side the component is placed at.
     *
     *  Available options are:
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Top`
     * 	 - `Bottom`
     */
    placementType?:
      | (PopoverPlacementType | keyof typeof PopoverPlacementType)
      | PropertyBindingInfo;

    /**
     * Defines if the focus should be returned to the previously focused element, when the popup closes.
     */
    preventFocusRestore?: boolean | PropertyBindingInfo;

    /**
     * Determines the vertical alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Top`
     * 	 - `Bottom`
     * 	 - `Stretch`
     */
    verticalAlign?:
      | (PopoverVerticalAlign | keyof typeof PopoverVerticalAlign)
      | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the content of the Popup.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the footer HTML Element.
     */
    footer?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the header HTML Element.
     */
    header?: Control[] | Control | AggregationBindingInfo;

    /**
     * Fired after the component is closed. **This event does not bubble.**
     */
    afterClose?: Function;

    /**
     * Fired after the component is opened. **This event does not bubble.**
     */
    afterOpen?: Function;

    /**
     * Fired before the component is closed. This event can be cancelled, which will prevent the popup from
     * closing. **This event does not bubble.**
     */
    beforeClose?: Function;

    /**
     * Fired before the component is opened. This event can be cancelled, which will prevent the popup from
     * opening. **This event does not bubble.**
     */
    beforeOpen?: Function;
  }
}

declare module "sap/ui/webc/main/ProgressIndicator" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: Shows the progress of a process in a graphical way. To indicate the progress, the inside of
   * the component is filled with a color.
   *
   * Responsive Behavior: You can change the size of the Progress Indicator by changing its `width` or `height`
   * CSS properties.
   */
  export default class ProgressIndicator extends WebComponent {
    /**
     * Constructor for a new `ProgressIndicator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ProgressIndicatorSettings
    );
    /**
     * Constructor for a new `ProgressIndicator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ProgressIndicatorSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.ProgressIndicator with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ProgressIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether component is in disabled state.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getHideValue hideValue}.
     *
     * Defines whether the component value is shown.
     *
     * Default value is `false`.
     */
    getHideValue(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.ProgressIndicator.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Specifies the numerical value in percent for the length of the component.
     *
     * **Note:** If a value greater than 100 is provided, the percentValue is set to 100. In other cases of
     * invalid value, percentValue is set to its default of 0.
     *
     * Default value is `0`.
     */
    getValue(): int;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether component is in disabled state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideValue hideValue}.
     *
     * Defines whether the component value is shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideValue(
      /**
       * New value for property `hideValue`
       */
      bHideValue?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Specifies the numerical value in percent for the length of the component.
     *
     * **Note:** If a value greater than 100 is provided, the percentValue is set to 100. In other cases of
     * invalid value, percentValue is set to its default of 0.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      iValue?: int
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
  }

  export interface $ProgressIndicatorSettings extends $WebComponentSettings {
    /**
     * Defines whether component is in disabled state.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component value is shown.
     */
    hideValue?: boolean | PropertyBindingInfo;

    /**
     * Specifies the numerical value in percent for the length of the component.
     *
     * **Note:** If a value greater than 100 is provided, the percentValue is set to 100. In other cases of
     * invalid value, percentValue is set to its default of 0.
     */
    value?: int | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/RadioButton" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.RadioButton` component enables users to select a single option from a set of options.
   * When a `sap.ui.webc.main.RadioButton` is selected by the user, the `select` event is fired. When a `sap.ui.webc.main.RadioButton`
   * that is within a group is selected, the one that was previously selected gets automatically deselected.
   * You can group radio buttons by using the `name` property.
   *  **Note:** If `sap.ui.webc.main.RadioButton` is not part of a group, it can be selected once, but can
   * not be deselected back.
   *
   * Keyboard Handling:
   *
   * Once the `sap.ui.webc.main.RadioButton` is on focus, it might be selected by pressing the Space and Enter
   * keys.
   *  The Arrow Down/Arrow Up and Arrow Left/Arrow Right keys can be used to change selection between next/previous
   * radio buttons in one group, while TAB and SHIFT + TAB can be used to enter or leave the radio button
   * group.
   *  **Note:** On entering radio button group, the focus goes to the currently selected radio button.
   */
  export default class RadioButton extends WebComponent {
    /**
     * Constructor for a new `RadioButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $RadioButtonSettings
    );
    /**
     * Constructor for a new `RadioButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $RadioButtonSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.webc.main.RadioButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.RadioButton` itself.
     *
     * Fired when the component selected state changes.
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.RadioButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.webc.main.RadioButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.RadioButton` itself.
     *
     * Fired when the component selected state changes.
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.RadioButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.ui.webc.main.RadioButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.RadioButton with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RadioButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Determines whether the component is disabled.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.RadioButton.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Defines the name of the component. Radio buttons with the same `name` will form a radio button group.
     *
     *
     *
     *  **Note:** The selection can be changed with `ARROW_UP/DOWN` and `ARROW_LEFT/RIGHT` keys between radio
     * buttons in same group.
     *
     *
     *
     *  **Note:** Only one radio button can be selected per group.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Determines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Determines whether the component is selected or not.
     *
     *  **Note:** The property value can be changed with user interaction, either by cliking/tapping on the
     * component, or by using the Space or Enter key.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getWrap wrap}.
     *
     * Defines whether the component text wraps when there is not enough space.
     *
     *  **Note:** By default, the text truncates when there is not enough space.
     *
     * Default value is `false`.
     */
    getWrap(): boolean;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Determines whether the component is disabled.
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Defines the name of the component. Radio buttons with the same `name` will form a radio button group.
     *
     *
     *
     *  **Note:** The selection can be changed with `ARROW_UP/DOWN` and `ARROW_LEFT/RIGHT` keys between radio
     * buttons in same group.
     *
     *
     *
     *  **Note:** Only one radio button can be selected per group.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Determines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Determines whether the component is selected or not.
     *
     *  **Note:** The property value can be changed with user interaction, either by cliking/tapping on the
     * component, or by using the Space or Enter key.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getWrap wrap}.
     *
     * Defines whether the component text wraps when there is not enough space.
     *
     *  **Note:** By default, the text truncates when there is not enough space.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setWrap(
      /**
       * New value for property `wrap`
       */
      bWrap?: boolean
    ): this;
  }

  export interface $RadioButtonSettings extends $WebComponentSettings {
    /**
     * Determines whether the component is disabled.
     *
     *  **Note:** A disabled component is completely noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the name of the component. Radio buttons with the same `name` will form a radio button group.
     *
     *
     *
     *  **Note:** The selection can be changed with `ARROW_UP/DOWN` and `ARROW_LEFT/RIGHT` keys between radio
     * buttons in same group.
     *
     *
     *
     *  **Note:** Only one radio button can be selected per group.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Determines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the component is selected or not.
     *
     *  **Note:** The property value can be changed with user interaction, either by cliking/tapping on the
     * component, or by using the Space or Enter key.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the text of the component.
     */
    text?: string | PropertyBindingInfo;

    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines whether the component text wraps when there is not enough space.
     *
     *  **Note:** By default, the text truncates when there is not enough space.
     */
    wrap?: boolean | PropertyBindingInfo;

    /**
     * Fired when the component selected state changes.
     */
    select?: Function;
  }
}

declare module "sap/ui/webc/main/RangeSlider" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Represents a numerical interval and two handles (grips) to select a sub-range within it.
   *
   * Overview: The purpose of the component to enable visual selection of sub-ranges within a given interval.
   *
   * Structure: The most important properties of the Range Slider are:
   * 	 - min - The minimum value of the slider range
   * 	 - max - The maximum value of the slider range
   * 	 - value - The current value of the slider
   * 	 - step - Determines the increments in which the slider will move
   * 	 - showTooltip - Determines if a tooltip should be displayed above the handle
   * 	 - showTickmarks - Displays a visual divider between the step values
   * 	 - labelInterval - Labels some or all of the tickmarks with their values.  Notes::
   * 	 - The right and left handle can be moved individually and their positions could therefore switch.
   * 	 - The entire range can be moved along the interval.  Usage: The most common use case is to select
   * 			and move sub-ranges on a continuous numerical scale.
   *
   * Responsive Behavior: You can move the currently selected range by clicking on it and dragging it along
   * the interval.
   *
   * Keyboard Handling:
   *
   *
   * 	 - `Left or Down Arrow` - Moves a component's handle or the entire selection one step to the left;
   * 	 - `Right or Up Arrow` - Moves a component's handle or the entire selection one step to the right;
   * 	 - `Left or Down Arrow + Ctrl/Cmd` - Moves a component's handle to the left or the entire range with
   * 			step equal to 1/10th of the entire range;
   * 	 - `Right or Up Arrow + Ctrl/Cmd` - Moves a component's handle to the right or the entire range with
   * 			step equal to 1/10th of the entire range;
   * 	 - `Plus` - Same as `Right or Up Arrow`
   * 	 - `Minus` - Same as `Left or Down Arrow`
   * 	 - `Home` - Moves the entire selection or the selected handle to the beginning of the component's range;
   *
   * 	 - `End` - Moves the entire selection or the selected handle to the end of the component's range;
   * 	 - `Page Up` - Same as `Right or Up Arrow + Ctrl/Cmd`
   * 	 - `Page Down` - Same as `Left or Down Arrow + Ctrl/Cmd`
   * 	 - `Escape` - Resets the `startValue` and `endValue` properties to the values prior the component focusing;
   */
  export default class RangeSlider extends WebComponent {
    /**
     * Constructor for a new `RangeSlider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $RangeSliderSettings
    );
    /**
     * Constructor for a new `RangeSlider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $RangeSliderSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.RangeSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.RangeSlider` itself.
     *
     * Fired when the value changes and the user has finished interacting with the slider.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.RangeSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.RangeSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.RangeSlider` itself.
     *
     * Fired when the value changes and the user has finished interacting with the slider.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.RangeSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.RangeSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.RangeSlider` itself.
     *
     * Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.RangeSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.RangeSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.RangeSlider` itself.
     *
     * Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.RangeSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.RangeSlider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.RangeSlider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.RangeSlider with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RangeSlider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the slider is in disabled state.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getEndValue endValue}.
     *
     * Defines end point of a selection - position of a second handle on the slider.
     *
     *
     *
     * Default value is `100`.
     */
    getEndValue(): float;
    /**
     * Gets current value of property {@link #getLabelInterval labelInterval}.
     *
     * Displays a label with a value on every N-th step.
     *
     *  **Note:** The step and tickmarks properties must be enabled. Example - if the step value is set to 2
     * and the label interval is also specified to 2 - then every second tickmark will be labelled, which means
     * every 4th value number.
     *
     * Default value is `0`.
     */
    getLabelInterval(): int;
    /**
     * Gets current value of property {@link #getMax max}.
     *
     * Defines the maximum value of the slider
     *
     * Default value is `100`.
     */
    getMax(): float;
    /**
     * Returns a metadata object for class sap.ui.webc.main.RangeSlider.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMin min}.
     *
     * Defines the minimum value of the slider
     *
     * Default value is `0`.
     */
    getMin(): float;
    /**
     * Gets current value of property {@link #getShowTickmarks showTickmarks}.
     *
     * Enables tick marks visualization for each step.
     *
     *  **Note:** The step must be a positive number.
     *
     * Default value is `false`.
     */
    getShowTickmarks(): boolean;
    /**
     * Gets current value of property {@link #getShowTooltip showTooltip}.
     *
     * Enables handle tooltip displaying the current value.
     *
     * Default value is `false`.
     */
    getShowTooltip(): boolean;
    /**
     * Gets current value of property {@link #getStartValue startValue}.
     *
     * Defines start point of a selection - position of a first handle on the slider.
     *
     *
     *
     * Default value is `0`.
     */
    getStartValue(): float;
    /**
     * Gets current value of property {@link #getStep step}.
     *
     * Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in
     * possible selection of the values 0, 5, 10).
     *
     *  **Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than
     * a number, the component fallbacks to its default value.
     *
     * Default value is `1`.
     */
    getStep(): int;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the slider is in disabled state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEndValue endValue}.
     *
     * Defines end point of a selection - position of a second handle on the slider.
     *
     *
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `100`.
     */
    setEndValue(
      /**
       * New value for property `endValue`
       */
      fEndValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getLabelInterval labelInterval}.
     *
     * Displays a label with a value on every N-th step.
     *
     *  **Note:** The step and tickmarks properties must be enabled. Example - if the step value is set to 2
     * and the label interval is also specified to 2 - then every second tickmark will be labelled, which means
     * every 4th value number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setLabelInterval(
      /**
       * New value for property `labelInterval`
       */
      iLabelInterval?: int
    ): this;
    /**
     * Sets a new value for property {@link #getMax max}.
     *
     * Defines the maximum value of the slider
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `100`.
     */
    setMax(
      /**
       * New value for property `max`
       */
      fMax?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMin min}.
     *
     * Defines the minimum value of the slider
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setMin(
      /**
       * New value for property `min`
       */
      fMin?: float
    ): this;
    /**
     * Sets a new value for property {@link #getShowTickmarks showTickmarks}.
     *
     * Enables tick marks visualization for each step.
     *
     *  **Note:** The step must be a positive number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowTickmarks(
      /**
       * New value for property `showTickmarks`
       */
      bShowTickmarks?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowTooltip showTooltip}.
     *
     * Enables handle tooltip displaying the current value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowTooltip(
      /**
       * New value for property `showTooltip`
       */
      bShowTooltip?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getStartValue startValue}.
     *
     * Defines start point of a selection - position of a first handle on the slider.
     *
     *
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setStartValue(
      /**
       * New value for property `startValue`
       */
      fStartValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getStep step}.
     *
     * Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in
     * possible selection of the values 0, 5, 10).
     *
     *  **Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than
     * a number, the component fallbacks to its default value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setStep(
      /**
       * New value for property `step`
       */
      iStep?: int
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $RangeSliderSettings extends $WebComponentSettings {
    /**
     * Defines whether the slider is in disabled state.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines end point of a selection - position of a second handle on the slider.
     */
    endValue?: float | PropertyBindingInfo;

    /**
     * Displays a label with a value on every N-th step.
     *
     *  **Note:** The step and tickmarks properties must be enabled. Example - if the step value is set to 2
     * and the label interval is also specified to 2 - then every second tickmark will be labelled, which means
     * every 4th value number.
     */
    labelInterval?: int | PropertyBindingInfo;

    /**
     * Defines the maximum value of the slider
     */
    max?: float | PropertyBindingInfo;

    /**
     * Defines the minimum value of the slider
     */
    min?: float | PropertyBindingInfo;

    /**
     * Enables tick marks visualization for each step.
     *
     *  **Note:** The step must be a positive number.
     */
    showTickmarks?: boolean | PropertyBindingInfo;

    /**
     * Enables handle tooltip displaying the current value.
     */
    showTooltip?: boolean | PropertyBindingInfo;

    /**
     * Defines start point of a selection - position of a first handle on the slider.
     */
    startValue?: float | PropertyBindingInfo;

    /**
     * Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in
     * possible selection of the values 0, 5, 10).
     *
     *  **Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than
     * a number, the component fallbacks to its default value.
     */
    step?: int | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the value changes and the user has finished interacting with the slider.
     */
    change?: Function;

    /**
     * Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.
     */
    input?: Function;
  }
}

declare module "sap/ui/webc/main/RatingIndicator" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The RatingIndicator is used to display a specific number of icons that are used to rate an
   * item. Additionally, it is also used to display the average and overall ratings.
   *
   * Usage: The recommended number of icons is between 5 and 7.
   *
   * Responsive Behavior: You can change the size of the Rating Indicator by changing its `font-size` CSS
   * property.
   *  Example: `<ui5-rating-indicator style="font-size: 3rem;"></ui5-rating-indicator>`
   */
  export default class RatingIndicator extends WebComponent {
    /**
     * Constructor for a new `RatingIndicator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $RatingIndicatorSettings
    );
    /**
     * Constructor for a new `RatingIndicator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $RatingIndicatorSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.RatingIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.RatingIndicator` itself.
     *
     * The event is fired when the value changes.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.RatingIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.RatingIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.RatingIndicator` itself.
     *
     * The event is fired when the value changes.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.RatingIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.RatingIndicator`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.RatingIndicator with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RatingIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled.
     *
     *
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getMaxValue maxValue}.
     *
     * The number of displayed rating symbols
     *
     * Default value is `5`.
     */
    getMaxValue(): int;
    /**
     * Returns a metadata object for class sap.ui.webc.main.RatingIndicator.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The indicated value of the rating
     *
     *  **Note:** If you set a number which is not round, it would be shown as follows:
     * 	 - 1.0 - 1.2 -> 1
     * 	 - 1.3 - 1.7 -> 1.5
     * 	 - 1.8 - 1.9 -> 2
     *
     * Default value is `0`.
     */
    getValue(): float;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled.
     *
     *
     *
     *  **Note:** A disabled component is completely noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxValue maxValue}.
     *
     * The number of displayed rating symbols
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `5`.
     */
    setMaxValue(
      /**
       * New value for property `maxValue`
       */
      iMaxValue?: int
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The indicated value of the rating
     *
     *  **Note:** If you set a number which is not round, it would be shown as follows:
     * 	 - 1.0 - 1.2 -> 1
     * 	 - 1.3 - 1.7 -> 1.5
     * 	 - 1.8 - 1.9 -> 2
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      fValue?: float
    ): this;
  }

  export interface $RatingIndicatorSettings extends $WebComponentSettings {
    /**
     * Defines whether the component is disabled.
     *
     *
     *
     *  **Note:** A disabled component is completely noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * The number of displayed rating symbols
     */
    maxValue?: int | PropertyBindingInfo;

    /**
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * The indicated value of the rating
     *
     *  **Note:** If you set a number which is not round, it would be shown as follows:
     * 	 - 1.0 - 1.2 -> 1
     * 	 - 1.3 - 1.7 -> 1.5
     * 	 - 1.8 - 1.9 -> 2
     */
    value?: float | PropertyBindingInfo;

    /**
     * The event is fired when the value changes.
     */
    change?: Function;
  }
}

declare module "sap/ui/webc/main/ResponsivePopover" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import {
    PopoverHorizontalAlign,
    PopoverPlacementType,
    PopoverVerticalAlign,
  } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The `sap.ui.webc.main.ResponsivePopover` acts as a Popover on desktop and tablet, while on
   * phone it acts as a Dialog. The component improves tremendously the user experience on mobile.
   *
   * Usage: Use it when you want to make sure that all the content is visible on any device.
   */
  export default class ResponsivePopover extends WebComponent {
    /**
     * Constructor for a new `ResponsivePopover`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ResponsivePopoverSettings
    );
    /**
     * Constructor for a new `ResponsivePopover`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ResponsivePopoverSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Adds some footer to the aggregation {@link #getFooter footer}.
     */
    addFooter(
      /**
       * The footer to add; if empty, nothing is inserted
       */
      oFooter: Control
    ): this;
    /**
     * Adds some header to the aggregation {@link #getHeader header}.
     */
    addHeader(
      /**
       * The header to add; if empty, nothing is inserted
       */
      oHeader: Control
    ): this;
    /**
     * Focuses the element denoted by `initialFocus`, if provided, or the first focusable element otherwise.
     */
    applyFocus(): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ResponsivePopover` itself.
     *
     * Fired after the component is closed. **This event does not bubble.**
     */
    attachAfterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ResponsivePopover`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ResponsivePopover` itself.
     *
     * Fired after the component is closed. **This event does not bubble.**
     */
    attachAfterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ResponsivePopover`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ResponsivePopover` itself.
     *
     * Fired after the component is opened. **This event does not bubble.**
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ResponsivePopover`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ResponsivePopover` itself.
     *
     * Fired after the component is opened. **This event does not bubble.**
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ResponsivePopover`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ResponsivePopover` itself.
     *
     * Fired before the component is closed. This event can be cancelled, which will prevent the popup from
     * closing. **This event does not bubble.**
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ResponsivePopover`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ResponsivePopover` itself.
     *
     * Fired before the component is closed. This event can be cancelled, which will prevent the popup from
     * closing. **This event does not bubble.**
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ResponsivePopover`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ResponsivePopover` itself.
     *
     * Fired before the component is opened. This event can be cancelled, which will prevent the popup from
     * opening. **This event does not bubble.**
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ResponsivePopover`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ResponsivePopover` itself.
     *
     * Fired before the component is opened. This event can be cancelled, which will prevent the popup from
     * opening. **This event does not bubble.**
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ResponsivePopover`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the popover/dialog.
     */
    close(): void;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Destroys all the footer in the aggregation {@link #getFooter footer}.
     */
    destroyFooter(): this;
    /**
     * Destroys all the header in the aggregation {@link #getHeader header}.
     */
    destroyHeader(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterClose afterClose} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.ui.webc.main.ResponsivePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.ResponsivePopover with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ResponsivePopover>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterClose afterClose} to attached listeners.
     */
    fireAfterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Indicates that `ESC` key has triggered the event.
         */
        escPressed?: boolean;
      }
    ): boolean;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * Gets current value of property {@link #getAllowTargetOverlap allowTargetOverlap}.
     *
     * Determines if there is no enough space, the component can be placed over the target.
     *
     * Default value is `false`.
     */
    getAllowTargetOverlap(): boolean;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Defines the content of the Popup.
     */
    getContent(): Control[];
    /**
     * Gets content of aggregation {@link #getFooter footer}.
     *
     * Defines the footer HTML Element.
     */
    getFooter(): Control[];
    /**
     * Gets content of aggregation {@link #getHeader header}.
     *
     * Defines the header HTML Element.
     */
    getHeader(): Control[];
    /**
     * Gets current value of property {@link #getHeaderText headerText}.
     *
     * Defines the header text.
     *
     *  **Note:** If `header` slot is provided, the `headerText` is ignored.
     *
     * Default value is `empty string`.
     */
    getHeaderText(): string;
    /**
     * Gets current value of property {@link #getHideArrow hideArrow}.
     *
     * Determines whether the component arrow is hidden.
     *
     * Default value is `false`.
     */
    getHideArrow(): boolean;
    /**
     * Gets current value of property {@link #getHideBackdrop hideBackdrop}.
     *
     * Defines whether the block layer will be shown if modal property is set to true.
     *
     * Default value is `false`.
     */
    getHideBackdrop(): boolean;
    /**
     * Gets current value of property {@link #getHorizontalAlign horizontalAlign}.
     *
     * Determines the horizontal alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Stretch`
     *
     * Default value is `Center`.
     */
    getHorizontalAlign():
      | PopoverHorizontalAlign
      | keyof typeof PopoverHorizontalAlign;
    /**
     * Gets current value of property {@link #getInitialFocus initialFocus}.
     *
     * Defines the ID of the HTML Element, which will get the initial focus.
     *
     * Default value is `empty string`.
     */
    getInitialFocus(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.ResponsivePopover.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getModal modal}.
     *
     * Defines whether the component should close when clicking/tapping outside of the popover. If enabled,
     * it blocks any interaction with the background.
     *
     * Default value is `false`.
     */
    getModal(): boolean;
    /**
     * Gets current value of property {@link #getPlacementType placementType}.
     *
     * Determines on which side the component is placed at.
     *
     *  Available options are:
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Top`
     * 	 - `Bottom`
     *
     * Default value is `Right`.
     */
    getPlacementType():
      | PopoverPlacementType
      | keyof typeof PopoverPlacementType;
    /**
     * Gets current value of property {@link #getPreventFocusRestore preventFocusRestore}.
     *
     * Defines if the focus should be returned to the previously focused element, when the popup closes.
     *
     * Default value is `false`.
     */
    getPreventFocusRestore(): boolean;
    /**
     * Gets current value of property {@link #getVerticalAlign verticalAlign}.
     *
     * Determines the vertical alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Top`
     * 	 - `Bottom`
     * 	 - `Stretch`
     *
     * Default value is `Center`.
     */
    getVerticalAlign():
      | PopoverVerticalAlign
      | keyof typeof PopoverVerticalAlign;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getFooter footer}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfFooter(
      /**
       * The footer whose index is looked for
       */
      oFooter: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getHeader header}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfHeader(
      /**
       * The header whose index is looked for
       */
      oHeader: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a footer into the aggregation {@link #getFooter footer}.
     */
    insertFooter(
      /**
       * The footer to insert; if empty, nothing is inserted
       */
      oFooter: Control,
      /**
       * The `0`-based index the footer should be inserted at; for a negative value of `iIndex`, the footer is
       * inserted at position 0; for a value greater than the current size of the aggregation, the footer is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a header into the aggregation {@link #getHeader header}.
     */
    insertHeader(
      /**
       * The header to insert; if empty, nothing is inserted
       */
      oHeader: Control,
      /**
       * The `0`-based index the header should be inserted at; for a negative value of `iIndex`, the header is
       * inserted at position 0; for a value greater than the current size of the aggregation, the header is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Tells if the responsive popover is open
     */
    isOpen(): void;
    /**
     * Opens popover on desktop and dialog on mobile.
     */
    open(
      /**
       * the element that the popover is opened by
       */
      opener: HTMLElement
    ): void;
    /**
     * Opens the popover.
     */
    openBy(
      /**
       * the element that the popover is opened by
       */
      opener: HTMLElement,
      /**
       * prevents applying the focus inside the popover
       */
      preventInitialFocus: boolean
    ): void;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getFooter footer}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllFooter(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getHeader header}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeader(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Removes a footer from the aggregation {@link #getFooter footer}.
     */
    removeFooter(
      /**
       * The footer to remove or its index or id
       */
      vFooter: int | string | Control
    ): Control;
    /**
     * Removes a header from the aggregation {@link #getHeader header}.
     */
    removeHeader(
      /**
       * The header to remove or its index or id
       */
      vHeader: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getAllowTargetOverlap allowTargetOverlap}.
     *
     * Determines if there is no enough space, the component can be placed over the target.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setAllowTargetOverlap(
      /**
       * New value for property `allowTargetOverlap`
       */
      bAllowTargetOverlap?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderText headerText}.
     *
     * Defines the header text.
     *
     *  **Note:** If `header` slot is provided, the `headerText` is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeaderText(
      /**
       * New value for property `headerText`
       */
      sHeaderText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHideArrow hideArrow}.
     *
     * Determines whether the component arrow is hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideArrow(
      /**
       * New value for property `hideArrow`
       */
      bHideArrow?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideBackdrop hideBackdrop}.
     *
     * Defines whether the block layer will be shown if modal property is set to true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideBackdrop(
      /**
       * New value for property `hideBackdrop`
       */
      bHideBackdrop?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHorizontalAlign horizontalAlign}.
     *
     * Determines the horizontal alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Stretch`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Center`.
     */
    setHorizontalAlign(
      /**
       * New value for property `horizontalAlign`
       */
      sHorizontalAlign?:
        | PopoverHorizontalAlign
        | keyof typeof PopoverHorizontalAlign
    ): this;
    /**
     * Sets a new value for property {@link #getInitialFocus initialFocus}.
     *
     * Defines the ID of the HTML Element, which will get the initial focus.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setInitialFocus(
      /**
       * New value for property `initialFocus`
       */
      sInitialFocus?: string
    ): this;
    /**
     * Sets a new value for property {@link #getModal modal}.
     *
     * Defines whether the component should close when clicking/tapping outside of the popover. If enabled,
     * it blocks any interaction with the background.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setModal(
      /**
       * New value for property `modal`
       */
      bModal?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPlacementType placementType}.
     *
     * Determines on which side the component is placed at.
     *
     *  Available options are:
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Top`
     * 	 - `Bottom`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Right`.
     */
    setPlacementType(
      /**
       * New value for property `placementType`
       */
      sPlacementType?: PopoverPlacementType | keyof typeof PopoverPlacementType
    ): this;
    /**
     * Sets a new value for property {@link #getPreventFocusRestore preventFocusRestore}.
     *
     * Defines if the focus should be returned to the previously focused element, when the popup closes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setPreventFocusRestore(
      /**
       * New value for property `preventFocusRestore`
       */
      bPreventFocusRestore?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVerticalAlign verticalAlign}.
     *
     * Determines the vertical alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Top`
     * 	 - `Bottom`
     * 	 - `Stretch`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Center`.
     */
    setVerticalAlign(
      /**
       * New value for property `verticalAlign`
       */
      sVerticalAlign?: PopoverVerticalAlign | keyof typeof PopoverVerticalAlign
    ): this;
  }

  export interface $ResponsivePopoverSettings extends $WebComponentSettings {
    /**
     * Determines if there is no enough space, the component can be placed over the target.
     */
    allowTargetOverlap?: boolean | PropertyBindingInfo;

    /**
     * Defines the header text.
     *
     *  **Note:** If `header` slot is provided, the `headerText` is ignored.
     */
    headerText?: string | PropertyBindingInfo;

    /**
     * Determines whether the component arrow is hidden.
     */
    hideArrow?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the block layer will be shown if modal property is set to true.
     */
    hideBackdrop?: boolean | PropertyBindingInfo;

    /**
     * Determines the horizontal alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Stretch`
     */
    horizontalAlign?:
      | (PopoverHorizontalAlign | keyof typeof PopoverHorizontalAlign)
      | PropertyBindingInfo;

    /**
     * Defines the ID of the HTML Element, which will get the initial focus.
     */
    initialFocus?: string | PropertyBindingInfo;

    /**
     * Defines whether the component should close when clicking/tapping outside of the popover. If enabled,
     * it blocks any interaction with the background.
     */
    modal?: boolean | PropertyBindingInfo;

    /**
     * Determines on which side the component is placed at.
     *
     *  Available options are:
     * 	 - `Left`
     * 	 - `Right`
     * 	 - `Top`
     * 	 - `Bottom`
     */
    placementType?:
      | (PopoverPlacementType | keyof typeof PopoverPlacementType)
      | PropertyBindingInfo;

    /**
     * Defines if the focus should be returned to the previously focused element, when the popup closes.
     */
    preventFocusRestore?: boolean | PropertyBindingInfo;

    /**
     * Determines the vertical alignment of the component.
     *
     *  Available options are:
     * 	 - `Center`
     * 	 - `Top`
     * 	 - `Bottom`
     * 	 - `Stretch`
     */
    verticalAlign?:
      | (PopoverVerticalAlign | keyof typeof PopoverVerticalAlign)
      | PropertyBindingInfo;

    /**
     * Defines the content of the Popup.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the footer HTML Element.
     */
    footer?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the header HTML Element.
     */
    header?: Control[] | Control | AggregationBindingInfo;

    /**
     * Fired after the component is closed. **This event does not bubble.**
     */
    afterClose?: Function;

    /**
     * Fired after the component is opened. **This event does not bubble.**
     */
    afterOpen?: Function;

    /**
     * Fired before the component is closed. This event can be cancelled, which will prevent the popup from
     * closing. **This event does not bubble.**
     */
    beforeClose?: Function;

    /**
     * Fired before the component is opened. This event can be cancelled, which will prevent the popup from
     * opening. **This event does not bubble.**
     */
    beforeOpen?: Function;
  }
}

declare module "sap/ui/webc/main/SegmentedButton" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IButton } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.SegmentedButton` shows a group of buttons. When the user clicks or taps one of
   * the buttons, it stays in a pressed state. It automatically resizes the buttons to fit proportionally
   * within the component. When no width is set, the component uses the available width.
   *
   *  **Note:** There can be just one selected `button` at a time.
   */
  export default class SegmentedButton extends WebComponent {
    /**
     * Constructor for a new `SegmentedButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SegmentedButtonSettings
    );
    /**
     * Constructor for a new `SegmentedButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SegmentedButtonSettings
    );

    /**
     * Adds some button to the aggregation {@link #getButtons buttons}.
     */
    addButton(
      /**
       * The button to add; if empty, nothing is inserted
       */
      oButton: IButton
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.SegmentedButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.SegmentedButton` itself.
     *
     * Fired when the selected button changes.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.SegmentedButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.SegmentedButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.SegmentedButton` itself.
     *
     * Fired when the selected button changes.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.SegmentedButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
     */
    destroyButtons(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.ui.webc.main.SegmentedButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.SegmentedButton with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SegmentedButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the pressed button.
         */
        selectedButton?: HTMLElement;
      }
    ): this;
    /**
     * Gets content of aggregation {@link #getButtons buttons}.
     *
     * Defines the buttons of component.
     *
     *  **Note:** Multiple buttons are allowed.
     *
     *  **Note:** Use the `sap.ui.webc.main.ToggleButton` for the intended design.
     */
    getButtons(): IButton[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.SegmentedButton.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Returns the currently selected button.
     */
    getSelectedButton(): void;
    /**
     * Checks for the provided `sap.ui.webc.main.IButton` in the aggregation {@link #getButtons buttons}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfButton(
      /**
       * The button whose index is looked for
       */
      oButton: IButton
    ): int;
    /**
     * Inserts a button into the aggregation {@link #getButtons buttons}.
     */
    insertButton(
      /**
       * The button to insert; if empty, nothing is inserted
       */
      oButton: IButton,
      /**
       * The `0`-based index the button should be inserted at; for a negative value of `iIndex`, the button is
       * inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getButtons buttons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllButtons(): IButton[];
    /**
     * Removes a button from the aggregation {@link #getButtons buttons}.
     */
    removeButton(
      /**
       * The button to remove or its index or id
       */
      vButton: int | string | IButton
    ): IButton;
  }

  export interface $SegmentedButtonSettings extends $WebComponentSettings {
    /**
     * Defines the buttons of component.
     *
     *  **Note:** Multiple buttons are allowed.
     *
     *  **Note:** Use the `sap.ui.webc.main.ToggleButton` for the intended design.
     */
    buttons?: IButton[] | IButton | AggregationBindingInfo;

    /**
     * Fired when the selected button changes.
     */
    selectionChange?: Function;
  }
}

declare module "sap/ui/webc/main/Select" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { ISelectOption } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState } from "sap/ui/core/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The `sap.ui.webc.main.Select` component is used to create a drop-down list. The items inside
   * the `sap.ui.webc.main.Select` define the available options by using the `sap.ui.webc.main.Option` component.
   *
   * Keyboard Handling: The `sap.ui.webc.main.Select` provides advanced keyboard handling.
   *
   *
   *
   * 	 - [F4, ALT+UP, ALT+DOWN, SPACE, ENTER] - Opens/closes the drop-down.
   * 	 - [UP, DOWN] - If the drop-down is closed - changes selection to the next or the previous option. If
   * 			the drop-down is opened - moves focus to the next or the previous option.
   * 	 - [SPACE, ENTER] - If the drop-down is opened - selects the focused option.
   * 	 - [ESC] - Closes the drop-down without changing the selection.
   * 	 - [HOME] - Navigates to first option
   * 	 - [END] - Navigates to the last option
   *
   *
   * Stable DOM Refs:
   *
   * In the context of `sap.ui.webc.main.Select`, you can provide a custom stable DOM ref for:
   * 	 - Every `sap.ui.webc.main.Option` that you provide. Example: `
   * 			`
   */
  export default class Select extends WebComponent {
    /**
     * Constructor for a new `Select`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SelectSettings
    );
    /**
     * Constructor for a new `Select`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SelectSettings
    );

    /**
     * Adds some option to the aggregation {@link #getOptions options}.
     */
    addOption(
      /**
       * The option to add; if empty, nothing is inserted
       */
      oOption: ISelectOption
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.Select`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Select` itself.
     *
     * Fired when the selected option changes.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Select` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.Select`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Select` itself.
     *
     * Fired when the selected option changes.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Select` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the options in the aggregation {@link #getOptions options}.
     */
    destroyOptions(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.Select`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Select with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Select>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the selected option.
         */
        selectedOption?: HTMLElement;
      }
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Select.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form. The value of the component
     * will be the value of the currently selected `sap.ui.webc.main.Option`.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the `sap.ui.webc.main.Select`
     * so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit
     * a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets content of aggregation {@link #getOptions options}.
     *
     * Defines the component options.
     *
     *
     *
     *  **Note:** Only one selected option is allowed. If more than one option is defined as selected, the last
     * one would be considered as the selected one.
     *
     *
     *
     *  **Note:** Use the `sap.ui.webc.main.Option` component to define the desired options.
     */
    getOptions(): ISelectOption[];
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Returns the currently selected option.
     */
    getSelectedOption(): void;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Checks for the provided `sap.ui.webc.main.ISelectOption` in the aggregation {@link #getOptions options}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfOption(
      /**
       * The option whose index is looked for
       */
      oOption: ISelectOption
    ): int;
    /**
     * Inserts a option into the aggregation {@link #getOptions options}.
     */
    insertOption(
      /**
       * The option to insert; if empty, nothing is inserted
       */
      oOption: ISelectOption,
      /**
       * The `0`-based index the option should be inserted at; for a negative value of `iIndex`, the option is
       * inserted at position 0; for a value greater than the current size of the aggregation, the option is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getOptions options}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllOptions(): ISelectOption[];
    /**
     * Removes a option from the aggregation {@link #getOptions options}.
     */
    removeOption(
      /**
       * The option to remove or its index or id
       */
      vOption: int | string | ISelectOption
    ): ISelectOption;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form. The value of the component
     * will be the value of the currently selected `sap.ui.webc.main.Option`.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the `sap.ui.webc.main.Select`
     * so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit
     * a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
  }

  export interface $SelectSettings extends $WebComponentSettings {
    /**
     * Defines whether the component is in disabled state.
     *
     *  **Note:** A disabled component is noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form. The value of the component
     * will be the value of the currently selected `sap.ui.webc.main.Option`.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the `sap.ui.webc.main.Select`
     * so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit
     * a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the component options.
     *
     *
     *
     *  **Note:** Only one selected option is allowed. If more than one option is defined as selected, the last
     * one would be considered as the selected one.
     *
     *
     *
     *  **Note:** Use the `sap.ui.webc.main.Option` component to define the desired options.
     */
    options?: ISelectOption[] | ISelectOption | AggregationBindingInfo;

    /**
     * Fired when the selected option changes.
     */
    change?: Function;
  }
}

declare module "sap/ui/webc/main/Slider" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The Slider component represents a numerical range and a handle (grip). The purpose of the component
   * is to enable visual selection of a value in a continuous numerical range by moving an adjustable handle.
   *
   * Structure: The most important properties of the Slider are:
   * 	 - min - The minimum value of the slider range
   * 	 - max - The maximum value of the slider range
   * 	 - value - The current value of the slider
   * 	 - step - Determines the increments in which the slider will move
   * 	 - showTooltip - Determines if a tooltip should be displayed above the handle
   * 	 - showTickmarks - Displays a visual divider between the step values
   * 	 - labelInterval - Labels some or all of the tickmarks with their values.
   *
   * Usage: The most common usecase is to select values on a continuous numerical scale (e.g. temperature,
   * volume, etc. ).
   *
   * Responsive Behavior: The `sap.ui.webc.main.Slider` component adjusts to the size of its parent container
   * by recalculating and resizing the width of the control. You can move the slider handle in several different
   * ways:
   * 	 - Drag and drop to the desired value
   * 	 - Click/tap on the range bar to move the handle to that location
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.Slider` exposes the following CSS Shadow Parts:
   * 	 - progress-container - Used to style the progress container(the thin line) of the `sap.ui.webc.main.Slider`
   *
   * 	 - progress-bar - Used to style the progress bar, which shows the progress of the `sap.ui.webc.main.Slider`
   *
   * 	 - handle - Used to style the handle of the `sap.ui.webc.main.Slider`
   *
   * Keyboard Handling:
   *
   *
   * 	 - `Left or Down Arrow` - Moves the handle one step to the left, effectively decreasing the component's
   * 			value by `step` amount;
   * 	 - `Right or Up Arrow` - Moves the handle one step to the right, effectively increasing the component's
   * 			value by `step` amount;
   * 	 - `Left or Down Arrow + Ctrl/Cmd` - Moves the handle to the left with step equal to 1/10th of the entire
   * 			range, effectively decreasing the component's value by 1/10th of the range;
   * 	 - `Right or Up Arrow + Ctrl/Cmd` - Moves the handle to the right with step equal to 1/10th of the entire
   * 			range, effectively increasing the component's value by 1/10th of the range;
   * 	 - `Plus` - Same as `Right or Up Arrow`
   * 	 - `Minus` - Same as `Left or Down Arrow`
   * 	 - `Home` - Moves the handle to the beginning of the range;
   * 	 - `End` - Moves the handle to the end of the range;
   * 	 - `Page Up` - Same as `Right or Up + Ctrl/Cmd`
   * 	 - `Page Down` - Same as `Left or Down + Ctrl/Cmd`
   * 	 - `Escape` - Resets the value property after interaction, to the position prior the component's focusing;
   */
  export default class Slider extends WebComponent {
    /**
     * Constructor for a new `Slider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SliderSettings
    );
    /**
     * Constructor for a new `Slider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SliderSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.Slider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Slider` itself.
     *
     * Fired when the value changes and the user has finished interacting with the slider.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Slider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.Slider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Slider` itself.
     *
     * Fired when the value changes and the user has finished interacting with the slider.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Slider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.Slider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Slider` itself.
     *
     * Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Slider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.Slider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Slider` itself.
     *
     * Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Slider` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.Slider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.Slider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Slider with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Slider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the slider is in disabled state.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getLabelInterval labelInterval}.
     *
     * Displays a label with a value on every N-th step.
     *
     *  **Note:** The step and tickmarks properties must be enabled. Example - if the step value is set to 2
     * and the label interval is also specified to 2 - then every second tickmark will be labelled, which means
     * every 4th value number.
     *
     * Default value is `0`.
     */
    getLabelInterval(): int;
    /**
     * Gets current value of property {@link #getMax max}.
     *
     * Defines the maximum value of the slider
     *
     * Default value is `100`.
     */
    getMax(): float;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Slider.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMin min}.
     *
     * Defines the minimum value of the slider
     *
     * Default value is `0`.
     */
    getMin(): float;
    /**
     * Gets current value of property {@link #getShowTickmarks showTickmarks}.
     *
     * Enables tick marks visualization for each step.
     *
     *  **Note:** The step must be a positive number.
     *
     * Default value is `false`.
     */
    getShowTickmarks(): boolean;
    /**
     * Gets current value of property {@link #getShowTooltip showTooltip}.
     *
     * Enables handle tooltip displaying the current value.
     *
     * Default value is `false`.
     */
    getShowTooltip(): boolean;
    /**
     * Gets current value of property {@link #getStep step}.
     *
     * Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in
     * possible selection of the values 0, 5, 10).
     *
     *  **Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than
     * a number, the component fallbacks to its default value.
     *
     * Default value is `1`.
     */
    getStep(): int;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Current value of the slider
     *
     * Default value is `0`.
     */
    getValue(): float;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the slider is in disabled state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLabelInterval labelInterval}.
     *
     * Displays a label with a value on every N-th step.
     *
     *  **Note:** The step and tickmarks properties must be enabled. Example - if the step value is set to 2
     * and the label interval is also specified to 2 - then every second tickmark will be labelled, which means
     * every 4th value number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setLabelInterval(
      /**
       * New value for property `labelInterval`
       */
      iLabelInterval?: int
    ): this;
    /**
     * Sets a new value for property {@link #getMax max}.
     *
     * Defines the maximum value of the slider
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `100`.
     */
    setMax(
      /**
       * New value for property `max`
       */
      fMax?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMin min}.
     *
     * Defines the minimum value of the slider
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setMin(
      /**
       * New value for property `min`
       */
      fMin?: float
    ): this;
    /**
     * Sets a new value for property {@link #getShowTickmarks showTickmarks}.
     *
     * Enables tick marks visualization for each step.
     *
     *  **Note:** The step must be a positive number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowTickmarks(
      /**
       * New value for property `showTickmarks`
       */
      bShowTickmarks?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowTooltip showTooltip}.
     *
     * Enables handle tooltip displaying the current value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowTooltip(
      /**
       * New value for property `showTooltip`
       */
      bShowTooltip?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getStep step}.
     *
     * Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in
     * possible selection of the values 0, 5, 10).
     *
     *  **Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than
     * a number, the component fallbacks to its default value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setStep(
      /**
       * New value for property `step`
       */
      iStep?: int
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Current value of the slider
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      fValue?: float
    ): this;
  }

  export interface $SliderSettings extends $WebComponentSettings {
    /**
     * Defines whether the slider is in disabled state.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Displays a label with a value on every N-th step.
     *
     *  **Note:** The step and tickmarks properties must be enabled. Example - if the step value is set to 2
     * and the label interval is also specified to 2 - then every second tickmark will be labelled, which means
     * every 4th value number.
     */
    labelInterval?: int | PropertyBindingInfo;

    /**
     * Defines the maximum value of the slider
     */
    max?: float | PropertyBindingInfo;

    /**
     * Defines the minimum value of the slider
     */
    min?: float | PropertyBindingInfo;

    /**
     * Enables tick marks visualization for each step.
     *
     *  **Note:** The step must be a positive number.
     */
    showTickmarks?: boolean | PropertyBindingInfo;

    /**
     * Enables handle tooltip displaying the current value.
     */
    showTooltip?: boolean | PropertyBindingInfo;

    /**
     * Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in
     * possible selection of the values 0, 5, 10).
     *
     *  **Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than
     * a number, the component fallbacks to its default value.
     */
    step?: int | PropertyBindingInfo;

    /**
     * Current value of the slider
     */
    value?: float | PropertyBindingInfo;

    /**
     * Fired when the value changes and the user has finished interacting with the slider.
     */
    change?: Function;

    /**
     * Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.
     */
    input?: Function;
  }
}

declare module "sap/ui/webc/main/StandardListItem" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IListItem, ListItemType } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import { ValueState } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * The `sap.ui.webc.main.StandardListItem` represents the simplest type of item for a `sap.ui.webc.main.List`.
   *
   * This is a list item, providing the most common use cases such as `text`, `image` and `icon`.
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.StandardListItem` exposes the following CSS Shadow Parts:
   * 	 - title - Used to style the title of the list item
   * 	 - description - Used to style the description of the list item
   * 	 - additional-text - Used to style the additionalText of the list item
   * 	 - icon - Used to style the icon of the list item
   */
  export default class StandardListItem
    extends WebComponent
    implements IListItem {
    __implements__sap_ui_webc_main_IListItem: boolean;
    /**
     * Constructor for a new `StandardListItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $StandardListItemSettings
    );
    /**
     * Constructor for a new `StandardListItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $StandardListItemSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:detailClick detailClick} event of this `sap.ui.webc.main.StandardListItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.StandardListItem` itself.
     *
     * Fired when the user clicks on the detail button when type is `Detail`.
     */
    attachDetailClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.StandardListItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:detailClick detailClick} event of this `sap.ui.webc.main.StandardListItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.StandardListItem` itself.
     *
     * Fired when the user clicks on the detail button when type is `Detail`.
     */
    attachDetailClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.StandardListItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:detailClick detailClick} event of this `sap.ui.webc.main.StandardListItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDetailClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.StandardListItem with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StandardListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:detailClick detailClick} to attached listeners.
     */
    fireDetailClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. Note: If not provided a default text alternative will
     * be set, if present.
     *
     * Default value is `empty string`.
     */
    getAccessibleName(): string;
    /**
     * Gets current value of property {@link #getAdditionalText additionalText}.
     *
     * Defines the `additionalText`, displayed in the end of the list item.
     */
    getAdditionalText(): string;
    /**
     * Gets current value of property {@link #getAdditionalTextState additionalTextState}.
     *
     * Defines the state of the `additionalText`.
     *  Available options are: `"None"` (by default), `"Success"`, `"Warning"`, `"Information"` and `"Erorr"`.
     *
     * Default value is `None`.
     */
    getAdditionalTextState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Defines the description displayed right under the item text, if such is present.
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the `icon` source URI.
     *
     *  **Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the
     * Icon Explorer.
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getIconEnd iconEnd}.
     *
     * Defines whether the `icon` should be displayed in the beginning of the list item or in the end.
     *
     *  **Note:** If `image` is set, the `icon` would be displayed after the `image`.
     *
     * Default value is `false`.
     */
    getIconEnd(): boolean;
    /**
     * Gets current value of property {@link #getImage image}.
     *
     * Defines the `image` source URI.
     *
     *  **Note:** The `image` would be displayed in the beginning of the list item.
     */
    getImage(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.StandardListItem.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines the selected state of the `ListItem`.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the list items. Available options are `Active` (by default),
     * `Inactive` and `Detail`.
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press and hover, while with
     * type `Inactive` and `Detail` - will not.
     *
     * Default value is `Active`.
     */
    getType(): ListItemType | keyof typeof ListItemType;
    /**
     * Sets a new value for property {@link #getAccessibleName accessibleName}.
     *
     * Defines the text alternative of the component. Note: If not provided a default text alternative will
     * be set, if present.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAccessibleName(
      /**
       * New value for property `accessibleName`
       */
      sAccessibleName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getAdditionalText additionalText}.
     *
     * Defines the `additionalText`, displayed in the end of the list item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAdditionalText(
      /**
       * New value for property `additionalText`
       */
      sAdditionalText: string
    ): this;
    /**
     * Sets a new value for property {@link #getAdditionalTextState additionalTextState}.
     *
     * Defines the state of the `additionalText`.
     *  Available options are: `"None"` (by default), `"Success"`, `"Warning"`, `"Information"` and `"Erorr"`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setAdditionalTextState(
      /**
       * New value for property `additionalTextState`
       */
      sAdditionalTextState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Defines the description displayed right under the item text, if such is present.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription: string
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the `icon` source URI.
     *
     *  **Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the
     * Icon Explorer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon: string
    ): this;
    /**
     * Sets a new value for property {@link #getIconEnd iconEnd}.
     *
     * Defines whether the `icon` should be displayed in the beginning of the list item or in the end.
     *
     *  **Note:** If `image` is set, the `icon` would be displayed after the `image`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setIconEnd(
      /**
       * New value for property `iconEnd`
       */
      bIconEnd?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getImage image}.
     *
     * Defines the `image` source URI.
     *
     *  **Note:** The `image` would be displayed in the beginning of the list item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setImage(
      /**
       * New value for property `image`
       */
      sImage: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines the selected state of the `ListItem`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the list items. Available options are `Active` (by default),
     * `Inactive` and `Detail`.
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press and hover, while with
     * type `Inactive` and `Detail` - will not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Active`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ListItemType | keyof typeof ListItemType
    ): this;
  }

  export interface $StandardListItemSettings extends $WebComponentSettings {
    /**
     * Defines the text alternative of the component. Note: If not provided a default text alternative will
     * be set, if present.
     */
    accessibleName?: string | PropertyBindingInfo;

    /**
     * Defines the `additionalText`, displayed in the end of the list item.
     */
    additionalText?: string | PropertyBindingInfo;

    /**
     * Defines the state of the `additionalText`.
     *  Available options are: `"None"` (by default), `"Success"`, `"Warning"`, `"Information"` and `"Erorr"`.
     */
    additionalTextState?:
      | (ValueState | keyof typeof ValueState)
      | PropertyBindingInfo;

    /**
     * Defines the description displayed right under the item text, if such is present.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Defines the `icon` source URI.
     *
     *  **Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the
     * Icon Explorer.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Defines whether the `icon` should be displayed in the beginning of the list item or in the end.
     *
     *  **Note:** If `image` is set, the `icon` would be displayed after the `image`.
     */
    iconEnd?: boolean | PropertyBindingInfo;

    /**
     * Defines the `image` source URI.
     *
     *  **Note:** The `image` would be displayed in the beginning of the list item.
     */
    image?: string | PropertyBindingInfo;

    /**
     * Defines the selected state of the `ListItem`.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the visual indication and behavior of the list items. Available options are `Active` (by default),
     * `Inactive` and `Detail`.
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press and hover, while with
     * type `Inactive` and `Detail` - will not.
     */
    type?: (ListItemType | keyof typeof ListItemType) | PropertyBindingInfo;

    /**
     * Fired when the user clicks on the detail button when type is `Detail`.
     */
    detailClick?: Function;
  }
}

declare module "sap/ui/webc/main/StepInput" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.StepInput` consists of an input field and buttons with icons to increase/decrease
   * the value with the predefined step.
   *
   *  The user can change the value of the component by pressing the increase/decrease buttons, by typing
   * a number directly, by using the keyboard up/down and page up/down, or by using the mouse scroll wheel.
   * Decimal values are supported.
   *
   * Usage:
   *
   * The default step is 1 but the app developer can set a different one.
   *
   * App developers can set a maximum and minimum value for the `StepInput`. The increase/decrease button
   * and the up/down keyboard navigation become disabled when the value reaches the max/min or a new value
   * is entered from the input which is greater/less than the max/min.
   *
   *  When to use::
   * 	 - To adjust amounts, quantities, or other values quickly.
   * 	 - To adjust values for a specific step.
   *
   * When not to use::
   * 	 - To enter a static number (for example, postal code, phone number, or ID). In this case, use the regular
   * 			`sap.ui.webc.main.Input` instead.
   * 	 - To display a value that rarely needs to be adjusted and does not pertain to a particular step. In
   * 			this case, use the regular `sap.ui.webc.main.Input` instead.
   * 	 - To enter dates and times. In this case, use date/time related components instead.
   */
  export default class StepInput extends WebComponent {
    /**
     * Constructor for a new `StepInput`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $StepInputSettings
    );
    /**
     * Constructor for a new `StepInput`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $StepInputSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.StepInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.StepInput` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.StepInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.StepInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.StepInput` itself.
     *
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.StepInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.StepInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.StepInput with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StepInput>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Determines whether the component is displayed as disabled.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getMax max}.
     *
     * Defines a maximum value of the component.
     */
    getMax(): float;
    /**
     * Returns a metadata object for class sap.ui.webc.main.StepInput.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMin min}.
     *
     * Defines a minimum value of the component.
     */
    getMin(): float;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * Default value is `undefined`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Determines whether the component is displayed as read-only.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getStep step}.
     *
     * Defines a step of increasing/decreasing the value of the component.
     *
     * Default value is `1`.
     */
    getStep(): float;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines a value of the component.
     *
     * Default value is `0`.
     */
    getValue(): float;
    /**
     * Gets current value of property {@link #getValuePrecision valuePrecision}.
     *
     * Determines the number of digits after the decimal point of the component.
     *
     * Default value is `0`.
     */
    getValuePrecision(): int;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Determines whether the component is displayed as disabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMax max}.
     *
     * Defines a maximum value of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMax(
      /**
       * New value for property `max`
       */
      fMax: float
    ): this;
    /**
     * Sets a new value for property {@link #getMin min}.
     *
     * Defines a minimum value of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMin(
      /**
       * New value for property `min`
       */
      fMin: float
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Determines whether the component is displayed as read-only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getStep step}.
     *
     * Defines a step of increasing/decreasing the value of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setStep(
      /**
       * New value for property `step`
       */
      fStep?: float
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines a value of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      fValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getValuePrecision valuePrecision}.
     *
     * Determines the number of digits after the decimal point of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setValuePrecision(
      /**
       * New value for property `valuePrecision`
       */
      iValuePrecision?: int
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
  }

  export interface $StepInputSettings extends $WebComponentSettings {
    /**
     * Determines whether the component is displayed as disabled.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines a maximum value of the component.
     */
    max?: float | PropertyBindingInfo;

    /**
     * Defines a minimum value of the component.
     */
    min?: float | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Determines whether the component is displayed as read-only.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines a step of increasing/decreasing the value of the component.
     */
    step?: float | PropertyBindingInfo;

    /**
     * Defines a value of the component.
     */
    value?: float | PropertyBindingInfo;

    /**
     * Determines the number of digits after the decimal point of the component.
     */
    valuePrecision?: int | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Fired when the input operation has finished by pressing Enter or on focusout.
     */
    change?: Function;
  }
}

declare module "sap/ui/webc/main/SuggestionItem" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IInputSuggestionItem, ListItemType } from "sap/ui/webc/main/library";

  import { ValueState } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * The `sap.ui.webc.main.SuggestionItem` represents the suggestion item of the `sap.ui.webc.main.Input`.
   */
  export default class SuggestionItem
    extends WebComponent
    implements IInputSuggestionItem {
    __implements__sap_ui_webc_main_IInputSuggestionItem: boolean;
    /**
     * Constructor for a new `SuggestionItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SuggestionItemSettings
    );
    /**
     * Constructor for a new `SuggestionItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SuggestionItemSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.SuggestionItem with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SuggestionItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAdditionalText additionalText}.
     *
     * Defines the `additionalText`, displayed in the end of the item.
     */
    getAdditionalText(): string;
    /**
     * Gets current value of property {@link #getAdditionalTextState additionalTextState}.
     *
     * Defines the state of the `additionalText`.
     *
     *  Available options are: `"None"` (by default), `"Success"`, `"Warning"` and `"Erorr"`.
     *
     * Default value is `None`.
     */
    getAdditionalTextState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Defines the description displayed right under the item text, if such is present.
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getGroup group}.
     *
     * Defines the item to be displayed as a group item.
     *
     *  **Note:** When set, the other properties, such as `image`, `icon`, `description`, etc. will be omitted
     * and only the `text` will be displayed.
     *
     * Default value is `false`.
     */
    getGroup(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the `icon` source URI.
     *
     *  **Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the
     * Icon Explorer.
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getIconEnd iconEnd}.
     *
     * Defines whether the `icon` should be displayed in the beginning of the item or in the end.
     *
     *  **Note:** If `image` is set, the `icon` would be displayed after the `image`.
     *
     * Default value is `false`.
     */
    getIconEnd(): boolean;
    /**
     * Gets current value of property {@link #getImage image}.
     *
     * Defines the `image` source URI.
     *
     *  **Note:** The `image` would be displayed in the beginning of the item.
     */
    getImage(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.SuggestionItem.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the item. Available options are `Active` (by default),
     * `Inactive` and `Detail`.
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press and hover, while when
     * `Inactive` or `Detail` - will not.
     *
     * Default value is `Active`.
     */
    getType(): ListItemType | keyof typeof ListItemType;
    /**
     * Sets a new value for property {@link #getAdditionalText additionalText}.
     *
     * Defines the `additionalText`, displayed in the end of the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAdditionalText(
      /**
       * New value for property `additionalText`
       */
      sAdditionalText: string
    ): this;
    /**
     * Sets a new value for property {@link #getAdditionalTextState additionalTextState}.
     *
     * Defines the state of the `additionalText`.
     *
     *  Available options are: `"None"` (by default), `"Success"`, `"Warning"` and `"Erorr"`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setAdditionalTextState(
      /**
       * New value for property `additionalTextState`
       */
      sAdditionalTextState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Defines the description displayed right under the item text, if such is present.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription: string
    ): this;
    /**
     * Sets a new value for property {@link #getGroup group}.
     *
     * Defines the item to be displayed as a group item.
     *
     *  **Note:** When set, the other properties, such as `image`, `icon`, `description`, etc. will be omitted
     * and only the `text` will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setGroup(
      /**
       * New value for property `group`
       */
      bGroup?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the `icon` source URI.
     *
     *  **Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the
     * Icon Explorer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon: string
    ): this;
    /**
     * Sets a new value for property {@link #getIconEnd iconEnd}.
     *
     * Defines whether the `icon` should be displayed in the beginning of the item or in the end.
     *
     *  **Note:** If `image` is set, the `icon` would be displayed after the `image`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setIconEnd(
      /**
       * New value for property `iconEnd`
       */
      bIconEnd?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getImage image}.
     *
     * Defines the `image` source URI.
     *
     *  **Note:** The `image` would be displayed in the beginning of the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setImage(
      /**
       * New value for property `image`
       */
      sImage: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text of the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the item. Available options are `Active` (by default),
     * `Inactive` and `Detail`.
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press and hover, while when
     * `Inactive` or `Detail` - will not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Active`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ListItemType | keyof typeof ListItemType
    ): this;
  }

  export interface $SuggestionItemSettings extends $WebComponentSettings {
    /**
     * Defines the `additionalText`, displayed in the end of the item.
     */
    additionalText?: string | PropertyBindingInfo;

    /**
     * Defines the state of the `additionalText`.
     *
     *  Available options are: `"None"` (by default), `"Success"`, `"Warning"` and `"Erorr"`.
     */
    additionalTextState?:
      | (ValueState | keyof typeof ValueState)
      | PropertyBindingInfo;

    /**
     * Defines the description displayed right under the item text, if such is present.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Defines the item to be displayed as a group item.
     *
     *  **Note:** When set, the other properties, such as `image`, `icon`, `description`, etc. will be omitted
     * and only the `text` will be displayed.
     */
    group?: boolean | PropertyBindingInfo;

    /**
     * Defines the `icon` source URI.
     *
     *  **Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the
     * Icon Explorer.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Defines whether the `icon` should be displayed in the beginning of the item or in the end.
     *
     *  **Note:** If `image` is set, the `icon` would be displayed after the `image`.
     */
    iconEnd?: boolean | PropertyBindingInfo;

    /**
     * Defines the `image` source URI.
     *
     *  **Note:** The `image` would be displayed in the beginning of the item.
     */
    image?: string | PropertyBindingInfo;

    /**
     * Defines the text of the component.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the visual indication and behavior of the item. Available options are `Active` (by default),
     * `Inactive` and `Detail`.
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press and hover, while when
     * `Inactive` or `Detail` - will not.
     */
    type?: (ListItemType | keyof typeof ListItemType) | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/Switch" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import { SwitchDesign } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The `sap.ui.webc.main.Switch` component is used for changing between binary states.
   *  The component can display texts, that will be switched, based on the component state, via the `textOn`
   * and `textOff` properties, but texts longer than 3 letters will be cutted off.
   *  However, users are able to customize the width of `sap.ui.webc.main.Switch` with pure CSS (`<ui5-switch
   * style="width: 200px">`), and set widths, depending on the texts they would use.
   *  Note: the component would not automatically stretch to fit the whole text width.
   *
   * Keyboard Handling: The state can be changed by pressing the Space and Enter keys.
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.Switch` exposes the following CSS Shadow Parts:
   * 	 - slider - Used to style the track, where the handle is being slid
   * 	 - text-on - Used to style the onText
   * 	 - text-off - Used to style the offText
   * 	 - handle - Used to style the handle of the switch
   */
  export default class Switch extends WebComponent {
    /**
     * Constructor for a new `Switch`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SwitchSettings
    );
    /**
     * Constructor for a new `Switch`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SwitchSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.Switch`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Switch` itself.
     *
     * Fired when the component checked state changes.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Switch` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.Switch`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Switch` itself.
     *
     * Fired when the component checked state changes.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Switch` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.Switch`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Switch with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Switch>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getChecked checked}.
     *
     * Defines if the component is checked.
     *
     *  **Note:** The property can be changed with user interaction, either by cliking the component, or by
     * pressing the `Enter` or `Space` key.
     *
     * Default value is `false`.
     */
    getChecked(): boolean;
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Defines the component design.
     *
     *  **Note:** If `Graphical` type is set, positive and negative icons will replace the `textOn` and `textOff`.
     *
     * Default value is `Textual`.
     */
    getDesign(): SwitchDesign | keyof typeof SwitchDesign;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled.
     *
     *  **Note:** A disabled component is noninteractive.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Switch.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getTextOff textOff}.
     *
     * Defines the text, displayed when the component is not checked.
     *
     *  **Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).
     *
     * Default value is `empty string`.
     */
    getTextOff(): string;
    /**
     * Gets current value of property {@link #getTextOn textOn}.
     *
     * Defines the text, displayed when the component is checked.
     *
     *
     *
     *  **Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).
     *
     * Default value is `empty string`.
     */
    getTextOn(): string;
    /**
     * Sets a new value for property {@link #getChecked checked}.
     *
     * Defines if the component is checked.
     *
     *  **Note:** The property can be changed with user interaction, either by cliking the component, or by
     * pressing the `Enter` or `Space` key.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setChecked(
      /**
       * New value for property `checked`
       */
      bChecked?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Defines the component design.
     *
     *  **Note:** If `Graphical` type is set, positive and negative icons will replace the `textOn` and `textOff`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Textual`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: SwitchDesign | keyof typeof SwitchDesign
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled.
     *
     *  **Note:** A disabled component is noninteractive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTextOff textOff}.
     *
     * Defines the text, displayed when the component is not checked.
     *
     *  **Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTextOff(
      /**
       * New value for property `textOff`
       */
      sTextOff?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextOn textOn}.
     *
     * Defines the text, displayed when the component is checked.
     *
     *
     *
     *  **Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTextOn(
      /**
       * New value for property `textOn`
       */
      sTextOn?: string
    ): this;
  }

  export interface $SwitchSettings extends $WebComponentSettings {
    /**
     * Defines if the component is checked.
     *
     *  **Note:** The property can be changed with user interaction, either by cliking the component, or by
     * pressing the `Enter` or `Space` key.
     */
    checked?: boolean | PropertyBindingInfo;

    /**
     * Defines the component design.
     *
     *  **Note:** If `Graphical` type is set, positive and negative icons will replace the `textOn` and `textOff`.
     */
    design?: (SwitchDesign | keyof typeof SwitchDesign) | PropertyBindingInfo;

    /**
     * Defines whether the component is disabled.
     *
     *  **Note:** A disabled component is noninteractive.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the text, displayed when the component is not checked.
     *
     *  **Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).
     */
    textOff?: string | PropertyBindingInfo;

    /**
     * Defines the text, displayed when the component is checked.
     *
     *
     *
     *  **Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).
     */
    textOn?: string | PropertyBindingInfo;

    /**
     * Fired when the component checked state changes.
     */
    change?: Function;
  }
}

declare module "sap/ui/webc/main/Tab" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { ITab, SemanticColor } from "sap/ui/webc/main/library";

  import Control from "sap/ui/core/Control";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * The `sap.ui.webc.main.Tab` represents a selectable item inside a `sap.ui.webc.main.TabContainer`. It
   * defines both the item in the tab strip (top part of the `sap.ui.webc.main.TabContainer`) and the content
   * that is presented to the user once the tab is selected.
   */
  export default class Tab extends WebComponent implements ITab {
    __implements__sap_ui_webc_main_ITab: boolean;
    /**
     * Constructor for a new `Tab`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabSettings
    );
    /**
     * Constructor for a new `Tab`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Tab with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tab>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAdditionalText additionalText}.
     *
     * Represents the "additionalText" text, which is displayed in the tab filter.
     *
     * Default value is `empty string`.
     */
    getAdditionalText(): string;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Defines the tab content.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Defines the component's design color.
     *
     *  The design is applied to:
     * 	 - the component icon
     * 	 - the `text` when the component overflows
     * 	 - the tab selection line
     *
     *
     *
     *  Available designs are: `"Default"`, `"Neutral"`, `"Positive"`, `"Critical"` and `"Negative"`.
     *
     *
     *
     *  **Note:** The design depends on the current theme.
     *
     * Default value is `Default`.
     */
    getDesign(): SemanticColor | keyof typeof SemanticColor;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Enabled items can be selected.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the icon source URI to be displayed as graphical element within the component. The SAP-icons
     * font provides numerous built-in icons. See all the available icons in the Icon Explorer.
     *
     * Default value is `empty string`.
     */
    getIcon(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Tab.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Specifies if the component is selected.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The text to be displayed for the item.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getAdditionalText additionalText}.
     *
     * Represents the "additionalText" text, which is displayed in the tab filter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAdditionalText(
      /**
       * New value for property `additionalText`
       */
      sAdditionalText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Defines the component's design color.
     *
     *  The design is applied to:
     * 	 - the component icon
     * 	 - the `text` when the component overflows
     * 	 - the tab selection line
     *
     *
     *
     *  Available designs are: `"Default"`, `"Neutral"`, `"Positive"`, `"Critical"` and `"Negative"`.
     *
     *
     *
     *  **Note:** The design depends on the current theme.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: SemanticColor | keyof typeof SemanticColor
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Enabled items can be selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the icon source URI to be displayed as graphical element within the component. The SAP-icons
     * font provides numerous built-in icons. See all the available icons in the Icon Explorer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Specifies if the component is selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The text to be displayed for the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $TabSettings extends $WebComponentSettings {
    /**
     * Represents the "additionalText" text, which is displayed in the tab filter.
     */
    additionalText?: string | PropertyBindingInfo;

    /**
     * Defines the component's design color.
     *
     *  The design is applied to:
     * 	 - the component icon
     * 	 - the `text` when the component overflows
     * 	 - the tab selection line
     *
     *
     *
     *  Available designs are: `"Default"`, `"Neutral"`, `"Positive"`, `"Critical"` and `"Negative"`.
     *
     *
     *
     *  **Note:** The design depends on the current theme.
     */
    design?: (SemanticColor | keyof typeof SemanticColor) | PropertyBindingInfo;

    /**
     * Enabled items can be selected.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the icon source URI to be displayed as graphical element within the component. The SAP-icons
     * font provides numerous built-in icons. See all the available icons in the Icon Explorer.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Specifies if the component is selected.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * The text to be displayed for the item.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the tab content.
     */
    content?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/ui/webc/main/TabContainer" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { ITab, IButton, TabLayout } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.TabContainer` represents a collection of tabs with associated content. Navigation
   * through the tabs changes the content display of the currently active content area. A tab can be labeled
   * with text only, or icons with text.
   *
   * Structure:
   *
   * The `sap.ui.webc.main.TabContainer` can hold two types of entities:
   * 	 - `sap.ui.webc.main.Tab` - contains all the information on an item (text and icon)
   * 	 - `sap.ui.webc.main.TabSeparator` - used to separate tabs with a vertical line
   *
   * Stable DOM Refs:
   *
   * In the context of `sap.ui.webc.main.TabContainer`, you can provide a custom stable DOM refs for:
   *
   * 	 - Each `sap.ui.webc.main.Tab` Example: `  `
   */
  export default class TabContainer extends WebComponent {
    /**
     * Constructor for a new `TabContainer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabContainerSettings
    );
    /**
     * Constructor for a new `TabContainer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabContainerSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: ITab
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tabSelect tabSelect} event of this `sap.ui.webc.main.TabContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TabContainer` itself.
     *
     * Fired when a tab is selected.
     */
    attachTabSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TabContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tabSelect tabSelect} event of this `sap.ui.webc.main.TabContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TabContainer` itself.
     *
     * Fired when a tab is selected.
     */
    attachTabSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TabContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Destroys the overflowButton in the aggregation {@link #getOverflowButton overflowButton}.
     */
    destroyOverflowButton(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:tabSelect tabSelect} event of this `sap.ui.webc.main.TabContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTabSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.TabContainer with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TabContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:tabSelect tabSelect} to attached listeners.
     */
    fireTabSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected `tab`.
         */
        tab?: HTMLElement;
        /**
         * The selected `tab` index.
         */
        tabIndex?: int;
      }
    ): this;
    /**
     * Gets current value of property {@link #getCollapsed collapsed}.
     *
     * Defines whether the tab content is collapsed.
     *
     * Default value is `false`.
     */
    getCollapsed(): boolean;
    /**
     * Gets current value of property {@link #getFixed fixed}.
     *
     * Defines whether the tabs are in a fixed state that is not expandable/collapsible by user interaction.
     *
     * Default value is `false`.
     */
    getFixed(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the tabs.
     *
     *  **Note:** Use `sap.ui.webc.main.Tab` and `sap.ui.webc.main.TabSeparator` for the intended design.
     */
    getItems(): ITab[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.TabContainer.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets content of aggregation {@link #getOverflowButton overflowButton}.
     *
     * Defines the button which will open the overflow menu. If nothing is provided to this slot, the default
     * button will be used.
     */
    getOverflowButton(): IButton;
    /**
     * Gets current value of property {@link #getShowOverflow showOverflow}.
     *
     * Defines whether the overflow select list is displayed.
     *
     *  The overflow select list represents a list, where all tab filters are displayed so that it's easier
     * for the user to select a specific tab filter.
     *
     * Default value is `false`.
     */
    getShowOverflow(): boolean;
    /**
     * Gets current value of property {@link #getTabLayout tabLayout}.
     *
     * Defines the alignment of the content and the `additionalText` of a tab.
     *
     *
     *
     *  **Note:** The content and the `additionalText` would be displayed vertically by defualt, but when set
     * to `Inline`, they would be displayed horizontally.
     *
     *
     *
     *  Available options are:
     * 	 - `Standard`
     * 	 - `Inline`
     *
     * Default value is `Standard`.
     */
    getTabLayout(): TabLayout | keyof typeof TabLayout;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.webc.main.ITab` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: ITab
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: ITab,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): ITab[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | ITab
    ): ITab;
    /**
     * Sets a new value for property {@link #getCollapsed collapsed}.
     *
     * Defines whether the tab content is collapsed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setCollapsed(
      /**
       * New value for property `collapsed`
       */
      bCollapsed?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFixed fixed}.
     *
     * Defines whether the tabs are in a fixed state that is not expandable/collapsible by user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFixed(
      /**
       * New value for property `fixed`
       */
      bFixed?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets the aggregated {@link #getOverflowButton overflowButton}.
     */
    setOverflowButton(
      /**
       * The overflowButton to set
       */
      oOverflowButton: IButton
    ): this;
    /**
     * Sets a new value for property {@link #getShowOverflow showOverflow}.
     *
     * Defines whether the overflow select list is displayed.
     *
     *  The overflow select list represents a list, where all tab filters are displayed so that it's easier
     * for the user to select a specific tab filter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowOverflow(
      /**
       * New value for property `showOverflow`
       */
      bShowOverflow?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTabLayout tabLayout}.
     *
     * Defines the alignment of the content and the `additionalText` of a tab.
     *
     *
     *
     *  **Note:** The content and the `additionalText` would be displayed vertically by defualt, but when set
     * to `Inline`, they would be displayed horizontally.
     *
     *
     *
     *  Available options are:
     * 	 - `Standard`
     * 	 - `Inline`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     */
    setTabLayout(
      /**
       * New value for property `tabLayout`
       */
      sTabLayout?: TabLayout | keyof typeof TabLayout
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $TabContainerSettings extends $WebComponentSettings {
    /**
     * Defines whether the tab content is collapsed.
     */
    collapsed?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the tabs are in a fixed state that is not expandable/collapsible by user interaction.
     */
    fixed?: boolean | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines whether the overflow select list is displayed.
     *
     *  The overflow select list represents a list, where all tab filters are displayed so that it's easier
     * for the user to select a specific tab filter.
     */
    showOverflow?: boolean | PropertyBindingInfo;

    /**
     * Defines the alignment of the content and the `additionalText` of a tab.
     *
     *
     *
     *  **Note:** The content and the `additionalText` would be displayed vertically by defualt, but when set
     * to `Inline`, they would be displayed horizontally.
     *
     *
     *
     *  Available options are:
     * 	 - `Standard`
     * 	 - `Inline`
     */
    tabLayout?: (TabLayout | keyof typeof TabLayout) | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the tabs.
     *
     *  **Note:** Use `sap.ui.webc.main.Tab` and `sap.ui.webc.main.TabSeparator` for the intended design.
     */
    items?: ITab[] | ITab | AggregationBindingInfo;

    /**
     * Defines the button which will open the overflow menu. If nothing is provided to this slot, the default
     * button will be used.
     */
    overflowButton?: IButton;

    /**
     * Fired when a tab is selected.
     */
    tabSelect?: Function;
  }
}

declare module "sap/ui/webc/main/Table" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import {
    ITableColumn,
    ITableRow,
    TableGrowingMode,
    TableMode,
  } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Table` component provides a set of sophisticated and convenient functions for responsive
   * table design. It provides a comprehensive set of features for displaying and dealing with vast amounts
   * of data.
   *
   *  To render the `Table` properly, the order of the `columns` should match with the order of the item `cells`
   * in the `rows`.
   *
   *  Desktop and tablet devices are supported. On tablets, special consideration should be given to the number
   * of visible columns and rows due to the limited performance of some devices.
   *
   * Selection: To benefit from the selection mechanism of `sap.ui.webc.main.Table` component, you can use
   * the available selection modes: `SingleSelect` and `MultiSelect`.
   *  In additition to the used mode, you can also specify the `sap.ui.webc.main.TableRow` type choosing between
   * `Active` or `Inactive`.
   *
   *  In `SingleSelect` mode, you can select both an `Active` and `Inactive` row via mouse or by pressing
   * the `Space` or `Enter` keys.
   *  In `MultiSelect` mode, you can select both an `Active` and `Inactive` row by pressing the `Space` key
   * when a row is on focus or via mouse click over the selection checkbox of the row. In order to select
   * all the available rows at once, you can use the selection checkbox presented in the table's header.
   *
   *  **Note:** Currently, when a column is shown as a pop-in, the visual indication for selection is not
   * presented over it.
   */
  export default class Table extends WebComponent {
    /**
     * Constructor for a new `Table`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableSettings
    );
    /**
     * Constructor for a new `Table`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableSettings
    );

    /**
     * Adds some column to the aggregation {@link #getColumns columns}.
     */
    addColumn(
      /**
       * The column to add; if empty, nothing is inserted
       */
      oColumn: ITableColumn
    ): this;
    /**
     * Adds some row to the aggregation {@link #getRows rows}.
     */
    addRow(
      /**
       * The row to add; if empty, nothing is inserted
       */
      oRow: ITableRow
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loadMore loadMore} event of this `sap.ui.webc.main.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Table` itself.
     *
     * Fired when the user presses the `More` button or scrolls to the table's end.
     *
     *
     *
     * **Note:** The event will be fired if `growing` is set to `Button` or `Scroll`.
     */
    attachLoadMore(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loadMore loadMore} event of this `sap.ui.webc.main.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Table` itself.
     *
     * Fired when the user presses the `More` button or scrolls to the table's end.
     *
     *
     *
     * **Note:** The event will be fired if `growing` is set to `Button` or `Scroll`.
     */
    attachLoadMore(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:popinChange popinChange} event of this `sap.ui.webc.main.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Table` itself.
     *
     * Fired when `sap.ui.webc.main.TableColumn` is shown as a pop-in instead of hiding it.
     */
    attachPopinChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:popinChange popinChange} event of this `sap.ui.webc.main.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Table` itself.
     *
     * Fired when `sap.ui.webc.main.TableColumn` is shown as a pop-in instead of hiding it.
     */
    attachPopinChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:rowClick rowClick} event of this `sap.ui.webc.main.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Table` itself.
     *
     * Fired when a row in `Active` mode is clicked or `Enter` key is pressed.
     */
    attachRowClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:rowClick rowClick} event of this `sap.ui.webc.main.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Table` itself.
     *
     * Fired when a row in `Active` mode is clicked or `Enter` key is pressed.
     */
    attachRowClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Table` itself.
     *
     * Fired when selection is changed by user interaction in `SingleSelect` and `MultiSelect` modes.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Table` itself.
     *
     * Fired when selection is changed by user interaction in `SingleSelect` and `MultiSelect` modes.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the columns in the aggregation {@link #getColumns columns}.
     */
    destroyColumns(): this;
    /**
     * Destroys all the rows in the aggregation {@link #getRows rows}.
     */
    destroyRows(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:loadMore loadMore} event of this `sap.ui.webc.main.Table`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLoadMore(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:popinChange popinChange} event of this `sap.ui.webc.main.Table`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPopinChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:rowClick rowClick} event of this `sap.ui.webc.main.Table`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachRowClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.ui.webc.main.Table`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Table with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Table>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:loadMore loadMore} to attached listeners.
     */
    fireLoadMore(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:popinChange popinChange} to attached listeners.
     */
    firePopinChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * popped-in columns.
         */
        poppedColumns?: any[];
      }
    ): this;
    /**
     * Fires event {@link #event:rowClick rowClick} to attached listeners.
     */
    fireRowClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the activated row.
         */
        row?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * An array of the selected rows.
         */
        selectedRows?: any[];
        /**
         * An array of the previously selected rows.
         */
        previouslySelectedRows?: any[];
      }
    ): this;
    /**
     * Gets current value of property {@link #getBusy busy}.
     *
     * Defines if the table is in busy state.
     *
     * In this state the component's opacity is reduced and busy indicator is displayed at the bottom of the
     * table.
     *
     * Default value is `false`.
     */
    getBusy(): boolean;
    /**
     * Gets content of aggregation {@link #getColumns columns}.
     *
     * Defines the configuration for the columns of the component.
     *
     *  **Note:** Use `sap.ui.webc.main.TableColumn` for the intended design.
     */
    getColumns(): ITableColumn[];
    /**
     * Gets current value of property {@link #getGrowing growing}.
     *
     * Defines whether the table will have growing capability either by pressing a `More` button, or via user
     * scroll. In both cases `load-more` event is fired.
     *
     *
     *
     * Available options:
     *
     *  `Button` - Shows a `More` button at the bottom of the table, pressing of which triggers the `load-more`
     * event.
     *  `Scroll` - The `load-more` event is triggered when the user scrolls to the bottom of the table;
     *  `None` (default) - The growing is off.
     *
     *
     *
     * **Limitations:** `growing="Scroll"` is not supported for Internet Explorer, and the component will fallback
     * to `growing="Button"`.
     *
     * Default value is `None`.
     */
    getGrowing(): TableGrowingMode;
    /**
     * Gets current value of property {@link #getGrowingButtonSubtext growingButtonSubtext}.
     *
     * Defines the subtext that will be displayed under the `growingButtonText`.
     *
     *
     *
     *  **Note:** This property takes effect if `growing` is set to `Button`.
     *
     * Default value is `empty string`.
     */
    getGrowingButtonSubtext(): string;
    /**
     * Gets current value of property {@link #getGrowingButtonText growingButtonText}.
     *
     * Defines the text that will be displayed inside the growing button at the bottom of the table, meant for
     * loading more rows upon press.
     *
     *
     *
     *  **Note:** If not specified a built-in text will be displayed.
     *  **Note:** This property takes effect if `growing` is set to `Button`.
     *
     * Default value is `empty string`.
     */
    getGrowingButtonText(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getHideNoData hideNoData}.
     *
     * Defines if the value of `noDataText` will be diplayed when there is no rows present in the table.
     *
     * Default value is `false`.
     */
    getHideNoData(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Table.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Defines the mode of the component.
     *
     *  Available options are:
     * 	 - `MultiSelect`
     * 	 - `SingleSelect`
     * 	 - `None`
     *
     * Default value is `None`.
     */
    getMode(): TableMode | keyof typeof TableMode;
    /**
     * Gets current value of property {@link #getNoDataText noDataText}.
     *
     * Defines the text that will be displayed when there is no data and `hideNoData` is not present.
     *
     * Default value is `empty string`.
     */
    getNoDataText(): string;
    /**
     * Gets content of aggregation {@link #getRows rows}.
     *
     * Defines the component rows.
     *
     *  **Note:** Use `sap.ui.webc.main.TableRow` for the intended design.
     */
    getRows(): ITableRow[];
    /**
     * Gets current value of property {@link #getStickyColumnHeader stickyColumnHeader}.
     *
     * Determines whether the column headers remain fixed at the top of the page during vertical scrolling as
     * long as the Web Component is in the viewport.
     *
     *  **Limitations:**
     * 	 - Browsers that do not support this feature:
     * 	Internet Explorer
     * 	 - Microsoft Edge lower than version 41 (EdgeHTML 16)
     * 	 - Mozilla Firefox lower than version 59
     * 	 - Scrolling behavior:
     * 	If the Web Component is placed in layout containers that have the `overflow: hidden` or `overflow: auto`
     * style definition, this can prevent the sticky elements of the Web Component from becoming fixed at the
     * top of the viewport.
     *
     * Default value is `false`.
     */
    getStickyColumnHeader(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.webc.main.ITableColumn` in the aggregation {@link #getColumns columns}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfColumn(
      /**
       * The column whose index is looked for
       */
      oColumn: ITableColumn
    ): int;
    /**
     * Checks for the provided `sap.ui.webc.main.ITableRow` in the aggregation {@link #getRows rows}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfRow(
      /**
       * The row whose index is looked for
       */
      oRow: ITableRow
    ): int;
    /**
     * Inserts a column into the aggregation {@link #getColumns columns}.
     */
    insertColumn(
      /**
       * The column to insert; if empty, nothing is inserted
       */
      oColumn: ITableColumn,
      /**
       * The `0`-based index the column should be inserted at; for a negative value of `iIndex`, the column is
       * inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a row into the aggregation {@link #getRows rows}.
     */
    insertRow(
      /**
       * The row to insert; if empty, nothing is inserted
       */
      oRow: ITableRow,
      /**
       * The `0`-based index the row should be inserted at; for a negative value of `iIndex`, the row is inserted
       * at position 0; for a value greater than the current size of the aggregation, the row is inserted at the
       * last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getColumns columns}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllColumns(): ITableColumn[];
    /**
     * Removes all the controls from the aggregation {@link #getRows rows}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllRows(): ITableRow[];
    /**
     * Removes a column from the aggregation {@link #getColumns columns}.
     */
    removeColumn(
      /**
       * The column to remove or its index or id
       */
      vColumn: int | string | ITableColumn
    ): ITableColumn;
    /**
     * Removes a row from the aggregation {@link #getRows rows}.
     */
    removeRow(
      /**
       * The row to remove or its index or id
       */
      vRow: int | string | ITableRow
    ): ITableRow;
    /**
     * Sets a new value for property {@link #getBusy busy}.
     *
     * Defines if the table is in busy state.
     *
     * In this state the component's opacity is reduced and busy indicator is displayed at the bottom of the
     * table.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setBusy(
      /**
       * New value for property `busy`
       */
      bBusy?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getGrowing growing}.
     *
     * Defines whether the table will have growing capability either by pressing a `More` button, or via user
     * scroll. In both cases `load-more` event is fired.
     *
     *
     *
     * Available options:
     *
     *  `Button` - Shows a `More` button at the bottom of the table, pressing of which triggers the `load-more`
     * event.
     *  `Scroll` - The `load-more` event is triggered when the user scrolls to the bottom of the table;
     *  `None` (default) - The growing is off.
     *
     *
     *
     * **Limitations:** `growing="Scroll"` is not supported for Internet Explorer, and the component will fallback
     * to `growing="Button"`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setGrowing(
      /**
       * New value for property `growing`
       */
      sGrowing?: TableGrowingMode
    ): this;
    /**
     * Sets a new value for property {@link #getGrowingButtonSubtext growingButtonSubtext}.
     *
     * Defines the subtext that will be displayed under the `growingButtonText`.
     *
     *
     *
     *  **Note:** This property takes effect if `growing` is set to `Button`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setGrowingButtonSubtext(
      /**
       * New value for property `growingButtonSubtext`
       */
      sGrowingButtonSubtext?: string
    ): this;
    /**
     * Sets a new value for property {@link #getGrowingButtonText growingButtonText}.
     *
     * Defines the text that will be displayed inside the growing button at the bottom of the table, meant for
     * loading more rows upon press.
     *
     *
     *
     *  **Note:** If not specified a built-in text will be displayed.
     *  **Note:** This property takes effect if `growing` is set to `Button`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setGrowingButtonText(
      /**
       * New value for property `growingButtonText`
       */
      sGrowingButtonText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getHideNoData hideNoData}.
     *
     * Defines if the value of `noDataText` will be diplayed when there is no rows present in the table.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideNoData(
      /**
       * New value for property `hideNoData`
       */
      bHideNoData?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Defines the mode of the component.
     *
     *  Available options are:
     * 	 - `MultiSelect`
     * 	 - `SingleSelect`
     * 	 - `None`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: TableMode | keyof typeof TableMode
    ): this;
    /**
     * Sets a new value for property {@link #getNoDataText noDataText}.
     *
     * Defines the text that will be displayed when there is no data and `hideNoData` is not present.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setNoDataText(
      /**
       * New value for property `noDataText`
       */
      sNoDataText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getStickyColumnHeader stickyColumnHeader}.
     *
     * Determines whether the column headers remain fixed at the top of the page during vertical scrolling as
     * long as the Web Component is in the viewport.
     *
     *  **Limitations:**
     * 	 - Browsers that do not support this feature:
     * 	Internet Explorer
     * 	 - Microsoft Edge lower than version 41 (EdgeHTML 16)
     * 	 - Mozilla Firefox lower than version 59
     * 	 - Scrolling behavior:
     * 	If the Web Component is placed in layout containers that have the `overflow: hidden` or `overflow: auto`
     * style definition, this can prevent the sticky elements of the Web Component from becoming fixed at the
     * top of the viewport.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setStickyColumnHeader(
      /**
       * New value for property `stickyColumnHeader`
       */
      bStickyColumnHeader?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $TableSettings extends $WebComponentSettings {
    /**
     * Defines if the table is in busy state.
     *
     * In this state the component's opacity is reduced and busy indicator is displayed at the bottom of the
     * table.
     */
    busy?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the table will have growing capability either by pressing a `More` button, or via user
     * scroll. In both cases `load-more` event is fired.
     *
     *
     *
     * Available options:
     *
     *  `Button` - Shows a `More` button at the bottom of the table, pressing of which triggers the `load-more`
     * event.
     *  `Scroll` - The `load-more` event is triggered when the user scrolls to the bottom of the table;
     *  `None` (default) - The growing is off.
     *
     *
     *
     * **Limitations:** `growing="Scroll"` is not supported for Internet Explorer, and the component will fallback
     * to `growing="Button"`.
     */
    growing?: TableGrowingMode | PropertyBindingInfo;

    /**
     * Defines the subtext that will be displayed under the `growingButtonText`.
     *
     *
     *
     *  **Note:** This property takes effect if `growing` is set to `Button`.
     */
    growingButtonSubtext?: string | PropertyBindingInfo;

    /**
     * Defines the text that will be displayed inside the growing button at the bottom of the table, meant for
     * loading more rows upon press.
     *
     *
     *
     *  **Note:** If not specified a built-in text will be displayed.
     *  **Note:** This property takes effect if `growing` is set to `Button`.
     */
    growingButtonText?: string | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines if the value of `noDataText` will be diplayed when there is no rows present in the table.
     */
    hideNoData?: boolean | PropertyBindingInfo;

    /**
     * Defines the mode of the component.
     *
     *  Available options are:
     * 	 - `MultiSelect`
     * 	 - `SingleSelect`
     * 	 - `None`
     */
    mode?: (TableMode | keyof typeof TableMode) | PropertyBindingInfo;

    /**
     * Defines the text that will be displayed when there is no data and `hideNoData` is not present.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * Determines whether the column headers remain fixed at the top of the page during vertical scrolling as
     * long as the Web Component is in the viewport.
     *
     *  **Limitations:**
     * 	 - Browsers that do not support this feature:
     * 	Internet Explorer
     * 	 - Microsoft Edge lower than version 41 (EdgeHTML 16)
     * 	 - Mozilla Firefox lower than version 59
     * 	 - Scrolling behavior:
     * 	If the Web Component is placed in layout containers that have the `overflow: hidden` or `overflow: auto`
     * style definition, this can prevent the sticky elements of the Web Component from becoming fixed at the
     * top of the viewport.
     */
    stickyColumnHeader?: boolean | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the configuration for the columns of the component.
     *
     *  **Note:** Use `sap.ui.webc.main.TableColumn` for the intended design.
     */
    columns?: ITableColumn[] | ITableColumn | AggregationBindingInfo;

    /**
     * Defines the component rows.
     *
     *  **Note:** Use `sap.ui.webc.main.TableRow` for the intended design.
     */
    rows?: ITableRow[] | ITableRow | AggregationBindingInfo;

    /**
     * Fired when the user presses the `More` button or scrolls to the table's end.
     *
     *
     *
     * **Note:** The event will be fired if `growing` is set to `Button` or `Scroll`.
     */
    loadMore?: Function;

    /**
     * Fired when `sap.ui.webc.main.TableColumn` is shown as a pop-in instead of hiding it.
     */
    popinChange?: Function;

    /**
     * Fired when a row in `Active` mode is clicked or `Enter` key is pressed.
     */
    rowClick?: Function;

    /**
     * Fired when selection is changed by user interaction in `SingleSelect` and `MultiSelect` modes.
     */
    selectionChange?: Function;
  }
}

declare module "sap/ui/webc/main/TableCell" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { ITableCell } from "sap/ui/webc/main/library";

  import Control from "sap/ui/core/Control";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.TableCell` component defines the structure of the data in a single `sap.ui.webc.main.Table`
   * cell.
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.TableCell` exposes the following CSS Shadow Parts:
   * 	 - cell - Used to style the native `td` element
   */
  export default class TableCell extends WebComponent implements ITableCell {
    __implements__sap_ui_webc_main_ITableCell: boolean;
    /**
     * Constructor for a new `TableCell`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableCellSettings
    );
    /**
     * Constructor for a new `TableCell`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableCellSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.TableCell with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TableCell>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Specifies the content of the component.
     */
    getContent(): Control[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.TableCell.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
  }

  export interface $TableCellSettings extends $WebComponentSettings {
    /**
     * Specifies the content of the component.
     */
    content?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/ui/webc/main/TableColumn" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { ITableColumn } from "sap/ui/webc/main/library";

  import Control from "sap/ui/core/Control";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.TableColumn` component allows to define column specific properties that are applied
   * when rendering the `sap.ui.webc.main.Table` component.
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.TableColumn` exposes the following CSS Shadow Parts:
   * 	 - column - Used to style the native `th` element
   */
  export default class TableColumn
    extends WebComponent
    implements ITableColumn {
    __implements__sap_ui_webc_main_ITableColumn: boolean;
    /**
     * Constructor for a new `TableColumn`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableColumnSettings
    );
    /**
     * Constructor for a new `TableColumn`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableColumnSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.TableColumn with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TableColumn>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Defines the content of the column header.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getDemandPopin demandPopin}.
     *
     * According to your `minWidth` settings, the component can be hidden in different screen sizes.
     *
     *  Setting this property to `true`, shows this column as pop-in instead of hiding it.
     *
     * Default value is `false`.
     */
    getDemandPopin(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.TableColumn.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMinWidth minWidth}.
     *
     * Defines the minimum table width required to display this column. By default it is always displayed.
     *
     *  The responsive behavior of the `sap.ui.webc.main.Table` is determined by this property. As an example,
     * by setting `minWidth` property to `400` sets the minimum width to 400 pixels, and shows this column on
     * tablet (and desktop) but hides it on mobile.
     *  For further responsive design options, see `demandPopin` property.
     *
     * Default value is `...see text or source`.
     */
    getMinWidth(): int;
    /**
     * Gets current value of property {@link #getPopinText popinText}.
     *
     * The text for the column when it pops in.
     *
     * Default value is `empty string`.
     */
    getPopinText(): string;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getDemandPopin demandPopin}.
     *
     * According to your `minWidth` settings, the component can be hidden in different screen sizes.
     *
     *  Setting this property to `true`, shows this column as pop-in instead of hiding it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDemandPopin(
      /**
       * New value for property `demandPopin`
       */
      bDemandPopin?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMinWidth minWidth}.
     *
     * Defines the minimum table width required to display this column. By default it is always displayed.
     *
     *  The responsive behavior of the `sap.ui.webc.main.Table` is determined by this property. As an example,
     * by setting `minWidth` property to `400` sets the minimum width to 400 pixels, and shows this column on
     * tablet (and desktop) but hides it on mobile.
     *  For further responsive design options, see `demandPopin` property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `...see text or source`.
     */
    setMinWidth(
      /**
       * New value for property `minWidth`
       */
      iMinWidth?: int
    ): this;
    /**
     * Sets a new value for property {@link #getPopinText popinText}.
     *
     * The text for the column when it pops in.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPopinText(
      /**
       * New value for property `popinText`
       */
      sPopinText?: string
    ): this;
  }

  export interface $TableColumnSettings extends $WebComponentSettings {
    /**
     * According to your `minWidth` settings, the component can be hidden in different screen sizes.
     *
     *  Setting this property to `true`, shows this column as pop-in instead of hiding it.
     */
    demandPopin?: boolean | PropertyBindingInfo;

    /**
     * Defines the minimum table width required to display this column. By default it is always displayed.
     *
     *  The responsive behavior of the `sap.ui.webc.main.Table` is determined by this property. As an example,
     * by setting `minWidth` property to `400` sets the minimum width to 400 pixels, and shows this column on
     * tablet (and desktop) but hides it on mobile.
     *  For further responsive design options, see `demandPopin` property.
     */
    minWidth?: int | PropertyBindingInfo;

    /**
     * The text for the column when it pops in.
     */
    popinText?: string | PropertyBindingInfo;

    /**
     * Defines the content of the column header.
     */
    content?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/ui/webc/main/TableRow" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import {
    ITableRow,
    ITableCell,
    TableRowType,
  } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.TableRow` component represents a row in the `sap.ui.webc.main.Table`.
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.TableRow` exposes the following CSS Shadow Parts:
   * 	 - row - Used to style the native `tr` element
   * 	 - popin-row - Used to style the `tr` element when a row pops in
   */
  export default class TableRow extends WebComponent implements ITableRow {
    __implements__sap_ui_webc_main_ITableRow: boolean;
    /**
     * Constructor for a new `TableRow`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableRowSettings
    );
    /**
     * Constructor for a new `TableRow`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableRowSettings
    );

    /**
     * Adds some cell to the aggregation {@link #getCells cells}.
     */
    addCell(
      /**
       * The cell to add; if empty, nothing is inserted
       */
      oCell: ITableCell
    ): this;
    /**
     * Destroys all the cells in the aggregation {@link #getCells cells}.
     */
    destroyCells(): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.TableRow with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TableRow>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getCells cells}.
     *
     * Defines the cells of the component.
     *
     *  **Note:** Use `sap.ui.webc.main.TableCell` for the intended design.
     */
    getCells(): ITableCell[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.TableRow.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines the row's selected state.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the component.
     *
     *  Available options are:
     * 	 - `Active`
     * 	 - `Inactive`
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press, while with type `Inactive`
     * - will not.
     *
     * Default value is `Inactive`.
     */
    getType(): TableRowType | keyof typeof TableRowType;
    /**
     * Checks for the provided `sap.ui.webc.main.ITableCell` in the aggregation {@link #getCells cells}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfCell(
      /**
       * The cell whose index is looked for
       */
      oCell: ITableCell
    ): int;
    /**
     * Inserts a cell into the aggregation {@link #getCells cells}.
     */
    insertCell(
      /**
       * The cell to insert; if empty, nothing is inserted
       */
      oCell: ITableCell,
      /**
       * The `0`-based index the cell should be inserted at; for a negative value of `iIndex`, the cell is inserted
       * at position 0; for a value greater than the current size of the aggregation, the cell is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getCells cells}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllCells(): ITableCell[];
    /**
     * Removes a cell from the aggregation {@link #getCells cells}.
     */
    removeCell(
      /**
       * The cell to remove or its index or id
       */
      vCell: int | string | ITableCell
    ): ITableCell;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines the row's selected state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the component.
     *
     *  Available options are:
     * 	 - `Active`
     * 	 - `Inactive`
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press, while with type `Inactive`
     * - will not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inactive`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: TableRowType | keyof typeof TableRowType
    ): this;
  }

  export interface $TableRowSettings extends $WebComponentSettings {
    /**
     * Defines the row's selected state.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the visual indication and behavior of the component.
     *
     *  Available options are:
     * 	 - `Active`
     * 	 - `Inactive`
     *
     *  **Note:** When set to `Active`, the item will provide visual response upon press, while with type `Inactive`
     * - will not.
     */
    type?: (TableRowType | keyof typeof TableRowType) | PropertyBindingInfo;

    /**
     * Defines the cells of the component.
     *
     *  **Note:** Use `sap.ui.webc.main.TableCell` for the intended design.
     */
    cells?: ITableCell[] | ITableCell | AggregationBindingInfo;
  }
}

declare module "sap/ui/webc/main/TabSeparator" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { ITab } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * The `sap.ui.webc.main.TabSeparator` represents a vertical line to separate tabs inside a `sap.ui.webc.main.TabContainer`.
   */
  export default class TabSeparator extends WebComponent implements ITab {
    __implements__sap_ui_webc_main_ITab: boolean;
    /**
     * Constructor for a new `TabSeparator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.webc.common.WebComponent#constructor
     * sap.ui.webc.common.WebComponent} can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabSeparatorSettings
    );
    /**
     * Constructor for a new `TabSeparator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.webc.common.WebComponent#constructor
     * sap.ui.webc.common.WebComponent} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabSeparatorSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.TabSeparator with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TabSeparator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.webc.main.TabSeparator.
     */
    static getMetadata(): WebComponentMetadata;
  }

  export interface $TabSeparatorSettings extends $WebComponentSettings {}
}

declare module "sap/ui/webc/main/TextArea" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import { CSSSize, ValueState } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.TextArea` component provides large spaces for text entries in the form of multiple
   * rows. It has the functionality of the `TextField` with the additional functionality for multiline texts.
   *
   *
   *  When empty, it can hold a placeholder similar to a `sap.ui.webc.main.Input`. You can define the rows
   * of the `sap.ui.webc.main.TextArea` and also determine specific behavior when handling long texts.
   *
   * CSS Shadow Parts:
   *
   * CSS Shadow Parts
   * allow developers to style elements inside the Shadow DOM.
   *  The `sap.ui.webc.main.TextArea` exposes the following CSS Shadow Parts:
   * 	 - textarea - Used to style the native textarea
   */
  export default class TextArea extends WebComponent {
    /**
     * Constructor for a new `TextArea`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TextAreaSettings
    );
    /**
     * Constructor for a new `TextArea`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TextAreaSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.TextArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TextArea` itself.
     *
     * Fired when the text has changed and the focus leaves the component.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TextArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.TextArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TextArea` itself.
     *
     * Fired when the text has changed and the focus leaves the component.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TextArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.TextArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TextArea` itself.
     *
     * Fired when the value of the component changes at each keystroke or when something is pasted.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TextArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.TextArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TextArea` itself.
     *
     * Fired when the value of the component changes at each keystroke or when something is pasted.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TextArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.TextArea`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.TextArea`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.TextArea with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TextArea>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Indicates whether the user can interact with the component or not.
     *
     *  **Note:** Disabled components cannot be focused and they are out of the tab chain.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getGrowing growing}.
     *
     * Enables the component to automatically grow and shrink dynamically with its content.
     *
     *  **Note:** If set to `true`, the CSS `height` property is ignored.
     *
     * Default value is `false`.
     */
    getGrowing(): boolean;
    /**
     * Gets current value of property {@link #getGrowingMaxLines growingMaxLines}.
     *
     * Defines the maximum number of lines that the Web Component can grow.
     *
     * Default value is `0`.
     */
    getGrowingMaxLines(): int;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getMaxlength maxlength}.
     *
     * Defines the maximum number of characters that the `value` can have.
     */
    getMaxlength(): int;
    /**
     * Returns a metadata object for class sap.ui.webc.main.TextArea.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * Default value is `empty string`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getRows rows}.
     *
     * Defines the number of visible text lines for the component.
     *
     *  **Notes:**
     * 	 - If the `growing` property is enabled, this property defines the minimum rows to be displayed in the
     * 			textarea.
     * 	 - The CSS `height` property wins over the `rows` property, if both are set.
     *
     * Default value is `0`.
     */
    getRows(): int;
    /**
     * Gets current value of property {@link #getShowExceededText showExceededText}.
     *
     * Determines whether the characters exceeding the maximum allowed character count are visible in the component.
     *
     *
     *  If set to `false`, the user is not allowed to enter more characters than what is set in the `maxlength`
     * property. If set to `true` the characters exceeding the `maxlength` value are selected on paste and the
     * counter below the component displays their number.
     *
     * Default value is `false`.
     */
    getShowExceededText(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the Web Component.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     *  **Note:** If `maxlength` property is set, the component turns into "Warning" state once the characters
     * exceeds the limit. In this case, only the "Error" state is considered and can be applied.
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Indicates whether the user can interact with the component or not.
     *
     *  **Note:** Disabled components cannot be focused and they are out of the tab chain.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getGrowing growing}.
     *
     * Enables the component to automatically grow and shrink dynamically with its content.
     *
     *  **Note:** If set to `true`, the CSS `height` property is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setGrowing(
      /**
       * New value for property `growing`
       */
      bGrowing?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getGrowingMaxLines growingMaxLines}.
     *
     * Defines the maximum number of lines that the Web Component can grow.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setGrowingMaxLines(
      /**
       * New value for property `growingMaxLines`
       */
      iGrowingMaxLines?: int
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getMaxlength maxlength}.
     *
     * Defines the maximum number of characters that the `value` can have.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxlength(
      /**
       * New value for property `maxlength`
       */
      iMaxlength?: int
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Defines whether the component is required.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRows rows}.
     *
     * Defines the number of visible text lines for the component.
     *
     *  **Notes:**
     * 	 - If the `growing` property is enabled, this property defines the minimum rows to be displayed in the
     * 			textarea.
     * 	 - The CSS `height` property wins over the `rows` property, if both are set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setRows(
      /**
       * New value for property `rows`
       */
      iRows?: int
    ): this;
    /**
     * Sets a new value for property {@link #getShowExceededText showExceededText}.
     *
     * Determines whether the characters exceeding the maximum allowed character count are visible in the component.
     *
     *
     *  If set to `false`, the user is not allowed to enter more characters than what is set in the `maxlength`
     * property. If set to `true` the characters exceeding the `maxlength` value are selected on paste and the
     * counter below the component displays their number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowExceededText(
      /**
       * New value for property `showExceededText`
       */
      bShowExceededText?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the value of the Web Component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     *  **Note:** If `maxlength` property is set, the component turns into "Warning" state once the characters
     * exceeds the limit. In this case, only the "Error" state is considered and can be applied.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $TextAreaSettings extends $WebComponentSettings {
    /**
     * Indicates whether the user can interact with the component or not.
     *
     *  **Note:** Disabled components cannot be focused and they are out of the tab chain.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Enables the component to automatically grow and shrink dynamically with its content.
     *
     *  **Note:** If set to `true`, the CSS `height` property is ignored.
     */
    growing?: boolean | PropertyBindingInfo;

    /**
     * Defines the maximum number of lines that the Web Component can grow.
     */
    growingMaxLines?: int | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the maximum number of characters that the `value` can have.
     */
    maxlength?: int | PropertyBindingInfo;

    /**
     * Determines the name with which the component will be submitted in an HTML form.
     *
     *
     *
     *  **Note:** When set, a native `input` HTML element will be created inside the component so that it can
     * be submitted as part of an HTML form. Do not use this property unless you need to submit a form.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint intended to aid the user with data entry when the component has no value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is required.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines the number of visible text lines for the component.
     *
     *  **Notes:**
     * 	 - If the `growing` property is enabled, this property defines the minimum rows to be displayed in the
     * 			textarea.
     * 	 - The CSS `height` property wins over the `rows` property, if both are set.
     */
    rows?: int | PropertyBindingInfo;

    /**
     * Determines whether the characters exceeding the maximum allowed character count are visible in the component.
     *
     *
     *  If set to `false`, the user is not allowed to enter more characters than what is set in the `maxlength`
     * property. If set to `true` the characters exceeding the `maxlength` value are selected on paste and the
     * counter below the component displays their number.
     */
    showExceededText?: boolean | PropertyBindingInfo;

    /**
     * Defines the value of the Web Component.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the component.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     *  **Note:** If `maxlength` property is set, the component turns into "Warning" state once the characters
     * exceeds the limit. In this case, only the "Error" state is considered and can be applied.
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the text has changed and the focus leaves the component.
     */
    change?: Function;

    /**
     * Fired when the value of the component changes at each keystroke or when something is pasted.
     */
    input?: Function;
  }
}

declare module "sap/ui/webc/main/TimePicker" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ValueState, CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The `sap.ui.webc.main.TimePicker` component provides an input field with assigned sliders which
   * opens on user action. The `sap.ui.webc.main.TimePicker` allows users to select a localized time using
   * touch, mouse, or keyboard input. It consists of two parts: the time input field and the sliders.
   *
   * Usage: The user can enter a time by:
   * 	 - Using the sliders that opens in a popup
   * 	 - Typing it in directly in the input field
   *
   *  When the user makes an entry and chooses the enter key, the sliders shows the corresponding time. When
   * the user directly triggers the sliders display, the actual time is displayed. For the `sap.ui.webc.main.TimePicker`
   *
   * Formatting:
   *
   * If a time is entered by typing it into the input field, it must fit to the used time format.
   *
   *  Supported format options are pattern-based on Unicode LDML Date Format notation. For more information,
   * see UTS
   * #35: Unicode Locale Data Markup Language.
   *
   *  For example, if the `format-pattern` is "HH:mm:ss", a valid value string is "11:42:35" and the same
   * is displayed in the input.
   *
   * Keyboard handling: [F4], [ALT]+[UP], [ALT]+[DOWN] Open/Close picker dialog and move focus to it.
   *  When closed:
   * 	 - [PAGEUP] - Increments hours by 1. If 12 am is reached, increment hours to 1 pm and vice versa.
   * 	 - [PAGEDOWN] - Decrements the corresponding field by 1. If 1 pm is reached, decrement hours to 12 am
   * 			and vice versa.
   * 	 - [SHIFT]+[PAGEUP] Increments minutes by 1.
   * 	 - [SHIFT]+ [PAGEDOWN] Decrements minutes by 1.
   * 	 - [SHIFT]+[CTRL]+[PAGEUP] Increments seconds by 1.
   * 	 - [SHIFT]+[CTRL]+ [PAGEDOWN] Decrements seconds by 1.  When opened:
   * 	 - [UP] If focus is on one of the selection lists: Select the value which is above the current value.
   * 			If the first value is selected, select the last value in the list. Exception: AM/ PM List: stay on the
   * 			first item.
   * 	 - [DOWN] If focus is on one of the selection lists: Select the value which is below the current value.
   * 			If the last value is selected, select the first value in the list. Exception: AM/ PM List: stay on the
   * 			last item.
   * 	 - [LEFT] If focus is on one of the selection lists: Move focus to the selection list which is left
   * 			of the current selection list. If focus is at the first selection list, move focus to the last selection
   * 			list.
   * 	 - [RIGHT] If focus is on one of the selection lists: Move focus to the selection list which is right
   * 			of the current selection list. When focus is at the last selection list, move focus to the first selection
   * 			list.
   * 	 - [PAGEUP] If focus is on one of the selection lists: Move focus to the first entry of this list.
   * 	 - [PAGEDOWN] If focus is on one of the selection lists: Move focus to the last entry of this list.
   */
  export default class TimePicker extends WebComponent {
    /**
     * Constructor for a new `TimePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerSettings
    );
    /**
     * Constructor for a new `TimePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.TimePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TimePicker` itself.
     *
     * Fired when the input operation has finished by clicking the "OK" button or when the text in the input
     * field has changed and the focus leaves the input field.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TimePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.webc.main.TimePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TimePicker` itself.
     *
     * Fired when the input operation has finished by clicking the "OK" button or when the text in the input
     * field has changed and the focus leaves the input field.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TimePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.TimePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TimePicker` itself.
     *
     * Fired when the value of the `sap.ui.webc.main.TimePicker` is changed at each key stroke.
     */
    attachInput(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TimePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:input input} event of this `sap.ui.webc.main.TimePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.TimePicker` itself.
     *
     * Fired when the value of the `sap.ui.webc.main.TimePicker` is changed at each key stroke.
     */
    attachInput(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.TimePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the picker
     */
    closePicker(): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.webc.main.TimePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:input input} event of this `sap.ui.webc.main.TimePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachInput(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.TimePicker with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimePicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:input input} to attached listeners.
     */
    fireInput(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Formats a Java Script date object into a string representing a locale date and time according to the
     * `formatPattern` property of the TimePicker instance
     */
    formatValue(
      /**
       * A Java Script date object to be formatted as string
       */
      date: object
    ): void;
    /**
     * Returns the currently selected time represented as JavaScript Date instance
     */
    getDateValue(): void;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as disabled.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * Example: HH:mm:ss -> 11:42:35 hh:mm:ss a -> 2:23:15 PM mm:ss -> 12:04 (only minutes and seconds)
     *
     * Default value is `empty string`.
     */
    getFormatPattern(): string;
    /**
     * Returns a metadata object for class sap.ui.webc.main.TimePicker.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * Default value is `undefined`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as readonly.
     *
     * Default value is `false`.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines a formatted time value.
     *
     * Default value is `undefined`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Defines the value state of the `sap.ui.webc.main.TimePicker`.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * Default value is `empty string`.
     */
    getValueStateMessage(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks if the picker is open
     */
    isOpen(): void;
    /**
     * Checks if a value is valid against the current `formatPattern` value.
     *
     *
     *
     *  **Note:** an empty string is considered as valid value.
     */
    isValid(
      /**
       * The value to be tested against the current date format
       */
      value: string
    ): void;
    /**
     * Opens the picker.
     */
    openPicker(): void;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as disabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFormatPattern formatPattern}.
     *
     * Determines the format, displayed in the input field.
     *
     * Example: HH:mm:ss -> 11:42:35 hh:mm:ss a -> 2:23:15 PM mm:ss -> 12:04 (only minutes and seconds)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFormatPattern(
      /**
       * New value for property `formatPattern`
       */
      sFormatPattern?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as readonly.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines a formatted time value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Defines the value state of the `sap.ui.webc.main.TimePicker`.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getValueStateMessage valueStateMessage}.
     *
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateMessage(
      /**
       * New value for property `valueStateMessage`
       */
      sValueStateMessage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $TimePickerSettings extends $WebComponentSettings {
    /**
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as disabled.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Determines the format, displayed in the input field.
     *
     * Example: HH:mm:ss -> 11:42:35 hh:mm:ss a -> 2:23:15 PM mm:ss -> 12:04 (only minutes and seconds)
     */
    formatPattern?: string | PropertyBindingInfo;

    /**
     * Defines a short hint, intended to aid the user with data entry when the component has no value.
     *
     *
     *
     *  **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty
     * string as the value of this property will make the component appear empty - without placeholder or format
     * pattern.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * Determines whether the `sap.ui.webc.main.TimePicker` is displayed as readonly.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines a formatted time value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the value state of the `sap.ui.webc.main.TimePicker`.
     *
     *  Available options are:
     * 	 - `None`
     * 	 - `Error`
     * 	 - `Warning`
     * 	 - `Success`
     * 	 - `Information`
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the value state message that will be displayed as pop up under the contorl.
     *
     *
     *
     * **Note:** If not specified, a default text (in the respective language) will be displayed.
     */
    valueStateMessage?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the input operation has finished by clicking the "OK" button or when the text in the input
     * field has changed and the focus leaves the input field.
     */
    change?: Function;

    /**
     * Fired when the value of the `sap.ui.webc.main.TimePicker` is changed at each key stroke.
     */
    input?: Function;
  }
}

declare module "sap/ui/webc/main/Title" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { TitleLevel, WrappingType } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Title` component is used to display titles inside a page. It is a simple, large-sized
   * text with explicit header/title semantics.
   */
  export default class Title extends WebComponent {
    /**
     * Constructor for a new `Title`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TitleSettings
    );
    /**
     * Constructor for a new `Title`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TitleSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.Title with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Title>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getLevel level}.
     *
     * Defines the component level. Available options are: `"H6"` to `"H1"`.
     *
     * Default value is `H2`.
     */
    getLevel(): TitleLevel | keyof typeof TitleLevel;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Title.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getWrappingType wrappingType}.
     *
     * Defines how the text of a component will be displayed when there is not enough space. Available options
     * are:
     * 	 - `None` - The text will be truncated with an ellipsis.
     * 	 - `Normal` - The text will wrap. The words will not be broken based on hyphenation.
     *
     * Default value is `None`.
     */
    getWrappingType(): WrappingType | keyof typeof WrappingType;
    /**
     * Sets a new value for property {@link #getLevel level}.
     *
     * Defines the component level. Available options are: `"H6"` to `"H1"`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `H2`.
     */
    setLevel(
      /**
       * New value for property `level`
       */
      sLevel?: TitleLevel | keyof typeof TitleLevel
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWrappingType wrappingType}.
     *
     * Defines how the text of a component will be displayed when there is not enough space. Available options
     * are:
     * 	 - `None` - The text will be truncated with an ellipsis.
     * 	 - `Normal` - The text will wrap. The words will not be broken based on hyphenation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setWrappingType(
      /**
       * New value for property `wrappingType`
       */
      sWrappingType?: WrappingType | keyof typeof WrappingType
    ): this;
  }

  export interface $TitleSettings extends $WebComponentSettings {
    /**
     * Defines the component level. Available options are: `"H6"` to `"H1"`.
     */
    level?: (TitleLevel | keyof typeof TitleLevel) | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines how the text of a component will be displayed when there is not enough space. Available options
     * are:
     * 	 - `None` - The text will be truncated with an ellipsis.
     * 	 - `Normal` - The text will wrap. The words will not be broken based on hyphenation.
     */
    wrappingType?:
      | (WrappingType | keyof typeof WrappingType)
      | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/Toast" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { ToastPlacement } from "sap/ui/webc/main/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.Toast` is a small, non-disruptive popup for success or information messages that
   * disappears automatically after a few seconds.
   *
   * Usage:
   *
   * When to use::
   * 	 - You want to display a short success or information message.
   * 	 - You do not want to interrupt users while they are performing an action.
   * 	 - You want to confirm a successful action.  When not to use::
   * 	 - You want to display error or warning message.
   * 	 - You want to interrupt users while they are performing an action.
   * 	 - You want to make sure that users read the message before they leave the page.
   * 	 - You want users to be able to copy some part of the message text.
   */
  export default class Toast extends WebComponent {
    /**
     * Constructor for a new `Toast`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToastSettings
    );
    /**
     * Constructor for a new `Toast`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToastSettings
    );

    /**
     * Creates a new subclass of class sap.ui.webc.main.Toast with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Toast>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getDuration duration}.
     *
     * Defines the duration in milliseconds for which component remains on the screen before it's automatically
     * closed.
     *
     *  **Note:** The minimum supported value is `500` ms and even if a lower value is set, the duration would
     * remain `500` ms.
     *
     * Default value is `3000`.
     */
    getDuration(): int;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Toast.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getPlacement placement}.
     *
     * Defines the placement of the component.
     *
     *  Available options are:
     * 	 - `TopStart`
     * 	 - `TopCenter`
     * 	 - `TopEnd`
     * 	 - `MiddleStart`
     * 	 - `MiddleCenter`
     * 	 - `MiddleEnd`
     * 	 - `BottomStart`
     * 	 - `BottomCenter`
     * 	 - `BottomEnd`
     *
     * Default value is `BottomCenter`.
     */
    getPlacement(): ToastPlacement | keyof typeof ToastPlacement;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getDuration duration}.
     *
     * Defines the duration in milliseconds for which component remains on the screen before it's automatically
     * closed.
     *
     *  **Note:** The minimum supported value is `500` ms and even if a lower value is set, the duration would
     * remain `500` ms.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `3000`.
     */
    setDuration(
      /**
       * New value for property `duration`
       */
      iDuration?: int
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getPlacement placement}.
     *
     * Defines the placement of the component.
     *
     *  Available options are:
     * 	 - `TopStart`
     * 	 - `TopCenter`
     * 	 - `TopEnd`
     * 	 - `MiddleStart`
     * 	 - `MiddleCenter`
     * 	 - `MiddleEnd`
     * 	 - `BottomStart`
     * 	 - `BottomCenter`
     * 	 - `BottomEnd`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `BottomCenter`.
     */
    setPlacement(
      /**
       * New value for property `placement`
       */
      sPlacement?: ToastPlacement | keyof typeof ToastPlacement
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Shows the component.
     */
    show(): void;
  }

  export interface $ToastSettings extends $WebComponentSettings {
    /**
     * Defines the duration in milliseconds for which component remains on the screen before it's automatically
     * closed.
     *
     *  **Note:** The minimum supported value is `500` ms and even if a lower value is set, the duration would
     * remain `500` ms.
     */
    duration?: int | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the placement of the component.
     *
     *  Available options are:
     * 	 - `TopStart`
     * 	 - `TopCenter`
     * 	 - `TopEnd`
     * 	 - `MiddleStart`
     * 	 - `MiddleCenter`
     * 	 - `MiddleEnd`
     * 	 - `BottomStart`
     * 	 - `BottomCenter`
     * 	 - `BottomEnd`
     */
    placement?:
      | (ToastPlacement | keyof typeof ToastPlacement)
      | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;
  }
}

declare module "sap/ui/webc/main/ToggleButton" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Event from "sap/ui/base/Event";

  import { ButtonDesign } from "sap/ui/webc/main/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * The `sap.ui.webc.main.ToggleButton` component is an enhanced `sap.ui.webc.main.Button` that can be toggled
   * between pressed and normal states. Users can use the `sap.ui.webc.main.ToggleButton` as a switch to turn
   * a setting on or off. It can also be used to represent an independent choice similar to a check box.
   *
   *  Clicking or tapping on a `sap.ui.webc.main.ToggleButton` changes its state to `pressed`. The button
   * returns to its initial state when the user clicks or taps on it again. By applying additional custom
   * CSS-styling classes, apps can give a different style to any `sap.ui.webc.main.ToggleButton`.
   */
  export default class ToggleButton extends WebComponent {
    /**
     * Constructor for a new `ToggleButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToggleButtonSettings
    );
    /**
     * Constructor for a new `ToggleButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToggleButtonSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.ToggleButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ToggleButton` itself.
     *
     * Fired when the component is activated either with a mouse/tap or by using the Enter or Space key.
     *
     *  **Note:** The event will not be fired if the `disabled` property is set to `true`.
     */
    attachClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ToggleButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.webc.main.ToggleButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.ToggleButton` itself.
     *
     * Fired when the component is activated either with a mouse/tap or by using the Enter or Space key.
     *
     *  **Note:** The event will not be fired if the `disabled` property is set to `true`.
     */
    attachClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.ToggleButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.webc.main.ToggleButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.ToggleButton with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ToggleButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:click click} to attached listeners.
     */
    fireClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Defines the component design.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Default`
     * 	 - `Emphasized`
     * 	 - `Positive`
     * 	 - `Negative`
     * 	 - `Transparent`
     *
     * Default value is `Default`.
     */
    getDesign(): ButtonDesign | keyof typeof ButtonDesign;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled (default is set to `false`). A disabled component can't be
     * pressed or focused, and it is not in the tab chain.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed as graphical element within the component. The SAP-icons font provides
     * numerous options.
     *
     *  Example:
     *
     * See all the available icons in the Icon Explorer.
     *
     * Default value is `empty string`.
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getIconEnd iconEnd}.
     *
     * Defines whether the icon should be displayed after the component text.
     *
     * Default value is `false`.
     */
    getIconEnd(): boolean;
    /**
     * Returns a metadata object for class sap.ui.webc.main.ToggleButton.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getPressed pressed}.
     *
     * Determines whether the component is displayed as pressed.
     *
     * Default value is `false`.
     */
    getPressed(): boolean;
    /**
     * Gets current value of property {@link #getSubmits submits}.
     *
     * Default value is `false`.
     */
    getSubmits(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Defines the component design.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Default`
     * 	 - `Emphasized`
     * 	 - `Positive`
     * 	 - `Negative`
     * 	 - `Transparent`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: ButtonDesign | keyof typeof ButtonDesign
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Defines whether the component is disabled (default is set to `false`). A disabled component can't be
     * pressed or focused, and it is not in the tab chain.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed as graphical element within the component. The SAP-icons font provides
     * numerous options.
     *
     *  Example:
     *
     * See all the available icons in the Icon Explorer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIconEnd iconEnd}.
     *
     * Defines whether the icon should be displayed after the component text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setIconEnd(
      /**
       * New value for property `iconEnd`
       */
      bIconEnd?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPressed pressed}.
     *
     * Determines whether the component is displayed as pressed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setPressed(
      /**
       * New value for property `pressed`
       */
      bPressed?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSubmits submits}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSubmits(
      /**
       * New value for property `submits`
       */
      bSubmits?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the content of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $ToggleButtonSettings extends $WebComponentSettings {
    /**
     * Defines the component design.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `Default`
     * 	 - `Emphasized`
     * 	 - `Positive`
     * 	 - `Negative`
     * 	 - `Transparent`
     */
    design?: (ButtonDesign | keyof typeof ButtonDesign) | PropertyBindingInfo;

    /**
     * Defines whether the component is disabled (default is set to `false`). A disabled component can't be
     * pressed or focused, and it is not in the tab chain.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed as graphical element within the component. The SAP-icons font provides
     * numerous options.
     *
     *  Example:
     *
     * See all the available icons in the Icon Explorer.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Defines whether the icon should be displayed after the component text.
     */
    iconEnd?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the component is displayed as pressed.
     */
    pressed?: boolean | PropertyBindingInfo;

    submits?: boolean | PropertyBindingInfo;

    /**
     * Defines the content of the control
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fired when the component is activated either with a mouse/tap or by using the Enter or Space key.
     *
     *  **Note:** The event will not be fired if the `disabled` property is set to `true`.
     */
    click?: Function;
  }
}

declare module "sap/ui/webc/main/Token" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { IToken, IIcon } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview:
   *
   * Tokens are small items of information (similar to tags) that mainly serve to visualize previously selected
   * items.
   */
  export default class Token extends WebComponent implements IToken {
    __implements__sap_ui_webc_main_IToken: boolean;
    /**
     * Constructor for a new `Token`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TokenSettings
    );
    /**
     * Constructor for a new `Token`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TokenSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.webc.main.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Token` itself.
     *
     * Fired when the the component is selected by user interaction with mouse or by clicking space.
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Token` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.webc.main.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Token` itself.
     *
     * Fired when the the component is selected by user interaction with mouse or by clicking space.
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Token` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the closeIcon in the aggregation {@link #getCloseIcon closeIcon}.
     */
    destroyCloseIcon(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.ui.webc.main.Token`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Token with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Token>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getCloseIcon closeIcon}.
     *
     * Defines the close icon for the token. If nothing is provided to this slot, the default close icon will
     * be used. Accepts `sap.ui.webc.main.Icon`
     */
    getCloseIcon(): IIcon;
    /**
     * Returns a metadata object for class sap.ui.webc.main.Token.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component can not be deleted or selected, but still provides visual feedback upon
     * user interaction.
     */
    getReadonly(): boolean;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines whether the component is selected or not.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text of the token.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Sets the aggregated {@link #getCloseIcon closeIcon}.
     */
    setCloseIcon(
      /**
       * The closeIcon to set
       */
      oCloseIcon: IIcon
    ): this;
    /**
     * Sets a new value for property {@link #getReadonly readonly}.
     *
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component can not be deleted or selected, but still provides visual feedback upon
     * user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setReadonly(
      /**
       * New value for property `readonly`
       */
      bReadonly: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines whether the component is selected or not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text of the token.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $TokenSettings extends $WebComponentSettings {
    /**
     * Defines whether the component is read-only.
     *
     *  **Note:** A read-only component can not be deleted or selected, but still provides visual feedback upon
     * user interaction.
     */
    readonly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the component is selected or not.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the text of the token.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the close icon for the token. If nothing is provided to this slot, the default close icon will
     * be used. Accepts `sap.ui.webc.main.Icon`
     */
    closeIcon?: IIcon;

    /**
     * Fired when the the component is selected by user interaction with mouse or by clicking space.
     */
    select?: Function;
  }
}

declare module "sap/ui/webc/main/Tree" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import Control from "sap/ui/core/Control";

  import { ITreeItem, ListMode } from "sap/ui/webc/main/library";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: The `sap.ui.webc.main.Tree` component provides a tree structure for displaying data in a hierarchy.
   *
   * Usage:
   *
   * When to use::
   * 	 - To display hierarchically structured items.
   * 	 - To select one or more items out of a set of hierarchically structured items.
   *
   * When not to use::
   * 	 - To display items not hierarchically strcutured. In this case, use the List component.
   * 	 - To select one item from a very small number of non-hierarchical items. Select or ComboBox might be
   * 			more appropriate.
   * 	 - The hierarchy turns out to have only two levels. In this case, use List with group items.
   *
   * Keyboard Handling:
   *
   * The `sap.ui.webc.main.Tree` provides advanced keyboard handling. The user can use the following keyboard
   * shortcuts in order to navigate trough the tree:
   * 	 - [UP/DOWN] - Navigates up and down the tree items that are currently visible.
   * 	 - [RIGHT] - Drills down the tree by expanding the tree nodes.
   * 	 - [LEFT] - Goes up the tree and collapses the tree nodes.
   *
   *
   * The user can use the following keyboard shortcuts to perform selection, when the `mode` property is in
   * use:
   * 	 - [SPACE] - Selects the currently focused item upon keyup.
   * 	 - [ENTER] - Selects the currently focused item upon keydown.
   */
  export default class Tree extends WebComponent {
    /**
     * Constructor for a new `Tree`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TreeSettings
    );
    /**
     * Constructor for a new `Tree`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TreeSettings
    );

    /**
     * Adds some header to the aggregation {@link #getHeader header}.
     */
    addHeader(
      /**
       * The header to add; if empty, nothing is inserted
       */
      oHeader: Control
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: ITreeItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemClick itemClick} event of this `sap.ui.webc.main.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Tree` itself.
     *
     * Fired when a tree item is activated.
     */
    attachItemClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Tree` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemClick itemClick} event of this `sap.ui.webc.main.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Tree` itself.
     *
     * Fired when a tree item is activated.
     */
    attachItemClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Tree` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemDelete itemDelete} event of this `sap.ui.webc.main.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Tree` itself.
     *
     * Fired when the Delete button of any tree item is pressed.
     *
     *  **Note:** A Delete button is displayed on each item, when the component `mode` property is set to `Delete`.
     */
    attachItemDelete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Tree` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemDelete itemDelete} event of this `sap.ui.webc.main.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Tree` itself.
     *
     * Fired when the Delete button of any tree item is pressed.
     *
     *  **Note:** A Delete button is displayed on each item, when the component `mode` property is set to `Delete`.
     */
    attachItemDelete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Tree` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemToggle itemToggle} event of this `sap.ui.webc.main.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Tree` itself.
     *
     * Fired when a tree item is expanded or collapsed. Note: You can call `preventDefault()` on the
     * event object to suppress the event, if needed. This may be handy for example if you want to dynamically
     * load tree items upon the user expanding a node. Even if you prevented the event's default behavior, you
     * can always manually call `toggle()` on a tree item.
     */
    attachItemToggle(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Tree` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemToggle itemToggle} event of this `sap.ui.webc.main.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Tree` itself.
     *
     * Fired when a tree item is expanded or collapsed. Note: You can call `preventDefault()` on the
     * event object to suppress the event, if needed. This may be handy for example if you want to dynamically
     * load tree items upon the user expanding a node. Even if you prevented the event's default behavior, you
     * can always manually call `toggle()` on a tree item.
     */
    attachItemToggle(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Tree` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Tree` itself.
     *
     * Fired when selection is changed by user interaction in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`
     * and `MultiSelect` modes.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Tree` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.ui.webc.main.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.webc.main.Tree` itself.
     *
     * Fired when selection is changed by user interaction in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`
     * and `MultiSelect` modes.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.webc.main.Tree` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the header in the aggregation {@link #getHeader header}.
     */
    destroyHeader(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemClick itemClick} event of this `sap.ui.webc.main.Tree`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemDelete itemDelete} event of this `sap.ui.webc.main.Tree`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemDelete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemToggle itemToggle} event of this `sap.ui.webc.main.Tree`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemToggle(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.ui.webc.main.Tree`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.Tree with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tree>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:itemClick itemClick} to attached listeners.
     */
    fireItemClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The clicked item.
         */
        item?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:itemDelete itemDelete} to attached listeners.
     */
    fireItemDelete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the deleted item.
         */
        item?: HTMLElement;
      }
    ): this;
    /**
     * Fires event {@link #event:itemToggle itemToggle} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireItemToggle(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * the toggled item.
         */
        item?: HTMLElement;
      }
    ): boolean;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * An array of the selected items.
         */
        selectedItems?: any[];
        /**
         * An array of the previously selected items.
         */
        previouslySelectedItems?: any[];
      }
    ): this;
    /**
     * Gets current value of property {@link #getFooterText footerText}.
     *
     * Defines the component footer text.
     *
     * Default value is `empty string`.
     */
    getFooterText(): string;
    /**
     * Gets content of aggregation {@link #getHeader header}.
     *
     * Defines the component header.
     *
     *  **Note:** When the `header` slot is set, the `headerText` property is ignored.
     */
    getHeader(): Control[];
    /**
     * Gets current value of property {@link #getHeaderText headerText}.
     *
     * Defines the component header text.
     *
     *  **Note:** If the `header` slot is set, this property is ignored.
     *
     * Default value is `empty string`.
     */
    getHeaderText(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control
     */
    getHeight(): CSSSize;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the items of the component. Tree items may have other tree items as children.
     *
     *  **Note:** Use `sap.ui.webc.main.TreeItem` for the intended design.
     */
    getItems(): ITreeItem[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.Tree.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Defines the mode of the component. Since the tree uses a `sap.ui.webc.main.List` to display its structure,
     * the tree modes are exactly the same as the list modes, and are all applicable.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `None`
     * 	 - `SingleSelect`
     * 	 - `SingleSelectBegin`
     * 	 - `SingleSelectEnd`
     * 	 - `MultiSelect`
     * 	 - `Delete`
     *
     * Default value is `None`.
     */
    getMode(): ListMode | keyof typeof ListMode;
    /**
     * Gets current value of property {@link #getNoDataText noDataText}.
     *
     * Defines the text that is displayed when the component contains no items.
     *
     * Default value is `empty string`.
     */
    getNoDataText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getHeader header}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfHeader(
      /**
       * The header whose index is looked for
       */
      oHeader: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.webc.main.ITreeItem` in the aggregation {@link #getItems items}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: ITreeItem
    ): int;
    /**
     * Inserts a header into the aggregation {@link #getHeader header}.
     */
    insertHeader(
      /**
       * The header to insert; if empty, nothing is inserted
       */
      oHeader: Control,
      /**
       * The `0`-based index the header should be inserted at; for a negative value of `iIndex`, the header is
       * inserted at position 0; for a value greater than the current size of the aggregation, the header is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: ITreeItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getHeader header}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeader(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): ITreeItem[];
    /**
     * Removes a header from the aggregation {@link #getHeader header}.
     */
    removeHeader(
      /**
       * The header to remove or its index or id
       */
      vHeader: int | string | Control
    ): Control;
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | ITreeItem
    ): ITreeItem;
    /**
     * Sets a new value for property {@link #getFooterText footerText}.
     *
     * Defines the component footer text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFooterText(
      /**
       * New value for property `footerText`
       */
      sFooterText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderText headerText}.
     *
     * Defines the component header text.
     *
     *  **Note:** If the `header` slot is set, this property is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeaderText(
      /**
       * New value for property `headerText`
       */
      sHeaderText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Defines the mode of the component. Since the tree uses a `sap.ui.webc.main.List` to display its structure,
     * the tree modes are exactly the same as the list modes, and are all applicable.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `None`
     * 	 - `SingleSelect`
     * 	 - `SingleSelectBegin`
     * 	 - `SingleSelectEnd`
     * 	 - `MultiSelect`
     * 	 - `Delete`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: ListMode | keyof typeof ListMode
    ): this;
    /**
     * Sets a new value for property {@link #getNoDataText noDataText}.
     *
     * Defines the text that is displayed when the component contains no items.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setNoDataText(
      /**
       * New value for property `noDataText`
       */
      sNoDataText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Perform Depth-First-Search walk on the tree and run a callback on each node
     */
    walk(
      /**
       * function to execute on each node of the tree with 2 arguments: the node and the level
       */
      callback: Function
    ): void;
  }

  export interface $TreeSettings extends $WebComponentSettings {
    /**
     * Defines the component footer text.
     */
    footerText?: string | PropertyBindingInfo;

    /**
     * Defines the component header text.
     *
     *  **Note:** If the `header` slot is set, this property is ignored.
     */
    headerText?: string | PropertyBindingInfo;

    /**
     * Defines the height of the control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the mode of the component. Since the tree uses a `sap.ui.webc.main.List` to display its structure,
     * the tree modes are exactly the same as the list modes, and are all applicable.
     *
     *
     *
     *  **Note:**
     *
     *
     * 	 - `None`
     * 	 - `SingleSelect`
     * 	 - `SingleSelectBegin`
     * 	 - `SingleSelectEnd`
     * 	 - `MultiSelect`
     * 	 - `Delete`
     */
    mode?: (ListMode | keyof typeof ListMode) | PropertyBindingInfo;

    /**
     * Defines the text that is displayed when the component contains no items.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the component header.
     *
     *  **Note:** When the `header` slot is set, the `headerText` property is ignored.
     */
    header?: Control[] | Control | AggregationBindingInfo;

    /**
     * Defines the items of the component. Tree items may have other tree items as children.
     *
     *  **Note:** Use `sap.ui.webc.main.TreeItem` for the intended design.
     */
    items?: ITreeItem[] | ITreeItem | AggregationBindingInfo;

    /**
     * Fired when a tree item is activated.
     */
    itemClick?: Function;

    /**
     * Fired when the Delete button of any tree item is pressed.
     *
     *  **Note:** A Delete button is displayed on each item, when the component `mode` property is set to `Delete`.
     */
    itemDelete?: Function;

    /**
     * Fired when a tree item is expanded or collapsed. Note: You can call `preventDefault()` on the
     * event object to suppress the event, if needed. This may be handy for example if you want to dynamically
     * load tree items upon the user expanding a node. Even if you prevented the event's default behavior, you
     * can always manually call `toggle()` on a tree item.
     */
    itemToggle?: Function;

    /**
     * Fired when selection is changed by user interaction in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`
     * and `MultiSelect` modes.
     */
    selectionChange?: Function;
  }
}

declare module "sap/ui/webc/main/TreeItem" {
  import {
    default as WebComponent,
    $WebComponentSettings,
  } from "sap/ui/webc/common/WebComponent";

  import { ITreeItem } from "sap/ui/webc/main/library";

  import { ValueState } from "sap/ui/core/library";

  import WebComponentMetadata from "sap/ui/webc/common/WebComponentMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.92.0
   * @EXPERIMENTAL (since 1.92.0)
   *
   * Overview: This is the item to use inside a `sap.ui.webc.main.Tree`. You can represent an arbitrary tree
   * structure by recursively nesting tree items.
   *
   * Usage: `sap.ui.webc.main.TreeItem` is an abstract element, representing a node in a `sap.ui.webc.main.Tree`.
   * The tree itself is rendered as a list, and each `sap.ui.webc.main.TreeItem` is represented by a list
   * item(`sap.ui.webc.main.TreeListItem`) in that list. Therefore, you should only use `sap.ui.webc.main.TreeItem`
   * directly in your apps. The `sap.ui.webc.main.TreeListItem` list item is internal for the list, and not
   * intended for public use.
   */
  export default class TreeItem extends WebComponent implements ITreeItem {
    __implements__sap_ui_webc_main_ITreeItem: boolean;
    /**
     * Constructor for a new `TreeItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TreeItemSettings
    );
    /**
     * Constructor for a new `TreeItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TreeItemSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: ITreeItem
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Creates a new subclass of class sap.ui.webc.main.TreeItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.webc.common.WebComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TreeItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAdditionalText additionalText}.
     *
     * Defines the `additionalText`, displayed in the end of the tree item.
     */
    getAdditionalText(): string;
    /**
     * Gets current value of property {@link #getAdditionalTextState additionalTextState}.
     *
     * Defines the state of the `additionalText`.
     *  Available options are: `"None"` (by default), `"Success"`, `"Warning"`, `"Information"` and `"Erorr"`.
     *
     * Default value is `None`.
     */
    getAdditionalTextState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getExpanded expanded}.
     *
     * Defines whether the tree node is expanded or collapsed. Only has visual effect for tree nodes with children.
     *
     * Default value is `false`.
     */
    getExpanded(): boolean;
    /**
     * Gets current value of property {@link #getHasChildren hasChildren}.
     *
     * Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.
     *
     *  Note: This property is useful for showing big tree structures where not all nodes are initially
     * loaded due to performance reasons. Set this to `true` for nodes you intend to load lazily, when the user
     * clicks the expand button. It is not necessary to set this property otherwise. If a tree item has children,
     * the expand button will be displayed anyway.
     *
     * Default value is `false`.
     */
    getHasChildren(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * If set, an icon will be displayed before the text, representing the tree item.
     *
     * Default value is `empty string`.
     */
    getIcon(): string;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the items of this component.
     */
    getItems(): ITreeItem[];
    /**
     * Returns a metadata object for class sap.ui.webc.main.TreeItem.
     */
    static getMetadata(): WebComponentMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines whether the tree node is selected by the user. Only has effect if the `sap.ui.webc.main.Tree`
     * is in one of the following modes: in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect`.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text of the tree item.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Checks for the provided `sap.ui.webc.main.ITreeItem` in the aggregation {@link #getItems items}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: ITreeItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: ITreeItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): ITreeItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | ITreeItem
    ): ITreeItem;
    /**
     * Sets a new value for property {@link #getAdditionalText additionalText}.
     *
     * Defines the `additionalText`, displayed in the end of the tree item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAdditionalText(
      /**
       * New value for property `additionalText`
       */
      sAdditionalText: string
    ): this;
    /**
     * Sets a new value for property {@link #getAdditionalTextState additionalTextState}.
     *
     * Defines the state of the `additionalText`.
     *  Available options are: `"None"` (by default), `"Success"`, `"Warning"`, `"Information"` and `"Erorr"`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setAdditionalTextState(
      /**
       * New value for property `additionalTextState`
       */
      sAdditionalTextState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getExpanded expanded}.
     *
     * Defines whether the tree node is expanded or collapsed. Only has visual effect for tree nodes with children.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setExpanded(
      /**
       * New value for property `expanded`
       */
      bExpanded?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHasChildren hasChildren}.
     *
     * Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.
     *
     *  Note: This property is useful for showing big tree structures where not all nodes are initially
     * loaded due to performance reasons. Set this to `true` for nodes you intend to load lazily, when the user
     * clicks the expand button. It is not necessary to set this property otherwise. If a tree item has children,
     * the expand button will be displayed anyway.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHasChildren(
      /**
       * New value for property `hasChildren`
       */
      bHasChildren?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * If set, an icon will be displayed before the text, representing the tree item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines whether the tree node is selected by the user. Only has effect if the `sap.ui.webc.main.Tree`
     * is in one of the following modes: in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text of the tree item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Call this method to manually switch the `expanded` state of a tree item.
     */
    toggle(): void;
  }

  export interface $TreeItemSettings extends $WebComponentSettings {
    /**
     * Defines the `additionalText`, displayed in the end of the tree item.
     */
    additionalText?: string | PropertyBindingInfo;

    /**
     * Defines the state of the `additionalText`.
     *  Available options are: `"None"` (by default), `"Success"`, `"Warning"`, `"Information"` and `"Erorr"`.
     */
    additionalTextState?:
      | (ValueState | keyof typeof ValueState)
      | PropertyBindingInfo;

    /**
     * Defines whether the tree node is expanded or collapsed. Only has visual effect for tree nodes with children.
     */
    expanded?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.
     *
     *  Note: This property is useful for showing big tree structures where not all nodes are initially
     * loaded due to performance reasons. Set this to `true` for nodes you intend to load lazily, when the user
     * clicks the expand button. It is not necessary to set this property otherwise. If a tree item has children,
     * the expand button will be displayed anyway.
     */
    hasChildren?: boolean | PropertyBindingInfo;

    /**
     * If set, an icon will be displayed before the text, representing the tree item.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Defines whether the tree node is selected by the user. Only has effect if the `sap.ui.webc.main.Tree`
     * is in one of the following modes: in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect`.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the text of the tree item.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the items of this component.
     */
    items?: ITreeItem[] | ITreeItem | AggregationBindingInfo;
  }
}

declare namespace sap {
  interface IUI5DefineDependencyNames {
    "sap/ui/webc/main/Avatar": undefined;

    "sap/ui/webc/main/AvatarGroup": undefined;

    "sap/ui/webc/main/Badge": undefined;

    "sap/ui/webc/main/BusyIndicator": undefined;

    "sap/ui/webc/main/Button": undefined;

    "sap/ui/webc/main/Calendar": undefined;

    "sap/ui/webc/main/CalendarDate": undefined;

    "sap/ui/webc/main/Card": undefined;

    "sap/ui/webc/main/Carousel": undefined;

    "sap/ui/webc/main/CheckBox": undefined;

    "sap/ui/webc/main/ColorPalette": undefined;

    "sap/ui/webc/main/ColorPaletteItem": undefined;

    "sap/ui/webc/main/ColorPicker": undefined;

    "sap/ui/webc/main/ComboBox": undefined;

    "sap/ui/webc/main/ComboBoxItem": undefined;

    "sap/ui/webc/main/CustomListItem": undefined;

    "sap/ui/webc/main/DatePicker": undefined;

    "sap/ui/webc/main/DateRangePicker": undefined;

    "sap/ui/webc/main/DateTimePicker": undefined;

    "sap/ui/webc/main/Dialog": undefined;

    "sap/ui/webc/main/DurationPicker": undefined;

    "sap/ui/webc/main/FileUploader": undefined;

    "sap/ui/webc/main/GroupHeaderListItem": undefined;

    "sap/ui/webc/main/Icon": undefined;

    "sap/ui/webc/main/Input": undefined;

    "sap/ui/webc/main/Label": undefined;

    "sap/ui/webc/main/library": undefined;

    "sap/ui/webc/main/Link": undefined;

    "sap/ui/webc/main/List": undefined;

    "sap/ui/webc/main/MessageStrip": undefined;

    "sap/ui/webc/main/MultiComboBox": undefined;

    "sap/ui/webc/main/MultiComboBoxItem": undefined;

    "sap/ui/webc/main/MultiInput": undefined;

    "sap/ui/webc/main/Option": undefined;

    "sap/ui/webc/main/Panel": undefined;

    "sap/ui/webc/main/Popover": undefined;

    "sap/ui/webc/main/ProgressIndicator": undefined;

    "sap/ui/webc/main/RadioButton": undefined;

    "sap/ui/webc/main/RangeSlider": undefined;

    "sap/ui/webc/main/RatingIndicator": undefined;

    "sap/ui/webc/main/ResponsivePopover": undefined;

    "sap/ui/webc/main/SegmentedButton": undefined;

    "sap/ui/webc/main/Select": undefined;

    "sap/ui/webc/main/Slider": undefined;

    "sap/ui/webc/main/StandardListItem": undefined;

    "sap/ui/webc/main/StepInput": undefined;

    "sap/ui/webc/main/SuggestionItem": undefined;

    "sap/ui/webc/main/Switch": undefined;

    "sap/ui/webc/main/Tab": undefined;

    "sap/ui/webc/main/TabContainer": undefined;

    "sap/ui/webc/main/Table": undefined;

    "sap/ui/webc/main/TableCell": undefined;

    "sap/ui/webc/main/TableColumn": undefined;

    "sap/ui/webc/main/TableRow": undefined;

    "sap/ui/webc/main/TabSeparator": undefined;

    "sap/ui/webc/main/TextArea": undefined;

    "sap/ui/webc/main/TimePicker": undefined;

    "sap/ui/webc/main/Title": undefined;

    "sap/ui/webc/main/Toast": undefined;

    "sap/ui/webc/main/ToggleButton": undefined;

    "sap/ui/webc/main/Token": undefined;

    "sap/ui/webc/main/Tree": undefined;

    "sap/ui/webc/main/TreeItem": undefined;
  }
}
